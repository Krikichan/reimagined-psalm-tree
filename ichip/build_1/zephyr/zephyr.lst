
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00020200 <_vector_start>:
   20200:	200138c8 	.word	0x200138c8
   20204:	0002830d 	.word	0x0002830d
   20208:	0003c75d 	.word	0x0003c75d
   2020c:	000282c5 	.word	0x000282c5
   20210:	000282c5 	.word	0x000282c5
   20214:	000282c5 	.word	0x000282c5
   20218:	000282c5 	.word	0x000282c5
   2021c:	000282c5 	.word	0x000282c5
	...
   2022c:	0002799d 	.word	0x0002799d
   20230:	000282c5 	.word	0x000282c5
   20234:	00000000 	.word	0x00000000
   20238:	00027945 	.word	0x00027945
   2023c:	000282c5 	.word	0x000282c5

00020240 <_irq_vector_table>:
   20240:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20250:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20260:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20270:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20280:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20290:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   202a0:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   202b0:	0002aa71 00027a21 00027a21 00027a21     q...!z..!z..!z..
   202c0:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   202d0:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   202e0:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   202f0:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20300:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20310:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20320:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20330:	00027a21 00027a21 00027a21 00027a21     !z..!z..!z..!z..
   20340:	00027a21                                !z..

00020344 <_vector_end>:
	...

00020400 <m_firmware_info>:
   20400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   20410:	000263fc 00000001 00020200 00020200     .c..............
   20420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00020440 <__aeabi_fmul>:
   20440:	f04f 0cff 	mov.w	ip, #255	; 0xff
   20444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   20448:	bf1e      	ittt	ne
   2044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   2044e:	ea92 0f0c 	teqne	r2, ip
   20452:	ea93 0f0c 	teqne	r3, ip
   20456:	d06f      	beq.n	20538 <__aeabi_fmul+0xf8>
   20458:	441a      	add	r2, r3
   2045a:	ea80 0c01 	eor.w	ip, r0, r1
   2045e:	0240      	lsls	r0, r0, #9
   20460:	bf18      	it	ne
   20462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   20466:	d01e      	beq.n	204a6 <__aeabi_fmul+0x66>
   20468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   2046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   20470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   20474:	fba0 3101 	umull	r3, r1, r0, r1
   20478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   2047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   20480:	bf3e      	ittt	cc
   20482:	0049      	lslcc	r1, r1, #1
   20484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   20488:	005b      	lslcc	r3, r3, #1
   2048a:	ea40 0001 	orr.w	r0, r0, r1
   2048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   20492:	2afd      	cmp	r2, #253	; 0xfd
   20494:	d81d      	bhi.n	204d2 <__aeabi_fmul+0x92>
   20496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   2049e:	bf08      	it	eq
   204a0:	f020 0001 	biceq.w	r0, r0, #1
   204a4:	4770      	bx	lr
   204a6:	f090 0f00 	teq	r0, #0
   204aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   204ae:	bf08      	it	eq
   204b0:	0249      	lsleq	r1, r1, #9
   204b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   204b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   204ba:	3a7f      	subs	r2, #127	; 0x7f
   204bc:	bfc2      	ittt	gt
   204be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   204c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   204c6:	4770      	bxgt	lr
   204c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   204cc:	f04f 0300 	mov.w	r3, #0
   204d0:	3a01      	subs	r2, #1
   204d2:	dc5d      	bgt.n	20590 <__aeabi_fmul+0x150>
   204d4:	f112 0f19 	cmn.w	r2, #25
   204d8:	bfdc      	itt	le
   204da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   204de:	4770      	bxle	lr
   204e0:	f1c2 0200 	rsb	r2, r2, #0
   204e4:	0041      	lsls	r1, r0, #1
   204e6:	fa21 f102 	lsr.w	r1, r1, r2
   204ea:	f1c2 0220 	rsb	r2, r2, #32
   204ee:	fa00 fc02 	lsl.w	ip, r0, r2
   204f2:	ea5f 0031 	movs.w	r0, r1, rrx
   204f6:	f140 0000 	adc.w	r0, r0, #0
   204fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   204fe:	bf08      	it	eq
   20500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   20504:	4770      	bx	lr
   20506:	f092 0f00 	teq	r2, #0
   2050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   2050e:	bf02      	ittt	eq
   20510:	0040      	lsleq	r0, r0, #1
   20512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   20516:	3a01      	subeq	r2, #1
   20518:	d0f9      	beq.n	2050e <__aeabi_fmul+0xce>
   2051a:	ea40 000c 	orr.w	r0, r0, ip
   2051e:	f093 0f00 	teq	r3, #0
   20522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   20526:	bf02      	ittt	eq
   20528:	0049      	lsleq	r1, r1, #1
   2052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   2052e:	3b01      	subeq	r3, #1
   20530:	d0f9      	beq.n	20526 <__aeabi_fmul+0xe6>
   20532:	ea41 010c 	orr.w	r1, r1, ip
   20536:	e78f      	b.n	20458 <__aeabi_fmul+0x18>
   20538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   2053c:	ea92 0f0c 	teq	r2, ip
   20540:	bf18      	it	ne
   20542:	ea93 0f0c 	teqne	r3, ip
   20546:	d00a      	beq.n	2055e <__aeabi_fmul+0x11e>
   20548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   2054c:	bf18      	it	ne
   2054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   20552:	d1d8      	bne.n	20506 <__aeabi_fmul+0xc6>
   20554:	ea80 0001 	eor.w	r0, r0, r1
   20558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   2055c:	4770      	bx	lr
   2055e:	f090 0f00 	teq	r0, #0
   20562:	bf17      	itett	ne
   20564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   20568:	4608      	moveq	r0, r1
   2056a:	f091 0f00 	teqne	r1, #0
   2056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   20572:	d014      	beq.n	2059e <__aeabi_fmul+0x15e>
   20574:	ea92 0f0c 	teq	r2, ip
   20578:	d101      	bne.n	2057e <__aeabi_fmul+0x13e>
   2057a:	0242      	lsls	r2, r0, #9
   2057c:	d10f      	bne.n	2059e <__aeabi_fmul+0x15e>
   2057e:	ea93 0f0c 	teq	r3, ip
   20582:	d103      	bne.n	2058c <__aeabi_fmul+0x14c>
   20584:	024b      	lsls	r3, r1, #9
   20586:	bf18      	it	ne
   20588:	4608      	movne	r0, r1
   2058a:	d108      	bne.n	2059e <__aeabi_fmul+0x15e>
   2058c:	ea80 0001 	eor.w	r0, r0, r1
   20590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   20594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   2059c:	4770      	bx	lr
   2059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   205a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   205a6:	4770      	bx	lr

000205a8 <__aeabi_drsub>:
   205a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   205ac:	e002      	b.n	205b4 <__adddf3>
   205ae:	bf00      	nop

000205b0 <__aeabi_dsub>:
   205b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000205b4 <__adddf3>:
   205b4:	b530      	push	{r4, r5, lr}
   205b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   205ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   205be:	ea94 0f05 	teq	r4, r5
   205c2:	bf08      	it	eq
   205c4:	ea90 0f02 	teqeq	r0, r2
   205c8:	bf1f      	itttt	ne
   205ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   205ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   205d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   205d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   205da:	f000 80e2 	beq.w	207a2 <__adddf3+0x1ee>
   205de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   205e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   205e6:	bfb8      	it	lt
   205e8:	426d      	neglt	r5, r5
   205ea:	dd0c      	ble.n	20606 <__adddf3+0x52>
   205ec:	442c      	add	r4, r5
   205ee:	ea80 0202 	eor.w	r2, r0, r2
   205f2:	ea81 0303 	eor.w	r3, r1, r3
   205f6:	ea82 0000 	eor.w	r0, r2, r0
   205fa:	ea83 0101 	eor.w	r1, r3, r1
   205fe:	ea80 0202 	eor.w	r2, r0, r2
   20602:	ea81 0303 	eor.w	r3, r1, r3
   20606:	2d36      	cmp	r5, #54	; 0x36
   20608:	bf88      	it	hi
   2060a:	bd30      	pophi	{r4, r5, pc}
   2060c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   20610:	ea4f 3101 	mov.w	r1, r1, lsl #12
   20614:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   20618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   2061c:	d002      	beq.n	20624 <__adddf3+0x70>
   2061e:	4240      	negs	r0, r0
   20620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20624:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   20628:	ea4f 3303 	mov.w	r3, r3, lsl #12
   2062c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   20630:	d002      	beq.n	20638 <__adddf3+0x84>
   20632:	4252      	negs	r2, r2
   20634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   20638:	ea94 0f05 	teq	r4, r5
   2063c:	f000 80a7 	beq.w	2078e <__adddf3+0x1da>
   20640:	f1a4 0401 	sub.w	r4, r4, #1
   20644:	f1d5 0e20 	rsbs	lr, r5, #32
   20648:	db0d      	blt.n	20666 <__adddf3+0xb2>
   2064a:	fa02 fc0e 	lsl.w	ip, r2, lr
   2064e:	fa22 f205 	lsr.w	r2, r2, r5
   20652:	1880      	adds	r0, r0, r2
   20654:	f141 0100 	adc.w	r1, r1, #0
   20658:	fa03 f20e 	lsl.w	r2, r3, lr
   2065c:	1880      	adds	r0, r0, r2
   2065e:	fa43 f305 	asr.w	r3, r3, r5
   20662:	4159      	adcs	r1, r3
   20664:	e00e      	b.n	20684 <__adddf3+0xd0>
   20666:	f1a5 0520 	sub.w	r5, r5, #32
   2066a:	f10e 0e20 	add.w	lr, lr, #32
   2066e:	2a01      	cmp	r2, #1
   20670:	fa03 fc0e 	lsl.w	ip, r3, lr
   20674:	bf28      	it	cs
   20676:	f04c 0c02 	orrcs.w	ip, ip, #2
   2067a:	fa43 f305 	asr.w	r3, r3, r5
   2067e:	18c0      	adds	r0, r0, r3
   20680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   20684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   20688:	d507      	bpl.n	2069a <__adddf3+0xe6>
   2068a:	f04f 0e00 	mov.w	lr, #0
   2068e:	f1dc 0c00 	rsbs	ip, ip, #0
   20692:	eb7e 0000 	sbcs.w	r0, lr, r0
   20696:	eb6e 0101 	sbc.w	r1, lr, r1
   2069a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   2069e:	d31b      	bcc.n	206d8 <__adddf3+0x124>
   206a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   206a4:	d30c      	bcc.n	206c0 <__adddf3+0x10c>
   206a6:	0849      	lsrs	r1, r1, #1
   206a8:	ea5f 0030 	movs.w	r0, r0, rrx
   206ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   206b0:	f104 0401 	add.w	r4, r4, #1
   206b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   206b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   206bc:	f080 809a 	bcs.w	207f4 <__adddf3+0x240>
   206c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   206c4:	bf08      	it	eq
   206c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   206ca:	f150 0000 	adcs.w	r0, r0, #0
   206ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   206d2:	ea41 0105 	orr.w	r1, r1, r5
   206d6:	bd30      	pop	{r4, r5, pc}
   206d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   206dc:	4140      	adcs	r0, r0
   206de:	eb41 0101 	adc.w	r1, r1, r1
   206e2:	3c01      	subs	r4, #1
   206e4:	bf28      	it	cs
   206e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   206ea:	d2e9      	bcs.n	206c0 <__adddf3+0x10c>
   206ec:	f091 0f00 	teq	r1, #0
   206f0:	bf04      	itt	eq
   206f2:	4601      	moveq	r1, r0
   206f4:	2000      	moveq	r0, #0
   206f6:	fab1 f381 	clz	r3, r1
   206fa:	bf08      	it	eq
   206fc:	3320      	addeq	r3, #32
   206fe:	f1a3 030b 	sub.w	r3, r3, #11
   20702:	f1b3 0220 	subs.w	r2, r3, #32
   20706:	da0c      	bge.n	20722 <__adddf3+0x16e>
   20708:	320c      	adds	r2, #12
   2070a:	dd08      	ble.n	2071e <__adddf3+0x16a>
   2070c:	f102 0c14 	add.w	ip, r2, #20
   20710:	f1c2 020c 	rsb	r2, r2, #12
   20714:	fa01 f00c 	lsl.w	r0, r1, ip
   20718:	fa21 f102 	lsr.w	r1, r1, r2
   2071c:	e00c      	b.n	20738 <__adddf3+0x184>
   2071e:	f102 0214 	add.w	r2, r2, #20
   20722:	bfd8      	it	le
   20724:	f1c2 0c20 	rsble	ip, r2, #32
   20728:	fa01 f102 	lsl.w	r1, r1, r2
   2072c:	fa20 fc0c 	lsr.w	ip, r0, ip
   20730:	bfdc      	itt	le
   20732:	ea41 010c 	orrle.w	r1, r1, ip
   20736:	4090      	lslle	r0, r2
   20738:	1ae4      	subs	r4, r4, r3
   2073a:	bfa2      	ittt	ge
   2073c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   20740:	4329      	orrge	r1, r5
   20742:	bd30      	popge	{r4, r5, pc}
   20744:	ea6f 0404 	mvn.w	r4, r4
   20748:	3c1f      	subs	r4, #31
   2074a:	da1c      	bge.n	20786 <__adddf3+0x1d2>
   2074c:	340c      	adds	r4, #12
   2074e:	dc0e      	bgt.n	2076e <__adddf3+0x1ba>
   20750:	f104 0414 	add.w	r4, r4, #20
   20754:	f1c4 0220 	rsb	r2, r4, #32
   20758:	fa20 f004 	lsr.w	r0, r0, r4
   2075c:	fa01 f302 	lsl.w	r3, r1, r2
   20760:	ea40 0003 	orr.w	r0, r0, r3
   20764:	fa21 f304 	lsr.w	r3, r1, r4
   20768:	ea45 0103 	orr.w	r1, r5, r3
   2076c:	bd30      	pop	{r4, r5, pc}
   2076e:	f1c4 040c 	rsb	r4, r4, #12
   20772:	f1c4 0220 	rsb	r2, r4, #32
   20776:	fa20 f002 	lsr.w	r0, r0, r2
   2077a:	fa01 f304 	lsl.w	r3, r1, r4
   2077e:	ea40 0003 	orr.w	r0, r0, r3
   20782:	4629      	mov	r1, r5
   20784:	bd30      	pop	{r4, r5, pc}
   20786:	fa21 f004 	lsr.w	r0, r1, r4
   2078a:	4629      	mov	r1, r5
   2078c:	bd30      	pop	{r4, r5, pc}
   2078e:	f094 0f00 	teq	r4, #0
   20792:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   20796:	bf06      	itte	eq
   20798:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   2079c:	3401      	addeq	r4, #1
   2079e:	3d01      	subne	r5, #1
   207a0:	e74e      	b.n	20640 <__adddf3+0x8c>
   207a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   207a6:	bf18      	it	ne
   207a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   207ac:	d029      	beq.n	20802 <__adddf3+0x24e>
   207ae:	ea94 0f05 	teq	r4, r5
   207b2:	bf08      	it	eq
   207b4:	ea90 0f02 	teqeq	r0, r2
   207b8:	d005      	beq.n	207c6 <__adddf3+0x212>
   207ba:	ea54 0c00 	orrs.w	ip, r4, r0
   207be:	bf04      	itt	eq
   207c0:	4619      	moveq	r1, r3
   207c2:	4610      	moveq	r0, r2
   207c4:	bd30      	pop	{r4, r5, pc}
   207c6:	ea91 0f03 	teq	r1, r3
   207ca:	bf1e      	ittt	ne
   207cc:	2100      	movne	r1, #0
   207ce:	2000      	movne	r0, #0
   207d0:	bd30      	popne	{r4, r5, pc}
   207d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   207d6:	d105      	bne.n	207e4 <__adddf3+0x230>
   207d8:	0040      	lsls	r0, r0, #1
   207da:	4149      	adcs	r1, r1
   207dc:	bf28      	it	cs
   207de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   207e2:	bd30      	pop	{r4, r5, pc}
   207e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   207e8:	bf3c      	itt	cc
   207ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   207ee:	bd30      	popcc	{r4, r5, pc}
   207f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   207f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   207f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   207fc:	f04f 0000 	mov.w	r0, #0
   20800:	bd30      	pop	{r4, r5, pc}
   20802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   20806:	bf1a      	itte	ne
   20808:	4619      	movne	r1, r3
   2080a:	4610      	movne	r0, r2
   2080c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   20810:	bf1c      	itt	ne
   20812:	460b      	movne	r3, r1
   20814:	4602      	movne	r2, r0
   20816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   2081a:	bf06      	itte	eq
   2081c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   20820:	ea91 0f03 	teqeq	r1, r3
   20824:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   20828:	bd30      	pop	{r4, r5, pc}
   2082a:	bf00      	nop

0002082c <__aeabi_ui2d>:
   2082c:	f090 0f00 	teq	r0, #0
   20830:	bf04      	itt	eq
   20832:	2100      	moveq	r1, #0
   20834:	4770      	bxeq	lr
   20836:	b530      	push	{r4, r5, lr}
   20838:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2083c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   20840:	f04f 0500 	mov.w	r5, #0
   20844:	f04f 0100 	mov.w	r1, #0
   20848:	e750      	b.n	206ec <__adddf3+0x138>
   2084a:	bf00      	nop

0002084c <__aeabi_i2d>:
   2084c:	f090 0f00 	teq	r0, #0
   20850:	bf04      	itt	eq
   20852:	2100      	moveq	r1, #0
   20854:	4770      	bxeq	lr
   20856:	b530      	push	{r4, r5, lr}
   20858:	f44f 6480 	mov.w	r4, #1024	; 0x400
   2085c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   20860:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   20864:	bf48      	it	mi
   20866:	4240      	negmi	r0, r0
   20868:	f04f 0100 	mov.w	r1, #0
   2086c:	e73e      	b.n	206ec <__adddf3+0x138>
   2086e:	bf00      	nop

00020870 <__aeabi_f2d>:
   20870:	0042      	lsls	r2, r0, #1
   20872:	ea4f 01e2 	mov.w	r1, r2, asr #3
   20876:	ea4f 0131 	mov.w	r1, r1, rrx
   2087a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   2087e:	bf1f      	itttt	ne
   20880:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   20884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   20888:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   2088c:	4770      	bxne	lr
   2088e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   20892:	bf08      	it	eq
   20894:	4770      	bxeq	lr
   20896:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   2089a:	bf04      	itt	eq
   2089c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   208a0:	4770      	bxeq	lr
   208a2:	b530      	push	{r4, r5, lr}
   208a4:	f44f 7460 	mov.w	r4, #896	; 0x380
   208a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   208ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   208b0:	e71c      	b.n	206ec <__adddf3+0x138>
   208b2:	bf00      	nop

000208b4 <__aeabi_ul2d>:
   208b4:	ea50 0201 	orrs.w	r2, r0, r1
   208b8:	bf08      	it	eq
   208ba:	4770      	bxeq	lr
   208bc:	b530      	push	{r4, r5, lr}
   208be:	f04f 0500 	mov.w	r5, #0
   208c2:	e00a      	b.n	208da <__aeabi_l2d+0x16>

000208c4 <__aeabi_l2d>:
   208c4:	ea50 0201 	orrs.w	r2, r0, r1
   208c8:	bf08      	it	eq
   208ca:	4770      	bxeq	lr
   208cc:	b530      	push	{r4, r5, lr}
   208ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   208d2:	d502      	bpl.n	208da <__aeabi_l2d+0x16>
   208d4:	4240      	negs	r0, r0
   208d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   208da:	f44f 6480 	mov.w	r4, #1024	; 0x400
   208de:	f104 0432 	add.w	r4, r4, #50	; 0x32
   208e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   208e6:	f43f aed8 	beq.w	2069a <__adddf3+0xe6>
   208ea:	f04f 0203 	mov.w	r2, #3
   208ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   208f2:	bf18      	it	ne
   208f4:	3203      	addne	r2, #3
   208f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   208fa:	bf18      	it	ne
   208fc:	3203      	addne	r2, #3
   208fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   20902:	f1c2 0320 	rsb	r3, r2, #32
   20906:	fa00 fc03 	lsl.w	ip, r0, r3
   2090a:	fa20 f002 	lsr.w	r0, r0, r2
   2090e:	fa01 fe03 	lsl.w	lr, r1, r3
   20912:	ea40 000e 	orr.w	r0, r0, lr
   20916:	fa21 f102 	lsr.w	r1, r1, r2
   2091a:	4414      	add	r4, r2
   2091c:	e6bd      	b.n	2069a <__adddf3+0xe6>
   2091e:	bf00      	nop

00020920 <__aeabi_dmul>:
   20920:	b570      	push	{r4, r5, r6, lr}
   20922:	f04f 0cff 	mov.w	ip, #255	; 0xff
   20926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   2092a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   2092e:	bf1d      	ittte	ne
   20930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   20934:	ea94 0f0c 	teqne	r4, ip
   20938:	ea95 0f0c 	teqne	r5, ip
   2093c:	f000 f8de 	bleq	20afc <__aeabi_dmul+0x1dc>
   20940:	442c      	add	r4, r5
   20942:	ea81 0603 	eor.w	r6, r1, r3
   20946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   2094a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   2094e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   20952:	bf18      	it	ne
   20954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   20958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   2095c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   20960:	d038      	beq.n	209d4 <__aeabi_dmul+0xb4>
   20962:	fba0 ce02 	umull	ip, lr, r0, r2
   20966:	f04f 0500 	mov.w	r5, #0
   2096a:	fbe1 e502 	umlal	lr, r5, r1, r2
   2096e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   20972:	fbe0 e503 	umlal	lr, r5, r0, r3
   20976:	f04f 0600 	mov.w	r6, #0
   2097a:	fbe1 5603 	umlal	r5, r6, r1, r3
   2097e:	f09c 0f00 	teq	ip, #0
   20982:	bf18      	it	ne
   20984:	f04e 0e01 	orrne.w	lr, lr, #1
   20988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   2098c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   20990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   20994:	d204      	bcs.n	209a0 <__aeabi_dmul+0x80>
   20996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   2099a:	416d      	adcs	r5, r5
   2099c:	eb46 0606 	adc.w	r6, r6, r6
   209a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   209a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   209a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   209ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   209b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   209b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   209b8:	bf88      	it	hi
   209ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   209be:	d81e      	bhi.n	209fe <__aeabi_dmul+0xde>
   209c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   209c4:	bf08      	it	eq
   209c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   209ca:	f150 0000 	adcs.w	r0, r0, #0
   209ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   209d2:	bd70      	pop	{r4, r5, r6, pc}
   209d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   209d8:	ea46 0101 	orr.w	r1, r6, r1
   209dc:	ea40 0002 	orr.w	r0, r0, r2
   209e0:	ea81 0103 	eor.w	r1, r1, r3
   209e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   209e8:	bfc2      	ittt	gt
   209ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   209ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   209f2:	bd70      	popgt	{r4, r5, r6, pc}
   209f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   209f8:	f04f 0e00 	mov.w	lr, #0
   209fc:	3c01      	subs	r4, #1
   209fe:	f300 80ab 	bgt.w	20b58 <__aeabi_dmul+0x238>
   20a02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   20a06:	bfde      	ittt	le
   20a08:	2000      	movle	r0, #0
   20a0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   20a0e:	bd70      	pople	{r4, r5, r6, pc}
   20a10:	f1c4 0400 	rsb	r4, r4, #0
   20a14:	3c20      	subs	r4, #32
   20a16:	da35      	bge.n	20a84 <__aeabi_dmul+0x164>
   20a18:	340c      	adds	r4, #12
   20a1a:	dc1b      	bgt.n	20a54 <__aeabi_dmul+0x134>
   20a1c:	f104 0414 	add.w	r4, r4, #20
   20a20:	f1c4 0520 	rsb	r5, r4, #32
   20a24:	fa00 f305 	lsl.w	r3, r0, r5
   20a28:	fa20 f004 	lsr.w	r0, r0, r4
   20a2c:	fa01 f205 	lsl.w	r2, r1, r5
   20a30:	ea40 0002 	orr.w	r0, r0, r2
   20a34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   20a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   20a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   20a40:	fa21 f604 	lsr.w	r6, r1, r4
   20a44:	eb42 0106 	adc.w	r1, r2, r6
   20a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   20a4c:	bf08      	it	eq
   20a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   20a52:	bd70      	pop	{r4, r5, r6, pc}
   20a54:	f1c4 040c 	rsb	r4, r4, #12
   20a58:	f1c4 0520 	rsb	r5, r4, #32
   20a5c:	fa00 f304 	lsl.w	r3, r0, r4
   20a60:	fa20 f005 	lsr.w	r0, r0, r5
   20a64:	fa01 f204 	lsl.w	r2, r1, r4
   20a68:	ea40 0002 	orr.w	r0, r0, r2
   20a6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   20a74:	f141 0100 	adc.w	r1, r1, #0
   20a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   20a7c:	bf08      	it	eq
   20a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   20a82:	bd70      	pop	{r4, r5, r6, pc}
   20a84:	f1c4 0520 	rsb	r5, r4, #32
   20a88:	fa00 f205 	lsl.w	r2, r0, r5
   20a8c:	ea4e 0e02 	orr.w	lr, lr, r2
   20a90:	fa20 f304 	lsr.w	r3, r0, r4
   20a94:	fa01 f205 	lsl.w	r2, r1, r5
   20a98:	ea43 0302 	orr.w	r3, r3, r2
   20a9c:	fa21 f004 	lsr.w	r0, r1, r4
   20aa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20aa4:	fa21 f204 	lsr.w	r2, r1, r4
   20aa8:	ea20 0002 	bic.w	r0, r0, r2
   20aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   20ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   20ab4:	bf08      	it	eq
   20ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   20aba:	bd70      	pop	{r4, r5, r6, pc}
   20abc:	f094 0f00 	teq	r4, #0
   20ac0:	d10f      	bne.n	20ae2 <__aeabi_dmul+0x1c2>
   20ac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   20ac6:	0040      	lsls	r0, r0, #1
   20ac8:	eb41 0101 	adc.w	r1, r1, r1
   20acc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20ad0:	bf08      	it	eq
   20ad2:	3c01      	subeq	r4, #1
   20ad4:	d0f7      	beq.n	20ac6 <__aeabi_dmul+0x1a6>
   20ad6:	ea41 0106 	orr.w	r1, r1, r6
   20ada:	f095 0f00 	teq	r5, #0
   20ade:	bf18      	it	ne
   20ae0:	4770      	bxne	lr
   20ae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   20ae6:	0052      	lsls	r2, r2, #1
   20ae8:	eb43 0303 	adc.w	r3, r3, r3
   20aec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   20af0:	bf08      	it	eq
   20af2:	3d01      	subeq	r5, #1
   20af4:	d0f7      	beq.n	20ae6 <__aeabi_dmul+0x1c6>
   20af6:	ea43 0306 	orr.w	r3, r3, r6
   20afa:	4770      	bx	lr
   20afc:	ea94 0f0c 	teq	r4, ip
   20b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   20b04:	bf18      	it	ne
   20b06:	ea95 0f0c 	teqne	r5, ip
   20b0a:	d00c      	beq.n	20b26 <__aeabi_dmul+0x206>
   20b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   20b10:	bf18      	it	ne
   20b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   20b16:	d1d1      	bne.n	20abc <__aeabi_dmul+0x19c>
   20b18:	ea81 0103 	eor.w	r1, r1, r3
   20b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20b20:	f04f 0000 	mov.w	r0, #0
   20b24:	bd70      	pop	{r4, r5, r6, pc}
   20b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   20b2a:	bf06      	itte	eq
   20b2c:	4610      	moveq	r0, r2
   20b2e:	4619      	moveq	r1, r3
   20b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   20b34:	d019      	beq.n	20b6a <__aeabi_dmul+0x24a>
   20b36:	ea94 0f0c 	teq	r4, ip
   20b3a:	d102      	bne.n	20b42 <__aeabi_dmul+0x222>
   20b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   20b40:	d113      	bne.n	20b6a <__aeabi_dmul+0x24a>
   20b42:	ea95 0f0c 	teq	r5, ip
   20b46:	d105      	bne.n	20b54 <__aeabi_dmul+0x234>
   20b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   20b4c:	bf1c      	itt	ne
   20b4e:	4610      	movne	r0, r2
   20b50:	4619      	movne	r1, r3
   20b52:	d10a      	bne.n	20b6a <__aeabi_dmul+0x24a>
   20b54:	ea81 0103 	eor.w	r1, r1, r3
   20b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   20b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   20b60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   20b64:	f04f 0000 	mov.w	r0, #0
   20b68:	bd70      	pop	{r4, r5, r6, pc}
   20b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   20b6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   20b72:	bd70      	pop	{r4, r5, r6, pc}

00020b74 <__aeabi_ddiv>:
   20b74:	b570      	push	{r4, r5, r6, lr}
   20b76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   20b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   20b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   20b82:	bf1d      	ittte	ne
   20b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   20b88:	ea94 0f0c 	teqne	r4, ip
   20b8c:	ea95 0f0c 	teqne	r5, ip
   20b90:	f000 f8a7 	bleq	20ce2 <__aeabi_ddiv+0x16e>
   20b94:	eba4 0405 	sub.w	r4, r4, r5
   20b98:	ea81 0e03 	eor.w	lr, r1, r3
   20b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   20ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   20ba4:	f000 8088 	beq.w	20cb8 <__aeabi_ddiv+0x144>
   20ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   20bac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   20bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   20bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   20bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   20bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   20bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   20bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   20bc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   20bcc:	429d      	cmp	r5, r3
   20bce:	bf08      	it	eq
   20bd0:	4296      	cmpeq	r6, r2
   20bd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   20bd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   20bda:	d202      	bcs.n	20be2 <__aeabi_ddiv+0x6e>
   20bdc:	085b      	lsrs	r3, r3, #1
   20bde:	ea4f 0232 	mov.w	r2, r2, rrx
   20be2:	1ab6      	subs	r6, r6, r2
   20be4:	eb65 0503 	sbc.w	r5, r5, r3
   20be8:	085b      	lsrs	r3, r3, #1
   20bea:	ea4f 0232 	mov.w	r2, r2, rrx
   20bee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   20bf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   20bf6:	ebb6 0e02 	subs.w	lr, r6, r2
   20bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
   20bfe:	bf22      	ittt	cs
   20c00:	1ab6      	subcs	r6, r6, r2
   20c02:	4675      	movcs	r5, lr
   20c04:	ea40 000c 	orrcs.w	r0, r0, ip
   20c08:	085b      	lsrs	r3, r3, #1
   20c0a:	ea4f 0232 	mov.w	r2, r2, rrx
   20c0e:	ebb6 0e02 	subs.w	lr, r6, r2
   20c12:	eb75 0e03 	sbcs.w	lr, r5, r3
   20c16:	bf22      	ittt	cs
   20c18:	1ab6      	subcs	r6, r6, r2
   20c1a:	4675      	movcs	r5, lr
   20c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   20c20:	085b      	lsrs	r3, r3, #1
   20c22:	ea4f 0232 	mov.w	r2, r2, rrx
   20c26:	ebb6 0e02 	subs.w	lr, r6, r2
   20c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   20c2e:	bf22      	ittt	cs
   20c30:	1ab6      	subcs	r6, r6, r2
   20c32:	4675      	movcs	r5, lr
   20c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   20c38:	085b      	lsrs	r3, r3, #1
   20c3a:	ea4f 0232 	mov.w	r2, r2, rrx
   20c3e:	ebb6 0e02 	subs.w	lr, r6, r2
   20c42:	eb75 0e03 	sbcs.w	lr, r5, r3
   20c46:	bf22      	ittt	cs
   20c48:	1ab6      	subcs	r6, r6, r2
   20c4a:	4675      	movcs	r5, lr
   20c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   20c50:	ea55 0e06 	orrs.w	lr, r5, r6
   20c54:	d018      	beq.n	20c88 <__aeabi_ddiv+0x114>
   20c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   20c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   20c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   20c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   20c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   20c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   20c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   20c72:	d1c0      	bne.n	20bf6 <__aeabi_ddiv+0x82>
   20c74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20c78:	d10b      	bne.n	20c92 <__aeabi_ddiv+0x11e>
   20c7a:	ea41 0100 	orr.w	r1, r1, r0
   20c7e:	f04f 0000 	mov.w	r0, #0
   20c82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   20c86:	e7b6      	b.n	20bf6 <__aeabi_ddiv+0x82>
   20c88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   20c8c:	bf04      	itt	eq
   20c8e:	4301      	orreq	r1, r0
   20c90:	2000      	moveq	r0, #0
   20c92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   20c96:	bf88      	it	hi
   20c98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   20c9c:	f63f aeaf 	bhi.w	209fe <__aeabi_dmul+0xde>
   20ca0:	ebb5 0c03 	subs.w	ip, r5, r3
   20ca4:	bf04      	itt	eq
   20ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
   20caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   20cae:	f150 0000 	adcs.w	r0, r0, #0
   20cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   20cb6:	bd70      	pop	{r4, r5, r6, pc}
   20cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   20cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   20cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   20cc4:	bfc2      	ittt	gt
   20cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   20cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   20cce:	bd70      	popgt	{r4, r5, r6, pc}
   20cd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20cd4:	f04f 0e00 	mov.w	lr, #0
   20cd8:	3c01      	subs	r4, #1
   20cda:	e690      	b.n	209fe <__aeabi_dmul+0xde>
   20cdc:	ea45 0e06 	orr.w	lr, r5, r6
   20ce0:	e68d      	b.n	209fe <__aeabi_dmul+0xde>
   20ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   20ce6:	ea94 0f0c 	teq	r4, ip
   20cea:	bf08      	it	eq
   20cec:	ea95 0f0c 	teqeq	r5, ip
   20cf0:	f43f af3b 	beq.w	20b6a <__aeabi_dmul+0x24a>
   20cf4:	ea94 0f0c 	teq	r4, ip
   20cf8:	d10a      	bne.n	20d10 <__aeabi_ddiv+0x19c>
   20cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   20cfe:	f47f af34 	bne.w	20b6a <__aeabi_dmul+0x24a>
   20d02:	ea95 0f0c 	teq	r5, ip
   20d06:	f47f af25 	bne.w	20b54 <__aeabi_dmul+0x234>
   20d0a:	4610      	mov	r0, r2
   20d0c:	4619      	mov	r1, r3
   20d0e:	e72c      	b.n	20b6a <__aeabi_dmul+0x24a>
   20d10:	ea95 0f0c 	teq	r5, ip
   20d14:	d106      	bne.n	20d24 <__aeabi_ddiv+0x1b0>
   20d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   20d1a:	f43f aefd 	beq.w	20b18 <__aeabi_dmul+0x1f8>
   20d1e:	4610      	mov	r0, r2
   20d20:	4619      	mov	r1, r3
   20d22:	e722      	b.n	20b6a <__aeabi_dmul+0x24a>
   20d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   20d28:	bf18      	it	ne
   20d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   20d2e:	f47f aec5 	bne.w	20abc <__aeabi_dmul+0x19c>
   20d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   20d36:	f47f af0d 	bne.w	20b54 <__aeabi_dmul+0x234>
   20d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   20d3e:	f47f aeeb 	bne.w	20b18 <__aeabi_dmul+0x1f8>
   20d42:	e712      	b.n	20b6a <__aeabi_dmul+0x24a>

00020d44 <__aeabi_d2f>:
   20d44:	ea4f 0241 	mov.w	r2, r1, lsl #1
   20d48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   20d4c:	bf24      	itt	cs
   20d4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   20d52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   20d56:	d90d      	bls.n	20d74 <__aeabi_d2f+0x30>
   20d58:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   20d5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   20d60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   20d64:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   20d68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   20d6c:	bf08      	it	eq
   20d6e:	f020 0001 	biceq.w	r0, r0, #1
   20d72:	4770      	bx	lr
   20d74:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   20d78:	d121      	bne.n	20dbe <__aeabi_d2f+0x7a>
   20d7a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   20d7e:	bfbc      	itt	lt
   20d80:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   20d84:	4770      	bxlt	lr
   20d86:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   20d8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   20d8e:	f1c2 0218 	rsb	r2, r2, #24
   20d92:	f1c2 0c20 	rsb	ip, r2, #32
   20d96:	fa10 f30c 	lsls.w	r3, r0, ip
   20d9a:	fa20 f002 	lsr.w	r0, r0, r2
   20d9e:	bf18      	it	ne
   20da0:	f040 0001 	orrne.w	r0, r0, #1
   20da4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   20da8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   20dac:	fa03 fc0c 	lsl.w	ip, r3, ip
   20db0:	ea40 000c 	orr.w	r0, r0, ip
   20db4:	fa23 f302 	lsr.w	r3, r3, r2
   20db8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   20dbc:	e7cc      	b.n	20d58 <__aeabi_d2f+0x14>
   20dbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
   20dc2:	d107      	bne.n	20dd4 <__aeabi_d2f+0x90>
   20dc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   20dc8:	bf1e      	ittt	ne
   20dca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   20dce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   20dd2:	4770      	bxne	lr
   20dd4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   20dd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   20ddc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20de0:	4770      	bx	lr
   20de2:	bf00      	nop

00020de4 <__aeabi_frsub>:
   20de4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   20de8:	e002      	b.n	20df0 <__addsf3>
   20dea:	bf00      	nop

00020dec <__aeabi_fsub>:
   20dec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00020df0 <__addsf3>:
   20df0:	0042      	lsls	r2, r0, #1
   20df2:	bf1f      	itttt	ne
   20df4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   20df8:	ea92 0f03 	teqne	r2, r3
   20dfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   20e00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20e04:	d06a      	beq.n	20edc <__addsf3+0xec>
   20e06:	ea4f 6212 	mov.w	r2, r2, lsr #24
   20e0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   20e0e:	bfc1      	itttt	gt
   20e10:	18d2      	addgt	r2, r2, r3
   20e12:	4041      	eorgt	r1, r0
   20e14:	4048      	eorgt	r0, r1
   20e16:	4041      	eorgt	r1, r0
   20e18:	bfb8      	it	lt
   20e1a:	425b      	neglt	r3, r3
   20e1c:	2b19      	cmp	r3, #25
   20e1e:	bf88      	it	hi
   20e20:	4770      	bxhi	lr
   20e22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   20e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20e2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   20e2e:	bf18      	it	ne
   20e30:	4240      	negne	r0, r0
   20e32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   20e36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   20e3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   20e3e:	bf18      	it	ne
   20e40:	4249      	negne	r1, r1
   20e42:	ea92 0f03 	teq	r2, r3
   20e46:	d03f      	beq.n	20ec8 <__addsf3+0xd8>
   20e48:	f1a2 0201 	sub.w	r2, r2, #1
   20e4c:	fa41 fc03 	asr.w	ip, r1, r3
   20e50:	eb10 000c 	adds.w	r0, r0, ip
   20e54:	f1c3 0320 	rsb	r3, r3, #32
   20e58:	fa01 f103 	lsl.w	r1, r1, r3
   20e5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   20e60:	d502      	bpl.n	20e68 <__addsf3+0x78>
   20e62:	4249      	negs	r1, r1
   20e64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   20e68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20e6c:	d313      	bcc.n	20e96 <__addsf3+0xa6>
   20e6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   20e72:	d306      	bcc.n	20e82 <__addsf3+0x92>
   20e74:	0840      	lsrs	r0, r0, #1
   20e76:	ea4f 0131 	mov.w	r1, r1, rrx
   20e7a:	f102 0201 	add.w	r2, r2, #1
   20e7e:	2afe      	cmp	r2, #254	; 0xfe
   20e80:	d251      	bcs.n	20f26 <__addsf3+0x136>
   20e82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   20e86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   20e8a:	bf08      	it	eq
   20e8c:	f020 0001 	biceq.w	r0, r0, #1
   20e90:	ea40 0003 	orr.w	r0, r0, r3
   20e94:	4770      	bx	lr
   20e96:	0049      	lsls	r1, r1, #1
   20e98:	eb40 0000 	adc.w	r0, r0, r0
   20e9c:	3a01      	subs	r2, #1
   20e9e:	bf28      	it	cs
   20ea0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   20ea4:	d2ed      	bcs.n	20e82 <__addsf3+0x92>
   20ea6:	fab0 fc80 	clz	ip, r0
   20eaa:	f1ac 0c08 	sub.w	ip, ip, #8
   20eae:	ebb2 020c 	subs.w	r2, r2, ip
   20eb2:	fa00 f00c 	lsl.w	r0, r0, ip
   20eb6:	bfaa      	itet	ge
   20eb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   20ebc:	4252      	neglt	r2, r2
   20ebe:	4318      	orrge	r0, r3
   20ec0:	bfbc      	itt	lt
   20ec2:	40d0      	lsrlt	r0, r2
   20ec4:	4318      	orrlt	r0, r3
   20ec6:	4770      	bx	lr
   20ec8:	f092 0f00 	teq	r2, #0
   20ecc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   20ed0:	bf06      	itte	eq
   20ed2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   20ed6:	3201      	addeq	r2, #1
   20ed8:	3b01      	subne	r3, #1
   20eda:	e7b5      	b.n	20e48 <__addsf3+0x58>
   20edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   20ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   20ee4:	bf18      	it	ne
   20ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   20eea:	d021      	beq.n	20f30 <__addsf3+0x140>
   20eec:	ea92 0f03 	teq	r2, r3
   20ef0:	d004      	beq.n	20efc <__addsf3+0x10c>
   20ef2:	f092 0f00 	teq	r2, #0
   20ef6:	bf08      	it	eq
   20ef8:	4608      	moveq	r0, r1
   20efa:	4770      	bx	lr
   20efc:	ea90 0f01 	teq	r0, r1
   20f00:	bf1c      	itt	ne
   20f02:	2000      	movne	r0, #0
   20f04:	4770      	bxne	lr
   20f06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   20f0a:	d104      	bne.n	20f16 <__addsf3+0x126>
   20f0c:	0040      	lsls	r0, r0, #1
   20f0e:	bf28      	it	cs
   20f10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   20f14:	4770      	bx	lr
   20f16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   20f1a:	bf3c      	itt	cc
   20f1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   20f20:	4770      	bxcc	lr
   20f22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   20f26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   20f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   20f2e:	4770      	bx	lr
   20f30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   20f34:	bf16      	itet	ne
   20f36:	4608      	movne	r0, r1
   20f38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   20f3c:	4601      	movne	r1, r0
   20f3e:	0242      	lsls	r2, r0, #9
   20f40:	bf06      	itte	eq
   20f42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   20f46:	ea90 0f01 	teqeq	r0, r1
   20f4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   20f4e:	4770      	bx	lr

00020f50 <__aeabi_ui2f>:
   20f50:	f04f 0300 	mov.w	r3, #0
   20f54:	e004      	b.n	20f60 <__aeabi_i2f+0x8>
   20f56:	bf00      	nop

00020f58 <__aeabi_i2f>:
   20f58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   20f5c:	bf48      	it	mi
   20f5e:	4240      	negmi	r0, r0
   20f60:	ea5f 0c00 	movs.w	ip, r0
   20f64:	bf08      	it	eq
   20f66:	4770      	bxeq	lr
   20f68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   20f6c:	4601      	mov	r1, r0
   20f6e:	f04f 0000 	mov.w	r0, #0
   20f72:	e01c      	b.n	20fae <__aeabi_l2f+0x2a>

00020f74 <__aeabi_ul2f>:
   20f74:	ea50 0201 	orrs.w	r2, r0, r1
   20f78:	bf08      	it	eq
   20f7a:	4770      	bxeq	lr
   20f7c:	f04f 0300 	mov.w	r3, #0
   20f80:	e00a      	b.n	20f98 <__aeabi_l2f+0x14>
   20f82:	bf00      	nop

00020f84 <__aeabi_l2f>:
   20f84:	ea50 0201 	orrs.w	r2, r0, r1
   20f88:	bf08      	it	eq
   20f8a:	4770      	bxeq	lr
   20f8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   20f90:	d502      	bpl.n	20f98 <__aeabi_l2f+0x14>
   20f92:	4240      	negs	r0, r0
   20f94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   20f98:	ea5f 0c01 	movs.w	ip, r1
   20f9c:	bf02      	ittt	eq
   20f9e:	4684      	moveq	ip, r0
   20fa0:	4601      	moveq	r1, r0
   20fa2:	2000      	moveq	r0, #0
   20fa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   20fa8:	bf08      	it	eq
   20faa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   20fae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   20fb2:	fabc f28c 	clz	r2, ip
   20fb6:	3a08      	subs	r2, #8
   20fb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   20fbc:	db10      	blt.n	20fe0 <__aeabi_l2f+0x5c>
   20fbe:	fa01 fc02 	lsl.w	ip, r1, r2
   20fc2:	4463      	add	r3, ip
   20fc4:	fa00 fc02 	lsl.w	ip, r0, r2
   20fc8:	f1c2 0220 	rsb	r2, r2, #32
   20fcc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   20fd0:	fa20 f202 	lsr.w	r2, r0, r2
   20fd4:	eb43 0002 	adc.w	r0, r3, r2
   20fd8:	bf08      	it	eq
   20fda:	f020 0001 	biceq.w	r0, r0, #1
   20fde:	4770      	bx	lr
   20fe0:	f102 0220 	add.w	r2, r2, #32
   20fe4:	fa01 fc02 	lsl.w	ip, r1, r2
   20fe8:	f1c2 0220 	rsb	r2, r2, #32
   20fec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   20ff0:	fa21 f202 	lsr.w	r2, r1, r2
   20ff4:	eb43 0002 	adc.w	r0, r3, r2
   20ff8:	bf08      	it	eq
   20ffa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   20ffe:	4770      	bx	lr

00021000 <__aeabi_ldivmod>:
   21000:	b97b      	cbnz	r3, 21022 <__aeabi_ldivmod+0x22>
   21002:	b972      	cbnz	r2, 21022 <__aeabi_ldivmod+0x22>
   21004:	2900      	cmp	r1, #0
   21006:	bfbe      	ittt	lt
   21008:	2000      	movlt	r0, #0
   2100a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   2100e:	e006      	blt.n	2101e <__aeabi_ldivmod+0x1e>
   21010:	bf08      	it	eq
   21012:	2800      	cmpeq	r0, #0
   21014:	bf1c      	itt	ne
   21016:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   2101a:	f04f 30ff 	movne.w	r0, #4294967295
   2101e:	f000 b9bb 	b.w	21398 <__aeabi_idiv0>
   21022:	f1ad 0c08 	sub.w	ip, sp, #8
   21026:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2102a:	2900      	cmp	r1, #0
   2102c:	db09      	blt.n	21042 <__aeabi_ldivmod+0x42>
   2102e:	2b00      	cmp	r3, #0
   21030:	db1a      	blt.n	21068 <__aeabi_ldivmod+0x68>
   21032:	f000 f84d 	bl	210d0 <__udivmoddi4>
   21036:	f8dd e004 	ldr.w	lr, [sp, #4]
   2103a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2103e:	b004      	add	sp, #16
   21040:	4770      	bx	lr
   21042:	4240      	negs	r0, r0
   21044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21048:	2b00      	cmp	r3, #0
   2104a:	db1b      	blt.n	21084 <__aeabi_ldivmod+0x84>
   2104c:	f000 f840 	bl	210d0 <__udivmoddi4>
   21050:	f8dd e004 	ldr.w	lr, [sp, #4]
   21054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21058:	b004      	add	sp, #16
   2105a:	4240      	negs	r0, r0
   2105c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21060:	4252      	negs	r2, r2
   21062:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   21066:	4770      	bx	lr
   21068:	4252      	negs	r2, r2
   2106a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2106e:	f000 f82f 	bl	210d0 <__udivmoddi4>
   21072:	f8dd e004 	ldr.w	lr, [sp, #4]
   21076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2107a:	b004      	add	sp, #16
   2107c:	4240      	negs	r0, r0
   2107e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   21082:	4770      	bx	lr
   21084:	4252      	negs	r2, r2
   21086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2108a:	f000 f821 	bl	210d0 <__udivmoddi4>
   2108e:	f8dd e004 	ldr.w	lr, [sp, #4]
   21092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   21096:	b004      	add	sp, #16
   21098:	4252      	negs	r2, r2
   2109a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   2109e:	4770      	bx	lr

000210a0 <__aeabi_uldivmod>:
   210a0:	b953      	cbnz	r3, 210b8 <__aeabi_uldivmod+0x18>
   210a2:	b94a      	cbnz	r2, 210b8 <__aeabi_uldivmod+0x18>
   210a4:	2900      	cmp	r1, #0
   210a6:	bf08      	it	eq
   210a8:	2800      	cmpeq	r0, #0
   210aa:	bf1c      	itt	ne
   210ac:	f04f 31ff 	movne.w	r1, #4294967295
   210b0:	f04f 30ff 	movne.w	r0, #4294967295
   210b4:	f000 b970 	b.w	21398 <__aeabi_idiv0>
   210b8:	f1ad 0c08 	sub.w	ip, sp, #8
   210bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   210c0:	f000 f806 	bl	210d0 <__udivmoddi4>
   210c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   210c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   210cc:	b004      	add	sp, #16
   210ce:	4770      	bx	lr

000210d0 <__udivmoddi4>:
   210d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   210d4:	9e08      	ldr	r6, [sp, #32]
   210d6:	460d      	mov	r5, r1
   210d8:	4604      	mov	r4, r0
   210da:	468a      	mov	sl, r1
   210dc:	2b00      	cmp	r3, #0
   210de:	d17f      	bne.n	211e0 <__udivmoddi4+0x110>
   210e0:	428a      	cmp	r2, r1
   210e2:	4617      	mov	r7, r2
   210e4:	d941      	bls.n	2116a <__udivmoddi4+0x9a>
   210e6:	fab2 f282 	clz	r2, r2
   210ea:	b14a      	cbz	r2, 21100 <__udivmoddi4+0x30>
   210ec:	f1c2 0120 	rsb	r1, r2, #32
   210f0:	fa05 f302 	lsl.w	r3, r5, r2
   210f4:	4097      	lsls	r7, r2
   210f6:	4094      	lsls	r4, r2
   210f8:	fa20 f101 	lsr.w	r1, r0, r1
   210fc:	ea41 0a03 	orr.w	sl, r1, r3
   21100:	ea4f 4817 	mov.w	r8, r7, lsr #16
   21104:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   21108:	fa1f f987 	uxth.w	r9, r7
   2110c:	fbba fef8 	udiv	lr, sl, r8
   21110:	fb08 a31e 	mls	r3, r8, lr, sl
   21114:	fb0e f109 	mul.w	r1, lr, r9
   21118:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   2111c:	4299      	cmp	r1, r3
   2111e:	d906      	bls.n	2112e <__udivmoddi4+0x5e>
   21120:	18fb      	adds	r3, r7, r3
   21122:	d202      	bcs.n	2112a <__udivmoddi4+0x5a>
   21124:	4299      	cmp	r1, r3
   21126:	f200 8124 	bhi.w	21372 <__udivmoddi4+0x2a2>
   2112a:	f10e 3eff 	add.w	lr, lr, #4294967295
   2112e:	1a59      	subs	r1, r3, r1
   21130:	b2a3      	uxth	r3, r4
   21132:	fbb1 f0f8 	udiv	r0, r1, r8
   21136:	fb08 1110 	mls	r1, r8, r0, r1
   2113a:	fb00 f909 	mul.w	r9, r0, r9
   2113e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   21142:	45a1      	cmp	r9, r4
   21144:	d905      	bls.n	21152 <__udivmoddi4+0x82>
   21146:	193c      	adds	r4, r7, r4
   21148:	d202      	bcs.n	21150 <__udivmoddi4+0x80>
   2114a:	45a1      	cmp	r9, r4
   2114c:	f200 810e 	bhi.w	2136c <__udivmoddi4+0x29c>
   21150:	3801      	subs	r0, #1
   21152:	eba4 0409 	sub.w	r4, r4, r9
   21156:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   2115a:	2100      	movs	r1, #0
   2115c:	b11e      	cbz	r6, 21166 <__udivmoddi4+0x96>
   2115e:	40d4      	lsrs	r4, r2
   21160:	2300      	movs	r3, #0
   21162:	e9c6 4300 	strd	r4, r3, [r6]
   21166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2116a:	b902      	cbnz	r2, 2116e <__udivmoddi4+0x9e>
   2116c:	deff      	udf	#255	; 0xff
   2116e:	fab2 f282 	clz	r2, r2
   21172:	2a00      	cmp	r2, #0
   21174:	d14f      	bne.n	21216 <__udivmoddi4+0x146>
   21176:	1bcb      	subs	r3, r1, r7
   21178:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   2117c:	fa1f f887 	uxth.w	r8, r7
   21180:	2101      	movs	r1, #1
   21182:	0c25      	lsrs	r5, r4, #16
   21184:	fbb3 fcfe 	udiv	ip, r3, lr
   21188:	fb0e 301c 	mls	r0, lr, ip, r3
   2118c:	462b      	mov	r3, r5
   2118e:	fb08 f90c 	mul.w	r9, r8, ip
   21192:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   21196:	45a9      	cmp	r9, r5
   21198:	d90a      	bls.n	211b0 <__udivmoddi4+0xe0>
   2119a:	197d      	adds	r5, r7, r5
   2119c:	bf2c      	ite	cs
   2119e:	2301      	movcs	r3, #1
   211a0:	2300      	movcc	r3, #0
   211a2:	45a9      	cmp	r9, r5
   211a4:	d902      	bls.n	211ac <__udivmoddi4+0xdc>
   211a6:	2b00      	cmp	r3, #0
   211a8:	f000 80d9 	beq.w	2135e <__udivmoddi4+0x28e>
   211ac:	f10c 3cff 	add.w	ip, ip, #4294967295
   211b0:	eba5 0509 	sub.w	r5, r5, r9
   211b4:	b2a3      	uxth	r3, r4
   211b6:	fbb5 f0fe 	udiv	r0, r5, lr
   211ba:	fb0e 5510 	mls	r5, lr, r0, r5
   211be:	fb08 f800 	mul.w	r8, r8, r0
   211c2:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   211c6:	45a0      	cmp	r8, r4
   211c8:	d905      	bls.n	211d6 <__udivmoddi4+0x106>
   211ca:	193c      	adds	r4, r7, r4
   211cc:	d202      	bcs.n	211d4 <__udivmoddi4+0x104>
   211ce:	45a0      	cmp	r8, r4
   211d0:	f200 80c9 	bhi.w	21366 <__udivmoddi4+0x296>
   211d4:	3801      	subs	r0, #1
   211d6:	eba4 0408 	sub.w	r4, r4, r8
   211da:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   211de:	e7bd      	b.n	2115c <__udivmoddi4+0x8c>
   211e0:	428b      	cmp	r3, r1
   211e2:	d908      	bls.n	211f6 <__udivmoddi4+0x126>
   211e4:	2e00      	cmp	r6, #0
   211e6:	f000 80b1 	beq.w	2134c <__udivmoddi4+0x27c>
   211ea:	2100      	movs	r1, #0
   211ec:	e9c6 0500 	strd	r0, r5, [r6]
   211f0:	4608      	mov	r0, r1
   211f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   211f6:	fab3 f183 	clz	r1, r3
   211fa:	2900      	cmp	r1, #0
   211fc:	d146      	bne.n	2128c <__udivmoddi4+0x1bc>
   211fe:	42ab      	cmp	r3, r5
   21200:	f0c0 80a7 	bcc.w	21352 <__udivmoddi4+0x282>
   21204:	4282      	cmp	r2, r0
   21206:	f240 80a4 	bls.w	21352 <__udivmoddi4+0x282>
   2120a:	4608      	mov	r0, r1
   2120c:	2e00      	cmp	r6, #0
   2120e:	d0aa      	beq.n	21166 <__udivmoddi4+0x96>
   21210:	e9c6 4a00 	strd	r4, sl, [r6]
   21214:	e7a7      	b.n	21166 <__udivmoddi4+0x96>
   21216:	f1c2 0020 	rsb	r0, r2, #32
   2121a:	4097      	lsls	r7, r2
   2121c:	fa01 f302 	lsl.w	r3, r1, r2
   21220:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   21224:	40c1      	lsrs	r1, r0
   21226:	fa24 f500 	lsr.w	r5, r4, r0
   2122a:	fa1f f887 	uxth.w	r8, r7
   2122e:	4094      	lsls	r4, r2
   21230:	431d      	orrs	r5, r3
   21232:	fbb1 f0fe 	udiv	r0, r1, lr
   21236:	0c2b      	lsrs	r3, r5, #16
   21238:	fb0e 1110 	mls	r1, lr, r0, r1
   2123c:	fb00 fc08 	mul.w	ip, r0, r8
   21240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   21244:	459c      	cmp	ip, r3
   21246:	d909      	bls.n	2125c <__udivmoddi4+0x18c>
   21248:	18fb      	adds	r3, r7, r3
   2124a:	bf2c      	ite	cs
   2124c:	2101      	movcs	r1, #1
   2124e:	2100      	movcc	r1, #0
   21250:	459c      	cmp	ip, r3
   21252:	d902      	bls.n	2125a <__udivmoddi4+0x18a>
   21254:	2900      	cmp	r1, #0
   21256:	f000 8095 	beq.w	21384 <__udivmoddi4+0x2b4>
   2125a:	3801      	subs	r0, #1
   2125c:	eba3 030c 	sub.w	r3, r3, ip
   21260:	b2ad      	uxth	r5, r5
   21262:	fbb3 f1fe 	udiv	r1, r3, lr
   21266:	fb0e 3311 	mls	r3, lr, r1, r3
   2126a:	fb01 fc08 	mul.w	ip, r1, r8
   2126e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   21272:	45ac      	cmp	ip, r5
   21274:	d905      	bls.n	21282 <__udivmoddi4+0x1b2>
   21276:	197d      	adds	r5, r7, r5
   21278:	d202      	bcs.n	21280 <__udivmoddi4+0x1b0>
   2127a:	45ac      	cmp	ip, r5
   2127c:	f200 8089 	bhi.w	21392 <__udivmoddi4+0x2c2>
   21280:	3901      	subs	r1, #1
   21282:	eba5 030c 	sub.w	r3, r5, ip
   21286:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   2128a:	e77a      	b.n	21182 <__udivmoddi4+0xb2>
   2128c:	f1c1 0420 	rsb	r4, r1, #32
   21290:	408b      	lsls	r3, r1
   21292:	fa02 f701 	lsl.w	r7, r2, r1
   21296:	fa05 fc01 	lsl.w	ip, r5, r1
   2129a:	40e2      	lsrs	r2, r4
   2129c:	fa20 f804 	lsr.w	r8, r0, r4
   212a0:	40e5      	lsrs	r5, r4
   212a2:	fa00 fe01 	lsl.w	lr, r0, r1
   212a6:	4313      	orrs	r3, r2
   212a8:	ea48 020c 	orr.w	r2, r8, ip
   212ac:	ea4f 4813 	mov.w	r8, r3, lsr #16
   212b0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   212b4:	fa1f f983 	uxth.w	r9, r3
   212b8:	fbb5 faf8 	udiv	sl, r5, r8
   212bc:	fb08 551a 	mls	r5, r8, sl, r5
   212c0:	fb0a f009 	mul.w	r0, sl, r9
   212c4:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   212c8:	4560      	cmp	r0, ip
   212ca:	d90a      	bls.n	212e2 <__udivmoddi4+0x212>
   212cc:	eb13 0c0c 	adds.w	ip, r3, ip
   212d0:	bf2c      	ite	cs
   212d2:	2501      	movcs	r5, #1
   212d4:	2500      	movcc	r5, #0
   212d6:	4560      	cmp	r0, ip
   212d8:	d901      	bls.n	212de <__udivmoddi4+0x20e>
   212da:	2d00      	cmp	r5, #0
   212dc:	d055      	beq.n	2138a <__udivmoddi4+0x2ba>
   212de:	f10a 3aff 	add.w	sl, sl, #4294967295
   212e2:	ebac 0c00 	sub.w	ip, ip, r0
   212e6:	b292      	uxth	r2, r2
   212e8:	fbbc f0f8 	udiv	r0, ip, r8
   212ec:	fb08 cc10 	mls	ip, r8, r0, ip
   212f0:	fb00 f909 	mul.w	r9, r0, r9
   212f4:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   212f8:	45e1      	cmp	r9, ip
   212fa:	d905      	bls.n	21308 <__udivmoddi4+0x238>
   212fc:	eb13 0c0c 	adds.w	ip, r3, ip
   21300:	d201      	bcs.n	21306 <__udivmoddi4+0x236>
   21302:	45e1      	cmp	r9, ip
   21304:	d83b      	bhi.n	2137e <__udivmoddi4+0x2ae>
   21306:	3801      	subs	r0, #1
   21308:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   2130c:	ebac 0c09 	sub.w	ip, ip, r9
   21310:	fba0 8907 	umull	r8, r9, r0, r7
   21314:	45cc      	cmp	ip, r9
   21316:	4645      	mov	r5, r8
   21318:	464a      	mov	r2, r9
   2131a:	d302      	bcc.n	21322 <__udivmoddi4+0x252>
   2131c:	d106      	bne.n	2132c <__udivmoddi4+0x25c>
   2131e:	45c6      	cmp	lr, r8
   21320:	d204      	bcs.n	2132c <__udivmoddi4+0x25c>
   21322:	3801      	subs	r0, #1
   21324:	ebb8 0507 	subs.w	r5, r8, r7
   21328:	eb69 0203 	sbc.w	r2, r9, r3
   2132c:	b32e      	cbz	r6, 2137a <__udivmoddi4+0x2aa>
   2132e:	ebbe 0305 	subs.w	r3, lr, r5
   21332:	eb6c 0c02 	sbc.w	ip, ip, r2
   21336:	fa23 f201 	lsr.w	r2, r3, r1
   2133a:	fa0c f404 	lsl.w	r4, ip, r4
   2133e:	fa2c f301 	lsr.w	r3, ip, r1
   21342:	2100      	movs	r1, #0
   21344:	4314      	orrs	r4, r2
   21346:	e9c6 4300 	strd	r4, r3, [r6]
   2134a:	e70c      	b.n	21166 <__udivmoddi4+0x96>
   2134c:	4631      	mov	r1, r6
   2134e:	4630      	mov	r0, r6
   21350:	e709      	b.n	21166 <__udivmoddi4+0x96>
   21352:	1a84      	subs	r4, r0, r2
   21354:	eb65 0303 	sbc.w	r3, r5, r3
   21358:	2001      	movs	r0, #1
   2135a:	469a      	mov	sl, r3
   2135c:	e756      	b.n	2120c <__udivmoddi4+0x13c>
   2135e:	f1ac 0c02 	sub.w	ip, ip, #2
   21362:	443d      	add	r5, r7
   21364:	e724      	b.n	211b0 <__udivmoddi4+0xe0>
   21366:	3802      	subs	r0, #2
   21368:	443c      	add	r4, r7
   2136a:	e734      	b.n	211d6 <__udivmoddi4+0x106>
   2136c:	3802      	subs	r0, #2
   2136e:	443c      	add	r4, r7
   21370:	e6ef      	b.n	21152 <__udivmoddi4+0x82>
   21372:	f1ae 0e02 	sub.w	lr, lr, #2
   21376:	443b      	add	r3, r7
   21378:	e6d9      	b.n	2112e <__udivmoddi4+0x5e>
   2137a:	4631      	mov	r1, r6
   2137c:	e6f3      	b.n	21166 <__udivmoddi4+0x96>
   2137e:	3802      	subs	r0, #2
   21380:	449c      	add	ip, r3
   21382:	e7c1      	b.n	21308 <__udivmoddi4+0x238>
   21384:	3802      	subs	r0, #2
   21386:	443b      	add	r3, r7
   21388:	e768      	b.n	2125c <__udivmoddi4+0x18c>
   2138a:	f1aa 0a02 	sub.w	sl, sl, #2
   2138e:	449c      	add	ip, r3
   21390:	e7a7      	b.n	212e2 <__udivmoddi4+0x212>
   21392:	3902      	subs	r1, #2
   21394:	443d      	add	r5, r7
   21396:	e774      	b.n	21282 <__udivmoddi4+0x1b2>

00021398 <__aeabi_idiv0>:
   21398:	4770      	bx	lr
   2139a:	bf00      	nop

0002139c <__gedf2>:
   2139c:	f04f 3cff 	mov.w	ip, #4294967295
   213a0:	e006      	b.n	213b0 <__cmpdf2+0x4>
   213a2:	bf00      	nop

000213a4 <__ledf2>:
   213a4:	f04f 0c01 	mov.w	ip, #1
   213a8:	e002      	b.n	213b0 <__cmpdf2+0x4>
   213aa:	bf00      	nop

000213ac <__cmpdf2>:
   213ac:	f04f 0c01 	mov.w	ip, #1
   213b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   213b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   213b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   213bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   213c0:	bf18      	it	ne
   213c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   213c6:	d01b      	beq.n	21400 <__cmpdf2+0x54>
   213c8:	b001      	add	sp, #4
   213ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   213ce:	bf0c      	ite	eq
   213d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   213d4:	ea91 0f03 	teqne	r1, r3
   213d8:	bf02      	ittt	eq
   213da:	ea90 0f02 	teqeq	r0, r2
   213de:	2000      	moveq	r0, #0
   213e0:	4770      	bxeq	lr
   213e2:	f110 0f00 	cmn.w	r0, #0
   213e6:	ea91 0f03 	teq	r1, r3
   213ea:	bf58      	it	pl
   213ec:	4299      	cmppl	r1, r3
   213ee:	bf08      	it	eq
   213f0:	4290      	cmpeq	r0, r2
   213f2:	bf2c      	ite	cs
   213f4:	17d8      	asrcs	r0, r3, #31
   213f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   213fa:	f040 0001 	orr.w	r0, r0, #1
   213fe:	4770      	bx	lr
   21400:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   21404:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21408:	d102      	bne.n	21410 <__cmpdf2+0x64>
   2140a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   2140e:	d107      	bne.n	21420 <__cmpdf2+0x74>
   21410:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   21414:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   21418:	d1d6      	bne.n	213c8 <__cmpdf2+0x1c>
   2141a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   2141e:	d0d3      	beq.n	213c8 <__cmpdf2+0x1c>
   21420:	f85d 0b04 	ldr.w	r0, [sp], #4
   21424:	4770      	bx	lr
   21426:	bf00      	nop

00021428 <__aeabi_cdrcmple>:
   21428:	4684      	mov	ip, r0
   2142a:	4610      	mov	r0, r2
   2142c:	4662      	mov	r2, ip
   2142e:	468c      	mov	ip, r1
   21430:	4619      	mov	r1, r3
   21432:	4663      	mov	r3, ip
   21434:	e000      	b.n	21438 <__aeabi_cdcmpeq>
   21436:	bf00      	nop

00021438 <__aeabi_cdcmpeq>:
   21438:	b501      	push	{r0, lr}
   2143a:	f7ff ffb7 	bl	213ac <__cmpdf2>
   2143e:	2800      	cmp	r0, #0
   21440:	bf48      	it	mi
   21442:	f110 0f00 	cmnmi.w	r0, #0
   21446:	bd01      	pop	{r0, pc}

00021448 <__aeabi_dcmpeq>:
   21448:	f84d ed08 	str.w	lr, [sp, #-8]!
   2144c:	f7ff fff4 	bl	21438 <__aeabi_cdcmpeq>
   21450:	bf0c      	ite	eq
   21452:	2001      	moveq	r0, #1
   21454:	2000      	movne	r0, #0
   21456:	f85d fb08 	ldr.w	pc, [sp], #8
   2145a:	bf00      	nop

0002145c <__aeabi_dcmplt>:
   2145c:	f84d ed08 	str.w	lr, [sp, #-8]!
   21460:	f7ff ffea 	bl	21438 <__aeabi_cdcmpeq>
   21464:	bf34      	ite	cc
   21466:	2001      	movcc	r0, #1
   21468:	2000      	movcs	r0, #0
   2146a:	f85d fb08 	ldr.w	pc, [sp], #8
   2146e:	bf00      	nop

00021470 <__aeabi_dcmple>:
   21470:	f84d ed08 	str.w	lr, [sp, #-8]!
   21474:	f7ff ffe0 	bl	21438 <__aeabi_cdcmpeq>
   21478:	bf94      	ite	ls
   2147a:	2001      	movls	r0, #1
   2147c:	2000      	movhi	r0, #0
   2147e:	f85d fb08 	ldr.w	pc, [sp], #8
   21482:	bf00      	nop

00021484 <__aeabi_dcmpge>:
   21484:	f84d ed08 	str.w	lr, [sp, #-8]!
   21488:	f7ff ffce 	bl	21428 <__aeabi_cdrcmple>
   2148c:	bf94      	ite	ls
   2148e:	2001      	movls	r0, #1
   21490:	2000      	movhi	r0, #0
   21492:	f85d fb08 	ldr.w	pc, [sp], #8
   21496:	bf00      	nop

00021498 <__aeabi_dcmpgt>:
   21498:	f84d ed08 	str.w	lr, [sp, #-8]!
   2149c:	f7ff ffc4 	bl	21428 <__aeabi_cdrcmple>
   214a0:	bf34      	ite	cc
   214a2:	2001      	movcc	r0, #1
   214a4:	2000      	movcs	r0, #0
   214a6:	f85d fb08 	ldr.w	pc, [sp], #8
   214aa:	bf00      	nop

000214ac <__aeabi_dcmpun>:
   214ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   214b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   214b4:	d102      	bne.n	214bc <__aeabi_dcmpun+0x10>
   214b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   214ba:	d10a      	bne.n	214d2 <__aeabi_dcmpun+0x26>
   214bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   214c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   214c4:	d102      	bne.n	214cc <__aeabi_dcmpun+0x20>
   214c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   214ca:	d102      	bne.n	214d2 <__aeabi_dcmpun+0x26>
   214cc:	f04f 0000 	mov.w	r0, #0
   214d0:	4770      	bx	lr
   214d2:	f04f 0001 	mov.w	r0, #1
   214d6:	4770      	bx	lr

000214d8 <__aeabi_d2iz>:
   214d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   214dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   214e0:	d215      	bcs.n	2150e <__aeabi_d2iz+0x36>
   214e2:	d511      	bpl.n	21508 <__aeabi_d2iz+0x30>
   214e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   214e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   214ec:	d912      	bls.n	21514 <__aeabi_d2iz+0x3c>
   214ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   214f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   214f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   214fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   214fe:	fa23 f002 	lsr.w	r0, r3, r2
   21502:	bf18      	it	ne
   21504:	4240      	negne	r0, r0
   21506:	4770      	bx	lr
   21508:	f04f 0000 	mov.w	r0, #0
   2150c:	4770      	bx	lr
   2150e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   21512:	d105      	bne.n	21520 <__aeabi_d2iz+0x48>
   21514:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   21518:	bf08      	it	eq
   2151a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   2151e:	4770      	bx	lr
   21520:	f04f 0000 	mov.w	r0, #0
   21524:	4770      	bx	lr
   21526:	bf00      	nop

00021528 <strcmp>:
   21528:	f810 2b01 	ldrb.w	r2, [r0], #1
   2152c:	f811 3b01 	ldrb.w	r3, [r1], #1
   21530:	2a01      	cmp	r2, #1
   21532:	bf28      	it	cs
   21534:	429a      	cmpcs	r2, r3
   21536:	d0f7      	beq.n	21528 <strcmp>
   21538:	1ad0      	subs	r0, r2, r3
   2153a:	4770      	bx	lr

0002153c <strlen>:
   2153c:	4603      	mov	r3, r0
   2153e:	f813 2b01 	ldrb.w	r2, [r3], #1
   21542:	2a00      	cmp	r2, #0
   21544:	d1fb      	bne.n	2153e <strlen+0x2>
   21546:	1a18      	subs	r0, r3, r0
   21548:	3801      	subs	r0, #1
   2154a:	4770      	bx	lr
   2154c:	0000      	movs	r0, r0
	...

00021550 <parse_response>:
	NET_DBG("tx_tm_f:         %x", pkt->tx_tm_f);
}

static int32_t parse_response(uint8_t *data, uint16_t len, uint32_t orig_ts,
			    struct sntp_time *time)
{
   21550:	b430      	push	{r4, r5}
	struct sntp_pkt *pkt = (struct sntp_pkt *)data;
	uint32_t ts;

	sntp_pkt_dump(pkt);

	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   21552:	6984      	ldr	r4, [r0, #24]
   21554:	0a21      	lsrs	r1, r4, #8
   21556:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
   2155a:	ea41 6114 	orr.w	r1, r1, r4, lsr #24
   2155e:	0225      	lsls	r5, r4, #8
   21560:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
   21564:	4329      	orrs	r1, r5
   21566:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   2156a:	4291      	cmp	r1, r2
   2156c:	d153      	bne.n	21616 <parse_response+0xc6>
		NET_DBG("Mismatch originate timestamp: %d, expect: %d",
			ntohl(pkt->orig_tm_s), orig_ts);
		return -EINVAL;
	}

	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   2156e:	7802      	ldrb	r2, [r0, #0]
   21570:	f002 0207 	and.w	r2, r2, #7
   21574:	2a04      	cmp	r2, #4
   21576:	d151      	bne.n	2161c <parse_response+0xcc>
		 */
		NET_DBG("Unexpected mode: %d", SNTP_GET_MODE(pkt->lvm));
		return -EINVAL;
	}

	if (pkt->stratum == SNTP_STRATUM_KOD) {
   21578:	7842      	ldrb	r2, [r0, #1]
   2157a:	2a00      	cmp	r2, #0
   2157c:	d051      	beq.n	21622 <parse_response+0xd2>
		NET_DBG("kiss-o'-death stratum");
		return -EBUSY;
	}

	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   2157e:	6a81      	ldr	r1, [r0, #40]	; 0x28
   21580:	0a0a      	lsrs	r2, r1, #8
   21582:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   21586:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
   2158a:	020c      	lsls	r4, r1, #8
   2158c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   21590:	4322      	orrs	r2, r4
   21592:	ea52 6201 	orrs.w	r2, r2, r1, lsl #24
   21596:	d10c      	bne.n	215b2 <parse_response+0x62>
   21598:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   2159a:	0a0a      	lsrs	r2, r1, #8
   2159c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   215a0:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
   215a4:	020c      	lsls	r4, r1, #8
   215a6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   215aa:	4322      	orrs	r2, r4
   215ac:	ea52 6201 	orrs.w	r2, r2, r1, lsl #24
   215b0:	d03a      	beq.n	21628 <parse_response+0xd8>
		NET_DBG("zero transmit timestamp");
		return -EINVAL;
	}

	time->fraction = ntohl(pkt->tx_tm_f);
   215b2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   215b4:	0a0a      	lsrs	r2, r1, #8
   215b6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   215ba:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
   215be:	020c      	lsls	r4, r1, #8
   215c0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
   215c4:	4322      	orrs	r2, r4
   215c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   215ca:	609a      	str	r2, [r3, #8]
	ts = ntohl(pkt->tx_tm_s);
   215cc:	6a80      	ldr	r0, [r0, #40]	; 0x28
   215ce:	0a01      	lsrs	r1, r0, #8
   215d0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
   215d4:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
   215d8:	0202      	lsls	r2, r0, #8
   215da:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   215de:	430a      	orrs	r2, r1

	/* Check if most significant bit is set */
	if (ts & 0x80000000) {
   215e0:	ea52 6200 	orrs.w	r2, r2, r0, lsl #24
   215e4:	d40a      	bmi.n	215fc <parse_response+0xac>
		}
	} else {
		/* UTC time is reckoned from 6h 28m 16s UTC
		 * on 7 February 2036.
		 */
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   215e6:	a117      	add	r1, pc, #92	; (adr r1, 21644 <parse_response+0xf4>)
   215e8:	e9d1 0100 	ldrd	r0, r1, [r1]
   215ec:	1880      	adds	r0, r0, r2
   215ee:	f141 0100 	adc.w	r1, r1, #0
   215f2:	e9c3 0100 	strd	r0, r1, [r3]
	}

	return 0;
   215f6:	2000      	movs	r0, #0
}
   215f8:	bc30      	pop	{r4, r5}
   215fa:	4770      	bx	lr
		if (ts >= OFFSET_1970_JAN_1) {
   215fc:	4910      	ldr	r1, [pc, #64]	; (21640 <parse_response+0xf0>)
   215fe:	428a      	cmp	r2, r1
   21600:	d915      	bls.n	2162e <parse_response+0xde>
			time->seconds = ts - OFFSET_1970_JAN_1;
   21602:	a10d      	add	r1, pc, #52	; (adr r1, 21638 <parse_response+0xe8>)
   21604:	e9d1 0100 	ldrd	r0, r1, [r1]
   21608:	1880      	adds	r0, r0, r2
   2160a:	f141 0100 	adc.w	r1, r1, #0
   2160e:	e9c3 0100 	strd	r0, r1, [r3]
	return 0;
   21612:	2000      	movs	r0, #0
   21614:	e7f0      	b.n	215f8 <parse_response+0xa8>
		return -EINVAL;
   21616:	f06f 0015 	mvn.w	r0, #21
   2161a:	e7ed      	b.n	215f8 <parse_response+0xa8>
		return -EINVAL;
   2161c:	f06f 0015 	mvn.w	r0, #21
   21620:	e7ea      	b.n	215f8 <parse_response+0xa8>
		return -EBUSY;
   21622:	f06f 000f 	mvn.w	r0, #15
   21626:	e7e7      	b.n	215f8 <parse_response+0xa8>
		return -EINVAL;
   21628:	f06f 0015 	mvn.w	r0, #21
   2162c:	e7e4      	b.n	215f8 <parse_response+0xa8>
			return -EINVAL;
   2162e:	f06f 0015 	mvn.w	r0, #21
   21632:	e7e1      	b.n	215f8 <parse_response+0xa8>
   21634:	f3af 8000 	nop.w
   21638:	7c558180 	.word	0x7c558180
   2163c:	ffffffff 	.word	0xffffffff
   21640:	83aa7e7f 	.word	0x83aa7e7f
   21644:	7c558180 	.word	0x7c558180
	...

00021650 <clock_settime>:
 *
 * Note that only the `CLOCK_REALTIME` clock can be set using this
 * call.
 */
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
   21650:	b570      	push	{r4, r5, r6, lr}
   21652:	b084      	sub	sp, #16
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   21654:	2801      	cmp	r0, #1
   21656:	d14b      	bne.n	216f0 <clock_settime+0xa0>
   21658:	460c      	mov	r4, r1
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   2165a:	f01e fb59 	bl	3fd10 <z_impl_k_uptime_ticks>
   2165e:	460b      	mov	r3, r1
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   21660:	4a35      	ldr	r2, [pc, #212]	; (21738 <clock_settime+0xe8>)
   21662:	fba0 0102 	umull	r0, r1, r0, r2
   21666:	fb02 1103 	mla	r1, r2, r3, r1
   2166a:	0bc3      	lsrs	r3, r0, #15
   2166c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   21670:	0bcd      	lsrs	r5, r1, #15
		errno = EINVAL;
		return -1;
	}

	uint64_t elapsed_nsecs = k_ticks_to_ns_floor64(k_uptime_ticks());
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   21672:	6820      	ldr	r0, [r4, #0]
   21674:	6866      	ldr	r6, [r4, #4]
   21676:	fba0 0102 	umull	r0, r1, r0, r2
   2167a:	fb02 1106 	mla	r1, r2, r6, r1
   2167e:	68a2      	ldr	r2, [r4, #8]
   21680:	1880      	adds	r0, r0, r2
   21682:	eb41 71e2 	adc.w	r1, r1, r2, asr #31
		- elapsed_nsecs;
   21686:	1ac4      	subs	r4, r0, r3
   21688:	eb61 0505 	sbc.w	r5, r1, r5

	base.tv_sec = delta / NSEC_PER_SEC;
   2168c:	a328      	add	r3, pc, #160	; (adr r3, 21730 <clock_settime+0xe0>)
   2168e:	e9d3 2300 	ldrd	r2, r3, [r3]
   21692:	4620      	mov	r0, r4
   21694:	4629      	mov	r1, r5
   21696:	f7ff fcb3 	bl	21000 <__aeabi_ldivmod>
   2169a:	e9cd 0100 	strd	r0, r1, [sp]
	base.tv_nsec = delta % NSEC_PER_SEC;
   2169e:	a324      	add	r3, pc, #144	; (adr r3, 21730 <clock_settime+0xe0>)
   216a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   216a4:	4620      	mov	r0, r4
   216a6:	4629      	mov	r1, r5
   216a8:	f7ff fcaa 	bl	21000 <__aeabi_ldivmod>
   216ac:	9202      	str	r2, [sp, #8]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   216ae:	f04f 0320 	mov.w	r3, #32
   216b2:	f3ef 8611 	mrs	r6, BASEPRI
   216b6:	f383 8812 	msr	BASEPRI_MAX, r3
   216ba:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216be:	481f      	ldr	r0, [pc, #124]	; (2173c <clock_settime+0xec>)
   216c0:	f014 fc32 	bl	35f28 <z_spin_lock_valid>
   216c4:	b1d8      	cbz	r0, 216fe <clock_settime+0xae>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   216c6:	4d1d      	ldr	r5, [pc, #116]	; (2173c <clock_settime+0xec>)
   216c8:	4628      	mov	r0, r5
   216ca:	f014 fc4d 	bl	35f68 <z_spin_lock_set_owner>

	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
   216ce:	4c1c      	ldr	r4, [pc, #112]	; (21740 <clock_settime+0xf0>)
   216d0:	ab04      	add	r3, sp, #16
   216d2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   216d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216da:	4628      	mov	r0, r5
   216dc:	f014 fc34 	bl	35f48 <z_spin_unlock_valid>
   216e0:	b1c0      	cbz	r0, 21714 <clock_settime+0xc4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   216e2:	f386 8811 	msr	BASEPRI, r6
   216e6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
   216ea:	2000      	movs	r0, #0
}
   216ec:	b004      	add	sp, #16
   216ee:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   216f0:	f01b f8c2 	bl	3c878 <__errno>
   216f4:	2316      	movs	r3, #22
   216f6:	6003      	str	r3, [r0, #0]
		return -1;
   216f8:	f04f 30ff 	mov.w	r0, #4294967295
   216fc:	e7f6      	b.n	216ec <clock_settime+0x9c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216fe:	4c11      	ldr	r4, [pc, #68]	; (21744 <clock_settime+0xf4>)
   21700:	2281      	movs	r2, #129	; 0x81
   21702:	4621      	mov	r1, r4
   21704:	4810      	ldr	r0, [pc, #64]	; (21748 <clock_settime+0xf8>)
   21706:	f01a fa17 	bl	3bb38 <printk>
   2170a:	2181      	movs	r1, #129	; 0x81
   2170c:	4620      	mov	r0, r4
   2170e:	f01a fc67 	bl	3bfe0 <assert_post_action>
   21712:	e7d8      	b.n	216c6 <clock_settime+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21714:	4c0b      	ldr	r4, [pc, #44]	; (21744 <clock_settime+0xf4>)
   21716:	22ac      	movs	r2, #172	; 0xac
   21718:	4621      	mov	r1, r4
   2171a:	480b      	ldr	r0, [pc, #44]	; (21748 <clock_settime+0xf8>)
   2171c:	f01a fa0c 	bl	3bb38 <printk>
   21720:	21ac      	movs	r1, #172	; 0xac
   21722:	4620      	mov	r0, r4
   21724:	f01a fc5c 	bl	3bfe0 <assert_post_action>
   21728:	e7db      	b.n	216e2 <clock_settime+0x92>
   2172a:	bf00      	nop
   2172c:	f3af 8000 	nop.w
   21730:	3b9aca00 	.word	0x3b9aca00
   21734:	00000000 	.word	0x00000000
   21738:	3b9aca00 	.word	0x3b9aca00
   2173c:	2000ffc0 	.word	0x2000ffc0
   21740:	2000cb28 	.word	0x2000cb28
   21744:	00042210 	.word	0x00042210
   21748:	00041c84 	.word	0x00041c84
   2174c:	00000000 	.word	0x00000000

00021750 <get_edrx_value>:
	};
	static const uint16_t edrx_lookup_nbiot[16] = {
		2, 2, 2, 4, 2, 8, 2, 2, 2, 16, 32, 64, 128, 256, 512, 1024
	};

	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   21750:	b302      	cbz	r2, 21794 <get_edrx_value+0x44>
{
   21752:	b510      	push	{r4, lr}
   21754:	4614      	mov	r4, r2
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   21756:	290f      	cmp	r1, #15
   21758:	d81f      	bhi.n	2179a <get_edrx_value+0x4a>
		return -EINVAL;
	}

	switch (lte_mode) {
   2175a:	2807      	cmp	r0, #7
   2175c:	d004      	beq.n	21768 <get_edrx_value+0x18>
   2175e:	2809      	cmp	r0, #9
   21760:	d010      	beq.n	21784 <get_edrx_value+0x34>
   21762:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   21766:	e014      	b.n	21792 <get_edrx_value+0x42>
	case LTE_LC_LTE_MODE_LTEM:
		multiplier = edrx_lookup_ltem[idx];
   21768:	4b0f      	ldr	r3, [pc, #60]	; (217a8 <get_edrx_value+0x58>)
   2176a:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
		break;
	default:
		return -ENOTCONN;
	}

	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   2176e:	b168      	cbz	r0, 2178c <get_edrx_value+0x3c>
   21770:	f7ff f86c 	bl	2084c <__aeabi_i2d>
   21774:	a30a      	add	r3, pc, #40	; (adr r3, 217a0 <get_edrx_value+0x50>)
   21776:	e9d3 2300 	ldrd	r2, r3, [r3]
   2177a:	f7ff f8d1 	bl	20920 <__aeabi_dmul>
   2177e:	f7ff fae1 	bl	20d44 <__aeabi_d2f>
   21782:	e004      	b.n	2178e <get_edrx_value+0x3e>
		multiplier = edrx_lookup_nbiot[idx];
   21784:	4b09      	ldr	r3, [pc, #36]	; (217ac <get_edrx_value+0x5c>)
   21786:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
		break;
   2178a:	e7f0      	b.n	2176e <get_edrx_value+0x1e>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   2178c:	4808      	ldr	r0, [pc, #32]	; (217b0 <get_edrx_value+0x60>)
   2178e:	6020      	str	r0, [r4, #0]

	return 0;
   21790:	2000      	movs	r0, #0
}
   21792:	bd10      	pop	{r4, pc}
		return -EINVAL;
   21794:	f06f 0015 	mvn.w	r0, #21
}
   21798:	4770      	bx	lr
		return -EINVAL;
   2179a:	f06f 0015 	mvn.w	r0, #21
   2179e:	e7f8      	b.n	21792 <get_edrx_value+0x42>
   217a0:	47ae147b 	.word	0x47ae147b
   217a4:	40247ae1 	.word	0x40247ae1
   217a8:	00044200 	.word	0x00044200
   217ac:	00044220 	.word	0x00044220
   217b0:	40a3d70a 	.word	0x40a3d70a
   217b4:	00000000 	.word	0x00000000

000217b8 <_dtoa_r>:
   217b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217bc:	4616      	mov	r6, r2
   217be:	b099      	sub	sp, #100	; 0x64
   217c0:	461f      	mov	r7, r3
   217c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
   217c4:	4605      	mov	r5, r0
   217c6:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
   217ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
   217ce:	b93c      	cbnz	r4, 217e0 <_dtoa_r+0x28>
   217d0:	2010      	movs	r0, #16
   217d2:	f018 f8b7 	bl	39944 <malloc>
   217d6:	6268      	str	r0, [r5, #36]	; 0x24
   217d8:	6004      	str	r4, [r0, #0]
   217da:	60c4      	str	r4, [r0, #12]
   217dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
   217e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   217e2:	6819      	ldr	r1, [r3, #0]
   217e4:	b151      	cbz	r1, 217fc <_dtoa_r+0x44>
   217e6:	685a      	ldr	r2, [r3, #4]
   217e8:	2301      	movs	r3, #1
   217ea:	4628      	mov	r0, r5
   217ec:	4093      	lsls	r3, r2
   217ee:	604a      	str	r2, [r1, #4]
   217f0:	608b      	str	r3, [r1, #8]
   217f2:	f01e ff06 	bl	40602 <_Bfree>
   217f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   217f8:	2200      	movs	r2, #0
   217fa:	601a      	str	r2, [r3, #0]
   217fc:	1e3b      	subs	r3, r7, #0
   217fe:	bfb7      	itett	lt
   21800:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   21804:	2300      	movge	r3, #0
   21806:	2201      	movlt	r2, #1
   21808:	9305      	strlt	r3, [sp, #20]
   2180a:	bfa8      	it	ge
   2180c:	f8c8 3000 	strge.w	r3, [r8]
   21810:	f8dd 9014 	ldr.w	r9, [sp, #20]
   21814:	4bac      	ldr	r3, [pc, #688]	; (21ac8 <_dtoa_r+0x310>)
   21816:	bfb8      	it	lt
   21818:	f8c8 2000 	strlt.w	r2, [r8]
   2181c:	ea33 0309 	bics.w	r3, r3, r9
   21820:	d119      	bne.n	21856 <_dtoa_r+0x9e>
   21822:	f242 730f 	movw	r3, #9999	; 0x270f
   21826:	9a24      	ldr	r2, [sp, #144]	; 0x90
   21828:	6013      	str	r3, [r2, #0]
   2182a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   2182e:	4333      	orrs	r3, r6
   21830:	f000 856a 	beq.w	22308 <_dtoa_r+0xb50>
   21834:	9b26      	ldr	r3, [sp, #152]	; 0x98
   21836:	b953      	cbnz	r3, 2184e <_dtoa_r+0x96>
   21838:	4ba4      	ldr	r3, [pc, #656]	; (21acc <_dtoa_r+0x314>)
   2183a:	e023      	b.n	21884 <_dtoa_r+0xcc>
   2183c:	4ba4      	ldr	r3, [pc, #656]	; (21ad0 <_dtoa_r+0x318>)
   2183e:	9303      	str	r3, [sp, #12]
   21840:	3308      	adds	r3, #8
   21842:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21844:	6013      	str	r3, [r2, #0]
   21846:	9803      	ldr	r0, [sp, #12]
   21848:	b019      	add	sp, #100	; 0x64
   2184a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2184e:	4b9f      	ldr	r3, [pc, #636]	; (21acc <_dtoa_r+0x314>)
   21850:	9303      	str	r3, [sp, #12]
   21852:	3303      	adds	r3, #3
   21854:	e7f5      	b.n	21842 <_dtoa_r+0x8a>
   21856:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   2185a:	2200      	movs	r2, #0
   2185c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   21860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21864:	2300      	movs	r3, #0
   21866:	f7ff fdef 	bl	21448 <__aeabi_dcmpeq>
   2186a:	4680      	mov	r8, r0
   2186c:	b160      	cbz	r0, 21888 <_dtoa_r+0xd0>
   2186e:	2301      	movs	r3, #1
   21870:	9a24      	ldr	r2, [sp, #144]	; 0x90
   21872:	6013      	str	r3, [r2, #0]
   21874:	9b26      	ldr	r3, [sp, #152]	; 0x98
   21876:	2b00      	cmp	r3, #0
   21878:	f000 8543 	beq.w	22302 <_dtoa_r+0xb4a>
   2187c:	4b95      	ldr	r3, [pc, #596]	; (21ad4 <_dtoa_r+0x31c>)
   2187e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   21880:	6013      	str	r3, [r2, #0]
   21882:	3b01      	subs	r3, #1
   21884:	9303      	str	r3, [sp, #12]
   21886:	e7de      	b.n	21846 <_dtoa_r+0x8e>
   21888:	ab16      	add	r3, sp, #88	; 0x58
   2188a:	f3c9 540a 	ubfx	r4, r9, #20, #11
   2188e:	4628      	mov	r0, r5
   21890:	9301      	str	r3, [sp, #4]
   21892:	ab17      	add	r3, sp, #92	; 0x5c
   21894:	9300      	str	r3, [sp, #0]
   21896:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   2189a:	f01f f8f1 	bl	40a80 <__d2b>
   2189e:	4683      	mov	fp, r0
   218a0:	2c00      	cmp	r4, #0
   218a2:	d07c      	beq.n	2199e <_dtoa_r+0x1e6>
   218a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   218a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
   218aa:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
   218ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
   218b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   218b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   218ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   218be:	2200      	movs	r2, #0
   218c0:	4b85      	ldr	r3, [pc, #532]	; (21ad8 <_dtoa_r+0x320>)
   218c2:	f7fe fe75 	bl	205b0 <__aeabi_dsub>
   218c6:	a37a      	add	r3, pc, #488	; (adr r3, 21ab0 <_dtoa_r+0x2f8>)
   218c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   218cc:	f7ff f828 	bl	20920 <__aeabi_dmul>
   218d0:	a379      	add	r3, pc, #484	; (adr r3, 21ab8 <_dtoa_r+0x300>)
   218d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   218d6:	f7fe fe6d 	bl	205b4 <__adddf3>
   218da:	4606      	mov	r6, r0
   218dc:	460f      	mov	r7, r1
   218de:	4620      	mov	r0, r4
   218e0:	f7fe ffb4 	bl	2084c <__aeabi_i2d>
   218e4:	a376      	add	r3, pc, #472	; (adr r3, 21ac0 <_dtoa_r+0x308>)
   218e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   218ea:	f7ff f819 	bl	20920 <__aeabi_dmul>
   218ee:	4602      	mov	r2, r0
   218f0:	460b      	mov	r3, r1
   218f2:	4630      	mov	r0, r6
   218f4:	4639      	mov	r1, r7
   218f6:	f7fe fe5d 	bl	205b4 <__adddf3>
   218fa:	4606      	mov	r6, r0
   218fc:	460f      	mov	r7, r1
   218fe:	f7ff fdeb 	bl	214d8 <__aeabi_d2iz>
   21902:	2200      	movs	r2, #0
   21904:	4682      	mov	sl, r0
   21906:	2300      	movs	r3, #0
   21908:	4630      	mov	r0, r6
   2190a:	4639      	mov	r1, r7
   2190c:	f7ff fda6 	bl	2145c <__aeabi_dcmplt>
   21910:	b148      	cbz	r0, 21926 <_dtoa_r+0x16e>
   21912:	4650      	mov	r0, sl
   21914:	f7fe ff9a 	bl	2084c <__aeabi_i2d>
   21918:	4632      	mov	r2, r6
   2191a:	463b      	mov	r3, r7
   2191c:	f7ff fd94 	bl	21448 <__aeabi_dcmpeq>
   21920:	b908      	cbnz	r0, 21926 <_dtoa_r+0x16e>
   21922:	f10a 3aff 	add.w	sl, sl, #4294967295
   21926:	f1ba 0f16 	cmp.w	sl, #22
   2192a:	d856      	bhi.n	219da <_dtoa_r+0x222>
   2192c:	4b6b      	ldr	r3, [pc, #428]	; (21adc <_dtoa_r+0x324>)
   2192e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   21932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21936:	e9d3 2300 	ldrd	r2, r3, [r3]
   2193a:	f7ff fd8f 	bl	2145c <__aeabi_dcmplt>
   2193e:	2800      	cmp	r0, #0
   21940:	d04d      	beq.n	219de <_dtoa_r+0x226>
   21942:	f10a 3aff 	add.w	sl, sl, #4294967295
   21946:	2300      	movs	r3, #0
   21948:	930f      	str	r3, [sp, #60]	; 0x3c
   2194a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2194c:	1b1c      	subs	r4, r3, r4
   2194e:	1e63      	subs	r3, r4, #1
   21950:	9309      	str	r3, [sp, #36]	; 0x24
   21952:	bf49      	itett	mi
   21954:	f1c4 0301 	rsbmi	r3, r4, #1
   21958:	2300      	movpl	r3, #0
   2195a:	9306      	strmi	r3, [sp, #24]
   2195c:	2300      	movmi	r3, #0
   2195e:	bf54      	ite	pl
   21960:	9306      	strpl	r3, [sp, #24]
   21962:	9309      	strmi	r3, [sp, #36]	; 0x24
   21964:	f1ba 0f00 	cmp.w	sl, #0
   21968:	db3b      	blt.n	219e2 <_dtoa_r+0x22a>
   2196a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2196c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
   21970:	4453      	add	r3, sl
   21972:	9309      	str	r3, [sp, #36]	; 0x24
   21974:	2300      	movs	r3, #0
   21976:	930a      	str	r3, [sp, #40]	; 0x28
   21978:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2197a:	2b09      	cmp	r3, #9
   2197c:	f200 80b4 	bhi.w	21ae8 <_dtoa_r+0x330>
   21980:	2b05      	cmp	r3, #5
   21982:	bfc5      	ittet	gt
   21984:	3b04      	subgt	r3, #4
   21986:	2400      	movgt	r4, #0
   21988:	2401      	movle	r4, #1
   2198a:	9322      	strgt	r3, [sp, #136]	; 0x88
   2198c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2198e:	3b02      	subs	r3, #2
   21990:	2b03      	cmp	r3, #3
   21992:	f200 80b5 	bhi.w	21b00 <_dtoa_r+0x348>
   21996:	e8df f003 	tbb	[pc, r3]
   2199a:	7d2e      	.short	0x7d2e
   2199c:	a57b      	.short	0xa57b
   2199e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
   219a2:	441c      	add	r4, r3
   219a4:	f204 4332 	addw	r3, r4, #1074	; 0x432
   219a8:	2b20      	cmp	r3, #32
   219aa:	bfc6      	itte	gt
   219ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   219b0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
   219b4:	f1c3 0320 	rsble	r3, r3, #32
   219b8:	f104 34ff 	add.w	r4, r4, #4294967295
   219bc:	bfc5      	ittet	gt
   219be:	fa09 f303 	lslgt.w	r3, r9, r3
   219c2:	fa26 f000 	lsrgt.w	r0, r6, r0
   219c6:	fa06 f003 	lslle.w	r0, r6, r3
   219ca:	4318      	orrgt	r0, r3
   219cc:	f7fe ff2e 	bl	2082c <__aeabi_ui2d>
   219d0:	2301      	movs	r3, #1
   219d2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   219d6:	9313      	str	r3, [sp, #76]	; 0x4c
   219d8:	e771      	b.n	218be <_dtoa_r+0x106>
   219da:	2301      	movs	r3, #1
   219dc:	e7b4      	b.n	21948 <_dtoa_r+0x190>
   219de:	900f      	str	r0, [sp, #60]	; 0x3c
   219e0:	e7b3      	b.n	2194a <_dtoa_r+0x192>
   219e2:	9b06      	ldr	r3, [sp, #24]
   219e4:	eba3 030a 	sub.w	r3, r3, sl
   219e8:	9306      	str	r3, [sp, #24]
   219ea:	f1ca 0300 	rsb	r3, sl, #0
   219ee:	930a      	str	r3, [sp, #40]	; 0x28
   219f0:	2300      	movs	r3, #0
   219f2:	930e      	str	r3, [sp, #56]	; 0x38
   219f4:	e7c0      	b.n	21978 <_dtoa_r+0x1c0>
   219f6:	2300      	movs	r3, #0
   219f8:	930b      	str	r3, [sp, #44]	; 0x2c
   219fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   219fc:	2b00      	cmp	r3, #0
   219fe:	f300 8082 	bgt.w	21b06 <_dtoa_r+0x34e>
   21a02:	f04f 0901 	mov.w	r9, #1
   21a06:	464b      	mov	r3, r9
   21a08:	f8cd 9020 	str.w	r9, [sp, #32]
   21a0c:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
   21a10:	2200      	movs	r2, #0
   21a12:	6a6e      	ldr	r6, [r5, #36]	; 0x24
   21a14:	6072      	str	r2, [r6, #4]
   21a16:	2204      	movs	r2, #4
   21a18:	f102 0014 	add.w	r0, r2, #20
   21a1c:	6871      	ldr	r1, [r6, #4]
   21a1e:	4298      	cmp	r0, r3
   21a20:	d977      	bls.n	21b12 <_dtoa_r+0x35a>
   21a22:	4628      	mov	r0, r5
   21a24:	f01e fdb9 	bl	4059a <_Balloc>
   21a28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21a2a:	6030      	str	r0, [r6, #0]
   21a2c:	681b      	ldr	r3, [r3, #0]
   21a2e:	9303      	str	r3, [sp, #12]
   21a30:	9b08      	ldr	r3, [sp, #32]
   21a32:	2b0e      	cmp	r3, #14
   21a34:	f200 80ee 	bhi.w	21c14 <_dtoa_r+0x45c>
   21a38:	2c00      	cmp	r4, #0
   21a3a:	f000 80eb 	beq.w	21c14 <_dtoa_r+0x45c>
   21a3e:	f1ba 0f00 	cmp.w	sl, #0
   21a42:	dd7a      	ble.n	21b3a <_dtoa_r+0x382>
   21a44:	f00a 030f 	and.w	r3, sl, #15
   21a48:	4a24      	ldr	r2, [pc, #144]	; (21adc <_dtoa_r+0x324>)
   21a4a:	f41a 7f80 	tst.w	sl, #256	; 0x100
   21a4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   21a52:	e9d3 3400 	ldrd	r3, r4, [r3]
   21a56:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   21a5a:	ea4f 142a 	mov.w	r4, sl, asr #4
   21a5e:	d05c      	beq.n	21b1a <_dtoa_r+0x362>
   21a60:	4b1f      	ldr	r3, [pc, #124]	; (21ae0 <_dtoa_r+0x328>)
   21a62:	f004 040f 	and.w	r4, r4, #15
   21a66:	2703      	movs	r7, #3
   21a68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   21a6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21a70:	f7ff f880 	bl	20b74 <__aeabi_ddiv>
   21a74:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21a78:	4e19      	ldr	r6, [pc, #100]	; (21ae0 <_dtoa_r+0x328>)
   21a7a:	2c00      	cmp	r4, #0
   21a7c:	d14f      	bne.n	21b1e <_dtoa_r+0x366>
   21a7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21a86:	f7ff f875 	bl	20b74 <__aeabi_ddiv>
   21a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21a8e:	e06e      	b.n	21b6e <_dtoa_r+0x3b6>
   21a90:	2301      	movs	r3, #1
   21a92:	e7b1      	b.n	219f8 <_dtoa_r+0x240>
   21a94:	2300      	movs	r3, #0
   21a96:	930b      	str	r3, [sp, #44]	; 0x2c
   21a98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   21a9a:	eb0a 0903 	add.w	r9, sl, r3
   21a9e:	f109 0301 	add.w	r3, r9, #1
   21aa2:	2b01      	cmp	r3, #1
   21aa4:	9308      	str	r3, [sp, #32]
   21aa6:	bfb8      	it	lt
   21aa8:	2301      	movlt	r3, #1
   21aaa:	e7b1      	b.n	21a10 <_dtoa_r+0x258>
   21aac:	f3af 8000 	nop.w
   21ab0:	636f4361 	.word	0x636f4361
   21ab4:	3fd287a7 	.word	0x3fd287a7
   21ab8:	8b60c8b3 	.word	0x8b60c8b3
   21abc:	3fc68a28 	.word	0x3fc68a28
   21ac0:	509f79fb 	.word	0x509f79fb
   21ac4:	3fd34413 	.word	0x3fd34413
   21ac8:	7ff00000 	.word	0x7ff00000
   21acc:	00045f93 	.word	0x00045f93
   21ad0:	00045f8a 	.word	0x00045f8a
   21ad4:	00045f9c 	.word	0x00045f9c
   21ad8:	3ff80000 	.word	0x3ff80000
   21adc:	000413c0 	.word	0x000413c0
   21ae0:	00041398 	.word	0x00041398
   21ae4:	2301      	movs	r3, #1
   21ae6:	e7d6      	b.n	21a96 <_dtoa_r+0x2de>
   21ae8:	2401      	movs	r4, #1
   21aea:	2300      	movs	r3, #0
   21aec:	940b      	str	r4, [sp, #44]	; 0x2c
   21aee:	9322      	str	r3, [sp, #136]	; 0x88
   21af0:	f04f 39ff 	mov.w	r9, #4294967295
   21af4:	2200      	movs	r2, #0
   21af6:	2312      	movs	r3, #18
   21af8:	f8cd 9020 	str.w	r9, [sp, #32]
   21afc:	9223      	str	r2, [sp, #140]	; 0x8c
   21afe:	e787      	b.n	21a10 <_dtoa_r+0x258>
   21b00:	2301      	movs	r3, #1
   21b02:	930b      	str	r3, [sp, #44]	; 0x2c
   21b04:	e7f4      	b.n	21af0 <_dtoa_r+0x338>
   21b06:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
   21b0a:	464b      	mov	r3, r9
   21b0c:	f8cd 9020 	str.w	r9, [sp, #32]
   21b10:	e77e      	b.n	21a10 <_dtoa_r+0x258>
   21b12:	3101      	adds	r1, #1
   21b14:	0052      	lsls	r2, r2, #1
   21b16:	6071      	str	r1, [r6, #4]
   21b18:	e77e      	b.n	21a18 <_dtoa_r+0x260>
   21b1a:	2702      	movs	r7, #2
   21b1c:	e7ac      	b.n	21a78 <_dtoa_r+0x2c0>
   21b1e:	07e1      	lsls	r1, r4, #31
   21b20:	d508      	bpl.n	21b34 <_dtoa_r+0x37c>
   21b22:	3701      	adds	r7, #1
   21b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21b28:	e9d6 2300 	ldrd	r2, r3, [r6]
   21b2c:	f7fe fef8 	bl	20920 <__aeabi_dmul>
   21b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21b34:	1064      	asrs	r4, r4, #1
   21b36:	3608      	adds	r6, #8
   21b38:	e79f      	b.n	21a7a <_dtoa_r+0x2c2>
   21b3a:	f000 80a5 	beq.w	21c88 <_dtoa_r+0x4d0>
   21b3e:	f1ca 0400 	rsb	r4, sl, #0
   21b42:	4ba3      	ldr	r3, [pc, #652]	; (21dd0 <_dtoa_r+0x618>)
   21b44:	4ea3      	ldr	r6, [pc, #652]	; (21dd4 <_dtoa_r+0x61c>)
   21b46:	2702      	movs	r7, #2
   21b48:	f004 020f 	and.w	r2, r4, #15
   21b4c:	1124      	asrs	r4, r4, #4
   21b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   21b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   21b56:	e9d3 2300 	ldrd	r2, r3, [r3]
   21b5a:	f7fe fee1 	bl	20920 <__aeabi_dmul>
   21b5e:	2300      	movs	r3, #0
   21b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21b64:	2c00      	cmp	r4, #0
   21b66:	f040 8084 	bne.w	21c72 <_dtoa_r+0x4ba>
   21b6a:	2b00      	cmp	r3, #0
   21b6c:	d18d      	bne.n	21a8a <_dtoa_r+0x2d2>
   21b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21b70:	2b00      	cmp	r3, #0
   21b72:	f000 808b 	beq.w	21c8c <_dtoa_r+0x4d4>
   21b76:	2200      	movs	r2, #0
   21b78:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   21b7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
   21b80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21b84:	4b94      	ldr	r3, [pc, #592]	; (21dd8 <_dtoa_r+0x620>)
   21b86:	f7ff fc69 	bl	2145c <__aeabi_dcmplt>
   21b8a:	2800      	cmp	r0, #0
   21b8c:	d07e      	beq.n	21c8c <_dtoa_r+0x4d4>
   21b8e:	9b08      	ldr	r3, [sp, #32]
   21b90:	2b00      	cmp	r3, #0
   21b92:	d07b      	beq.n	21c8c <_dtoa_r+0x4d4>
   21b94:	f1b9 0f00 	cmp.w	r9, #0
   21b98:	dd38      	ble.n	21c0c <_dtoa_r+0x454>
   21b9a:	f10a 38ff 	add.w	r8, sl, #4294967295
   21b9e:	3701      	adds	r7, #1
   21ba0:	464c      	mov	r4, r9
   21ba2:	2200      	movs	r2, #0
   21ba4:	4b8d      	ldr	r3, [pc, #564]	; (21ddc <_dtoa_r+0x624>)
   21ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21baa:	f7fe feb9 	bl	20920 <__aeabi_dmul>
   21bae:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21bb2:	4638      	mov	r0, r7
   21bb4:	f7fe fe4a 	bl	2084c <__aeabi_i2d>
   21bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21bbc:	f7fe feb0 	bl	20920 <__aeabi_dmul>
   21bc0:	2200      	movs	r2, #0
   21bc2:	4b87      	ldr	r3, [pc, #540]	; (21de0 <_dtoa_r+0x628>)
   21bc4:	f7fe fcf6 	bl	205b4 <__adddf3>
   21bc8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   21bcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21bd0:	9611      	str	r6, [sp, #68]	; 0x44
   21bd2:	2c00      	cmp	r4, #0
   21bd4:	d15d      	bne.n	21c92 <_dtoa_r+0x4da>
   21bd6:	2200      	movs	r2, #0
   21bd8:	4b82      	ldr	r3, [pc, #520]	; (21de4 <_dtoa_r+0x62c>)
   21bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21bde:	f7fe fce7 	bl	205b0 <__aeabi_dsub>
   21be2:	4602      	mov	r2, r0
   21be4:	460b      	mov	r3, r1
   21be6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21bea:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21bec:	4633      	mov	r3, r6
   21bee:	f7ff fc53 	bl	21498 <__aeabi_dcmpgt>
   21bf2:	2800      	cmp	r0, #0
   21bf4:	f040 8294 	bne.w	22120 <_dtoa_r+0x968>
   21bf8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21bfa:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   21bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21c02:	f7ff fc2b 	bl	2145c <__aeabi_dcmplt>
   21c06:	2800      	cmp	r0, #0
   21c08:	f040 8288 	bne.w	2211c <_dtoa_r+0x964>
   21c0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
   21c10:	e9cd 3404 	strd	r3, r4, [sp, #16]
   21c14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   21c16:	2b00      	cmp	r3, #0
   21c18:	f2c0 814f 	blt.w	21eba <_dtoa_r+0x702>
   21c1c:	f1ba 0f0e 	cmp.w	sl, #14
   21c20:	f300 814b 	bgt.w	21eba <_dtoa_r+0x702>
   21c24:	4b6a      	ldr	r3, [pc, #424]	; (21dd0 <_dtoa_r+0x618>)
   21c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   21c2a:	e9d3 3400 	ldrd	r3, r4, [r3]
   21c2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
   21c32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   21c34:	2b00      	cmp	r3, #0
   21c36:	f280 80d9 	bge.w	21dec <_dtoa_r+0x634>
   21c3a:	9b08      	ldr	r3, [sp, #32]
   21c3c:	2b00      	cmp	r3, #0
   21c3e:	f300 80d5 	bgt.w	21dec <_dtoa_r+0x634>
   21c42:	f040 826a 	bne.w	2211a <_dtoa_r+0x962>
   21c46:	2200      	movs	r2, #0
   21c48:	4b66      	ldr	r3, [pc, #408]	; (21de4 <_dtoa_r+0x62c>)
   21c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   21c4e:	f7fe fe67 	bl	20920 <__aeabi_dmul>
   21c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21c56:	f7ff fc15 	bl	21484 <__aeabi_dcmpge>
   21c5a:	9c08      	ldr	r4, [sp, #32]
   21c5c:	4626      	mov	r6, r4
   21c5e:	2800      	cmp	r0, #0
   21c60:	f040 8240 	bne.w	220e4 <_dtoa_r+0x92c>
   21c64:	9f03      	ldr	r7, [sp, #12]
   21c66:	2331      	movs	r3, #49	; 0x31
   21c68:	f10a 0a01 	add.w	sl, sl, #1
   21c6c:	f807 3b01 	strb.w	r3, [r7], #1
   21c70:	e23c      	b.n	220ec <_dtoa_r+0x934>
   21c72:	07e2      	lsls	r2, r4, #31
   21c74:	d505      	bpl.n	21c82 <_dtoa_r+0x4ca>
   21c76:	3701      	adds	r7, #1
   21c78:	e9d6 2300 	ldrd	r2, r3, [r6]
   21c7c:	f7fe fe50 	bl	20920 <__aeabi_dmul>
   21c80:	2301      	movs	r3, #1
   21c82:	1064      	asrs	r4, r4, #1
   21c84:	3608      	adds	r6, #8
   21c86:	e76d      	b.n	21b64 <_dtoa_r+0x3ac>
   21c88:	2702      	movs	r7, #2
   21c8a:	e770      	b.n	21b6e <_dtoa_r+0x3b6>
   21c8c:	46d0      	mov	r8, sl
   21c8e:	9c08      	ldr	r4, [sp, #32]
   21c90:	e78f      	b.n	21bb2 <_dtoa_r+0x3fa>
   21c92:	9903      	ldr	r1, [sp, #12]
   21c94:	4b4e      	ldr	r3, [pc, #312]	; (21dd0 <_dtoa_r+0x618>)
   21c96:	4421      	add	r1, r4
   21c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   21c9c:	9112      	str	r1, [sp, #72]	; 0x48
   21c9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   21ca0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   21ca4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   21ca8:	2900      	cmp	r1, #0
   21caa:	d046      	beq.n	21d3a <_dtoa_r+0x582>
   21cac:	2000      	movs	r0, #0
   21cae:	494e      	ldr	r1, [pc, #312]	; (21de8 <_dtoa_r+0x630>)
   21cb0:	f7fe ff60 	bl	20b74 <__aeabi_ddiv>
   21cb4:	463b      	mov	r3, r7
   21cb6:	4632      	mov	r2, r6
   21cb8:	f7fe fc7a 	bl	205b0 <__aeabi_dsub>
   21cbc:	9f03      	ldr	r7, [sp, #12]
   21cbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21cc6:	f7ff fc07 	bl	214d8 <__aeabi_d2iz>
   21cca:	4604      	mov	r4, r0
   21ccc:	f7fe fdbe 	bl	2084c <__aeabi_i2d>
   21cd0:	4602      	mov	r2, r0
   21cd2:	460b      	mov	r3, r1
   21cd4:	3430      	adds	r4, #48	; 0x30
   21cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21cda:	f7fe fc69 	bl	205b0 <__aeabi_dsub>
   21cde:	4602      	mov	r2, r0
   21ce0:	460b      	mov	r3, r1
   21ce2:	f807 4b01 	strb.w	r4, [r7], #1
   21ce6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21cee:	f7ff fbb5 	bl	2145c <__aeabi_dcmplt>
   21cf2:	2800      	cmp	r0, #0
   21cf4:	d164      	bne.n	21dc0 <_dtoa_r+0x608>
   21cf6:	2000      	movs	r0, #0
   21cf8:	4937      	ldr	r1, [pc, #220]	; (21dd8 <_dtoa_r+0x620>)
   21cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   21cfe:	f7fe fc57 	bl	205b0 <__aeabi_dsub>
   21d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21d06:	f7ff fba9 	bl	2145c <__aeabi_dcmplt>
   21d0a:	2800      	cmp	r0, #0
   21d0c:	f040 80b4 	bne.w	21e78 <_dtoa_r+0x6c0>
   21d10:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21d12:	429f      	cmp	r7, r3
   21d14:	f43f af7a 	beq.w	21c0c <_dtoa_r+0x454>
   21d18:	2200      	movs	r2, #0
   21d1a:	4b30      	ldr	r3, [pc, #192]	; (21ddc <_dtoa_r+0x624>)
   21d1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21d20:	f7fe fdfe 	bl	20920 <__aeabi_dmul>
   21d24:	2200      	movs	r2, #0
   21d26:	4b2d      	ldr	r3, [pc, #180]	; (21ddc <_dtoa_r+0x624>)
   21d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21d2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21d30:	f7fe fdf6 	bl	20920 <__aeabi_dmul>
   21d34:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21d38:	e7c3      	b.n	21cc2 <_dtoa_r+0x50a>
   21d3a:	4630      	mov	r0, r6
   21d3c:	4639      	mov	r1, r7
   21d3e:	f7fe fdef 	bl	20920 <__aeabi_dmul>
   21d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21d44:	9c03      	ldr	r4, [sp, #12]
   21d46:	9314      	str	r3, [sp, #80]	; 0x50
   21d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   21d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21d50:	f7ff fbc2 	bl	214d8 <__aeabi_d2iz>
   21d54:	9015      	str	r0, [sp, #84]	; 0x54
   21d56:	f7fe fd79 	bl	2084c <__aeabi_i2d>
   21d5a:	4602      	mov	r2, r0
   21d5c:	460b      	mov	r3, r1
   21d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   21d62:	f7fe fc25 	bl	205b0 <__aeabi_dsub>
   21d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21d68:	4606      	mov	r6, r0
   21d6a:	460f      	mov	r7, r1
   21d6c:	3330      	adds	r3, #48	; 0x30
   21d6e:	2200      	movs	r2, #0
   21d70:	f804 3b01 	strb.w	r3, [r4], #1
   21d74:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21d76:	429c      	cmp	r4, r3
   21d78:	d124      	bne.n	21dc4 <_dtoa_r+0x60c>
   21d7a:	4b1b      	ldr	r3, [pc, #108]	; (21de8 <_dtoa_r+0x630>)
   21d7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   21d80:	f7fe fc18 	bl	205b4 <__adddf3>
   21d84:	4602      	mov	r2, r0
   21d86:	460b      	mov	r3, r1
   21d88:	4630      	mov	r0, r6
   21d8a:	4639      	mov	r1, r7
   21d8c:	f7ff fb84 	bl	21498 <__aeabi_dcmpgt>
   21d90:	2800      	cmp	r0, #0
   21d92:	d170      	bne.n	21e76 <_dtoa_r+0x6be>
   21d94:	2000      	movs	r0, #0
   21d96:	4914      	ldr	r1, [pc, #80]	; (21de8 <_dtoa_r+0x630>)
   21d98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   21d9c:	f7fe fc08 	bl	205b0 <__aeabi_dsub>
   21da0:	4602      	mov	r2, r0
   21da2:	460b      	mov	r3, r1
   21da4:	4630      	mov	r0, r6
   21da6:	4639      	mov	r1, r7
   21da8:	f7ff fb58 	bl	2145c <__aeabi_dcmplt>
   21dac:	2800      	cmp	r0, #0
   21dae:	f43f af2d 	beq.w	21c0c <_dtoa_r+0x454>
   21db2:	9f14      	ldr	r7, [sp, #80]	; 0x50
   21db4:	1e7b      	subs	r3, r7, #1
   21db6:	9314      	str	r3, [sp, #80]	; 0x50
   21db8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
   21dbc:	2b30      	cmp	r3, #48	; 0x30
   21dbe:	d0f8      	beq.n	21db2 <_dtoa_r+0x5fa>
   21dc0:	46c2      	mov	sl, r8
   21dc2:	e048      	b.n	21e56 <_dtoa_r+0x69e>
   21dc4:	4b05      	ldr	r3, [pc, #20]	; (21ddc <_dtoa_r+0x624>)
   21dc6:	f7fe fdab 	bl	20920 <__aeabi_dmul>
   21dca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   21dce:	e7bd      	b.n	21d4c <_dtoa_r+0x594>
   21dd0:	000413c0 	.word	0x000413c0
   21dd4:	00041398 	.word	0x00041398
   21dd8:	3ff00000 	.word	0x3ff00000
   21ddc:	40240000 	.word	0x40240000
   21de0:	401c0000 	.word	0x401c0000
   21de4:	40140000 	.word	0x40140000
   21de8:	3fe00000 	.word	0x3fe00000
   21dec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
   21df0:	9f03      	ldr	r7, [sp, #12]
   21df2:	4640      	mov	r0, r8
   21df4:	4649      	mov	r1, r9
   21df6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21dfa:	f7fe febb 	bl	20b74 <__aeabi_ddiv>
   21dfe:	f7ff fb6b 	bl	214d8 <__aeabi_d2iz>
   21e02:	4604      	mov	r4, r0
   21e04:	f7fe fd22 	bl	2084c <__aeabi_i2d>
   21e08:	f104 0630 	add.w	r6, r4, #48	; 0x30
   21e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21e10:	f7fe fd86 	bl	20920 <__aeabi_dmul>
   21e14:	460b      	mov	r3, r1
   21e16:	4602      	mov	r2, r0
   21e18:	4649      	mov	r1, r9
   21e1a:	4640      	mov	r0, r8
   21e1c:	f7fe fbc8 	bl	205b0 <__aeabi_dsub>
   21e20:	f807 6b01 	strb.w	r6, [r7], #1
   21e24:	9e03      	ldr	r6, [sp, #12]
   21e26:	9b08      	ldr	r3, [sp, #32]
   21e28:	1bbe      	subs	r6, r7, r6
   21e2a:	42b3      	cmp	r3, r6
   21e2c:	d138      	bne.n	21ea0 <_dtoa_r+0x6e8>
   21e2e:	4602      	mov	r2, r0
   21e30:	460b      	mov	r3, r1
   21e32:	f7fe fbbf 	bl	205b4 <__adddf3>
   21e36:	4680      	mov	r8, r0
   21e38:	4689      	mov	r9, r1
   21e3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21e3e:	f7ff fb2b 	bl	21498 <__aeabi_dcmpgt>
   21e42:	bb58      	cbnz	r0, 21e9c <_dtoa_r+0x6e4>
   21e44:	4640      	mov	r0, r8
   21e46:	4649      	mov	r1, r9
   21e48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21e4c:	f7ff fafc 	bl	21448 <__aeabi_dcmpeq>
   21e50:	b108      	cbz	r0, 21e56 <_dtoa_r+0x69e>
   21e52:	07e1      	lsls	r1, r4, #31
   21e54:	d422      	bmi.n	21e9c <_dtoa_r+0x6e4>
   21e56:	4628      	mov	r0, r5
   21e58:	4659      	mov	r1, fp
   21e5a:	f01e fbd2 	bl	40602 <_Bfree>
   21e5e:	2300      	movs	r3, #0
   21e60:	f10a 0001 	add.w	r0, sl, #1
   21e64:	703b      	strb	r3, [r7, #0]
   21e66:	9b24      	ldr	r3, [sp, #144]	; 0x90
   21e68:	6018      	str	r0, [r3, #0]
   21e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   21e6c:	2b00      	cmp	r3, #0
   21e6e:	f43f acea 	beq.w	21846 <_dtoa_r+0x8e>
   21e72:	601f      	str	r7, [r3, #0]
   21e74:	e4e7      	b.n	21846 <_dtoa_r+0x8e>
   21e76:	4627      	mov	r7, r4
   21e78:	463b      	mov	r3, r7
   21e7a:	461f      	mov	r7, r3
   21e7c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   21e80:	2a39      	cmp	r2, #57	; 0x39
   21e82:	d107      	bne.n	21e94 <_dtoa_r+0x6dc>
   21e84:	9a03      	ldr	r2, [sp, #12]
   21e86:	429a      	cmp	r2, r3
   21e88:	d1f7      	bne.n	21e7a <_dtoa_r+0x6c2>
   21e8a:	2230      	movs	r2, #48	; 0x30
   21e8c:	9903      	ldr	r1, [sp, #12]
   21e8e:	f108 0801 	add.w	r8, r8, #1
   21e92:	700a      	strb	r2, [r1, #0]
   21e94:	781a      	ldrb	r2, [r3, #0]
   21e96:	3201      	adds	r2, #1
   21e98:	701a      	strb	r2, [r3, #0]
   21e9a:	e791      	b.n	21dc0 <_dtoa_r+0x608>
   21e9c:	46d0      	mov	r8, sl
   21e9e:	e7eb      	b.n	21e78 <_dtoa_r+0x6c0>
   21ea0:	2200      	movs	r2, #0
   21ea2:	4ba1      	ldr	r3, [pc, #644]	; (22128 <_dtoa_r+0x970>)
   21ea4:	f7fe fd3c 	bl	20920 <__aeabi_dmul>
   21ea8:	2200      	movs	r2, #0
   21eaa:	2300      	movs	r3, #0
   21eac:	4680      	mov	r8, r0
   21eae:	4689      	mov	r9, r1
   21eb0:	f7ff faca 	bl	21448 <__aeabi_dcmpeq>
   21eb4:	2800      	cmp	r0, #0
   21eb6:	d09c      	beq.n	21df2 <_dtoa_r+0x63a>
   21eb8:	e7cd      	b.n	21e56 <_dtoa_r+0x69e>
   21eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21ebc:	2a00      	cmp	r2, #0
   21ebe:	f000 80cc 	beq.w	2205a <_dtoa_r+0x8a2>
   21ec2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   21ec4:	2a01      	cmp	r2, #1
   21ec6:	f300 80af 	bgt.w	22028 <_dtoa_r+0x870>
   21eca:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21ecc:	2a00      	cmp	r2, #0
   21ece:	f000 80a7 	beq.w	22020 <_dtoa_r+0x868>
   21ed2:	f203 4333 	addw	r3, r3, #1075	; 0x433
   21ed6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21ed8:	9f06      	ldr	r7, [sp, #24]
   21eda:	9a06      	ldr	r2, [sp, #24]
   21edc:	2101      	movs	r1, #1
   21ede:	4628      	mov	r0, r5
   21ee0:	441a      	add	r2, r3
   21ee2:	9206      	str	r2, [sp, #24]
   21ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21ee6:	441a      	add	r2, r3
   21ee8:	9209      	str	r2, [sp, #36]	; 0x24
   21eea:	f01e fc2e 	bl	4074a <__i2b>
   21eee:	4606      	mov	r6, r0
   21ef0:	2f00      	cmp	r7, #0
   21ef2:	dd0c      	ble.n	21f0e <_dtoa_r+0x756>
   21ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21ef6:	2b00      	cmp	r3, #0
   21ef8:	dd09      	ble.n	21f0e <_dtoa_r+0x756>
   21efa:	42bb      	cmp	r3, r7
   21efc:	9a06      	ldr	r2, [sp, #24]
   21efe:	bfa8      	it	ge
   21f00:	463b      	movge	r3, r7
   21f02:	1ad2      	subs	r2, r2, r3
   21f04:	1aff      	subs	r7, r7, r3
   21f06:	9206      	str	r2, [sp, #24]
   21f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21f0a:	1ad3      	subs	r3, r2, r3
   21f0c:	9309      	str	r3, [sp, #36]	; 0x24
   21f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f10:	b1f3      	cbz	r3, 21f50 <_dtoa_r+0x798>
   21f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21f14:	2b00      	cmp	r3, #0
   21f16:	f000 80a4 	beq.w	22062 <_dtoa_r+0x8aa>
   21f1a:	2c00      	cmp	r4, #0
   21f1c:	dd10      	ble.n	21f40 <_dtoa_r+0x788>
   21f1e:	4631      	mov	r1, r6
   21f20:	4622      	mov	r2, r4
   21f22:	4628      	mov	r0, r5
   21f24:	f018 ff28 	bl	3ad78 <__pow5mult>
   21f28:	465a      	mov	r2, fp
   21f2a:	4601      	mov	r1, r0
   21f2c:	4606      	mov	r6, r0
   21f2e:	4628      	mov	r0, r5
   21f30:	f01e fc14 	bl	4075c <__multiply>
   21f34:	4680      	mov	r8, r0
   21f36:	4659      	mov	r1, fp
   21f38:	4628      	mov	r0, r5
   21f3a:	46c3      	mov	fp, r8
   21f3c:	f01e fb61 	bl	40602 <_Bfree>
   21f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21f42:	1b1a      	subs	r2, r3, r4
   21f44:	d004      	beq.n	21f50 <_dtoa_r+0x798>
   21f46:	4659      	mov	r1, fp
   21f48:	4628      	mov	r0, r5
   21f4a:	f018 ff15 	bl	3ad78 <__pow5mult>
   21f4e:	4683      	mov	fp, r0
   21f50:	2101      	movs	r1, #1
   21f52:	4628      	mov	r0, r5
   21f54:	f01e fbf9 	bl	4074a <__i2b>
   21f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21f5a:	4604      	mov	r4, r0
   21f5c:	2b00      	cmp	r3, #0
   21f5e:	f340 8082 	ble.w	22066 <_dtoa_r+0x8ae>
   21f62:	461a      	mov	r2, r3
   21f64:	4601      	mov	r1, r0
   21f66:	4628      	mov	r0, r5
   21f68:	f018 ff06 	bl	3ad78 <__pow5mult>
   21f6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   21f6e:	4604      	mov	r4, r0
   21f70:	2b01      	cmp	r3, #1
   21f72:	dd7b      	ble.n	2206c <_dtoa_r+0x8b4>
   21f74:	f04f 0800 	mov.w	r8, #0
   21f78:	6923      	ldr	r3, [r4, #16]
   21f7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   21f7e:	6918      	ldr	r0, [r3, #16]
   21f80:	f01e fb95 	bl	406ae <__hi0bits>
   21f84:	f1c0 0020 	rsb	r0, r0, #32
   21f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21f8a:	4418      	add	r0, r3
   21f8c:	f010 001f 	ands.w	r0, r0, #31
   21f90:	f000 808d 	beq.w	220ae <_dtoa_r+0x8f6>
   21f94:	f1c0 0320 	rsb	r3, r0, #32
   21f98:	2b04      	cmp	r3, #4
   21f9a:	f340 8086 	ble.w	220aa <_dtoa_r+0x8f2>
   21f9e:	f1c0 001c 	rsb	r0, r0, #28
   21fa2:	9b06      	ldr	r3, [sp, #24]
   21fa4:	4407      	add	r7, r0
   21fa6:	4403      	add	r3, r0
   21fa8:	9306      	str	r3, [sp, #24]
   21faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21fac:	4403      	add	r3, r0
   21fae:	9309      	str	r3, [sp, #36]	; 0x24
   21fb0:	9b06      	ldr	r3, [sp, #24]
   21fb2:	2b00      	cmp	r3, #0
   21fb4:	dd05      	ble.n	21fc2 <_dtoa_r+0x80a>
   21fb6:	4659      	mov	r1, fp
   21fb8:	461a      	mov	r2, r3
   21fba:	4628      	mov	r0, r5
   21fbc:	f01e fc69 	bl	40892 <__lshift>
   21fc0:	4683      	mov	fp, r0
   21fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21fc4:	2b00      	cmp	r3, #0
   21fc6:	dd05      	ble.n	21fd4 <_dtoa_r+0x81c>
   21fc8:	4621      	mov	r1, r4
   21fca:	461a      	mov	r2, r3
   21fcc:	4628      	mov	r0, r5
   21fce:	f01e fc60 	bl	40892 <__lshift>
   21fd2:	4604      	mov	r4, r0
   21fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   21fd6:	2b00      	cmp	r3, #0
   21fd8:	d06b      	beq.n	220b2 <_dtoa_r+0x8fa>
   21fda:	4621      	mov	r1, r4
   21fdc:	4658      	mov	r0, fp
   21fde:	f01e fcb7 	bl	40950 <__mcmp>
   21fe2:	2800      	cmp	r0, #0
   21fe4:	da65      	bge.n	220b2 <_dtoa_r+0x8fa>
   21fe6:	2300      	movs	r3, #0
   21fe8:	4659      	mov	r1, fp
   21fea:	220a      	movs	r2, #10
   21fec:	4628      	mov	r0, r5
   21fee:	f01e fb1f 	bl	40630 <__multadd>
   21ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21ff4:	f10a 3aff 	add.w	sl, sl, #4294967295
   21ff8:	4683      	mov	fp, r0
   21ffa:	2b00      	cmp	r3, #0
   21ffc:	f000 818b 	beq.w	22316 <_dtoa_r+0xb5e>
   22000:	4631      	mov	r1, r6
   22002:	2300      	movs	r3, #0
   22004:	220a      	movs	r2, #10
   22006:	4628      	mov	r0, r5
   22008:	f01e fb12 	bl	40630 <__multadd>
   2200c:	f1b9 0f00 	cmp.w	r9, #0
   22010:	4606      	mov	r6, r0
   22012:	f300 8091 	bgt.w	22138 <_dtoa_r+0x980>
   22016:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22018:	2b02      	cmp	r3, #2
   2201a:	f340 808d 	ble.w	22138 <_dtoa_r+0x980>
   2201e:	e050      	b.n	220c2 <_dtoa_r+0x90a>
   22020:	9b16      	ldr	r3, [sp, #88]	; 0x58
   22022:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   22026:	e756      	b.n	21ed6 <_dtoa_r+0x71e>
   22028:	9b08      	ldr	r3, [sp, #32]
   2202a:	1e5c      	subs	r4, r3, #1
   2202c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2202e:	42a3      	cmp	r3, r4
   22030:	bfb7      	itett	lt
   22032:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   22034:	1b1c      	subge	r4, r3, r4
   22036:	940a      	strlt	r4, [sp, #40]	; 0x28
   22038:	1ae2      	sublt	r2, r4, r3
   2203a:	bfbf      	itttt	lt
   2203c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
   2203e:	2400      	movlt	r4, #0
   22040:	189b      	addlt	r3, r3, r2
   22042:	930e      	strlt	r3, [sp, #56]	; 0x38
   22044:	9b08      	ldr	r3, [sp, #32]
   22046:	2b00      	cmp	r3, #0
   22048:	bfbb      	ittet	lt
   2204a:	9b06      	ldrlt	r3, [sp, #24]
   2204c:	9a08      	ldrlt	r2, [sp, #32]
   2204e:	9f06      	ldrge	r7, [sp, #24]
   22050:	1a9f      	sublt	r7, r3, r2
   22052:	bfac      	ite	ge
   22054:	9b08      	ldrge	r3, [sp, #32]
   22056:	2300      	movlt	r3, #0
   22058:	e73f      	b.n	21eda <_dtoa_r+0x722>
   2205a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2205c:	9f06      	ldr	r7, [sp, #24]
   2205e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   22060:	e746      	b.n	21ef0 <_dtoa_r+0x738>
   22062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22064:	e76f      	b.n	21f46 <_dtoa_r+0x78e>
   22066:	9b22      	ldr	r3, [sp, #136]	; 0x88
   22068:	2b01      	cmp	r3, #1
   2206a:	dc19      	bgt.n	220a0 <_dtoa_r+0x8e8>
   2206c:	9b04      	ldr	r3, [sp, #16]
   2206e:	b9bb      	cbnz	r3, 220a0 <_dtoa_r+0x8e8>
   22070:	9b05      	ldr	r3, [sp, #20]
   22072:	f3c3 0313 	ubfx	r3, r3, #0, #20
   22076:	b99b      	cbnz	r3, 220a0 <_dtoa_r+0x8e8>
   22078:	9b05      	ldr	r3, [sp, #20]
   2207a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2207e:	0d1b      	lsrs	r3, r3, #20
   22080:	051b      	lsls	r3, r3, #20
   22082:	b183      	cbz	r3, 220a6 <_dtoa_r+0x8ee>
   22084:	9b06      	ldr	r3, [sp, #24]
   22086:	f04f 0801 	mov.w	r8, #1
   2208a:	3301      	adds	r3, #1
   2208c:	9306      	str	r3, [sp, #24]
   2208e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22090:	3301      	adds	r3, #1
   22092:	9309      	str	r3, [sp, #36]	; 0x24
   22094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22096:	2b00      	cmp	r3, #0
   22098:	f47f af6e 	bne.w	21f78 <_dtoa_r+0x7c0>
   2209c:	2001      	movs	r0, #1
   2209e:	e773      	b.n	21f88 <_dtoa_r+0x7d0>
   220a0:	f04f 0800 	mov.w	r8, #0
   220a4:	e7f6      	b.n	22094 <_dtoa_r+0x8dc>
   220a6:	4698      	mov	r8, r3
   220a8:	e7f4      	b.n	22094 <_dtoa_r+0x8dc>
   220aa:	d081      	beq.n	21fb0 <_dtoa_r+0x7f8>
   220ac:	4618      	mov	r0, r3
   220ae:	301c      	adds	r0, #28
   220b0:	e777      	b.n	21fa2 <_dtoa_r+0x7ea>
   220b2:	9b08      	ldr	r3, [sp, #32]
   220b4:	2b00      	cmp	r3, #0
   220b6:	dc39      	bgt.n	2212c <_dtoa_r+0x974>
   220b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   220ba:	2b02      	cmp	r3, #2
   220bc:	dd36      	ble.n	2212c <_dtoa_r+0x974>
   220be:	f8dd 9020 	ldr.w	r9, [sp, #32]
   220c2:	f1b9 0f00 	cmp.w	r9, #0
   220c6:	d10d      	bne.n	220e4 <_dtoa_r+0x92c>
   220c8:	4621      	mov	r1, r4
   220ca:	464b      	mov	r3, r9
   220cc:	2205      	movs	r2, #5
   220ce:	4628      	mov	r0, r5
   220d0:	f01e faae 	bl	40630 <__multadd>
   220d4:	4601      	mov	r1, r0
   220d6:	4604      	mov	r4, r0
   220d8:	4658      	mov	r0, fp
   220da:	f01e fc39 	bl	40950 <__mcmp>
   220de:	2800      	cmp	r0, #0
   220e0:	f73f adc0 	bgt.w	21c64 <_dtoa_r+0x4ac>
   220e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   220e6:	9f03      	ldr	r7, [sp, #12]
   220e8:	ea6f 0a03 	mvn.w	sl, r3
   220ec:	f04f 0800 	mov.w	r8, #0
   220f0:	4621      	mov	r1, r4
   220f2:	4628      	mov	r0, r5
   220f4:	f01e fa85 	bl	40602 <_Bfree>
   220f8:	2e00      	cmp	r6, #0
   220fa:	f43f aeac 	beq.w	21e56 <_dtoa_r+0x69e>
   220fe:	f1b8 0f00 	cmp.w	r8, #0
   22102:	d005      	beq.n	22110 <_dtoa_r+0x958>
   22104:	45b0      	cmp	r8, r6
   22106:	d003      	beq.n	22110 <_dtoa_r+0x958>
   22108:	4641      	mov	r1, r8
   2210a:	4628      	mov	r0, r5
   2210c:	f01e fa79 	bl	40602 <_Bfree>
   22110:	4631      	mov	r1, r6
   22112:	4628      	mov	r0, r5
   22114:	f01e fa75 	bl	40602 <_Bfree>
   22118:	e69d      	b.n	21e56 <_dtoa_r+0x69e>
   2211a:	2400      	movs	r4, #0
   2211c:	4626      	mov	r6, r4
   2211e:	e7e1      	b.n	220e4 <_dtoa_r+0x92c>
   22120:	46c2      	mov	sl, r8
   22122:	4626      	mov	r6, r4
   22124:	e59e      	b.n	21c64 <_dtoa_r+0x4ac>
   22126:	bf00      	nop
   22128:	40240000 	.word	0x40240000
   2212c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2212e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   22132:	2b00      	cmp	r3, #0
   22134:	f000 80f6 	beq.w	22324 <_dtoa_r+0xb6c>
   22138:	2f00      	cmp	r7, #0
   2213a:	dd05      	ble.n	22148 <_dtoa_r+0x990>
   2213c:	4631      	mov	r1, r6
   2213e:	463a      	mov	r2, r7
   22140:	4628      	mov	r0, r5
   22142:	f01e fba6 	bl	40892 <__lshift>
   22146:	4606      	mov	r6, r0
   22148:	f1b8 0f00 	cmp.w	r8, #0
   2214c:	d055      	beq.n	221fa <_dtoa_r+0xa42>
   2214e:	6871      	ldr	r1, [r6, #4]
   22150:	4628      	mov	r0, r5
   22152:	f01e fa22 	bl	4059a <_Balloc>
   22156:	6932      	ldr	r2, [r6, #16]
   22158:	4607      	mov	r7, r0
   2215a:	f106 010c 	add.w	r1, r6, #12
   2215e:	3202      	adds	r2, #2
   22160:	300c      	adds	r0, #12
   22162:	0092      	lsls	r2, r2, #2
   22164:	f01d fecc 	bl	3ff00 <memcpy>
   22168:	2201      	movs	r2, #1
   2216a:	4639      	mov	r1, r7
   2216c:	4628      	mov	r0, r5
   2216e:	f01e fb90 	bl	40892 <__lshift>
   22172:	9b03      	ldr	r3, [sp, #12]
   22174:	46b0      	mov	r8, r6
   22176:	4606      	mov	r6, r0
   22178:	3301      	adds	r3, #1
   2217a:	9308      	str	r3, [sp, #32]
   2217c:	9b03      	ldr	r3, [sp, #12]
   2217e:	444b      	add	r3, r9
   22180:	930a      	str	r3, [sp, #40]	; 0x28
   22182:	9b04      	ldr	r3, [sp, #16]
   22184:	f003 0301 	and.w	r3, r3, #1
   22188:	9309      	str	r3, [sp, #36]	; 0x24
   2218a:	9b08      	ldr	r3, [sp, #32]
   2218c:	4621      	mov	r1, r4
   2218e:	4658      	mov	r0, fp
   22190:	3b01      	subs	r3, #1
   22192:	9304      	str	r3, [sp, #16]
   22194:	f01e f8ff 	bl	40396 <quorem>
   22198:	4603      	mov	r3, r0
   2219a:	4641      	mov	r1, r8
   2219c:	9006      	str	r0, [sp, #24]
   2219e:	4658      	mov	r0, fp
   221a0:	3330      	adds	r3, #48	; 0x30
   221a2:	930b      	str	r3, [sp, #44]	; 0x2c
   221a4:	f01e fbd4 	bl	40950 <__mcmp>
   221a8:	4632      	mov	r2, r6
   221aa:	4681      	mov	r9, r0
   221ac:	4621      	mov	r1, r4
   221ae:	4628      	mov	r0, r5
   221b0:	f01e fbe9 	bl	40986 <__mdiff>
   221b4:	68c2      	ldr	r2, [r0, #12]
   221b6:	4607      	mov	r7, r0
   221b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   221ba:	bb02      	cbnz	r2, 221fe <_dtoa_r+0xa46>
   221bc:	4601      	mov	r1, r0
   221be:	4658      	mov	r0, fp
   221c0:	f01e fbc6 	bl	40950 <__mcmp>
   221c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   221c6:	4602      	mov	r2, r0
   221c8:	4639      	mov	r1, r7
   221ca:	4628      	mov	r0, r5
   221cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
   221d0:	f01e fa17 	bl	40602 <_Bfree>
   221d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   221d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   221d8:	9f08      	ldr	r7, [sp, #32]
   221da:	ea43 0102 	orr.w	r1, r3, r2
   221de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   221e0:	430b      	orrs	r3, r1
   221e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   221e4:	d10d      	bne.n	22202 <_dtoa_r+0xa4a>
   221e6:	2b39      	cmp	r3, #57	; 0x39
   221e8:	d029      	beq.n	2223e <_dtoa_r+0xa86>
   221ea:	f1b9 0f00 	cmp.w	r9, #0
   221ee:	dd01      	ble.n	221f4 <_dtoa_r+0xa3c>
   221f0:	9b06      	ldr	r3, [sp, #24]
   221f2:	3331      	adds	r3, #49	; 0x31
   221f4:	9a04      	ldr	r2, [sp, #16]
   221f6:	7013      	strb	r3, [r2, #0]
   221f8:	e77a      	b.n	220f0 <_dtoa_r+0x938>
   221fa:	4630      	mov	r0, r6
   221fc:	e7b9      	b.n	22172 <_dtoa_r+0x9ba>
   221fe:	2201      	movs	r2, #1
   22200:	e7e2      	b.n	221c8 <_dtoa_r+0xa10>
   22202:	f1b9 0f00 	cmp.w	r9, #0
   22206:	db06      	blt.n	22216 <_dtoa_r+0xa5e>
   22208:	9922      	ldr	r1, [sp, #136]	; 0x88
   2220a:	ea41 0909 	orr.w	r9, r1, r9
   2220e:	9909      	ldr	r1, [sp, #36]	; 0x24
   22210:	ea59 0101 	orrs.w	r1, r9, r1
   22214:	d120      	bne.n	22258 <_dtoa_r+0xaa0>
   22216:	2a00      	cmp	r2, #0
   22218:	ddec      	ble.n	221f4 <_dtoa_r+0xa3c>
   2221a:	4659      	mov	r1, fp
   2221c:	2201      	movs	r2, #1
   2221e:	4628      	mov	r0, r5
   22220:	9308      	str	r3, [sp, #32]
   22222:	f01e fb36 	bl	40892 <__lshift>
   22226:	4621      	mov	r1, r4
   22228:	4683      	mov	fp, r0
   2222a:	f01e fb91 	bl	40950 <__mcmp>
   2222e:	2800      	cmp	r0, #0
   22230:	9b08      	ldr	r3, [sp, #32]
   22232:	dc02      	bgt.n	2223a <_dtoa_r+0xa82>
   22234:	d1de      	bne.n	221f4 <_dtoa_r+0xa3c>
   22236:	07da      	lsls	r2, r3, #31
   22238:	d5dc      	bpl.n	221f4 <_dtoa_r+0xa3c>
   2223a:	2b39      	cmp	r3, #57	; 0x39
   2223c:	d1d8      	bne.n	221f0 <_dtoa_r+0xa38>
   2223e:	2339      	movs	r3, #57	; 0x39
   22240:	9a04      	ldr	r2, [sp, #16]
   22242:	7013      	strb	r3, [r2, #0]
   22244:	463b      	mov	r3, r7
   22246:	461f      	mov	r7, r3
   22248:	3b01      	subs	r3, #1
   2224a:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   2224e:	2a39      	cmp	r2, #57	; 0x39
   22250:	d050      	beq.n	222f4 <_dtoa_r+0xb3c>
   22252:	3201      	adds	r2, #1
   22254:	701a      	strb	r2, [r3, #0]
   22256:	e74b      	b.n	220f0 <_dtoa_r+0x938>
   22258:	2a00      	cmp	r2, #0
   2225a:	dd03      	ble.n	22264 <_dtoa_r+0xaac>
   2225c:	2b39      	cmp	r3, #57	; 0x39
   2225e:	d0ee      	beq.n	2223e <_dtoa_r+0xa86>
   22260:	3301      	adds	r3, #1
   22262:	e7c7      	b.n	221f4 <_dtoa_r+0xa3c>
   22264:	9a08      	ldr	r2, [sp, #32]
   22266:	990a      	ldr	r1, [sp, #40]	; 0x28
   22268:	f802 3c01 	strb.w	r3, [r2, #-1]
   2226c:	428a      	cmp	r2, r1
   2226e:	d02a      	beq.n	222c6 <_dtoa_r+0xb0e>
   22270:	4659      	mov	r1, fp
   22272:	2300      	movs	r3, #0
   22274:	220a      	movs	r2, #10
   22276:	4628      	mov	r0, r5
   22278:	f01e f9da 	bl	40630 <__multadd>
   2227c:	45b0      	cmp	r8, r6
   2227e:	4683      	mov	fp, r0
   22280:	f04f 0300 	mov.w	r3, #0
   22284:	f04f 020a 	mov.w	r2, #10
   22288:	4641      	mov	r1, r8
   2228a:	4628      	mov	r0, r5
   2228c:	d107      	bne.n	2229e <_dtoa_r+0xae6>
   2228e:	f01e f9cf 	bl	40630 <__multadd>
   22292:	4680      	mov	r8, r0
   22294:	4606      	mov	r6, r0
   22296:	9b08      	ldr	r3, [sp, #32]
   22298:	3301      	adds	r3, #1
   2229a:	9308      	str	r3, [sp, #32]
   2229c:	e775      	b.n	2218a <_dtoa_r+0x9d2>
   2229e:	f01e f9c7 	bl	40630 <__multadd>
   222a2:	4631      	mov	r1, r6
   222a4:	4680      	mov	r8, r0
   222a6:	2300      	movs	r3, #0
   222a8:	220a      	movs	r2, #10
   222aa:	4628      	mov	r0, r5
   222ac:	f01e f9c0 	bl	40630 <__multadd>
   222b0:	4606      	mov	r6, r0
   222b2:	e7f0      	b.n	22296 <_dtoa_r+0xade>
   222b4:	f1b9 0f00 	cmp.w	r9, #0
   222b8:	9a03      	ldr	r2, [sp, #12]
   222ba:	f04f 0800 	mov.w	r8, #0
   222be:	bfcc      	ite	gt
   222c0:	464f      	movgt	r7, r9
   222c2:	2701      	movle	r7, #1
   222c4:	4417      	add	r7, r2
   222c6:	4659      	mov	r1, fp
   222c8:	2201      	movs	r2, #1
   222ca:	4628      	mov	r0, r5
   222cc:	9308      	str	r3, [sp, #32]
   222ce:	f01e fae0 	bl	40892 <__lshift>
   222d2:	4621      	mov	r1, r4
   222d4:	4683      	mov	fp, r0
   222d6:	f01e fb3b 	bl	40950 <__mcmp>
   222da:	2800      	cmp	r0, #0
   222dc:	dcb2      	bgt.n	22244 <_dtoa_r+0xa8c>
   222de:	d102      	bne.n	222e6 <_dtoa_r+0xb2e>
   222e0:	9b08      	ldr	r3, [sp, #32]
   222e2:	07db      	lsls	r3, r3, #31
   222e4:	d4ae      	bmi.n	22244 <_dtoa_r+0xa8c>
   222e6:	463b      	mov	r3, r7
   222e8:	461f      	mov	r7, r3
   222ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   222ee:	2a30      	cmp	r2, #48	; 0x30
   222f0:	d0fa      	beq.n	222e8 <_dtoa_r+0xb30>
   222f2:	e6fd      	b.n	220f0 <_dtoa_r+0x938>
   222f4:	9a03      	ldr	r2, [sp, #12]
   222f6:	429a      	cmp	r2, r3
   222f8:	d1a5      	bne.n	22246 <_dtoa_r+0xa8e>
   222fa:	f10a 0a01 	add.w	sl, sl, #1
   222fe:	2331      	movs	r3, #49	; 0x31
   22300:	e779      	b.n	221f6 <_dtoa_r+0xa3e>
   22302:	4b13      	ldr	r3, [pc, #76]	; (22350 <_dtoa_r+0xb98>)
   22304:	f7ff babe 	b.w	21884 <_dtoa_r+0xcc>
   22308:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2230a:	2b00      	cmp	r3, #0
   2230c:	f47f aa96 	bne.w	2183c <_dtoa_r+0x84>
   22310:	4b10      	ldr	r3, [pc, #64]	; (22354 <_dtoa_r+0xb9c>)
   22312:	f7ff bab7 	b.w	21884 <_dtoa_r+0xcc>
   22316:	f1b9 0f00 	cmp.w	r9, #0
   2231a:	dc03      	bgt.n	22324 <_dtoa_r+0xb6c>
   2231c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2231e:	2b02      	cmp	r3, #2
   22320:	f73f aecf 	bgt.w	220c2 <_dtoa_r+0x90a>
   22324:	9f03      	ldr	r7, [sp, #12]
   22326:	4621      	mov	r1, r4
   22328:	4658      	mov	r0, fp
   2232a:	f01e f834 	bl	40396 <quorem>
   2232e:	9a03      	ldr	r2, [sp, #12]
   22330:	f100 0330 	add.w	r3, r0, #48	; 0x30
   22334:	f807 3b01 	strb.w	r3, [r7], #1
   22338:	1aba      	subs	r2, r7, r2
   2233a:	4591      	cmp	r9, r2
   2233c:	ddba      	ble.n	222b4 <_dtoa_r+0xafc>
   2233e:	4659      	mov	r1, fp
   22340:	2300      	movs	r3, #0
   22342:	220a      	movs	r2, #10
   22344:	4628      	mov	r0, r5
   22346:	f01e f973 	bl	40630 <__multadd>
   2234a:	4683      	mov	fp, r0
   2234c:	e7eb      	b.n	22326 <_dtoa_r+0xb6e>
   2234e:	bf00      	nop
   22350:	00045f9b 	.word	0x00045f9b
   22354:	00045f8a 	.word	0x00045f8a

00022358 <rsp_dev_fwinfo52>:
	respond(nrf91buffer, 6);
	return 0;
}
//size 4 8 die bytes 0 minor fw 1 major fw num
void rsp_dev_fwinfo52(uint8_t* p_rsp, uint16_t rsp_len)
{
   22358:	b530      	push	{r4, r5, lr}
   2235a:	b083      	sub	sp, #12
   2235c:	4603      	mov	r3, r0
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   2235e:	7941      	ldrb	r1, [r0, #5]
   22360:	7902      	ldrb	r2, [r0, #4]
   22362:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   22366:	78c0      	ldrb	r0, [r0, #3]
   22368:	789a      	ldrb	r2, [r3, #2]
   2236a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2236e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	m_available_size52 = sys_get_le32(&p_rsp[2]);
   22372:	490b      	ldr	r1, [pc, #44]	; (223a0 <rsp_dev_fwinfo52+0x48>)
   22374:	600a      	str	r2, [r1, #0]
	m_cur_majorfw52 = p_rsp[1];
	m_cur_minorfw52 = p_rsp[0];
   22376:	781c      	ldrb	r4, [r3, #0]
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   22378:	490a      	ldr	r1, [pc, #40]	; (223a4 <rsp_dev_fwinfo52+0x4c>)
   2237a:	480b      	ldr	r0, [pc, #44]	; (223a8 <rsp_dev_fwinfo52+0x50>)
   2237c:	1a09      	subs	r1, r1, r0
   2237e:	08c9      	lsrs	r1, r1, #3

	LOG_INF("nRF52:Available Flash:%x FWNum%x.%x",m_available_size52,m_cur_majorfw52,m_cur_minorfw52);
   22380:	f04f 0000 	mov.w	r0, #0
   22384:	2503      	movs	r5, #3
   22386:	f365 0002 	bfi	r0, r5, #0, #3
   2238a:	f36f 00c5 	bfc	r0, #3, #3
   2238e:	f361 108f 	bfi	r0, r1, #6, #10
   22392:	9400      	str	r4, [sp, #0]
   22394:	785b      	ldrb	r3, [r3, #1]
   22396:	4905      	ldr	r1, [pc, #20]	; (223ac <rsp_dev_fwinfo52+0x54>)
   22398:	f019 fe56 	bl	3c048 <log_string_sync>
}
   2239c:	b003      	add	sp, #12
   2239e:	bd30      	pop	{r4, r5, pc}
   223a0:	2000e7f4 	.word	0x2000e7f4
   223a4:	000412b0 	.word	0x000412b0
   223a8:	00041200 	.word	0x00041200
   223ac:	00041488 	.word	0x00041488

000223b0 <req_dev_fwinfo92>:
{
   223b0:	b510      	push	{r4, lr}
   223b2:	b082      	sub	sp, #8
   223b4:	4614      	mov	r4, r2
   223b6:	4b0d      	ldr	r3, [pc, #52]	; (223ec <req_dev_fwinfo92+0x3c>)
   223b8:	4a0d      	ldr	r2, [pc, #52]	; (223f0 <req_dev_fwinfo92+0x40>)
   223ba:	1a9b      	subs	r3, r3, r2
   223bc:	08db      	lsrs	r3, r3, #3
	LOG_INF("In FW Info");
   223be:	f04f 0000 	mov.w	r0, #0
   223c2:	2203      	movs	r2, #3
   223c4:	f362 0002 	bfi	r0, r2, #0, #3
   223c8:	f36f 00c5 	bfc	r0, #3, #3
   223cc:	f363 108f 	bfi	r0, r3, #6, #10
   223d0:	4908      	ldr	r1, [pc, #32]	; (223f4 <req_dev_fwinfo92+0x44>)
   223d2:	f019 fe39 	bl	3c048 <log_string_sync>
	app_flash_get_DevInf(nrf91buffer,6);
   223d6:	2106      	movs	r1, #6
   223d8:	4668      	mov	r0, sp
   223da:	f019 fa2f 	bl	3b83c <app_flash_get_DevInf>
	respond(nrf91buffer, 6);
   223de:	2106      	movs	r1, #6
   223e0:	4668      	mov	r0, sp
   223e2:	47a0      	blx	r4
}
   223e4:	2000      	movs	r0, #0
   223e6:	b002      	add	sp, #8
   223e8:	bd10      	pop	{r4, pc}
   223ea:	bf00      	nop
   223ec:	000412b0 	.word	0x000412b0
   223f0:	00041200 	.word	0x00041200
   223f4:	000414ac 	.word	0x000414ac

000223f8 <dfu_file_ready>:
{
   223f8:	b508      	push	{r3, lr}
   223fa:	4b58      	ldr	r3, [pc, #352]	; (2255c <dfu_file_ready+0x164>)
   223fc:	4a58      	ldr	r2, [pc, #352]	; (22560 <dfu_file_ready+0x168>)
   223fe:	1a9b      	subs	r3, r3, r2
   22400:	08db      	lsrs	r3, r3, #3
	LOG_INF("File Ready");
   22402:	f04f 0000 	mov.w	r0, #0
   22406:	2203      	movs	r2, #3
   22408:	f362 0002 	bfi	r0, r2, #0, #3
   2240c:	f36f 00c5 	bfc	r0, #3, #3
   22410:	f363 108f 	bfi	r0, r3, #6, #10
   22414:	4953      	ldr	r1, [pc, #332]	; (22564 <dfu_file_ready+0x16c>)
   22416:	f019 fe17 	bl	3c048 <log_string_sync>
	if (img_type < 0) {
   2241a:	4b53      	ldr	r3, [pc, #332]	; (22568 <dfu_file_ready+0x170>)
   2241c:	681a      	ldr	r2, [r3, #0]
   2241e:	2a00      	cmp	r2, #0
   22420:	db21      	blt.n	22466 <dfu_file_ready+0x6e>
	dk_set_led(DK_LED2,1);
   22422:	2101      	movs	r1, #1
   22424:	4608      	mov	r0, r1
   22426:	f009 fb7d 	bl	2bb24 <dk_set_led>
	if (m_image_channel == IMAGE_FROM_HTTP) {
   2242a:	4b50      	ldr	r3, [pc, #320]	; (2256c <dfu_file_ready+0x174>)
   2242c:	781b      	ldrb	r3, [r3, #0]
   2242e:	2b01      	cmp	r3, #1
   22430:	d02a      	beq.n	22488 <dfu_file_ready+0x90>
	else if (m_image_channel == IMAGE_FROM_SERIAL) {
   22432:	2b02      	cmp	r3, #2
   22434:	f040 8081 	bne.w	2253a <dfu_file_ready+0x142>
		if (img_type == IMAGE_TYPE_NRF91) {
   22438:	4b4b      	ldr	r3, [pc, #300]	; (22568 <dfu_file_ready+0x170>)
   2243a:	681b      	ldr	r3, [r3, #0]
   2243c:	2b01      	cmp	r3, #1
   2243e:	d04e      	beq.n	224de <dfu_file_ready+0xe6>
		else if (img_type == IMAGE_TYPE_MODEM) {
   22440:	2b02      	cmp	r3, #2
   22442:	d063      	beq.n	2250c <dfu_file_ready+0x114>
   22444:	4b45      	ldr	r3, [pc, #276]	; (2255c <dfu_file_ready+0x164>)
   22446:	4a46      	ldr	r2, [pc, #280]	; (22560 <dfu_file_ready+0x168>)
   22448:	1a9b      	subs	r3, r3, r2
   2244a:	08db      	lsrs	r3, r3, #3
		LOG_INF("Press button 2 to do DFU");
   2244c:	f04f 0000 	mov.w	r0, #0
   22450:	2203      	movs	r2, #3
   22452:	f362 0002 	bfi	r0, r2, #0, #3
   22456:	f36f 00c5 	bfc	r0, #3, #3
   2245a:	f363 108f 	bfi	r0, r3, #6, #10
   2245e:	4944      	ldr	r1, [pc, #272]	; (22570 <dfu_file_ready+0x178>)
   22460:	f019 fdf2 	bl	3c048 <log_string_sync>
   22464:	e00f      	b.n	22486 <dfu_file_ready+0x8e>
   22466:	4b3d      	ldr	r3, [pc, #244]	; (2255c <dfu_file_ready+0x164>)
   22468:	493d      	ldr	r1, [pc, #244]	; (22560 <dfu_file_ready+0x168>)
   2246a:	1a5b      	subs	r3, r3, r1
   2246c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("DFU file is invalid, %d", img_type);
   2246e:	f04f 0000 	mov.w	r0, #0
   22472:	2101      	movs	r1, #1
   22474:	f361 0002 	bfi	r0, r1, #0, #3
   22478:	f36f 00c5 	bfc	r0, #3, #3
   2247c:	f363 108f 	bfi	r0, r3, #6, #10
   22480:	493c      	ldr	r1, [pc, #240]	; (22574 <dfu_file_ready+0x17c>)
   22482:	f019 fde1 	bl	3c048 <log_string_sync>
}
   22486:	bd08      	pop	{r3, pc}
		if (img_type == IMAGE_TYPE_NRF52) {
   22488:	4b37      	ldr	r3, [pc, #220]	; (22568 <dfu_file_ready+0x170>)
   2248a:	681b      	ldr	r3, [r3, #0]
   2248c:	b9b3      	cbnz	r3, 224bc <dfu_file_ready+0xc4>
   2248e:	4b33      	ldr	r3, [pc, #204]	; (2255c <dfu_file_ready+0x164>)
   22490:	4a33      	ldr	r2, [pc, #204]	; (22560 <dfu_file_ready+0x168>)
   22492:	1a9b      	subs	r3, r3, r2
   22494:	08db      	lsrs	r3, r3, #3
			LOG_INF("Remove MCUboot flag for 52 image");
   22496:	f04f 0000 	mov.w	r0, #0
   2249a:	2203      	movs	r2, #3
   2249c:	f362 0002 	bfi	r0, r2, #0, #3
   224a0:	f36f 00c5 	bfc	r0, #3, #3
   224a4:	f363 108f 	bfi	r0, r3, #6, #10
   224a8:	4933      	ldr	r1, [pc, #204]	; (22578 <dfu_file_ready+0x180>)
   224aa:	f019 fdcd 	bl	3c048 <log_string_sync>
			m_image_file_type = IMAGE_TYPE_NRF52;
   224ae:	4b33      	ldr	r3, [pc, #204]	; (2257c <dfu_file_ready+0x184>)
   224b0:	2200      	movs	r2, #0
   224b2:	701a      	strb	r2, [r3, #0]
			k_work_submit(&wk_update_mcuboot_flag);
   224b4:	4832      	ldr	r0, [pc, #200]	; (22580 <dfu_file_ready+0x188>)
   224b6:	f014 fb65 	bl	36b84 <k_work_submit>
   224ba:	e7e4      	b.n	22486 <dfu_file_ready+0x8e>
   224bc:	4b27      	ldr	r3, [pc, #156]	; (2255c <dfu_file_ready+0x164>)
   224be:	4a28      	ldr	r2, [pc, #160]	; (22560 <dfu_file_ready+0x168>)
   224c0:	1a9b      	subs	r3, r3, r2
   224c2:	08db      	lsrs	r3, r3, #3
			LOG_INF("Press button 2 to do DFU");
   224c4:	f04f 0000 	mov.w	r0, #0
   224c8:	2203      	movs	r2, #3
   224ca:	f362 0002 	bfi	r0, r2, #0, #3
   224ce:	f36f 00c5 	bfc	r0, #3, #3
   224d2:	f363 108f 	bfi	r0, r3, #6, #10
   224d6:	4926      	ldr	r1, [pc, #152]	; (22570 <dfu_file_ready+0x178>)
   224d8:	f019 fdb6 	bl	3c048 <log_string_sync>
   224dc:	e7d3      	b.n	22486 <dfu_file_ready+0x8e>
   224de:	4b1f      	ldr	r3, [pc, #124]	; (2255c <dfu_file_ready+0x164>)
   224e0:	4a1f      	ldr	r2, [pc, #124]	; (22560 <dfu_file_ready+0x168>)
   224e2:	1a9b      	subs	r3, r3, r2
   224e4:	08db      	lsrs	r3, r3, #3
			LOG_INF("Add MCUboot flag for 91 application");
   224e6:	f04f 0000 	mov.w	r0, #0
   224ea:	2203      	movs	r2, #3
   224ec:	f362 0002 	bfi	r0, r2, #0, #3
   224f0:	f36f 00c5 	bfc	r0, #3, #3
   224f4:	f363 108f 	bfi	r0, r3, #6, #10
   224f8:	4922      	ldr	r1, [pc, #136]	; (22584 <dfu_file_ready+0x18c>)
   224fa:	f019 fda5 	bl	3c048 <log_string_sync>
			m_image_file_type = IMAGE_TYPE_NRF91;
   224fe:	4b1f      	ldr	r3, [pc, #124]	; (2257c <dfu_file_ready+0x184>)
   22500:	2201      	movs	r2, #1
   22502:	701a      	strb	r2, [r3, #0]
			k_work_submit(&wk_update_mcuboot_flag);
   22504:	481e      	ldr	r0, [pc, #120]	; (22580 <dfu_file_ready+0x188>)
   22506:	f014 fb3d 	bl	36b84 <k_work_submit>
   2250a:	e79b      	b.n	22444 <dfu_file_ready+0x4c>
   2250c:	4b13      	ldr	r3, [pc, #76]	; (2255c <dfu_file_ready+0x164>)
   2250e:	4a14      	ldr	r2, [pc, #80]	; (22560 <dfu_file_ready+0x168>)
   22510:	1a9b      	subs	r3, r3, r2
   22512:	08db      	lsrs	r3, r3, #3
			LOG_INF("Add MCUboot flag for 91 modem");
   22514:	f04f 0000 	mov.w	r0, #0
   22518:	2203      	movs	r2, #3
   2251a:	f362 0002 	bfi	r0, r2, #0, #3
   2251e:	f36f 00c5 	bfc	r0, #3, #3
   22522:	f363 108f 	bfi	r0, r3, #6, #10
   22526:	4918      	ldr	r1, [pc, #96]	; (22588 <dfu_file_ready+0x190>)
   22528:	f019 fd8e 	bl	3c048 <log_string_sync>
			m_image_file_type = IMAGE_TYPE_MODEM;
   2252c:	4b13      	ldr	r3, [pc, #76]	; (2257c <dfu_file_ready+0x184>)
   2252e:	2202      	movs	r2, #2
   22530:	701a      	strb	r2, [r3, #0]
			k_work_submit(&wk_update_mcuboot_flag);
   22532:	4813      	ldr	r0, [pc, #76]	; (22580 <dfu_file_ready+0x188>)
   22534:	f014 fb26 	bl	36b84 <k_work_submit>
   22538:	e784      	b.n	22444 <dfu_file_ready+0x4c>
   2253a:	4b08      	ldr	r3, [pc, #32]	; (2255c <dfu_file_ready+0x164>)
   2253c:	4a08      	ldr	r2, [pc, #32]	; (22560 <dfu_file_ready+0x168>)
   2253e:	1a9b      	subs	r3, r3, r2
   22540:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid image channel");
   22542:	f04f 0000 	mov.w	r0, #0
   22546:	2201      	movs	r2, #1
   22548:	f362 0002 	bfi	r0, r2, #0, #3
   2254c:	f36f 00c5 	bfc	r0, #3, #3
   22550:	f363 108f 	bfi	r0, r3, #6, #10
   22554:	490d      	ldr	r1, [pc, #52]	; (2258c <dfu_file_ready+0x194>)
   22556:	f019 fd77 	bl	3c048 <log_string_sync>
   2255a:	e794      	b.n	22486 <dfu_file_ready+0x8e>
   2255c:	000412b0 	.word	0x000412b0
   22560:	00041200 	.word	0x00041200
   22564:	000414b8 	.word	0x000414b8
   22568:	2000e7f0 	.word	0x2000e7f0
   2256c:	20010df1 	.word	0x20010df1
   22570:	00041500 	.word	0x00041500
   22574:	000414c4 	.word	0x000414c4
   22578:	000414dc 	.word	0x000414dc
   2257c:	20010df2 	.word	0x20010df2
   22580:	2000e818 	.word	0x2000e818
   22584:	0004151c 	.word	0x0004151c
   22588:	00041540 	.word	0x00041540
   2258c:	00041560 	.word	0x00041560

00022590 <download_event_handler>:
	}
}

/** @brief FOTA download event handler */
static void download_event_handler(const struct fota_download_evt* evt)
{
   22590:	b508      	push	{r3, lr}
	switch (evt->id) {
   22592:	7803      	ldrb	r3, [r0, #0]
   22594:	2b01      	cmp	r3, #1
   22596:	d002      	beq.n	2259e <download_event_handler+0xe>
   22598:	2b04      	cmp	r3, #4
   2259a:	d016      	beq.n	225ca <download_event_handler+0x3a>
		break;

	default:
		break;
	}
}
   2259c:	bd08      	pop	{r3, pc}
   2259e:	4b15      	ldr	r3, [pc, #84]	; (225f4 <download_event_handler+0x64>)
   225a0:	4a15      	ldr	r2, [pc, #84]	; (225f8 <download_event_handler+0x68>)
   225a2:	1a9b      	subs	r3, r3, r2
   225a4:	08db      	lsrs	r3, r3, #3
		LOG_INF("FOTA download finished");
   225a6:	f04f 0000 	mov.w	r0, #0
   225aa:	2203      	movs	r2, #3
   225ac:	f362 0002 	bfi	r0, r2, #0, #3
   225b0:	f36f 00c5 	bfc	r0, #3, #3
   225b4:	f363 108f 	bfi	r0, r3, #6, #10
   225b8:	4910      	ldr	r1, [pc, #64]	; (225fc <download_event_handler+0x6c>)
   225ba:	f019 fd45 	bl	3c048 <log_string_sync>
		m_download_busy = false;
   225be:	4b10      	ldr	r3, [pc, #64]	; (22600 <download_event_handler+0x70>)
   225c0:	2200      	movs	r2, #0
   225c2:	701a      	strb	r2, [r3, #0]
		dfu_file_ready();
   225c4:	f7ff ff18 	bl	223f8 <dfu_file_ready>
		break;
   225c8:	e7e8      	b.n	2259c <download_event_handler+0xc>
   225ca:	4b0a      	ldr	r3, [pc, #40]	; (225f4 <download_event_handler+0x64>)
   225cc:	4a0a      	ldr	r2, [pc, #40]	; (225f8 <download_event_handler+0x68>)
   225ce:	1a9b      	subs	r3, r3, r2
   225d0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("FOTA download error");
   225d2:	f04f 0000 	mov.w	r0, #0
   225d6:	2201      	movs	r2, #1
   225d8:	f362 0002 	bfi	r0, r2, #0, #3
   225dc:	f36f 00c5 	bfc	r0, #3, #3
   225e0:	f363 108f 	bfi	r0, r3, #6, #10
   225e4:	4907      	ldr	r1, [pc, #28]	; (22604 <download_event_handler+0x74>)
   225e6:	f019 fd2f 	bl	3c048 <log_string_sync>
		m_download_busy = false;
   225ea:	4b05      	ldr	r3, [pc, #20]	; (22600 <download_event_handler+0x70>)
   225ec:	2200      	movs	r2, #0
   225ee:	701a      	strb	r2, [r3, #0]
}
   225f0:	e7d4      	b.n	2259c <download_event_handler+0xc>
   225f2:	bf00      	nop
   225f4:	000412b0 	.word	0x000412b0
   225f8:	00041200 	.word	0x00041200
   225fc:	00041578 	.word	0x00041578
   22600:	20010df0 	.word	0x20010df0
   22604:	00041590 	.word	0x00041590

00022608 <http_download_start>:
{
   22608:	b570      	push	{r4, r5, r6, lr}
   2260a:	4605      	mov	r5, r0
   2260c:	4c13      	ldr	r4, [pc, #76]	; (2265c <http_download_start+0x54>)
   2260e:	4b14      	ldr	r3, [pc, #80]	; (22660 <http_download_start+0x58>)
   22610:	1ae4      	subs	r4, r4, r3
   22612:	08e4      	lsrs	r4, r4, #3
    LOG_ERR("%s, file_path:%s", __func__, file_path);
   22614:	2601      	movs	r6, #1
   22616:	f04f 0000 	mov.w	r0, #0
   2261a:	f366 0002 	bfi	r0, r6, #0, #3
   2261e:	f36f 00c5 	bfc	r0, #3, #3
   22622:	f364 108f 	bfi	r0, r4, #6, #10
   22626:	462b      	mov	r3, r5
   22628:	4a0e      	ldr	r2, [pc, #56]	; (22664 <http_download_start+0x5c>)
   2262a:	490f      	ldr	r1, [pc, #60]	; (22668 <http_download_start+0x60>)
   2262c:	f019 fd0c 	bl	3c048 <log_string_sync>
	LOG_INF("Download Start");
   22630:	f04f 0000 	mov.w	r0, #0
   22634:	2303      	movs	r3, #3
   22636:	f363 0002 	bfi	r0, r3, #0, #3
   2263a:	f36f 00c5 	bfc	r0, #3, #3
   2263e:	f364 108f 	bfi	r0, r4, #6, #10
   22642:	490a      	ldr	r1, [pc, #40]	; (2266c <http_download_start+0x64>)
   22644:	f019 fd00 	bl	3c048 <log_string_sync>
	m_image_channel = IMAGE_FROM_HTTP;
   22648:	4b09      	ldr	r3, [pc, #36]	; (22670 <http_download_start+0x68>)
   2264a:	701e      	strb	r6, [r3, #0]
	m_download_busy = true;
   2264c:	4b09      	ldr	r3, [pc, #36]	; (22674 <http_download_start+0x6c>)
   2264e:	701e      	strb	r6, [r3, #0]
	http_client_download(m_http_host, file_path);
   22650:	4629      	mov	r1, r5
   22652:	4809      	ldr	r0, [pc, #36]	; (22678 <http_download_start+0x70>)
   22654:	f000 fc08 	bl	22e68 <http_client_download>
}
   22658:	bd70      	pop	{r4, r5, r6, pc}
   2265a:	bf00      	nop
   2265c:	000412b0 	.word	0x000412b0
   22660:	00041200 	.word	0x00041200
   22664:	000418bc 	.word	0x000418bc
   22668:	000415a4 	.word	0x000415a4
   2266c:	000415b8 	.word	0x000415b8
   22670:	20010df1 	.word	0x20010df1
   22674:	20010df0 	.word	0x20010df0
   22678:	000415c8 	.word	0x000415c8

0002267c <logik_handler>:
static void logik_handler(void){
   2267c:	b510      	push	{r4, lr}
	if(more_updates==UPDATE_NRF52)
   2267e:	4b4f      	ldr	r3, [pc, #316]	; (227bc <logik_handler+0x140>)
   22680:	781b      	ldrb	r3, [r3, #0]
   22682:	2b00      	cmp	r3, #0
   22684:	d131      	bne.n	226ea <logik_handler+0x6e>
		if(m_available_size52 > m_image_file_size52){
   22686:	4b4e      	ldr	r3, [pc, #312]	; (227c0 <logik_handler+0x144>)
   22688:	681a      	ldr	r2, [r3, #0]
   2268a:	4b4e      	ldr	r3, [pc, #312]	; (227c4 <logik_handler+0x148>)
   2268c:	681b      	ldr	r3, [r3, #0]
   2268e:	429a      	cmp	r2, r3
   22690:	d91a      	bls.n	226c8 <logik_handler+0x4c>
			m_image_file_type = IMAGE_TYPE_NRF52; 
   22692:	2200      	movs	r2, #0
   22694:	4b4c      	ldr	r3, [pc, #304]	; (227c8 <logik_handler+0x14c>)
   22696:	701a      	strb	r2, [r3, #0]
			img_type = IMAGE_TYPE_NRF52;
   22698:	4b4c      	ldr	r3, [pc, #304]	; (227cc <logik_handler+0x150>)
   2269a:	601a      	str	r2, [r3, #0]
			more_updates= UPDATE_NOMORE;
   2269c:	2103      	movs	r1, #3
   2269e:	4b47      	ldr	r3, [pc, #284]	; (227bc <logik_handler+0x140>)
   226a0:	7019      	strb	r1, [r3, #0]
   226a2:	4b4b      	ldr	r3, [pc, #300]	; (227d0 <logik_handler+0x154>)
   226a4:	484b      	ldr	r0, [pc, #300]	; (227d4 <logik_handler+0x158>)
   226a6:	1a1b      	subs	r3, r3, r0
   226a8:	40cb      	lsrs	r3, r1
			LOG_INF("Starting Single Download NRF52");
   226aa:	f04f 0000 	mov.w	r0, #0
   226ae:	f361 0002 	bfi	r0, r1, #0, #3
   226b2:	f362 00c5 	bfi	r0, r2, #3, #3
   226b6:	f363 108f 	bfi	r0, r3, #6, #10
   226ba:	4947      	ldr	r1, [pc, #284]	; (227d8 <logik_handler+0x15c>)
   226bc:	f019 fcc4 	bl	3c048 <log_string_sync>
			http_download_start(m_http_file_52);
   226c0:	4846      	ldr	r0, [pc, #280]	; (227dc <logik_handler+0x160>)
   226c2:	f7ff ffa1 	bl	22608 <http_download_start>
}
   226c6:	bd10      	pop	{r4, pc}
   226c8:	4941      	ldr	r1, [pc, #260]	; (227d0 <logik_handler+0x154>)
   226ca:	4842      	ldr	r0, [pc, #264]	; (227d4 <logik_handler+0x158>)
   226cc:	1a09      	subs	r1, r1, r0
   226ce:	08c9      	lsrs	r1, r1, #3
			LOG_ERR("Not Enough available Space av52:%d im52:%d",m_available_size52,m_image_file_size52);
   226d0:	f04f 0000 	mov.w	r0, #0
   226d4:	2401      	movs	r4, #1
   226d6:	f364 0002 	bfi	r0, r4, #0, #3
   226da:	f36f 00c5 	bfc	r0, #3, #3
   226de:	f361 108f 	bfi	r0, r1, #6, #10
   226e2:	493f      	ldr	r1, [pc, #252]	; (227e0 <logik_handler+0x164>)
   226e4:	f019 fcb0 	bl	3c048 <log_string_sync>
   226e8:	e7ed      	b.n	226c6 <logik_handler+0x4a>
	else if(more_updates==UPDATE_NRF91)
   226ea:	2b01      	cmp	r3, #1
   226ec:	d023      	beq.n	22736 <logik_handler+0xba>
	else if(more_updates==UPDATE_BOTH)
   226ee:	2b02      	cmp	r3, #2
   226f0:	d1e9      	bne.n	226c6 <logik_handler+0x4a>
		if(m_available_size52 > m_image_file_size52){
   226f2:	4b33      	ldr	r3, [pc, #204]	; (227c0 <logik_handler+0x144>)
   226f4:	681a      	ldr	r2, [r3, #0]
   226f6:	4b33      	ldr	r3, [pc, #204]	; (227c4 <logik_handler+0x148>)
   226f8:	681b      	ldr	r3, [r3, #0]
   226fa:	429a      	cmp	r2, r3
   226fc:	d94d      	bls.n	2279a <logik_handler+0x11e>
			m_image_file_type = IMAGE_TYPE_NRF52; 
   226fe:	2200      	movs	r2, #0
   22700:	4b31      	ldr	r3, [pc, #196]	; (227c8 <logik_handler+0x14c>)
   22702:	701a      	strb	r2, [r3, #0]
			img_type = IMAGE_TYPE_NRF52;
   22704:	4b31      	ldr	r3, [pc, #196]	; (227cc <logik_handler+0x150>)
   22706:	601a      	str	r2, [r3, #0]
			more_updates= UPDATE_NRF91;
   22708:	4b2c      	ldr	r3, [pc, #176]	; (227bc <logik_handler+0x140>)
   2270a:	2101      	movs	r1, #1
   2270c:	7019      	strb	r1, [r3, #0]
   2270e:	4b30      	ldr	r3, [pc, #192]	; (227d0 <logik_handler+0x154>)
   22710:	4930      	ldr	r1, [pc, #192]	; (227d4 <logik_handler+0x158>)
   22712:	1a5b      	subs	r3, r3, r1
   22714:	08db      	lsrs	r3, r3, #3
			LOG_INF("Starting Double Download NRF52");
   22716:	f04f 0000 	mov.w	r0, #0
   2271a:	2103      	movs	r1, #3
   2271c:	f361 0002 	bfi	r0, r1, #0, #3
   22720:	f362 00c5 	bfi	r0, r2, #3, #3
   22724:	f363 108f 	bfi	r0, r3, #6, #10
   22728:	492e      	ldr	r1, [pc, #184]	; (227e4 <logik_handler+0x168>)
   2272a:	f019 fc8d 	bl	3c048 <log_string_sync>
			http_download_start(m_http_file_52);
   2272e:	482b      	ldr	r0, [pc, #172]	; (227dc <logik_handler+0x160>)
   22730:	f7ff ff6a 	bl	22608 <http_download_start>
   22734:	e7c7      	b.n	226c6 <logik_handler+0x4a>
		if(m_available_size91 > m_image_file_size91){
   22736:	4b2c      	ldr	r3, [pc, #176]	; (227e8 <logik_handler+0x16c>)
   22738:	681a      	ldr	r2, [r3, #0]
   2273a:	4b2c      	ldr	r3, [pc, #176]	; (227ec <logik_handler+0x170>)
   2273c:	681b      	ldr	r3, [r3, #0]
   2273e:	429a      	cmp	r2, r3
   22740:	d91a      	bls.n	22778 <logik_handler+0xfc>
			more_updates= UPDATE_NOMORE;
   22742:	2203      	movs	r2, #3
   22744:	4b1d      	ldr	r3, [pc, #116]	; (227bc <logik_handler+0x140>)
   22746:	701a      	strb	r2, [r3, #0]
			m_image_file_type = IMAGE_TYPE_NRF91;
   22748:	2301      	movs	r3, #1
   2274a:	491f      	ldr	r1, [pc, #124]	; (227c8 <logik_handler+0x14c>)
   2274c:	700b      	strb	r3, [r1, #0]
			img_type = IMAGE_TYPE_NRF91;
   2274e:	491f      	ldr	r1, [pc, #124]	; (227cc <logik_handler+0x150>)
   22750:	600b      	str	r3, [r1, #0]
   22752:	4b1f      	ldr	r3, [pc, #124]	; (227d0 <logik_handler+0x154>)
   22754:	491f      	ldr	r1, [pc, #124]	; (227d4 <logik_handler+0x158>)
   22756:	1a5b      	subs	r3, r3, r1
   22758:	40d3      	lsrs	r3, r2
			LOG_INF("Starting Single Download NRF91");
   2275a:	f04f 0000 	mov.w	r0, #0
   2275e:	f362 0002 	bfi	r0, r2, #0, #3
   22762:	f36f 00c5 	bfc	r0, #3, #3
   22766:	f363 108f 	bfi	r0, r3, #6, #10
   2276a:	4921      	ldr	r1, [pc, #132]	; (227f0 <logik_handler+0x174>)
   2276c:	f019 fc6c 	bl	3c048 <log_string_sync>
			http_download_start(m_http_file_91);
   22770:	4820      	ldr	r0, [pc, #128]	; (227f4 <logik_handler+0x178>)
   22772:	f7ff ff49 	bl	22608 <http_download_start>
   22776:	e7a6      	b.n	226c6 <logik_handler+0x4a>
   22778:	4915      	ldr	r1, [pc, #84]	; (227d0 <logik_handler+0x154>)
   2277a:	4816      	ldr	r0, [pc, #88]	; (227d4 <logik_handler+0x158>)
   2277c:	1a09      	subs	r1, r1, r0
   2277e:	08c9      	lsrs	r1, r1, #3
			LOG_ERR("Not Enough available Space av91:%d im91:%d",m_available_size91,m_image_file_size91);
   22780:	f04f 0000 	mov.w	r0, #0
   22784:	2401      	movs	r4, #1
   22786:	f364 0002 	bfi	r0, r4, #0, #3
   2278a:	f36f 00c5 	bfc	r0, #3, #3
   2278e:	f361 108f 	bfi	r0, r1, #6, #10
   22792:	4919      	ldr	r1, [pc, #100]	; (227f8 <logik_handler+0x17c>)
   22794:	f019 fc58 	bl	3c048 <log_string_sync>
   22798:	e795      	b.n	226c6 <logik_handler+0x4a>
   2279a:	490d      	ldr	r1, [pc, #52]	; (227d0 <logik_handler+0x154>)
   2279c:	480d      	ldr	r0, [pc, #52]	; (227d4 <logik_handler+0x158>)
   2279e:	1a09      	subs	r1, r1, r0
   227a0:	08c9      	lsrs	r1, r1, #3
			LOG_ERR("Not Enough available Space av52:%d im52:%d",m_available_size52,m_image_file_size52);
   227a2:	f04f 0000 	mov.w	r0, #0
   227a6:	2401      	movs	r4, #1
   227a8:	f364 0002 	bfi	r0, r4, #0, #3
   227ac:	f36f 00c5 	bfc	r0, #3, #3
   227b0:	f361 108f 	bfi	r0, r1, #6, #10
   227b4:	490a      	ldr	r1, [pc, #40]	; (227e0 <logik_handler+0x164>)
   227b6:	f019 fc47 	bl	3c048 <log_string_sync>
}
   227ba:	e784      	b.n	226c6 <logik_handler+0x4a>
   227bc:	2000c8c4 	.word	0x2000c8c4
   227c0:	2000e7f4 	.word	0x2000e7f4
   227c4:	2000e7fc 	.word	0x2000e7fc
   227c8:	20010df2 	.word	0x20010df2
   227cc:	2000e7f0 	.word	0x2000e7f0
   227d0:	000412b0 	.word	0x000412b0
   227d4:	00041200 	.word	0x00041200
   227d8:	000415f0 	.word	0x000415f0
   227dc:	00041610 	.word	0x00041610
   227e0:	0004161c 	.word	0x0004161c
   227e4:	000416a0 	.word	0x000416a0
   227e8:	2000e7f8 	.word	0x2000e7f8
   227ec:	2000e800 	.word	0x2000e800
   227f0:	00041648 	.word	0x00041648
   227f4:	00041668 	.word	0x00041668
   227f8:	00041674 	.word	0x00041674

000227fc <app_cmd_event_handler>:
{
   227fc:	b508      	push	{r3, lr}
	switch (p_event->op_code) {
   227fe:	7803      	ldrb	r3, [r0, #0]
   22800:	2b27      	cmp	r3, #39	; 0x27
   22802:	d000      	beq.n	22806 <app_cmd_event_handler+0xa>
}
   22804:	bd08      	pop	{r3, pc}
   22806:	4b0d      	ldr	r3, [pc, #52]	; (2283c <app_cmd_event_handler+0x40>)
   22808:	4a0d      	ldr	r2, [pc, #52]	; (22840 <app_cmd_event_handler+0x44>)
   2280a:	1a9b      	subs	r3, r3, r2
   2280c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Finished Serial DFU");
   2280e:	f04f 0000 	mov.w	r0, #0
   22812:	2203      	movs	r2, #3
   22814:	f362 0002 	bfi	r0, r2, #0, #3
   22818:	f36f 00c5 	bfc	r0, #3, #3
   2281c:	f363 108f 	bfi	r0, r3, #6, #10
   22820:	4908      	ldr	r1, [pc, #32]	; (22844 <app_cmd_event_handler+0x48>)
   22822:	f019 fc11 	bl	3c048 <log_string_sync>
		if(more_updates == UPDATE_NRF91){
   22826:	4b08      	ldr	r3, [pc, #32]	; (22848 <app_cmd_event_handler+0x4c>)
   22828:	781b      	ldrb	r3, [r3, #0]
   2282a:	2b01      	cmp	r3, #1
   2282c:	d1ea      	bne.n	22804 <app_cmd_event_handler+0x8>
			dk_set_led(DK_LED2,0);
   2282e:	2100      	movs	r1, #0
   22830:	2001      	movs	r0, #1
   22832:	f009 f977 	bl	2bb24 <dk_set_led>
			logik_handler();
   22836:	f7ff ff21 	bl	2267c <logik_handler>
}
   2283a:	e7e3      	b.n	22804 <app_cmd_event_handler+0x8>
   2283c:	000412b0 	.word	0x000412b0
   22840:	00041200 	.word	0x00041200
   22844:	000416c0 	.word	0x000416c0
   22848:	2000c8c4 	.word	0x2000c8c4

0002284c <serverresp>:
static void serverresp(void){
   2284c:	b508      	push	{r3, lr}
	if(DK_BTN3_MSK & dk_get_buttons()){
   2284e:	f009 f87d 	bl	2b94c <dk_get_buttons>
   22852:	f010 0f04 	tst.w	r0, #4
   22856:	d02c      	beq.n	228b2 <serverresp+0x66>
		if(DK_BTN4_MSK & dk_get_buttons()){
   22858:	f009 f878 	bl	2b94c <dk_get_buttons>
   2285c:	f010 0f08 	tst.w	r0, #8
   22860:	d013      	beq.n	2288a <serverresp+0x3e>
			more_updates = UPDATE_NRF91;
   22862:	4b34      	ldr	r3, [pc, #208]	; (22934 <serverresp+0xe8>)
   22864:	2201      	movs	r2, #1
   22866:	701a      	strb	r2, [r3, #0]
   22868:	4b33      	ldr	r3, [pc, #204]	; (22938 <serverresp+0xec>)
   2286a:	4a34      	ldr	r2, [pc, #208]	; (2293c <serverresp+0xf0>)
   2286c:	1a9b      	subs	r3, r3, r2
   2286e:	08db      	lsrs	r3, r3, #3
			LOG_INF("Update NRF91");
   22870:	f04f 0000 	mov.w	r0, #0
   22874:	2203      	movs	r2, #3
   22876:	f362 0002 	bfi	r0, r2, #0, #3
   2287a:	f36f 00c5 	bfc	r0, #3, #3
   2287e:	f363 108f 	bfi	r0, r3, #6, #10
   22882:	492f      	ldr	r1, [pc, #188]	; (22940 <serverresp+0xf4>)
   22884:	f019 fbe0 	bl	3c048 <log_string_sync>
   22888:	e026      	b.n	228d8 <serverresp+0x8c>
			more_updates = UPDATE_NRF52;
   2288a:	2200      	movs	r2, #0
   2288c:	4b29      	ldr	r3, [pc, #164]	; (22934 <serverresp+0xe8>)
   2288e:	701a      	strb	r2, [r3, #0]
   22890:	4b29      	ldr	r3, [pc, #164]	; (22938 <serverresp+0xec>)
   22892:	492a      	ldr	r1, [pc, #168]	; (2293c <serverresp+0xf0>)
   22894:	1a5b      	subs	r3, r3, r1
   22896:	08db      	lsrs	r3, r3, #3
			LOG_INF("Update NRF52");
   22898:	f04f 0000 	mov.w	r0, #0
   2289c:	2103      	movs	r1, #3
   2289e:	f361 0002 	bfi	r0, r1, #0, #3
   228a2:	f362 00c5 	bfi	r0, r2, #3, #3
   228a6:	f363 108f 	bfi	r0, r3, #6, #10
   228aa:	4926      	ldr	r1, [pc, #152]	; (22944 <serverresp+0xf8>)
   228ac:	f019 fbcc 	bl	3c048 <log_string_sync>
   228b0:	e012      	b.n	228d8 <serverresp+0x8c>
		more_updates = UPDATE_BOTH;
   228b2:	4b20      	ldr	r3, [pc, #128]	; (22934 <serverresp+0xe8>)
   228b4:	2202      	movs	r2, #2
   228b6:	701a      	strb	r2, [r3, #0]
   228b8:	4b1f      	ldr	r3, [pc, #124]	; (22938 <serverresp+0xec>)
   228ba:	4a20      	ldr	r2, [pc, #128]	; (2293c <serverresp+0xf0>)
   228bc:	1a9b      	subs	r3, r3, r2
   228be:	08db      	lsrs	r3, r3, #3
		LOG_INF("Update Both");
   228c0:	f04f 0000 	mov.w	r0, #0
   228c4:	2203      	movs	r2, #3
   228c6:	f362 0002 	bfi	r0, r2, #0, #3
   228ca:	f36f 00c5 	bfc	r0, #3, #3
   228ce:	f363 108f 	bfi	r0, r3, #6, #10
   228d2:	491d      	ldr	r1, [pc, #116]	; (22948 <serverresp+0xfc>)
   228d4:	f019 fbb8 	bl	3c048 <log_string_sync>
	if(more_updates == UPDATE_NRF91){
   228d8:	4b16      	ldr	r3, [pc, #88]	; (22934 <serverresp+0xe8>)
   228da:	781b      	ldrb	r3, [r3, #0]
   228dc:	2b01      	cmp	r3, #1
   228de:	d005      	beq.n	228ec <serverresp+0xa0>
	}else if(more_updates == UPDATE_NRF52){ 
   228e0:	b963      	cbnz	r3, 228fc <serverresp+0xb0>
		m_image_file_size52 = 50000; //Watchout ANPASSEN
   228e2:	4a1a      	ldr	r2, [pc, #104]	; (2294c <serverresp+0x100>)
   228e4:	f24c 3150 	movw	r1, #50000	; 0xc350
   228e8:	6011      	str	r1, [r2, #0]
   228ea:	e002      	b.n	228f2 <serverresp+0xa6>
		m_image_file_size91 = 100; //safety net
   228ec:	4a18      	ldr	r2, [pc, #96]	; (22950 <serverresp+0x104>)
   228ee:	2164      	movs	r1, #100	; 0x64
   228f0:	6011      	str	r1, [r2, #0]
	if(more_updates != UPDATE_NOMORE){
   228f2:	2b03      	cmp	r3, #3
   228f4:	d00c      	beq.n	22910 <serverresp+0xc4>
		logik_handler();
   228f6:	f7ff fec1 	bl	2267c <logik_handler>
}
   228fa:	bd08      	pop	{r3, pc}
	}else if(more_updates == UPDATE_BOTH){
   228fc:	2b02      	cmp	r3, #2
   228fe:	d1f8      	bne.n	228f2 <serverresp+0xa6>
		m_image_file_size91 = 100;
   22900:	4a13      	ldr	r2, [pc, #76]	; (22950 <serverresp+0x104>)
   22902:	2164      	movs	r1, #100	; 0x64
   22904:	6011      	str	r1, [r2, #0]
		m_image_file_size52 = 50000;
   22906:	4a11      	ldr	r2, [pc, #68]	; (2294c <serverresp+0x100>)
   22908:	f24c 3150 	movw	r1, #50000	; 0xc350
   2290c:	6011      	str	r1, [r2, #0]
   2290e:	e7f0      	b.n	228f2 <serverresp+0xa6>
   22910:	4b09      	ldr	r3, [pc, #36]	; (22938 <serverresp+0xec>)
   22912:	4a0a      	ldr	r2, [pc, #40]	; (2293c <serverresp+0xf0>)
   22914:	1a9b      	subs	r3, r3, r2
   22916:	08db      	lsrs	r3, r3, #3
		LOG_INF("No New Firmware available");
   22918:	f04f 0000 	mov.w	r0, #0
   2291c:	2203      	movs	r2, #3
   2291e:	f362 0002 	bfi	r0, r2, #0, #3
   22922:	f36f 00c5 	bfc	r0, #3, #3
   22926:	f363 108f 	bfi	r0, r3, #6, #10
   2292a:	490a      	ldr	r1, [pc, #40]	; (22954 <serverresp+0x108>)
   2292c:	f019 fb8c 	bl	3c048 <log_string_sync>
}
   22930:	e7e3      	b.n	228fa <serverresp+0xae>
   22932:	bf00      	nop
   22934:	2000c8c4 	.word	0x2000c8c4
   22938:	000412b0 	.word	0x000412b0
   2293c:	00041200 	.word	0x00041200
   22940:	000416d4 	.word	0x000416d4
   22944:	000416e4 	.word	0x000416e4
   22948:	000416f4 	.word	0x000416f4
   2294c:	2000e7fc 	.word	0x2000e7fc
   22950:	2000e800 	.word	0x2000e800
   22954:	00041700 	.word	0x00041700

00022958 <askserver>:
static void askserver(struct k_work* unused){
   22958:	b510      	push	{r4, lr}
   2295a:	b084      	sub	sp, #16
	if(m_available_size52 == 0){
   2295c:	4b1e      	ldr	r3, [pc, #120]	; (229d8 <askserver+0x80>)
   2295e:	681b      	ldr	r3, [r3, #0]
   22960:	b133      	cbz	r3, 22970 <askserver+0x18>
	if(m_available_size91 == 0){
   22962:	4b1e      	ldr	r3, [pc, #120]	; (229dc <askserver+0x84>)
   22964:	681b      	ldr	r3, [r3, #0]
   22966:	b16b      	cbz	r3, 22984 <askserver+0x2c>
	serverresp();
   22968:	f7ff ff70 	bl	2284c <serverresp>
}
   2296c:	b004      	add	sp, #16
   2296e:	bd10      	pop	{r4, pc}
		app_cmd_request(CMD_OP_DEVINF52,NULL,0);
   22970:	2200      	movs	r2, #0
   22972:	4611      	mov	r1, r2
   22974:	2001      	movs	r0, #1
   22976:	f001 fe81 	bl	2467c <app_cmd_request>
		m_available_size52 = 52000;
   2297a:	4b17      	ldr	r3, [pc, #92]	; (229d8 <askserver+0x80>)
   2297c:	f64c 3220 	movw	r2, #52000	; 0xcb20
   22980:	601a      	str	r2, [r3, #0]
   22982:	e7ee      	b.n	22962 <askserver+0xa>
		app_flash_get_DevInf(nrf91buffer,6);
   22984:	2106      	movs	r1, #6
   22986:	a802      	add	r0, sp, #8
   22988:	f018 ff58 	bl	3b83c <app_flash_get_DevInf>
	return ((uint16_t)src[1] << 8) | src[0];
   2298c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   22990:	f89d 200c 	ldrb.w	r2, [sp, #12]
   22994:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   22998:	f89d 100b 	ldrb.w	r1, [sp, #11]
   2299c:	f89d 200a 	ldrb.w	r2, [sp, #10]
   229a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   229a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
		m_available_size91 = sys_get_le32(&nrf91buffer[2]);
   229a8:	4b0c      	ldr	r3, [pc, #48]	; (229dc <askserver+0x84>)
   229aa:	601a      	str	r2, [r3, #0]
		m_cur_minorfw91 = nrf91buffer[0];
   229ac:	f89d 1008 	ldrb.w	r1, [sp, #8]
   229b0:	4b0b      	ldr	r3, [pc, #44]	; (229e0 <askserver+0x88>)
   229b2:	480c      	ldr	r0, [pc, #48]	; (229e4 <askserver+0x8c>)
   229b4:	1a1b      	subs	r3, r3, r0
   229b6:	08db      	lsrs	r3, r3, #3
		LOG_INF("nRF91:Available Flash:%x FWNum%x.%x",m_available_size91,m_cur_majorfw91,m_cur_minorfw91);
   229b8:	f04f 0000 	mov.w	r0, #0
   229bc:	2403      	movs	r4, #3
   229be:	f364 0002 	bfi	r0, r4, #0, #3
   229c2:	f36f 00c5 	bfc	r0, #3, #3
   229c6:	f363 108f 	bfi	r0, r3, #6, #10
   229ca:	9100      	str	r1, [sp, #0]
   229cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
   229d0:	4905      	ldr	r1, [pc, #20]	; (229e8 <askserver+0x90>)
   229d2:	f019 fb39 	bl	3c048 <log_string_sync>
   229d6:	e7c7      	b.n	22968 <askserver+0x10>
   229d8:	2000e7f4 	.word	0x2000e7f4
   229dc:	2000e7f8 	.word	0x2000e7f8
   229e0:	000412b0 	.word	0x000412b0
   229e4:	00041200 	.word	0x00041200
   229e8:	0004171c 	.word	0x0004171c

000229ec <wk_serial_dfu_handler>:
{
   229ec:	b510      	push	{r4, lr}
	m_image_file_size52 = get_file_size();
   229ee:	f000 fb4d 	bl	2308c <get_file_size>
   229f2:	4602      	mov	r2, r0
   229f4:	4c0a      	ldr	r4, [pc, #40]	; (22a20 <wk_serial_dfu_handler+0x34>)
   229f6:	6020      	str	r0, [r4, #0]
   229f8:	4b0a      	ldr	r3, [pc, #40]	; (22a24 <wk_serial_dfu_handler+0x38>)
   229fa:	490b      	ldr	r1, [pc, #44]	; (22a28 <wk_serial_dfu_handler+0x3c>)
   229fc:	1a5b      	subs	r3, r3, r1
   229fe:	08db      	lsrs	r3, r3, #3
	LOG_INF("Downloaded Image Size:%u",m_image_file_size52);
   22a00:	f04f 0000 	mov.w	r0, #0
   22a04:	2103      	movs	r1, #3
   22a06:	f361 0002 	bfi	r0, r1, #0, #3
   22a0a:	f36f 00c5 	bfc	r0, #3, #3
   22a0e:	f363 108f 	bfi	r0, r3, #6, #10
   22a12:	4906      	ldr	r1, [pc, #24]	; (22a2c <wk_serial_dfu_handler+0x40>)
   22a14:	f019 fb18 	bl	3c048 <log_string_sync>
	startdfuprocess(m_image_file_size52);//no logik
   22a18:	6820      	ldr	r0, [r4, #0]
   22a1a:	f000 fbed 	bl	231f8 <startdfuprocess>
}
   22a1e:	bd10      	pop	{r4, pc}
   22a20:	2000e7fc 	.word	0x2000e7fc
   22a24:	000412b0 	.word	0x000412b0
   22a28:	00041200 	.word	0x00041200
   22a2c:	00041740 	.word	0x00041740

00022a30 <do_mcuboot_dfu>:
{
   22a30:	b508      	push	{r3, lr}
   22a32:	4b09      	ldr	r3, [pc, #36]	; (22a58 <do_mcuboot_dfu+0x28>)
   22a34:	4a09      	ldr	r2, [pc, #36]	; (22a5c <do_mcuboot_dfu+0x2c>)
   22a36:	1a9b      	subs	r3, r3, r2
   22a38:	08db      	lsrs	r3, r3, #3
	LOG_INF("Start to reboot...");
   22a3a:	f04f 0000 	mov.w	r0, #0
   22a3e:	2203      	movs	r2, #3
   22a40:	f362 0002 	bfi	r0, r2, #0, #3
   22a44:	f36f 00c5 	bfc	r0, #3, #3
   22a48:	f363 108f 	bfi	r0, r3, #6, #10
   22a4c:	4904      	ldr	r1, [pc, #16]	; (22a60 <do_mcuboot_dfu+0x30>)
   22a4e:	f019 fafb 	bl	3c048 <log_string_sync>
	sys_reboot(SYS_REBOOT_WARM);
   22a52:	2000      	movs	r0, #0
   22a54:	f003 fbce 	bl	261f4 <sys_reboot>
   22a58:	000412b0 	.word	0x000412b0
   22a5c:	00041200 	.word	0x00041200
   22a60:	0004175c 	.word	0x0004175c

00022a64 <button_handler>:
{
   22a64:	b510      	push	{r4, lr}
   22a66:	4604      	mov	r4, r0
	if(DK_BTN1_MSK & button_state){
   22a68:	f010 0f01 	tst.w	r0, #1
   22a6c:	d009      	beq.n	22a82 <button_handler+0x1e>
		if (m_download_busy) {
   22a6e:	4b08      	ldr	r3, [pc, #32]	; (22a90 <button_handler+0x2c>)
   22a70:	781b      	ldrb	r3, [r3, #0]
   22a72:	b94b      	cbnz	r3, 22a88 <button_handler+0x24>
		dk_set_led(DK_LED2,0);
   22a74:	2100      	movs	r1, #0
   22a76:	2001      	movs	r0, #1
   22a78:	f009 f854 	bl	2bb24 <dk_set_led>
		k_work_submit(&helper);
   22a7c:	4805      	ldr	r0, [pc, #20]	; (22a94 <button_handler+0x30>)
   22a7e:	f014 f881 	bl	36b84 <k_work_submit>
	if(DK_BTN2_MSK & button_state){
   22a82:	f014 0f02 	tst.w	r4, #2
   22a86:	d100      	bne.n	22a8a <button_handler+0x26>
}
   22a88:	bd10      	pop	{r4, pc}
		do_mcuboot_dfu();
   22a8a:	f7ff ffd1 	bl	22a30 <do_mcuboot_dfu>
   22a8e:	bf00      	nop
   22a90:	20010df0 	.word	0x20010df0
   22a94:	2000e7e0 	.word	0x2000e7e0

00022a98 <perform_dfu>:
{
   22a98:	b508      	push	{r3, lr}
	if (m_image_file_type == IMAGE_TYPE_NRF52) {
   22a9a:	4b04      	ldr	r3, [pc, #16]	; (22aac <perform_dfu+0x14>)
   22a9c:	781b      	ldrb	r3, [r3, #0]
   22a9e:	b91b      	cbnz	r3, 22aa8 <perform_dfu+0x10>
		k_work_submit(&wk_serial_dfu);
   22aa0:	4803      	ldr	r0, [pc, #12]	; (22ab0 <perform_dfu+0x18>)
   22aa2:	f014 f86f 	bl	36b84 <k_work_submit>
}
   22aa6:	bd08      	pop	{r3, pc}
		do_mcuboot_dfu();
   22aa8:	f7ff ffc2 	bl	22a30 <do_mcuboot_dfu>
   22aac:	20010df2 	.word	0x20010df2
   22ab0:	2000e808 	.word	0x2000e808

00022ab4 <wk_update_mcuboot_flag_handler>:
{
   22ab4:	b508      	push	{r3, lr}
	if (m_image_file_type == IMAGE_TYPE_NRF52) {
   22ab6:	4b12      	ldr	r3, [pc, #72]	; (22b00 <wk_update_mcuboot_flag_handler+0x4c>)
   22ab8:	781b      	ldrb	r3, [r3, #0]
   22aba:	b193      	cbz	r3, 22ae2 <wk_update_mcuboot_flag_handler+0x2e>
	else if (m_image_file_type == IMAGE_TYPE_NRF91) {
   22abc:	2b01      	cmp	r3, #1
   22abe:	d016      	beq.n	22aee <wk_update_mcuboot_flag_handler+0x3a>
   22ac0:	4b10      	ldr	r3, [pc, #64]	; (22b04 <wk_update_mcuboot_flag_handler+0x50>)
   22ac2:	4a11      	ldr	r2, [pc, #68]	; (22b08 <wk_update_mcuboot_flag_handler+0x54>)
   22ac4:	1a9b      	subs	r3, r3, r2
   22ac6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Inavlid image file type");
   22ac8:	f04f 0000 	mov.w	r0, #0
   22acc:	2201      	movs	r2, #1
   22ace:	f362 0002 	bfi	r0, r2, #0, #3
   22ad2:	f36f 00c5 	bfc	r0, #3, #3
   22ad6:	f363 108f 	bfi	r0, r3, #6, #10
   22ada:	490c      	ldr	r1, [pc, #48]	; (22b0c <wk_update_mcuboot_flag_handler+0x58>)
   22adc:	f019 fab4 	bl	3c048 <log_string_sync>
}
   22ae0:	bd08      	pop	{r3, pc}
		app_flash_erase_from_end(1);
   22ae2:	2001      	movs	r0, #1
   22ae4:	f018 ff12 	bl	3b90c <app_flash_erase_from_end>
		perform_dfu();
   22ae8:	f7ff ffd6 	bl	22a98 <perform_dfu>
   22aec:	e7f8      	b.n	22ae0 <wk_update_mcuboot_flag_handler+0x2c>
		dfu_target_init(DFU_TARGET_IMAGE_TYPE_MCUBOOT, 0, dfu_target_cb_dummy);	
   22aee:	4a08      	ldr	r2, [pc, #32]	; (22b10 <wk_update_mcuboot_flag_handler+0x5c>)
   22af0:	2100      	movs	r1, #0
   22af2:	2001      	movs	r0, #1
   22af4:	f00d fbf8 	bl	302e8 <dfu_target_init>
		dfu_target_done(true);			
   22af8:	2001      	movs	r0, #1
   22afa:	f00d fc4b 	bl	30394 <dfu_target_done>
   22afe:	e7ef      	b.n	22ae0 <wk_update_mcuboot_flag_handler+0x2c>
   22b00:	20010df2 	.word	0x20010df2
   22b04:	000412b0 	.word	0x000412b0
   22b08:	00041200 	.word	0x00041200
   22b0c:	00041770 	.word	0x00041770
   22b10:	0003b63d 	.word	0x0003b63d

00022b14 <main>:


void main(void)
{
   22b14:	b538      	push	{r3, r4, r5, lr}
   22b16:	4b77      	ldr	r3, [pc, #476]	; (22cf4 <main+0x1e0>)
   22b18:	4a77      	ldr	r2, [pc, #476]	; (22cf8 <main+0x1e4>)
   22b1a:	1a9b      	subs	r3, r3, r2
   22b1c:	08db      	lsrs	r3, r3, #3
	int rc = 0;

#if UPDATE_APP
	LOG_INF("Cross DFU Demo(new)\n");
#else 
	LOG_INF("Cross DFU Demo(ori)\n");
   22b1e:	f04f 0000 	mov.w	r0, #0
   22b22:	2203      	movs	r2, #3
   22b24:	f362 0002 	bfi	r0, r2, #0, #3
   22b28:	f36f 00c5 	bfc	r0, #3, #3
   22b2c:	f363 108f 	bfi	r0, r3, #6, #10
   22b30:	4972      	ldr	r1, [pc, #456]	; (22cfc <main+0x1e8>)
   22b32:	f019 fa89 	bl	3c048 <log_string_sync>
#endif

	rc = dk_leds_init();
   22b36:	f008 ff7b 	bl	2ba30 <dk_leds_init>
	if (rc) {
   22b3a:	2800      	cmp	r0, #0
   22b3c:	f040 8085 	bne.w	22c4a <main+0x136>
	}

#if UPDATE_APP
	dk_set_led(DK_LED4,1);
#else
	dk_set_led(DK_LED3,1);
   22b40:	2101      	movs	r1, #1
   22b42:	2002      	movs	r0, #2
   22b44:	f008 ffee 	bl	2bb24 <dk_set_led>
#endif


	rc = dk_buttons_init(button_handler);
   22b48:	486d      	ldr	r0, [pc, #436]	; (22d00 <main+0x1ec>)
   22b4a:	f008 fdeb 	bl	2b724 <dk_buttons_init>
	if (rc) {
   22b4e:	2800      	cmp	r0, #0
   22b50:	f040 808d 	bne.w	22c6e <main+0x15a>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   22b54:	486b      	ldr	r0, [pc, #428]	; (22d04 <main+0x1f0>)
   22b56:	f012 fdd7 	bl	35708 <z_impl_device_get_binding>
		LOG_ERR("Cant init LED Component"); //output on UART0, which is default for logging
	}

	m_uart_dev = device_get_binding(UART_DEVICE_LABLE);
   22b5a:	4a6b      	ldr	r2, [pc, #428]	; (22d08 <main+0x1f4>)
   22b5c:	6010      	str	r0, [r2, #0]
	if (m_uart_dev == NULL) {
   22b5e:	2800      	cmp	r0, #0
   22b60:	f000 8096 	beq.w	22c90 <main+0x17c>
		LOG_ERR("Can't init UART component");
		goto err;
	}

	rc = http_client_init(download_event_handler);
   22b64:	4869      	ldr	r0, [pc, #420]	; (22d0c <main+0x1f8>)
   22b66:	f000 f9e3 	bl	22f30 <http_client_init>
	if (rc) {
   22b6a:	2800      	cmp	r0, #0
   22b6c:	f040 809f 	bne.w	22cae <main+0x19a>
   22b70:	4b60      	ldr	r3, [pc, #384]	; (22cf4 <main+0x1e0>)
   22b72:	4a61      	ldr	r2, [pc, #388]	; (22cf8 <main+0x1e4>)
   22b74:	1a9b      	subs	r3, r3, r2
   22b76:	08db      	lsrs	r3, r3, #3
		LOG_ERR("HTTP Client init error.");
		goto err;
	}

	LOG_INF("Connecting LTE...(don't run other tasks now)");
   22b78:	f04f 0000 	mov.w	r0, #0
   22b7c:	2203      	movs	r2, #3
   22b7e:	f362 0002 	bfi	r0, r2, #0, #3
   22b82:	f36f 00c5 	bfc	r0, #3, #3
   22b86:	f363 108f 	bfi	r0, r3, #6, #10
   22b8a:	4961      	ldr	r1, [pc, #388]	; (22d10 <main+0x1fc>)
   22b8c:	f019 fa5c 	bl	3c048 <log_string_sync>
	rc = http_client_connect();
   22b90:	f018 fd55 	bl	3b63e <http_client_connect>
	if (rc) {
   22b94:	2800      	cmp	r0, #0
   22b96:	f040 809b 	bne.w	22cd0 <main+0x1bc>
   22b9a:	4c56      	ldr	r4, [pc, #344]	; (22cf4 <main+0x1e0>)
   22b9c:	4b56      	ldr	r3, [pc, #344]	; (22cf8 <main+0x1e4>)
   22b9e:	1ae4      	subs	r4, r4, r3
   22ba0:	08e4      	lsrs	r4, r4, #3
		LOG_ERR("Can't connect to LTE");
		goto err;
	}
	LOG_INF("LTE network is connected.");	
   22ba2:	2503      	movs	r5, #3
   22ba4:	f04f 0000 	mov.w	r0, #0
   22ba8:	f365 0002 	bfi	r0, r5, #0, #3
   22bac:	f36f 00c5 	bfc	r0, #3, #3
   22bb0:	f364 108f 	bfi	r0, r4, #6, #10
   22bb4:	4957      	ldr	r1, [pc, #348]	; (22d14 <main+0x200>)
   22bb6:	f019 fa47 	bl	3c048 <log_string_sync>

	// After LTE connection, LED 1 is on
	dk_set_led(DK_LED1,1);	
   22bba:	2101      	movs	r1, #1
   22bbc:	2000      	movs	r0, #0
   22bbe:	f008 ffb1 	bl	2bb24 <dk_set_led>

	LOG_INF("switch left:  single-/-double download");
   22bc2:	f04f 0000 	mov.w	r0, #0
   22bc6:	f365 0002 	bfi	r0, r5, #0, #3
   22bca:	f36f 00c5 	bfc	r0, #3, #3
   22bce:	f364 108f 	bfi	r0, r4, #6, #10
   22bd2:	4951      	ldr	r1, [pc, #324]	; (22d18 <main+0x204>)
   22bd4:	f019 fa38 	bl	3c048 <log_string_sync>
	LOG_INF("switch right: 91-/-52\n");
   22bd8:	f04f 0000 	mov.w	r0, #0
   22bdc:	f365 0002 	bfi	r0, r5, #0, #3
   22be0:	f36f 00c5 	bfc	r0, #3, #3
   22be4:	f364 108f 	bfi	r0, r4, #6, #10
   22be8:	494c      	ldr	r1, [pc, #304]	; (22d1c <main+0x208>)
   22bea:	f019 fa2d 	bl	3c048 <log_string_sync>

	k_work_init(&wk_serial_dfu, wk_serial_dfu_handler);
   22bee:	494c      	ldr	r1, [pc, #304]	; (22d20 <main+0x20c>)
   22bf0:	484c      	ldr	r0, [pc, #304]	; (22d24 <main+0x210>)
   22bf2:	f013 ff47 	bl	36a84 <k_work_init>
	k_work_init(&wk_update_mcuboot_flag, wk_update_mcuboot_flag_handler);
   22bf6:	494c      	ldr	r1, [pc, #304]	; (22d28 <main+0x214>)
   22bf8:	484c      	ldr	r0, [pc, #304]	; (22d2c <main+0x218>)
   22bfa:	f013 ff43 	bl	36a84 <k_work_init>
	k_work_init(&helper,askserver);
   22bfe:	494c      	ldr	r1, [pc, #304]	; (22d30 <main+0x21c>)
   22c00:	484c      	ldr	r0, [pc, #304]	; (22d34 <main+0x220>)
   22c02:	f013 ff3f 	bl	36a84 <k_work_init>

	/* All initializations were successful mark image as working so that we
	 * will not revert upon reboot.
	 */

	boot_write_img_confirmed();
   22c06:	f019 fe43 	bl	3c890 <boot_write_img_confirmed>
	return z_impl_k_sleep(timeout);
   22c0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22c0e:	2100      	movs	r1, #0
   22c10:	f015 fa6a 	bl	380e8 <z_impl_k_sleep>
    k_sleep(K_SECONDS(2));

	//Sleep So it has Time to Init Uart
	app_cmd_init(m_uart_dev);
   22c14:	4b3c      	ldr	r3, [pc, #240]	; (22d08 <main+0x1f4>)
   22c16:	6818      	ldr	r0, [r3, #0]
   22c18:	f001 fd70 	bl	246fc <app_cmd_init>
	
	app_cmd_event_cb_register(app_cmd_event_handler);
   22c1c:	4846      	ldr	r0, [pc, #280]	; (22d38 <main+0x224>)
   22c1e:	f001 fd67 	bl	246f0 <app_cmd_event_cb_register>
	
	// Add cmds
	callback_init();
   22c22:	f000 fbd7 	bl	233d4 <callback_init>
	app_flash_cmd_init();
   22c26:	f001 ff4d 	bl	24ac4 <app_flash_cmd_init>

	//Fw Info
	app_cmd_add(CMD_OP_DEVINF52,NULL,rsp_dev_fwinfo52);
   22c2a:	4a44      	ldr	r2, [pc, #272]	; (22d3c <main+0x228>)
   22c2c:	2100      	movs	r1, #0
   22c2e:	2001      	movs	r0, #1
   22c30:	f001 fcce 	bl	245d0 <app_cmd_add>
	app_cmd_add(CMD_OP_DEVINF92,req_dev_fwinfo92,NULL);
   22c34:	2200      	movs	r2, #0
   22c36:	4942      	ldr	r1, [pc, #264]	; (22d40 <main+0x22c>)
   22c38:	2002      	movs	r0, #2
   22c3a:	f001 fcc9 	bl	245d0 <app_cmd_add>
   22c3e:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   22c42:	2100      	movs	r1, #0
   22c44:	f015 fa50 	bl	380e8 <z_impl_k_sleep>
	
	//Start Timer if you want to test it
	//k_timer_start(&update_timer, K_SECONDS(3), K_SECONDS(3));
	//1440 Minutes -> 24 Hours 
err:
	while (true) {
   22c48:	e7f9      	b.n	22c3e <main+0x12a>
   22c4a:	4602      	mov	r2, r0
   22c4c:	4b29      	ldr	r3, [pc, #164]	; (22cf4 <main+0x1e0>)
   22c4e:	492a      	ldr	r1, [pc, #168]	; (22cf8 <main+0x1e4>)
   22c50:	1a5b      	subs	r3, r3, r1
   22c52:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot init LEDs (err: %d)", rc);
   22c54:	f04f 0000 	mov.w	r0, #0
   22c58:	2101      	movs	r1, #1
   22c5a:	f361 0002 	bfi	r0, r1, #0, #3
   22c5e:	f36f 00c5 	bfc	r0, #3, #3
   22c62:	f363 108f 	bfi	r0, r3, #6, #10
   22c66:	4937      	ldr	r1, [pc, #220]	; (22d44 <main+0x230>)
   22c68:	f019 f9ee 	bl	3c048 <log_string_sync>
   22c6c:	e768      	b.n	22b40 <main+0x2c>
   22c6e:	4b21      	ldr	r3, [pc, #132]	; (22cf4 <main+0x1e0>)
   22c70:	4a21      	ldr	r2, [pc, #132]	; (22cf8 <main+0x1e4>)
   22c72:	1a9b      	subs	r3, r3, r2
   22c74:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cant init LED Component"); //output on UART0, which is default for logging
   22c76:	f04f 0000 	mov.w	r0, #0
   22c7a:	2201      	movs	r2, #1
   22c7c:	f362 0002 	bfi	r0, r2, #0, #3
   22c80:	f36f 00c5 	bfc	r0, #3, #3
   22c84:	f363 108f 	bfi	r0, r3, #6, #10
   22c88:	492f      	ldr	r1, [pc, #188]	; (22d48 <main+0x234>)
   22c8a:	f019 f9dd 	bl	3c048 <log_string_sync>
   22c8e:	e761      	b.n	22b54 <main+0x40>
   22c90:	4b18      	ldr	r3, [pc, #96]	; (22cf4 <main+0x1e0>)
   22c92:	4a19      	ldr	r2, [pc, #100]	; (22cf8 <main+0x1e4>)
   22c94:	1a9b      	subs	r3, r3, r2
   22c96:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't init UART component");
   22c98:	2201      	movs	r2, #1
   22c9a:	f362 0002 	bfi	r0, r2, #0, #3
   22c9e:	f36f 00c5 	bfc	r0, #3, #3
   22ca2:	f363 108f 	bfi	r0, r3, #6, #10
   22ca6:	4929      	ldr	r1, [pc, #164]	; (22d4c <main+0x238>)
   22ca8:	f019 f9ce 	bl	3c048 <log_string_sync>
		goto err;
   22cac:	e7c7      	b.n	22c3e <main+0x12a>
   22cae:	4b11      	ldr	r3, [pc, #68]	; (22cf4 <main+0x1e0>)
   22cb0:	4a11      	ldr	r2, [pc, #68]	; (22cf8 <main+0x1e4>)
   22cb2:	1a9b      	subs	r3, r3, r2
   22cb4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("HTTP Client init error.");
   22cb6:	f04f 0000 	mov.w	r0, #0
   22cba:	2201      	movs	r2, #1
   22cbc:	f362 0002 	bfi	r0, r2, #0, #3
   22cc0:	f36f 00c5 	bfc	r0, #3, #3
   22cc4:	f363 108f 	bfi	r0, r3, #6, #10
   22cc8:	4921      	ldr	r1, [pc, #132]	; (22d50 <main+0x23c>)
   22cca:	f019 f9bd 	bl	3c048 <log_string_sync>
		goto err;
   22cce:	e7b6      	b.n	22c3e <main+0x12a>
   22cd0:	4b08      	ldr	r3, [pc, #32]	; (22cf4 <main+0x1e0>)
   22cd2:	4a09      	ldr	r2, [pc, #36]	; (22cf8 <main+0x1e4>)
   22cd4:	1a9b      	subs	r3, r3, r2
   22cd6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't connect to LTE");
   22cd8:	f04f 0000 	mov.w	r0, #0
   22cdc:	2201      	movs	r2, #1
   22cde:	f362 0002 	bfi	r0, r2, #0, #3
   22ce2:	f36f 00c5 	bfc	r0, #3, #3
   22ce6:	f363 108f 	bfi	r0, r3, #6, #10
   22cea:	491a      	ldr	r1, [pc, #104]	; (22d54 <main+0x240>)
   22cec:	f019 f9ac 	bl	3c048 <log_string_sync>
		goto err;
   22cf0:	e7a5      	b.n	22c3e <main+0x12a>
   22cf2:	bf00      	nop
   22cf4:	000412b0 	.word	0x000412b0
   22cf8:	00041200 	.word	0x00041200
   22cfc:	00041788 	.word	0x00041788
   22d00:	00022a65 	.word	0x00022a65
   22d04:	000417d4 	.word	0x000417d4
   22d08:	2000e804 	.word	0x2000e804
   22d0c:	00022591 	.word	0x00022591
   22d10:	00041810 	.word	0x00041810
   22d14:	00041858 	.word	0x00041858
   22d18:	00041874 	.word	0x00041874
   22d1c:	0004189c 	.word	0x0004189c
   22d20:	000229ed 	.word	0x000229ed
   22d24:	2000e808 	.word	0x2000e808
   22d28:	00022ab5 	.word	0x00022ab5
   22d2c:	2000e818 	.word	0x2000e818
   22d30:	00022959 	.word	0x00022959
   22d34:	2000e7e0 	.word	0x2000e7e0
   22d38:	000227fd 	.word	0x000227fd
   22d3c:	00022359 	.word	0x00022359
   22d40:	000223b1 	.word	0x000223b1
   22d44:	000417a0 	.word	0x000417a0
   22d48:	000417bc 	.word	0x000417bc
   22d4c:	000417dc 	.word	0x000417dc
   22d50:	000417f8 	.word	0x000417f8
   22d54:	00041840 	.word	0x00041840

00022d58 <http_download_handler>:
static uint32_t m_file_size;
static bool downloading;

/**@brief Handler for HTTP download worker */
static void http_download_handler(struct k_work* unused)
{
   22d58:	b500      	push	{lr}
   22d5a:	b083      	sub	sp, #12
    int rc;
    int sec_tag = -1;
    char* apn = NULL;
    int port = 0;       // HTTP, not HTTPS

    rc = fota_download_start(m_http_host, m_http_file, sec_tag, apn, port);
   22d5c:	2300      	movs	r3, #0
   22d5e:	9300      	str	r3, [sp, #0]
   22d60:	f04f 32ff 	mov.w	r2, #4294967295
   22d64:	490c      	ldr	r1, [pc, #48]	; (22d98 <http_download_handler+0x40>)
   22d66:	480d      	ldr	r0, [pc, #52]	; (22d9c <http_download_handler+0x44>)
   22d68:	f01b fdbc 	bl	3e8e4 <fota_download_start>
    if (rc) {
   22d6c:	b910      	cbnz	r0, 22d74 <http_download_handler+0x1c>
        LOG_ERR("Download file error, %d", rc);
    }
}
   22d6e:	b003      	add	sp, #12
   22d70:	f85d fb04 	ldr.w	pc, [sp], #4
   22d74:	4602      	mov	r2, r0
   22d76:	4b0a      	ldr	r3, [pc, #40]	; (22da0 <http_download_handler+0x48>)
   22d78:	490a      	ldr	r1, [pc, #40]	; (22da4 <http_download_handler+0x4c>)
   22d7a:	1a5b      	subs	r3, r3, r1
   22d7c:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Download file error, %d", rc);
   22d7e:	f04f 0000 	mov.w	r0, #0
   22d82:	2101      	movs	r1, #1
   22d84:	f361 0002 	bfi	r0, r1, #0, #3
   22d88:	f36f 00c5 	bfc	r0, #3, #3
   22d8c:	f363 108f 	bfi	r0, r3, #6, #10
   22d90:	4905      	ldr	r1, [pc, #20]	; (22da8 <http_download_handler+0x50>)
   22d92:	f019 f959 	bl	3c048 <log_string_sync>
}
   22d96:	e7ea      	b.n	22d6e <http_download_handler+0x16>
   22d98:	2000e82c 	.word	0x2000e82c
   22d9c:	2000e84c 	.word	0x2000e84c
   22da0:	00041290 	.word	0x00041290
   22da4:	00041200 	.word	0x00041200
   22da8:	000418d0 	.word	0x000418d0

00022dac <download_handler>:
    return 0;
}

/**@brief HTTP download event handler */
static void download_handler(const struct fota_download_evt* evt)
{
   22dac:	b510      	push	{r4, lr}
   22dae:	4604      	mov	r4, r0
    switch (evt->id) {
   22db0:	7803      	ldrb	r3, [r0, #0]
   22db2:	2b01      	cmp	r3, #1
   22db4:	d013      	beq.n	22dde <download_handler+0x32>
   22db6:	2b04      	cmp	r3, #4
   22db8:	d02f      	beq.n	22e1a <download_handler+0x6e>
   22dba:	4a22      	ldr	r2, [pc, #136]	; (22e44 <download_handler+0x98>)
   22dbc:	4922      	ldr	r1, [pc, #136]	; (22e48 <download_handler+0x9c>)
   22dbe:	1a52      	subs	r2, r2, r1
   22dc0:	08d2      	lsrs	r2, r2, #3

    case FOTA_DOWNLOAD_EVT_PROGRESS:
    case FOTA_DOWNLOAD_EVT_ERASE_PENDING:
    case FOTA_DOWNLOAD_EVT_ERASE_DONE:
    default:
        LOG_DBG("Download event: %d", evt->id);
   22dc2:	f04f 0000 	mov.w	r0, #0
   22dc6:	2104      	movs	r1, #4
   22dc8:	f361 0002 	bfi	r0, r1, #0, #3
   22dcc:	f36f 00c5 	bfc	r0, #3, #3
   22dd0:	f362 108f 	bfi	r0, r2, #6, #10
   22dd4:	4a1d      	ldr	r2, [pc, #116]	; (22e4c <download_handler+0xa0>)
   22dd6:	491e      	ldr	r1, [pc, #120]	; (22e50 <download_handler+0xa4>)
   22dd8:	f019 f936 	bl	3c048 <log_string_sync>
   22ddc:	e017      	b.n	22e0e <download_handler+0x62>
   22dde:	4b19      	ldr	r3, [pc, #100]	; (22e44 <download_handler+0x98>)
   22de0:	4a19      	ldr	r2, [pc, #100]	; (22e48 <download_handler+0x9c>)
   22de2:	1a9b      	subs	r3, r3, r2
   22de4:	08db      	lsrs	r3, r3, #3
        LOG_DBG("Download event finished");
   22de6:	f04f 0000 	mov.w	r0, #0
   22dea:	2204      	movs	r2, #4
   22dec:	f362 0002 	bfi	r0, r2, #0, #3
   22df0:	f36f 00c5 	bfc	r0, #3, #3
   22df4:	f363 108f 	bfi	r0, r3, #6, #10
   22df8:	4a14      	ldr	r2, [pc, #80]	; (22e4c <download_handler+0xa0>)
   22dfa:	4916      	ldr	r1, [pc, #88]	; (22e54 <download_handler+0xa8>)
   22dfc:	f019 f924 	bl	3c048 <log_string_sync>
        m_file_size= fota_download_file_size();
   22e00:	f00d fa3c 	bl	3027c <fota_download_file_size>
   22e04:	4b14      	ldr	r3, [pc, #80]	; (22e58 <download_handler+0xac>)
   22e06:	6018      	str	r0, [r3, #0]
        downloading = false;
   22e08:	4b14      	ldr	r3, [pc, #80]	; (22e5c <download_handler+0xb0>)
   22e0a:	2200      	movs	r2, #0
   22e0c:	701a      	strb	r2, [r3, #0]
        break;
    }

    if (m_user_download_cb) {
   22e0e:	4b14      	ldr	r3, [pc, #80]	; (22e60 <download_handler+0xb4>)
   22e10:	681b      	ldr	r3, [r3, #0]
   22e12:	b10b      	cbz	r3, 22e18 <download_handler+0x6c>
        m_user_download_cb(evt);
   22e14:	4620      	mov	r0, r4
   22e16:	4798      	blx	r3
    }
}
   22e18:	bd10      	pop	{r4, pc}
   22e1a:	4b0a      	ldr	r3, [pc, #40]	; (22e44 <download_handler+0x98>)
   22e1c:	4a0a      	ldr	r2, [pc, #40]	; (22e48 <download_handler+0x9c>)
   22e1e:	1a9b      	subs	r3, r3, r2
   22e20:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Download event error");
   22e22:	f04f 0000 	mov.w	r0, #0
   22e26:	2201      	movs	r2, #1
   22e28:	f362 0002 	bfi	r0, r2, #0, #3
   22e2c:	f36f 00c5 	bfc	r0, #3, #3
   22e30:	f363 108f 	bfi	r0, r3, #6, #10
   22e34:	490b      	ldr	r1, [pc, #44]	; (22e64 <download_handler+0xb8>)
   22e36:	f019 f907 	bl	3c048 <log_string_sync>
        downloading = false;
   22e3a:	4b08      	ldr	r3, [pc, #32]	; (22e5c <download_handler+0xb0>)
   22e3c:	2200      	movs	r2, #0
   22e3e:	701a      	strb	r2, [r3, #0]
        break;
   22e40:	e7e5      	b.n	22e0e <download_handler+0x62>
   22e42:	bf00      	nop
   22e44:	00041290 	.word	0x00041290
   22e48:	00041200 	.word	0x00041200
   22e4c:	00041aa8 	.word	0x00041aa8
   22e50:	0004191c 	.word	0x0004191c
   22e54:	000418e8 	.word	0x000418e8
   22e58:	2000e828 	.word	0x2000e828
   22e5c:	20010df3 	.word	0x20010df3
   22e60:	2000e880 	.word	0x2000e880
   22e64:	00041904 	.word	0x00041904

00022e68 <http_client_download>:
{
   22e68:	b538      	push	{r3, r4, r5, lr}
    if (downloading) {
   22e6a:	4b29      	ldr	r3, [pc, #164]	; (22f10 <http_client_download+0xa8>)
   22e6c:	781b      	ldrb	r3, [r3, #0]
   22e6e:	b10b      	cbz	r3, 22e74 <http_client_download+0xc>
        return 0;
   22e70:	2000      	movs	r0, #0
}
   22e72:	bd38      	pop	{r3, r4, r5, pc}
   22e74:	4605      	mov	r5, r0
   22e76:	460c      	mov	r4, r1
    if (strlen(file) > HTTP_FILE_LEN_MAX) {
   22e78:	4608      	mov	r0, r1
   22e7a:	f7fe fb5f 	bl	2153c <strlen>
   22e7e:	281e      	cmp	r0, #30
   22e80:	d81e      	bhi.n	22ec0 <http_client_download+0x58>
    if (strlen(host) > HTTP_HOST_LEN_MAX) {
   22e82:	4628      	mov	r0, r5
   22e84:	f7fe fb5a 	bl	2153c <strlen>
   22e88:	2832      	cmp	r0, #50	; 0x32
   22e8a:	d82d      	bhi.n	22ee8 <http_client_download+0x80>
    memcpy(m_http_host, host, strlen(host));
   22e8c:	4628      	mov	r0, r5
   22e8e:	f7fe fb55 	bl	2153c <strlen>
   22e92:	4602      	mov	r2, r0
   22e94:	2332      	movs	r3, #50	; 0x32
   22e96:	4629      	mov	r1, r5
   22e98:	481e      	ldr	r0, [pc, #120]	; (22f14 <http_client_download+0xac>)
   22e9a:	f01d f83e 	bl	3ff1a <__memcpy_chk>
    memcpy(m_http_file, file, strlen(file));
   22e9e:	4620      	mov	r0, r4
   22ea0:	f7fe fb4c 	bl	2153c <strlen>
   22ea4:	4602      	mov	r2, r0
   22ea6:	231e      	movs	r3, #30
   22ea8:	4621      	mov	r1, r4
   22eaa:	481b      	ldr	r0, [pc, #108]	; (22f18 <http_client_download+0xb0>)
   22eac:	f01d f835 	bl	3ff1a <__memcpy_chk>
    k_work_submit(&wk_http_download);
   22eb0:	481a      	ldr	r0, [pc, #104]	; (22f1c <http_client_download+0xb4>)
   22eb2:	f013 fe67 	bl	36b84 <k_work_submit>
    downloading = true;
   22eb6:	4b16      	ldr	r3, [pc, #88]	; (22f10 <http_client_download+0xa8>)
   22eb8:	2201      	movs	r2, #1
   22eba:	701a      	strb	r2, [r3, #0]
    return 0;
   22ebc:	2000      	movs	r0, #0
   22ebe:	e7d8      	b.n	22e72 <http_client_download+0xa>
   22ec0:	4b17      	ldr	r3, [pc, #92]	; (22f20 <http_client_download+0xb8>)
   22ec2:	4a18      	ldr	r2, [pc, #96]	; (22f24 <http_client_download+0xbc>)
   22ec4:	1a9b      	subs	r3, r3, r2
   22ec6:	08db      	lsrs	r3, r3, #3
        LOG_ERR("File path len should be less than %d bytes", HTTP_FILE_LEN_MAX);
   22ec8:	f04f 0000 	mov.w	r0, #0
   22ecc:	2201      	movs	r2, #1
   22ece:	f362 0002 	bfi	r0, r2, #0, #3
   22ed2:	f36f 00c5 	bfc	r0, #3, #3
   22ed6:	f363 108f 	bfi	r0, r3, #6, #10
   22eda:	221e      	movs	r2, #30
   22edc:	4912      	ldr	r1, [pc, #72]	; (22f28 <http_client_download+0xc0>)
   22ede:	f019 f8b3 	bl	3c048 <log_string_sync>
        return -1;
   22ee2:	f04f 30ff 	mov.w	r0, #4294967295
   22ee6:	e7c4      	b.n	22e72 <http_client_download+0xa>
   22ee8:	4b0d      	ldr	r3, [pc, #52]	; (22f20 <http_client_download+0xb8>)
   22eea:	4a0e      	ldr	r2, [pc, #56]	; (22f24 <http_client_download+0xbc>)
   22eec:	1a9b      	subs	r3, r3, r2
   22eee:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Host len should be less than %d bytes", HTTP_HOST_LEN_MAX);
   22ef0:	f04f 0000 	mov.w	r0, #0
   22ef4:	2201      	movs	r2, #1
   22ef6:	f362 0002 	bfi	r0, r2, #0, #3
   22efa:	f36f 00c5 	bfc	r0, #3, #3
   22efe:	f363 108f 	bfi	r0, r3, #6, #10
   22f02:	2232      	movs	r2, #50	; 0x32
   22f04:	4909      	ldr	r1, [pc, #36]	; (22f2c <http_client_download+0xc4>)
   22f06:	f019 f89f 	bl	3c048 <log_string_sync>
        return -1;
   22f0a:	f04f 30ff 	mov.w	r0, #4294967295
   22f0e:	e7b0      	b.n	22e72 <http_client_download+0xa>
   22f10:	20010df3 	.word	0x20010df3
   22f14:	2000e84c 	.word	0x2000e84c
   22f18:	2000e82c 	.word	0x2000e82c
   22f1c:	2000e884 	.word	0x2000e884
   22f20:	00041290 	.word	0x00041290
   22f24:	00041200 	.word	0x00041200
   22f28:	00041934 	.word	0x00041934
   22f2c:	00041960 	.word	0x00041960

00022f30 <http_client_init>:
    return lte_lc_init_and_connect();
}

/**@brief Initialize http client module  */
int http_client_init(fota_download_callback_t download_callback)
{
   22f30:	b510      	push	{r4, lr}
    int rc;
    
    downloading = false;
   22f32:	2200      	movs	r2, #0
   22f34:	4b45      	ldr	r3, [pc, #276]	; (2304c <http_client_init+0x11c>)
   22f36:	701a      	strb	r2, [r3, #0]
    m_user_download_cb = download_callback;
   22f38:	4b45      	ldr	r3, [pc, #276]	; (23050 <http_client_init+0x120>)
   22f3a:	6018      	str	r0, [r3, #0]
   22f3c:	4b45      	ldr	r3, [pc, #276]	; (23054 <http_client_init+0x124>)
   22f3e:	4946      	ldr	r1, [pc, #280]	; (23058 <http_client_init+0x128>)
   22f40:	1a5b      	subs	r3, r3, r1
   22f42:	08db      	lsrs	r3, r3, #3

    LOG_DBG("http_client_init\n");
   22f44:	f04f 0000 	mov.w	r0, #0
   22f48:	2104      	movs	r1, #4
   22f4a:	f361 0002 	bfi	r0, r1, #0, #3
   22f4e:	f362 00c5 	bfi	r0, r2, #3, #3
   22f52:	f363 108f 	bfi	r0, r3, #6, #10
   22f56:	4a41      	ldr	r2, [pc, #260]	; (2305c <http_client_init+0x12c>)
   22f58:	4941      	ldr	r1, [pc, #260]	; (23060 <http_client_init+0x130>)
   22f5a:	f019 f875 	bl	3c048 <log_string_sync>

    rc = nrf_modem_lib_get_init_ret();    
   22f5e:	f007 fce9 	bl	2a934 <nrf_modem_lib_get_init_ret>
   22f62:	4602      	mov	r2, r0
    /* Handle return values relating to modem firmware update */
    switch (rc) {
   22f64:	4b3f      	ldr	r3, [pc, #252]	; (23064 <http_client_init+0x134>)
   22f66:	4298      	cmp	r0, r3
   22f68:	dc1b      	bgt.n	22fa2 <http_client_init+0x72>
   22f6a:	3b01      	subs	r3, #1
   22f6c:	4298      	cmp	r0, r3
   22f6e:	da3a      	bge.n	22fe6 <http_client_init+0xb6>
   22f70:	b370      	cbz	r0, 22fd0 <http_client_init+0xa0>
   22f72:	2800      	cmp	r0, #0
   22f74:	db48      	blt.n	23008 <http_client_init+0xd8>
   22f76:	f1a0 6388 	sub.w	r3, r0, #71303168	; 0x4400000
   22f7a:	3b01      	subs	r3, #1
   22f7c:	2b01      	cmp	r3, #1
   22f7e:	d843      	bhi.n	23008 <http_client_init+0xd8>
   22f80:	4b34      	ldr	r3, [pc, #208]	; (23054 <http_client_init+0x124>)
   22f82:	4935      	ldr	r1, [pc, #212]	; (23058 <http_client_init+0x128>)
   22f84:	1a5b      	subs	r3, r3, r1
   22f86:	08db      	lsrs	r3, r3, #3
    case MODEM_DFU_RESULT_AUTH_ERROR:
        LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", rc);
        break;
    case MODEM_DFU_RESULT_HARDWARE_ERROR:
    case MODEM_DFU_RESULT_INTERNAL_ERROR:
        LOG_ERR("MODEM UPDATE FATAL ERROR %d. Modem failure", rc);
   22f88:	f04f 0000 	mov.w	r0, #0
   22f8c:	2101      	movs	r1, #1
   22f8e:	f361 0002 	bfi	r0, r1, #0, #3
   22f92:	f36f 00c5 	bfc	r0, #3, #3
   22f96:	f363 108f 	bfi	r0, r3, #6, #10
   22f9a:	4933      	ldr	r1, [pc, #204]	; (23068 <http_client_init+0x138>)
   22f9c:	f019 f854 	bl	3c048 <log_string_sync>
   22fa0:	e016      	b.n	22fd0 <http_client_init+0xa0>
    switch (rc) {
   22fa2:	4b32      	ldr	r3, [pc, #200]	; (2306c <http_client_init+0x13c>)
   22fa4:	4298      	cmp	r0, r3
   22fa6:	d12f      	bne.n	23008 <http_client_init+0xd8>
   22fa8:	4b2a      	ldr	r3, [pc, #168]	; (23054 <http_client_init+0x124>)
   22faa:	4a2b      	ldr	r2, [pc, #172]	; (23058 <http_client_init+0x128>)
   22fac:	1a9b      	subs	r3, r3, r2
   22fae:	08db      	lsrs	r3, r3, #3
        LOG_INF("MODEM UPDATE OK. Will run new firmware after reboot");
   22fb0:	f04f 0000 	mov.w	r0, #0
   22fb4:	2203      	movs	r2, #3
   22fb6:	f362 0002 	bfi	r0, r2, #0, #3
   22fba:	f36f 00c5 	bfc	r0, #3, #3
   22fbe:	f363 108f 	bfi	r0, r3, #6, #10
   22fc2:	492b      	ldr	r1, [pc, #172]	; (23070 <http_client_init+0x140>)
   22fc4:	f019 f840 	bl	3c048 <log_string_sync>
	return z_impl_z_current_get();
   22fc8:	f015 f8d2 	bl	38170 <z_impl_z_current_get>
	z_impl_k_thread_suspend(thread);
   22fcc:	f014 fd88 	bl	37ae0 <z_impl_k_thread_suspend>
        LOG_ERR("nRF modem lib initialization failed, error: %d", rc);
        break;
    }


    rc = fota_download_init(download_handler);
   22fd0:	4828      	ldr	r0, [pc, #160]	; (23074 <http_client_init+0x144>)
   22fd2:	f00d f90d 	bl	301f0 <fota_download_init>
    if (rc) {
   22fd6:	4604      	mov	r4, r0
   22fd8:	bb38      	cbnz	r0, 2302a <http_client_init+0xfa>
        LOG_ERR("FOTA init error.");
        return rc;
    }

    k_work_init(&wk_http_download, http_download_handler);
   22fda:	4927      	ldr	r1, [pc, #156]	; (23078 <http_client_init+0x148>)
   22fdc:	4827      	ldr	r0, [pc, #156]	; (2307c <http_client_init+0x14c>)
   22fde:	f013 fd51 	bl	36a84 <k_work_init>

    return rc;
}
   22fe2:	4620      	mov	r0, r4
   22fe4:	bd10      	pop	{r4, pc}
   22fe6:	4b1b      	ldr	r3, [pc, #108]	; (23054 <http_client_init+0x124>)
   22fe8:	491b      	ldr	r1, [pc, #108]	; (23058 <http_client_init+0x128>)
   22fea:	1a5b      	subs	r3, r3, r1
   22fec:	08db      	lsrs	r3, r3, #3
        LOG_ERR("MODEM UPDATE ERROR %d. Will run old firmware", rc);
   22fee:	f04f 0000 	mov.w	r0, #0
   22ff2:	2101      	movs	r1, #1
   22ff4:	f361 0002 	bfi	r0, r1, #0, #3
   22ff8:	f36f 00c5 	bfc	r0, #3, #3
   22ffc:	f363 108f 	bfi	r0, r3, #6, #10
   23000:	491f      	ldr	r1, [pc, #124]	; (23080 <http_client_init+0x150>)
   23002:	f019 f821 	bl	3c048 <log_string_sync>
   23006:	e7e3      	b.n	22fd0 <http_client_init+0xa0>
   23008:	4b12      	ldr	r3, [pc, #72]	; (23054 <http_client_init+0x124>)
   2300a:	4913      	ldr	r1, [pc, #76]	; (23058 <http_client_init+0x128>)
   2300c:	1a5b      	subs	r3, r3, r1
   2300e:	08db      	lsrs	r3, r3, #3
        LOG_ERR("nRF modem lib initialization failed, error: %d", rc);
   23010:	f04f 0000 	mov.w	r0, #0
   23014:	2101      	movs	r1, #1
   23016:	f361 0002 	bfi	r0, r1, #0, #3
   2301a:	f36f 00c5 	bfc	r0, #3, #3
   2301e:	f363 108f 	bfi	r0, r3, #6, #10
   23022:	4918      	ldr	r1, [pc, #96]	; (23084 <http_client_init+0x154>)
   23024:	f019 f810 	bl	3c048 <log_string_sync>
   23028:	e7d2      	b.n	22fd0 <http_client_init+0xa0>
   2302a:	4b0a      	ldr	r3, [pc, #40]	; (23054 <http_client_init+0x124>)
   2302c:	4a0a      	ldr	r2, [pc, #40]	; (23058 <http_client_init+0x128>)
   2302e:	1a9b      	subs	r3, r3, r2
   23030:	08db      	lsrs	r3, r3, #3
        LOG_ERR("FOTA init error.");
   23032:	f04f 0000 	mov.w	r0, #0
   23036:	2201      	movs	r2, #1
   23038:	f362 0002 	bfi	r0, r2, #0, #3
   2303c:	f36f 00c5 	bfc	r0, #3, #3
   23040:	f363 108f 	bfi	r0, r3, #6, #10
   23044:	4910      	ldr	r1, [pc, #64]	; (23088 <http_client_init+0x158>)
   23046:	f018 ffff 	bl	3c048 <log_string_sync>
        return rc;
   2304a:	e7ca      	b.n	22fe2 <http_client_init+0xb2>
   2304c:	20010df3 	.word	0x20010df3
   23050:	2000e880 	.word	0x2000e880
   23054:	00041290 	.word	0x00041290
   23058:	00041200 	.word	0x00041200
   2305c:	00041abc 	.word	0x00041abc
   23060:	00041988 	.word	0x00041988
   23064:	04400004 	.word	0x04400004
   23068:	00041a04 	.word	0x00041a04
   2306c:	05500001 	.word	0x05500001
   23070:	000419a0 	.word	0x000419a0
   23074:	00022dad 	.word	0x00022dad
   23078:	00022d59 	.word	0x00022d59
   2307c:	2000e884 	.word	0x2000e884
   23080:	000419d4 	.word	0x000419d4
   23084:	00041a30 	.word	0x00041a30
   23088:	00041a60 	.word	0x00041a60

0002308c <get_file_size>:
uint32_t get_file_size(void){
   2308c:	b508      	push	{r3, lr}
   2308e:	4b09      	ldr	r3, [pc, #36]	; (230b4 <get_file_size+0x28>)
   23090:	4a09      	ldr	r2, [pc, #36]	; (230b8 <get_file_size+0x2c>)
   23092:	1a9b      	subs	r3, r3, r2
   23094:	08db      	lsrs	r3, r3, #3
    LOG_ERR("File Size is Currently commented out");
   23096:	f04f 0000 	mov.w	r0, #0
   2309a:	2201      	movs	r2, #1
   2309c:	f362 0002 	bfi	r0, r2, #0, #3
   230a0:	f36f 00c5 	bfc	r0, #3, #3
   230a4:	f363 108f 	bfi	r0, r3, #6, #10
   230a8:	4904      	ldr	r1, [pc, #16]	; (230bc <get_file_size+0x30>)
   230aa:	f018 ffcd 	bl	3c048 <log_string_sync>
    return m_file_size;
   230ae:	4b04      	ldr	r3, [pc, #16]	; (230c0 <get_file_size+0x34>)
   230b0:	6818      	ldr	r0, [r3, #0]
   230b2:	bd08      	pop	{r3, pc}
   230b4:	00041290 	.word	0x00041290
   230b8:	00041200 	.word	0x00041200
   230bc:	00041a74 	.word	0x00041a74
   230c0:	2000e828 	.word	0x2000e828

000230c4 <rsp_cb_flash_done>:
/**@brief Callback function for flash done response.
 *
 * @param p_rsp: response contains: "ok".
 */
static void rsp_cb_flash_done(uint8_t* p_rsp, uint16_t rsp_len)
{
   230c4:	b508      	push	{r3, lr}
   230c6:	4b08      	ldr	r3, [pc, #32]	; (230e8 <rsp_cb_flash_done+0x24>)
   230c8:	4a08      	ldr	r2, [pc, #32]	; (230ec <rsp_cb_flash_done+0x28>)
   230ca:	1a9b      	subs	r3, r3, r2
   230cc:	08db      	lsrs	r3, r3, #3
    LOG_INF("rsp_flash_done");
   230ce:	f04f 0000 	mov.w	r0, #0
   230d2:	2203      	movs	r2, #3
   230d4:	f362 0002 	bfi	r0, r2, #0, #3
   230d8:	f36f 00c5 	bfc	r0, #3, #3
   230dc:	f363 108f 	bfi	r0, r3, #6, #10
   230e0:	4903      	ldr	r1, [pc, #12]	; (230f0 <rsp_cb_flash_done+0x2c>)
   230e2:	f018 ffb1 	bl	3c048 <log_string_sync>
}
   230e6:	bd08      	pop	{r3, pc}
   230e8:	00041240 	.word	0x00041240
   230ec:	00041200 	.word	0x00041200
   230f0:	00041ad0 	.word	0x00041ad0

000230f4 <rsp_cb_flash_erase>:
{
   230f4:	b500      	push	{lr}
   230f6:	b083      	sub	sp, #12
    uint8_t p_ok[] = CMD_RSP_OK;
   230f8:	f646 336f 	movw	r3, #27503	; 0x6b6f
   230fc:	f8ad 3004 	strh.w	r3, [sp, #4]
    if (memcmp(p_rsp, p_ok, sizeof(p_ok)) == 0)
   23100:	2202      	movs	r2, #2
   23102:	a901      	add	r1, sp, #4
   23104:	f01c feee 	bl	3fee4 <memcmp>
   23108:	b928      	cbnz	r0, 23116 <rsp_cb_flash_erase+0x22>
        k_work_submit(&wk_get_and_write_data);
   2310a:	480b      	ldr	r0, [pc, #44]	; (23138 <rsp_cb_flash_erase+0x44>)
   2310c:	f013 fd3a 	bl	36b84 <k_work_submit>
}
   23110:	b003      	add	sp, #12
   23112:	f85d fb04 	ldr.w	pc, [sp], #4
   23116:	4b09      	ldr	r3, [pc, #36]	; (2313c <rsp_cb_flash_erase+0x48>)
   23118:	4a09      	ldr	r2, [pc, #36]	; (23140 <rsp_cb_flash_erase+0x4c>)
   2311a:	1a9b      	subs	r3, r3, r2
   2311c:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Timeout");
   2311e:	f04f 0000 	mov.w	r0, #0
   23122:	2201      	movs	r2, #1
   23124:	f362 0002 	bfi	r0, r2, #0, #3
   23128:	f36f 00c5 	bfc	r0, #3, #3
   2312c:	f363 108f 	bfi	r0, r3, #6, #10
   23130:	4904      	ldr	r1, [pc, #16]	; (23144 <rsp_cb_flash_erase+0x50>)
   23132:	f018 ff89 	bl	3c048 <log_string_sync>
}
   23136:	e7eb      	b.n	23110 <rsp_cb_flash_erase+0x1c>
   23138:	2000eca8 	.word	0x2000eca8
   2313c:	00041240 	.word	0x00041240
   23140:	00041200 	.word	0x00041200
   23144:	00041ae0 	.word	0x00041ae0

00023148 <wk_get_and_write_data_handle>:
{
   23148:	b570      	push	{r4, r5, r6, lr}
   2314a:	b082      	sub	sp, #8
    if(m_img_size - m_img_offset > IMG_BLOCK_SIZE)
   2314c:	4b23      	ldr	r3, [pc, #140]	; (231dc <wk_get_and_write_data_handle+0x94>)
   2314e:	6818      	ldr	r0, [r3, #0]
   23150:	4b23      	ldr	r3, [pc, #140]	; (231e0 <wk_get_and_write_data_handle+0x98>)
   23152:	681b      	ldr	r3, [r3, #0]
   23154:	1a1b      	subs	r3, r3, r0
   23156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2315a:	d93c      	bls.n	231d6 <wk_get_and_write_data_handle+0x8e>
        buffer_len = IMG_BLOCK_SIZE;
   2315c:	4b21      	ldr	r3, [pc, #132]	; (231e4 <wk_get_and_write_data_handle+0x9c>)
   2315e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23162:	601a      	str	r2, [r3, #0]
    app_flash_read(m_img_offset,&m_cmd_buffer[8],buffer_len);
   23164:	4e1f      	ldr	r6, [pc, #124]	; (231e4 <wk_get_and_write_data_handle+0x9c>)
   23166:	4c20      	ldr	r4, [pc, #128]	; (231e8 <wk_get_and_write_data_handle+0xa0>)
   23168:	6832      	ldr	r2, [r6, #0]
   2316a:	f104 0108 	add.w	r1, r4, #8
   2316e:	f018 fb1d 	bl	3b7ac <app_flash_read>
    sys_put_le32(m_img_offset, &m_cmd_buffer[0]);
   23172:	4d1a      	ldr	r5, [pc, #104]	; (231dc <wk_get_and_write_data_handle+0x94>)
   23174:	682b      	ldr	r3, [r5, #0]
	dst[0] = val;
   23176:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   23178:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2317c:	7062      	strb	r2, [r4, #1]
	sys_put_le16(val >> 16, &dst[2]);
   2317e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   23180:	70a2      	strb	r2, [r4, #2]
	dst[1] = val >> 8;
   23182:	0e1b      	lsrs	r3, r3, #24
   23184:	70e3      	strb	r3, [r4, #3]
    sys_put_le32(buffer_len, &m_cmd_buffer[4]);
   23186:	6833      	ldr	r3, [r6, #0]
	sys_put_le16(val, dst);
   23188:	b299      	uxth	r1, r3
	dst[0] = val;
   2318a:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   2318c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23190:	7162      	strb	r2, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
   23192:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   23194:	71a2      	strb	r2, [r4, #6]
	dst[1] = val >> 8;
   23196:	0e1b      	lsrs	r3, r3, #24
   23198:	71e3      	strb	r3, [r4, #7]
    cmd_request_flash_write(m_cmd_buffer, buffer_len + 8);
   2319a:	3108      	adds	r1, #8
   2319c:	b289      	uxth	r1, r1
   2319e:	4620      	mov	r0, r4
   231a0:	f018 fa51 	bl	3b646 <cmd_request_flash_write>
    m_img_offset += buffer_len;
   231a4:	6832      	ldr	r2, [r6, #0]
   231a6:	682b      	ldr	r3, [r5, #0]
   231a8:	4413      	add	r3, r2
   231aa:	602b      	str	r3, [r5, #0]
   231ac:	490f      	ldr	r1, [pc, #60]	; (231ec <wk_get_and_write_data_handle+0xa4>)
   231ae:	4810      	ldr	r0, [pc, #64]	; (231f0 <wk_get_and_write_data_handle+0xa8>)
   231b0:	1a09      	subs	r1, r1, r0
   231b2:	08c9      	lsrs	r1, r1, #3
    LOG_INF("image(%d) %d/%d", buffer_len, m_img_offset, m_img_size);
   231b4:	f04f 0000 	mov.w	r0, #0
   231b8:	2403      	movs	r4, #3
   231ba:	f364 0002 	bfi	r0, r4, #0, #3
   231be:	f36f 00c5 	bfc	r0, #3, #3
   231c2:	f361 108f 	bfi	r0, r1, #6, #10
   231c6:	4906      	ldr	r1, [pc, #24]	; (231e0 <wk_get_and_write_data_handle+0x98>)
   231c8:	6809      	ldr	r1, [r1, #0]
   231ca:	9100      	str	r1, [sp, #0]
   231cc:	4909      	ldr	r1, [pc, #36]	; (231f4 <wk_get_and_write_data_handle+0xac>)
   231ce:	f018 ff3b 	bl	3c048 <log_string_sync>
}
   231d2:	b002      	add	sp, #8
   231d4:	bd70      	pop	{r4, r5, r6, pc}
        buffer_len = m_img_size - m_img_offset;
   231d6:	4a03      	ldr	r2, [pc, #12]	; (231e4 <wk_get_and_write_data_handle+0x9c>)
   231d8:	6013      	str	r3, [r2, #0]
   231da:	e7c3      	b.n	23164 <wk_get_and_write_data_handle+0x1c>
   231dc:	2000eca0 	.word	0x2000eca0
   231e0:	2000eca4 	.word	0x2000eca4
   231e4:	2000e894 	.word	0x2000e894
   231e8:	2000e898 	.word	0x2000e898
   231ec:	00041240 	.word	0x00041240
   231f0:	00041200 	.word	0x00041200
   231f4:	00041ae8 	.word	0x00041ae8

000231f8 <startdfuprocess>:
{
   231f8:	b570      	push	{r4, r5, r6, lr}
    m_img_size=img_size;
   231fa:	4e13      	ldr	r6, [pc, #76]	; (23248 <startdfuprocess+0x50>)
   231fc:	6030      	str	r0, [r6, #0]
   231fe:	4c13      	ldr	r4, [pc, #76]	; (2324c <startdfuprocess+0x54>)
   23200:	4b13      	ldr	r3, [pc, #76]	; (23250 <startdfuprocess+0x58>)
   23202:	1ae4      	subs	r4, r4, r3
   23204:	08e4      	lsrs	r4, r4, #3
    LOG_INF("Start DFU Process");
   23206:	2503      	movs	r5, #3
   23208:	f04f 0000 	mov.w	r0, #0
   2320c:	f365 0002 	bfi	r0, r5, #0, #3
   23210:	f36f 00c5 	bfc	r0, #3, #3
   23214:	f364 108f 	bfi	r0, r4, #6, #10
   23218:	490e      	ldr	r1, [pc, #56]	; (23254 <startdfuprocess+0x5c>)
   2321a:	f018 ff15 	bl	3c048 <log_string_sync>
    err = cmd_request_flash_erase(0, CEIL_DIV(m_img_size, 0x1000));
   2321e:	6831      	ldr	r1, [r6, #0]
   23220:	f601 71ff 	addw	r1, r1, #4095	; 0xfff
   23224:	f3c1 310f 	ubfx	r1, r1, #12, #16
   23228:	2000      	movs	r0, #0
   2322a:	f018 fa13 	bl	3b654 <cmd_request_flash_erase>
   2322e:	4602      	mov	r2, r0
     LOG_INF("Err %d",err);
   23230:	f04f 0000 	mov.w	r0, #0
   23234:	f365 0002 	bfi	r0, r5, #0, #3
   23238:	f36f 00c5 	bfc	r0, #3, #3
   2323c:	f364 108f 	bfi	r0, r4, #6, #10
   23240:	4905      	ldr	r1, [pc, #20]	; (23258 <startdfuprocess+0x60>)
   23242:	f018 ff01 	bl	3c048 <log_string_sync>
}
   23246:	bd70      	pop	{r4, r5, r6, pc}
   23248:	2000eca4 	.word	0x2000eca4
   2324c:	00041240 	.word	0x00041240
   23250:	00041200 	.word	0x00041200
   23254:	00041af8 	.word	0x00041af8
   23258:	00041b0c 	.word	0x00041b0c

0002325c <rsp_cb_flash_info>:
{
   2325c:	b570      	push	{r4, r5, r6, lr}
   2325e:	b082      	sub	sp, #8
	return ((uint16_t)src[1] << 8) | src[0];
   23260:	78c2      	ldrb	r2, [r0, #3]
   23262:	7885      	ldrb	r5, [r0, #2]
   23264:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
   23268:	7843      	ldrb	r3, [r0, #1]
   2326a:	7802      	ldrb	r2, [r0, #0]
   2326c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   23270:	79c3      	ldrb	r3, [r0, #7]
   23272:	7984      	ldrb	r4, [r0, #6]
   23274:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   23278:	7941      	ldrb	r1, [r0, #5]
   2327a:	7904      	ldrb	r4, [r0, #4]
   2327c:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   23284:	7ac1      	ldrb	r1, [r0, #11]
   23286:	7a83      	ldrb	r3, [r0, #10]
   23288:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   2328c:	7a46      	ldrb	r6, [r0, #9]
   2328e:	7a03      	ldrb	r3, [r0, #8]
   23290:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   23294:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   23298:	4922      	ldr	r1, [pc, #136]	; (23324 <rsp_cb_flash_info+0xc8>)
   2329a:	4823      	ldr	r0, [pc, #140]	; (23328 <rsp_cb_flash_info+0xcc>)
   2329c:	1a09      	subs	r1, r1, r0
   2329e:	08c9      	lsrs	r1, r1, #3
    LOG_INF("Addr: 0x%08x, pages: %d, offset: %08x", flash_addr, page_count, first_blank);
   232a0:	f04f 0000 	mov.w	r0, #0
   232a4:	2603      	movs	r6, #3
   232a6:	f366 0002 	bfi	r0, r6, #0, #3
   232aa:	f36f 00c5 	bfc	r0, #3, #3
   232ae:	f361 108f 	bfi	r0, r1, #6, #10
   232b2:	9300      	str	r3, [sp, #0]
   232b4:	4623      	mov	r3, r4
   232b6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   232ba:	491c      	ldr	r1, [pc, #112]	; (2332c <rsp_cb_flash_info+0xd0>)
   232bc:	f018 fec4 	bl	3c048 <log_string_sync>
    if (m_img_size > (page_count - 1) * 0x1000)
   232c0:	3c01      	subs	r4, #1
   232c2:	4b1b      	ldr	r3, [pc, #108]	; (23330 <rsp_cb_flash_info+0xd4>)
   232c4:	6819      	ldr	r1, [r3, #0]
   232c6:	ebb1 3f04 	cmp.w	r1, r4, lsl #12
   232ca:	d911      	bls.n	232f0 <rsp_cb_flash_info+0x94>
   232cc:	4b15      	ldr	r3, [pc, #84]	; (23324 <rsp_cb_flash_info+0xc8>)
   232ce:	4a16      	ldr	r2, [pc, #88]	; (23328 <rsp_cb_flash_info+0xcc>)
   232d0:	1a9b      	subs	r3, r3, r2
   232d2:	40f3      	lsrs	r3, r6
        LOG_ERR("Image size is too big.");
   232d4:	f04f 0000 	mov.w	r0, #0
   232d8:	2201      	movs	r2, #1
   232da:	f362 0002 	bfi	r0, r2, #0, #3
   232de:	f36f 00c5 	bfc	r0, #3, #3
   232e2:	f363 108f 	bfi	r0, r3, #6, #10
   232e6:	4913      	ldr	r1, [pc, #76]	; (23334 <rsp_cb_flash_info+0xd8>)
   232e8:	f018 feae 	bl	3c048 <log_string_sync>
}
   232ec:	b002      	add	sp, #8
   232ee:	bd70      	pop	{r4, r5, r6, pc}
        err = cmd_request_flash_erase(0, CEIL_DIV(m_img_size, 0x1000));
   232f0:	f601 71ff 	addw	r1, r1, #4095	; 0xfff
   232f4:	f3c1 310f 	ubfx	r1, r1, #12, #16
   232f8:	2000      	movs	r0, #0
   232fa:	f018 f9ab 	bl	3b654 <cmd_request_flash_erase>
   232fe:	4602      	mov	r2, r0
   23300:	4b08      	ldr	r3, [pc, #32]	; (23324 <rsp_cb_flash_info+0xc8>)
   23302:	4909      	ldr	r1, [pc, #36]	; (23328 <rsp_cb_flash_info+0xcc>)
   23304:	1a5b      	subs	r3, r3, r1
   23306:	08db      	lsrs	r3, r3, #3
        LOG_INF("Err %d",err);
   23308:	f04f 0000 	mov.w	r0, #0
   2330c:	2103      	movs	r1, #3
   2330e:	f361 0002 	bfi	r0, r1, #0, #3
   23312:	f36f 00c5 	bfc	r0, #3, #3
   23316:	f363 108f 	bfi	r0, r3, #6, #10
   2331a:	4907      	ldr	r1, [pc, #28]	; (23338 <rsp_cb_flash_info+0xdc>)
   2331c:	f018 fe94 	bl	3c048 <log_string_sync>
}
   23320:	e7e4      	b.n	232ec <rsp_cb_flash_info+0x90>
   23322:	bf00      	nop
   23324:	00041240 	.word	0x00041240
   23328:	00041200 	.word	0x00041200
   2332c:	00041b14 	.word	0x00041b14
   23330:	2000eca4 	.word	0x2000eca4
   23334:	00041b3c 	.word	0x00041b3c
   23338:	00041b0c 	.word	0x00041b0c

0002333c <cmd_request_flash_done>:
{
   2333c:	b500      	push	{lr}
   2333e:	b083      	sub	sp, #12
    sys_put_le32(m_img_size, &p_data[0]);
   23340:	4b0b      	ldr	r3, [pc, #44]	; (23370 <cmd_request_flash_done+0x34>)
   23342:	681b      	ldr	r3, [r3, #0]
	dst[0] = val;
   23344:	f88d 3004 	strb.w	r3, [sp, #4]
	dst[1] = val >> 8;
   23348:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2334c:	f88d 2005 	strb.w	r2, [sp, #5]
	sys_put_le16(val >> 16, &dst[2]);
   23350:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   23352:	f88d 2006 	strb.w	r2, [sp, #6]
	dst[1] = val >> 8;
   23356:	0e1b      	lsrs	r3, r3, #24
   23358:	f88d 3007 	strb.w	r3, [sp, #7]
    return app_cmd_request(CMD_OP_FLASH_DONE_52, p_data, sizeof(p_data));
   2335c:	2204      	movs	r2, #4
   2335e:	eb0d 0102 	add.w	r1, sp, r2
   23362:	2027      	movs	r0, #39	; 0x27
   23364:	f001 f98a 	bl	2467c <app_cmd_request>
}
   23368:	b003      	add	sp, #12
   2336a:	f85d fb04 	ldr.w	pc, [sp], #4
   2336e:	bf00      	nop
   23370:	2000eca4 	.word	0x2000eca4

00023374 <rsp_cb_flash_write>:
{
   23374:	b508      	push	{r3, lr}
    if (m_img_offset == m_img_size)
   23376:	4b11      	ldr	r3, [pc, #68]	; (233bc <rsp_cb_flash_write+0x48>)
   23378:	681b      	ldr	r3, [r3, #0]
   2337a:	4a11      	ldr	r2, [pc, #68]	; (233c0 <rsp_cb_flash_write+0x4c>)
   2337c:	6812      	ldr	r2, [r2, #0]
   2337e:	4293      	cmp	r3, r2
   23380:	d001      	beq.n	23386 <rsp_cb_flash_write+0x12>
    else if (m_img_offset > 0)
   23382:	b9b3      	cbnz	r3, 233b2 <rsp_cb_flash_write+0x3e>
}
   23384:	bd08      	pop	{r3, pc}
   23386:	4b0f      	ldr	r3, [pc, #60]	; (233c4 <rsp_cb_flash_write+0x50>)
   23388:	4a0f      	ldr	r2, [pc, #60]	; (233c8 <rsp_cb_flash_write+0x54>)
   2338a:	1a9b      	subs	r3, r3, r2
   2338c:	08db      	lsrs	r3, r3, #3
        LOG_INF("image transfer done");
   2338e:	f04f 0000 	mov.w	r0, #0
   23392:	2203      	movs	r2, #3
   23394:	f362 0002 	bfi	r0, r2, #0, #3
   23398:	f36f 00c5 	bfc	r0, #3, #3
   2339c:	f363 108f 	bfi	r0, r3, #6, #10
   233a0:	490a      	ldr	r1, [pc, #40]	; (233cc <rsp_cb_flash_write+0x58>)
   233a2:	f018 fe51 	bl	3c048 <log_string_sync>
        m_img_offset = 0;
   233a6:	4b05      	ldr	r3, [pc, #20]	; (233bc <rsp_cb_flash_write+0x48>)
   233a8:	2200      	movs	r2, #0
   233aa:	601a      	str	r2, [r3, #0]
        cmd_request_flash_done();
   233ac:	f7ff ffc6 	bl	2333c <cmd_request_flash_done>
   233b0:	e7e8      	b.n	23384 <rsp_cb_flash_write+0x10>
        k_work_submit(&wk_get_and_write_data);
   233b2:	4807      	ldr	r0, [pc, #28]	; (233d0 <rsp_cb_flash_write+0x5c>)
   233b4:	f013 fbe6 	bl	36b84 <k_work_submit>
}
   233b8:	e7e4      	b.n	23384 <rsp_cb_flash_write+0x10>
   233ba:	bf00      	nop
   233bc:	2000eca0 	.word	0x2000eca0
   233c0:	2000eca4 	.word	0x2000eca4
   233c4:	00041240 	.word	0x00041240
   233c8:	00041200 	.word	0x00041200
   233cc:	00041b54 	.word	0x00041b54
   233d0:	2000eca8 	.word	0x2000eca8

000233d4 <callback_init>:

//Helper for init
void callback_init(){
   233d4:	b508      	push	{r3, lr}
    
    app_cmd_add(CMD_OP_FLASH_INFO_52,  NULL, rsp_cb_flash_info);
   233d6:	4a0c      	ldr	r2, [pc, #48]	; (23408 <callback_init+0x34>)
   233d8:	2100      	movs	r1, #0
   233da:	2021      	movs	r0, #33	; 0x21
   233dc:	f001 f8f8 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_WRITE_52, NULL, rsp_cb_flash_write);
   233e0:	4a0a      	ldr	r2, [pc, #40]	; (2340c <callback_init+0x38>)
   233e2:	2100      	movs	r1, #0
   233e4:	2023      	movs	r0, #35	; 0x23
   233e6:	f001 f8f3 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_ERASE_52, NULL, rsp_cb_flash_erase);
   233ea:	4a09      	ldr	r2, [pc, #36]	; (23410 <callback_init+0x3c>)
   233ec:	2100      	movs	r1, #0
   233ee:	2024      	movs	r0, #36	; 0x24
   233f0:	f001 f8ee 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_DONE_52,  NULL, rsp_cb_flash_done);
   233f4:	4a07      	ldr	r2, [pc, #28]	; (23414 <callback_init+0x40>)
   233f6:	2100      	movs	r1, #0
   233f8:	2027      	movs	r0, #39	; 0x27
   233fa:	f001 f8e9 	bl	245d0 <app_cmd_add>

    //init worker
    k_work_init(&wk_get_and_write_data, wk_get_and_write_data_handle);
   233fe:	4906      	ldr	r1, [pc, #24]	; (23418 <callback_init+0x44>)
   23400:	4806      	ldr	r0, [pc, #24]	; (2341c <callback_init+0x48>)
   23402:	f013 fb3f 	bl	36a84 <k_work_init>
}
   23406:	bd08      	pop	{r3, pc}
   23408:	0002325d 	.word	0x0002325d
   2340c:	00023375 	.word	0x00023375
   23410:	000230f5 	.word	0x000230f5
   23414:	000230c5 	.word	0x000230c5
   23418:	00023149 	.word	0x00023149
   2341c:	2000eca8 	.word	0x2000eca8

00023420 <uart_callback>:
}

static void uart_callback(const struct device *dev,
              struct uart_event *evt,
              void *user_data)
{
   23420:	b570      	push	{r4, r5, r6, lr}
   23422:	460c      	mov	r4, r1
   23424:	4615      	mov	r5, r2
    struct device *uart = user_data;
    int err;

    switch (evt->type) {
   23426:	780b      	ldrb	r3, [r1, #0]
   23428:	2b06      	cmp	r3, #6
   2342a:	f200 80b7 	bhi.w	2359c <uart_callback+0x17c>
   2342e:	e8df f013 	tbh	[pc, r3, lsl #1]
   23432:	0007      	.short	0x0007
   23434:	00290020 	.word	0x00290020
   23438:	00a20050 	.word	0x00a20050
   2343c:	00c700b6 	.word	0x00c700b6
   23440:	4b69      	ldr	r3, [pc, #420]	; (235e8 <uart_callback+0x1c8>)
   23442:	4a6a      	ldr	r2, [pc, #424]	; (235ec <uart_callback+0x1cc>)
   23444:	1a9b      	subs	r3, r3, r2
   23446:	08db      	lsrs	r3, r3, #3
    case UART_TX_DONE:
        LOG_INF("Tx sent %d bytes", evt->data.tx.len);
   23448:	f04f 0000 	mov.w	r0, #0
   2344c:	2203      	movs	r2, #3
   2344e:	f362 0002 	bfi	r0, r2, #0, #3
   23452:	f36f 00c5 	bfc	r0, #3, #3
   23456:	f363 108f 	bfi	r0, r3, #6, #10
   2345a:	688a      	ldr	r2, [r1, #8]
   2345c:	4964      	ldr	r1, [pc, #400]	; (235f0 <uart_callback+0x1d0>)
   2345e:	f018 fdf3 	bl	3c048 <log_string_sync>
        if(m_tx_cb)
   23462:	4b64      	ldr	r3, [pc, #400]	; (235f4 <uart_callback+0x1d4>)
   23464:	681b      	ldr	r3, [r3, #0]
   23466:	2b00      	cmp	r3, #0
   23468:	f000 8098 	beq.w	2359c <uart_callback+0x17c>
        {
            m_tx_cb(evt->type);
   2346c:	7820      	ldrb	r0, [r4, #0]
   2346e:	4798      	blx	r3
   23470:	e094      	b.n	2359c <uart_callback+0x17c>
        }
        break;

    case UART_TX_ABORTED:
        if (m_tx_cb) {
   23472:	4b60      	ldr	r3, [pc, #384]	; (235f4 <uart_callback+0x1d4>)
   23474:	681b      	ldr	r3, [r3, #0]
   23476:	2b00      	cmp	r3, #0
   23478:	f000 8090 	beq.w	2359c <uart_callback+0x17c>
            m_tx_cb(-1);
   2347c:	f04f 30ff 	mov.w	r0, #4294967295
   23480:	4798      	blx	r3
   23482:	e08b      	b.n	2359c <uart_callback+0x17c>
   23484:	4b58      	ldr	r3, [pc, #352]	; (235e8 <uart_callback+0x1c8>)
   23486:	4a59      	ldr	r2, [pc, #356]	; (235ec <uart_callback+0x1cc>)
   23488:	1a9b      	subs	r3, r3, r2
   2348a:	08db      	lsrs	r3, r3, #3
        }
        break;

    case UART_RX_RDY:
        LOG_INF("Received data len:%d bytes,offset:%d", evt->data.rx.len, evt->data.rx.offset);
   2348c:	f04f 0000 	mov.w	r0, #0
   23490:	2203      	movs	r2, #3
   23492:	f362 0002 	bfi	r0, r2, #0, #3
   23496:	f36f 00c5 	bfc	r0, #3, #3
   2349a:	f363 108f 	bfi	r0, r3, #6, #10
   2349e:	688b      	ldr	r3, [r1, #8]
   234a0:	68ca      	ldr	r2, [r1, #12]
   234a2:	4955      	ldr	r1, [pc, #340]	; (235f8 <uart_callback+0x1d8>)
   234a4:	f018 fdd0 	bl	3c048 <log_string_sync>
        memcpy(&m_rx_buff.p_data[m_rx_buff.length], &evt->data.rx.buf[evt->data.rx.offset], 
   234a8:	4d54      	ldr	r5, [pc, #336]	; (235fc <uart_callback+0x1dc>)
   234aa:	6828      	ldr	r0, [r5, #0]
   234ac:	88ab      	ldrh	r3, [r5, #4]
   234ae:	6866      	ldr	r6, [r4, #4]
   234b0:	68a1      	ldr	r1, [r4, #8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   234b2:	68e2      	ldr	r2, [r4, #12]
   234b4:	4431      	add	r1, r6
   234b6:	4418      	add	r0, r3
   234b8:	f01c fd22 	bl	3ff00 <memcpy>
                evt->data.rx.len);
        m_rx_buff.length += evt->data.rx.len;
   234bc:	89a1      	ldrh	r1, [r4, #12]
   234be:	88ab      	ldrh	r3, [r5, #4]
   234c0:	440b      	add	r3, r1
   234c2:	80ab      	strh	r3, [r5, #4]
        
        if (m_rx_cb)
   234c4:	4b4e      	ldr	r3, [pc, #312]	; (23600 <uart_callback+0x1e0>)
   234c6:	681b      	ldr	r3, [r3, #0]
   234c8:	2b00      	cmp	r3, #0
   234ca:	d067      	beq.n	2359c <uart_callback+0x17c>
        {
            m_rx_cb(m_rx_buff.p_data, evt->data.rx.len);
   234cc:	6828      	ldr	r0, [r5, #0]
   234ce:	4798      	blx	r3
   234d0:	e064      	b.n	2359c <uart_callback+0x17c>
   234d2:	4b45      	ldr	r3, [pc, #276]	; (235e8 <uart_callback+0x1c8>)
   234d4:	4a45      	ldr	r2, [pc, #276]	; (235ec <uart_callback+0x1cc>)
   234d6:	1a9b      	subs	r3, r3, r2
   234d8:	08db      	lsrs	r3, r3, #3
        }
        break;

    case UART_RX_BUF_REQUEST:
    {
        LOG_INF("UART_RX_BUF_REQUEST");
   234da:	f04f 0000 	mov.w	r0, #0
   234de:	2203      	movs	r2, #3
   234e0:	f362 0002 	bfi	r0, r2, #0, #3
   234e4:	f36f 00c5 	bfc	r0, #3, #3
   234e8:	f363 108f 	bfi	r0, r3, #6, #10
   234ec:	4945      	ldr	r1, [pc, #276]	; (23604 <uart_callback+0x1e4>)
   234ee:	f018 fdab 	bl	3c048 <log_string_sync>
 */
static inline int uart_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				  size_t len)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
   234f2:	68ab      	ldr	r3, [r5, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
   234f4:	691b      	ldr	r3, [r3, #16]
   234f6:	f44f 6282 	mov.w	r2, #1040	; 0x410
   234fa:	4943      	ldr	r1, [pc, #268]	; (23608 <uart_callback+0x1e8>)
   234fc:	6809      	ldr	r1, [r1, #0]
   234fe:	4628      	mov	r0, r5
   23500:	4798      	blx	r3
   23502:	4602      	mov	r2, r0

        err = uart_rx_buf_rsp(uart, s_next_buf, sizeof(s_uart_rx_buf[0]));
        if (err == EBUSY) {
   23504:	2810      	cmp	r0, #16
   23506:	d014      	beq.n	23532 <uart_callback+0x112>
            LOG_WRN("UART RX buf rsp: EBUSY");
        }else if(err ==EACCES){
   23508:	280d      	cmp	r0, #13
   2350a:	d023      	beq.n	23554 <uart_callback+0x134>
            LOG_WRN("UART RX buf rsp: EACCES");
        }else if(err){
   2350c:	2800      	cmp	r0, #0
   2350e:	d045      	beq.n	2359c <uart_callback+0x17c>
   23510:	4b35      	ldr	r3, [pc, #212]	; (235e8 <uart_callback+0x1c8>)
   23512:	4936      	ldr	r1, [pc, #216]	; (235ec <uart_callback+0x1cc>)
   23514:	1a5b      	subs	r3, r3, r1
   23516:	08db      	lsrs	r3, r3, #3
            LOG_WRN("UART RX buf rsp: %d",err);
   23518:	f04f 0000 	mov.w	r0, #0
   2351c:	2102      	movs	r1, #2
   2351e:	f361 0002 	bfi	r0, r1, #0, #3
   23522:	f36f 00c5 	bfc	r0, #3, #3
   23526:	f363 108f 	bfi	r0, r3, #6, #10
   2352a:	4938      	ldr	r1, [pc, #224]	; (2360c <uart_callback+0x1ec>)
   2352c:	f018 fd8c 	bl	3c048 <log_string_sync>
   23530:	e034      	b.n	2359c <uart_callback+0x17c>
   23532:	4b2d      	ldr	r3, [pc, #180]	; (235e8 <uart_callback+0x1c8>)
   23534:	4a2d      	ldr	r2, [pc, #180]	; (235ec <uart_callback+0x1cc>)
   23536:	1a9b      	subs	r3, r3, r2
   23538:	08db      	lsrs	r3, r3, #3
            LOG_WRN("UART RX buf rsp: EBUSY");
   2353a:	f04f 0000 	mov.w	r0, #0
   2353e:	2202      	movs	r2, #2
   23540:	f362 0002 	bfi	r0, r2, #0, #3
   23544:	f36f 00c5 	bfc	r0, #3, #3
   23548:	f363 108f 	bfi	r0, r3, #6, #10
   2354c:	4930      	ldr	r1, [pc, #192]	; (23610 <uart_callback+0x1f0>)
   2354e:	f018 fd7b 	bl	3c048 <log_string_sync>
   23552:	e023      	b.n	2359c <uart_callback+0x17c>
   23554:	4b24      	ldr	r3, [pc, #144]	; (235e8 <uart_callback+0x1c8>)
   23556:	4a25      	ldr	r2, [pc, #148]	; (235ec <uart_callback+0x1cc>)
   23558:	1a9b      	subs	r3, r3, r2
   2355a:	08db      	lsrs	r3, r3, #3
            LOG_WRN("UART RX buf rsp: EACCES");
   2355c:	f04f 0000 	mov.w	r0, #0
   23560:	2202      	movs	r2, #2
   23562:	f362 0002 	bfi	r0, r2, #0, #3
   23566:	f36f 00c5 	bfc	r0, #3, #3
   2356a:	f363 108f 	bfi	r0, r3, #6, #10
   2356e:	4929      	ldr	r1, [pc, #164]	; (23614 <uart_callback+0x1f4>)
   23570:	f018 fd6a 	bl	3c048 <log_string_sync>
   23574:	e012      	b.n	2359c <uart_callback+0x17c>
   23576:	4b1c      	ldr	r3, [pc, #112]	; (235e8 <uart_callback+0x1c8>)
   23578:	4a1c      	ldr	r2, [pc, #112]	; (235ec <uart_callback+0x1cc>)
   2357a:	1a9b      	subs	r3, r3, r2
   2357c:	08db      	lsrs	r3, r3, #3
        }
        break;
    }

    case UART_RX_BUF_RELEASED:
        LOG_INF("UART_RX_BUF_RELEASED");
   2357e:	f04f 0000 	mov.w	r0, #0
   23582:	2203      	movs	r2, #3
   23584:	f362 0002 	bfi	r0, r2, #0, #3
   23588:	f36f 00c5 	bfc	r0, #3, #3
   2358c:	f363 108f 	bfi	r0, r3, #6, #10
   23590:	4921      	ldr	r1, [pc, #132]	; (23618 <uart_callback+0x1f8>)
   23592:	f018 fd59 	bl	3c048 <log_string_sync>
        s_next_buf = evt->data.rx_buf.buf;
   23596:	6862      	ldr	r2, [r4, #4]
   23598:	4b1b      	ldr	r3, [pc, #108]	; (23608 <uart_callback+0x1e8>)
   2359a:	601a      	str	r2, [r3, #0]
        LOG_INF("UART_RX_STOPPED");

        k_work_submit(&wk_reinitalize);
        break;
    }
}
   2359c:	bd70      	pop	{r4, r5, r6, pc}
   2359e:	4b12      	ldr	r3, [pc, #72]	; (235e8 <uart_callback+0x1c8>)
   235a0:	4a12      	ldr	r2, [pc, #72]	; (235ec <uart_callback+0x1cc>)
   235a2:	1a9b      	subs	r3, r3, r2
   235a4:	08db      	lsrs	r3, r3, #3
        LOG_INF("UART_RX_DISABLED");
   235a6:	f04f 0000 	mov.w	r0, #0
   235aa:	2203      	movs	r2, #3
   235ac:	f362 0002 	bfi	r0, r2, #0, #3
   235b0:	f36f 00c5 	bfc	r0, #3, #3
   235b4:	f363 108f 	bfi	r0, r3, #6, #10
   235b8:	4918      	ldr	r1, [pc, #96]	; (2361c <uart_callback+0x1fc>)
   235ba:	f018 fd45 	bl	3c048 <log_string_sync>
   235be:	e7ed      	b.n	2359c <uart_callback+0x17c>
   235c0:	4b09      	ldr	r3, [pc, #36]	; (235e8 <uart_callback+0x1c8>)
   235c2:	4a0a      	ldr	r2, [pc, #40]	; (235ec <uart_callback+0x1cc>)
   235c4:	1a9b      	subs	r3, r3, r2
   235c6:	08db      	lsrs	r3, r3, #3
        LOG_INF("UART_RX_STOPPED");
   235c8:	f04f 0000 	mov.w	r0, #0
   235cc:	2203      	movs	r2, #3
   235ce:	f362 0002 	bfi	r0, r2, #0, #3
   235d2:	f36f 00c5 	bfc	r0, #3, #3
   235d6:	f363 108f 	bfi	r0, r3, #6, #10
   235da:	4911      	ldr	r1, [pc, #68]	; (23620 <uart_callback+0x200>)
   235dc:	f018 fd34 	bl	3c048 <log_string_sync>
        k_work_submit(&wk_reinitalize);
   235e0:	4810      	ldr	r0, [pc, #64]	; (23624 <uart_callback+0x204>)
   235e2:	f013 facf 	bl	36b84 <k_work_submit>
}
   235e6:	e7d9      	b.n	2359c <uart_callback+0x17c>
   235e8:	00041210 	.word	0x00041210
   235ec:	00041200 	.word	0x00041200
   235f0:	00041b74 	.word	0x00041b74
   235f4:	2000ecc8 	.word	0x2000ecc8
   235f8:	00041b88 	.word	0x00041b88
   235fc:	2000ecbc 	.word	0x2000ecbc
   23600:	2000ecc4 	.word	0x2000ecc4
   23604:	00041bb0 	.word	0x00041bb0
   23608:	2000c608 	.word	0x2000c608
   2360c:	00041bf4 	.word	0x00041bf4
   23610:	00041bc4 	.word	0x00041bc4
   23614:	00041bdc 	.word	0x00041bdc
   23618:	00041c08 	.word	0x00041c08
   2361c:	00041c20 	.word	0x00041c20
   23620:	00041c34 	.word	0x00041c34
   23624:	2000f4ec 	.word	0x2000f4ec

00023628 <app_uart_send>:
{
   23628:	b570      	push	{r4, r5, r6, lr}
   2362a:	4605      	mov	r5, r0
   2362c:	460c      	mov	r4, r1
   2362e:	4b1c      	ldr	r3, [pc, #112]	; (236a0 <app_uart_send+0x78>)
   23630:	4a1c      	ldr	r2, [pc, #112]	; (236a4 <app_uart_send+0x7c>)
   23632:	1a9b      	subs	r3, r3, r2
   23634:	08db      	lsrs	r3, r3, #3
    LOG_ERR("%s, length:%d", __func__, length);
   23636:	f04f 0000 	mov.w	r0, #0
   2363a:	2201      	movs	r2, #1
   2363c:	f362 0002 	bfi	r0, r2, #0, #3
   23640:	f36f 00c5 	bfc	r0, #3, #3
   23644:	f363 108f 	bfi	r0, r3, #6, #10
   23648:	460b      	mov	r3, r1
   2364a:	4a17      	ldr	r2, [pc, #92]	; (236a8 <app_uart_send+0x80>)
   2364c:	4917      	ldr	r1, [pc, #92]	; (236ac <app_uart_send+0x84>)
   2364e:	f018 fcfb 	bl	3c048 <log_string_sync>
    if (m_device == NULL) {
   23652:	4b17      	ldr	r3, [pc, #92]	; (236b0 <app_uart_send+0x88>)
   23654:	6818      	ldr	r0, [r3, #0]
   23656:	b300      	cbz	r0, 2369a <app_uart_send+0x72>
    if (p_data != NULL && length != 0) {
   23658:	b145      	cbz	r5, 2366c <app_uart_send+0x44>
   2365a:	b13c      	cbz	r4, 2366c <app_uart_send+0x44>
	const struct uart_driver_api *api =
   2365c:	6883      	ldr	r3, [r0, #8]
	return api->tx(dev, buf, len, timeout);
   2365e:	685e      	ldr	r6, [r3, #4]
   23660:	f04f 33ff 	mov.w	r3, #4294967295
   23664:	4622      	mov	r2, r4
   23666:	4629      	mov	r1, r5
   23668:	47b0      	blx	r6
   2366a:	4606      	mov	r6, r0
    if (err < 0) {
   2366c:	2e00      	cmp	r6, #0
   2366e:	db01      	blt.n	23674 <app_uart_send+0x4c>
}
   23670:	4630      	mov	r0, r6
   23672:	bd70      	pop	{r4, r5, r6, pc}
   23674:	4b0a      	ldr	r3, [pc, #40]	; (236a0 <app_uart_send+0x78>)
   23676:	4a0b      	ldr	r2, [pc, #44]	; (236a4 <app_uart_send+0x7c>)
   23678:	1a9b      	subs	r3, r3, r2
   2367a:	08db      	lsrs	r3, r3, #3
        LOG_ERR("%s, err:%d", __func__, err);
   2367c:	f04f 0000 	mov.w	r0, #0
   23680:	2201      	movs	r2, #1
   23682:	f362 0002 	bfi	r0, r2, #0, #3
   23686:	f36f 00c5 	bfc	r0, #3, #3
   2368a:	f363 108f 	bfi	r0, r3, #6, #10
   2368e:	4633      	mov	r3, r6
   23690:	4a05      	ldr	r2, [pc, #20]	; (236a8 <app_uart_send+0x80>)
   23692:	4908      	ldr	r1, [pc, #32]	; (236b4 <app_uart_send+0x8c>)
   23694:	f018 fcd8 	bl	3c048 <log_string_sync>
   23698:	e7ea      	b.n	23670 <app_uart_send+0x48>
        return -1;
   2369a:	f04f 36ff 	mov.w	r6, #4294967295
   2369e:	e7e7      	b.n	23670 <app_uart_send+0x48>
   236a0:	00041210 	.word	0x00041210
   236a4:	00041200 	.word	0x00041200
   236a8:	00041cdc 	.word	0x00041cdc
   236ac:	00041c44 	.word	0x00041c44
   236b0:	2000ecb8 	.word	0x2000ecb8
   236b4:	00041c54 	.word	0x00041c54

000236b8 <app_uart_rx_reset>:
    p_buff->length = 0;
}

/**@brief Reset rx buffer */
void app_uart_rx_reset(void)
{
   236b8:	b508      	push	{r3, lr}
    uart_buffer_reset(&m_rx_buff);
   236ba:	4802      	ldr	r0, [pc, #8]	; (236c4 <app_uart_rx_reset+0xc>)
   236bc:	f017 ffeb 	bl	3b696 <uart_buffer_reset>
}
   236c0:	bd08      	pop	{r3, pc}
   236c2:	bf00      	nop
   236c4:	2000ecbc 	.word	0x2000ecbc

000236c8 <uart_receive>:
{
   236c8:	b538      	push	{r3, r4, r5, lr}
    ret = uart_rx_enable(m_device, s_uart_rx_buf[0], sizeof(s_uart_rx_buf[0]), UART_RX_TIMEOUT_MS);
   236ca:	4b12      	ldr	r3, [pc, #72]	; (23714 <uart_receive+0x4c>)
   236cc:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   236ce:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
   236d0:	68dd      	ldr	r5, [r3, #12]
   236d2:	4c11      	ldr	r4, [pc, #68]	; (23718 <uart_receive+0x50>)
   236d4:	230a      	movs	r3, #10
   236d6:	f44f 6282 	mov.w	r2, #1040	; 0x410
   236da:	4621      	mov	r1, r4
   236dc:	47a8      	blx	r5
    s_next_buf = s_uart_rx_buf[0];
   236de:	4b0f      	ldr	r3, [pc, #60]	; (2371c <uart_receive+0x54>)
   236e0:	601c      	str	r4, [r3, #0]
    if (ret) {
   236e2:	4604      	mov	r4, r0
   236e4:	b918      	cbnz	r0, 236ee <uart_receive+0x26>
    app_uart_rx_reset();
   236e6:	f7ff ffe7 	bl	236b8 <app_uart_rx_reset>
}
   236ea:	4620      	mov	r0, r4
   236ec:	bd38      	pop	{r3, r4, r5, pc}
   236ee:	4b0c      	ldr	r3, [pc, #48]	; (23720 <uart_receive+0x58>)
   236f0:	4a0c      	ldr	r2, [pc, #48]	; (23724 <uart_receive+0x5c>)
   236f2:	1a9b      	subs	r3, r3, r2
   236f4:	08db      	lsrs	r3, r3, #3
        LOG_ERR("%s failed: %d", __func__, ret);
   236f6:	f04f 0000 	mov.w	r0, #0
   236fa:	2201      	movs	r2, #1
   236fc:	f362 0002 	bfi	r0, r2, #0, #3
   23700:	f36f 00c5 	bfc	r0, #3, #3
   23704:	f363 108f 	bfi	r0, r3, #6, #10
   23708:	4623      	mov	r3, r4
   2370a:	4a07      	ldr	r2, [pc, #28]	; (23728 <uart_receive+0x60>)
   2370c:	4907      	ldr	r1, [pc, #28]	; (2372c <uart_receive+0x64>)
   2370e:	f018 fc9b 	bl	3c048 <log_string_sync>
        return ret;
   23712:	e7ea      	b.n	236ea <uart_receive+0x22>
   23714:	2000ecb8 	.word	0x2000ecb8
   23718:	2000eccc 	.word	0x2000eccc
   2371c:	2000c608 	.word	0x2000c608
   23720:	00041210 	.word	0x00041210
   23724:	00041200 	.word	0x00041200
   23728:	00041cec 	.word	0x00041cec
   2372c:	00041c60 	.word	0x00041c60

00023730 <app_uart_init>:
    if (p_device == NULL) {
   23730:	2800      	cmp	r0, #0
   23732:	d048      	beq.n	237c6 <app_uart_init+0x96>
{
   23734:	b570      	push	{r4, r5, r6, lr}
   23736:	b082      	sub	sp, #8
   23738:	4604      	mov	r4, r0
    m_device = p_device;
   2373a:	4b24      	ldr	r3, [pc, #144]	; (237cc <app_uart_init+0x9c>)
   2373c:	6018      	str	r0, [r3, #0]
    m_rx_buff.p_data = p_rx_buff;
   2373e:	4824      	ldr	r0, [pc, #144]	; (237d0 <app_uart_init+0xa0>)
   23740:	6001      	str	r1, [r0, #0]
    m_rx_buff.max_len = rx_max_len;
   23742:	80c2      	strh	r2, [r0, #6]
    m_rx_buff.length = 0;
   23744:	2300      	movs	r3, #0
   23746:	8083      	strh	r3, [r0, #4]
    m_rx_cb = NULL;
   23748:	4a22      	ldr	r2, [pc, #136]	; (237d4 <app_uart_init+0xa4>)
   2374a:	6013      	str	r3, [r2, #0]
    m_tx_cb = NULL;
   2374c:	4a22      	ldr	r2, [pc, #136]	; (237d8 <app_uart_init+0xa8>)
   2374e:	6013      	str	r3, [r2, #0]
    if(helper_bool){
   23750:	4b22      	ldr	r3, [pc, #136]	; (237dc <app_uart_init+0xac>)
   23752:	781b      	ldrb	r3, [r3, #0]
   23754:	bb0b      	cbnz	r3, 2379a <app_uart_init+0x6a>
	const struct uart_driver_api *api =
   23756:	68a3      	ldr	r3, [r4, #8]
	if (api->callback_set == NULL) {
   23758:	681b      	ldr	r3, [r3, #0]
   2375a:	b333      	cbz	r3, 237aa <app_uart_init+0x7a>
	return api->callback_set(dev, callback, user_data);
   2375c:	4622      	mov	r2, r4
   2375e:	4920      	ldr	r1, [pc, #128]	; (237e0 <app_uart_init+0xb0>)
   23760:	4620      	mov	r0, r4
   23762:	4798      	blx	r3
    __ASSERT(err == 0, "Failed to set callback");
   23764:	4605      	mov	r5, r0
   23766:	b148      	cbz	r0, 2377c <app_uart_init+0x4c>
   23768:	4e1e      	ldr	r6, [pc, #120]	; (237e4 <app_uart_init+0xb4>)
   2376a:	22d8      	movs	r2, #216	; 0xd8
   2376c:	4631      	mov	r1, r6
   2376e:	481e      	ldr	r0, [pc, #120]	; (237e8 <app_uart_init+0xb8>)
   23770:	f018 f9e2 	bl	3bb38 <printk>
   23774:	21d8      	movs	r1, #216	; 0xd8
   23776:	4630      	mov	r0, r6
   23778:	f018 fc32 	bl	3bfe0 <assert_post_action>
__syscall int uart_poll_in(const struct device *dev, unsigned char *p_char);

static inline int z_impl_uart_poll_in(const struct device *dev,
				      unsigned char *p_char)
{
	const struct uart_driver_api *api =
   2377c:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->poll_in == NULL) {
   2377e:	699b      	ldr	r3, [r3, #24]
   23780:	b12b      	cbz	r3, 2378e <app_uart_init+0x5e>
		return -ENOSYS;
	}

	return api->poll_in(dev, p_char);
   23782:	f10d 0107 	add.w	r1, sp, #7
   23786:	4620      	mov	r0, r4
   23788:	4798      	blx	r3
    while (uart_poll_in(p_device, &c) >= 0) {
   2378a:	2800      	cmp	r0, #0
   2378c:	daf6      	bge.n	2377c <app_uart_init+0x4c>
    __ASSERT(err == 0, "Failed to enable RX");
   2378e:	b97d      	cbnz	r5, 237b0 <app_uart_init+0x80>
    err = uart_receive();
   23790:	f7ff ff9a 	bl	236c8 <uart_receive>
    return 0;
   23794:	2000      	movs	r0, #0
}
   23796:	b002      	add	sp, #8
   23798:	bd70      	pop	{r4, r5, r6, pc}
        k_work_init(&wk_reinitalize,wk_uart_reinit_handler);
   2379a:	4914      	ldr	r1, [pc, #80]	; (237ec <app_uart_init+0xbc>)
   2379c:	4814      	ldr	r0, [pc, #80]	; (237f0 <app_uart_init+0xc0>)
   2379e:	f013 f971 	bl	36a84 <k_work_init>
        helper_bool = false;
   237a2:	4b0e      	ldr	r3, [pc, #56]	; (237dc <app_uart_init+0xac>)
   237a4:	2200      	movs	r2, #0
   237a6:	701a      	strb	r2, [r3, #0]
   237a8:	e7d5      	b.n	23756 <app_uart_init+0x26>
		return -ENOSYS;
   237aa:	f06f 0557 	mvn.w	r5, #87	; 0x57
   237ae:	e7db      	b.n	23768 <app_uart_init+0x38>
    __ASSERT(err == 0, "Failed to enable RX");
   237b0:	4c0c      	ldr	r4, [pc, #48]	; (237e4 <app_uart_init+0xb4>)
   237b2:	22e0      	movs	r2, #224	; 0xe0
   237b4:	4621      	mov	r1, r4
   237b6:	480c      	ldr	r0, [pc, #48]	; (237e8 <app_uart_init+0xb8>)
   237b8:	f018 f9be 	bl	3bb38 <printk>
   237bc:	21e0      	movs	r1, #224	; 0xe0
   237be:	4620      	mov	r0, r4
   237c0:	f018 fc0e 	bl	3bfe0 <assert_post_action>
   237c4:	e7e4      	b.n	23790 <app_uart_init+0x60>
        return -ENXIO;
   237c6:	f06f 0005 	mvn.w	r0, #5
}
   237ca:	4770      	bx	lr
   237cc:	2000ecb8 	.word	0x2000ecb8
   237d0:	2000ecbc 	.word	0x2000ecbc
   237d4:	2000ecc4 	.word	0x2000ecc4
   237d8:	2000ecc8 	.word	0x2000ecc8
   237dc:	2000c8c5 	.word	0x2000c8c5
   237e0:	00023421 	.word	0x00023421
   237e4:	00041c70 	.word	0x00041c70
   237e8:	00041c84 	.word	0x00041c84
   237ec:	000237f5 	.word	0x000237f5
   237f0:	2000f4ec 	.word	0x2000f4ec

000237f4 <wk_uart_reinit_handler>:
void wk_uart_reinit_handler(struct k_work * unused){
   237f4:	b508      	push	{r3, lr}
   237f6:	4b15      	ldr	r3, [pc, #84]	; (2384c <wk_uart_reinit_handler+0x58>)
   237f8:	4a15      	ldr	r2, [pc, #84]	; (23850 <wk_uart_reinit_handler+0x5c>)
   237fa:	1a9b      	subs	r3, r3, r2
   237fc:	08db      	lsrs	r3, r3, #3
    LOG_INF("Reinitializing Uart");
   237fe:	f04f 0000 	mov.w	r0, #0
   23802:	2203      	movs	r2, #3
   23804:	f362 0002 	bfi	r0, r2, #0, #3
   23808:	f36f 00c5 	bfc	r0, #3, #3
   2380c:	f363 108f 	bfi	r0, r3, #6, #10
   23810:	4910      	ldr	r1, [pc, #64]	; (23854 <wk_uart_reinit_handler+0x60>)
   23812:	f018 fc19 	bl	3c048 <log_string_sync>
    err = app_uart_init(m_device,m_rx_buff.p_data,m_rx_buff.max_len);
   23816:	4b10      	ldr	r3, [pc, #64]	; (23858 <wk_uart_reinit_handler+0x64>)
   23818:	88da      	ldrh	r2, [r3, #6]
   2381a:	6819      	ldr	r1, [r3, #0]
   2381c:	4b0f      	ldr	r3, [pc, #60]	; (2385c <wk_uart_reinit_handler+0x68>)
   2381e:	6818      	ldr	r0, [r3, #0]
   23820:	f7ff ff86 	bl	23730 <app_uart_init>
    if(err){
   23824:	b900      	cbnz	r0, 23828 <wk_uart_reinit_handler+0x34>
}
   23826:	bd08      	pop	{r3, pc}
   23828:	4602      	mov	r2, r0
   2382a:	4b08      	ldr	r3, [pc, #32]	; (2384c <wk_uart_reinit_handler+0x58>)
   2382c:	4908      	ldr	r1, [pc, #32]	; (23850 <wk_uart_reinit_handler+0x5c>)
   2382e:	1a5b      	subs	r3, r3, r1
   23830:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Error in APP Uart Reinit: %d",err);
   23832:	f04f 0000 	mov.w	r0, #0
   23836:	2101      	movs	r1, #1
   23838:	f361 0002 	bfi	r0, r1, #0, #3
   2383c:	f36f 00c5 	bfc	r0, #3, #3
   23840:	f363 108f 	bfi	r0, r3, #6, #10
   23844:	4906      	ldr	r1, [pc, #24]	; (23860 <wk_uart_reinit_handler+0x6c>)
   23846:	f018 fbff 	bl	3c048 <log_string_sync>
}
   2384a:	e7ec      	b.n	23826 <wk_uart_reinit_handler+0x32>
   2384c:	00041210 	.word	0x00041210
   23850:	00041200 	.word	0x00041200
   23854:	00041c9c 	.word	0x00041c9c
   23858:	2000ecbc 	.word	0x2000ecbc
   2385c:	2000ecb8 	.word	0x2000ecb8
   23860:	00041cb0 	.word	0x00041cb0

00023864 <app_uart_rx_cb_set>:

/**@brief Set rx data ready event callback */
void app_uart_rx_cb_set(uart_rx_cb cb)
{
    m_rx_cb = cb;
   23864:	4b01      	ldr	r3, [pc, #4]	; (2386c <app_uart_rx_cb_set+0x8>)
   23866:	6018      	str	r0, [r3, #0]
}
   23868:	4770      	bx	lr
   2386a:	bf00      	nop
   2386c:	2000ecc4 	.word	0x2000ecc4

00023870 <app_uart_tx_cb_set>:

/**@brief Set tx empty event callback */
void app_uart_tx_cb_set(uart_tx_cb cb)
{
    m_tx_cb = cb;
   23870:	4b01      	ldr	r3, [pc, #4]	; (23878 <app_uart_tx_cb_set+0x8>)
   23872:	6018      	str	r0, [r3, #0]
}
   23874:	4770      	bx	lr
   23876:	bf00      	nop
   23878:	2000ecc8 	.word	0x2000ecc8

0002387c <rsp_cb_ping>:
    return 0;
}

/**@brief Callback function for ping response. */
static void rsp_cb_ping(uint8_t* p_rsp, uint16_t rsp_len)
{
   2387c:	b508      	push	{r3, lr}
   2387e:	4b09      	ldr	r3, [pc, #36]	; (238a4 <rsp_cb_ping+0x28>)
   23880:	4a09      	ldr	r2, [pc, #36]	; (238a8 <rsp_cb_ping+0x2c>)
   23882:	1a9b      	subs	r3, r3, r2
   23884:	08db      	lsrs	r3, r3, #3
    LOG_INF("%s", __func__);
   23886:	f04f 0000 	mov.w	r0, #0
   2388a:	2203      	movs	r2, #3
   2388c:	f362 0002 	bfi	r0, r2, #0, #3
   23890:	f36f 00c5 	bfc	r0, #3, #3
   23894:	f363 108f 	bfi	r0, r3, #6, #10
   23898:	4a04      	ldr	r2, [pc, #16]	; (238ac <rsp_cb_ping+0x30>)
   2389a:	4905      	ldr	r1, [pc, #20]	; (238b0 <rsp_cb_ping+0x34>)
   2389c:	f018 fbd4 	bl	3c048 <log_string_sync>
}
   238a0:	bd08      	pop	{r3, pc}
   238a2:	bf00      	nop
   238a4:	00041228 	.word	0x00041228
   238a8:	00041200 	.word	0x00041200
   238ac:	000420bc 	.word	0x000420bc
   238b0:	00044678 	.word	0x00044678

000238b4 <cmd_len_get>:
    p_data = p_buff->p_data;
   238b4:	6802      	ldr	r2, [r0, #0]
    if (p_buff->length > CMD_FMT_SIZE_START + CMD_FMT_SIZE_LEN) {
   238b6:	8883      	ldrh	r3, [r0, #4]
   238b8:	2b03      	cmp	r3, #3
   238ba:	d801      	bhi.n	238c0 <cmd_len_get+0xc>
    cmd_len = 0;
   238bc:	2000      	movs	r0, #0
}
   238be:	4770      	bx	lr
{
   238c0:	b510      	push	{r4, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   238c2:	7891      	ldrb	r1, [r2, #2]
   238c4:	7853      	ldrb	r3, [r2, #1]
   238c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   238ca:	b21c      	sxth	r4, r3
   238cc:	4a09      	ldr	r2, [pc, #36]	; (238f4 <cmd_len_get+0x40>)
   238ce:	490a      	ldr	r1, [pc, #40]	; (238f8 <cmd_len_get+0x44>)
   238d0:	1a52      	subs	r2, r2, r1
   238d2:	08d2      	lsrs	r2, r2, #3
        LOG_DBG("%02x",len);
   238d4:	f04f 0000 	mov.w	r0, #0
   238d8:	2104      	movs	r1, #4
   238da:	f361 0002 	bfi	r0, r1, #0, #3
   238de:	f36f 00c5 	bfc	r0, #3, #3
   238e2:	f362 108f 	bfi	r0, r2, #6, #10
   238e6:	4a05      	ldr	r2, [pc, #20]	; (238fc <cmd_len_get+0x48>)
   238e8:	4905      	ldr	r1, [pc, #20]	; (23900 <cmd_len_get+0x4c>)
   238ea:	f018 fbad 	bl	3c048 <log_string_sync>
        cmd_len = CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC + len;
   238ee:	1d60      	adds	r0, r4, #5
   238f0:	b280      	uxth	r0, r0
}
   238f2:	bd10      	pop	{r4, pc}
   238f4:	00041228 	.word	0x00041228
   238f8:	00041200 	.word	0x00041200
   238fc:	00042080 	.word	0x00042080
   23900:	00041cfc 	.word	0x00041cfc

00023904 <state_handler>:
{
   23904:	b510      	push	{r4, lr}
   23906:	b082      	sub	sp, #8
   23908:	4604      	mov	r4, r0
    cmd_state_t state = p_cmd_ctx->state;
   2390a:	7843      	ldrb	r3, [r0, #1]
    switch (state) {
   2390c:	2b0b      	cmp	r3, #11
   2390e:	d81e      	bhi.n	2394e <state_handler+0x4a>
   23910:	e8df f003 	tbb	[pc, r3]
   23914:	35231f06 	.word	0x35231f06
   23918:	1d4b1d39 	.word	0x1d4b1d39
   2391c:	414b3d2e 	.word	0x414b3d2e
        app_uart_rx_reset();
   23920:	f7ff feca 	bl	236b8 <app_uart_rx_reset>
        mode_set(p_cmd_ctx, CMD_MODE_IDLE);
   23924:	2100      	movs	r1, #0
   23926:	4620      	mov	r0, r4
   23928:	f017 feb9 	bl	3b69e <mode_set>
   2392c:	4b21      	ldr	r3, [pc, #132]	; (239b4 <state_handler+0xb0>)
   2392e:	4a22      	ldr	r2, [pc, #136]	; (239b8 <state_handler+0xb4>)
   23930:	1a9b      	subs	r3, r3, r2
   23932:	08db      	lsrs	r3, r3, #3
        LOG_DBG("-------------");
   23934:	f04f 0000 	mov.w	r0, #0
   23938:	2204      	movs	r2, #4
   2393a:	f362 0002 	bfi	r0, r2, #0, #3
   2393e:	f36f 00c5 	bfc	r0, #3, #3
   23942:	f363 108f 	bfi	r0, r3, #6, #10
   23946:	4a1d      	ldr	r2, [pc, #116]	; (239bc <state_handler+0xb8>)
   23948:	491d      	ldr	r1, [pc, #116]	; (239c0 <state_handler+0xbc>)
   2394a:	f018 fb7d 	bl	3c048 <log_string_sync>
}
   2394e:	b002      	add	sp, #8
   23950:	bd10      	pop	{r4, pc}
        mode_set(p_cmd_ctx, CMD_MODE_HOST);
   23952:	2101      	movs	r1, #1
   23954:	f017 fea3 	bl	3b69e <mode_set>
        break;
   23958:	e7f9      	b.n	2394e <state_handler+0x4a>
	z_impl_k_timer_start(timer, duration, period);
   2395a:	2200      	movs	r2, #0
   2395c:	2300      	movs	r3, #0
   2395e:	e9cd 2300 	strd	r2, r3, [sp]
   23962:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   23966:	2300      	movs	r3, #0
   23968:	4816      	ldr	r0, [pc, #88]	; (239c4 <state_handler+0xc0>)
   2396a:	f015 f8c3 	bl	38af4 <z_impl_k_timer_start>
        break;
   2396e:	e7ee      	b.n	2394e <state_handler+0x4a>
	z_impl_k_timer_stop(timer);
   23970:	4814      	ldr	r0, [pc, #80]	; (239c4 <state_handler+0xc0>)
   23972:	f01c fa13 	bl	3fd9c <z_impl_k_timer_stop>
        k_work_submit(&wk_proc_rsp);
   23976:	4814      	ldr	r0, [pc, #80]	; (239c8 <state_handler+0xc4>)
   23978:	f013 f904 	bl	36b84 <k_work_submit>
        break;
   2397c:	e7e7      	b.n	2394e <state_handler+0x4a>
        mode_set(p_cmd_ctx, CMD_MODE_SLAVE);
   2397e:	2102      	movs	r1, #2
   23980:	f017 fe8d 	bl	3b69e <mode_set>
        break;
   23984:	e7e3      	b.n	2394e <state_handler+0x4a>
        k_work_submit(&wk_proc_req);
   23986:	4811      	ldr	r0, [pc, #68]	; (239cc <state_handler+0xc8>)
   23988:	f013 f8fc 	bl	36b84 <k_work_submit>
        break;
   2398c:	e7df      	b.n	2394e <state_handler+0x4a>
        state_set(p_cmd_ctx, CMD_STATE_IDLE);
   2398e:	2100      	movs	r1, #0
   23990:	f017 feb3 	bl	3b6fa <state_set>
        break;
   23994:	e7db      	b.n	2394e <state_handler+0x4a>
        if (mode_get(&m_cmd_ctx) != CMD_MODE_HOST) {
   23996:	480e      	ldr	r0, [pc, #56]	; (239d0 <state_handler+0xcc>)
   23998:	f017 fe86 	bl	3b6a8 <mode_get>
   2399c:	2801      	cmp	r0, #1
   2399e:	d0d6      	beq.n	2394e <state_handler+0x4a>
            state_set(p_cmd_ctx, CMD_STATE_IDLE);
   239a0:	2100      	movs	r1, #0
   239a2:	4620      	mov	r0, r4
   239a4:	f017 fea9 	bl	3b6fa <state_set>
   239a8:	e7d1      	b.n	2394e <state_handler+0x4a>
        state_set(p_cmd_ctx, CMD_STATE_IDLE);
   239aa:	2100      	movs	r1, #0
   239ac:	f017 fea5 	bl	3b6fa <state_set>
        break;
   239b0:	e7cd      	b.n	2394e <state_handler+0x4a>
   239b2:	bf00      	nop
   239b4:	00041228 	.word	0x00041228
   239b8:	00041200 	.word	0x00041200
   239bc:	00041fa8 	.word	0x00041fa8
   239c0:	00041d08 	.word	0x00041d08
   239c4:	2000c988 	.word	0x2000c988
   239c8:	2000fe40 	.word	0x2000fe40
   239cc:	2000fe30 	.word	0x2000fe30
   239d0:	2000f5ec 	.word	0x2000f5ec

000239d4 <on_cmd_send_start>:
{
   239d4:	b508      	push	{r3, lr}
   239d6:	4b10      	ldr	r3, [pc, #64]	; (23a18 <on_cmd_send_start+0x44>)
   239d8:	4a10      	ldr	r2, [pc, #64]	; (23a1c <on_cmd_send_start+0x48>)
   239da:	1a9b      	subs	r3, r3, r2
   239dc:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   239de:	f04f 0000 	mov.w	r0, #0
   239e2:	2204      	movs	r2, #4
   239e4:	f362 0002 	bfi	r0, r2, #0, #3
   239e8:	f36f 00c5 	bfc	r0, #3, #3
   239ec:	f363 108f 	bfi	r0, r3, #6, #10
   239f0:	4a0b      	ldr	r2, [pc, #44]	; (23a20 <on_cmd_send_start+0x4c>)
   239f2:	4613      	mov	r3, r2
   239f4:	490b      	ldr	r1, [pc, #44]	; (23a24 <on_cmd_send_start+0x50>)
   239f6:	f018 fb27 	bl	3c048 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   239fa:	480b      	ldr	r0, [pc, #44]	; (23a28 <on_cmd_send_start+0x54>)
   239fc:	f017 fe54 	bl	3b6a8 <mode_get>
   23a00:	2802      	cmp	r0, #2
   23a02:	d004      	beq.n	23a0e <on_cmd_send_start+0x3a>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENDING);
   23a04:	2101      	movs	r1, #1
   23a06:	4808      	ldr	r0, [pc, #32]	; (23a28 <on_cmd_send_start+0x54>)
   23a08:	f017 fe77 	bl	3b6fa <state_set>
}
   23a0c:	bd08      	pop	{r3, pc}
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENDING);
   23a0e:	2105      	movs	r1, #5
   23a10:	4805      	ldr	r0, [pc, #20]	; (23a28 <on_cmd_send_start+0x54>)
   23a12:	f017 fe72 	bl	3b6fa <state_set>
   23a16:	e7f9      	b.n	23a0c <on_cmd_send_start+0x38>
   23a18:	00041228 	.word	0x00041228
   23a1c:	00041200 	.word	0x00041200
   23a20:	00041fb8 	.word	0x00041fb8
   23a24:	00041d1c 	.word	0x00041d1c
   23a28:	2000f5ec 	.word	0x2000f5ec

00023a2c <on_cmd_send_error>:
{
   23a2c:	b508      	push	{r3, lr}
   23a2e:	4b0b      	ldr	r3, [pc, #44]	; (23a5c <on_cmd_send_error+0x30>)
   23a30:	4a0b      	ldr	r2, [pc, #44]	; (23a60 <on_cmd_send_error+0x34>)
   23a32:	1a9b      	subs	r3, r3, r2
   23a34:	08db      	lsrs	r3, r3, #3
    LOG_ERR("%s", __func__);
   23a36:	f04f 0000 	mov.w	r0, #0
   23a3a:	2201      	movs	r2, #1
   23a3c:	f362 0002 	bfi	r0, r2, #0, #3
   23a40:	f36f 00c5 	bfc	r0, #3, #3
   23a44:	f363 108f 	bfi	r0, r3, #6, #10
   23a48:	4a06      	ldr	r2, [pc, #24]	; (23a64 <on_cmd_send_error+0x38>)
   23a4a:	4907      	ldr	r1, [pc, #28]	; (23a68 <on_cmd_send_error+0x3c>)
   23a4c:	f018 fafc 	bl	3c048 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_SEND);
   23a50:	210a      	movs	r1, #10
   23a52:	4806      	ldr	r0, [pc, #24]	; (23a6c <on_cmd_send_error+0x40>)
   23a54:	f017 fe51 	bl	3b6fa <state_set>
}
   23a58:	bd08      	pop	{r3, pc}
   23a5a:	bf00      	nop
   23a5c:	00041228 	.word	0x00041228
   23a60:	00041200 	.word	0x00041200
   23a64:	00041fe4 	.word	0x00041fe4
   23a68:	00044678 	.word	0x00044678
   23a6c:	2000f5ec 	.word	0x2000f5ec

00023a70 <on_cmd_send_complete>:
{
   23a70:	b508      	push	{r3, lr}
   23a72:	4b1a      	ldr	r3, [pc, #104]	; (23adc <on_cmd_send_complete+0x6c>)
   23a74:	4a1a      	ldr	r2, [pc, #104]	; (23ae0 <on_cmd_send_complete+0x70>)
   23a76:	1a9b      	subs	r3, r3, r2
   23a78:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   23a7a:	f04f 0000 	mov.w	r0, #0
   23a7e:	2204      	movs	r2, #4
   23a80:	f362 0002 	bfi	r0, r2, #0, #3
   23a84:	f36f 00c5 	bfc	r0, #3, #3
   23a88:	f363 108f 	bfi	r0, r3, #6, #10
   23a8c:	4a15      	ldr	r2, [pc, #84]	; (23ae4 <on_cmd_send_complete+0x74>)
   23a8e:	4613      	mov	r3, r2
   23a90:	4915      	ldr	r1, [pc, #84]	; (23ae8 <on_cmd_send_complete+0x78>)
   23a92:	f018 fad9 	bl	3c048 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   23a96:	4815      	ldr	r0, [pc, #84]	; (23aec <on_cmd_send_complete+0x7c>)
   23a98:	f017 fe06 	bl	3b6a8 <mode_get>
   23a9c:	2801      	cmp	r0, #1
   23a9e:	d012      	beq.n	23ac6 <on_cmd_send_complete+0x56>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   23aa0:	2802      	cmp	r0, #2
   23aa2:	d015      	beq.n	23ad0 <on_cmd_send_complete+0x60>
   23aa4:	4b0d      	ldr	r3, [pc, #52]	; (23adc <on_cmd_send_complete+0x6c>)
   23aa6:	4a0e      	ldr	r2, [pc, #56]	; (23ae0 <on_cmd_send_complete+0x70>)
   23aa8:	1a9b      	subs	r3, r3, r2
   23aaa:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Should not come here");
   23aac:	f04f 0000 	mov.w	r0, #0
   23ab0:	2201      	movs	r2, #1
   23ab2:	f362 0002 	bfi	r0, r2, #0, #3
   23ab6:	f36f 00c5 	bfc	r0, #3, #3
   23aba:	f363 108f 	bfi	r0, r3, #6, #10
   23abe:	490c      	ldr	r1, [pc, #48]	; (23af0 <on_cmd_send_complete+0x80>)
   23ac0:	f018 fac2 	bl	3c048 <log_string_sync>
}
   23ac4:	bd08      	pop	{r3, pc}
        state_set(&m_cmd_ctx, CMD_STATE_REQ_SENT);
   23ac6:	2102      	movs	r1, #2
   23ac8:	4808      	ldr	r0, [pc, #32]	; (23aec <on_cmd_send_complete+0x7c>)
   23aca:	f017 fe16 	bl	3b6fa <state_set>
   23ace:	e7f9      	b.n	23ac4 <on_cmd_send_complete+0x54>
        state_set(&m_cmd_ctx, CMD_STATE_RSP_SENT);
   23ad0:	2106      	movs	r1, #6
   23ad2:	4806      	ldr	r0, [pc, #24]	; (23aec <on_cmd_send_complete+0x7c>)
   23ad4:	f017 fe11 	bl	3b6fa <state_set>
   23ad8:	e7f4      	b.n	23ac4 <on_cmd_send_complete+0x54>
   23ada:	bf00      	nop
   23adc:	00041228 	.word	0x00041228
   23ae0:	00041200 	.word	0x00041200
   23ae4:	00041fcc 	.word	0x00041fcc
   23ae8:	00041d1c 	.word	0x00041d1c
   23aec:	2000f5ec 	.word	0x2000f5ec
   23af0:	00041d24 	.word	0x00041d24

00023af4 <on_uart_tx_empty>:
{
   23af4:	b510      	push	{r4, lr}
   23af6:	4604      	mov	r4, r0
   23af8:	4b0c      	ldr	r3, [pc, #48]	; (23b2c <on_uart_tx_empty+0x38>)
   23afa:	4a0d      	ldr	r2, [pc, #52]	; (23b30 <on_uart_tx_empty+0x3c>)
   23afc:	1a9b      	subs	r3, r3, r2
   23afe:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   23b00:	f04f 0000 	mov.w	r0, #0
   23b04:	2204      	movs	r2, #4
   23b06:	f362 0002 	bfi	r0, r2, #0, #3
   23b0a:	f36f 00c5 	bfc	r0, #3, #3
   23b0e:	f363 108f 	bfi	r0, r3, #6, #10
   23b12:	4a08      	ldr	r2, [pc, #32]	; (23b34 <on_uart_tx_empty+0x40>)
   23b14:	4613      	mov	r3, r2
   23b16:	4908      	ldr	r1, [pc, #32]	; (23b38 <on_uart_tx_empty+0x44>)
   23b18:	f018 fa96 	bl	3c048 <log_string_sync>
    if (event == 0) {
   23b1c:	b914      	cbnz	r4, 23b24 <on_uart_tx_empty+0x30>
        on_cmd_send_complete();
   23b1e:	f7ff ffa7 	bl	23a70 <on_cmd_send_complete>
}
   23b22:	bd10      	pop	{r4, pc}
        on_cmd_send_error();
   23b24:	f7ff ff82 	bl	23a2c <on_cmd_send_error>
}
   23b28:	e7fb      	b.n	23b22 <on_uart_tx_empty+0x2e>
   23b2a:	bf00      	nop
   23b2c:	00041228 	.word	0x00041228
   23b30:	00041200 	.word	0x00041200
   23b34:	0004209c 	.word	0x0004209c
   23b38:	00041d1c 	.word	0x00041d1c

00023b3c <on_cmd_receive_start>:
{
   23b3c:	b508      	push	{r3, lr}
   23b3e:	4b10      	ldr	r3, [pc, #64]	; (23b80 <on_cmd_receive_start+0x44>)
   23b40:	4a10      	ldr	r2, [pc, #64]	; (23b84 <on_cmd_receive_start+0x48>)
   23b42:	1a9b      	subs	r3, r3, r2
   23b44:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   23b46:	f04f 0000 	mov.w	r0, #0
   23b4a:	2204      	movs	r2, #4
   23b4c:	f362 0002 	bfi	r0, r2, #0, #3
   23b50:	f36f 00c5 	bfc	r0, #3, #3
   23b54:	f363 108f 	bfi	r0, r3, #6, #10
   23b58:	4a0b      	ldr	r2, [pc, #44]	; (23b88 <on_cmd_receive_start+0x4c>)
   23b5a:	4613      	mov	r3, r2
   23b5c:	490b      	ldr	r1, [pc, #44]	; (23b8c <on_cmd_receive_start+0x50>)
   23b5e:	f018 fa73 	bl	3c048 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   23b62:	480b      	ldr	r0, [pc, #44]	; (23b90 <on_cmd_receive_start+0x54>)
   23b64:	f017 fda0 	bl	3b6a8 <mode_get>
   23b68:	2801      	cmp	r0, #1
   23b6a:	d004      	beq.n	23b76 <on_cmd_receive_start+0x3a>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVING);
   23b6c:	2103      	movs	r1, #3
   23b6e:	4808      	ldr	r0, [pc, #32]	; (23b90 <on_cmd_receive_start+0x54>)
   23b70:	f017 fdc3 	bl	3b6fa <state_set>
}
   23b74:	bd08      	pop	{r3, pc}
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVING);
   23b76:	2107      	movs	r1, #7
   23b78:	4805      	ldr	r0, [pc, #20]	; (23b90 <on_cmd_receive_start+0x54>)
   23b7a:	f017 fdbe 	bl	3b6fa <state_set>
   23b7e:	e7f9      	b.n	23b74 <on_cmd_receive_start+0x38>
   23b80:	00041228 	.word	0x00041228
   23b84:	00041200 	.word	0x00041200
   23b88:	00041ff8 	.word	0x00041ff8
   23b8c:	00041d1c 	.word	0x00041d1c
   23b90:	2000f5ec 	.word	0x2000f5ec

00023b94 <on_cmd_receive_complete>:
{
   23b94:	b508      	push	{r3, lr}
   23b96:	4b1a      	ldr	r3, [pc, #104]	; (23c00 <on_cmd_receive_complete+0x6c>)
   23b98:	4a1a      	ldr	r2, [pc, #104]	; (23c04 <on_cmd_receive_complete+0x70>)
   23b9a:	1a9b      	subs	r3, r3, r2
   23b9c:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   23b9e:	f04f 0000 	mov.w	r0, #0
   23ba2:	2204      	movs	r2, #4
   23ba4:	f362 0002 	bfi	r0, r2, #0, #3
   23ba8:	f36f 00c5 	bfc	r0, #3, #3
   23bac:	f363 108f 	bfi	r0, r3, #6, #10
   23bb0:	4a15      	ldr	r2, [pc, #84]	; (23c08 <on_cmd_receive_complete+0x74>)
   23bb2:	4613      	mov	r3, r2
   23bb4:	4915      	ldr	r1, [pc, #84]	; (23c0c <on_cmd_receive_complete+0x78>)
   23bb6:	f018 fa47 	bl	3c048 <log_string_sync>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   23bba:	4815      	ldr	r0, [pc, #84]	; (23c10 <on_cmd_receive_complete+0x7c>)
   23bbc:	f017 fd74 	bl	3b6a8 <mode_get>
   23bc0:	2801      	cmp	r0, #1
   23bc2:	d012      	beq.n	23bea <on_cmd_receive_complete+0x56>
    else if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   23bc4:	2802      	cmp	r0, #2
   23bc6:	d015      	beq.n	23bf4 <on_cmd_receive_complete+0x60>
   23bc8:	4b0d      	ldr	r3, [pc, #52]	; (23c00 <on_cmd_receive_complete+0x6c>)
   23bca:	4a0e      	ldr	r2, [pc, #56]	; (23c04 <on_cmd_receive_complete+0x70>)
   23bcc:	1a9b      	subs	r3, r3, r2
   23bce:	08db      	lsrs	r3, r3, #3
        LOG_WRN("Should not come here");
   23bd0:	f04f 0000 	mov.w	r0, #0
   23bd4:	2202      	movs	r2, #2
   23bd6:	f362 0002 	bfi	r0, r2, #0, #3
   23bda:	f36f 00c5 	bfc	r0, #3, #3
   23bde:	f363 108f 	bfi	r0, r3, #6, #10
   23be2:	490c      	ldr	r1, [pc, #48]	; (23c14 <on_cmd_receive_complete+0x80>)
   23be4:	f018 fa30 	bl	3c048 <log_string_sync>
}
   23be8:	bd08      	pop	{r3, pc}
        state_set(&m_cmd_ctx, CMD_STATE_RSP_RECEIVED);
   23bea:	2108      	movs	r1, #8
   23bec:	4808      	ldr	r0, [pc, #32]	; (23c10 <on_cmd_receive_complete+0x7c>)
   23bee:	f017 fd84 	bl	3b6fa <state_set>
   23bf2:	e7f9      	b.n	23be8 <on_cmd_receive_complete+0x54>
        state_set(&m_cmd_ctx, CMD_STATE_REQ_RECEIVED);
   23bf4:	2104      	movs	r1, #4
   23bf6:	4806      	ldr	r0, [pc, #24]	; (23c10 <on_cmd_receive_complete+0x7c>)
   23bf8:	f017 fd7f 	bl	3b6fa <state_set>
   23bfc:	e7f4      	b.n	23be8 <on_cmd_receive_complete+0x54>
   23bfe:	bf00      	nop
   23c00:	00041228 	.word	0x00041228
   23c04:	00041200 	.word	0x00041200
   23c08:	00042010 	.word	0x00042010
   23c0c:	00041d1c 	.word	0x00041d1c
   23c10:	2000f5ec 	.word	0x2000f5ec
   23c14:	00041d24 	.word	0x00041d24

00023c18 <on_cmd_receive_error>:
{
   23c18:	b508      	push	{r3, lr}
   23c1a:	4b0b      	ldr	r3, [pc, #44]	; (23c48 <on_cmd_receive_error+0x30>)
   23c1c:	4a0b      	ldr	r2, [pc, #44]	; (23c4c <on_cmd_receive_error+0x34>)
   23c1e:	1a9b      	subs	r3, r3, r2
   23c20:	08db      	lsrs	r3, r3, #3
    LOG_ERR("%s", __func__);
   23c22:	f04f 0000 	mov.w	r0, #0
   23c26:	2201      	movs	r2, #1
   23c28:	f362 0002 	bfi	r0, r2, #0, #3
   23c2c:	f36f 00c5 	bfc	r0, #3, #3
   23c30:	f363 108f 	bfi	r0, r3, #6, #10
   23c34:	4a06      	ldr	r2, [pc, #24]	; (23c50 <on_cmd_receive_error+0x38>)
   23c36:	4907      	ldr	r1, [pc, #28]	; (23c54 <on_cmd_receive_error+0x3c>)
   23c38:	f018 fa06 	bl	3c048 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_ERR_RECEIVE);
   23c3c:	210b      	movs	r1, #11
   23c3e:	4806      	ldr	r0, [pc, #24]	; (23c58 <on_cmd_receive_error+0x40>)
   23c40:	f017 fd5b 	bl	3b6fa <state_set>
}
   23c44:	bd08      	pop	{r3, pc}
   23c46:	bf00      	nop
   23c48:	00041228 	.word	0x00041228
   23c4c:	00041200 	.word	0x00041200
   23c50:	00042028 	.word	0x00042028
   23c54:	00044678 	.word	0x00044678
   23c58:	2000f5ec 	.word	0x2000f5ec

00023c5c <buff_alloc>:
{
   23c5c:	b570      	push	{r4, r5, r6, lr}
   23c5e:	460c      	mov	r4, r1
    __ASSERT_NO_MSG(p_pool != NULL);
   23c60:	4605      	mov	r5, r0
   23c62:	b128      	cbz	r0, 23c70 <buff_alloc+0x14>
    __ASSERT_NO_MSG(p_buff != NULL);
   23c64:	b17c      	cbz	r4, 23c86 <buff_alloc+0x2a>
    p_buff->p_data = p_pool;
   23c66:	6025      	str	r5, [r4, #0]
    p_buff->length = 0;
   23c68:	2300      	movs	r3, #0
   23c6a:	80a3      	strh	r3, [r4, #4]
    p_buff->offset = 0;
   23c6c:	80e3      	strh	r3, [r4, #6]
}
   23c6e:	bd70      	pop	{r4, r5, r6, pc}
    __ASSERT_NO_MSG(p_pool != NULL);
   23c70:	4e0a      	ldr	r6, [pc, #40]	; (23c9c <buff_alloc+0x40>)
   23c72:	2273      	movs	r2, #115	; 0x73
   23c74:	4631      	mov	r1, r6
   23c76:	480a      	ldr	r0, [pc, #40]	; (23ca0 <buff_alloc+0x44>)
   23c78:	f017 ff5e 	bl	3bb38 <printk>
   23c7c:	2173      	movs	r1, #115	; 0x73
   23c7e:	4630      	mov	r0, r6
   23c80:	f018 f9ae 	bl	3bfe0 <assert_post_action>
   23c84:	e7ee      	b.n	23c64 <buff_alloc+0x8>
    __ASSERT_NO_MSG(p_buff != NULL);
   23c86:	4e05      	ldr	r6, [pc, #20]	; (23c9c <buff_alloc+0x40>)
   23c88:	2274      	movs	r2, #116	; 0x74
   23c8a:	4631      	mov	r1, r6
   23c8c:	4804      	ldr	r0, [pc, #16]	; (23ca0 <buff_alloc+0x44>)
   23c8e:	f017 ff53 	bl	3bb38 <printk>
   23c92:	2174      	movs	r1, #116	; 0x74
   23c94:	4630      	mov	r0, r6
   23c96:	f018 f9a3 	bl	3bfe0 <assert_post_action>
   23c9a:	e7e4      	b.n	23c66 <buff_alloc+0xa>
   23c9c:	00041d3c 	.word	0x00041d3c
   23ca0:	00041c84 	.word	0x00041c84

00023ca4 <cmd_to_buff>:
{
   23ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ca8:	460f      	mov	r7, r1
    __ASSERT_NO_MSG(p_cmd != NULL);
   23caa:	4680      	mov	r8, r0
   23cac:	b3a0      	cbz	r0, 23d18 <cmd_to_buff+0x74>
    buff_alloc(m_tx_pool, p_buff);
   23cae:	4639      	mov	r1, r7
   23cb0:	4821      	ldr	r0, [pc, #132]	; (23d38 <cmd_to_buff+0x94>)
   23cb2:	f7ff ffd3 	bl	23c5c <buff_alloc>
    p_packet = p_buff->p_data;
   23cb6:	683e      	ldr	r6, [r7, #0]
    pdu_len = p_cmd->length;
   23cb8:	f8b8 5008 	ldrh.w	r5, [r8, #8]
        (p_cmd->type == CMD_TYPE_RESPONSE) ?
   23cbc:	f898 3000 	ldrb.w	r3, [r8]
    p_packet[CMD_FMT_OFFSET_START] =
   23cc0:	2b01      	cmp	r3, #1
   23cc2:	d036      	beq.n	23d32 <cmd_to_buff+0x8e>
   23cc4:	2359      	movs	r3, #89	; 0x59
   23cc6:	46b1      	mov	r9, r6
   23cc8:	f809 3b01 	strb.w	r3, [r9], #1
    uint16_encode(CMD_FMT_SIZE_OPCODE + pdu_len,
   23ccc:	b22c      	sxth	r4, r5
   23cce:	1c63      	adds	r3, r4, #1
	dst[0] = val;
   23cd0:	7073      	strb	r3, [r6, #1]
	dst[1] = val >> 8;
   23cd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   23cd6:	70b3      	strb	r3, [r6, #2]
    p_packet[CMD_FMT_OFFSET_OPCODE] = p_cmd->op_code;
   23cd8:	f898 3001 	ldrb.w	r3, [r8, #1]
   23cdc:	70f3      	strb	r3, [r6, #3]
    if (pdu_len > 0 && p_cmd->p_data != NULL) {
   23cde:	b135      	cbz	r5, 23cee <cmd_to_buff+0x4a>
   23ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   23ce4:	b119      	cbz	r1, 23cee <cmd_to_buff+0x4a>
   23ce6:	462a      	mov	r2, r5
   23ce8:	1d30      	adds	r0, r6, #4
   23cea:	f01c f909 	bl	3ff00 <memcpy>
    crc16 = crc16_compute(&p_packet[CMD_FMT_OFFSET_LEN],
   23cee:	1cea      	adds	r2, r5, #3
   23cf0:	4649      	mov	r1, r9
   23cf2:	2000      	movs	r0, #0
   23cf4:	f017 fe70 	bl	3b9d8 <crc16_itu_t>
    uint16_encode(crc16, &p_packet[CMD_FMT_OFFSET_PDU + pdu_len]);
   23cf8:	3504      	adds	r5, #4
   23cfa:	1973      	adds	r3, r6, r5
	dst[0] = val;
   23cfc:	5570      	strb	r0, [r6, r5]
	dst[1] = val >> 8;
   23cfe:	0a00      	lsrs	r0, r0, #8
   23d00:	7058      	strb	r0, [r3, #1]
    pkt_len = CMD_FMT_OFFSET_PDU + pdu_len + CMD_FMT_SIZE_CRC;
   23d02:	3406      	adds	r4, #6
   23d04:	b2a4      	uxth	r4, r4
    pkt_len = MIN(pkt_len, CMD_PACKET_LENGTH);
   23d06:	f5b4 6f82 	cmp.w	r4, #1040	; 0x410
   23d0a:	bf28      	it	cs
   23d0c:	f44f 6482 	movcs.w	r4, #1040	; 0x410
    p_buff->length = pkt_len;
   23d10:	80bc      	strh	r4, [r7, #4]
}
   23d12:	2000      	movs	r0, #0
   23d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __ASSERT_NO_MSG(p_cmd != NULL);
   23d18:	4c08      	ldr	r4, [pc, #32]	; (23d3c <cmd_to_buff+0x98>)
   23d1a:	f240 225f 	movw	r2, #607	; 0x25f
   23d1e:	4621      	mov	r1, r4
   23d20:	4807      	ldr	r0, [pc, #28]	; (23d40 <cmd_to_buff+0x9c>)
   23d22:	f017 ff09 	bl	3bb38 <printk>
   23d26:	f240 215f 	movw	r1, #607	; 0x25f
   23d2a:	4620      	mov	r0, r4
   23d2c:	f018 f958 	bl	3bfe0 <assert_post_action>
   23d30:	e7bd      	b.n	23cae <cmd_to_buff+0xa>
    p_packet[CMD_FMT_OFFSET_START] =
   23d32:	2351      	movs	r3, #81	; 0x51
   23d34:	e7c7      	b.n	23cc6 <cmd_to_buff+0x22>
   23d36:	bf00      	nop
   23d38:	2000fa20 	.word	0x2000fa20
   23d3c:	00041d3c 	.word	0x00041d3c
   23d40:	00041c84 	.word	0x00041c84

00023d44 <cmd_send>:
{
   23d44:	b538      	push	{r3, r4, r5, lr}
   23d46:	4605      	mov	r5, r0
    on_cmd_send_start();
   23d48:	f7ff fe44 	bl	239d4 <on_cmd_send_start>
    cmd_to_buff(p_cmd, &m_tx_buff);
   23d4c:	4c04      	ldr	r4, [pc, #16]	; (23d60 <cmd_send+0x1c>)
   23d4e:	4621      	mov	r1, r4
   23d50:	4628      	mov	r0, r5
   23d52:	f7ff ffa7 	bl	23ca4 <cmd_to_buff>
    return app_uart_send(m_tx_buff.p_data, m_tx_buff.length);
   23d56:	88a1      	ldrh	r1, [r4, #4]
   23d58:	6820      	ldr	r0, [r4, #0]
   23d5a:	f7ff fc65 	bl	23628 <app_uart_send>
}
   23d5e:	bd38      	pop	{r3, r4, r5, pc}
   23d60:	2000fa18 	.word	0x2000fa18

00023d64 <app_cmd_respond>:
{
   23d64:	b570      	push	{r4, r5, r6, lr}
   23d66:	b084      	sub	sp, #16
   23d68:	4606      	mov	r6, r0
   23d6a:	460d      	mov	r5, r1
    if (state_get(&m_cmd_ctx) != CMD_STATE_REQ_RECEIVED &&
   23d6c:	4824      	ldr	r0, [pc, #144]	; (23e00 <app_cmd_respond+0x9c>)
   23d6e:	f017 fc9d 	bl	3b6ac <state_get>
   23d72:	2804      	cmp	r0, #4
   23d74:	d001      	beq.n	23d7a <app_cmd_respond+0x16>
   23d76:	2802      	cmp	r0, #2
   23d78:	d117      	bne.n	23daa <app_cmd_respond+0x46>
    err_code = op_code_get(&m_rx_buff, &op_code);
   23d7a:	f10d 010f 	add.w	r1, sp, #15
   23d7e:	4821      	ldr	r0, [pc, #132]	; (23e04 <app_cmd_respond+0xa0>)
   23d80:	f017 fc96 	bl	3b6b0 <op_code_get>
    if (err_code != 0) {
   23d84:	4604      	mov	r4, r0
   23d86:	bb40      	cbnz	r0, 23dda <app_cmd_respond+0x76>
    cmd.type = CMD_TYPE_RESPONSE;
   23d88:	2301      	movs	r3, #1
   23d8a:	f88d 3000 	strb.w	r3, [sp]
    cmd.op_code = op_code;
   23d8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   23d92:	f88d 3001 	strb.w	r3, [sp, #1]
    cmd.p_data = p_data;
   23d96:	9601      	str	r6, [sp, #4]
    cmd.length = length;
   23d98:	f8ad 5008 	strh.w	r5, [sp, #8]
    return cmd_send(&cmd);
   23d9c:	4668      	mov	r0, sp
   23d9e:	f7ff ffd1 	bl	23d44 <cmd_send>
   23da2:	4604      	mov	r4, r0
}
   23da4:	4620      	mov	r0, r4
   23da6:	b004      	add	sp, #16
   23da8:	bd70      	pop	{r4, r5, r6, pc}
   23daa:	4b17      	ldr	r3, [pc, #92]	; (23e08 <app_cmd_respond+0xa4>)
   23dac:	4a17      	ldr	r2, [pc, #92]	; (23e0c <app_cmd_respond+0xa8>)
   23dae:	1a9b      	subs	r3, r3, r2
   23db0:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Invalid state for response:%d", state_get(&m_cmd_ctx));
   23db2:	f04f 0400 	mov.w	r4, #0
   23db6:	2201      	movs	r2, #1
   23db8:	f362 0402 	bfi	r4, r2, #0, #3
   23dbc:	f36f 04c5 	bfc	r4, #3, #3
   23dc0:	f363 148f 	bfi	r4, r3, #6, #10
   23dc4:	480e      	ldr	r0, [pc, #56]	; (23e00 <app_cmd_respond+0x9c>)
   23dc6:	f017 fc71 	bl	3b6ac <state_get>
   23dca:	4602      	mov	r2, r0
   23dcc:	4910      	ldr	r1, [pc, #64]	; (23e10 <app_cmd_respond+0xac>)
   23dce:	4620      	mov	r0, r4
   23dd0:	f018 f93a 	bl	3c048 <log_string_sync>
        return -1;
   23dd4:	f04f 34ff 	mov.w	r4, #4294967295
   23dd8:	e7e4      	b.n	23da4 <app_cmd_respond+0x40>
   23dda:	4b0b      	ldr	r3, [pc, #44]	; (23e08 <app_cmd_respond+0xa4>)
   23ddc:	4a0b      	ldr	r2, [pc, #44]	; (23e0c <app_cmd_respond+0xa8>)
   23dde:	1a9b      	subs	r3, r3, r2
   23de0:	08db      	lsrs	r3, r3, #3
        LOG_ERR("rx buffer is reset too early");
   23de2:	f04f 0000 	mov.w	r0, #0
   23de6:	2201      	movs	r2, #1
   23de8:	f362 0002 	bfi	r0, r2, #0, #3
   23dec:	f36f 00c5 	bfc	r0, #3, #3
   23df0:	f363 108f 	bfi	r0, r3, #6, #10
   23df4:	4907      	ldr	r1, [pc, #28]	; (23e14 <app_cmd_respond+0xb0>)
   23df6:	f018 f927 	bl	3c048 <log_string_sync>
        on_cmd_send_error();
   23dfa:	f7ff fe17 	bl	23a2c <on_cmd_send_error>
        return err_code;
   23dfe:	e7d1      	b.n	23da4 <app_cmd_respond+0x40>
   23e00:	2000f5ec 	.word	0x2000f5ec
   23e04:	2000f600 	.word	0x2000f600
   23e08:	00041228 	.word	0x00041228
   23e0c:	00041200 	.word	0x00041200
   23e10:	00041d50 	.word	0x00041d50
   23e14:	00041d70 	.word	0x00041d70

00023e18 <format_check>:
{
   23e18:	b538      	push	{r3, r4, r5, lr}
    uint8_t* p_data = p_buff->p_data;
   23e1a:	6805      	ldr	r5, [r0, #0]
    uint16_t length = p_buff->length;
   23e1c:	8880      	ldrh	r0, [r0, #4]
    if (mode == CMD_MODE_HOST &&
   23e1e:	2a01      	cmp	r2, #1
   23e20:	d01e      	beq.n	23e60 <format_check+0x48>
    else if (mode == CMD_MODE_SLAVE &&
   23e22:	2a02      	cmp	r2, #2
   23e24:	d032      	beq.n	23e8c <format_check+0x74>
	return ((uint16_t)src[1] << 8) | src[0];
   23e26:	78ac      	ldrb	r4, [r5, #2]
   23e28:	786b      	ldrb	r3, [r5, #1]
   23e2a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   23e2e:	b21b      	sxth	r3, r3
        CMD_FMT_OFFSET_OPCODE + CMD_FMT_SIZE_CRC;
   23e30:	1d5c      	adds	r4, r3, #5
    cmd_len = uint16_decode(&p_data[CMD_FMT_OFFSET_LEN]) +
   23e32:	b2a4      	uxth	r4, r4
    if (length != cmd_len) {
   23e34:	4284      	cmp	r4, r0
   23e36:	d13f      	bne.n	23eb8 <format_check+0xa0>
    if (mode == CMD_MODE_HOST &&
   23e38:	2a01      	cmp	r2, #1
   23e3a:	d102      	bne.n	23e42 <format_check+0x2a>
        p_data[CMD_FMT_OFFSET_OPCODE] != op_code) {
   23e3c:	78ea      	ldrb	r2, [r5, #3]
    if (mode == CMD_MODE_HOST &&
   23e3e:	428a      	cmp	r2, r1
   23e40:	d14d      	bne.n	23ede <format_check+0xc6>
    cmd_crc = uint16_decode(&p_data[cmd_len - CMD_FMT_SIZE_CRC]);
   23e42:	3c02      	subs	r4, #2
   23e44:	192a      	adds	r2, r5, r4
   23e46:	7850      	ldrb	r0, [r2, #1]
   23e48:	5d2a      	ldrb	r2, [r5, r4]
        cmd_len - CMD_FMT_SIZE_START - CMD_FMT_SIZE_CRC,
   23e4a:	1c99      	adds	r1, r3, #2
    crc_ok = crc16_check(&p_data[CMD_FMT_OFFSET_LEN],
   23e4c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   23e50:	b289      	uxth	r1, r1
   23e52:	1c68      	adds	r0, r5, #1
   23e54:	f017 fc5a 	bl	3b70c <crc16_check>
    if (!crc_ok) {
   23e58:	2800      	cmp	r0, #0
   23e5a:	d053      	beq.n	23f04 <format_check+0xec>
    return 0;
   23e5c:	2000      	movs	r0, #0
}
   23e5e:	bd38      	pop	{r3, r4, r5, pc}
        p_data[CMD_FMT_OFFSET_START] != CMD_FMT_START_RSP) {
   23e60:	782b      	ldrb	r3, [r5, #0]
    if (mode == CMD_MODE_HOST &&
   23e62:	2b51      	cmp	r3, #81	; 0x51
   23e64:	d0dd      	beq.n	23e22 <format_check+0xa>
   23e66:	4b30      	ldr	r3, [pc, #192]	; (23f28 <format_check+0x110>)
   23e68:	4a30      	ldr	r2, [pc, #192]	; (23f2c <format_check+0x114>)
   23e6a:	1a9b      	subs	r3, r3, r2
   23e6c:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Invalid cmd format: start(host)");
   23e6e:	f04f 0000 	mov.w	r0, #0
   23e72:	2201      	movs	r2, #1
   23e74:	f362 0002 	bfi	r0, r2, #0, #3
   23e78:	f36f 00c5 	bfc	r0, #3, #3
   23e7c:	f363 108f 	bfi	r0, r3, #6, #10
   23e80:	492b      	ldr	r1, [pc, #172]	; (23f30 <format_check+0x118>)
   23e82:	f018 f8e1 	bl	3c048 <log_string_sync>
        return -1;
   23e86:	f04f 30ff 	mov.w	r0, #4294967295
   23e8a:	e7e8      	b.n	23e5e <format_check+0x46>
        p_data[CMD_FMT_OFFSET_START] != CMD_FMT_START_REQ) {
   23e8c:	782b      	ldrb	r3, [r5, #0]
    else if (mode == CMD_MODE_SLAVE &&
   23e8e:	2b59      	cmp	r3, #89	; 0x59
   23e90:	d0c9      	beq.n	23e26 <format_check+0xe>
   23e92:	4b25      	ldr	r3, [pc, #148]	; (23f28 <format_check+0x110>)
   23e94:	4a25      	ldr	r2, [pc, #148]	; (23f2c <format_check+0x114>)
   23e96:	1a9b      	subs	r3, r3, r2
   23e98:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Invalid cmd format: start(slave)");
   23e9a:	f04f 0000 	mov.w	r0, #0
   23e9e:	2201      	movs	r2, #1
   23ea0:	f362 0002 	bfi	r0, r2, #0, #3
   23ea4:	f36f 00c5 	bfc	r0, #3, #3
   23ea8:	f363 108f 	bfi	r0, r3, #6, #10
   23eac:	4921      	ldr	r1, [pc, #132]	; (23f34 <format_check+0x11c>)
   23eae:	f018 f8cb 	bl	3c048 <log_string_sync>
        return -1;
   23eb2:	f04f 30ff 	mov.w	r0, #4294967295
   23eb6:	e7d2      	b.n	23e5e <format_check+0x46>
   23eb8:	4b1b      	ldr	r3, [pc, #108]	; (23f28 <format_check+0x110>)
   23eba:	4a1c      	ldr	r2, [pc, #112]	; (23f2c <format_check+0x114>)
   23ebc:	1a9b      	subs	r3, r3, r2
   23ebe:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Invalid cmd format: length");
   23ec0:	f04f 0000 	mov.w	r0, #0
   23ec4:	2201      	movs	r2, #1
   23ec6:	f362 0002 	bfi	r0, r2, #0, #3
   23eca:	f36f 00c5 	bfc	r0, #3, #3
   23ece:	f363 108f 	bfi	r0, r3, #6, #10
   23ed2:	4919      	ldr	r1, [pc, #100]	; (23f38 <format_check+0x120>)
   23ed4:	f018 f8b8 	bl	3c048 <log_string_sync>
        return -1;
   23ed8:	f04f 30ff 	mov.w	r0, #4294967295
   23edc:	e7bf      	b.n	23e5e <format_check+0x46>
   23ede:	4b12      	ldr	r3, [pc, #72]	; (23f28 <format_check+0x110>)
   23ee0:	4a12      	ldr	r2, [pc, #72]	; (23f2c <format_check+0x114>)
   23ee2:	1a9b      	subs	r3, r3, r2
   23ee4:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Invalid cmd format: op code");
   23ee6:	f04f 0000 	mov.w	r0, #0
   23eea:	2201      	movs	r2, #1
   23eec:	f362 0002 	bfi	r0, r2, #0, #3
   23ef0:	f36f 00c5 	bfc	r0, #3, #3
   23ef4:	f363 108f 	bfi	r0, r3, #6, #10
   23ef8:	4910      	ldr	r1, [pc, #64]	; (23f3c <format_check+0x124>)
   23efa:	f018 f8a5 	bl	3c048 <log_string_sync>
        return -1;
   23efe:	f04f 30ff 	mov.w	r0, #4294967295
   23f02:	e7ac      	b.n	23e5e <format_check+0x46>
   23f04:	4b08      	ldr	r3, [pc, #32]	; (23f28 <format_check+0x110>)
   23f06:	4a09      	ldr	r2, [pc, #36]	; (23f2c <format_check+0x114>)
   23f08:	1a9b      	subs	r3, r3, r2
   23f0a:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Invalid cmd format: crc");
   23f0c:	2201      	movs	r2, #1
   23f0e:	f362 0002 	bfi	r0, r2, #0, #3
   23f12:	f36f 00c5 	bfc	r0, #3, #3
   23f16:	f363 108f 	bfi	r0, r3, #6, #10
   23f1a:	4909      	ldr	r1, [pc, #36]	; (23f40 <format_check+0x128>)
   23f1c:	f018 f894 	bl	3c048 <log_string_sync>
        return -1;
   23f20:	f04f 30ff 	mov.w	r0, #4294967295
   23f24:	e79b      	b.n	23e5e <format_check+0x46>
   23f26:	bf00      	nop
   23f28:	00041228 	.word	0x00041228
   23f2c:	00041200 	.word	0x00041200
   23f30:	00041d90 	.word	0x00041d90
   23f34:	00041db0 	.word	0x00041db0
   23f38:	00041dd4 	.word	0x00041dd4
   23f3c:	00041df0 	.word	0x00041df0
   23f40:	00041e0c 	.word	0x00041e0c

00023f44 <rsp_cb_raw_data>:
    return 0;
}

/**@brief Callback function for mtu_get response. */
static void rsp_cb_raw_data(uint8_t* p_rsp, uint16_t rsp_len)
{
   23f44:	b538      	push	{r3, r4, r5, lr}
   23f46:	4605      	mov	r5, r0
   23f48:	460c      	mov	r4, r1
   23f4a:	4b15      	ldr	r3, [pc, #84]	; (23fa0 <rsp_cb_raw_data+0x5c>)
   23f4c:	4a15      	ldr	r2, [pc, #84]	; (23fa4 <rsp_cb_raw_data+0x60>)
   23f4e:	1a9b      	subs	r3, r3, r2
   23f50:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   23f52:	f04f 0000 	mov.w	r0, #0
   23f56:	2204      	movs	r2, #4
   23f58:	f362 0002 	bfi	r0, r2, #0, #3
   23f5c:	f36f 00c5 	bfc	r0, #3, #3
   23f60:	f363 108f 	bfi	r0, r3, #6, #10
   23f64:	4a10      	ldr	r2, [pc, #64]	; (23fa8 <rsp_cb_raw_data+0x64>)
   23f66:	4613      	mov	r3, r2
   23f68:	4910      	ldr	r1, [pc, #64]	; (23fac <rsp_cb_raw_data+0x68>)
   23f6a:	f018 f86d 	bl	3c048 <log_string_sync>

    if (rsp_len > 0) {
   23f6e:	b904      	cbnz	r4, 23f72 <rsp_cb_raw_data+0x2e>
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
    }
}
   23f70:	bd38      	pop	{r3, r4, r5, pc}
   23f72:	4b0b      	ldr	r3, [pc, #44]	; (23fa0 <rsp_cb_raw_data+0x5c>)
   23f74:	4a0b      	ldr	r2, [pc, #44]	; (23fa4 <rsp_cb_raw_data+0x60>)
   23f76:	1a9b      	subs	r3, r3, r2
   23f78:	08db      	lsrs	r3, r3, #3
        LOG_HEXDUMP_INF(p_rsp, MIN(rsp_len, 8), "raw data:");
   23f7a:	f04f 0000 	mov.w	r0, #0
   23f7e:	2203      	movs	r2, #3
   23f80:	f362 0002 	bfi	r0, r2, #0, #3
   23f84:	f36f 00c5 	bfc	r0, #3, #3
   23f88:	f363 108f 	bfi	r0, r3, #6, #10
   23f8c:	4623      	mov	r3, r4
   23f8e:	2c08      	cmp	r4, #8
   23f90:	bf28      	it	cs
   23f92:	2308      	movcs	r3, #8
   23f94:	462a      	mov	r2, r5
   23f96:	4906      	ldr	r1, [pc, #24]	; (23fb0 <rsp_cb_raw_data+0x6c>)
   23f98:	f002 f9b4 	bl	26304 <log_hexdump_sync>
}
   23f9c:	e7e8      	b.n	23f70 <rsp_cb_raw_data+0x2c>
   23f9e:	bf00      	nop
   23fa0:	00041228 	.word	0x00041228
   23fa4:	00041200 	.word	0x00041200
   23fa8:	000420d8 	.word	0x000420d8
   23fac:	00041d1c 	.word	0x00041d1c
   23fb0:	00041e24 	.word	0x00041e24

00023fb4 <on_uart_rx_ready>:
{
   23fb4:	b570      	push	{r4, r5, r6, lr}
   23fb6:	b082      	sub	sp, #8
   23fb8:	4605      	mov	r5, r0
   23fba:	460c      	mov	r4, r1
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   23fbc:	4873      	ldr	r0, [pc, #460]	; (2418c <on_uart_rx_ready+0x1d8>)
   23fbe:	f017 fb73 	bl	3b6a8 <mode_get>
   23fc2:	2801      	cmp	r0, #1
   23fc4:	d02a      	beq.n	2401c <on_uart_rx_ready+0x68>
    if (mode_get(&m_cmd_ctx) == CMD_MODE_SLAVE) {
   23fc6:	2802      	cmp	r0, #2
   23fc8:	d103      	bne.n	23fd2 <on_uart_rx_ready+0x1e>
        if (m_cmd_ctx.state != CMD_STATE_REQ_RECEIVING) {
   23fca:	4b70      	ldr	r3, [pc, #448]	; (2418c <on_uart_rx_ready+0x1d8>)
   23fcc:	785b      	ldrb	r3, [r3, #1]
   23fce:	2b03      	cmp	r3, #3
   23fd0:	d13b      	bne.n	2404a <on_uart_rx_ready+0x96>
   23fd2:	4b6f      	ldr	r3, [pc, #444]	; (24190 <on_uart_rx_ready+0x1dc>)
   23fd4:	4a6f      	ldr	r2, [pc, #444]	; (24194 <on_uart_rx_ready+0x1e0>)
   23fd6:	1a9b      	subs	r3, r3, r2
   23fd8:	08db      	lsrs	r3, r3, #3
    LOG_INF("Length Rec: %hd",length);
   23fda:	f04f 0000 	mov.w	r0, #0
   23fde:	2203      	movs	r2, #3
   23fe0:	f362 0002 	bfi	r0, r2, #0, #3
   23fe4:	f36f 00c5 	bfc	r0, #3, #3
   23fe8:	f363 108f 	bfi	r0, r3, #6, #10
   23fec:	4622      	mov	r2, r4
   23fee:	496a      	ldr	r1, [pc, #424]	; (24198 <on_uart_rx_ready+0x1e4>)
   23ff0:	f018 f82a 	bl	3c048 <log_string_sync>
    if (!rx_started) {
   23ff4:	4b69      	ldr	r3, [pc, #420]	; (2419c <on_uart_rx_ready+0x1e8>)
   23ff6:	781b      	ldrb	r3, [r3, #0]
   23ff8:	2b00      	cmp	r3, #0
   23ffa:	d037      	beq.n	2406c <on_uart_rx_ready+0xb8>
        m_rx_buff.length += length;
   23ffc:	4b68      	ldr	r3, [pc, #416]	; (241a0 <on_uart_rx_ready+0x1ec>)
   23ffe:	8899      	ldrh	r1, [r3, #4]
   24000:	440c      	add	r4, r1
   24002:	809c      	strh	r4, [r3, #4]
    if (cmd_len == 0) {
   24004:	4b67      	ldr	r3, [pc, #412]	; (241a4 <on_uart_rx_ready+0x1f0>)
   24006:	881b      	ldrh	r3, [r3, #0]
   24008:	2b00      	cmp	r3, #0
   2400a:	d043      	beq.n	24094 <on_uart_rx_ready+0xe0>
    if (m_rx_buff.length < cmd_len) {
   2400c:	4b64      	ldr	r3, [pc, #400]	; (241a0 <on_uart_rx_ready+0x1ec>)
   2400e:	889b      	ldrh	r3, [r3, #4]
   24010:	4a64      	ldr	r2, [pc, #400]	; (241a4 <on_uart_rx_ready+0x1f0>)
   24012:	8812      	ldrh	r2, [r2, #0]
   24014:	4293      	cmp	r3, r2
   24016:	d25e      	bcs.n	240d6 <on_uart_rx_ready+0x122>
}
   24018:	b002      	add	sp, #8
   2401a:	bd70      	pop	{r4, r5, r6, pc}
        if (m_cmd_ctx.state != CMD_STATE_REQ_SENT &&
   2401c:	4b5b      	ldr	r3, [pc, #364]	; (2418c <on_uart_rx_ready+0x1d8>)
   2401e:	785b      	ldrb	r3, [r3, #1]
   24020:	2b02      	cmp	r3, #2
   24022:	d0d0      	beq.n	23fc6 <on_uart_rx_ready+0x12>
   24024:	2b07      	cmp	r3, #7
   24026:	d0ce      	beq.n	23fc6 <on_uart_rx_ready+0x12>
   24028:	4b59      	ldr	r3, [pc, #356]	; (24190 <on_uart_rx_ready+0x1dc>)
   2402a:	4a5a      	ldr	r2, [pc, #360]	; (24194 <on_uart_rx_ready+0x1e0>)
   2402c:	1a9b      	subs	r3, r3, r2
   2402e:	08db      	lsrs	r3, r3, #3
            LOG_WRN("Invalid state for rx(host)");
   24030:	f04f 0000 	mov.w	r0, #0
   24034:	2202      	movs	r2, #2
   24036:	f362 0002 	bfi	r0, r2, #0, #3
   2403a:	f36f 00c5 	bfc	r0, #3, #3
   2403e:	f363 108f 	bfi	r0, r3, #6, #10
   24042:	4959      	ldr	r1, [pc, #356]	; (241a8 <on_uart_rx_ready+0x1f4>)
   24044:	f018 f800 	bl	3c048 <log_string_sync>
            return;
   24048:	e7e6      	b.n	24018 <on_uart_rx_ready+0x64>
   2404a:	4b51      	ldr	r3, [pc, #324]	; (24190 <on_uart_rx_ready+0x1dc>)
   2404c:	4a51      	ldr	r2, [pc, #324]	; (24194 <on_uart_rx_ready+0x1e0>)
   2404e:	1a9b      	subs	r3, r3, r2
   24050:	08db      	lsrs	r3, r3, #3
            LOG_WRN("Invalid state for rx(slave)");
   24052:	f04f 0000 	mov.w	r0, #0
   24056:	2202      	movs	r2, #2
   24058:	f362 0002 	bfi	r0, r2, #0, #3
   2405c:	f36f 00c5 	bfc	r0, #3, #3
   24060:	f363 108f 	bfi	r0, r3, #6, #10
   24064:	4951      	ldr	r1, [pc, #324]	; (241ac <on_uart_rx_ready+0x1f8>)
   24066:	f017 ffef 	bl	3c048 <log_string_sync>
            return;
   2406a:	e7d5      	b.n	24018 <on_uart_rx_ready+0x64>
        rx_started = true;
   2406c:	4b4b      	ldr	r3, [pc, #300]	; (2419c <on_uart_rx_ready+0x1e8>)
   2406e:	2201      	movs	r2, #1
   24070:	701a      	strb	r2, [r3, #0]
        buff_alloc(m_rx_pool, &m_rx_buff);
   24072:	4e4b      	ldr	r6, [pc, #300]	; (241a0 <on_uart_rx_ready+0x1ec>)
   24074:	4631      	mov	r1, r6
   24076:	484e      	ldr	r0, [pc, #312]	; (241b0 <on_uart_rx_ready+0x1fc>)
   24078:	f7ff fdf0 	bl	23c5c <buff_alloc>
   2407c:	4622      	mov	r2, r4
   2407e:	4629      	mov	r1, r5
   24080:	6830      	ldr	r0, [r6, #0]
   24082:	f01b ff3d 	bl	3ff00 <memcpy>
        m_rx_buff.length = length;
   24086:	80b4      	strh	r4, [r6, #4]
        cmd_len = 0;
   24088:	4b46      	ldr	r3, [pc, #280]	; (241a4 <on_uart_rx_ready+0x1f0>)
   2408a:	2200      	movs	r2, #0
   2408c:	801a      	strh	r2, [r3, #0]
        on_cmd_receive_start();
   2408e:	f7ff fd55 	bl	23b3c <on_cmd_receive_start>
   24092:	e7b7      	b.n	24004 <on_uart_rx_ready+0x50>
        cmd_len = cmd_len_get(&m_rx_buff);
   24094:	4842      	ldr	r0, [pc, #264]	; (241a0 <on_uart_rx_ready+0x1ec>)
   24096:	f7ff fc0d 	bl	238b4 <cmd_len_get>
   2409a:	4602      	mov	r2, r0
   2409c:	4b41      	ldr	r3, [pc, #260]	; (241a4 <on_uart_rx_ready+0x1f0>)
   2409e:	8018      	strh	r0, [r3, #0]
        if (cmd_len > CMD_PACKET_LENGTH) {
   240a0:	f5b0 6f82 	cmp.w	r0, #1040	; 0x410
   240a4:	d804      	bhi.n	240b0 <on_uart_rx_ready+0xfc>
        if (cmd_len == 0) {
   240a6:	4b3f      	ldr	r3, [pc, #252]	; (241a4 <on_uart_rx_ready+0x1f0>)
   240a8:	881b      	ldrh	r3, [r3, #0]
   240aa:	2b00      	cmp	r3, #0
   240ac:	d1ae      	bne.n	2400c <on_uart_rx_ready+0x58>
   240ae:	e7b3      	b.n	24018 <on_uart_rx_ready+0x64>
   240b0:	4b37      	ldr	r3, [pc, #220]	; (24190 <on_uart_rx_ready+0x1dc>)
   240b2:	4938      	ldr	r1, [pc, #224]	; (24194 <on_uart_rx_ready+0x1e0>)
   240b4:	1a5b      	subs	r3, r3, r1
   240b6:	08db      	lsrs	r3, r3, #3
            LOG_ERR("CMD_Len Larger than Packet Length %d",cmd_len);
   240b8:	f04f 0000 	mov.w	r0, #0
   240bc:	2101      	movs	r1, #1
   240be:	f361 0002 	bfi	r0, r1, #0, #3
   240c2:	f36f 00c5 	bfc	r0, #3, #3
   240c6:	f363 108f 	bfi	r0, r3, #6, #10
   240ca:	493a      	ldr	r1, [pc, #232]	; (241b4 <on_uart_rx_ready+0x200>)
   240cc:	f017 ffbc 	bl	3c048 <log_string_sync>
            on_cmd_receive_error();
   240d0:	f7ff fda2 	bl	23c18 <on_cmd_receive_error>
   240d4:	e7e7      	b.n	240a6 <on_uart_rx_ready+0xf2>
   240d6:	4a2e      	ldr	r2, [pc, #184]	; (24190 <on_uart_rx_ready+0x1dc>)
   240d8:	492e      	ldr	r1, [pc, #184]	; (24194 <on_uart_rx_ready+0x1e0>)
   240da:	1a52      	subs	r2, r2, r1
   240dc:	08d2      	lsrs	r2, r2, #3
    LOG_HEXDUMP_DBG(m_rx_buff.p_data, m_rx_buff.length, "RX");
   240de:	f04f 0000 	mov.w	r0, #0
   240e2:	2104      	movs	r1, #4
   240e4:	f361 0002 	bfi	r0, r1, #0, #3
   240e8:	f36f 00c5 	bfc	r0, #3, #3
   240ec:	f362 108f 	bfi	r0, r2, #6, #10
   240f0:	4a2b      	ldr	r2, [pc, #172]	; (241a0 <on_uart_rx_ready+0x1ec>)
   240f2:	6812      	ldr	r2, [r2, #0]
   240f4:	4930      	ldr	r1, [pc, #192]	; (241b8 <on_uart_rx_ready+0x204>)
   240f6:	f002 f905 	bl	26304 <log_hexdump_sync>
    req_op_code = 0;
   240fa:	2300      	movs	r3, #0
   240fc:	f88d 3007 	strb.w	r3, [sp, #7]
    if (mode_get(&m_cmd_ctx) == CMD_MODE_HOST) {
   24100:	4822      	ldr	r0, [pc, #136]	; (2418c <on_uart_rx_ready+0x1d8>)
   24102:	f017 fad1 	bl	3b6a8 <mode_get>
   24106:	2801      	cmp	r0, #1
   24108:	d024      	beq.n	24154 <on_uart_rx_ready+0x1a0>
    err_code = format_check(&m_rx_buff, req_op_code, mode_get(&m_cmd_ctx));
   2410a:	f89d 4007 	ldrb.w	r4, [sp, #7]
   2410e:	481f      	ldr	r0, [pc, #124]	; (2418c <on_uart_rx_ready+0x1d8>)
   24110:	f017 faca 	bl	3b6a8 <mode_get>
   24114:	4602      	mov	r2, r0
   24116:	4621      	mov	r1, r4
   24118:	4821      	ldr	r0, [pc, #132]	; (241a0 <on_uart_rx_ready+0x1ec>)
   2411a:	f7ff fe7d 	bl	23e18 <format_check>
    if (err_code == 0) {
   2411e:	4602      	mov	r2, r0
   24120:	b1f0      	cbz	r0, 24160 <on_uart_rx_ready+0x1ac>
    else if (err_code == -1) {
   24122:	f1b0 3fff 	cmp.w	r0, #4294967295
   24126:	d01e      	beq.n	24166 <on_uart_rx_ready+0x1b2>
   24128:	4b19      	ldr	r3, [pc, #100]	; (24190 <on_uart_rx_ready+0x1dc>)
   2412a:	491a      	ldr	r1, [pc, #104]	; (24194 <on_uart_rx_ready+0x1e0>)
   2412c:	1a5b      	subs	r3, r3, r1
   2412e:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Should not come here(%d)", err_code);
   24130:	f04f 0000 	mov.w	r0, #0
   24134:	2101      	movs	r1, #1
   24136:	f361 0002 	bfi	r0, r1, #0, #3
   2413a:	f36f 00c5 	bfc	r0, #3, #3
   2413e:	f363 108f 	bfi	r0, r3, #6, #10
   24142:	491e      	ldr	r1, [pc, #120]	; (241bc <on_uart_rx_ready+0x208>)
   24144:	f017 ff80 	bl	3c048 <log_string_sync>
        on_cmd_receive_error();
   24148:	f7ff fd66 	bl	23c18 <on_cmd_receive_error>
    rx_started = false;
   2414c:	4b13      	ldr	r3, [pc, #76]	; (2419c <on_uart_rx_ready+0x1e8>)
   2414e:	2200      	movs	r2, #0
   24150:	701a      	strb	r2, [r3, #0]
   24152:	e761      	b.n	24018 <on_uart_rx_ready+0x64>
        op_code_get(&m_tx_buff, &req_op_code);
   24154:	f10d 0107 	add.w	r1, sp, #7
   24158:	4819      	ldr	r0, [pc, #100]	; (241c0 <on_uart_rx_ready+0x20c>)
   2415a:	f017 faa9 	bl	3b6b0 <op_code_get>
   2415e:	e7d4      	b.n	2410a <on_uart_rx_ready+0x156>
        on_cmd_receive_complete();
   24160:	f7ff fd18 	bl	23b94 <on_cmd_receive_complete>
   24164:	e7f2      	b.n	2414c <on_uart_rx_ready+0x198>
   24166:	4b0a      	ldr	r3, [pc, #40]	; (24190 <on_uart_rx_ready+0x1dc>)
   24168:	4a0a      	ldr	r2, [pc, #40]	; (24194 <on_uart_rx_ready+0x1e0>)
   2416a:	1a9b      	subs	r3, r3, r2
   2416c:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Command has Invald Format");
   2416e:	f04f 0000 	mov.w	r0, #0
   24172:	2201      	movs	r2, #1
   24174:	f362 0002 	bfi	r0, r2, #0, #3
   24178:	f36f 00c5 	bfc	r0, #3, #3
   2417c:	f363 108f 	bfi	r0, r3, #6, #10
   24180:	4910      	ldr	r1, [pc, #64]	; (241c4 <on_uart_rx_ready+0x210>)
   24182:	f017 ff61 	bl	3c048 <log_string_sync>
        on_cmd_receive_error();
   24186:	f7ff fd47 	bl	23c18 <on_cmd_receive_error>
   2418a:	e7df      	b.n	2414c <on_uart_rx_ready+0x198>
   2418c:	2000f5ec 	.word	0x2000f5ec
   24190:	00041228 	.word	0x00041228
   24194:	00041200 	.word	0x00041200
   24198:	00041e68 	.word	0x00041e68
   2419c:	20010df5 	.word	0x20010df5
   241a0:	2000f600 	.word	0x2000f600
   241a4:	20010de0 	.word	0x20010de0
   241a8:	00041e30 	.word	0x00041e30
   241ac:	00041e4c 	.word	0x00041e4c
   241b0:	2000f608 	.word	0x2000f608
   241b4:	00041e78 	.word	0x00041e78
   241b8:	00041ea0 	.word	0x00041ea0
   241bc:	00041ec0 	.word	0x00041ec0
   241c0:	2000fa18 	.word	0x2000fa18
   241c4:	00041ea4 	.word	0x00041ea4

000241c8 <req_cb_raw_data>:
{
   241c8:	b570      	push	{r4, r5, r6, lr}
   241ca:	4606      	mov	r6, r0
   241cc:	460c      	mov	r4, r1
   241ce:	4615      	mov	r5, r2
   241d0:	4b18      	ldr	r3, [pc, #96]	; (24234 <req_cb_raw_data+0x6c>)
   241d2:	4a19      	ldr	r2, [pc, #100]	; (24238 <req_cb_raw_data+0x70>)
   241d4:	1a9b      	subs	r3, r3, r2
   241d6:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   241d8:	f04f 0000 	mov.w	r0, #0
   241dc:	2204      	movs	r2, #4
   241de:	f362 0002 	bfi	r0, r2, #0, #3
   241e2:	f36f 00c5 	bfc	r0, #3, #3
   241e6:	f363 108f 	bfi	r0, r3, #6, #10
   241ea:	4a14      	ldr	r2, [pc, #80]	; (2423c <req_cb_raw_data+0x74>)
   241ec:	4613      	mov	r3, r2
   241ee:	4914      	ldr	r1, [pc, #80]	; (24240 <req_cb_raw_data+0x78>)
   241f0:	f017 ff2a 	bl	3c048 <log_string_sync>
    if (req_len > 0) {
   241f4:	b944      	cbnz	r4, 24208 <req_cb_raw_data+0x40>
    respond(rsp, strlen(rsp));
   241f6:	4c13      	ldr	r4, [pc, #76]	; (24244 <req_cb_raw_data+0x7c>)
   241f8:	4620      	mov	r0, r4
   241fa:	f7fd f99f 	bl	2153c <strlen>
   241fe:	b281      	uxth	r1, r0
   24200:	4620      	mov	r0, r4
   24202:	47a8      	blx	r5
}
   24204:	2000      	movs	r0, #0
   24206:	bd70      	pop	{r4, r5, r6, pc}
   24208:	4b0a      	ldr	r3, [pc, #40]	; (24234 <req_cb_raw_data+0x6c>)
   2420a:	4a0b      	ldr	r2, [pc, #44]	; (24238 <req_cb_raw_data+0x70>)
   2420c:	1a9b      	subs	r3, r3, r2
   2420e:	08db      	lsrs	r3, r3, #3
        LOG_HEXDUMP_INF(p_req, MIN(req_len, 8), "raw data:");
   24210:	f04f 0000 	mov.w	r0, #0
   24214:	2203      	movs	r2, #3
   24216:	f362 0002 	bfi	r0, r2, #0, #3
   2421a:	f36f 00c5 	bfc	r0, #3, #3
   2421e:	f363 108f 	bfi	r0, r3, #6, #10
   24222:	4623      	mov	r3, r4
   24224:	2c08      	cmp	r4, #8
   24226:	bf28      	it	cs
   24228:	2308      	movcs	r3, #8
   2422a:	4632      	mov	r2, r6
   2422c:	4906      	ldr	r1, [pc, #24]	; (24248 <req_cb_raw_data+0x80>)
   2422e:	f002 f869 	bl	26304 <log_hexdump_sync>
   24232:	e7e0      	b.n	241f6 <req_cb_raw_data+0x2e>
   24234:	00041228 	.word	0x00041228
   24238:	00041200 	.word	0x00041200
   2423c:	000420c8 	.word	0x000420c8
   24240:	00041d1c 	.word	0x00041d1c
   24244:	00041edc 	.word	0x00041edc
   24248:	00041e24 	.word	0x00041e24

0002424c <req_cb_ping>:
{
   2424c:	b538      	push	{r3, r4, r5, lr}
   2424e:	4614      	mov	r4, r2
   24250:	4b0c      	ldr	r3, [pc, #48]	; (24284 <req_cb_ping+0x38>)
   24252:	4a0d      	ldr	r2, [pc, #52]	; (24288 <req_cb_ping+0x3c>)
   24254:	1a9b      	subs	r3, r3, r2
   24256:	08db      	lsrs	r3, r3, #3
    LOG_INF("%s", __func__);
   24258:	f04f 0000 	mov.w	r0, #0
   2425c:	2203      	movs	r2, #3
   2425e:	f362 0002 	bfi	r0, r2, #0, #3
   24262:	f36f 00c5 	bfc	r0, #3, #3
   24266:	f363 108f 	bfi	r0, r3, #6, #10
   2426a:	4a08      	ldr	r2, [pc, #32]	; (2428c <req_cb_ping+0x40>)
   2426c:	4908      	ldr	r1, [pc, #32]	; (24290 <req_cb_ping+0x44>)
   2426e:	f017 feeb 	bl	3c048 <log_string_sync>
    respond(rsp, strlen(rsp));
   24272:	4d08      	ldr	r5, [pc, #32]	; (24294 <req_cb_ping+0x48>)
   24274:	4628      	mov	r0, r5
   24276:	f7fd f961 	bl	2153c <strlen>
   2427a:	b281      	uxth	r1, r0
   2427c:	4628      	mov	r0, r5
   2427e:	47a0      	blx	r4
}
   24280:	2000      	movs	r0, #0
   24282:	bd38      	pop	{r3, r4, r5, pc}
   24284:	00041228 	.word	0x00041228
   24288:	00041200 	.word	0x00041200
   2428c:	000420b0 	.word	0x000420b0
   24290:	00044678 	.word	0x00044678
   24294:	00041edc 	.word	0x00041edc

00024298 <cmd_cb_cnt>:
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
   24298:	2000      	movs	r0, #0
   2429a:	2813      	cmp	r0, #19
   2429c:	dc07      	bgt.n	242ae <cmd_cb_cnt+0x16>
        if (m_cb_list[i].op_code == 0) {
   2429e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   242a2:	0093      	lsls	r3, r2, #2
   242a4:	4a03      	ldr	r2, [pc, #12]	; (242b4 <cmd_cb_cnt+0x1c>)
   242a6:	5cd3      	ldrb	r3, [r2, r3]
   242a8:	b113      	cbz	r3, 242b0 <cmd_cb_cnt+0x18>
    for (int i = 0; i < CMD_CB_LIST_LEN; i++) {
   242aa:	3001      	adds	r0, #1
   242ac:	e7f5      	b.n	2429a <cmd_cb_cnt+0x2>
    return CMD_CB_LIST_LEN;
   242ae:	2014      	movs	r0, #20
}
   242b0:	4770      	bx	lr
   242b2:	bf00      	nop
   242b4:	2000f4fc 	.word	0x2000f4fc

000242b8 <cmd_cb_get>:
{
   242b8:	b570      	push	{r4, r5, r6, lr}
   242ba:	4606      	mov	r6, r0
   242bc:	460d      	mov	r5, r1
    count = cmd_cb_cnt();
   242be:	f7ff ffeb 	bl	24298 <cmd_cb_cnt>
    for (int i = 0; i < count; i++) {
   242c2:	2300      	movs	r3, #0
   242c4:	4283      	cmp	r3, r0
   242c6:	da17      	bge.n	242f8 <cmd_cb_get+0x40>
        if (m_cb_list[i].op_code == op_code) {
   242c8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   242cc:	4c0d      	ldr	r4, [pc, #52]	; (24304 <cmd_cb_get+0x4c>)
   242ce:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
   242d2:	42b2      	cmp	r2, r6
   242d4:	d001      	beq.n	242da <cmd_cb_get+0x22>
    for (int i = 0; i < count; i++) {
   242d6:	3301      	adds	r3, #1
   242d8:	e7f4      	b.n	242c4 <cmd_cb_get+0xc>
            if (p_cmd_cb != NULL) {
   242da:	b185      	cbz	r5, 242fe <cmd_cb_get+0x46>
                p_cmd_cb->proc_req = m_cb_list[i].proc_req;
   242dc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   242e0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   242e4:	6849      	ldr	r1, [r1, #4]
   242e6:	6069      	str	r1, [r5, #4]
                p_cmd_cb->proc_rsp = m_cb_list[i].proc_rsp;
   242e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   242ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   242f0:	689b      	ldr	r3, [r3, #8]
   242f2:	60ab      	str	r3, [r5, #8]
            rc = 0;
   242f4:	2000      	movs	r0, #0
   242f6:	e001      	b.n	242fc <cmd_cb_get+0x44>
    rc = -1;
   242f8:	f04f 30ff 	mov.w	r0, #4294967295
}
   242fc:	bd70      	pop	{r4, r5, r6, pc}
            rc = 0;
   242fe:	2000      	movs	r0, #0
    return rc;
   24300:	e7fc      	b.n	242fc <cmd_cb_get+0x44>
   24302:	bf00      	nop
   24304:	2000f4fc 	.word	0x2000f4fc

00024308 <tmr_rsp_timeout_handler>:
{
   24308:	b500      	push	{lr}
   2430a:	b08b      	sub	sp, #44	; 0x2c
   2430c:	4b2f      	ldr	r3, [pc, #188]	; (243cc <tmr_rsp_timeout_handler+0xc4>)
   2430e:	4a30      	ldr	r2, [pc, #192]	; (243d0 <tmr_rsp_timeout_handler+0xc8>)
   24310:	1a9b      	subs	r3, r3, r2
   24312:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   24314:	f04f 0000 	mov.w	r0, #0
   24318:	2204      	movs	r2, #4
   2431a:	f362 0002 	bfi	r0, r2, #0, #3
   2431e:	f36f 00c5 	bfc	r0, #3, #3
   24322:	f363 108f 	bfi	r0, r3, #6, #10
   24326:	4a2b      	ldr	r2, [pc, #172]	; (243d4 <tmr_rsp_timeout_handler+0xcc>)
   24328:	4613      	mov	r3, r2
   2432a:	492b      	ldr	r1, [pc, #172]	; (243d8 <tmr_rsp_timeout_handler+0xd0>)
   2432c:	f017 fe8c 	bl	3c048 <log_string_sync>
    err_code = buff_to_cmd(&m_tx_buff, &cmd);
   24330:	a907      	add	r1, sp, #28
   24332:	482a      	ldr	r0, [pc, #168]	; (243dc <tmr_rsp_timeout_handler+0xd4>)
   24334:	f017 f9c9 	bl	3b6ca <buff_to_cmd>
    if (err_code != 0) {
   24338:	bb28      	cbnz	r0, 24386 <tmr_rsp_timeout_handler+0x7e>
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   2433a:	a904      	add	r1, sp, #16
   2433c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   24340:	f7ff ffba 	bl	242b8 <cmd_cb_get>
    if (err_code == 0) {
   24344:	bb80      	cbnz	r0, 243a8 <tmr_rsp_timeout_handler+0xa0>
        uint8_t p_rsp[] = CMD_RSP_TIMEOUT;
   24346:	f646 7374 	movw	r3, #28532	; 0x6f74
   2434a:	f8ad 3000 	strh.w	r3, [sp]
        if (cmd_cb.proc_rsp) {
   2434e:	9b06      	ldr	r3, [sp, #24]
   24350:	b113      	cbz	r3, 24358 <tmr_rsp_timeout_handler+0x50>
            cmd_cb.proc_rsp(p_rsp, sizeof(p_rsp));
   24352:	2102      	movs	r1, #2
   24354:	4668      	mov	r0, sp
   24356:	4798      	blx	r3
        event.op_code = cmd.op_code;
   24358:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2435c:	f88d 3004 	strb.w	r3, [sp, #4]
        event.p_data = p_rsp;
   24360:	f8cd d008 	str.w	sp, [sp, #8]
        event.length = sizeof(p_rsp);
   24364:	2302      	movs	r3, #2
   24366:	f8ad 300c 	strh.w	r3, [sp, #12]
        event.timeout = true;
   2436a:	2301      	movs	r3, #1
   2436c:	f88d 300e 	strb.w	r3, [sp, #14]
        m_event_cb(&event);
   24370:	4b1b      	ldr	r3, [pc, #108]	; (243e0 <tmr_rsp_timeout_handler+0xd8>)
   24372:	681b      	ldr	r3, [r3, #0]
   24374:	a801      	add	r0, sp, #4
   24376:	4798      	blx	r3
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   24378:	2100      	movs	r1, #0
   2437a:	481a      	ldr	r0, [pc, #104]	; (243e4 <tmr_rsp_timeout_handler+0xdc>)
   2437c:	f017 f9bd 	bl	3b6fa <state_set>
}
   24380:	b00b      	add	sp, #44	; 0x2c
   24382:	f85d fb04 	ldr.w	pc, [sp], #4
   24386:	4b11      	ldr	r3, [pc, #68]	; (243cc <tmr_rsp_timeout_handler+0xc4>)
   24388:	4a11      	ldr	r2, [pc, #68]	; (243d0 <tmr_rsp_timeout_handler+0xc8>)
   2438a:	1a9b      	subs	r3, r3, r2
   2438c:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Buffer error");
   2438e:	f04f 0000 	mov.w	r0, #0
   24392:	2201      	movs	r2, #1
   24394:	f362 0002 	bfi	r0, r2, #0, #3
   24398:	f36f 00c5 	bfc	r0, #3, #3
   2439c:	f363 108f 	bfi	r0, r3, #6, #10
   243a0:	4911      	ldr	r1, [pc, #68]	; (243e8 <tmr_rsp_timeout_handler+0xe0>)
   243a2:	f017 fe51 	bl	3c048 <log_string_sync>
        return;
   243a6:	e7eb      	b.n	24380 <tmr_rsp_timeout_handler+0x78>
   243a8:	4b08      	ldr	r3, [pc, #32]	; (243cc <tmr_rsp_timeout_handler+0xc4>)
   243aa:	4a09      	ldr	r2, [pc, #36]	; (243d0 <tmr_rsp_timeout_handler+0xc8>)
   243ac:	1a9b      	subs	r3, r3, r2
   243ae:	08db      	lsrs	r3, r3, #3
        LOG_ERR("op is unregisterd(wait rsp)");
   243b0:	f04f 0000 	mov.w	r0, #0
   243b4:	2201      	movs	r2, #1
   243b6:	f362 0002 	bfi	r0, r2, #0, #3
   243ba:	f36f 00c5 	bfc	r0, #3, #3
   243be:	f363 108f 	bfi	r0, r3, #6, #10
   243c2:	490a      	ldr	r1, [pc, #40]	; (243ec <tmr_rsp_timeout_handler+0xe4>)
   243c4:	f017 fe40 	bl	3c048 <log_string_sync>
   243c8:	e7d6      	b.n	24378 <tmr_rsp_timeout_handler+0x70>
   243ca:	bf00      	nop
   243cc:	00041228 	.word	0x00041228
   243d0:	00041200 	.word	0x00041200
   243d4:	00042040 	.word	0x00042040
   243d8:	00041d1c 	.word	0x00041d1c
   243dc:	2000fa18 	.word	0x2000fa18
   243e0:	2000f5fc 	.word	0x2000f5fc
   243e4:	2000f5ec 	.word	0x2000f5ec
   243e8:	00041ee0 	.word	0x00041ee0
   243ec:	00041ef0 	.word	0x00041ef0

000243f0 <wk_proc_rsp_handler>:
{
   243f0:	b500      	push	{lr}
   243f2:	b08b      	sub	sp, #44	; 0x2c
   243f4:	4b2f      	ldr	r3, [pc, #188]	; (244b4 <wk_proc_rsp_handler+0xc4>)
   243f6:	4a30      	ldr	r2, [pc, #192]	; (244b8 <wk_proc_rsp_handler+0xc8>)
   243f8:	1a9b      	subs	r3, r3, r2
   243fa:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   243fc:	f04f 0000 	mov.w	r0, #0
   24400:	2204      	movs	r2, #4
   24402:	f362 0002 	bfi	r0, r2, #0, #3
   24406:	f36f 00c5 	bfc	r0, #3, #3
   2440a:	f363 108f 	bfi	r0, r3, #6, #10
   2440e:	4a2b      	ldr	r2, [pc, #172]	; (244bc <wk_proc_rsp_handler+0xcc>)
   24410:	4613      	mov	r3, r2
   24412:	492b      	ldr	r1, [pc, #172]	; (244c0 <wk_proc_rsp_handler+0xd0>)
   24414:	f017 fe18 	bl	3c048 <log_string_sync>
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   24418:	2100      	movs	r1, #0
   2441a:	482a      	ldr	r0, [pc, #168]	; (244c4 <wk_proc_rsp_handler+0xd4>)
   2441c:	f017 f96d 	bl	3b6fa <state_set>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   24420:	a907      	add	r1, sp, #28
   24422:	4829      	ldr	r0, [pc, #164]	; (244c8 <wk_proc_rsp_handler+0xd8>)
   24424:	f017 f951 	bl	3b6ca <buff_to_cmd>
    if (err_code != 0) {
   24428:	b9f8      	cbnz	r0, 2446a <wk_proc_rsp_handler+0x7a>
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   2442a:	a904      	add	r1, sp, #16
   2442c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   24430:	f7ff ff42 	bl	242b8 <cmd_cb_get>
    if (err_code == 0) {
   24434:	bb50      	cbnz	r0, 2448c <wk_proc_rsp_handler+0x9c>
        if (cmd_cb.proc_rsp) {
   24436:	9b06      	ldr	r3, [sp, #24]
   24438:	b11b      	cbz	r3, 24442 <wk_proc_rsp_handler+0x52>
            cmd_cb.proc_rsp(cmd.p_data, cmd.length);
   2443a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   2443e:	9808      	ldr	r0, [sp, #32]
   24440:	4798      	blx	r3
        event.op_code = cmd.op_code;
   24442:	f89d 301d 	ldrb.w	r3, [sp, #29]
   24446:	f88d 3004 	strb.w	r3, [sp, #4]
        event.p_data = cmd.p_data;
   2444a:	9b08      	ldr	r3, [sp, #32]
   2444c:	9302      	str	r3, [sp, #8]
        event.length = cmd.length;
   2444e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   24452:	f8ad 300c 	strh.w	r3, [sp, #12]
        event.timeout = false;
   24456:	2300      	movs	r3, #0
   24458:	f88d 300e 	strb.w	r3, [sp, #14]
        m_event_cb(&event);
   2445c:	4b1b      	ldr	r3, [pc, #108]	; (244cc <wk_proc_rsp_handler+0xdc>)
   2445e:	681b      	ldr	r3, [r3, #0]
   24460:	a801      	add	r0, sp, #4
   24462:	4798      	blx	r3
}
   24464:	b00b      	add	sp, #44	; 0x2c
   24466:	f85d fb04 	ldr.w	pc, [sp], #4
   2446a:	4b12      	ldr	r3, [pc, #72]	; (244b4 <wk_proc_rsp_handler+0xc4>)
   2446c:	4a12      	ldr	r2, [pc, #72]	; (244b8 <wk_proc_rsp_handler+0xc8>)
   2446e:	1a9b      	subs	r3, r3, r2
   24470:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Buffer error");
   24472:	f04f 0000 	mov.w	r0, #0
   24476:	2201      	movs	r2, #1
   24478:	f362 0002 	bfi	r0, r2, #0, #3
   2447c:	f36f 00c5 	bfc	r0, #3, #3
   24480:	f363 108f 	bfi	r0, r3, #6, #10
   24484:	4912      	ldr	r1, [pc, #72]	; (244d0 <wk_proc_rsp_handler+0xe0>)
   24486:	f017 fddf 	bl	3c048 <log_string_sync>
        return;
   2448a:	e7eb      	b.n	24464 <wk_proc_rsp_handler+0x74>
   2448c:	4b09      	ldr	r3, [pc, #36]	; (244b4 <wk_proc_rsp_handler+0xc4>)
   2448e:	4a0a      	ldr	r2, [pc, #40]	; (244b8 <wk_proc_rsp_handler+0xc8>)
   24490:	1a9b      	subs	r3, r3, r2
   24492:	08db      	lsrs	r3, r3, #3
        LOG_ERR("op is unregisterd(proc rsp): %d", cmd.op_code);
   24494:	f04f 0000 	mov.w	r0, #0
   24498:	2201      	movs	r2, #1
   2449a:	f362 0002 	bfi	r0, r2, #0, #3
   2449e:	f36f 00c5 	bfc	r0, #3, #3
   244a2:	f363 108f 	bfi	r0, r3, #6, #10
   244a6:	f89d 201d 	ldrb.w	r2, [sp, #29]
   244aa:	490a      	ldr	r1, [pc, #40]	; (244d4 <wk_proc_rsp_handler+0xe4>)
   244ac:	f017 fdcc 	bl	3c048 <log_string_sync>
   244b0:	e7d8      	b.n	24464 <wk_proc_rsp_handler+0x74>
   244b2:	bf00      	nop
   244b4:	00041228 	.word	0x00041228
   244b8:	00041200 	.word	0x00041200
   244bc:	0004206c 	.word	0x0004206c
   244c0:	00041d1c 	.word	0x00041d1c
   244c4:	2000f5ec 	.word	0x2000f5ec
   244c8:	2000f600 	.word	0x2000f600
   244cc:	2000f5fc 	.word	0x2000f5fc
   244d0:	00041ee0 	.word	0x00041ee0
   244d4:	00041f0c 	.word	0x00041f0c

000244d8 <wk_proc_req_handler>:
{
   244d8:	b500      	push	{lr}
   244da:	b08b      	sub	sp, #44	; 0x2c
   244dc:	4b33      	ldr	r3, [pc, #204]	; (245ac <wk_proc_req_handler+0xd4>)
   244de:	4a34      	ldr	r2, [pc, #208]	; (245b0 <wk_proc_req_handler+0xd8>)
   244e0:	1a9b      	subs	r3, r3, r2
   244e2:	08db      	lsrs	r3, r3, #3
    LOG_DBG("%s", __func__);
   244e4:	f04f 0000 	mov.w	r0, #0
   244e8:	2204      	movs	r2, #4
   244ea:	f362 0002 	bfi	r0, r2, #0, #3
   244ee:	f36f 00c5 	bfc	r0, #3, #3
   244f2:	f363 108f 	bfi	r0, r3, #6, #10
   244f6:	4a2f      	ldr	r2, [pc, #188]	; (245b4 <wk_proc_req_handler+0xdc>)
   244f8:	4613      	mov	r3, r2
   244fa:	492f      	ldr	r1, [pc, #188]	; (245b8 <wk_proc_req_handler+0xe0>)
   244fc:	f017 fda4 	bl	3c048 <log_string_sync>
    err_code = buff_to_cmd(&m_rx_buff, &cmd);
   24500:	a907      	add	r1, sp, #28
   24502:	482e      	ldr	r0, [pc, #184]	; (245bc <wk_proc_req_handler+0xe4>)
   24504:	f017 f8e1 	bl	3b6ca <buff_to_cmd>
    if (err_code != 0) {
   24508:	bb00      	cbnz	r0, 2454c <wk_proc_req_handler+0x74>
    err_code = cmd_cb_get(cmd.op_code, &cmd_cb);
   2450a:	a904      	add	r1, sp, #16
   2450c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   24510:	f7ff fed2 	bl	242b8 <cmd_cb_get>
    if (err_code == 0) {
   24514:	bb80      	cbnz	r0, 24578 <wk_proc_req_handler+0xa0>
        if (cmd_cb.proc_req) {
   24516:	9b05      	ldr	r3, [sp, #20]
   24518:	b34b      	cbz	r3, 2456e <wk_proc_req_handler+0x96>
            cmd_cb.proc_req(cmd.p_data, cmd.length, app_cmd_respond);
   2451a:	4a29      	ldr	r2, [pc, #164]	; (245c0 <wk_proc_req_handler+0xe8>)
   2451c:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   24520:	9808      	ldr	r0, [sp, #32]
   24522:	4798      	blx	r3
        event.op_code = cmd.op_code;
   24524:	f89d 301d 	ldrb.w	r3, [sp, #29]
   24528:	f88d 3004 	strb.w	r3, [sp, #4]
        event.p_data = cmd.p_data;
   2452c:	9b08      	ldr	r3, [sp, #32]
   2452e:	9302      	str	r3, [sp, #8]
        event.length = cmd.length;
   24530:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   24534:	f8ad 300c 	strh.w	r3, [sp, #12]
        event.timeout = false;
   24538:	2300      	movs	r3, #0
   2453a:	f88d 300e 	strb.w	r3, [sp, #14]
        m_event_cb(&event);
   2453e:	4b21      	ldr	r3, [pc, #132]	; (245c4 <wk_proc_req_handler+0xec>)
   24540:	681b      	ldr	r3, [r3, #0]
   24542:	a801      	add	r0, sp, #4
   24544:	4798      	blx	r3
}
   24546:	b00b      	add	sp, #44	; 0x2c
   24548:	f85d fb04 	ldr.w	pc, [sp], #4
   2454c:	4b17      	ldr	r3, [pc, #92]	; (245ac <wk_proc_req_handler+0xd4>)
   2454e:	4a18      	ldr	r2, [pc, #96]	; (245b0 <wk_proc_req_handler+0xd8>)
   24550:	1a9b      	subs	r3, r3, r2
   24552:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Buffer error");
   24554:	f04f 0000 	mov.w	r0, #0
   24558:	2201      	movs	r2, #1
   2455a:	f362 0002 	bfi	r0, r2, #0, #3
   2455e:	f36f 00c5 	bfc	r0, #3, #3
   24562:	f363 108f 	bfi	r0, r3, #6, #10
   24566:	4918      	ldr	r1, [pc, #96]	; (245c8 <wk_proc_req_handler+0xf0>)
   24568:	f017 fd6e 	bl	3c048 <log_string_sync>
        return;
   2456c:	e7eb      	b.n	24546 <wk_proc_req_handler+0x6e>
            app_cmd_respond(NULL, 0);
   2456e:	2100      	movs	r1, #0
   24570:	4608      	mov	r0, r1
   24572:	f7ff fbf7 	bl	23d64 <app_cmd_respond>
   24576:	e7d5      	b.n	24524 <wk_proc_req_handler+0x4c>
   24578:	4b0c      	ldr	r3, [pc, #48]	; (245ac <wk_proc_req_handler+0xd4>)
   2457a:	4a0d      	ldr	r2, [pc, #52]	; (245b0 <wk_proc_req_handler+0xd8>)
   2457c:	1a9b      	subs	r3, r3, r2
   2457e:	08db      	lsrs	r3, r3, #3
        LOG_ERR("op is unregisterd(proc req)");
   24580:	f04f 0000 	mov.w	r0, #0
   24584:	2201      	movs	r2, #1
   24586:	f362 0002 	bfi	r0, r2, #0, #3
   2458a:	f36f 00c5 	bfc	r0, #3, #3
   2458e:	f363 108f 	bfi	r0, r3, #6, #10
   24592:	490e      	ldr	r1, [pc, #56]	; (245cc <wk_proc_req_handler+0xf4>)
   24594:	f017 fd58 	bl	3c048 <log_string_sync>
        uint8_t p_rsp[] = CMD_RSP_UNREG;
   24598:	f247 2375 	movw	r3, #29301	; 0x7275
   2459c:	f8ad 3000 	strh.w	r3, [sp]
        app_cmd_respond(p_rsp, sizeof(p_rsp));
   245a0:	2102      	movs	r1, #2
   245a2:	4668      	mov	r0, sp
   245a4:	f7ff fbde 	bl	23d64 <app_cmd_respond>
   245a8:	e7cd      	b.n	24546 <wk_proc_req_handler+0x6e>
   245aa:	bf00      	nop
   245ac:	00041228 	.word	0x00041228
   245b0:	00041200 	.word	0x00041200
   245b4:	00042058 	.word	0x00042058
   245b8:	00041d1c 	.word	0x00041d1c
   245bc:	2000f600 	.word	0x2000f600
   245c0:	00023d65 	.word	0x00023d65
   245c4:	2000f5fc 	.word	0x2000f5fc
   245c8:	00041ee0 	.word	0x00041ee0
   245cc:	00041f2c 	.word	0x00041f2c

000245d0 <app_cmd_add>:
{
   245d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   245d2:	b085      	sub	sp, #20
   245d4:	4605      	mov	r5, r0
   245d6:	460f      	mov	r7, r1
   245d8:	4616      	mov	r6, r2
    count = cmd_cb_cnt();
   245da:	f7ff fe5d 	bl	24298 <cmd_cb_cnt>
    if (count == CMD_CB_LIST_LEN) {
   245de:	2814      	cmp	r0, #20
   245e0:	d01c      	beq.n	2461c <app_cmd_add+0x4c>
   245e2:	4604      	mov	r4, r0
    if (cmd_cb_get(op_code, NULL) == 0) {
   245e4:	2100      	movs	r1, #0
   245e6:	4628      	mov	r0, r5
   245e8:	f7ff fe66 	bl	242b8 <cmd_cb_get>
   245ec:	b348      	cbz	r0, 24642 <app_cmd_add+0x72>
    memset(&callback, 0, sizeof(cmd_cb_t));
   245ee:	2300      	movs	r3, #0
   245f0:	f8ad 3005 	strh.w	r3, [sp, #5]
   245f4:	f88d 3007 	strb.w	r3, [sp, #7]
    callback.op_code = op_code;
   245f8:	f88d 5004 	strb.w	r5, [sp, #4]
    callback.proc_req = req_cb;
   245fc:	9702      	str	r7, [sp, #8]
    callback.proc_rsp = rsp_cb;
   245fe:	9603      	str	r6, [sp, #12]
    memcpy(&m_cb_list[count], &callback, sizeof(cmd_cb_t));
   24600:	4f19      	ldr	r7, [pc, #100]	; (24668 <app_cmd_add+0x98>)
   24602:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   24606:	eb07 0684 	add.w	r6, r7, r4, lsl #2
   2460a:	ad01      	add	r5, sp, #4
   2460c:	cd07      	ldmia	r5!, {r0, r1, r2}
   2460e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   24612:	6071      	str	r1, [r6, #4]
   24614:	60b2      	str	r2, [r6, #8]
    return 0;
   24616:	4618      	mov	r0, r3
}
   24618:	b005      	add	sp, #20
   2461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2461c:	4b13      	ldr	r3, [pc, #76]	; (2466c <app_cmd_add+0x9c>)
   2461e:	4a14      	ldr	r2, [pc, #80]	; (24670 <app_cmd_add+0xa0>)
   24620:	1a9b      	subs	r3, r3, r2
   24622:	08db      	lsrs	r3, r3, #3
        LOG_ERR("Cmd list is full");
   24624:	f04f 0000 	mov.w	r0, #0
   24628:	2201      	movs	r2, #1
   2462a:	f362 0002 	bfi	r0, r2, #0, #3
   2462e:	f36f 00c5 	bfc	r0, #3, #3
   24632:	f363 108f 	bfi	r0, r3, #6, #10
   24636:	490f      	ldr	r1, [pc, #60]	; (24674 <app_cmd_add+0xa4>)
   24638:	f017 fd06 	bl	3c048 <log_string_sync>
        return -1;
   2463c:	f04f 30ff 	mov.w	r0, #4294967295
   24640:	e7ea      	b.n	24618 <app_cmd_add+0x48>
   24642:	4b0a      	ldr	r3, [pc, #40]	; (2466c <app_cmd_add+0x9c>)
   24644:	4a0a      	ldr	r2, [pc, #40]	; (24670 <app_cmd_add+0xa0>)
   24646:	1a9b      	subs	r3, r3, r2
   24648:	08db      	lsrs	r3, r3, #3
        LOG_WRN("This op code is existed %x",op_code);
   2464a:	2202      	movs	r2, #2
   2464c:	f362 0002 	bfi	r0, r2, #0, #3
   24650:	f36f 00c5 	bfc	r0, #3, #3
   24654:	f363 108f 	bfi	r0, r3, #6, #10
   24658:	462a      	mov	r2, r5
   2465a:	4907      	ldr	r1, [pc, #28]	; (24678 <app_cmd_add+0xa8>)
   2465c:	f017 fcf4 	bl	3c048 <log_string_sync>
        return -2;
   24660:	f06f 0001 	mvn.w	r0, #1
   24664:	e7d8      	b.n	24618 <app_cmd_add+0x48>
   24666:	bf00      	nop
   24668:	2000f4fc 	.word	0x2000f4fc
   2466c:	00041228 	.word	0x00041228
   24670:	00041200 	.word	0x00041200
   24674:	00041f48 	.word	0x00041f48
   24678:	00041f5c 	.word	0x00041f5c

0002467c <app_cmd_request>:
{
   2467c:	b570      	push	{r4, r5, r6, lr}
   2467e:	b084      	sub	sp, #16
   24680:	4606      	mov	r6, r0
   24682:	460d      	mov	r5, r1
   24684:	4614      	mov	r4, r2
    if (mode_get(&m_cmd_ctx) != CMD_MODE_IDLE) {
   24686:	4815      	ldr	r0, [pc, #84]	; (246dc <app_cmd_request+0x60>)
   24688:	f017 f80e 	bl	3b6a8 <mode_get>
   2468c:	b980      	cbnz	r0, 246b0 <app_cmd_request+0x34>
    app_cmd_t cmd =
   2468e:	2300      	movs	r3, #0
   24690:	f88d 3004 	strb.w	r3, [sp, #4]
   24694:	f88d 6005 	strb.w	r6, [sp, #5]
   24698:	9502      	str	r5, [sp, #8]
   2469a:	f8ad 400c 	strh.w	r4, [sp, #12]
    mode_set(&m_cmd_ctx, CMD_MODE_HOST);
   2469e:	2101      	movs	r1, #1
   246a0:	480e      	ldr	r0, [pc, #56]	; (246dc <app_cmd_request+0x60>)
   246a2:	f016 fffc 	bl	3b69e <mode_set>
    return cmd_send(&cmd);
   246a6:	a801      	add	r0, sp, #4
   246a8:	f7ff fb4c 	bl	23d44 <cmd_send>
}
   246ac:	b004      	add	sp, #16
   246ae:	bd70      	pop	{r4, r5, r6, pc}
   246b0:	4b0b      	ldr	r3, [pc, #44]	; (246e0 <app_cmd_request+0x64>)
   246b2:	4a0c      	ldr	r2, [pc, #48]	; (246e4 <app_cmd_request+0x68>)
   246b4:	1a9b      	subs	r3, r3, r2
   246b6:	08db      	lsrs	r3, r3, #3
        LOG_ERR("%s, exit with %d", __func__, m_cmd_ctx.mode);
   246b8:	f04f 0000 	mov.w	r0, #0
   246bc:	2201      	movs	r2, #1
   246be:	f362 0002 	bfi	r0, r2, #0, #3
   246c2:	f36f 00c5 	bfc	r0, #3, #3
   246c6:	f363 108f 	bfi	r0, r3, #6, #10
   246ca:	4b04      	ldr	r3, [pc, #16]	; (246dc <app_cmd_request+0x60>)
   246cc:	781b      	ldrb	r3, [r3, #0]
   246ce:	4a06      	ldr	r2, [pc, #24]	; (246e8 <app_cmd_request+0x6c>)
   246d0:	4906      	ldr	r1, [pc, #24]	; (246ec <app_cmd_request+0x70>)
   246d2:	f017 fcb9 	bl	3c048 <log_string_sync>
        return -1;
   246d6:	f04f 30ff 	mov.w	r0, #4294967295
   246da:	e7e7      	b.n	246ac <app_cmd_request+0x30>
   246dc:	2000f5ec 	.word	0x2000f5ec
   246e0:	00041228 	.word	0x00041228
   246e4:	00041200 	.word	0x00041200
   246e8:	0004208c 	.word	0x0004208c
   246ec:	00041f78 	.word	0x00041f78

000246f0 <app_cmd_event_cb_register>:
    if (event_cb != NULL) {
   246f0:	b108      	cbz	r0, 246f6 <app_cmd_event_cb_register+0x6>
        m_event_cb = event_cb;
   246f2:	4a01      	ldr	r2, [pc, #4]	; (246f8 <app_cmd_event_cb_register+0x8>)
   246f4:	6010      	str	r0, [r2, #0]
}
   246f6:	4770      	bx	lr
   246f8:	2000f5fc 	.word	0x2000f5fc

000246fc <app_cmd_init>:
{
   246fc:	b570      	push	{r4, r5, r6, lr}
    rc = app_uart_init(p_device, m_rx_pool, CMD_PACKET_LENGTH);
   246fe:	f44f 6282 	mov.w	r2, #1040	; 0x410
   24702:	492e      	ldr	r1, [pc, #184]	; (247bc <app_cmd_init+0xc0>)
   24704:	f7ff f814 	bl	23730 <app_uart_init>
    if (rc != 0) {
   24708:	bb30      	cbnz	r0, 24758 <app_cmd_init+0x5c>
   2470a:	4606      	mov	r6, r0
    state_set(&m_cmd_ctx, CMD_STATE_IDLE);
   2470c:	4d2c      	ldr	r5, [pc, #176]	; (247c0 <app_cmd_init+0xc4>)
   2470e:	2100      	movs	r1, #0
   24710:	4628      	mov	r0, r5
   24712:	f016 fff2 	bl	3b6fa <state_set>
    memset(&m_cmd_ctx.cmd, 0, sizeof(app_cmd_t));
   24716:	2400      	movs	r4, #0
   24718:	606c      	str	r4, [r5, #4]
   2471a:	60ac      	str	r4, [r5, #8]
   2471c:	60ec      	str	r4, [r5, #12]
    memset(&m_rx_pool, 0, sizeof(m_rx_pool));
   2471e:	f44f 6582 	mov.w	r5, #1040	; 0x410
   24722:	462a      	mov	r2, r5
   24724:	4621      	mov	r1, r4
   24726:	4825      	ldr	r0, [pc, #148]	; (247bc <app_cmd_init+0xc0>)
   24728:	f01b fc0a 	bl	3ff40 <memset>
    memset(&m_tx_pool, 0, sizeof(m_tx_pool));
   2472c:	462a      	mov	r2, r5
   2472e:	4621      	mov	r1, r4
   24730:	4824      	ldr	r0, [pc, #144]	; (247c4 <app_cmd_init+0xc8>)
   24732:	f01b fc05 	bl	3ff40 <memset>
    memset(&m_rx_buff, 0, sizeof(buffer_t));
   24736:	4b24      	ldr	r3, [pc, #144]	; (247c8 <app_cmd_init+0xcc>)
   24738:	601c      	str	r4, [r3, #0]
   2473a:	605c      	str	r4, [r3, #4]
    memset(&m_tx_buff, 0, sizeof(buffer_t));
   2473c:	4b23      	ldr	r3, [pc, #140]	; (247cc <app_cmd_init+0xd0>)
   2473e:	601c      	str	r4, [r3, #0]
   24740:	605c      	str	r4, [r3, #4]
    app_uart_rx_cb_set(on_uart_rx_ready);
   24742:	4823      	ldr	r0, [pc, #140]	; (247d0 <app_cmd_init+0xd4>)
   24744:	f7ff f88e 	bl	23864 <app_uart_rx_cb_set>
    app_uart_tx_cb_set(on_uart_tx_empty);
   24748:	4822      	ldr	r0, [pc, #136]	; (247d4 <app_cmd_init+0xd8>)
   2474a:	f7ff f891 	bl	23870 <app_uart_tx_cb_set>
    if (!initialized) {
   2474e:	4b22      	ldr	r3, [pc, #136]	; (247d8 <app_cmd_init+0xdc>)
   24750:	781b      	ldrb	r3, [r3, #0]
   24752:	b1a3      	cbz	r3, 2477e <app_cmd_init+0x82>
}
   24754:	4630      	mov	r0, r6
   24756:	bd70      	pop	{r4, r5, r6, pc}
   24758:	4b20      	ldr	r3, [pc, #128]	; (247dc <app_cmd_init+0xe0>)
   2475a:	4a21      	ldr	r2, [pc, #132]	; (247e0 <app_cmd_init+0xe4>)
   2475c:	1a9b      	subs	r3, r3, r2
   2475e:	08db      	lsrs	r3, r3, #3
        LOG_ERR("UART device init failed");
   24760:	f04f 0000 	mov.w	r0, #0
   24764:	2201      	movs	r2, #1
   24766:	f362 0002 	bfi	r0, r2, #0, #3
   2476a:	f36f 00c5 	bfc	r0, #3, #3
   2476e:	f363 108f 	bfi	r0, r3, #6, #10
   24772:	491c      	ldr	r1, [pc, #112]	; (247e4 <app_cmd_init+0xe8>)
   24774:	f017 fc68 	bl	3c048 <log_string_sync>
        return -ENXIO;
   24778:	f06f 0605 	mvn.w	r6, #5
   2477c:	e7ea      	b.n	24754 <app_cmd_init+0x58>
        initialized = true;
   2477e:	4b16      	ldr	r3, [pc, #88]	; (247d8 <app_cmd_init+0xdc>)
   24780:	2201      	movs	r2, #1
   24782:	701a      	strb	r2, [r3, #0]
        m_event_cb = event_cb_dummy;
   24784:	4b18      	ldr	r3, [pc, #96]	; (247e8 <app_cmd_init+0xec>)
   24786:	4a19      	ldr	r2, [pc, #100]	; (247ec <app_cmd_init+0xf0>)
   24788:	601a      	str	r2, [r3, #0]
        memset(&m_cb_list, 0, sizeof(m_cb_list));
   2478a:	22f0      	movs	r2, #240	; 0xf0
   2478c:	4621      	mov	r1, r4
   2478e:	4818      	ldr	r0, [pc, #96]	; (247f0 <app_cmd_init+0xf4>)
   24790:	f01b fbd6 	bl	3ff40 <memset>
        k_work_init(&wk_proc_req, wk_proc_req_handler);
   24794:	4917      	ldr	r1, [pc, #92]	; (247f4 <app_cmd_init+0xf8>)
   24796:	4818      	ldr	r0, [pc, #96]	; (247f8 <app_cmd_init+0xfc>)
   24798:	f012 f974 	bl	36a84 <k_work_init>
        k_work_init(&wk_proc_rsp, wk_proc_rsp_handler);
   2479c:	4917      	ldr	r1, [pc, #92]	; (247fc <app_cmd_init+0x100>)
   2479e:	4818      	ldr	r0, [pc, #96]	; (24800 <app_cmd_init+0x104>)
   247a0:	f012 f970 	bl	36a84 <k_work_init>
        app_cmd_add(CMD_OP_PING, req_cb_ping, rsp_cb_ping);
   247a4:	4a17      	ldr	r2, [pc, #92]	; (24804 <app_cmd_init+0x108>)
   247a6:	4918      	ldr	r1, [pc, #96]	; (24808 <app_cmd_init+0x10c>)
   247a8:	2011      	movs	r0, #17
   247aa:	f7ff ff11 	bl	245d0 <app_cmd_add>
        app_cmd_add(CMD_OP_RAW_DATA, req_cb_raw_data, rsp_cb_raw_data);
   247ae:	4a17      	ldr	r2, [pc, #92]	; (2480c <app_cmd_init+0x110>)
   247b0:	4917      	ldr	r1, [pc, #92]	; (24810 <app_cmd_init+0x114>)
   247b2:	2012      	movs	r0, #18
   247b4:	f7ff ff0c 	bl	245d0 <app_cmd_add>
   247b8:	e7cc      	b.n	24754 <app_cmd_init+0x58>
   247ba:	bf00      	nop
   247bc:	2000f608 	.word	0x2000f608
   247c0:	2000f5ec 	.word	0x2000f5ec
   247c4:	2000fa20 	.word	0x2000fa20
   247c8:	2000f600 	.word	0x2000f600
   247cc:	2000fa18 	.word	0x2000fa18
   247d0:	00023fb5 	.word	0x00023fb5
   247d4:	00023af5 	.word	0x00023af5
   247d8:	20010df4 	.word	0x20010df4
   247dc:	00041228 	.word	0x00041228
   247e0:	00041200 	.word	0x00041200
   247e4:	00041f8c 	.word	0x00041f8c
   247e8:	2000f5fc 	.word	0x2000f5fc
   247ec:	0003b69d 	.word	0x0003b69d
   247f0:	2000f4fc 	.word	0x2000f4fc
   247f4:	000244d9 	.word	0x000244d9
   247f8:	2000fe30 	.word	0x2000fe30
   247fc:	000243f1 	.word	0x000243f1
   24800:	2000fe40 	.word	0x2000fe40
   24804:	0002387d 	.word	0x0002387d
   24808:	0002424d 	.word	0x0002424d
   2480c:	00023f45 	.word	0x00023f45
   24810:	000241c9 	.word	0x000241c9

00024814 <app_flash_get_availablesize>:
/**@brief Get Available Space for MCUBOOTSECONDARY Slot in Bytes
 *
 * @return >= 0: success
 * @return neg: error
 */
static uint32_t app_flash_get_availablesize(){
   24814:	b510      	push	{r4, lr}
   24816:	b082      	sub	sp, #8

	int rc;
	const struct flash_area* fa;
	uint32_t size;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   24818:	a901      	add	r1, sp, #4
   2481a:	2007      	movs	r0, #7
   2481c:	f002 fb5a 	bl	26ed4 <flash_area_open>
	if (rc) {
   24820:	4604      	mov	r4, r0
   24822:	b110      	cbz	r0, 2482a <app_flash_get_availablesize+0x16>
	size = fa->fa_size;

	flash_area_close(fa);
	LOG_INF("Available Size%x",size);
	return size;
}
   24824:	4620      	mov	r0, r4
   24826:	b002      	add	sp, #8
   24828:	bd10      	pop	{r4, pc}
	size = fa->fa_size;
   2482a:	9801      	ldr	r0, [sp, #4]
   2482c:	6884      	ldr	r4, [r0, #8]
	flash_area_close(fa);
   2482e:	f017 fe23 	bl	3c478 <flash_area_close>
   24832:	4b09      	ldr	r3, [pc, #36]	; (24858 <app_flash_get_availablesize+0x44>)
   24834:	4a09      	ldr	r2, [pc, #36]	; (2485c <app_flash_get_availablesize+0x48>)
   24836:	1a9b      	subs	r3, r3, r2
   24838:	08db      	lsrs	r3, r3, #3
	LOG_INF("Available Size%x",size);
   2483a:	f04f 0000 	mov.w	r0, #0
   2483e:	2203      	movs	r2, #3
   24840:	f362 0002 	bfi	r0, r2, #0, #3
   24844:	f36f 00c5 	bfc	r0, #3, #3
   24848:	f363 108f 	bfi	r0, r3, #6, #10
   2484c:	4622      	mov	r2, r4
   2484e:	4904      	ldr	r1, [pc, #16]	; (24860 <app_flash_get_availablesize+0x4c>)
   24850:	f017 fbfa 	bl	3c048 <log_string_sync>
	return size;
   24854:	e7e6      	b.n	24824 <app_flash_get_availablesize+0x10>
   24856:	bf00      	nop
   24858:	00041208 	.word	0x00041208
   2485c:	00041200 	.word	0x00041200
   24860:	000420e8 	.word	0x000420e8

00024864 <req_cb_flash_start>:
 *
 * @return 0 success
 * @return neg error
 */
static int req_cb_flash_start(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond)
{
   24864:	b508      	push	{r3, lr}
    LOG_DBG("%s", __func__);

    respond("ok", 2);
   24866:	2102      	movs	r1, #2
   24868:	4801      	ldr	r0, [pc, #4]	; (24870 <req_cb_flash_start+0xc>)
   2486a:	4790      	blx	r2

    return 0;
}
   2486c:	2000      	movs	r0, #0
   2486e:	bd08      	pop	{r3, pc}
   24870:	00041edc 	.word	0x00041edc

00024874 <req_cb_flash_done>:
 * @param[in] respond   Callback function of responding
 *
 * @return 0 success
 * @return neg error
 */
static int req_cb_flash_done(uint8_t* p_req, uint16_t req_len, cmd_respond_t respond){
   24874:	b508      	push	{r3, lr}
    LOG_DBG("%s", __func__);

    respond("ok", 2);
   24876:	2102      	movs	r1, #2
   24878:	4801      	ldr	r0, [pc, #4]	; (24880 <req_cb_flash_done+0xc>)
   2487a:	4790      	blx	r2

    return 0;
}
   2487c:	2000      	movs	r0, #0
   2487e:	bd08      	pop	{r3, pc}
   24880:	00041edc 	.word	0x00041edc

00024884 <req_cb_flash_crc>:
{
   24884:	b570      	push	{r4, r5, r6, lr}
   24886:	b082      	sub	sp, #8
   24888:	4616      	mov	r6, r2
   2488a:	78c3      	ldrb	r3, [r0, #3]
   2488c:	7884      	ldrb	r4, [r0, #2]
   2488e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   24892:	7842      	ldrb	r2, [r0, #1]
   24894:	7804      	ldrb	r4, [r0, #0]
   24896:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2489a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   2489e:	79c3      	ldrb	r3, [r0, #7]
   248a0:	7985      	ldrb	r5, [r0, #6]
   248a2:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   248a6:	7942      	ldrb	r2, [r0, #5]
   248a8:	7905      	ldrb	r5, [r0, #4]
   248aa:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   248ae:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   248b2:	4b18      	ldr	r3, [pc, #96]	; (24914 <req_cb_flash_crc+0x90>)
   248b4:	4a18      	ldr	r2, [pc, #96]	; (24918 <req_cb_flash_crc+0x94>)
   248b6:	1a9b      	subs	r3, r3, r2
   248b8:	08db      	lsrs	r3, r3, #3
    LOG_INF("crc offset: %x, length: %d", offset, length);
   248ba:	f04f 0000 	mov.w	r0, #0
   248be:	2203      	movs	r2, #3
   248c0:	f362 0002 	bfi	r0, r2, #0, #3
   248c4:	f36f 00c5 	bfc	r0, #3, #3
   248c8:	f363 108f 	bfi	r0, r3, #6, #10
   248cc:	462b      	mov	r3, r5
   248ce:	4622      	mov	r2, r4
   248d0:	4912      	ldr	r1, [pc, #72]	; (2491c <req_cb_flash_crc+0x98>)
   248d2:	f017 fbb9 	bl	3c048 <log_string_sync>
    rc = app_flash_crc(offset, length, &crc32);
   248d6:	466a      	mov	r2, sp
   248d8:	4629      	mov	r1, r5
   248da:	4620      	mov	r0, r4
   248dc:	f017 f830 	bl	3b940 <app_flash_crc>
    if (rc == 0) {
   248e0:	4604      	mov	r4, r0
   248e2:	b998      	cbnz	r0, 2490c <req_cb_flash_crc+0x88>
        sys_put_le32(crc32, p_rsp);
   248e4:	9b00      	ldr	r3, [sp, #0]
	dst[0] = val;
   248e6:	f88d 3004 	strb.w	r3, [sp, #4]
	dst[1] = val >> 8;
   248ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
   248ee:	f88d 2005 	strb.w	r2, [sp, #5]
	sys_put_le16(val >> 16, &dst[2]);
   248f2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   248f4:	f88d 2006 	strb.w	r2, [sp, #6]
	dst[1] = val >> 8;
   248f8:	0e1b      	lsrs	r3, r3, #24
   248fa:	f88d 3007 	strb.w	r3, [sp, #7]
        respond(p_rsp, rsp_len);
   248fe:	2104      	movs	r1, #4
   24900:	eb0d 0001 	add.w	r0, sp, r1
   24904:	47b0      	blx	r6
}
   24906:	4620      	mov	r0, r4
   24908:	b002      	add	sp, #8
   2490a:	bd70      	pop	{r4, r5, r6, pc}
        respond(NULL, 0);
   2490c:	2100      	movs	r1, #0
   2490e:	4608      	mov	r0, r1
   24910:	47b0      	blx	r6
    return rc;
   24912:	e7f8      	b.n	24906 <req_cb_flash_crc+0x82>
   24914:	00041230 	.word	0x00041230
   24918:	00041200 	.word	0x00041200
   2491c:	00042108 	.word	0x00042108

00024920 <req_cb_flash_read>:
{
   24920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24924:	4616      	mov	r6, r2
	return ((uint16_t)src[1] << 8) | src[0];
   24926:	78c3      	ldrb	r3, [r0, #3]
   24928:	7885      	ldrb	r5, [r0, #2]
   2492a:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   2492e:	7842      	ldrb	r2, [r0, #1]
   24930:	7805      	ldrb	r5, [r0, #0]
   24932:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24936:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   2493a:	79c3      	ldrb	r3, [r0, #7]
   2493c:	7984      	ldrb	r4, [r0, #6]
   2493e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   24942:	7942      	ldrb	r2, [r0, #5]
   24944:	7904      	ldrb	r4, [r0, #4]
   24946:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2494a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2494e:	4b19      	ldr	r3, [pc, #100]	; (249b4 <req_cb_flash_read+0x94>)
   24950:	4a19      	ldr	r2, [pc, #100]	; (249b8 <req_cb_flash_read+0x98>)
   24952:	1a9b      	subs	r3, r3, r2
   24954:	08db      	lsrs	r3, r3, #3
    LOG_INF("read offset: %x, length: %d", offset, length);
   24956:	f04f 0000 	mov.w	r0, #0
   2495a:	2203      	movs	r2, #3
   2495c:	f362 0002 	bfi	r0, r2, #0, #3
   24960:	f36f 00c5 	bfc	r0, #3, #3
   24964:	f363 108f 	bfi	r0, r3, #6, #10
   24968:	4623      	mov	r3, r4
   2496a:	462a      	mov	r2, r5
   2496c:	4913      	ldr	r1, [pc, #76]	; (249bc <req_cb_flash_read+0x9c>)
   2496e:	f017 fb6b 	bl	3c048 <log_string_sync>
    rsp_len = length;
   24972:	fa1f f884 	uxth.w	r8, r4
    p_rsp = k_malloc(rsp_len);
   24976:	4640      	mov	r0, r8
   24978:	f01b fa7f 	bl	3fe7a <k_malloc>
    if (p_rsp != NULL) {
   2497c:	b1a0      	cbz	r0, 249a8 <req_cb_flash_read+0x88>
   2497e:	4607      	mov	r7, r0
        rc = app_flash_read(offset, p_rsp, length);
   24980:	4622      	mov	r2, r4
   24982:	4601      	mov	r1, r0
   24984:	4628      	mov	r0, r5
   24986:	f016 ff11 	bl	3b7ac <app_flash_read>
        if (rc == 0) {
   2498a:	4604      	mov	r4, r0
   2498c:	b940      	cbnz	r0, 249a0 <req_cb_flash_read+0x80>
            respond(p_rsp, rsp_len);
   2498e:	4641      	mov	r1, r8
   24990:	4638      	mov	r0, r7
   24992:	47b0      	blx	r6
            k_free(p_rsp);
   24994:	4638      	mov	r0, r7
   24996:	f01b fa67 	bl	3fe68 <k_free>
}
   2499a:	4620      	mov	r0, r4
   2499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            respond(NULL, 0);
   249a0:	2100      	movs	r1, #0
   249a2:	4608      	mov	r0, r1
   249a4:	47b0      	blx	r6
   249a6:	e7f8      	b.n	2499a <req_cb_flash_read+0x7a>
        respond(NULL, 0);
   249a8:	2100      	movs	r1, #0
   249aa:	4608      	mov	r0, r1
   249ac:	47b0      	blx	r6
        rc = -1;
   249ae:	f04f 34ff 	mov.w	r4, #4294967295
    return rc;
   249b2:	e7f2      	b.n	2499a <req_cb_flash_read+0x7a>
   249b4:	00041230 	.word	0x00041230
   249b8:	00041200 	.word	0x00041200
   249bc:	00042124 	.word	0x00042124

000249c0 <req_cb_flash_erase>:
{
   249c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249c2:	4616      	mov	r6, r2
	return ((uint16_t)src[1] << 8) | src[0];
   249c4:	78c3      	ldrb	r3, [r0, #3]
   249c6:	7884      	ldrb	r4, [r0, #2]
   249c8:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   249cc:	7842      	ldrb	r2, [r0, #1]
   249ce:	7804      	ldrb	r4, [r0, #0]
   249d0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   249d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   249d8:	79c3      	ldrb	r3, [r0, #7]
   249da:	7985      	ldrb	r5, [r0, #6]
   249dc:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   249e0:	7942      	ldrb	r2, [r0, #5]
   249e2:	7905      	ldrb	r5, [r0, #4]
   249e4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   249e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    rc = app_flash_erase_page(offset, count);
   249ec:	4629      	mov	r1, r5
   249ee:	4620      	mov	r0, r4
   249f0:	f016 ff71 	bl	3b8d6 <app_flash_erase_page>
    if (rc == 0) {
   249f4:	4607      	mov	r7, r0
   249f6:	b9b0      	cbnz	r0, 24a26 <req_cb_flash_erase+0x66>
        respond("ok", 2);
   249f8:	2102      	movs	r1, #2
   249fa:	480d      	ldr	r0, [pc, #52]	; (24a30 <req_cb_flash_erase+0x70>)
   249fc:	47b0      	blx	r6
   249fe:	4b0d      	ldr	r3, [pc, #52]	; (24a34 <req_cb_flash_erase+0x74>)
   24a00:	4a0d      	ldr	r2, [pc, #52]	; (24a38 <req_cb_flash_erase+0x78>)
   24a02:	1a9b      	subs	r3, r3, r2
   24a04:	08db      	lsrs	r3, r3, #3
    LOG_INF("erase offset: %x, count: %d", offset, count);
   24a06:	f04f 0000 	mov.w	r0, #0
   24a0a:	2203      	movs	r2, #3
   24a0c:	f362 0002 	bfi	r0, r2, #0, #3
   24a10:	f36f 00c5 	bfc	r0, #3, #3
   24a14:	f363 108f 	bfi	r0, r3, #6, #10
   24a18:	462b      	mov	r3, r5
   24a1a:	4622      	mov	r2, r4
   24a1c:	4907      	ldr	r1, [pc, #28]	; (24a3c <req_cb_flash_erase+0x7c>)
   24a1e:	f017 fb13 	bl	3c048 <log_string_sync>
}
   24a22:	4638      	mov	r0, r7
   24a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        respond(NULL, 0);
   24a26:	2100      	movs	r1, #0
   24a28:	4608      	mov	r0, r1
   24a2a:	47b0      	blx	r6
   24a2c:	e7e7      	b.n	249fe <req_cb_flash_erase+0x3e>
   24a2e:	bf00      	nop
   24a30:	00041edc 	.word	0x00041edc
   24a34:	00041230 	.word	0x00041230
   24a38:	00041200 	.word	0x00041200
   24a3c:	00042140 	.word	0x00042140

00024a40 <req_cb_flash_write>:
{
   24a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a42:	4617      	mov	r7, r2
	return ((uint16_t)src[1] << 8) | src[0];
   24a44:	78c3      	ldrb	r3, [r0, #3]
   24a46:	7885      	ldrb	r5, [r0, #2]
   24a48:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
   24a4c:	7842      	ldrb	r2, [r0, #1]
   24a4e:	7805      	ldrb	r5, [r0, #0]
   24a50:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24a54:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   24a58:	79c3      	ldrb	r3, [r0, #7]
   24a5a:	7986      	ldrb	r6, [r0, #6]
   24a5c:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
   24a60:	7942      	ldrb	r2, [r0, #5]
   24a62:	7906      	ldrb	r6, [r0, #4]
   24a64:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24a68:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    uint8_t* p_data = &p_req[8];
   24a6c:	f100 0408 	add.w	r4, r0, #8
   24a70:	4b10      	ldr	r3, [pc, #64]	; (24ab4 <req_cb_flash_write+0x74>)
   24a72:	4a11      	ldr	r2, [pc, #68]	; (24ab8 <req_cb_flash_write+0x78>)
   24a74:	1a9b      	subs	r3, r3, r2
   24a76:	08db      	lsrs	r3, r3, #3
    LOG_INF("write offset: %x, length: %d", offset, length);
   24a78:	f04f 0000 	mov.w	r0, #0
   24a7c:	2203      	movs	r2, #3
   24a7e:	f362 0002 	bfi	r0, r2, #0, #3
   24a82:	f36f 00c5 	bfc	r0, #3, #3
   24a86:	f363 108f 	bfi	r0, r3, #6, #10
   24a8a:	4633      	mov	r3, r6
   24a8c:	462a      	mov	r2, r5
   24a8e:	490b      	ldr	r1, [pc, #44]	; (24abc <req_cb_flash_write+0x7c>)
   24a90:	f017 fada 	bl	3c048 <log_string_sync>
    rc = app_flash_write(offset, p_data, length);
   24a94:	4632      	mov	r2, r6
   24a96:	4621      	mov	r1, r4
   24a98:	4628      	mov	r0, r5
   24a9a:	f016 fee6 	bl	3b86a <app_flash_write>
    if (rc == 0) {
   24a9e:	4604      	mov	r4, r0
   24aa0:	b920      	cbnz	r0, 24aac <req_cb_flash_write+0x6c>
        respond("ok", 2);
   24aa2:	2102      	movs	r1, #2
   24aa4:	4806      	ldr	r0, [pc, #24]	; (24ac0 <req_cb_flash_write+0x80>)
   24aa6:	47b8      	blx	r7
}
   24aa8:	4620      	mov	r0, r4
   24aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        respond(NULL, 0);
   24aac:	2100      	movs	r1, #0
   24aae:	4608      	mov	r0, r1
   24ab0:	47b8      	blx	r7
    return rc;
   24ab2:	e7f9      	b.n	24aa8 <req_cb_flash_write+0x68>
   24ab4:	00041230 	.word	0x00041230
   24ab8:	00041200 	.word	0x00041200
   24abc:	0004215c 	.word	0x0004215c
   24ac0:	00041edc 	.word	0x00041edc

00024ac4 <app_flash_cmd_init>:
/**@brief Register flash related commands
 *
 * @param cb: event callback function
 */
void app_flash_cmd_init(void)
{
   24ac4:	b508      	push	{r3, lr}
    app_cmd_add(CMD_OP_FLASH_INFO_92,  req_cb_flash_info, NULL);
   24ac6:	2200      	movs	r2, #0
   24ac8:	4911      	ldr	r1, [pc, #68]	; (24b10 <app_flash_cmd_init+0x4c>)
   24aca:	2031      	movs	r0, #49	; 0x31
   24acc:	f7ff fd80 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_WRITE_92, req_cb_flash_write, NULL);
   24ad0:	2200      	movs	r2, #0
   24ad2:	4910      	ldr	r1, [pc, #64]	; (24b14 <app_flash_cmd_init+0x50>)
   24ad4:	2033      	movs	r0, #51	; 0x33
   24ad6:	f7ff fd7b 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_ERASE_92, req_cb_flash_erase, NULL);
   24ada:	2200      	movs	r2, #0
   24adc:	490e      	ldr	r1, [pc, #56]	; (24b18 <app_flash_cmd_init+0x54>)
   24ade:	2034      	movs	r0, #52	; 0x34
   24ae0:	f7ff fd76 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_DONE_92,  req_cb_flash_done, NULL);
   24ae4:	2200      	movs	r2, #0
   24ae6:	490d      	ldr	r1, [pc, #52]	; (24b1c <app_flash_cmd_init+0x58>)
   24ae8:	2037      	movs	r0, #55	; 0x37
   24aea:	f7ff fd71 	bl	245d0 <app_cmd_add>

    app_cmd_add(CMD_OP_FLASH_READ_92,  req_cb_flash_read, NULL);
   24aee:	2200      	movs	r2, #0
   24af0:	490b      	ldr	r1, [pc, #44]	; (24b20 <app_flash_cmd_init+0x5c>)
   24af2:	2032      	movs	r0, #50	; 0x32
   24af4:	f7ff fd6c 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_CRC_92,   req_cb_flash_crc, NULL);
   24af8:	2200      	movs	r2, #0
   24afa:	490a      	ldr	r1, [pc, #40]	; (24b24 <app_flash_cmd_init+0x60>)
   24afc:	2035      	movs	r0, #53	; 0x35
   24afe:	f7ff fd67 	bl	245d0 <app_cmd_add>
    app_cmd_add(CMD_OP_FLASH_START_92, req_cb_flash_start, NULL);
   24b02:	2200      	movs	r2, #0
   24b04:	4908      	ldr	r1, [pc, #32]	; (24b28 <app_flash_cmd_init+0x64>)
   24b06:	2036      	movs	r0, #54	; 0x36
   24b08:	f7ff fd62 	bl	245d0 <app_cmd_add>

}
   24b0c:	bd08      	pop	{r3, pc}
   24b0e:	bf00      	nop
   24b10:	0003b9a7 	.word	0x0003b9a7
   24b14:	00024a41 	.word	0x00024a41
   24b18:	000249c1 	.word	0x000249c1
   24b1c:	00024875 	.word	0x00024875
   24b20:	00024921 	.word	0x00024921
   24b24:	00024885 	.word	0x00024885
   24b28:	00024865 	.word	0x00024865

00024b2c <crc32_ieee_update>:
{
	return crc32_ieee_update(0x0, data, len);
}

uint32_t crc32_ieee_update(uint32_t crc, const uint8_t *data, size_t len)
{
   24b2c:	b470      	push	{r4, r5, r6}
		0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
		0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
		0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
	};

	crc = ~crc;
   24b2e:	43c0      	mvns	r0, r0

	for (size_t i = 0; i < len; i++) {
   24b30:	2400      	movs	r4, #0
   24b32:	4294      	cmp	r4, r2
   24b34:	d213      	bcs.n	24b5e <crc32_ieee_update+0x32>
		uint8_t byte = data[i];
   24b36:	5d0b      	ldrb	r3, [r1, r4]

		crc = (crc >> 4) ^ table[(crc ^ byte) & 0x0f];
   24b38:	ea83 0500 	eor.w	r5, r3, r0
   24b3c:	f005 050f 	and.w	r5, r5, #15
   24b40:	4e08      	ldr	r6, [pc, #32]	; (24b64 <crc32_ieee_update+0x38>)
   24b42:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
   24b46:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
		crc = (crc >> 4) ^ table[(crc ^ ((uint32_t)byte >> 4)) & 0x0f];
   24b4a:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
   24b4e:	f003 030f 	and.w	r3, r3, #15
   24b52:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
   24b56:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
	for (size_t i = 0; i < len; i++) {
   24b5a:	3401      	adds	r4, #1
   24b5c:	e7e9      	b.n	24b32 <crc32_ieee_update+0x6>
	}

	return (~crc);
}
   24b5e:	43c0      	mvns	r0, r0
   24b60:	bc70      	pop	{r4, r5, r6}
   24b62:	4770      	bx	lr
   24b64:	00042188 	.word	0x00042188

00024b68 <_check_fd>:
	errno = ENFILE;
	return -1;
}

static int _check_fd(int fd)
{
   24b68:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   24b6a:	2803      	cmp	r0, #3
   24b6c:	d808      	bhi.n	24b80 <_check_fd+0x18>
		return -1;
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
   24b6e:	0140      	lsls	r0, r0, #5
   24b70:	3008      	adds	r0, #8
   24b72:	4b0a      	ldr	r3, [pc, #40]	; (24b9c <_check_fd+0x34>)
   24b74:	4418      	add	r0, r3
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24b76:	e8d0 3faf 	lda	r3, [r0]
   24b7a:	b143      	cbz	r3, 24b8e <_check_fd+0x26>
		errno = EBADF;
		return -1;
	}

	return 0;
   24b7c:	2000      	movs	r0, #0
}
   24b7e:	bd08      	pop	{r3, pc}
		errno = EBADF;
   24b80:	f017 fe7a 	bl	3c878 <__errno>
   24b84:	2309      	movs	r3, #9
   24b86:	6003      	str	r3, [r0, #0]
		return -1;
   24b88:	f04f 30ff 	mov.w	r0, #4294967295
   24b8c:	e7f7      	b.n	24b7e <_check_fd+0x16>
		errno = EBADF;
   24b8e:	f017 fe73 	bl	3c878 <__errno>
   24b92:	2309      	movs	r3, #9
   24b94:	6003      	str	r3, [r0, #0]
		return -1;
   24b96:	f04f 30ff 	mov.w	r0, #4294967295
   24b9a:	e7f0      	b.n	24b7e <_check_fd+0x16>
   24b9c:	2000fe50 	.word	0x2000fe50

00024ba0 <_find_fd_entry>:
{
   24ba0:	b508      	push	{r3, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   24ba2:	2000      	movs	r0, #0
   24ba4:	2803      	cmp	r0, #3
   24ba6:	dc09      	bgt.n	24bbc <_find_fd_entry+0x1c>
		if (!atomic_get(&fdtable[fd].refcount)) {
   24ba8:	0143      	lsls	r3, r0, #5
   24baa:	f103 0208 	add.w	r2, r3, #8
   24bae:	4b07      	ldr	r3, [pc, #28]	; (24bcc <_find_fd_entry+0x2c>)
   24bb0:	4413      	add	r3, r2
   24bb2:	e8d3 3faf 	lda	r3, [r3]
   24bb6:	b13b      	cbz	r3, 24bc8 <_find_fd_entry+0x28>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   24bb8:	3001      	adds	r0, #1
   24bba:	e7f3      	b.n	24ba4 <_find_fd_entry+0x4>
	errno = ENFILE;
   24bbc:	f017 fe5c 	bl	3c878 <__errno>
   24bc0:	2317      	movs	r3, #23
   24bc2:	6003      	str	r3, [r0, #0]
	return -1;
   24bc4:	f04f 30ff 	mov.w	r0, #4294967295
}
   24bc8:	bd08      	pop	{r3, pc}
   24bca:	bf00      	nop
   24bcc:	2000fe50 	.word	0x2000fe50

00024bd0 <z_fd_unref>:
{
   24bd0:	b430      	push	{r4, r5}
   24bd2:	4602      	mov	r2, r0
		old_rc = atomic_get(&fdtable[fd].refcount);
   24bd4:	0153      	lsls	r3, r2, #5
   24bd6:	f103 0108 	add.w	r1, r3, #8
   24bda:	4b0f      	ldr	r3, [pc, #60]	; (24c18 <z_fd_unref+0x48>)
   24bdc:	440b      	add	r3, r1
   24bde:	e8d3 1faf 	lda	r1, [r3]
   24be2:	460c      	mov	r4, r1
		if (!old_rc) {
   24be4:	b1a9      	cbz	r1, 24c12 <z_fd_unref+0x42>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   24be6:	1e48      	subs	r0, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24be8:	e8d3 5fef 	ldaex	r5, [r3]
   24bec:	428d      	cmp	r5, r1
   24bee:	d104      	bne.n	24bfa <z_fd_unref+0x2a>
   24bf0:	e8c3 0fec 	stlex	ip, r0, [r3]
   24bf4:	f1bc 0f00 	cmp.w	ip, #0
   24bf8:	d1f6      	bne.n	24be8 <z_fd_unref+0x18>
   24bfa:	d1eb      	bne.n	24bd4 <z_fd_unref+0x4>
	if (old_rc != 1) {
   24bfc:	2c01      	cmp	r4, #1
   24bfe:	d106      	bne.n	24c0e <z_fd_unref+0x3e>
	fdtable[fd].obj = NULL;
   24c00:	4b05      	ldr	r3, [pc, #20]	; (24c18 <z_fd_unref+0x48>)
   24c02:	0151      	lsls	r1, r2, #5
   24c04:	eb03 1242 	add.w	r2, r3, r2, lsl #5
   24c08:	2000      	movs	r0, #0
   24c0a:	5058      	str	r0, [r3, r1]
	fdtable[fd].vtable = NULL;
   24c0c:	6050      	str	r0, [r2, #4]
}
   24c0e:	bc30      	pop	{r4, r5}
   24c10:	4770      	bx	lr
			return 0;
   24c12:	4608      	mov	r0, r1
   24c14:	e7fb      	b.n	24c0e <z_fd_unref+0x3e>
   24c16:	bf00      	nop
   24c18:	2000fe50 	.word	0x2000fe50

00024c1c <z_fd_ref>:
	return atomic_inc(&fdtable[fd].refcount) + 1;
   24c1c:	0140      	lsls	r0, r0, #5
   24c1e:	3008      	adds	r0, #8
   24c20:	4b05      	ldr	r3, [pc, #20]	; (24c38 <z_fd_ref+0x1c>)
   24c22:	4403      	add	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24c24:	e8d3 0fef 	ldaex	r0, [r3]
   24c28:	1c42      	adds	r2, r0, #1
   24c2a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24c2e:	2900      	cmp	r1, #0
   24c30:	d1f8      	bne.n	24c24 <z_fd_ref+0x8>
}
   24c32:	3001      	adds	r0, #1
   24c34:	4770      	bx	lr
   24c36:	bf00      	nop
   24c38:	2000fe50 	.word	0x2000fe50

00024c3c <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   24c3c:	b570      	push	{r4, r5, r6, lr}
   24c3e:	4604      	mov	r4, r0
   24c40:	460d      	mov	r5, r1
   24c42:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   24c44:	f7ff ff90 	bl	24b68 <_check_fd>
   24c48:	2800      	cmp	r0, #0
   24c4a:	db0f      	blt.n	24c6c <z_get_fd_obj+0x30>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   24c4c:	b12d      	cbz	r5, 24c5a <z_get_fd_obj+0x1e>
   24c4e:	4b08      	ldr	r3, [pc, #32]	; (24c70 <z_get_fd_obj+0x34>)
   24c50:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   24c54:	685b      	ldr	r3, [r3, #4]
   24c56:	42ab      	cmp	r3, r5
   24c58:	d103      	bne.n	24c62 <z_get_fd_obj+0x26>
		errno = err;
		return NULL;
	}

	return entry->obj;
   24c5a:	0164      	lsls	r4, r4, #5
   24c5c:	4b04      	ldr	r3, [pc, #16]	; (24c70 <z_get_fd_obj+0x34>)
   24c5e:	5918      	ldr	r0, [r3, r4]
}
   24c60:	bd70      	pop	{r4, r5, r6, pc}
		errno = err;
   24c62:	f017 fe09 	bl	3c878 <__errno>
   24c66:	6006      	str	r6, [r0, #0]
		return NULL;
   24c68:	2000      	movs	r0, #0
   24c6a:	e7f9      	b.n	24c60 <z_get_fd_obj+0x24>
		return NULL;
   24c6c:	2000      	movs	r0, #0
   24c6e:	e7f7      	b.n	24c60 <z_get_fd_obj+0x24>
   24c70:	2000fe50 	.word	0x2000fe50

00024c74 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   24c74:	b570      	push	{r4, r5, r6, lr}
   24c76:	4604      	mov	r4, r0
   24c78:	460e      	mov	r6, r1
   24c7a:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   24c7c:	f7ff ff74 	bl	24b68 <_check_fd>
   24c80:	2800      	cmp	r0, #0
   24c82:	db10      	blt.n	24ca6 <z_get_fd_obj_and_vtable+0x32>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   24c84:	4b09      	ldr	r3, [pc, #36]	; (24cac <z_get_fd_obj_and_vtable+0x38>)
   24c86:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   24c8a:	685b      	ldr	r3, [r3, #4]
   24c8c:	6033      	str	r3, [r6, #0]

	if (lock) {
   24c8e:	b135      	cbz	r5, 24c9e <z_get_fd_obj_and_vtable+0x2a>
		*lock = &entry->lock;
   24c90:	0163      	lsls	r3, r4, #5
   24c92:	f103 0208 	add.w	r2, r3, #8
   24c96:	4b05      	ldr	r3, [pc, #20]	; (24cac <z_get_fd_obj_and_vtable+0x38>)
   24c98:	4413      	add	r3, r2
   24c9a:	3304      	adds	r3, #4
   24c9c:	602b      	str	r3, [r5, #0]
	}

	return entry->obj;
   24c9e:	0164      	lsls	r4, r4, #5
   24ca0:	4b02      	ldr	r3, [pc, #8]	; (24cac <z_get_fd_obj_and_vtable+0x38>)
   24ca2:	5918      	ldr	r0, [r3, r4]
}
   24ca4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   24ca6:	2000      	movs	r0, #0
   24ca8:	e7fc      	b.n	24ca4 <z_get_fd_obj_and_vtable+0x30>
   24caa:	bf00      	nop
   24cac:	2000fe50 	.word	0x2000fe50

00024cb0 <z_reserve_fd>:

int z_reserve_fd(void)
{
   24cb0:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   24cb2:	f04f 32ff 	mov.w	r2, #4294967295
   24cb6:	f04f 33ff 	mov.w	r3, #4294967295
   24cba:	480e      	ldr	r0, [pc, #56]	; (24cf4 <z_reserve_fd+0x44>)
   24cbc:	f011 f988 	bl	35fd0 <z_impl_k_mutex_lock>
	int fd;

	(void)k_mutex_lock(&fdtable_lock, K_FOREVER);

	fd = _find_fd_entry();
   24cc0:	f7ff ff6e 	bl	24ba0 <_find_fd_entry>
	if (fd >= 0) {
   24cc4:	1e04      	subs	r4, r0, #0
   24cc6:	da04      	bge.n	24cd2 <z_reserve_fd+0x22>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
   24cc8:	480a      	ldr	r0, [pc, #40]	; (24cf4 <z_reserve_fd+0x44>)
   24cca:	f011 fa77 	bl	361bc <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   24cce:	4620      	mov	r0, r4
   24cd0:	bd10      	pop	{r4, pc}
		(void)z_fd_ref(fd);
   24cd2:	4620      	mov	r0, r4
   24cd4:	f7ff ffa2 	bl	24c1c <z_fd_ref>
		fdtable[fd].obj = NULL;
   24cd8:	4807      	ldr	r0, [pc, #28]	; (24cf8 <z_reserve_fd+0x48>)
   24cda:	0163      	lsls	r3, r4, #5
   24cdc:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   24ce0:	2200      	movs	r2, #0
   24ce2:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   24ce4:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   24ce6:	3308      	adds	r3, #8
   24ce8:	4418      	add	r0, r3
   24cea:	3004      	adds	r0, #4
	return z_impl_k_mutex_init(mutex);
   24cec:	f01a ff7c 	bl	3fbe8 <z_impl_k_mutex_init>
   24cf0:	e7ea      	b.n	24cc8 <z_reserve_fd+0x18>
   24cf2:	bf00      	nop
   24cf4:	2000ca58 	.word	0x2000ca58
   24cf8:	2000fe50 	.word	0x2000fe50

00024cfc <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   24cfc:	b538      	push	{r3, r4, r5, lr}
   24cfe:	4603      	mov	r3, r0
   24d00:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   24d02:	4a09      	ldr	r2, [pc, #36]	; (24d28 <z_finalize_fd+0x2c>)
   24d04:	015d      	lsls	r5, r3, #5
   24d06:	eb02 1443 	add.w	r4, r2, r3, lsl #5
   24d0a:	5151      	str	r1, [r2, r5]
	fdtable[fd].vtable = vtable;
   24d0c:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   24d0e:	b150      	cbz	r0, 24d26 <z_finalize_fd+0x2a>
   24d10:	68c2      	ldr	r2, [r0, #12]
   24d12:	b142      	cbz	r2, 24d26 <z_finalize_fd+0x2a>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   24d14:	462b      	mov	r3, r5
   24d16:	3308      	adds	r3, #8
   24d18:	4a03      	ldr	r2, [pc, #12]	; (24d28 <z_finalize_fd+0x2c>)
   24d1a:	4413      	add	r3, r2
   24d1c:	3304      	adds	r3, #4
   24d1e:	f240 1205 	movw	r2, #261	; 0x105
   24d22:	f016 fe6e 	bl	3ba02 <z_fdtable_call_ioctl>
					   &fdtable[fd].lock);
	}
}
   24d26:	bd38      	pop	{r3, r4, r5, pc}
   24d28:	2000fe50 	.word	0x2000fe50

00024d2c <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   24d2c:	b570      	push	{r4, r5, r6, lr}
   24d2e:	4604      	mov	r4, r0
   24d30:	460d      	mov	r5, r1
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24d32:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   24d34:	f003 0303 	and.w	r3, r3, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   24d38:	6081      	str	r1, [r0, #8]
	switch (method) {
   24d3a:	2b02      	cmp	r3, #2
   24d3c:	d013      	beq.n	24d66 <sys_notify_finalize+0x3a>
   24d3e:	2b03      	cmp	r3, #3
   24d40:	d00e      	beq.n	24d60 <sys_notify_finalize+0x34>
   24d42:	2b01      	cmp	r3, #1
   24d44:	d012      	beq.n	24d6c <sys_notify_finalize+0x40>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   24d46:	4e0e      	ldr	r6, [pc, #56]	; (24d80 <sys_notify_finalize+0x54>)
   24d48:	2245      	movs	r2, #69	; 0x45
   24d4a:	4631      	mov	r1, r6
   24d4c:	480d      	ldr	r0, [pc, #52]	; (24d84 <sys_notify_finalize+0x58>)
   24d4e:	f016 fef3 	bl	3bb38 <printk>
   24d52:	2145      	movs	r1, #69	; 0x45
   24d54:	4630      	mov	r0, r6
   24d56:	f017 f943 	bl	3bfe0 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   24d5a:	2600      	movs	r6, #0
	struct k_poll_signal *sig = NULL;
   24d5c:	4630      	mov	r0, r6
   24d5e:	e007      	b.n	24d70 <sys_notify_finalize+0x44>
		rv = notify->method.callback;
   24d60:	6806      	ldr	r6, [r0, #0]
	struct k_poll_signal *sig = NULL;
   24d62:	2000      	movs	r0, #0
		break;
   24d64:	e004      	b.n	24d70 <sys_notify_finalize+0x44>
		sig = notify->method.signal;
   24d66:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   24d68:	2600      	movs	r6, #0
		break;
   24d6a:	e001      	b.n	24d70 <sys_notify_finalize+0x44>
	switch (method) {
   24d6c:	2600      	movs	r6, #0
   24d6e:	4630      	mov	r0, r6
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24d70:	2300      	movs	r3, #0
   24d72:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24d74:	b110      	cbz	r0, 24d7c <sys_notify_finalize+0x50>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   24d76:	4629      	mov	r1, r5
   24d78:	f014 fc30 	bl	395dc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24d7c:	4630      	mov	r0, r6
   24d7e:	bd70      	pop	{r4, r5, r6, pc}
   24d80:	000421c8 	.word	0x000421c8
   24d84:	00041c84 	.word	0x00041c84

00024d88 <__printk_hook_install>:
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
   24d88:	4b01      	ldr	r3, [pc, #4]	; (24d90 <__printk_hook_install+0x8>)
   24d8a:	6018      	str	r0, [r3, #0]
}
   24d8c:	4770      	bx	lr
   24d8e:	bf00      	nop
   24d90:	2000c60c 	.word	0x2000c60c

00024d94 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   24d94:	b538      	push	{r3, r4, r5, lr}
   24d96:	4604      	mov	r4, r0
   24d98:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24d9a:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   24d9c:	2a00      	cmp	r2, #0
   24d9e:	db13      	blt.n	24dc8 <process_complete+0x34>
   24da0:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   24da4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   24da6:	2a01      	cmp	r2, #1
   24da8:	d91a      	bls.n	24de0 <process_complete+0x4c>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   24daa:	2b04      	cmp	r3, #4
   24dac:	d04d      	beq.n	24e4a <process_complete+0xb6>
		set_state(mgr, ONOFF_STATE_OFF);
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
   24dae:	4c2d      	ldr	r4, [pc, #180]	; (24e64 <process_complete+0xd0>)
   24db0:	f240 121b 	movw	r2, #283	; 0x11b
   24db4:	4621      	mov	r1, r4
   24db6:	482c      	ldr	r0, [pc, #176]	; (24e68 <process_complete+0xd4>)
   24db8:	f016 febe 	bl	3bb38 <printk>
   24dbc:	f240 111b 	movw	r1, #283	; 0x11b
   24dc0:	4620      	mov	r0, r4
   24dc2:	f017 f90d 	bl	3bfe0 <assert_post_action>
	}
}
   24dc6:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   24dc8:	e9d0 0100 	ldrd	r0, r1, [r0]
   24dcc:	e885 0003 	stmia.w	r5, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   24dd0:	2300      	movs	r3, #0
   24dd2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   24dd4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   24dd6:	2101      	movs	r1, #1
   24dd8:	4620      	mov	r0, r4
   24dda:	f016 febb 	bl	3bb54 <set_state>
   24dde:	e7f2      	b.n	24dc6 <process_complete+0x32>
		*clients = mgr->clients;
   24de0:	e9d0 0100 	ldrd	r0, r1, [r0]
   24de4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   24de8:	2200      	movs	r2, #0
   24dea:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   24dec:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   24dee:	2b06      	cmp	r3, #6
   24df0:	d00f      	beq.n	24e12 <process_complete+0x7e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   24df2:	2b05      	cmp	r3, #5
   24df4:	d11c      	bne.n	24e30 <process_complete+0x9c>
			set_state(mgr, ONOFF_STATE_OFF);
   24df6:	2100      	movs	r1, #0
   24df8:	4620      	mov	r0, r4
   24dfa:	f016 feab 	bl	3bb54 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   24dfe:	4620      	mov	r0, r4
   24e00:	f016 fecf 	bl	3bba2 <process_recheck>
   24e04:	2800      	cmp	r0, #0
   24e06:	d0de      	beq.n	24dc6 <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24e08:	8ba3      	ldrh	r3, [r4, #28]
   24e0a:	f043 0320 	orr.w	r3, r3, #32
   24e0e:	83a3      	strh	r3, [r4, #28]
   24e10:	e7d9      	b.n	24dc6 <process_complete+0x32>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   24e12:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   24e14:	b13b      	cbz	r3, 24e26 <process_complete+0x92>
				mgr->refs += 1U;
   24e16:	8be2      	ldrh	r2, [r4, #30]
   24e18:	3201      	adds	r2, #1
   24e1a:	83e2      	strh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   24e1c:	2b00      	cmp	r3, #0
   24e1e:	d0f9      	beq.n	24e14 <process_complete+0x80>
	return node->next;
   24e20:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   24e22:	2b00      	cmp	r3, #0
   24e24:	d1f6      	bne.n	24e14 <process_complete+0x80>
			set_state(mgr, ONOFF_STATE_ON);
   24e26:	2102      	movs	r1, #2
   24e28:	4620      	mov	r0, r4
   24e2a:	f016 fe93 	bl	3bb54 <set_state>
   24e2e:	e7e6      	b.n	24dfe <process_complete+0x6a>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   24e30:	4d0c      	ldr	r5, [pc, #48]	; (24e64 <process_complete+0xd0>)
   24e32:	f240 1209 	movw	r2, #265	; 0x109
   24e36:	4629      	mov	r1, r5
   24e38:	480b      	ldr	r0, [pc, #44]	; (24e68 <process_complete+0xd4>)
   24e3a:	f016 fe7d 	bl	3bb38 <printk>
   24e3e:	f240 1109 	movw	r1, #265	; 0x109
   24e42:	4628      	mov	r0, r5
   24e44:	f017 f8cc 	bl	3bfe0 <assert_post_action>
   24e48:	e7d5      	b.n	24df6 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   24e4a:	2100      	movs	r1, #0
   24e4c:	f016 fe82 	bl	3bb54 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   24e50:	4620      	mov	r0, r4
   24e52:	f016 fea6 	bl	3bba2 <process_recheck>
   24e56:	2800      	cmp	r0, #0
   24e58:	d0b5      	beq.n	24dc6 <process_complete+0x32>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   24e5a:	8ba3      	ldrh	r3, [r4, #28]
   24e5c:	f043 0320 	orr.w	r3, r3, #32
   24e60:	83a3      	strh	r3, [r4, #28]
   24e62:	e7b0      	b.n	24dc6 <process_complete+0x32>
   24e64:	000421ec 	.word	0x000421ec
   24e68:	00041c84 	.word	0x00041c84

00024e6c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   24e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e70:	b083      	sub	sp, #12
   24e72:	4604      	mov	r4, r0
   24e74:	4616      	mov	r6, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24e76:	8b83      	ldrh	r3, [r0, #28]
   24e78:	f003 0707 	and.w	r7, r3, #7
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
   24e7c:	f003 0808 	and.w	r8, r3, #8

	__ASSERT_NO_MSG(evt != EVT_NOP);
   24e80:	460d      	mov	r5, r1
   24e82:	b131      	cbz	r1, 24e92 <process_event+0x26>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   24e84:	f1b8 0f00 	cmp.w	r8, #0
   24e88:	d111      	bne.n	24eae <process_event+0x42>
	list->head = NULL;
   24e8a:	2300      	movs	r3, #0
   24e8c:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   24e8e:	9301      	str	r3, [sp, #4]
}
   24e90:	e0a7      	b.n	24fe2 <process_event+0x176>
	__ASSERT_NO_MSG(evt != EVT_NOP);
   24e92:	f8df 9314 	ldr.w	r9, [pc, #788]	; 251a8 <process_event+0x33c>
   24e96:	f240 1233 	movw	r2, #307	; 0x133
   24e9a:	4649      	mov	r1, r9
   24e9c:	48c1      	ldr	r0, [pc, #772]	; (251a4 <process_event+0x338>)
   24e9e:	f016 fe4b 	bl	3bb38 <printk>
   24ea2:	f240 1133 	movw	r1, #307	; 0x133
   24ea6:	4648      	mov	r0, r9
   24ea8:	f017 f89a 	bl	3bfe0 <assert_post_action>
   24eac:	e7ea      	b.n	24e84 <process_event+0x18>
		if (evt == EVT_COMPLETE) {
   24eae:	2d01      	cmp	r5, #1
   24eb0:	d013      	beq.n	24eda <process_event+0x6e>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   24eb2:	2d02      	cmp	r5, #2
   24eb4:	d116      	bne.n	24ee4 <process_event+0x78>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   24eb6:	8ba3      	ldrh	r3, [r4, #28]
   24eb8:	f043 0320 	orr.w	r3, r3, #32
   24ebc:	83a3      	strh	r3, [r4, #28]
   24ebe:	f104 0014 	add.w	r0, r4, #20
   24ec2:	f011 f841 	bl	35f48 <z_spin_unlock_valid>
   24ec6:	2800      	cmp	r0, #0
   24ec8:	f000 8176 	beq.w	251b8 <process_event+0x34c>
   24ecc:	f386 8811 	msr	BASEPRI, r6
   24ed0:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   24ed4:	b003      	add	sp, #12
   24ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   24eda:	8ba3      	ldrh	r3, [r4, #28]
   24edc:	f043 0310 	orr.w	r3, r3, #16
   24ee0:	83a3      	strh	r3, [r4, #28]
   24ee2:	e7ec      	b.n	24ebe <process_event+0x52>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   24ee4:	4db0      	ldr	r5, [pc, #704]	; (251a8 <process_event+0x33c>)
   24ee6:	f44f 729e 	mov.w	r2, #316	; 0x13c
   24eea:	4629      	mov	r1, r5
   24eec:	48ad      	ldr	r0, [pc, #692]	; (251a4 <process_event+0x338>)
   24eee:	f016 fe23 	bl	3bb38 <printk>
   24ef2:	f44f 719e 	mov.w	r1, #316	; 0x13c
   24ef6:	4628      	mov	r0, r5
   24ef8:	f017 f872 	bl	3bfe0 <assert_post_action>
   24efc:	e7db      	b.n	24eb6 <process_event+0x4a>
			evt = process_recheck(mgr);
   24efe:	4620      	mov	r0, r4
   24f00:	f016 fe4f 	bl	3bba2 <process_recheck>
   24f04:	4605      	mov	r5, r0
   24f06:	e06e      	b.n	24fe6 <process_event+0x17a>
			res = mgr->last_res;
   24f08:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   24f0c:	464a      	mov	r2, r9
   24f0e:	4669      	mov	r1, sp
   24f10:	4620      	mov	r0, r4
   24f12:	f7ff ff3f 	bl	24d94 <process_complete>
		onoff_transition_fn transit = NULL;
   24f16:	2500      	movs	r5, #0
   24f18:	e010      	b.n	24f3c <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   24f1a:	2f00      	cmp	r7, #0
   24f1c:	d17f      	bne.n	2501e <process_event+0x1b2>
	return list->head;
   24f1e:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   24f20:	2b00      	cmp	r3, #0
   24f22:	f000 8089 	beq.w	25038 <process_event+0x1cc>
			transit = mgr->transitions->start;
   24f26:	6923      	ldr	r3, [r4, #16]
   24f28:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24f2a:	2d00      	cmp	r5, #0
   24f2c:	f000 8091 	beq.w	25052 <process_event+0x1e6>
			set_state(mgr, ONOFF_STATE_TO_ON);
   24f30:	2106      	movs	r1, #6
   24f32:	4620      	mov	r0, r4
   24f34:	f016 fe0e 	bl	3bb54 <set_state>
		res = 0;
   24f38:	f04f 0900 	mov.w	r9, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   24f3c:	8ba3      	ldrh	r3, [r4, #28]
   24f3e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   24f42:	45b8      	cmp	r8, r7
   24f44:	f000 8100 	beq.w	25148 <process_event+0x2dc>
   24f48:	68a2      	ldr	r2, [r4, #8]
   24f4a:	2a00      	cmp	r2, #0
   24f4c:	f000 80fe 	beq.w	2514c <process_event+0x2e0>
   24f50:	2201      	movs	r2, #1
		if (do_monitors
   24f52:	4617      	mov	r7, r2
   24f54:	b91a      	cbnz	r2, 24f5e <process_event+0xf2>
   24f56:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   24f58:	2a00      	cmp	r2, #0
   24f5a:	f000 80f9 	beq.w	25150 <process_event+0x2e4>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   24f5e:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   24f62:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   24f64:	f104 0a14 	add.w	sl, r4, #20
   24f68:	4650      	mov	r0, sl
   24f6a:	f010 ffed 	bl	35f48 <z_spin_unlock_valid>
   24f6e:	2800      	cmp	r0, #0
   24f70:	f000 80f2 	beq.w	25158 <process_event+0x2ec>
   24f74:	f386 8811 	msr	BASEPRI, r6
   24f78:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   24f7c:	2f00      	cmp	r7, #0
   24f7e:	f040 80f7 	bne.w	25170 <process_event+0x304>
   24f82:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   24f84:	b12b      	cbz	r3, 24f92 <process_event+0x126>
				notify_all(mgr, &clients, state, res);
   24f86:	464b      	mov	r3, r9
   24f88:	4642      	mov	r2, r8
   24f8a:	4669      	mov	r1, sp
   24f8c:	4620      	mov	r0, r4
   24f8e:	f016 fe4a 	bl	3bc26 <notify_all>
			if (transit != NULL) {
   24f92:	b115      	cbz	r5, 24f9a <process_event+0x12e>
				transit(mgr, transition_complete);
   24f94:	4985      	ldr	r1, [pc, #532]	; (251ac <process_event+0x340>)
   24f96:	4620      	mov	r0, r4
   24f98:	47a8      	blx	r5
	__asm__ volatile(
   24f9a:	f04f 0320 	mov.w	r3, #32
   24f9e:	f3ef 8611 	mrs	r6, BASEPRI
   24fa2:	f383 8812 	msr	BASEPRI_MAX, r3
   24fa6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24faa:	4650      	mov	r0, sl
   24fac:	f010 ffbc 	bl	35f28 <z_spin_lock_valid>
   24fb0:	2800      	cmp	r0, #0
   24fb2:	f000 80e3 	beq.w	2517c <process_event+0x310>
	z_spin_lock_set_owner(l);
   24fb6:	4650      	mov	r0, sl
   24fb8:	f010 ffd6 	bl	35f68 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   24fbc:	8ba3      	ldrh	r3, [r4, #28]
   24fbe:	f023 0308 	bic.w	r3, r3, #8
   24fc2:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   24fc4:	8ba3      	ldrh	r3, [r4, #28]
   24fc6:	f013 0f10 	tst.w	r3, #16
   24fca:	f000 80e2 	beq.w	25192 <process_event+0x326>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   24fce:	f023 0310 	bic.w	r3, r3, #16
   24fd2:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   24fd4:	2501      	movs	r5, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   24fd6:	8ba7      	ldrh	r7, [r4, #28]
   24fd8:	f007 0707 	and.w	r7, r7, #7
	} while (evt != EVT_NOP);
   24fdc:	2d00      	cmp	r5, #0
   24fde:	f43f af6e 	beq.w	24ebe <process_event+0x52>
		if (evt == EVT_RECHECK) {
   24fe2:	2d02      	cmp	r5, #2
   24fe4:	d08b      	beq.n	24efe <process_event+0x92>
		if (evt == EVT_NOP) {
   24fe6:	2d00      	cmp	r5, #0
   24fe8:	f43f af69 	beq.w	24ebe <process_event+0x52>
		if (evt == EVT_COMPLETE) {
   24fec:	2d01      	cmp	r5, #1
   24fee:	d08b      	beq.n	24f08 <process_event+0x9c>
		} else if (evt == EVT_START) {
   24ff0:	2d03      	cmp	r5, #3
   24ff2:	d092      	beq.n	24f1a <process_event+0xae>
		} else if (evt == EVT_STOP) {
   24ff4:	2d04      	cmp	r5, #4
   24ff6:	d03a      	beq.n	2506e <process_event+0x202>
		} else if (evt == EVT_RESET) {
   24ff8:	2d05      	cmp	r5, #5
   24ffa:	f040 8096 	bne.w	2512a <process_event+0x2be>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24ffe:	2f01      	cmp	r7, #1
   25000:	d16b      	bne.n	250da <process_event+0x26e>
   25002:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   25004:	2b00      	cmp	r3, #0
   25006:	d075      	beq.n	250f4 <process_event+0x288>
			transit = mgr->transitions->reset;
   25008:	6923      	ldr	r3, [r4, #16]
   2500a:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   2500c:	2d00      	cmp	r5, #0
   2500e:	d07e      	beq.n	2510e <process_event+0x2a2>
			set_state(mgr, ONOFF_STATE_RESETTING);
   25010:	2105      	movs	r1, #5
   25012:	4620      	mov	r0, r4
   25014:	f016 fd9e 	bl	3bb54 <set_state>
		res = 0;
   25018:	f04f 0900 	mov.w	r9, #0
   2501c:	e78e      	b.n	24f3c <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   2501e:	4d62      	ldr	r5, [pc, #392]	; (251a8 <process_event+0x33c>)
   25020:	f44f 72ab 	mov.w	r2, #342	; 0x156
   25024:	4629      	mov	r1, r5
   25026:	485f      	ldr	r0, [pc, #380]	; (251a4 <process_event+0x338>)
   25028:	f016 fd86 	bl	3bb38 <printk>
   2502c:	f44f 71ab 	mov.w	r1, #342	; 0x156
   25030:	4628      	mov	r0, r5
   25032:	f016 ffd5 	bl	3bfe0 <assert_post_action>
   25036:	e772      	b.n	24f1e <process_event+0xb2>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   25038:	4d5b      	ldr	r5, [pc, #364]	; (251a8 <process_event+0x33c>)
   2503a:	f240 1257 	movw	r2, #343	; 0x157
   2503e:	4629      	mov	r1, r5
   25040:	4858      	ldr	r0, [pc, #352]	; (251a4 <process_event+0x338>)
   25042:	f016 fd79 	bl	3bb38 <printk>
   25046:	f240 1157 	movw	r1, #343	; 0x157
   2504a:	4628      	mov	r0, r5
   2504c:	f016 ffc8 	bl	3bfe0 <assert_post_action>
   25050:	e769      	b.n	24f26 <process_event+0xba>
			__ASSERT_NO_MSG(transit != NULL);
   25052:	f8df 8154 	ldr.w	r8, [pc, #340]	; 251a8 <process_event+0x33c>
   25056:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   2505a:	4641      	mov	r1, r8
   2505c:	4851      	ldr	r0, [pc, #324]	; (251a4 <process_event+0x338>)
   2505e:	f016 fd6b 	bl	3bb38 <printk>
   25062:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   25066:	4640      	mov	r0, r8
   25068:	f016 ffba 	bl	3bfe0 <assert_post_action>
   2506c:	e760      	b.n	24f30 <process_event+0xc4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   2506e:	2f02      	cmp	r7, #2
   25070:	d10b      	bne.n	2508a <process_event+0x21e>
			__ASSERT_NO_MSG(mgr->refs == 0);
   25072:	8be3      	ldrh	r3, [r4, #30]
   25074:	b9b3      	cbnz	r3, 250a4 <process_event+0x238>
			transit = mgr->transitions->stop;
   25076:	6923      	ldr	r3, [r4, #16]
   25078:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   2507a:	b305      	cbz	r5, 250be <process_event+0x252>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   2507c:	2104      	movs	r1, #4
   2507e:	4620      	mov	r0, r4
   25080:	f016 fd68 	bl	3bb54 <set_state>
		res = 0;
   25084:	f04f 0900 	mov.w	r9, #0
   25088:	e758      	b.n	24f3c <process_event+0xd0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   2508a:	4d47      	ldr	r5, [pc, #284]	; (251a8 <process_event+0x33c>)
   2508c:	f240 125d 	movw	r2, #349	; 0x15d
   25090:	4629      	mov	r1, r5
   25092:	4844      	ldr	r0, [pc, #272]	; (251a4 <process_event+0x338>)
   25094:	f016 fd50 	bl	3bb38 <printk>
   25098:	f240 115d 	movw	r1, #349	; 0x15d
   2509c:	4628      	mov	r0, r5
   2509e:	f016 ff9f 	bl	3bfe0 <assert_post_action>
   250a2:	e7e6      	b.n	25072 <process_event+0x206>
			__ASSERT_NO_MSG(mgr->refs == 0);
   250a4:	4d40      	ldr	r5, [pc, #256]	; (251a8 <process_event+0x33c>)
   250a6:	f44f 72af 	mov.w	r2, #350	; 0x15e
   250aa:	4629      	mov	r1, r5
   250ac:	483d      	ldr	r0, [pc, #244]	; (251a4 <process_event+0x338>)
   250ae:	f016 fd43 	bl	3bb38 <printk>
   250b2:	f44f 71af 	mov.w	r1, #350	; 0x15e
   250b6:	4628      	mov	r0, r5
   250b8:	f016 ff92 	bl	3bfe0 <assert_post_action>
   250bc:	e7db      	b.n	25076 <process_event+0x20a>
			__ASSERT_NO_MSG(transit != NULL);
   250be:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 251a8 <process_event+0x33c>
   250c2:	f240 1261 	movw	r2, #353	; 0x161
   250c6:	4641      	mov	r1, r8
   250c8:	4836      	ldr	r0, [pc, #216]	; (251a4 <process_event+0x338>)
   250ca:	f016 fd35 	bl	3bb38 <printk>
   250ce:	f240 1161 	movw	r1, #353	; 0x161
   250d2:	4640      	mov	r0, r8
   250d4:	f016 ff84 	bl	3bfe0 <assert_post_action>
   250d8:	e7d0      	b.n	2507c <process_event+0x210>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   250da:	4d33      	ldr	r5, [pc, #204]	; (251a8 <process_event+0x33c>)
   250dc:	f44f 72b2 	mov.w	r2, #356	; 0x164
   250e0:	4629      	mov	r1, r5
   250e2:	4830      	ldr	r0, [pc, #192]	; (251a4 <process_event+0x338>)
   250e4:	f016 fd28 	bl	3bb38 <printk>
   250e8:	f44f 71b2 	mov.w	r1, #356	; 0x164
   250ec:	4628      	mov	r0, r5
   250ee:	f016 ff77 	bl	3bfe0 <assert_post_action>
   250f2:	e786      	b.n	25002 <process_event+0x196>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   250f4:	4d2c      	ldr	r5, [pc, #176]	; (251a8 <process_event+0x33c>)
   250f6:	f240 1265 	movw	r2, #357	; 0x165
   250fa:	4629      	mov	r1, r5
   250fc:	4829      	ldr	r0, [pc, #164]	; (251a4 <process_event+0x338>)
   250fe:	f016 fd1b 	bl	3bb38 <printk>
   25102:	f240 1165 	movw	r1, #357	; 0x165
   25106:	4628      	mov	r0, r5
   25108:	f016 ff6a 	bl	3bfe0 <assert_post_action>
   2510c:	e77c      	b.n	25008 <process_event+0x19c>
			__ASSERT_NO_MSG(transit != NULL);
   2510e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 251a8 <process_event+0x33c>
   25112:	f44f 72b4 	mov.w	r2, #360	; 0x168
   25116:	4641      	mov	r1, r8
   25118:	4822      	ldr	r0, [pc, #136]	; (251a4 <process_event+0x338>)
   2511a:	f016 fd0d 	bl	3bb38 <printk>
   2511e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   25122:	4640      	mov	r0, r8
   25124:	f016 ff5c 	bl	3bfe0 <assert_post_action>
   25128:	e772      	b.n	25010 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
   2512a:	4d1f      	ldr	r5, [pc, #124]	; (251a8 <process_event+0x33c>)
   2512c:	f240 126b 	movw	r2, #363	; 0x16b
   25130:	4629      	mov	r1, r5
   25132:	481c      	ldr	r0, [pc, #112]	; (251a4 <process_event+0x338>)
   25134:	f016 fd00 	bl	3bb38 <printk>
   25138:	f240 116b 	movw	r1, #363	; 0x16b
   2513c:	4628      	mov	r0, r5
   2513e:	f016 ff4f 	bl	3bfe0 <assert_post_action>
		onoff_transition_fn transit = NULL;
   25142:	2500      	movs	r5, #0
		res = 0;
   25144:	46a9      	mov	r9, r5
   25146:	e6f9      	b.n	24f3c <process_event+0xd0>
				   && !sys_slist_is_empty(&mgr->monitors);
   25148:	2200      	movs	r2, #0
   2514a:	e702      	b.n	24f52 <process_event+0xe6>
   2514c:	2200      	movs	r2, #0
   2514e:	e700      	b.n	24f52 <process_event+0xe6>
		    || (transit != NULL)) {
   25150:	2d00      	cmp	r5, #0
   25152:	f47f af04 	bne.w	24f5e <process_event+0xf2>
   25156:	e735      	b.n	24fc4 <process_event+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25158:	f8df b054 	ldr.w	fp, [pc, #84]	; 251b0 <process_event+0x344>
   2515c:	22ac      	movs	r2, #172	; 0xac
   2515e:	4659      	mov	r1, fp
   25160:	4810      	ldr	r0, [pc, #64]	; (251a4 <process_event+0x338>)
   25162:	f016 fce9 	bl	3bb38 <printk>
   25166:	21ac      	movs	r1, #172	; 0xac
   25168:	4658      	mov	r0, fp
   2516a:	f016 ff39 	bl	3bfe0 <assert_post_action>
   2516e:	e701      	b.n	24f74 <process_event+0x108>
				notify_monitors(mgr, state, res);
   25170:	464a      	mov	r2, r9
   25172:	4641      	mov	r1, r8
   25174:	4620      	mov	r0, r4
   25176:	f016 fcf5 	bl	3bb64 <notify_monitors>
   2517a:	e702      	b.n	24f82 <process_event+0x116>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2517c:	4d0c      	ldr	r5, [pc, #48]	; (251b0 <process_event+0x344>)
   2517e:	2281      	movs	r2, #129	; 0x81
   25180:	4629      	mov	r1, r5
   25182:	4808      	ldr	r0, [pc, #32]	; (251a4 <process_event+0x338>)
   25184:	f016 fcd8 	bl	3bb38 <printk>
   25188:	2181      	movs	r1, #129	; 0x81
   2518a:	4628      	mov	r0, r5
   2518c:	f016 ff28 	bl	3bfe0 <assert_post_action>
   25190:	e711      	b.n	24fb6 <process_event+0x14a>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   25192:	f013 0f20 	tst.w	r3, #32
   25196:	d00d      	beq.n	251b4 <process_event+0x348>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   25198:	f023 0320 	bic.w	r3, r3, #32
   2519c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   2519e:	2502      	movs	r5, #2
   251a0:	e719      	b.n	24fd6 <process_event+0x16a>
   251a2:	bf00      	nop
   251a4:	00041c84 	.word	0x00041c84
   251a8:	000421ec 	.word	0x000421ec
   251ac:	000251d9 	.word	0x000251d9
   251b0:	00042210 	.word	0x00042210
		evt = EVT_NOP;
   251b4:	2500      	movs	r5, #0
   251b6:	e70e      	b.n	24fd6 <process_event+0x16a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   251b8:	4c05      	ldr	r4, [pc, #20]	; (251d0 <process_event+0x364>)
   251ba:	22ac      	movs	r2, #172	; 0xac
   251bc:	4621      	mov	r1, r4
   251be:	4805      	ldr	r0, [pc, #20]	; (251d4 <process_event+0x368>)
   251c0:	f016 fcba 	bl	3bb38 <printk>
   251c4:	21ac      	movs	r1, #172	; 0xac
   251c6:	4620      	mov	r0, r4
   251c8:	f016 ff0a 	bl	3bfe0 <assert_post_action>
   251cc:	e67e      	b.n	24ecc <process_event+0x60>
   251ce:	bf00      	nop
   251d0:	00042210 	.word	0x00042210
   251d4:	00041c84 	.word	0x00041c84

000251d8 <transition_complete>:
{
   251d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   251dc:	4604      	mov	r4, r0
   251de:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   251e0:	f100 0614 	add.w	r6, r0, #20
   251e4:	f04f 0320 	mov.w	r3, #32
   251e8:	f3ef 8711 	mrs	r7, BASEPRI
   251ec:	f383 8812 	msr	BASEPRI_MAX, r3
   251f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251f4:	4630      	mov	r0, r6
   251f6:	f010 fe97 	bl	35f28 <z_spin_lock_valid>
   251fa:	b150      	cbz	r0, 25212 <transition_complete+0x3a>
	z_spin_lock_set_owner(l);
   251fc:	4630      	mov	r0, r6
   251fe:	f010 feb3 	bl	35f68 <z_spin_lock_set_owner>
	mgr->last_res = res;
   25202:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   25204:	463a      	mov	r2, r7
   25206:	2101      	movs	r1, #1
   25208:	4620      	mov	r0, r4
   2520a:	f7ff fe2f 	bl	24e6c <process_event>
}
   2520e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25212:	f8df 801c 	ldr.w	r8, [pc, #28]	; 25230 <transition_complete+0x58>
   25216:	2281      	movs	r2, #129	; 0x81
   25218:	4641      	mov	r1, r8
   2521a:	4804      	ldr	r0, [pc, #16]	; (2522c <transition_complete+0x54>)
   2521c:	f016 fc8c 	bl	3bb38 <printk>
   25220:	2181      	movs	r1, #129	; 0x81
   25222:	4640      	mov	r0, r8
   25224:	f016 fedc 	bl	3bfe0 <assert_post_action>
   25228:	e7e8      	b.n	251fc <transition_complete+0x24>
   2522a:	bf00      	nop
   2522c:	00041c84 	.word	0x00041c84
   25230:	00042210 	.word	0x00042210

00025234 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25238:	4604      	mov	r4, r0
   2523a:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2523c:	f016 fcca 	bl	3bbd4 <validate_args>

	if (rv < 0) {
   25240:	1e06      	subs	r6, r0, #0
   25242:	db53      	blt.n	252ec <onoff_request+0xb8>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   25244:	f104 0714 	add.w	r7, r4, #20
   25248:	f04f 0320 	mov.w	r3, #32
   2524c:	f3ef 8911 	mrs	r9, BASEPRI
   25250:	f383 8812 	msr	BASEPRI_MAX, r3
   25254:	f3bf 8f6f 	isb	sy
   25258:	4638      	mov	r0, r7
   2525a:	f010 fe65 	bl	35f28 <z_spin_lock_valid>
   2525e:	b1e8      	cbz	r0, 2529c <onoff_request+0x68>
	z_spin_lock_set_owner(l);
   25260:	4638      	mov	r0, r7
   25262:	f010 fe81 	bl	35f68 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25266:	8ba5      	ldrh	r5, [r4, #28]
   25268:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2526c:	8be3      	ldrh	r3, [r4, #30]
   2526e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25272:	4293      	cmp	r3, r2
   25274:	d050      	beq.n	25318 <onoff_request+0xe4>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   25276:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   25278:	2d02      	cmp	r5, #2
   2527a:	d01a      	beq.n	252b2 <onoff_request+0x7e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   2527c:	b305      	cbz	r5, 252c0 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_OFF)
   2527e:	2d04      	cmp	r5, #4
   25280:	d01e      	beq.n	252c0 <onoff_request+0x8c>
		   || (state == ONOFF_STATE_TO_ON)) {
   25282:	2d06      	cmp	r5, #6
   25284:	d01c      	beq.n	252c0 <onoff_request+0x8c>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   25286:	2d05      	cmp	r5, #5
   25288:	d04d      	beq.n	25326 <onoff_request+0xf2>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   2528a:	2d01      	cmp	r5, #1
   2528c:	d131      	bne.n	252f2 <onoff_request+0xbe>
		rv = -EIO;
   2528e:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   25292:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   25296:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   25298:	4652      	mov	r2, sl
   2529a:	e017      	b.n	252cc <onoff_request+0x98>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2529c:	4d36      	ldr	r5, [pc, #216]	; (25378 <onoff_request+0x144>)
   2529e:	2281      	movs	r2, #129	; 0x81
   252a0:	4629      	mov	r1, r5
   252a2:	4836      	ldr	r0, [pc, #216]	; (2537c <onoff_request+0x148>)
   252a4:	f016 fc48 	bl	3bb38 <printk>
   252a8:	2181      	movs	r1, #129	; 0x81
   252aa:	4628      	mov	r0, r5
   252ac:	f016 fe98 	bl	3bfe0 <assert_post_action>
   252b0:	e7d6      	b.n	25260 <onoff_request+0x2c>
		mgr->refs += 1U;
   252b2:	3301      	adds	r3, #1
   252b4:	83e3      	strh	r3, [r4, #30]
		notify = true;
   252b6:	f04f 0a01 	mov.w	sl, #1
	bool start = false;             /* trigger a start transition */
   252ba:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   252bc:	461a      	mov	r2, r3
   252be:	e005      	b.n	252cc <onoff_request+0x98>
		start = (state == ONOFF_STATE_OFF);
   252c0:	fab5 f385 	clz	r3, r5
   252c4:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   252c6:	f04f 0a00 	mov.w	sl, #0
		add_client = true;
   252ca:	2201      	movs	r2, #1
	}

out:
	if (add_client) {
   252cc:	b142      	cbz	r2, 252e0 <onoff_request+0xac>
	parent->next = child;
   252ce:	2200      	movs	r2, #0
   252d0:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   252d4:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   252d6:	b36a      	cbz	r2, 25334 <onoff_request+0x100>
	parent->next = child;
   252d8:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   252dc:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   252e0:	b36b      	cbz	r3, 2533e <onoff_request+0x10a>
		process_event(mgr, EVT_RECHECK, key);
   252e2:	464a      	mov	r2, r9
   252e4:	2102      	movs	r1, #2
   252e6:	4620      	mov	r0, r4
   252e8:	f7ff fdc0 	bl	24e6c <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   252ec:	4630      	mov	r0, r6
   252ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   252f2:	4e23      	ldr	r6, [pc, #140]	; (25380 <onoff_request+0x14c>)
   252f4:	f240 12c9 	movw	r2, #457	; 0x1c9
   252f8:	4631      	mov	r1, r6
   252fa:	4820      	ldr	r0, [pc, #128]	; (2537c <onoff_request+0x148>)
   252fc:	f016 fc1c 	bl	3bb38 <printk>
   25300:	f240 11c9 	movw	r1, #457	; 0x1c9
   25304:	4630      	mov	r0, r6
   25306:	f016 fe6b 	bl	3bfe0 <assert_post_action>
		rv = -EIO;
   2530a:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   2530e:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   25312:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   25314:	4652      	mov	r2, sl
   25316:	e7d9      	b.n	252cc <onoff_request+0x98>
		rv = -EAGAIN;
   25318:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   2531c:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   25320:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   25322:	4652      	mov	r2, sl
   25324:	e7d2      	b.n	252cc <onoff_request+0x98>
		rv = -ENOTSUP;
   25326:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   2532a:	f04f 0a00 	mov.w	sl, #0
	bool start = false;             /* trigger a start transition */
   2532e:	4653      	mov	r3, sl
	bool add_client = false;        /* add client to pending list */
   25330:	4652      	mov	r2, sl
   25332:	e7cb      	b.n	252cc <onoff_request+0x98>
   25334:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   25338:	f8c4 8000 	str.w	r8, [r4]
}
   2533c:	e7d0      	b.n	252e0 <onoff_request+0xac>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2533e:	4638      	mov	r0, r7
   25340:	f010 fe02 	bl	35f48 <z_spin_unlock_valid>
   25344:	b168      	cbz	r0, 25362 <onoff_request+0x12e>
	__asm__ volatile(
   25346:	f389 8811 	msr	BASEPRI, r9
   2534a:	f3bf 8f6f 	isb	sy
		if (notify) {
   2534e:	f1ba 0f00 	cmp.w	sl, #0
   25352:	d0cb      	beq.n	252ec <onoff_request+0xb8>
			notify_one(mgr, cli, state, 0);
   25354:	2300      	movs	r3, #0
   25356:	462a      	mov	r2, r5
   25358:	4641      	mov	r1, r8
   2535a:	4620      	mov	r0, r4
   2535c:	f016 fc50 	bl	3bc00 <notify_one>
   25360:	e7c4      	b.n	252ec <onoff_request+0xb8>
   25362:	4f05      	ldr	r7, [pc, #20]	; (25378 <onoff_request+0x144>)
   25364:	22ac      	movs	r2, #172	; 0xac
   25366:	4639      	mov	r1, r7
   25368:	4804      	ldr	r0, [pc, #16]	; (2537c <onoff_request+0x148>)
   2536a:	f016 fbe5 	bl	3bb38 <printk>
   2536e:	21ac      	movs	r1, #172	; 0xac
   25370:	4638      	mov	r0, r7
   25372:	f016 fe35 	bl	3bfe0 <assert_post_action>
   25376:	e7e6      	b.n	25346 <onoff_request+0x112>
   25378:	00042210 	.word	0x00042210
   2537c:	00041c84 	.word	0x00041c84
   25380:	000421ec 	.word	0x000421ec

00025384 <time_days_from_civil>:
 * @see http://howardhinnant.github.io/date_algorithms.html#days_from_civil
 */
static int64_t time_days_from_civil(int64_t y,
				    unsigned int m,
				    unsigned int d)
{
   25384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25388:	4616      	mov	r6, r2
   2538a:	461f      	mov	r7, r3
	y -= m <= 2;
   2538c:	2e02      	cmp	r6, #2
   2538e:	bf8c      	ite	hi
   25390:	2300      	movhi	r3, #0
   25392:	2301      	movls	r3, #1
   25394:	2200      	movs	r2, #0
   25396:	ebb0 0803 	subs.w	r8, r0, r3
   2539a:	eb61 0902 	sbc.w	r9, r1, r2

	int64_t era = (y >= 0 ? y : y - 399) / 400;
   2539e:	f1b8 0f00 	cmp.w	r8, #0
   253a2:	f179 0300 	sbcs.w	r3, r9, #0
   253a6:	db4e      	blt.n	25446 <time_days_from_civil+0xc2>
   253a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
   253ac:	2300      	movs	r3, #0
   253ae:	4640      	mov	r0, r8
   253b0:	4649      	mov	r1, r9
   253b2:	f7fb fe25 	bl	21000 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   253b6:	4b2b      	ldr	r3, [pc, #172]	; (25464 <time_days_from_civil+0xe0>)
   253b8:	fb03 8800 	mla	r8, r3, r0, r8
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   253bc:	2e02      	cmp	r6, #2
   253be:	d94e      	bls.n	2545e <time_days_from_civil+0xda>
   253c0:	f06f 0202 	mvn.w	r2, #2
   253c4:	4416      	add	r6, r2
   253c6:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   253ca:	eb06 1306 	add.w	r3, r6, r6, lsl #4
   253ce:	3302      	adds	r3, #2
   253d0:	4e25      	ldr	r6, [pc, #148]	; (25468 <time_days_from_civil+0xe4>)
   253d2:	fba6 2303 	umull	r2, r3, r6, r3
   253d6:	eb07 0793 	add.w	r7, r7, r3, lsr #2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   253da:	ea4f 0398 	mov.w	r3, r8, lsr #2
   253de:	f240 126d 	movw	r2, #365	; 0x16d
   253e2:	fb02 3208 	mla	r2, r2, r8, r3
   253e6:	4b21      	ldr	r3, [pc, #132]	; (2546c <time_days_from_civil+0xe8>)
   253e8:	fba3 3808 	umull	r3, r8, r3, r8
   253ec:	eba2 1858 	sub.w	r8, r2, r8, lsr #5
   253f0:	4447      	add	r7, r8

	return era * 146097 + (time_t)doe - 719468;
   253f2:	00cb      	lsls	r3, r1, #3
   253f4:	00c2      	lsls	r2, r0, #3
   253f6:	ea43 7650 	orr.w	r6, r3, r0, lsr #29
   253fa:	1813      	adds	r3, r2, r0
   253fc:	eb46 0201 	adc.w	r2, r6, r1
   25400:	0116      	lsls	r6, r2, #4
   25402:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
   25406:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   2540a:	4632      	mov	r2, r6
   2540c:	eb1c 0300 	adds.w	r3, ip, r0
   25410:	eb41 0202 	adc.w	r2, r1, r2
   25414:	0116      	lsls	r6, r2, #4
   25416:	ea46 7613 	orr.w	r6, r6, r3, lsr #28
   2541a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   2541e:	ebbc 0300 	subs.w	r3, ip, r0
   25422:	eb66 0201 	sbc.w	r2, r6, r1
   25426:	0191      	lsls	r1, r2, #6
   25428:	ea41 6193 	orr.w	r1, r1, r3, lsr #26
   2542c:	0198      	lsls	r0, r3, #6
   2542e:	1ac4      	subs	r4, r0, r3
   25430:	eb61 0502 	sbc.w	r5, r1, r2
   25434:	19e4      	adds	r4, r4, r7
   25436:	f145 0500 	adc.w	r5, r5, #0
   2543a:	480d      	ldr	r0, [pc, #52]	; (25470 <time_days_from_civil+0xec>)
}
   2543c:	1820      	adds	r0, r4, r0
   2543e:	f145 31ff 	adc.w	r1, r5, #4294967295
   25442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   25446:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   2544a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2544e:	2300      	movs	r3, #0
   25450:	eb18 0000 	adds.w	r0, r8, r0
   25454:	f149 31ff 	adc.w	r1, r9, #4294967295
   25458:	f7fb fdd2 	bl	21000 <__aeabi_ldivmod>
   2545c:	e7ab      	b.n	253b6 <time_days_from_civil+0x32>
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2545e:	2209      	movs	r2, #9
   25460:	e7b0      	b.n	253c4 <time_days_from_civil+0x40>
   25462:	bf00      	nop
   25464:	fffffe70 	.word	0xfffffe70
   25468:	cccccccd 	.word	0xcccccccd
   2546c:	51eb851f 	.word	0x51eb851f
   25470:	fff50594 	.word	0xfff50594

00025474 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   25474:	b3b1      	cbz	r1, 254e4 <sys_heap_free+0x70>
{
   25476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   2547a:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   2547c:	4620      	mov	r0, r4
   2547e:	f016 fcde 	bl	3be3e <mem_to_chunkid>
   25482:	4605      	mov	r5, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   25484:	00c6      	lsls	r6, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   25486:	1cb7      	adds	r7, r6, #2
   25488:	5be3      	ldrh	r3, [r4, r7]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   2548a:	f013 0f01 	tst.w	r3, #1
   2548e:	d012      	beq.n	254b6 <sys_heap_free+0x42>
   25490:	5be3      	ldrh	r3, [r4, r7]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   25492:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   25496:	f834 2033 	ldrh.w	r2, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2549a:	1a9b      	subs	r3, r3, r2
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   2549c:	429d      	cmp	r5, r3
   2549e:	d116      	bne.n	254ce <sys_heap_free+0x5a>
	void *cmem = &buf[c];
   254a0:	4426      	add	r6, r4
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   254a2:	8873      	ldrh	r3, [r6, #2]
   254a4:	f023 0301 	bic.w	r3, r3, #1
   254a8:	8073      	strh	r3, [r6, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   254aa:	4629      	mov	r1, r5
   254ac:	4620      	mov	r0, r4
   254ae:	f016 fce2 	bl	3be76 <free_chunk>
}
   254b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(chunk_used(h, c),
   254b6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 254ec <sys_heap_free+0x78>
   254ba:	22a3      	movs	r2, #163	; 0xa3
   254bc:	4641      	mov	r1, r8
   254be:	480a      	ldr	r0, [pc, #40]	; (254e8 <sys_heap_free+0x74>)
   254c0:	f016 fb3a 	bl	3bb38 <printk>
   254c4:	21a3      	movs	r1, #163	; 0xa3
   254c6:	4640      	mov	r0, r8
   254c8:	f016 fd8a 	bl	3bfe0 <assert_post_action>
   254cc:	e7e0      	b.n	25490 <sys_heap_free+0x1c>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   254ce:	4f07      	ldr	r7, [pc, #28]	; (254ec <sys_heap_free+0x78>)
   254d0:	22ab      	movs	r2, #171	; 0xab
   254d2:	4639      	mov	r1, r7
   254d4:	4804      	ldr	r0, [pc, #16]	; (254e8 <sys_heap_free+0x74>)
   254d6:	f016 fb2f 	bl	3bb38 <printk>
   254da:	21ab      	movs	r1, #171	; 0xab
   254dc:	4638      	mov	r0, r7
   254de:	f016 fd7f 	bl	3bfe0 <assert_post_action>
   254e2:	e7dd      	b.n	254a0 <sys_heap_free+0x2c>
   254e4:	4770      	bx	lr
   254e6:	bf00      	nop
   254e8:	00041c84 	.word	0x00041c84
   254ec:	00042238 	.word	0x00042238

000254f0 <sys_heap_aligned_alloc>:
#endif
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   254f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   254f4:	460c      	mov	r4, r1
   254f6:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   254f8:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   254fa:	424b      	negs	r3, r1
   254fc:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   25500:	ea31 0303 	bics.w	r3, r1, r3
   25504:	d041      	beq.n	2558a <sys_heap_aligned_alloc+0x9a>
		align -= rew;
   25506:	eba1 0408 	sub.w	r4, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   2550a:	f1b8 0f03 	cmp.w	r8, #3
   2550e:	d847      	bhi.n	255a0 <sys_heap_aligned_alloc+0xb0>
   25510:	4647      	mov	r7, r8
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   25512:	1e63      	subs	r3, r4, #1
   25514:	4223      	tst	r3, r4
   25516:	d145      	bne.n	255a4 <sys_heap_aligned_alloc+0xb4>

	if (bytes == 0 || size_too_big(h, bytes)) {
   25518:	2d00      	cmp	r5, #0
   2551a:	d065      	beq.n	255e8 <sys_heap_aligned_alloc+0xf8>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   2551c:	68b3      	ldr	r3, [r6, #8]
   2551e:	ebb3 0fd5 	cmp.w	r3, r5, lsr #3
   25522:	d963      	bls.n	255ec <sys_heap_aligned_alloc+0xfc>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   25524:	1961      	adds	r1, r4, r5
   25526:	1bc9      	subs	r1, r1, r7
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25528:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2552a:	08c9      	lsrs	r1, r1, #3
   2552c:	4630      	mov	r0, r6
   2552e:	f016 fcd3 	bl	3bed8 <alloc_chunk>

	if (c0 == 0) {
   25532:	4607      	mov	r7, r0
   25534:	2800      	cmp	r0, #0
   25536:	d05b      	beq.n	255f0 <sys_heap_aligned_alloc+0x100>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   25538:	4601      	mov	r1, r0
   2553a:	4630      	mov	r0, r6
   2553c:	f016 fc0d 	bl	3bd5a <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25540:	4440      	add	r0, r8
   25542:	4420      	add	r0, r4
   25544:	3801      	subs	r0, #1
   25546:	4264      	negs	r4, r4
   25548:	4004      	ands	r4, r0
   2554a:	eba4 0408 	sub.w	r4, r4, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2554e:	4425      	add	r5, r4
   25550:	3507      	adds	r5, #7
   25552:	f025 0507 	bic.w	r5, r5, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   25556:	4621      	mov	r1, r4
   25558:	4630      	mov	r0, r6
   2555a:	f016 fc70 	bl	3be3e <mem_to_chunkid>
   2555e:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   25560:	1bad      	subs	r5, r5, r6
   25562:	10ed      	asrs	r5, r5, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   25564:	4287      	cmp	r7, r0
   25566:	d32b      	bcc.n	255c0 <sys_heap_aligned_alloc+0xd0>
	void *cmem = &buf[c];
   25568:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   2556c:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   25570:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   25572:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   25576:	429d      	cmp	r5, r3
   25578:	d32c      	bcc.n	255d4 <sys_heap_aligned_alloc+0xe4>
	void *cmem = &buf[c];
   2557a:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2557c:	8873      	ldrh	r3, [r6, #2]
   2557e:	f043 0301 	orr.w	r3, r3, #1
   25582:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   25584:	4620      	mov	r0, r4
   25586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2558a:	2904      	cmp	r1, #4
   2558c:	d903      	bls.n	25596 <sys_heap_aligned_alloc+0xa6>
		rew = 0;
   2558e:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   25592:	2704      	movs	r7, #4
   25594:	e7bd      	b.n	25512 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   25596:	4611      	mov	r1, r2
   25598:	f016 fcd6 	bl	3bf48 <sys_heap_alloc>
   2559c:	4604      	mov	r4, r0
   2559e:	e7f1      	b.n	25584 <sys_heap_aligned_alloc+0x94>
		gap = MIN(rew, chunk_header_bytes(h));
   255a0:	2704      	movs	r7, #4
   255a2:	e7b6      	b.n	25512 <sys_heap_aligned_alloc+0x22>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   255a4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 255f8 <sys_heap_aligned_alloc+0x108>
   255a8:	f240 1227 	movw	r2, #295	; 0x127
   255ac:	4649      	mov	r1, r9
   255ae:	4811      	ldr	r0, [pc, #68]	; (255f4 <sys_heap_aligned_alloc+0x104>)
   255b0:	f016 fac2 	bl	3bb38 <printk>
   255b4:	f240 1127 	movw	r1, #295	; 0x127
   255b8:	4648      	mov	r0, r9
   255ba:	f016 fd11 	bl	3bfe0 <assert_post_action>
   255be:	e7ab      	b.n	25518 <sys_heap_aligned_alloc+0x28>
		split_chunks(h, c0, c);
   255c0:	4602      	mov	r2, r0
   255c2:	4639      	mov	r1, r7
   255c4:	4630      	mov	r0, r6
   255c6:	f016 fc10 	bl	3bdea <split_chunks>
		free_list_add(h, c0);
   255ca:	4639      	mov	r1, r7
   255cc:	4630      	mov	r0, r6
   255ce:	f016 fc46 	bl	3be5e <free_list_add>
   255d2:	e7c9      	b.n	25568 <sys_heap_aligned_alloc+0x78>
		split_chunks(h, c, c_end);
   255d4:	462a      	mov	r2, r5
   255d6:	4641      	mov	r1, r8
   255d8:	4630      	mov	r0, r6
   255da:	f016 fc06 	bl	3bdea <split_chunks>
		free_list_add(h, c_end);
   255de:	4629      	mov	r1, r5
   255e0:	4630      	mov	r0, r6
   255e2:	f016 fc3c 	bl	3be5e <free_list_add>
   255e6:	e7c8      	b.n	2557a <sys_heap_aligned_alloc+0x8a>
		return NULL;
   255e8:	2400      	movs	r4, #0
   255ea:	e7cb      	b.n	25584 <sys_heap_aligned_alloc+0x94>
   255ec:	2400      	movs	r4, #0
   255ee:	e7c9      	b.n	25584 <sys_heap_aligned_alloc+0x94>
		return NULL;
   255f0:	2400      	movs	r4, #0
   255f2:	e7c7      	b.n	25584 <sys_heap_aligned_alloc+0x94>
   255f4:	00041c84 	.word	0x00041c84
   255f8:	00042238 	.word	0x00042238

000255fc <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   255fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25600:	4606      	mov	r6, r0
   25602:	460c      	mov	r4, r1
   25604:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   25606:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   2560a:	d22a      	bcs.n	25662 <sys_heap_init+0x66>
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2560c:	2d04      	cmp	r5, #4
   2560e:	d935      	bls.n	2567c <sys_heap_init+0x80>
	bytes -= heap_footer_bytes(bytes);
   25610:	1f2a      	subs	r2, r5, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   25612:	1de5      	adds	r5, r4, #7
   25614:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25618:	4414      	add	r4, r2
   2561a:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2561e:	1b64      	subs	r4, r4, r5
   25620:	ea4f 09d4 	mov.w	r9, r4, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   25624:	2c17      	cmp	r4, #23
   25626:	d936      	bls.n	25696 <sys_heap_init+0x9a>

	struct z_heap *h = (struct z_heap *)addr;
   25628:	46a8      	mov	r8, r5
	heap->heap = h;
   2562a:	6035      	str	r5, [r6, #0]
	h->end_chunk = heap_sz;
   2562c:	f8c5 9008 	str.w	r9, [r5, #8]
	h->avail_buckets = 0;
   25630:	2300      	movs	r3, #0
   25632:	60eb      	str	r3, [r5, #12]
	return 31 - __builtin_clz(usable_sz);
   25634:	fab9 f689 	clz	r6, r9
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   25638:	f1c6 0720 	rsb	r7, r6, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2563c:	f1c6 0624 	rsb	r6, r6, #36	; 0x24
   25640:	00b6      	lsls	r6, r6, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25642:	3607      	adds	r6, #7
   25644:	ea4f 0ad6 	mov.w	sl, r6, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   25648:	f10a 0301 	add.w	r3, sl, #1
   2564c:	454b      	cmp	r3, r9
   2564e:	d82f      	bhi.n	256b0 <sys_heap_init+0xb4>
{
   25650:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   25652:	42bb      	cmp	r3, r7
   25654:	da3a      	bge.n	256cc <sys_heap_init+0xd0>
		h->buckets[i].next = 0;
   25656:	1d1a      	adds	r2, r3, #4
   25658:	2100      	movs	r1, #0
   2565a:	f848 1022 	str.w	r1, [r8, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   2565e:	3301      	adds	r3, #1
   25660:	e7f7      	b.n	25652 <sys_heap_init+0x56>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   25662:	4f2a      	ldr	r7, [pc, #168]	; (2570c <sys_heap_init+0x110>)
   25664:	f240 12a5 	movw	r2, #421	; 0x1a5
   25668:	4639      	mov	r1, r7
   2566a:	4829      	ldr	r0, [pc, #164]	; (25710 <sys_heap_init+0x114>)
   2566c:	f016 fa64 	bl	3bb38 <printk>
   25670:	f240 11a5 	movw	r1, #421	; 0x1a5
   25674:	4638      	mov	r0, r7
   25676:	f016 fcb3 	bl	3bfe0 <assert_post_action>
   2567a:	e7c7      	b.n	2560c <sys_heap_init+0x10>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   2567c:	4f23      	ldr	r7, [pc, #140]	; (2570c <sys_heap_init+0x110>)
   2567e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   25682:	4639      	mov	r1, r7
   25684:	4822      	ldr	r0, [pc, #136]	; (25710 <sys_heap_init+0x114>)
   25686:	f016 fa57 	bl	3bb38 <printk>
   2568a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   2568e:	4638      	mov	r0, r7
   25690:	f016 fca6 	bl	3bfe0 <assert_post_action>
   25694:	e7bc      	b.n	25610 <sys_heap_init+0x14>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   25696:	4f1d      	ldr	r7, [pc, #116]	; (2570c <sys_heap_init+0x110>)
   25698:	f240 12b5 	movw	r2, #437	; 0x1b5
   2569c:	4639      	mov	r1, r7
   2569e:	481c      	ldr	r0, [pc, #112]	; (25710 <sys_heap_init+0x114>)
   256a0:	f016 fa4a 	bl	3bb38 <printk>
   256a4:	f240 11b5 	movw	r1, #437	; 0x1b5
   256a8:	4638      	mov	r0, r7
   256aa:	f016 fc99 	bl	3bfe0 <assert_post_action>
   256ae:	e7bb      	b.n	25628 <sys_heap_init+0x2c>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   256b0:	f8df b058 	ldr.w	fp, [pc, #88]	; 2570c <sys_heap_init+0x110>
   256b4:	f240 12c5 	movw	r2, #453	; 0x1c5
   256b8:	4659      	mov	r1, fp
   256ba:	4815      	ldr	r0, [pc, #84]	; (25710 <sys_heap_init+0x114>)
   256bc:	f016 fa3c 	bl	3bb38 <printk>
   256c0:	f240 11c5 	movw	r1, #453	; 0x1c5
   256c4:	4658      	mov	r0, fp
   256c6:	f016 fc8b 	bl	3bfe0 <assert_post_action>
   256ca:	e7c1      	b.n	25650 <sys_heap_init+0x54>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   256cc:	ea4f 034a 	mov.w	r3, sl, lsl #1
		((uint16_t *)cmem)[f] = val;
   256d0:	b29b      	uxth	r3, r3
   256d2:	2200      	movs	r2, #0
   256d4:	802a      	strh	r2, [r5, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   256d6:	f043 0301 	orr.w	r3, r3, #1
   256da:	806b      	strh	r3, [r5, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   256dc:	eba9 090a 	sub.w	r9, r9, sl
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   256e0:	ea4f 0249 	mov.w	r2, r9, lsl #1
	void *cmem = &buf[c];
   256e4:	f026 0607 	bic.w	r6, r6, #7
		((uint16_t *)cmem)[f] = val;
   256e8:	1cb3      	adds	r3, r6, #2
   256ea:	52ea      	strh	r2, [r5, r3]
   256ec:	f825 a006 	strh.w	sl, [r5, r6]
	void *cmem = &buf[c];
   256f0:	f024 0307 	bic.w	r3, r4, #7
		((uint16_t *)cmem)[f] = val;
   256f4:	442c      	add	r4, r5
   256f6:	f825 9003 	strh.w	r9, [r5, r3]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   256fa:	2301      	movs	r3, #1
   256fc:	8063      	strh	r3, [r4, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   256fe:	4651      	mov	r1, sl
   25700:	4628      	mov	r0, r5
   25702:	f016 fbac 	bl	3be5e <free_list_add>
}
   25706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2570a:	bf00      	nop
   2570c:	00042238 	.word	0x00042238
   25710:	00041c84 	.word	0x00041c84

00025714 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   25714:	b410      	push	{r4}
   25716:	4604      	mov	r4, r0
	const char *sp = *str;
   25718:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   2571a:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   2571c:	7813      	ldrb	r3, [r2, #0]
   2571e:	4907      	ldr	r1, [pc, #28]	; (2573c <extract_decimal+0x28>)
   25720:	5c59      	ldrb	r1, [r3, r1]
   25722:	f011 0f04 	tst.w	r1, #4
   25726:	d006      	beq.n	25736 <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   25728:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   2572c:	3201      	adds	r2, #1
   2572e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   25732:	3830      	subs	r0, #48	; 0x30
   25734:	e7f2      	b.n	2571c <extract_decimal+0x8>
	}
	*str = sp;
   25736:	6022      	str	r2, [r4, #0]
	return val;
}
   25738:	bc10      	pop	{r4}
   2573a:	4770      	bx	lr
   2573c:	00045e47 	.word	0x00045e47

00025740 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   25740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25744:	b083      	sub	sp, #12
   25746:	4604      	mov	r4, r0
   25748:	460d      	mov	r5, r1
   2574a:	9201      	str	r2, [sp, #4]
   2574c:	469a      	mov	sl, r3
   2574e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   25752:	78d3      	ldrb	r3, [r2, #3]
   25754:	4a31      	ldr	r2, [pc, #196]	; (2581c <encode_uint+0xdc>)
   25756:	f813 b002 	ldrb.w	fp, [r3, r2]
   2575a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   2575e:	2b6f      	cmp	r3, #111	; 0x6f
   25760:	d00f      	beq.n	25782 <encode_uint+0x42>
   25762:	d906      	bls.n	25772 <encode_uint+0x32>
   25764:	2b70      	cmp	r3, #112	; 0x70
   25766:	d00f      	beq.n	25788 <encode_uint+0x48>
   25768:	2b78      	cmp	r3, #120	; 0x78
   2576a:	d110      	bne.n	2578e <encode_uint+0x4e>
		return 16;
   2576c:	f04f 0910 	mov.w	r9, #16
   25770:	e023      	b.n	257ba <encode_uint+0x7a>
	switch (specifier) {
   25772:	2b58      	cmp	r3, #88	; 0x58
   25774:	d002      	beq.n	2577c <encode_uint+0x3c>
   25776:	f04f 090a 	mov.w	r9, #10
   2577a:	e01e      	b.n	257ba <encode_uint+0x7a>
		return 16;
   2577c:	f04f 0910 	mov.w	r9, #16
   25780:	e01b      	b.n	257ba <encode_uint+0x7a>
		return 8;
   25782:	f04f 0908 	mov.w	r9, #8
   25786:	e018      	b.n	257ba <encode_uint+0x7a>
		return 16;
   25788:	f04f 0910 	mov.w	r9, #16
   2578c:	e015      	b.n	257ba <encode_uint+0x7a>
	switch (specifier) {
   2578e:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   25792:	e012      	b.n	257ba <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   25794:	b2d2      	uxtb	r2, r2
   25796:	3230      	adds	r2, #48	; 0x30
   25798:	b2d2      	uxtb	r2, r2
   2579a:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   2579e:	4632      	mov	r2, r6
   257a0:	463b      	mov	r3, r7
   257a2:	4620      	mov	r0, r4
   257a4:	4629      	mov	r1, r5
   257a6:	f7fb fc7b 	bl	210a0 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   257aa:	42bd      	cmp	r5, r7
   257ac:	bf08      	it	eq
   257ae:	42b4      	cmpeq	r4, r6
   257b0:	d318      	bcc.n	257e4 <encode_uint+0xa4>
   257b2:	45d0      	cmp	r8, sl
   257b4:	d916      	bls.n	257e4 <encode_uint+0xa4>
		value /= radix;
   257b6:	4604      	mov	r4, r0
   257b8:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   257ba:	464e      	mov	r6, r9
   257bc:	2700      	movs	r7, #0
   257be:	464a      	mov	r2, r9
   257c0:	463b      	mov	r3, r7
   257c2:	4620      	mov	r0, r4
   257c4:	4629      	mov	r1, r5
   257c6:	f7fb fc6b 	bl	210a0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   257ca:	2a09      	cmp	r2, #9
   257cc:	d9e2      	bls.n	25794 <encode_uint+0x54>
   257ce:	f1bb 0f01 	cmp.w	fp, #1
   257d2:	d003      	beq.n	257dc <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   257d4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   257d6:	3257      	adds	r2, #87	; 0x57
   257d8:	b2d2      	uxtb	r2, r2
   257da:	e7de      	b.n	2579a <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   257dc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   257de:	3237      	adds	r2, #55	; 0x37
   257e0:	b2d2      	uxtb	r2, r2
   257e2:	e7da      	b.n	2579a <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   257e4:	9b01      	ldr	r3, [sp, #4]
   257e6:	781b      	ldrb	r3, [r3, #0]
   257e8:	f013 0f20 	tst.w	r3, #32
   257ec:	d005      	beq.n	257fa <encode_uint+0xba>
		if (radix == 8) {
   257ee:	f1b9 0f08 	cmp.w	r9, #8
   257f2:	d006      	beq.n	25802 <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   257f4:	f1b9 0f10 	cmp.w	r9, #16
   257f8:	d009      	beq.n	2580e <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   257fa:	4640      	mov	r0, r8
   257fc:	b003      	add	sp, #12
   257fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   25802:	9a01      	ldr	r2, [sp, #4]
   25804:	7893      	ldrb	r3, [r2, #2]
   25806:	f043 0308 	orr.w	r3, r3, #8
   2580a:	7093      	strb	r3, [r2, #2]
   2580c:	e7f5      	b.n	257fa <encode_uint+0xba>
			conv->altform_0c = true;
   2580e:	9a01      	ldr	r2, [sp, #4]
   25810:	7893      	ldrb	r3, [r2, #2]
   25812:	f043 0310 	orr.w	r3, r3, #16
   25816:	7093      	strb	r3, [r2, #2]
   25818:	e7ef      	b.n	257fa <encode_uint+0xba>
   2581a:	bf00      	nop
   2581c:	00045e47 	.word	0x00045e47

00025820 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   25820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25824:	b093      	sub	sp, #76	; 0x4c
   25826:	4606      	mov	r6, r0
   25828:	460d      	mov	r5, r1
   2582a:	4692      	mov	sl, r2
   2582c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   2582e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   25830:	f89a 0000 	ldrb.w	r0, [sl]
   25834:	2800      	cmp	r0, #0
   25836:	f000 84d6 	beq.w	261e6 <cbvprintf+0x9c6>
		if (*fp != '%') {
   2583a:	2825      	cmp	r0, #37	; 0x25
   2583c:	d008      	beq.n	25850 <cbvprintf+0x30>
			OUTC(*fp++);
   2583e:	f10a 0a01 	add.w	sl, sl, #1
   25842:	4629      	mov	r1, r5
   25844:	47b0      	blx	r6
   25846:	2800      	cmp	r0, #0
   25848:	f2c0 84ce 	blt.w	261e8 <cbvprintf+0x9c8>
   2584c:	3401      	adds	r4, #1
			continue;
   2584e:	e7ef      	b.n	25830 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   25850:	2300      	movs	r3, #0
   25852:	9306      	str	r3, [sp, #24]
   25854:	9307      	str	r3, [sp, #28]
   25856:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   25858:	9308      	str	r3, [sp, #32]
   2585a:	9309      	str	r3, [sp, #36]	; 0x24
   2585c:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   2585e:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   25862:	f89a 3001 	ldrb.w	r3, [sl, #1]
   25866:	2b25      	cmp	r3, #37	; 0x25
   25868:	d001      	beq.n	2586e <cbvprintf+0x4e>
	bool loop = true;
   2586a:	2701      	movs	r7, #1
   2586c:	e02c      	b.n	258c8 <cbvprintf+0xa8>
		conv->specifier = *sp++;
   2586e:	f10a 0802 	add.w	r8, sl, #2
   25872:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   25876:	e1a8      	b.n	25bca <cbvprintf+0x3aa>
			conv->flag_dash = true;
   25878:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2587c:	f043 0304 	orr.w	r3, r3, #4
   25880:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   25884:	b1ff      	cbz	r7, 258c6 <cbvprintf+0xa6>
			++sp;
   25886:	f108 0801 	add.w	r8, r8, #1
   2588a:	e01c      	b.n	258c6 <cbvprintf+0xa6>
			conv->flag_plus = true;
   2588c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25890:	f043 0308 	orr.w	r3, r3, #8
   25894:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   25898:	e7f4      	b.n	25884 <cbvprintf+0x64>
			conv->flag_space = true;
   2589a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2589e:	f043 0310 	orr.w	r3, r3, #16
   258a2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   258a6:	e7ed      	b.n	25884 <cbvprintf+0x64>
			conv->flag_hash = true;
   258a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   258ac:	f043 0320 	orr.w	r3, r3, #32
   258b0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   258b4:	e7e6      	b.n	25884 <cbvprintf+0x64>
			conv->flag_zero = true;
   258b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   258ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   258be:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   258c2:	e7df      	b.n	25884 <cbvprintf+0x64>
		switch (*sp) {
   258c4:	2700      	movs	r7, #0
	} while (loop);
   258c6:	b34f      	cbz	r7, 2591c <cbvprintf+0xfc>
		switch (*sp) {
   258c8:	f898 3000 	ldrb.w	r3, [r8]
   258cc:	3b20      	subs	r3, #32
   258ce:	2b10      	cmp	r3, #16
   258d0:	d8f8      	bhi.n	258c4 <cbvprintf+0xa4>
   258d2:	a201      	add	r2, pc, #4	; (adr r2, 258d8 <cbvprintf+0xb8>)
   258d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   258d8:	0002589b 	.word	0x0002589b
   258dc:	000258c5 	.word	0x000258c5
   258e0:	000258c5 	.word	0x000258c5
   258e4:	000258a9 	.word	0x000258a9
   258e8:	000258c5 	.word	0x000258c5
   258ec:	000258c5 	.word	0x000258c5
   258f0:	000258c5 	.word	0x000258c5
   258f4:	000258c5 	.word	0x000258c5
   258f8:	000258c5 	.word	0x000258c5
   258fc:	000258c5 	.word	0x000258c5
   25900:	000258c5 	.word	0x000258c5
   25904:	0002588d 	.word	0x0002588d
   25908:	000258c5 	.word	0x000258c5
   2590c:	00025879 	.word	0x00025879
   25910:	000258c5 	.word	0x000258c5
   25914:	000258c5 	.word	0x000258c5
   25918:	000258b7 	.word	0x000258b7
	if (conv->flag_zero && conv->flag_dash) {
   2591c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25920:	f003 0344 	and.w	r3, r3, #68	; 0x44
   25924:	2b44      	cmp	r3, #68	; 0x44
   25926:	d06d      	beq.n	25a04 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   25928:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   2592c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25934:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   25938:	f898 3000 	ldrb.w	r3, [r8]
   2593c:	2b2a      	cmp	r3, #42	; 0x2a
   2593e:	d068      	beq.n	25a12 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   25940:	a805      	add	r0, sp, #20
   25942:	f7ff fee7 	bl	25714 <extract_decimal>
	if (sp != wp) {
   25946:	9b05      	ldr	r3, [sp, #20]
   25948:	4598      	cmp	r8, r3
   2594a:	d012      	beq.n	25972 <cbvprintf+0x152>
		conv->width_present = true;
   2594c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25954:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   25958:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   2595a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   2595e:	2800      	cmp	r0, #0
   25960:	db60      	blt.n	25a24 <cbvprintf+0x204>
   25962:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   25964:	4313      	orrs	r3, r2
   25966:	f89d 2020 	ldrb.w	r2, [sp, #32]
   2596a:	f363 0241 	bfi	r2, r3, #1, #1
   2596e:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   25972:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   25974:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   25976:	781b      	ldrb	r3, [r3, #0]
   25978:	2b2e      	cmp	r3, #46	; 0x2e
   2597a:	bf14      	ite	ne
   2597c:	2300      	movne	r3, #0
   2597e:	2301      	moveq	r3, #1
   25980:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   25984:	f363 0241 	bfi	r2, r3, #1, #1
   25988:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   2598c:	2b00      	cmp	r3, #0
   2598e:	d04b      	beq.n	25a28 <cbvprintf+0x208>
	++sp;
   25990:	9b05      	ldr	r3, [sp, #20]
   25992:	1c5a      	adds	r2, r3, #1
   25994:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   25996:	785b      	ldrb	r3, [r3, #1]
   25998:	2b2a      	cmp	r3, #42	; 0x2a
   2599a:	d048      	beq.n	25a2e <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   2599c:	a805      	add	r0, sp, #20
   2599e:	f7ff feb9 	bl	25714 <extract_decimal>
	conv->prec_value = prec;
   259a2:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   259a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   259a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   259ac:	2800      	cmp	r0, #0
   259ae:	db47      	blt.n	25a40 <cbvprintf+0x220>
   259b0:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   259b2:	4313      	orrs	r3, r2
   259b4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   259b8:	f363 0241 	bfi	r2, r3, #1, #1
   259bc:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   259c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   259c4:	f898 3000 	ldrb.w	r3, [r8]
   259c8:	3b4c      	subs	r3, #76	; 0x4c
   259ca:	2b2e      	cmp	r3, #46	; 0x2e
   259cc:	f200 80dc 	bhi.w	25b88 <cbvprintf+0x368>
   259d0:	e8df f003 	tbb	[pc, r3]
   259d4:	dadadaca 	.word	0xdadadaca
   259d8:	dadadada 	.word	0xdadadada
   259dc:	dadadada 	.word	0xdadadada
   259e0:	dadadada 	.word	0xdadadada
   259e4:	dadadada 	.word	0xdadadada
   259e8:	dadadada 	.word	0xdadadada
   259ec:	dadadada 	.word	0xdadadada
   259f0:	da6ada38 	.word	0xda6ada38
   259f4:	dadada51 	.word	0xdadada51
   259f8:	dadadada 	.word	0xdadadada
   259fc:	dadadac0 	.word	0xdadadac0
   25a00:	dada      	.short	0xdada
   25a02:	b6          	.byte	0xb6
   25a03:	00          	.byte	0x00
		conv->flag_zero = false;
   25a04:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25a08:	f36f 1386 	bfc	r3, #6, #1
   25a0c:	f88d 3020 	strb.w	r3, [sp, #32]
   25a10:	e78a      	b.n	25928 <cbvprintf+0x108>
		conv->width_star = true;
   25a12:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25a16:	f043 0301 	orr.w	r3, r3, #1
   25a1a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   25a1e:	4643      	mov	r3, r8
   25a20:	3301      	adds	r3, #1
   25a22:	e7a7      	b.n	25974 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   25a24:	2201      	movs	r2, #1
   25a26:	e79d      	b.n	25964 <cbvprintf+0x144>
		return sp;
   25a28:	f8dd 8014 	ldr.w	r8, [sp, #20]
   25a2c:	e7ca      	b.n	259c4 <cbvprintf+0x1a4>
		conv->prec_star = true;
   25a2e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25a32:	f043 0304 	orr.w	r3, r3, #4
   25a36:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   25a3a:	f102 0801 	add.w	r8, r2, #1
   25a3e:	e7c1      	b.n	259c4 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   25a40:	2201      	movs	r2, #1
   25a42:	e7b6      	b.n	259b2 <cbvprintf+0x192>
		if (*++sp == 'h') {
   25a44:	f108 0201 	add.w	r2, r8, #1
   25a48:	f898 3001 	ldrb.w	r3, [r8, #1]
   25a4c:	2b68      	cmp	r3, #104	; 0x68
   25a4e:	d008      	beq.n	25a62 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   25a50:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25a54:	2102      	movs	r1, #2
   25a56:	f361 03c6 	bfi	r3, r1, #3, #4
   25a5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   25a5e:	4690      	mov	r8, r2
   25a60:	e02b      	b.n	25aba <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   25a62:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25a66:	2201      	movs	r2, #1
   25a68:	f362 03c6 	bfi	r3, r2, #3, #4
   25a6c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   25a70:	f108 0802 	add.w	r8, r8, #2
   25a74:	e021      	b.n	25aba <cbvprintf+0x29a>
		if (*++sp == 'l') {
   25a76:	f108 0201 	add.w	r2, r8, #1
   25a7a:	f898 3001 	ldrb.w	r3, [r8, #1]
   25a7e:	2b6c      	cmp	r3, #108	; 0x6c
   25a80:	d008      	beq.n	25a94 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   25a82:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25a86:	2103      	movs	r1, #3
   25a88:	f361 03c6 	bfi	r3, r1, #3, #4
   25a8c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   25a90:	4690      	mov	r8, r2
   25a92:	e012      	b.n	25aba <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   25a94:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25a98:	2204      	movs	r2, #4
   25a9a:	f362 03c6 	bfi	r3, r2, #3, #4
   25a9e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   25aa2:	f108 0802 	add.w	r8, r8, #2
   25aa6:	e008      	b.n	25aba <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   25aa8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25aac:	2205      	movs	r2, #5
   25aae:	f362 03c6 	bfi	r3, r2, #3, #4
   25ab2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   25ab6:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   25aba:	f818 3b01 	ldrb.w	r3, [r8], #1
   25abe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   25ac2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   25ac6:	2a37      	cmp	r2, #55	; 0x37
   25ac8:	f200 8150 	bhi.w	25d6c <cbvprintf+0x54c>
   25acc:	e8df f012 	tbh	[pc, r2, lsl #1]
   25ad0:	014e0126 	.word	0x014e0126
   25ad4:	014e014e 	.word	0x014e014e
   25ad8:	01260126 	.word	0x01260126
   25adc:	014e0126 	.word	0x014e0126
   25ae0:	014e014e 	.word	0x014e014e
   25ae4:	014e014e 	.word	0x014e014e
   25ae8:	014e014e 	.word	0x014e014e
   25aec:	014e014e 	.word	0x014e014e
   25af0:	014e014e 	.word	0x014e014e
   25af4:	014e014e 	.word	0x014e014e
   25af8:	014e014e 	.word	0x014e014e
   25afc:	0113014e 	.word	0x0113014e
   25b00:	014e014e 	.word	0x014e014e
   25b04:	014e014e 	.word	0x014e014e
   25b08:	014e014e 	.word	0x014e014e
   25b0c:	014e014e 	.word	0x014e014e
   25b10:	014e0126 	.word	0x014e0126
   25b14:	00630113 	.word	0x00630113
   25b18:	01260126 	.word	0x01260126
   25b1c:	014e0126 	.word	0x014e0126
   25b20:	014e0063 	.word	0x014e0063
   25b24:	014e014e 	.word	0x014e014e
   25b28:	012f014e 	.word	0x012f014e
   25b2c:	013f0113 	.word	0x013f0113
   25b30:	014e014e 	.word	0x014e014e
   25b34:	014e013f 	.word	0x014e013f
   25b38:	014e0113 	.word	0x014e0113
   25b3c:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   25b40:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25b44:	2206      	movs	r2, #6
   25b46:	f362 03c6 	bfi	r3, r2, #3, #4
   25b4a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   25b4e:	f108 0801 	add.w	r8, r8, #1
		break;
   25b52:	e7b2      	b.n	25aba <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   25b54:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25b58:	2207      	movs	r2, #7
   25b5a:	f362 03c6 	bfi	r3, r2, #3, #4
   25b5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   25b62:	f108 0801 	add.w	r8, r8, #1
		break;
   25b66:	e7a8      	b.n	25aba <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   25b68:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25b6c:	2208      	movs	r2, #8
   25b6e:	f362 03c6 	bfi	r3, r2, #3, #4
   25b72:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   25b76:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   25b7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25b7e:	f043 0302 	orr.w	r3, r3, #2
   25b82:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   25b86:	e798      	b.n	25aba <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   25b88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25b8c:	f36f 03c6 	bfc	r3, #3, #4
   25b90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   25b94:	e791      	b.n	25aba <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   25b96:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   25b9a:	2101      	movs	r1, #1
   25b9c:	f361 0202 	bfi	r2, r1, #0, #3
   25ba0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   25ba4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   25ba8:	f002 0278 	and.w	r2, r2, #120	; 0x78
   25bac:	2a40      	cmp	r2, #64	; 0x40
   25bae:	f000 80aa 	beq.w	25d06 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   25bb2:	2b63      	cmp	r3, #99	; 0x63
   25bb4:	f000 80ae 	beq.w	25d14 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   25bb8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25bbc:	f3c3 0240 	ubfx	r2, r3, #1, #1
   25bc0:	4317      	orrs	r7, r2
   25bc2:	f367 0341 	bfi	r3, r7, #1, #1
   25bc6:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   25bca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25bce:	f013 0f01 	tst.w	r3, #1
   25bd2:	f000 80da 	beq.w	25d8a <cbvprintf+0x56a>
			width = va_arg(ap, int);
   25bd6:	9b03      	ldr	r3, [sp, #12]
   25bd8:	1d1a      	adds	r2, r3, #4
   25bda:	9203      	str	r2, [sp, #12]
   25bdc:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   25bde:	2f00      	cmp	r7, #0
   25be0:	f2c0 80cb 	blt.w	25d7a <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   25be4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25be8:	f013 0f04 	tst.w	r3, #4
   25bec:	f000 80df 	beq.w	25dae <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   25bf0:	9b03      	ldr	r3, [sp, #12]
   25bf2:	1d1a      	adds	r2, r3, #4
   25bf4:	9203      	str	r2, [sp, #12]
   25bf6:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   25bfa:	f1bb 0f00 	cmp.w	fp, #0
   25bfe:	f2c0 80cd 	blt.w	25d9c <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   25c02:	2300      	movs	r3, #0
   25c04:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   25c06:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   25c08:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   25c0c:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   25c10:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   25c14:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   25c18:	2b01      	cmp	r3, #1
   25c1a:	f000 80d1 	beq.w	25dc0 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   25c1e:	2b02      	cmp	r3, #2
   25c20:	f000 8116 	beq.w	25e50 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   25c24:	2b04      	cmp	r3, #4
   25c26:	f000 8167 	beq.w	25ef8 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   25c2a:	2b03      	cmp	r3, #3
   25c2c:	f000 817e 	beq.w	25f2c <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   25c30:	f89d 9020 	ldrb.w	r9, [sp, #32]
   25c34:	f019 0303 	ands.w	r3, r9, #3
   25c38:	9302      	str	r3, [sp, #8]
   25c3a:	f040 817d 	bne.w	25f38 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   25c3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   25c42:	3b25      	subs	r3, #37	; 0x25
   25c44:	2b53      	cmp	r3, #83	; 0x53
   25c46:	f200 8233 	bhi.w	260b0 <cbvprintf+0x890>
   25c4a:	e8df f013 	tbh	[pc, r3, lsl #1]
   25c4e:	0181      	.short	0x0181
   25c50:	02310231 	.word	0x02310231
   25c54:	02310231 	.word	0x02310231
   25c58:	02310231 	.word	0x02310231
   25c5c:	02310231 	.word	0x02310231
   25c60:	02310231 	.word	0x02310231
   25c64:	02310231 	.word	0x02310231
   25c68:	02310231 	.word	0x02310231
   25c6c:	02310231 	.word	0x02310231
   25c70:	02310231 	.word	0x02310231
   25c74:	02310231 	.word	0x02310231
   25c78:	02310231 	.word	0x02310231
   25c7c:	02310231 	.word	0x02310231
   25c80:	02310231 	.word	0x02310231
   25c84:	02310231 	.word	0x02310231
   25c88:	02310231 	.word	0x02310231
   25c8c:	02310231 	.word	0x02310231
   25c90:	02310231 	.word	0x02310231
   25c94:	02310231 	.word	0x02310231
   25c98:	02310231 	.word	0x02310231
   25c9c:	02310231 	.word	0x02310231
   25ca0:	02310231 	.word	0x02310231
   25ca4:	02310231 	.word	0x02310231
   25ca8:	02310231 	.word	0x02310231
   25cac:	02310231 	.word	0x02310231
   25cb0:	02310231 	.word	0x02310231
   25cb4:	023101c7 	.word	0x023101c7
   25cb8:	02310231 	.word	0x02310231
   25cbc:	02310231 	.word	0x02310231
   25cc0:	02310231 	.word	0x02310231
   25cc4:	02310231 	.word	0x02310231
   25cc8:	01a10231 	.word	0x01a10231
   25ccc:	023101ab 	.word	0x023101ab
   25cd0:	02310231 	.word	0x02310231
   25cd4:	01ab0231 	.word	0x01ab0231
   25cd8:	02310231 	.word	0x02310231
   25cdc:	02310231 	.word	0x02310231
   25ce0:	01c70208 	.word	0x01c70208
   25ce4:	023101ea 	.word	0x023101ea
   25ce8:	018f0231 	.word	0x018f0231
   25cec:	01c70231 	.word	0x01c70231
   25cf0:	02310231 	.word	0x02310231
   25cf4:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   25cf6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   25cfa:	2102      	movs	r1, #2
   25cfc:	f361 0202 	bfi	r2, r1, #0, #3
   25d00:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   25d04:	e74e      	b.n	25ba4 <cbvprintf+0x384>
			conv->invalid = true;
   25d06:	f89d 1020 	ldrb.w	r1, [sp, #32]
   25d0a:	f041 0101 	orr.w	r1, r1, #1
   25d0e:	f88d 1020 	strb.w	r1, [sp, #32]
   25d12:	e74e      	b.n	25bb2 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   25d14:	1e17      	subs	r7, r2, #0
   25d16:	bf18      	it	ne
   25d18:	2701      	movne	r7, #1
   25d1a:	e74d      	b.n	25bb8 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   25d1c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   25d20:	2204      	movs	r2, #4
   25d22:	f362 0302 	bfi	r3, r2, #0, #3
   25d26:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   25d2a:	2701      	movs	r7, #1
			break;
   25d2c:	e744      	b.n	25bb8 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   25d2e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   25d32:	2203      	movs	r2, #3
   25d34:	f362 0302 	bfi	r3, r2, #0, #3
   25d38:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   25d3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25d40:	f003 0378 	and.w	r3, r3, #120	; 0x78
   25d44:	2b40      	cmp	r3, #64	; 0x40
   25d46:	f47f af37 	bne.w	25bb8 <cbvprintf+0x398>
			unsupported = true;
   25d4a:	2701      	movs	r7, #1
   25d4c:	e734      	b.n	25bb8 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   25d4e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   25d52:	2203      	movs	r2, #3
   25d54:	f362 0302 	bfi	r3, r2, #0, #3
   25d58:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   25d5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25d60:	f013 0f78 	tst.w	r3, #120	; 0x78
   25d64:	f43f af28 	beq.w	25bb8 <cbvprintf+0x398>
			unsupported = true;
   25d68:	2701      	movs	r7, #1
   25d6a:	e725      	b.n	25bb8 <cbvprintf+0x398>
		conv->invalid = true;
   25d6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25d70:	f043 0301 	orr.w	r3, r3, #1
   25d74:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   25d78:	e71e      	b.n	25bb8 <cbvprintf+0x398>
				conv->flag_dash = true;
   25d7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25d7e:	f043 0304 	orr.w	r3, r3, #4
   25d82:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   25d86:	427f      	negs	r7, r7
   25d88:	e72c      	b.n	25be4 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   25d8a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   25d8e:	2b00      	cmp	r3, #0
   25d90:	db02      	blt.n	25d98 <cbvprintf+0x578>
		int width = -1;
   25d92:	f04f 37ff 	mov.w	r7, #4294967295
   25d96:	e725      	b.n	25be4 <cbvprintf+0x3c4>
			width = conv->width_value;
   25d98:	9f09      	ldr	r7, [sp, #36]	; 0x24
   25d9a:	e723      	b.n	25be4 <cbvprintf+0x3c4>
				conv->prec_present = false;
   25d9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   25da0:	f36f 0341 	bfc	r3, #1, #1
   25da4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   25da8:	f04f 3bff 	mov.w	fp, #4294967295
   25dac:	e729      	b.n	25c02 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   25dae:	f013 0f02 	tst.w	r3, #2
   25db2:	d002      	beq.n	25dba <cbvprintf+0x59a>
			precision = conv->prec_value;
   25db4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   25db8:	e723      	b.n	25c02 <cbvprintf+0x3e2>
		int precision = -1;
   25dba:	f04f 3bff 	mov.w	fp, #4294967295
   25dbe:	e720      	b.n	25c02 <cbvprintf+0x3e2>
			switch (length_mod) {
   25dc0:	1ecb      	subs	r3, r1, #3
   25dc2:	2b04      	cmp	r3, #4
   25dc4:	d804      	bhi.n	25dd0 <cbvprintf+0x5b0>
   25dc6:	e8df f003 	tbb	[pc, r3]
   25dca:	1d0b      	.short	0x1d0b
   25dcc:	3529      	.short	0x3529
   25dce:	35          	.byte	0x35
   25dcf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   25dd0:	9b03      	ldr	r3, [sp, #12]
   25dd2:	1d1a      	adds	r2, r3, #4
   25dd4:	9203      	str	r2, [sp, #12]
   25dd6:	681a      	ldr	r2, [r3, #0]
   25dd8:	17d3      	asrs	r3, r2, #31
   25dda:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   25dde:	e006      	b.n	25dee <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   25de0:	9b03      	ldr	r3, [sp, #12]
   25de2:	1d1a      	adds	r2, r3, #4
   25de4:	9203      	str	r2, [sp, #12]
   25de6:	681a      	ldr	r2, [r3, #0]
   25de8:	17d3      	asrs	r3, r2, #31
   25dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   25dee:	2901      	cmp	r1, #1
   25df0:	d028      	beq.n	25e44 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   25df2:	2902      	cmp	r1, #2
   25df4:	f47f af1c 	bne.w	25c30 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   25df8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   25dfc:	17d3      	asrs	r3, r2, #31
   25dfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25e02:	e715      	b.n	25c30 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   25e04:	9b03      	ldr	r3, [sp, #12]
   25e06:	3307      	adds	r3, #7
   25e08:	f023 0307 	bic.w	r3, r3, #7
   25e0c:	f103 0208 	add.w	r2, r3, #8
   25e10:	9203      	str	r2, [sp, #12]
   25e12:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   25e16:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   25e1a:	e7e8      	b.n	25dee <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   25e1c:	9b03      	ldr	r3, [sp, #12]
   25e1e:	3307      	adds	r3, #7
   25e20:	f023 0307 	bic.w	r3, r3, #7
   25e24:	f103 0208 	add.w	r2, r3, #8
   25e28:	9203      	str	r2, [sp, #12]
   25e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   25e2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   25e32:	e7dc      	b.n	25dee <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   25e34:	9b03      	ldr	r3, [sp, #12]
   25e36:	1d1a      	adds	r2, r3, #4
   25e38:	9203      	str	r2, [sp, #12]
   25e3a:	681a      	ldr	r2, [r3, #0]
   25e3c:	17d3      	asrs	r3, r2, #31
				value->sint =
   25e3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   25e42:	e7d4      	b.n	25dee <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   25e44:	f89d 3018 	ldrb.w	r3, [sp, #24]
   25e48:	9306      	str	r3, [sp, #24]
   25e4a:	2300      	movs	r3, #0
   25e4c:	9307      	str	r3, [sp, #28]
   25e4e:	e6ef      	b.n	25c30 <cbvprintf+0x410>
			switch (length_mod) {
   25e50:	1ecb      	subs	r3, r1, #3
   25e52:	2b04      	cmp	r3, #4
   25e54:	d804      	bhi.n	25e60 <cbvprintf+0x640>
   25e56:	e8df f003 	tbb	[pc, r3]
   25e5a:	1f0b      	.short	0x1f0b
   25e5c:	4135      	.short	0x4135
   25e5e:	41          	.byte	0x41
   25e5f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   25e60:	9b03      	ldr	r3, [sp, #12]
   25e62:	1d1a      	adds	r2, r3, #4
   25e64:	9203      	str	r2, [sp, #12]
   25e66:	681b      	ldr	r3, [r3, #0]
   25e68:	9306      	str	r3, [sp, #24]
   25e6a:	2300      	movs	r3, #0
   25e6c:	9307      	str	r3, [sp, #28]
				break;
   25e6e:	e01e      	b.n	25eae <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   25e70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   25e74:	2b63      	cmp	r3, #99	; 0x63
   25e76:	d007      	beq.n	25e88 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   25e78:	9b03      	ldr	r3, [sp, #12]
   25e7a:	1d1a      	adds	r2, r3, #4
   25e7c:	9203      	str	r2, [sp, #12]
   25e7e:	681b      	ldr	r3, [r3, #0]
   25e80:	9306      	str	r3, [sp, #24]
   25e82:	2300      	movs	r3, #0
   25e84:	9307      	str	r3, [sp, #28]
   25e86:	e012      	b.n	25eae <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   25e88:	9b03      	ldr	r3, [sp, #12]
   25e8a:	1d1a      	adds	r2, r3, #4
   25e8c:	9203      	str	r2, [sp, #12]
   25e8e:	681b      	ldr	r3, [r3, #0]
   25e90:	9306      	str	r3, [sp, #24]
   25e92:	2300      	movs	r3, #0
   25e94:	9307      	str	r3, [sp, #28]
   25e96:	e00a      	b.n	25eae <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   25e98:	9b03      	ldr	r3, [sp, #12]
   25e9a:	3307      	adds	r3, #7
   25e9c:	f023 0307 	bic.w	r3, r3, #7
   25ea0:	f103 0208 	add.w	r2, r3, #8
   25ea4:	9203      	str	r2, [sp, #12]
   25ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   25eaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   25eae:	2901      	cmp	r1, #1
   25eb0:	d01c      	beq.n	25eec <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   25eb2:	2902      	cmp	r1, #2
   25eb4:	f47f aebc 	bne.w	25c30 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   25eb8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   25ebc:	9306      	str	r3, [sp, #24]
   25ebe:	2300      	movs	r3, #0
   25ec0:	9307      	str	r3, [sp, #28]
   25ec2:	e6b5      	b.n	25c30 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   25ec4:	9b03      	ldr	r3, [sp, #12]
   25ec6:	3307      	adds	r3, #7
   25ec8:	f023 0307 	bic.w	r3, r3, #7
   25ecc:	f103 0208 	add.w	r2, r3, #8
   25ed0:	9203      	str	r2, [sp, #12]
   25ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   25ed6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   25eda:	e7e8      	b.n	25eae <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   25edc:	9b03      	ldr	r3, [sp, #12]
   25ede:	1d1a      	adds	r2, r3, #4
   25ee0:	9203      	str	r2, [sp, #12]
   25ee2:	681b      	ldr	r3, [r3, #0]
				value->uint =
   25ee4:	9306      	str	r3, [sp, #24]
   25ee6:	2300      	movs	r3, #0
   25ee8:	9307      	str	r3, [sp, #28]
				break;
   25eea:	e7e0      	b.n	25eae <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   25eec:	f89d 3018 	ldrb.w	r3, [sp, #24]
   25ef0:	9306      	str	r3, [sp, #24]
   25ef2:	2300      	movs	r3, #0
   25ef4:	9307      	str	r3, [sp, #28]
   25ef6:	e69b      	b.n	25c30 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   25ef8:	2908      	cmp	r1, #8
   25efa:	d00b      	beq.n	25f14 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   25efc:	9b03      	ldr	r3, [sp, #12]
   25efe:	3307      	adds	r3, #7
   25f00:	f023 0307 	bic.w	r3, r3, #7
   25f04:	f103 0208 	add.w	r2, r3, #8
   25f08:	9203      	str	r2, [sp, #12]
   25f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   25f0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25f12:	e68d      	b.n	25c30 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   25f14:	9b03      	ldr	r3, [sp, #12]
   25f16:	3307      	adds	r3, #7
   25f18:	f023 0307 	bic.w	r3, r3, #7
   25f1c:	f103 0208 	add.w	r2, r3, #8
   25f20:	9203      	str	r2, [sp, #12]
   25f22:	e9d3 2300 	ldrd	r2, r3, [r3]
   25f26:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25f2a:	e681      	b.n	25c30 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   25f2c:	9b03      	ldr	r3, [sp, #12]
   25f2e:	1d1a      	adds	r2, r3, #4
   25f30:	9203      	str	r2, [sp, #12]
   25f32:	681b      	ldr	r3, [r3, #0]
   25f34:	9306      	str	r3, [sp, #24]
   25f36:	e67b      	b.n	25c30 <cbvprintf+0x410>
			OUTS(sp, fp);
   25f38:	4643      	mov	r3, r8
   25f3a:	4652      	mov	r2, sl
   25f3c:	4629      	mov	r1, r5
   25f3e:	4630      	mov	r0, r6
   25f40:	f016 f834 	bl	3bfac <outs>
   25f44:	2800      	cmp	r0, #0
   25f46:	f2c0 814f 	blt.w	261e8 <cbvprintf+0x9c8>
   25f4a:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   25f4c:	46c2      	mov	sl, r8
			continue;
   25f4e:	e46f      	b.n	25830 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   25f50:	4629      	mov	r1, r5
   25f52:	2025      	movs	r0, #37	; 0x25
   25f54:	47b0      	blx	r6
   25f56:	2800      	cmp	r0, #0
   25f58:	f2c0 8146 	blt.w	261e8 <cbvprintf+0x9c8>
   25f5c:	3401      	adds	r4, #1
		char sign = 0;
   25f5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   25f62:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   25f66:	f04f 0a00 	mov.w	sl, #0
			break;
   25f6a:	e0a7      	b.n	260bc <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   25f6c:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   25f70:	f1bb 0f00 	cmp.w	fp, #0
   25f74:	db08      	blt.n	25f88 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   25f76:	4659      	mov	r1, fp
   25f78:	4650      	mov	r0, sl
   25f7a:	f01a f99d 	bl	402b8 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   25f7e:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   25f82:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   25f86:	e099      	b.n	260bc <cbvprintf+0x89c>
				len = strlen(bps);
   25f88:	4650      	mov	r0, sl
   25f8a:	f7fb fad7 	bl	2153c <strlen>
   25f8e:	e7f6      	b.n	25f7e <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   25f90:	9b06      	ldr	r3, [sp, #24]
   25f92:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   25f96:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   25f9a:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   25f9e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   25fa2:	e08b      	b.n	260bc <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   25fa4:	f019 0f08 	tst.w	r9, #8
   25fa8:	d105      	bne.n	25fb6 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   25faa:	f019 0910 	ands.w	r9, r9, #16
   25fae:	d004      	beq.n	25fba <cbvprintf+0x79a>
				sign = ' ';
   25fb0:	f04f 0920 	mov.w	r9, #32
   25fb4:	e001      	b.n	25fba <cbvprintf+0x79a>
				sign = '+';
   25fb6:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   25fba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   25fbe:	2a00      	cmp	r2, #0
   25fc0:	f173 0100 	sbcs.w	r1, r3, #0
   25fc4:	db02      	blt.n	25fcc <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   25fc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25fca:	e009      	b.n	25fe0 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   25fcc:	4252      	negs	r2, r2
   25fce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   25fd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   25fd6:	f04f 092d 	mov.w	r9, #45	; 0x2d
   25fda:	e001      	b.n	25fe0 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   25fdc:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   25fe0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   25fe4:	9300      	str	r3, [sp, #0]
   25fe6:	ab0c      	add	r3, sp, #48	; 0x30
   25fe8:	aa08      	add	r2, sp, #32
   25fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   25fee:	f7ff fba7 	bl	25740 <encode_uint>
   25ff2:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   25ff4:	f1bb 0f00 	cmp.w	fp, #0
   25ff8:	f2c0 8090 	blt.w	2611c <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   25ffc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   26000:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   26004:	f89d 2020 	ldrb.w	r2, [sp, #32]
   26008:	f36f 1286 	bfc	r2, #6, #1
   2600c:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   26010:	459b      	cmp	fp, r3
   26012:	f240 8086 	bls.w	26122 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   26016:	ebab 0303 	sub.w	r3, fp, r3
   2601a:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   2601c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   26020:	e04c      	b.n	260bc <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   26022:	9806      	ldr	r0, [sp, #24]
   26024:	b930      	cbnz	r0, 26034 <cbvprintf+0x814>
		char sign = 0;
   26026:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   2602a:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 261f0 <cbvprintf+0x9d0>
			bps = "(nil)";
   2602e:	f1ab 0a05 	sub.w	sl, fp, #5
   26032:	e043      	b.n	260bc <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   26034:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   26038:	9300      	str	r3, [sp, #0]
   2603a:	ab0c      	add	r3, sp, #48	; 0x30
   2603c:	aa08      	add	r2, sp, #32
   2603e:	2100      	movs	r1, #0
   26040:	f7ff fb7e 	bl	25740 <encode_uint>
   26044:	4682      	mov	sl, r0
				conv->altform_0c = true;
   26046:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2604a:	f043 0310 	orr.w	r3, r3, #16
   2604e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   26052:	2378      	movs	r3, #120	; 0x78
   26054:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   26058:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   2605c:	e7ca      	b.n	25ff4 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   2605e:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   26060:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   26064:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   26068:	2b07      	cmp	r3, #7
   2606a:	d806      	bhi.n	2607a <cbvprintf+0x85a>
   2606c:	e8df f003 	tbb	[pc, r3]
   26070:	100e0c04 	.word	0x100e0c04
   26074:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   26078:	6014      	str	r4, [r2, #0]
		char sign = 0;
   2607a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   2607e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   26082:	f04f 0a00 	mov.w	sl, #0
}
   26086:	e019      	b.n	260bc <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   26088:	7014      	strb	r4, [r2, #0]
		break;
   2608a:	e7f6      	b.n	2607a <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   2608c:	8014      	strh	r4, [r2, #0]
		break;
   2608e:	e7f4      	b.n	2607a <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   26090:	6014      	str	r4, [r2, #0]
		break;
   26092:	e7f2      	b.n	2607a <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   26094:	4620      	mov	r0, r4
   26096:	17e1      	asrs	r1, r4, #31
   26098:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   2609c:	e7ed      	b.n	2607a <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   2609e:	4620      	mov	r0, r4
   260a0:	17e1      	asrs	r1, r4, #31
   260a2:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   260a6:	e7e8      	b.n	2607a <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   260a8:	6014      	str	r4, [r2, #0]
		break;
   260aa:	e7e6      	b.n	2607a <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   260ac:	6014      	str	r4, [r2, #0]
		break;
   260ae:	e7e4      	b.n	2607a <cbvprintf+0x85a>
		switch (conv->specifier) {
   260b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
   260b4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   260b8:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   260bc:	f1ba 0f00 	cmp.w	sl, #0
   260c0:	f000 808e 	beq.w	261e0 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   260c4:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   260c8:	f1b9 0f00 	cmp.w	r9, #0
   260cc:	d000      	beq.n	260d0 <cbvprintf+0x8b0>
			nj_len += 1U;
   260ce:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   260d0:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   260d4:	f011 0f10 	tst.w	r1, #16
   260d8:	d026      	beq.n	26128 <cbvprintf+0x908>
			nj_len += 2U;
   260da:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   260dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   260de:	4413      	add	r3, r2
		if (conv->pad_fp) {
   260e0:	f011 0f40 	tst.w	r1, #64	; 0x40
   260e4:	d001      	beq.n	260ea <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   260e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   260e8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   260ea:	2f00      	cmp	r7, #0
   260ec:	dd32      	ble.n	26154 <cbvprintf+0x934>
			width -= (int)nj_len;
   260ee:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   260f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   260f4:	f013 0f04 	tst.w	r3, #4
   260f8:	d12c      	bne.n	26154 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   260fa:	f013 0f40 	tst.w	r3, #64	; 0x40
   260fe:	d018      	beq.n	26132 <cbvprintf+0x912>
					if (sign != 0) {
   26100:	f1b9 0f00 	cmp.w	r9, #0
   26104:	d018      	beq.n	26138 <cbvprintf+0x918>
						OUTC(sign);
   26106:	4629      	mov	r1, r5
   26108:	4648      	mov	r0, r9
   2610a:	47b0      	blx	r6
   2610c:	2800      	cmp	r0, #0
   2610e:	db6b      	blt.n	261e8 <cbvprintf+0x9c8>
   26110:	3401      	adds	r4, #1
						sign = 0;
   26112:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   26116:	2330      	movs	r3, #48	; 0x30
   26118:	9302      	str	r3, [sp, #8]
   2611a:	e00f      	b.n	2613c <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   2611c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   26120:	e7cc      	b.n	260bc <cbvprintf+0x89c>
   26122:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   26126:	e7c9      	b.n	260bc <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   26128:	f011 0f08 	tst.w	r1, #8
   2612c:	d0d6      	beq.n	260dc <cbvprintf+0x8bc>
			nj_len += 1U;
   2612e:	3201      	adds	r2, #1
   26130:	e7d4      	b.n	260dc <cbvprintf+0x8bc>
				char pad = ' ';
   26132:	2320      	movs	r3, #32
   26134:	9302      	str	r3, [sp, #8]
   26136:	e001      	b.n	2613c <cbvprintf+0x91c>
					pad = '0';
   26138:	2330      	movs	r3, #48	; 0x30
   2613a:	9302      	str	r3, [sp, #8]
   2613c:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   2613e:	1e5f      	subs	r7, r3, #1
   26140:	2b00      	cmp	r3, #0
   26142:	dd07      	ble.n	26154 <cbvprintf+0x934>
					OUTC(pad);
   26144:	4629      	mov	r1, r5
   26146:	9802      	ldr	r0, [sp, #8]
   26148:	47b0      	blx	r6
   2614a:	2800      	cmp	r0, #0
   2614c:	db4c      	blt.n	261e8 <cbvprintf+0x9c8>
   2614e:	3401      	adds	r4, #1
				while (width-- > 0) {
   26150:	463b      	mov	r3, r7
   26152:	e7f4      	b.n	2613e <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   26154:	f1b9 0f00 	cmp.w	r9, #0
   26158:	d005      	beq.n	26166 <cbvprintf+0x946>
			OUTC(sign);
   2615a:	4629      	mov	r1, r5
   2615c:	4648      	mov	r0, r9
   2615e:	47b0      	blx	r6
   26160:	2800      	cmp	r0, #0
   26162:	db41      	blt.n	261e8 <cbvprintf+0x9c8>
   26164:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   26166:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2616a:	f3c3 1200 	ubfx	r2, r3, #4, #1
   2616e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   26172:	4313      	orrs	r3, r2
   26174:	d005      	beq.n	26182 <cbvprintf+0x962>
				OUTC('0');
   26176:	4629      	mov	r1, r5
   26178:	2030      	movs	r0, #48	; 0x30
   2617a:	47b0      	blx	r6
   2617c:	2800      	cmp	r0, #0
   2617e:	db33      	blt.n	261e8 <cbvprintf+0x9c8>
   26180:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   26182:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   26186:	f013 0f10 	tst.w	r3, #16
   2618a:	d006      	beq.n	2619a <cbvprintf+0x97a>
				OUTC(conv->specifier);
   2618c:	4629      	mov	r1, r5
   2618e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   26192:	47b0      	blx	r6
   26194:	2800      	cmp	r0, #0
   26196:	db27      	blt.n	261e8 <cbvprintf+0x9c8>
   26198:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   2619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   2619c:	f103 39ff 	add.w	r9, r3, #4294967295
   261a0:	2b00      	cmp	r3, #0
   261a2:	dd07      	ble.n	261b4 <cbvprintf+0x994>
				OUTC('0');
   261a4:	4629      	mov	r1, r5
   261a6:	2030      	movs	r0, #48	; 0x30
   261a8:	47b0      	blx	r6
   261aa:	2800      	cmp	r0, #0
   261ac:	db1c      	blt.n	261e8 <cbvprintf+0x9c8>
   261ae:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   261b0:	464b      	mov	r3, r9
   261b2:	e7f3      	b.n	2619c <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   261b4:	465b      	mov	r3, fp
   261b6:	4652      	mov	r2, sl
   261b8:	4629      	mov	r1, r5
   261ba:	4630      	mov	r0, r6
   261bc:	f015 fef6 	bl	3bfac <outs>
   261c0:	2800      	cmp	r0, #0
   261c2:	db11      	blt.n	261e8 <cbvprintf+0x9c8>
   261c4:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   261c6:	2f00      	cmp	r7, #0
   261c8:	dd07      	ble.n	261da <cbvprintf+0x9ba>
			OUTC(' ');
   261ca:	4629      	mov	r1, r5
   261cc:	2020      	movs	r0, #32
   261ce:	47b0      	blx	r6
   261d0:	2800      	cmp	r0, #0
   261d2:	db09      	blt.n	261e8 <cbvprintf+0x9c8>
   261d4:	3401      	adds	r4, #1
			--width;
   261d6:	3f01      	subs	r7, #1
   261d8:	e7f5      	b.n	261c6 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   261da:	46c2      	mov	sl, r8
   261dc:	f7ff bb28 	b.w	25830 <cbvprintf+0x10>
   261e0:	46c2      	mov	sl, r8
   261e2:	f7ff bb25 	b.w	25830 <cbvprintf+0x10>
		}
	}

	return count;
   261e6:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   261e8:	b013      	add	sp, #76	; 0x4c
   261ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   261ee:	bf00      	nop
   261f0:	00042261 	.word	0x00042261

000261f4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   261f4:	b508      	push	{r3, lr}
	__asm__ volatile(
   261f6:	f04f 0220 	mov.w	r2, #32
   261fa:	f3ef 8311 	mrs	r3, BASEPRI
   261fe:	f382 8812 	msr	BASEPRI_MAX, r2
   26202:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   26206:	f002 f8b1 	bl	2836c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   2620a:	4803      	ldr	r0, [pc, #12]	; (26218 <sys_reboot+0x24>)
   2620c:	f015 fc94 	bl	3bb38 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   26210:	f001 fa8e 	bl	27730 <arch_cpu_idle>
   26214:	e7fc      	b.n	26210 <sys_reboot+0x1c>
   26216:	bf00      	nop
   26218:	00042264 	.word	0x00042264

0002621c <nordicsemi_nrf91_init>:
   2621c:	f04f 0220 	mov.w	r2, #32
   26220:	f3ef 8311 	mrs	r3, BASEPRI
   26224:	f382 8812 	msr	BASEPRI_MAX, r2
   26228:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   2622c:	4a04      	ldr	r2, [pc, #16]	; (26240 <nordicsemi_nrf91_init+0x24>)
   2622e:	2101      	movs	r1, #1
   26230:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   26234:	f383 8811 	msr	BASEPRI, r3
   26238:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   2623c:	2000      	movs	r0, #0
   2623e:	4770      	bx	lr
   26240:	40039000 	.word	0x40039000

00026244 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   26244:	b130      	cbz	r0, 26254 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   26246:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   26248:	0180      	lsls	r0, r0, #6
   2624a:	4b03      	ldr	r3, [pc, #12]	; (26258 <arch_busy_wait+0x14>)
   2624c:	f043 0301 	orr.w	r3, r3, #1
   26250:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   26252:	bd08      	pop	{r3, pc}
   26254:	4770      	bx	lr
   26256:	bf00      	nop
   26258:	00041390 	.word	0x00041390

0002625c <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   2625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26260:	b087      	sub	sp, #28
   26262:	4682      	mov	sl, r0
   26264:	4689      	mov	r9, r1
   26266:	4690      	mov	r8, r2
	if (k_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   26268:	4b21      	ldr	r3, [pc, #132]	; (262f0 <log_generic+0x94>)
   2626a:	681b      	ldr	r3, [r3, #0]
   2626c:	4798      	blx	r3
   2626e:	9003      	str	r0, [sp, #12]

		for (int i = 0; i < log_backend_count_get(); i++) {
   26270:	2400      	movs	r4, #0
   26272:	e01a      	b.n	262aa <log_generic+0x4e>
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   26274:	f8df b088 	ldr.w	fp, [pc, #136]	; 26300 <log_generic+0xa4>
   26278:	f240 121d 	movw	r2, #285	; 0x11d
   2627c:	4659      	mov	r1, fp
   2627e:	481d      	ldr	r0, [pc, #116]	; (262f4 <log_generic+0x98>)
   26280:	f015 fc5a 	bl	3bb38 <printk>
   26284:	f240 111d 	movw	r1, #285	; 0x11d
   26288:	4658      	mov	r0, fp
   2628a:	f015 fea9 	bl	3bfe0 <assert_post_action>
   2628e:	e017      	b.n	262c0 <log_generic+0x64>
	__ASSERT_NO_MSG(backend != NULL);
   26290:	f8df b06c 	ldr.w	fp, [pc, #108]	; 26300 <log_generic+0xa4>
   26294:	2289      	movs	r2, #137	; 0x89
   26296:	4659      	mov	r1, fp
   26298:	4816      	ldr	r0, [pc, #88]	; (262f4 <log_generic+0x98>)
   2629a:	f015 fc4d 	bl	3bb38 <printk>
   2629e:	2189      	movs	r1, #137	; 0x89
   262a0:	4658      	mov	r0, fp
   262a2:	f015 fe9d 	bl	3bfe0 <assert_post_action>
   262a6:	e013      	b.n	262d0 <log_generic+0x74>
   262a8:	3401      	adds	r4, #1
   262aa:	4b13      	ldr	r3, [pc, #76]	; (262f8 <log_generic+0x9c>)
   262ac:	4a13      	ldr	r2, [pc, #76]	; (262fc <log_generic+0xa0>)
   262ae:	1a9b      	subs	r3, r3, r2
   262b0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   262b4:	da18      	bge.n	262e8 <log_generic+0x8c>
	return &__log_backends_start[idx];
   262b6:	0127      	lsls	r7, r4, #4
   262b8:	4d10      	ldr	r5, [pc, #64]	; (262fc <log_generic+0xa0>)
	__ASSERT_NO_MSG(backend != NULL);
   262ba:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   262be:	d0d9      	beq.n	26274 <log_generic+0x18>
	return backend->cb->active;
   262c0:	6873      	ldr	r3, [r6, #4]
   262c2:	795b      	ldrb	r3, [r3, #5]
				(src_level.level <= log_filter_get(backend,
								src_level.domain_id,
								src_level.source_id,
								true)) : true;

			if (log_backend_is_active(backend) && runtime_ok) {
   262c4:	2b00      	cmp	r3, #0
   262c6:	d0ef      	beq.n	262a8 <log_generic+0x4c>
				va_list ap_tmp;

				va_copy(ap_tmp, ap);
   262c8:	f8cd 8014 	str.w	r8, [sp, #20]
	__ASSERT_NO_MSG(backend != NULL);
   262cc:	2e00      	cmp	r6, #0
   262ce:	d0df      	beq.n	26290 <log_generic+0x34>
	if (backend->api->put_sync_string) {
   262d0:	597b      	ldr	r3, [r7, r5]
   262d2:	689d      	ldr	r5, [r3, #8]
   262d4:	2d00      	cmp	r5, #0
   262d6:	d0e7      	beq.n	262a8 <log_generic+0x4c>
		backend->api->put_sync_string(backend, src_level,
   262d8:	f8cd 8000 	str.w	r8, [sp]
   262dc:	464b      	mov	r3, r9
   262de:	9a03      	ldr	r2, [sp, #12]
   262e0:	4651      	mov	r1, sl
   262e2:	4630      	mov	r0, r6
   262e4:	47a8      	blx	r5
				log_backend_put_sync_string(backend, src_level,
						     timestamp, fmt, ap_tmp);
				va_end(ap_tmp);
   262e6:	e7df      	b.n	262a8 <log_generic+0x4c>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   262e8:	b007      	add	sp, #28
   262ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   262ee:	bf00      	nop
   262f0:	2000c610 	.word	0x2000c610
   262f4:	00041c84 	.word	0x00041c84
   262f8:	00041320 	.word	0x00041320
   262fc:	00041310 	.word	0x00041310
   26300:	00042294 	.word	0x00042294

00026304 <log_hexdump_sync>:
	va_end(ap);
}

void log_hexdump_sync(struct log_msg_ids src_level, const char *metadata,
		      const void *data, uint32_t len)
{
   26304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26308:	b085      	sub	sp, #20
   2630a:	4682      	mov	sl, r0
   2630c:	9103      	str	r1, [sp, #12]
   2630e:	4691      	mov	r9, r2
   26310:	4698      	mov	r8, r3
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_hexdump(metadata, (const uint8_t *)data, len,
				     src_level);
	} else {
		struct log_backend const *backend;
		log_timestamp_t timestamp = timestamp_func();
   26312:	4b21      	ldr	r3, [pc, #132]	; (26398 <log_hexdump_sync+0x94>)
   26314:	681b      	ldr	r3, [r3, #0]
   26316:	4798      	blx	r3
   26318:	9002      	str	r0, [sp, #8]

		for (int i = 0; i < log_backend_count_get(); i++) {
   2631a:	2400      	movs	r4, #0
   2631c:	e01a      	b.n	26354 <log_hexdump_sync+0x50>
	__ASSERT_NO_MSG(backend != NULL);
   2631e:	f8df b088 	ldr.w	fp, [pc, #136]	; 263a8 <log_hexdump_sync+0xa4>
   26322:	f240 121d 	movw	r2, #285	; 0x11d
   26326:	4659      	mov	r1, fp
   26328:	481c      	ldr	r0, [pc, #112]	; (2639c <log_hexdump_sync+0x98>)
   2632a:	f015 fc05 	bl	3bb38 <printk>
   2632e:	f240 111d 	movw	r1, #285	; 0x11d
   26332:	4658      	mov	r0, fp
   26334:	f015 fe54 	bl	3bfe0 <assert_post_action>
   26338:	e017      	b.n	2636a <log_hexdump_sync+0x66>
	__ASSERT_NO_MSG(backend != NULL);
   2633a:	f8df b06c 	ldr.w	fp, [pc, #108]	; 263a8 <log_hexdump_sync+0xa4>
   2633e:	22a1      	movs	r2, #161	; 0xa1
   26340:	4659      	mov	r1, fp
   26342:	4816      	ldr	r0, [pc, #88]	; (2639c <log_hexdump_sync+0x98>)
   26344:	f015 fbf8 	bl	3bb38 <printk>
   26348:	21a1      	movs	r1, #161	; 0xa1
   2634a:	4658      	mov	r0, fp
   2634c:	f015 fe48 	bl	3bfe0 <assert_post_action>
   26350:	e011      	b.n	26376 <log_hexdump_sync+0x72>
   26352:	3401      	adds	r4, #1
   26354:	4b12      	ldr	r3, [pc, #72]	; (263a0 <log_hexdump_sync+0x9c>)
   26356:	4a13      	ldr	r2, [pc, #76]	; (263a4 <log_hexdump_sync+0xa0>)
   26358:	1a9b      	subs	r3, r3, r2
   2635a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   2635e:	da18      	bge.n	26392 <log_hexdump_sync+0x8e>
	return &__log_backends_start[idx];
   26360:	0127      	lsls	r7, r4, #4
   26362:	4d10      	ldr	r5, [pc, #64]	; (263a4 <log_hexdump_sync+0xa0>)
	__ASSERT_NO_MSG(backend != NULL);
   26364:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   26368:	d0d9      	beq.n	2631e <log_hexdump_sync+0x1a>
	return backend->cb->active;
   2636a:	6873      	ldr	r3, [r6, #4]
   2636c:	795b      	ldrb	r3, [r3, #5]
				(src_level.level <= log_filter_get(backend,
								src_level.domain_id,
								src_level.source_id,
								true)) : true;

			if (log_backend_is_active(backend) && runtime_ok) {
   2636e:	2b00      	cmp	r3, #0
   26370:	d0ef      	beq.n	26352 <log_hexdump_sync+0x4e>
	__ASSERT_NO_MSG(backend != NULL);
   26372:	2e00      	cmp	r6, #0
   26374:	d0e1      	beq.n	2633a <log_hexdump_sync+0x36>
	if (backend->api->put_sync_hexdump) {
   26376:	597b      	ldr	r3, [r7, r5]
   26378:	68dd      	ldr	r5, [r3, #12]
   2637a:	2d00      	cmp	r5, #0
   2637c:	d0e9      	beq.n	26352 <log_hexdump_sync+0x4e>
		backend->api->put_sync_hexdump(backend, src_level, timestamp,
   2637e:	f8cd 8004 	str.w	r8, [sp, #4]
   26382:	f8cd 9000 	str.w	r9, [sp]
   26386:	9b03      	ldr	r3, [sp, #12]
   26388:	9a02      	ldr	r2, [sp, #8]
   2638a:	4651      	mov	r1, sl
   2638c:	4630      	mov	r0, r6
   2638e:	47a8      	blx	r5
   26390:	e7df      	b.n	26352 <log_hexdump_sync+0x4e>
					backend, src_level, timestamp, metadata,
					(const uint8_t *)data, len);
			}
		}
	}
}
   26392:	b005      	add	sp, #20
   26394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26398:	2000c610 	.word	0x2000c610
   2639c:	00041c84 	.word	0x00041c84
   263a0:	00041320 	.word	0x00041320
   263a4:	00041310 	.word	0x00041310
   263a8:	00042294 	.word	0x00042294

000263ac <log_init>:
		z_log_runtime_filters_init();
	}
}

void log_init(void)
{
   263ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __log_backends_end - __log_backends_start;
   263ae:	4b1d      	ldr	r3, [pc, #116]	; (26424 <_flash_used+0x28>)
   263b0:	4a1d      	ldr	r2, [pc, #116]	; (26428 <_flash_used+0x2c>)
   263b2:	1a9b      	subs	r3, r3, r2
   263b4:	111e      	asrs	r6, r3, #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   263b6:	2b9f      	cmp	r3, #159	; 0x9f
   263b8:	d80a      	bhi.n	263d0 <log_init+0x24>
   263ba:	4b1c      	ldr	r3, [pc, #112]	; (2642c <_flash_used+0x30>)
   263bc:	e8d3 2fef 	ldaex	r2, [r3]
   263c0:	1c51      	adds	r1, r2, #1
   263c2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   263c6:	2800      	cmp	r0, #0
   263c8:	d1f8      	bne.n	263bc <log_init+0x10>

	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_init();
	}

	if (atomic_inc(&initialized) != 0) {
   263ca:	bb52      	cbnz	r2, 26422 <_flash_used+0x26>
		return;
	}

	/* Assign ids to backends. */
	for (i = 0; i < log_backend_count_get(); i++) {
   263cc:	2400      	movs	r4, #0
   263ce:	e016      	b.n	263fe <_flash_used+0x2>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   263d0:	4c17      	ldr	r4, [pc, #92]	; (26430 <_flash_used+0x34>)
   263d2:	f240 224a 	movw	r2, #586	; 0x24a
   263d6:	4621      	mov	r1, r4
   263d8:	4816      	ldr	r0, [pc, #88]	; (26434 <_flash_used+0x38>)
   263da:	f015 fbad 	bl	3bb38 <printk>
   263de:	f240 214a 	movw	r1, #586	; 0x24a
   263e2:	4620      	mov	r0, r4
   263e4:	f015 fdfc 	bl	3bfe0 <assert_post_action>
   263e8:	e7e7      	b.n	263ba <log_init+0xe>
			if (backend->api->init != NULL) {
				backend->api->init(backend);
			}

			log_backend_enable(backend,
					   backend->cb->ctx,
   263ea:	4b0f      	ldr	r3, [pc, #60]	; (26428 <_flash_used+0x2c>)
   263ec:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   263f0:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   263f2:	2204      	movs	r2, #4
   263f4:	6819      	ldr	r1, [r3, #0]
   263f6:	4628      	mov	r0, r5
   263f8:	f000 f89e 	bl	26538 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   263fc:	3401      	adds	r4, #1
   263fe:	42b4      	cmp	r4, r6
   26400:	da0f      	bge.n	26422 <_flash_used+0x26>
		const struct log_backend *backend = log_backend_get(i);
   26402:	4627      	mov	r7, r4
	return &__log_backends_start[idx];
   26404:	4d08      	ldr	r5, [pc, #32]	; (26428 <_flash_used+0x2c>)
   26406:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   2640a:	7b2b      	ldrb	r3, [r5, #12]
   2640c:	2b00      	cmp	r3, #0
   2640e:	d0f5      	beq.n	263fc <_flash_used>
			if (backend->api->init != NULL) {
   26410:	0123      	lsls	r3, r4, #4
   26412:	4a05      	ldr	r2, [pc, #20]	; (26428 <_flash_used+0x2c>)
   26414:	58d3      	ldr	r3, [r2, r3]
   26416:	699b      	ldr	r3, [r3, #24]
   26418:	2b00      	cmp	r3, #0
   2641a:	d0e6      	beq.n	263ea <log_init+0x3e>
				backend->api->init(backend);
   2641c:	4628      	mov	r0, r5
   2641e:	4798      	blx	r3
   26420:	e7e3      	b.n	263ea <log_init+0x3e>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}
}
   26422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26424:	00041320 	.word	0x00041320
   26428:	00041310 	.word	0x00041310
   2642c:	2000fed4 	.word	0x2000fed4
   26430:	000422c8 	.word	0x000422c8
   26434:	00041c84 	.word	0x00041c84

00026438 <log_set_timestamp_func>:
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
	if (timestamp_getter == NULL) {
   26438:	b138      	cbz	r0, 2644a <log_set_timestamp_func+0x12>
{
   2643a:	b508      	push	{r3, lr}
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
   2643c:	4a04      	ldr	r2, [pc, #16]	; (26450 <log_set_timestamp_func+0x18>)
   2643e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   26440:	4608      	mov	r0, r1
   26442:	f000 fa71 	bl	26928 <log_output_timestamp_freq_set>

	return 0;
   26446:	2000      	movs	r0, #0
}
   26448:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2644a:	f06f 0015 	mvn.w	r0, #21
}
   2644e:	4770      	bx	lr
   26450:	2000c610 	.word	0x2000c610

00026454 <log_core_init>:
{
   26454:	b508      	push	{r3, lr}
	panic_mode = false;
   26456:	2300      	movs	r3, #0
   26458:	4a04      	ldr	r2, [pc, #16]	; (2646c <log_core_init+0x18>)
   2645a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   2645c:	4a04      	ldr	r2, [pc, #16]	; (26470 <log_core_init+0x1c>)
   2645e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   26460:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   26464:	4803      	ldr	r0, [pc, #12]	; (26474 <log_core_init+0x20>)
   26466:	f7ff ffe7 	bl	26438 <log_set_timestamp_func>
}
   2646a:	bd08      	pop	{r3, pc}
   2646c:	20010df7 	.word	0x20010df7
   26470:	2000fed0 	.word	0x2000fed0
   26474:	0003c031 	.word	0x0003c031

00026478 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
	struct log_backend const *backend;

	if (panic_mode) {
   26478:	4b1f      	ldr	r3, [pc, #124]	; (264f8 <z_impl_log_panic+0x80>)
   2647a:	781b      	ldrb	r3, [r3, #0]
   2647c:	b103      	cbz	r3, 26480 <z_impl_log_panic+0x8>
   2647e:	4770      	bx	lr
{
   26480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
   26484:	f7ff ff92 	bl	263ac <log_init>

	for (int i = 0; i < log_backend_count_get(); i++) {
   26488:	2400      	movs	r4, #0
   2648a:	e012      	b.n	264b2 <z_impl_log_panic+0x3a>
	__ASSERT_NO_MSG(backend != NULL);
   2648c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 26508 <z_impl_log_panic+0x90>
   26490:	f240 121d 	movw	r2, #285	; 0x11d
   26494:	4641      	mov	r1, r8
   26496:	4819      	ldr	r0, [pc, #100]	; (264fc <z_impl_log_panic+0x84>)
   26498:	f015 fb4e 	bl	3bb38 <printk>
   2649c:	f240 111d 	movw	r1, #285	; 0x11d
   264a0:	4640      	mov	r0, r8
   264a2:	f015 fd9d 	bl	3bfe0 <assert_post_action>
   264a6:	e00f      	b.n	264c8 <z_impl_log_panic+0x50>
	backend->api->panic(backend);
   264a8:	597b      	ldr	r3, [r7, r5]
   264aa:	695b      	ldr	r3, [r3, #20]
   264ac:	4630      	mov	r0, r6
   264ae:	4798      	blx	r3
   264b0:	3401      	adds	r4, #1
   264b2:	4b13      	ldr	r3, [pc, #76]	; (26500 <z_impl_log_panic+0x88>)
   264b4:	4a13      	ldr	r2, [pc, #76]	; (26504 <z_impl_log_panic+0x8c>)
   264b6:	1a9b      	subs	r3, r3, r2
   264b8:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   264bc:	da16      	bge.n	264ec <z_impl_log_panic+0x74>
	return &__log_backends_start[idx];
   264be:	0127      	lsls	r7, r4, #4
   264c0:	4d10      	ldr	r5, [pc, #64]	; (26504 <z_impl_log_panic+0x8c>)
	__ASSERT_NO_MSG(backend != NULL);
   264c2:	eb15 1604 	adds.w	r6, r5, r4, lsl #4
   264c6:	d0e1      	beq.n	2648c <z_impl_log_panic+0x14>
	return backend->cb->active;
   264c8:	6873      	ldr	r3, [r6, #4]
   264ca:	795b      	ldrb	r3, [r3, #5]
		backend = log_backend_get(i);

		if (log_backend_is_active(backend)) {
   264cc:	2b00      	cmp	r3, #0
   264ce:	d0ef      	beq.n	264b0 <z_impl_log_panic+0x38>
	__ASSERT_NO_MSG(backend != NULL);
   264d0:	2e00      	cmp	r6, #0
   264d2:	d1e9      	bne.n	264a8 <z_impl_log_panic+0x30>
   264d4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 26508 <z_impl_log_panic+0x90>
   264d8:	22c2      	movs	r2, #194	; 0xc2
   264da:	4641      	mov	r1, r8
   264dc:	4807      	ldr	r0, [pc, #28]	; (264fc <z_impl_log_panic+0x84>)
   264de:	f015 fb2b 	bl	3bb38 <printk>
   264e2:	21c2      	movs	r1, #194	; 0xc2
   264e4:	4640      	mov	r0, r8
   264e6:	f015 fd7b 	bl	3bfe0 <assert_post_action>
   264ea:	e7dd      	b.n	264a8 <z_impl_log_panic+0x30>
		/* Flush */
		while (log_process(false) == true) {
		}
	}

	panic_mode = true;
   264ec:	4b02      	ldr	r3, [pc, #8]	; (264f8 <z_impl_log_panic+0x80>)
   264ee:	2201      	movs	r2, #1
   264f0:	701a      	strb	r2, [r3, #0]
}
   264f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   264f6:	bf00      	nop
   264f8:	20010df7 	.word	0x20010df7
   264fc:	00041c84 	.word	0x00041c84
   26500:	00041320 	.word	0x00041320
   26504:	00041310 	.word	0x00041310
   26508:	00042294 	.word	0x00042294

0002650c <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   2650c:	4b01      	ldr	r3, [pc, #4]	; (26514 <z_log_notify_backend_enabled+0x8>)
   2650e:	2201      	movs	r2, #1
   26510:	701a      	strb	r2, [r3, #0]
}
   26512:	4770      	bx	lr
   26514:	20010df6 	.word	0x20010df6

00026518 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   26518:	4b05      	ldr	r3, [pc, #20]	; (26530 <log_source_name_get+0x18>)
   2651a:	4a06      	ldr	r2, [pc, #24]	; (26534 <log_source_name_get+0x1c>)
   2651c:	1a9b      	subs	r3, r3, r2
   2651e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   26522:	d202      	bcs.n	2652a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   26524:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   26528:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   2652a:	2000      	movs	r0, #0
}
   2652c:	4770      	bx	lr
   2652e:	bf00      	nop
   26530:	00041310 	.word	0x00041310
   26534:	00041200 	.word	0x00041200

00026538 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   26538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2653a:	4605      	mov	r5, r0
   2653c:	460e      	mov	r6, r1
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   2653e:	4c14      	ldr	r4, [pc, #80]	; (26590 <log_backend_enable+0x58>)
   26540:	1b04      	subs	r4, r0, r4
   26542:	1124      	asrs	r4, r4, #4
   26544:	3401      	adds	r4, #1

	log_backend_id_set(backend, id);
   26546:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   26548:	b150      	cbz	r0, 26560 <log_backend_enable+0x28>
	backend->cb->id = id;
   2654a:	686b      	ldr	r3, [r5, #4]
   2654c:	711c      	strb	r4, [r3, #4]
	__ASSERT_NO_MSG(backend != NULL);
   2654e:	b195      	cbz	r5, 26576 <log_backend_enable+0x3e>
	backend->cb->ctx = ctx;
   26550:	686b      	ldr	r3, [r5, #4]
   26552:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   26554:	686b      	ldr	r3, [r5, #4]
   26556:	2201      	movs	r2, #1
   26558:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   2655a:	f7ff ffd7 	bl	2650c <z_log_notify_backend_enabled>
}
   2655e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(backend != NULL);
   26560:	4f0c      	ldr	r7, [pc, #48]	; (26594 <log_backend_enable+0x5c>)
   26562:	22d1      	movs	r2, #209	; 0xd1
   26564:	4639      	mov	r1, r7
   26566:	480c      	ldr	r0, [pc, #48]	; (26598 <log_backend_enable+0x60>)
   26568:	f015 fae6 	bl	3bb38 <printk>
   2656c:	21d1      	movs	r1, #209	; 0xd1
   2656e:	4638      	mov	r0, r7
   26570:	f015 fd36 	bl	3bfe0 <assert_post_action>
   26574:	e7e9      	b.n	2654a <log_backend_enable+0x12>
	__ASSERT_NO_MSG(backend != NULL);
   26576:	4c07      	ldr	r4, [pc, #28]	; (26594 <log_backend_enable+0x5c>)
   26578:	f44f 7281 	mov.w	r2, #258	; 0x102
   2657c:	4621      	mov	r1, r4
   2657e:	4806      	ldr	r0, [pc, #24]	; (26598 <log_backend_enable+0x60>)
   26580:	f015 fada 	bl	3bb38 <printk>
   26584:	f44f 7181 	mov.w	r1, #258	; 0x102
   26588:	4620      	mov	r0, r4
   2658a:	f015 fd29 	bl	3bfe0 <assert_post_action>
   2658e:	e7df      	b.n	26550 <log_backend_enable+0x18>
   26590:	00041310 	.word	0x00041310
   26594:	00042294 	.word	0x00042294
   26598:	00041c84 	.word	0x00041c84

0002659c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   2659c:	b40e      	push	{r1, r2, r3}
   2659e:	b500      	push	{lr}
   265a0:	b082      	sub	sp, #8
   265a2:	4601      	mov	r1, r0
   265a4:	ab03      	add	r3, sp, #12
   265a6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   265aa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   265ac:	4803      	ldr	r0, [pc, #12]	; (265bc <print_formatted+0x20>)
   265ae:	f7ff f937 	bl	25820 <cbvprintf>
	va_end(args);

	return length;
}
   265b2:	b002      	add	sp, #8
   265b4:	f85d eb04 	ldr.w	lr, [sp], #4
   265b8:	b003      	add	sp, #12
   265ba:	4770      	bx	lr
   265bc:	0003c077 	.word	0x0003c077

000265c0 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   265c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   265c2:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   265c4:	f011 0f44 	tst.w	r1, #68	; 0x44
   265c8:	d005      	beq.n	265d6 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   265ca:	4b1a      	ldr	r3, [pc, #104]	; (26634 <timestamp_print+0x74>)
   265cc:	681c      	ldr	r4, [r3, #0]
   265ce:	b934      	cbnz	r4, 265de <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   265d0:	2000      	movs	r0, #0
	}

	return length;
}
   265d2:	b005      	add	sp, #20
   265d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   265d6:	4918      	ldr	r1, [pc, #96]	; (26638 <timestamp_print+0x78>)
   265d8:	f7ff ffe0 	bl	2659c <print_formatted>
   265dc:	e7f9      	b.n	265d2 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   265de:	4b17      	ldr	r3, [pc, #92]	; (2663c <timestamp_print+0x7c>)
   265e0:	6819      	ldr	r1, [r3, #0]
   265e2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   265e6:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   265ea:	4a15      	ldr	r2, [pc, #84]	; (26640 <timestamp_print+0x80>)
   265ec:	fba2 3205 	umull	r3, r2, r2, r5
   265f0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   265f2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   265f6:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   265fa:	4b12      	ldr	r3, [pc, #72]	; (26644 <timestamp_print+0x84>)
   265fc:	fba3 7306 	umull	r7, r3, r3, r6
   26600:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   26602:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   26606:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2660a:	fb05 f101 	mul.w	r1, r5, r1
   2660e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   26612:	fb07 1114 	mls	r1, r7, r4, r1
   26616:	fb05 f101 	mul.w	r1, r5, r1
   2661a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   2661e:	9402      	str	r4, [sp, #8]
   26620:	9701      	str	r7, [sp, #4]
   26622:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   26626:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   2662a:	9100      	str	r1, [sp, #0]
   2662c:	4906      	ldr	r1, [pc, #24]	; (26648 <timestamp_print+0x88>)
   2662e:	f7ff ffb5 	bl	2659c <print_formatted>
   26632:	e7ce      	b.n	265d2 <timestamp_print+0x12>
   26634:	2000fed8 	.word	0x2000fed8
   26638:	0004232c 	.word	0x0004232c
   2663c:	2000fedc 	.word	0x2000fedc
   26640:	91a2b3c5 	.word	0x91a2b3c5
   26644:	88888889 	.word	0x88888889
   26648:	00042338 	.word	0x00042338

0002664c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   2664c:	b161      	cbz	r1, 26668 <color_print+0x1c>
{
   2664e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   26650:	b12a      	cbz	r2, 2665e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   26652:	4a06      	ldr	r2, [pc, #24]	; (2666c <color_print+0x20>)
   26654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   26658:	b912      	cbnz	r2, 26660 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   2665a:	4a05      	ldr	r2, [pc, #20]	; (26670 <color_print+0x24>)
   2665c:	e000      	b.n	26660 <color_print+0x14>
   2665e:	4a04      	ldr	r2, [pc, #16]	; (26670 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   26660:	4904      	ldr	r1, [pc, #16]	; (26674 <color_print+0x28>)
   26662:	f7ff ff9b 	bl	2659c <print_formatted>
	}
}
   26666:	bd08      	pop	{r3, pc}
   26668:	4770      	bx	lr
   2666a:	bf00      	nop
   2666c:	000423dc 	.word	0x000423dc
   26670:	00042354 	.word	0x00042354
   26674:	00044678 	.word	0x00044678

00026678 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   26678:	f011 0f10 	tst.w	r1, #16
   2667c:	d10b      	bne.n	26696 <newline_print+0x1e>
{
   2667e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   26680:	f011 0f20 	tst.w	r1, #32
   26684:	d003      	beq.n	2668e <newline_print+0x16>
		print_formatted(ctx, "\n");
   26686:	4904      	ldr	r1, [pc, #16]	; (26698 <newline_print+0x20>)
   26688:	f7ff ff88 	bl	2659c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   2668c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   2668e:	4903      	ldr	r1, [pc, #12]	; (2669c <newline_print+0x24>)
   26690:	f7ff ff84 	bl	2659c <print_formatted>
   26694:	e7fa      	b.n	2668c <newline_print+0x14>
   26696:	4770      	bx	lr
   26698:	000441a4 	.word	0x000441a4
   2669c:	00044dc0 	.word	0x00044dc0

000266a0 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   266a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266a4:	4605      	mov	r5, r0
   266a6:	460f      	mov	r7, r1
   266a8:	4616      	mov	r6, r2
   266aa:	4698      	mov	r8, r3
	newline_print(output, flags);
   266ac:	9906      	ldr	r1, [sp, #24]
   266ae:	f7ff ffe3 	bl	26678 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   266b2:	2400      	movs	r4, #0
   266b4:	4544      	cmp	r4, r8
   266b6:	da05      	bge.n	266c4 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   266b8:	4924      	ldr	r1, [pc, #144]	; (2674c <hexdump_line_print+0xac>)
   266ba:	4628      	mov	r0, r5
   266bc:	f7ff ff6e 	bl	2659c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   266c0:	3401      	adds	r4, #1
   266c2:	e7f7      	b.n	266b4 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   266c4:	2400      	movs	r4, #0
   266c6:	e009      	b.n	266dc <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   266c8:	4920      	ldr	r1, [pc, #128]	; (2674c <hexdump_line_print+0xac>)
   266ca:	4628      	mov	r0, r5
   266cc:	f7ff ff66 	bl	2659c <print_formatted>
   266d0:	e00b      	b.n	266ea <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   266d2:	491f      	ldr	r1, [pc, #124]	; (26750 <hexdump_line_print+0xb0>)
   266d4:	4628      	mov	r0, r5
   266d6:	f7ff ff61 	bl	2659c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   266da:	3401      	adds	r4, #1
   266dc:	2c0f      	cmp	r4, #15
   266de:	dc0c      	bgt.n	266fa <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   266e0:	2c00      	cmp	r4, #0
   266e2:	dd02      	ble.n	266ea <hexdump_line_print+0x4a>
   266e4:	f014 0f07 	tst.w	r4, #7
   266e8:	d0ee      	beq.n	266c8 <hexdump_line_print+0x28>
		if (i < length) {
   266ea:	42b4      	cmp	r4, r6
   266ec:	d2f1      	bcs.n	266d2 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   266ee:	5d3a      	ldrb	r2, [r7, r4]
   266f0:	4918      	ldr	r1, [pc, #96]	; (26754 <hexdump_line_print+0xb4>)
   266f2:	4628      	mov	r0, r5
   266f4:	f7ff ff52 	bl	2659c <print_formatted>
   266f8:	e7ef      	b.n	266da <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   266fa:	4917      	ldr	r1, [pc, #92]	; (26758 <hexdump_line_print+0xb8>)
   266fc:	4628      	mov	r0, r5
   266fe:	f7ff ff4d 	bl	2659c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   26702:	2400      	movs	r4, #0
   26704:	e009      	b.n	2671a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   26706:	4911      	ldr	r1, [pc, #68]	; (2674c <hexdump_line_print+0xac>)
   26708:	4628      	mov	r0, r5
   2670a:	f7ff ff47 	bl	2659c <print_formatted>
   2670e:	e00b      	b.n	26728 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   26710:	4912      	ldr	r1, [pc, #72]	; (2675c <hexdump_line_print+0xbc>)
   26712:	4628      	mov	r0, r5
   26714:	f7ff ff42 	bl	2659c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   26718:	3401      	adds	r4, #1
   2671a:	2c0f      	cmp	r4, #15
   2671c:	dc13      	bgt.n	26746 <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   2671e:	2c00      	cmp	r4, #0
   26720:	dd02      	ble.n	26728 <hexdump_line_print+0x88>
   26722:	f014 0f07 	tst.w	r4, #7
   26726:	d0ee      	beq.n	26706 <hexdump_line_print+0x66>
		if (i < length) {
   26728:	42b4      	cmp	r4, r6
   2672a:	d207      	bcs.n	2673c <hexdump_line_print+0x9c>
			char c = (char)data[i];
   2672c:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   2672e:	4b0c      	ldr	r3, [pc, #48]	; (26760 <hexdump_line_print+0xc0>)
   26730:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   26732:	f013 0f97 	tst.w	r3, #151	; 0x97
   26736:	d1eb      	bne.n	26710 <hexdump_line_print+0x70>
   26738:	222e      	movs	r2, #46	; 0x2e
   2673a:	e7e9      	b.n	26710 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   2673c:	4903      	ldr	r1, [pc, #12]	; (2674c <hexdump_line_print+0xac>)
   2673e:	4628      	mov	r0, r5
   26740:	f7ff ff2c 	bl	2659c <print_formatted>
   26744:	e7e8      	b.n	26718 <hexdump_line_print+0x78>
		}
	}
}
   26746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2674a:	bf00      	nop
   2674c:	00044c28 	.word	0x00044c28
   26750:	00042364 	.word	0x00042364
   26754:	0004235c 	.word	0x0004235c
   26758:	00042368 	.word	0x00042368
   2675c:	0004236c 	.word	0x0004236c
   26760:	00045e47 	.word	0x00045e47

00026764 <ids_print>:
{
   26764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26768:	4680      	mov	r8, r0
   2676a:	4616      	mov	r6, r2
   2676c:	461d      	mov	r5, r3
   2676e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   26772:	b959      	cbnz	r1, 2678c <ids_print+0x28>
	int total = 0;
   26774:	2400      	movs	r4, #0
	if (source_id >= 0) {
   26776:	2f00      	cmp	r7, #0
   26778:	db1c      	blt.n	267b4 <ids_print+0x50>
		total += print_formatted(output,
   2677a:	b186      	cbz	r6, 2679e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   2677c:	2301      	movs	r3, #1
   2677e:	9a07      	ldr	r2, [sp, #28]
   26780:	4093      	lsls	r3, r2
				(func_on &&
   26782:	f013 0f10 	tst.w	r3, #16
   26786:	d118      	bne.n	267ba <ids_print+0x56>
		total += print_formatted(output,
   26788:	4e0d      	ldr	r6, [pc, #52]	; (267c0 <ids_print+0x5c>)
   2678a:	e009      	b.n	267a0 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   2678c:	4b0d      	ldr	r3, [pc, #52]	; (267c4 <ids_print+0x60>)
   2678e:	9a07      	ldr	r2, [sp, #28]
   26790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26794:	490c      	ldr	r1, [pc, #48]	; (267c8 <ids_print+0x64>)
   26796:	f7ff ff01 	bl	2659c <print_formatted>
   2679a:	4604      	mov	r4, r0
   2679c:	e7eb      	b.n	26776 <ids_print+0x12>
		total += print_formatted(output,
   2679e:	4e08      	ldr	r6, [pc, #32]	; (267c0 <ids_print+0x5c>)
   267a0:	4639      	mov	r1, r7
   267a2:	4628      	mov	r0, r5
   267a4:	f7ff feb8 	bl	26518 <log_source_name_get>
   267a8:	4602      	mov	r2, r0
   267aa:	4631      	mov	r1, r6
   267ac:	4640      	mov	r0, r8
   267ae:	f7ff fef5 	bl	2659c <print_formatted>
   267b2:	4404      	add	r4, r0
}
   267b4:	4620      	mov	r0, r4
   267b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   267ba:	4e04      	ldr	r6, [pc, #16]	; (267cc <ids_print+0x68>)
   267bc:	e7f0      	b.n	267a0 <ids_print+0x3c>
   267be:	bf00      	nop
   267c0:	00042370 	.word	0x00042370
   267c4:	000423f0 	.word	0x000423f0
   267c8:	0004237c 	.word	0x0004237c
   267cc:	00042378 	.word	0x00042378

000267d0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   267d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267d4:	b085      	sub	sp, #20
   267d6:	4605      	mov	r5, r0
   267d8:	460c      	mov	r4, r1
   267da:	4616      	mov	r6, r2
   267dc:	9303      	str	r3, [sp, #12]
   267de:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   267e2:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   267e6:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   267ea:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   267ee:	f015 fc40 	bl	3c072 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   267f2:	b1e8      	cbz	r0, 26830 <prefix_print+0x60>
   267f4:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   267f6:	4913      	ldr	r1, [pc, #76]	; (26844 <prefix_print+0x74>)
   267f8:	4628      	mov	r0, r5
   267fa:	f7ff fecf 	bl	2659c <print_formatted>
   267fe:	4607      	mov	r7, r0
	}

	if (stamp) {
   26800:	f1bb 0f00 	cmp.w	fp, #0
   26804:	d116      	bne.n	26834 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   26806:	4642      	mov	r2, r8
   26808:	4651      	mov	r1, sl
   2680a:	4628      	mov	r0, r5
   2680c:	f015 fc58 	bl	3c0c0 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   26810:	f8cd 8004 	str.w	r8, [sp, #4]
   26814:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   26818:	9300      	str	r3, [sp, #0]
   2681a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   2681e:	4632      	mov	r2, r6
   26820:	4649      	mov	r1, r9
   26822:	4628      	mov	r0, r5
   26824:	f7ff ff9e 	bl	26764 <ids_print>
			domain_id, source_id, level);


	return length;
}
   26828:	4438      	add	r0, r7
   2682a:	b005      	add	sp, #20
   2682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   26830:	2700      	movs	r7, #0
   26832:	e7e5      	b.n	26800 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   26834:	9a03      	ldr	r2, [sp, #12]
   26836:	4621      	mov	r1, r4
   26838:	4628      	mov	r0, r5
   2683a:	f7ff fec1 	bl	265c0 <timestamp_print>
   2683e:	4407      	add	r7, r0
   26840:	e7e1      	b.n	26806 <prefix_print+0x36>
   26842:	bf00      	nop
   26844:	00042384 	.word	0x00042384

00026848 <log_output_string>:
}

void log_output_string(const struct log_output *output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   26848:	b570      	push	{r4, r5, r6, lr}
   2684a:	b084      	sub	sp, #16
   2684c:	4605      	mov	r5, r0
   2684e:	461e      	mov	r6, r3
	int length;
	uint8_t level = (uint8_t)src_level.level;
	uint8_t domain_id = (uint8_t)src_level.domain_id;
   26850:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	int16_t source_id = (int16_t)src_level.source_id;
   26854:	f3c1 1089 	ubfx	r0, r1, #6, #10
		log_output_string_syst_process(output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   26858:	f011 0407 	ands.w	r4, r1, #7
   2685c:	d10f      	bne.n	2687e <log_output_string+0x36>
		prefix_print(output, flags, true, timestamp,
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)output, fmt, ap);
   2685e:	9b08      	ldr	r3, [sp, #32]
   26860:	4632      	mov	r2, r6
   26862:	4629      	mov	r1, r5
   26864:	4810      	ldr	r0, [pc, #64]	; (268a8 <log_output_string+0x60>)
   26866:	f7fe ffdb 	bl	25820 <cbvprintf>

	(void)length;

	if (raw_string) {
   2686a:	b994      	cbnz	r4, 26892 <log_output_string+0x4a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   2686c:	4630      	mov	r0, r6
   2686e:	f015 fc1c 	bl	3c0aa <ends_with_newline>
   26872:	b198      	cbz	r0, 2689c <log_output_string+0x54>
			print_formatted(output, "\r");
   26874:	490d      	ldr	r1, [pc, #52]	; (268ac <log_output_string+0x64>)
   26876:	4628      	mov	r0, r5
   26878:	f7ff fe90 	bl	2659c <print_formatted>
   2687c:	e00e      	b.n	2689c <log_output_string+0x54>
		prefix_print(output, flags, true, timestamp,
   2687e:	9002      	str	r0, [sp, #8]
   26880:	9301      	str	r3, [sp, #4]
   26882:	9400      	str	r4, [sp, #0]
   26884:	4613      	mov	r3, r2
   26886:	2201      	movs	r2, #1
   26888:	9909      	ldr	r1, [sp, #36]	; 0x24
   2688a:	4628      	mov	r0, r5
   2688c:	f7ff ffa0 	bl	267d0 <prefix_print>
   26890:	e7e5      	b.n	2685e <log_output_string+0x16>
		}
	} else {
		postfix_print(output, flags, level);
   26892:	4622      	mov	r2, r4
   26894:	9909      	ldr	r1, [sp, #36]	; 0x24
   26896:	4628      	mov	r0, r5
   26898:	f015 fc1e 	bl	3c0d8 <postfix_print>
	}

	log_output_flush(output);
   2689c:	4628      	mov	r0, r5
   2689e:	f015 fc27 	bl	3c0f0 <log_output_flush>
}
   268a2:	b004      	add	sp, #16
   268a4:	bd70      	pop	{r4, r5, r6, pc}
   268a6:	bf00      	nop
   268a8:	0003c077 	.word	0x0003c077
   268ac:	000423b8 	.word	0x000423b8

000268b0 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   268b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   268b4:	b084      	sub	sp, #16
   268b6:	4607      	mov	r7, r0
   268b8:	461d      	mov	r5, r3
   268ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   268bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   268be:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	uint32_t prefix_offset;
	uint8_t level = (uint8_t)src_level.level;
   268c2:	f001 0a07 	and.w	sl, r1, #7
	uint8_t domain_id = (uint8_t)src_level.domain_id;
   268c6:	f3c1 03c2 	ubfx	r3, r1, #3, #3
	int16_t source_id = (int16_t)src_level.source_id;
   268ca:	f3c1 1189 	ubfx	r1, r1, #6, #10
		log_output_hexdump_syst_process(output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(output, flags, true, timestamp,
   268ce:	9102      	str	r1, [sp, #8]
   268d0:	9301      	str	r3, [sp, #4]
   268d2:	f8cd a000 	str.w	sl, [sp]
   268d6:	4613      	mov	r3, r2
   268d8:	2201      	movs	r2, #1
   268da:	4641      	mov	r1, r8
   268dc:	f7ff ff78 	bl	267d0 <prefix_print>
   268e0:	4681      	mov	r9, r0
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(output, "%s", metadata);
   268e2:	462a      	mov	r2, r5
   268e4:	490f      	ldr	r1, [pc, #60]	; (26924 <log_output_hexdump+0x74>)
   268e6:	4638      	mov	r0, r7
   268e8:	f7ff fe58 	bl	2659c <print_formatted>

	while (length != 0U) {
   268ec:	b174      	cbz	r4, 2690c <log_output_hexdump+0x5c>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   268ee:	4625      	mov	r5, r4
   268f0:	2c10      	cmp	r4, #16
   268f2:	bf28      	it	cs
   268f4:	2510      	movcs	r5, #16
				HEXDUMP_BYTES_IN_LINE : length;

		hexdump_line_print(output, data, part_len,
   268f6:	f8cd 8000 	str.w	r8, [sp]
   268fa:	464b      	mov	r3, r9
   268fc:	462a      	mov	r2, r5
   268fe:	4631      	mov	r1, r6
   26900:	4638      	mov	r0, r7
   26902:	f7ff fecd 	bl	266a0 <hexdump_line_print>
				   prefix_offset, flags);

		data += part_len;
   26906:	442e      	add	r6, r5
		length -= part_len;
   26908:	1b64      	subs	r4, r4, r5
   2690a:	e7ef      	b.n	268ec <log_output_hexdump+0x3c>
	}

	postfix_print(output, flags, level);
   2690c:	4652      	mov	r2, sl
   2690e:	4641      	mov	r1, r8
   26910:	4638      	mov	r0, r7
   26912:	f015 fbe1 	bl	3c0d8 <postfix_print>
	log_output_flush(output);
   26916:	4638      	mov	r0, r7
   26918:	f015 fbea 	bl	3c0f0 <log_output_flush>
}
   2691c:	b004      	add	sp, #16
   2691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26922:	bf00      	nop
   26924:	00044678 	.word	0x00044678

00026928 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   26928:	4b07      	ldr	r3, [pc, #28]	; (26948 <log_output_timestamp_freq_set+0x20>)
   2692a:	2201      	movs	r2, #1
   2692c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   2692e:	4b07      	ldr	r3, [pc, #28]	; (2694c <log_output_timestamp_freq_set+0x24>)
   26930:	4298      	cmp	r0, r3
   26932:	d905      	bls.n	26940 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   26934:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   26936:	4a04      	ldr	r2, [pc, #16]	; (26948 <log_output_timestamp_freq_set+0x20>)
   26938:	6813      	ldr	r3, [r2, #0]
   2693a:	005b      	lsls	r3, r3, #1
   2693c:	6013      	str	r3, [r2, #0]
   2693e:	e7f6      	b.n	2692e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   26940:	4b03      	ldr	r3, [pc, #12]	; (26950 <log_output_timestamp_freq_set+0x28>)
   26942:	6018      	str	r0, [r3, #0]
}
   26944:	4770      	bx	lr
   26946:	bf00      	nop
   26948:	2000fedc 	.word	0x2000fedc
   2694c:	000f4240 	.word	0x000f4240
   26950:	2000fed8 	.word	0x2000fed8

00026954 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   26954:	4b01      	ldr	r3, [pc, #4]	; (2695c <log_backend_rtt_init+0x8>)
   26956:	2201      	movs	r2, #1
   26958:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   2695a:	4770      	bx	lr
   2695c:	20010df8 	.word	0x20010df8

00026960 <on_failed_write>:
{
   26960:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   26962:	b918      	cbnz	r0, 2696c <on_failed_write+0xc>
		host_present = false;
   26964:	4b04      	ldr	r3, [pc, #16]	; (26978 <on_failed_write+0x18>)
   26966:	2200      	movs	r2, #0
   26968:	701a      	strb	r2, [r3, #0]
}
   2696a:	bd08      	pop	{r3, pc}
	z_impl_k_busy_wait(usec_to_wait);
   2696c:	f241 3088 	movw	r0, #5000	; 0x1388
   26970:	f019 f9d2 	bl	3fd18 <z_impl_k_busy_wait>
   26974:	e7f9      	b.n	2696a <on_failed_write+0xa>
   26976:	bf00      	nop
   26978:	20010df8 	.word	0x20010df8

0002697c <on_write>:
{
   2697c:	b538      	push	{r3, r4, r5, lr}
   2697e:	4604      	mov	r4, r0
	host_present = true;
   26980:	4b0a      	ldr	r3, [pc, #40]	; (269ac <on_write+0x30>)
   26982:	2201      	movs	r2, #1
   26984:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   26986:	4b0a      	ldr	r3, [pc, #40]	; (269b0 <on_write+0x34>)
   26988:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   2698a:	b903      	cbnz	r3, 2698e <on_write+0x12>
}
   2698c:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   2698e:	2000      	movs	r0, #0
   26990:	f00b fed8 	bl	32744 <SEGGER_RTT_HasDataUp>
   26994:	2800      	cmp	r0, #0
   26996:	d0f9      	beq.n	2698c <on_write+0x10>
   26998:	4b04      	ldr	r3, [pc, #16]	; (269ac <on_write+0x30>)
   2699a:	781b      	ldrb	r3, [r3, #0]
   2699c:	2b00      	cmp	r3, #0
   2699e:	d0f5      	beq.n	2698c <on_write+0x10>
			on_failed_write(retry_cnt--);
   269a0:	1e65      	subs	r5, r4, #1
   269a2:	4620      	mov	r0, r4
   269a4:	f7ff ffdc 	bl	26960 <on_failed_write>
   269a8:	462c      	mov	r4, r5
   269aa:	e7f0      	b.n	2698e <on_write+0x12>
   269ac:	20010df8 	.word	0x20010df8
   269b0:	20010df9 	.word	0x20010df9

000269b4 <data_out_block_mode>:
{
   269b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   269b6:	4606      	mov	r6, r0
   269b8:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   269ba:	2704      	movs	r7, #4
   269bc:	e006      	b.n	269cc <data_out_block_mode+0x18>
			on_write(retry_cnt);
   269be:	4638      	mov	r0, r7
   269c0:	f7ff ffdc 	bl	2697c <on_write>
	} while ((ret == 0) && host_present);
   269c4:	b99c      	cbnz	r4, 269ee <data_out_block_mode+0x3a>
   269c6:	4b0d      	ldr	r3, [pc, #52]	; (269fc <data_out_block_mode+0x48>)
   269c8:	781b      	ldrb	r3, [r3, #0]
   269ca:	b183      	cbz	r3, 269ee <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   269cc:	462a      	mov	r2, r5
   269ce:	4631      	mov	r1, r6
   269d0:	2000      	movs	r0, #0
   269d2:	f00b fe1d 	bl	32610 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   269d6:	4604      	mov	r4, r0
   269d8:	2800      	cmp	r0, #0
   269da:	d1f0      	bne.n	269be <data_out_block_mode+0xa>
		} else if (host_present) {
   269dc:	4b07      	ldr	r3, [pc, #28]	; (269fc <data_out_block_mode+0x48>)
   269de:	781b      	ldrb	r3, [r3, #0]
   269e0:	2b00      	cmp	r3, #0
   269e2:	d0ef      	beq.n	269c4 <data_out_block_mode+0x10>
			retry_cnt--;
   269e4:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   269e6:	4638      	mov	r0, r7
   269e8:	f7ff ffba 	bl	26960 <on_failed_write>
   269ec:	e7ea      	b.n	269c4 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
   269ee:	b914      	cbnz	r4, 269f6 <data_out_block_mode+0x42>
   269f0:	4b02      	ldr	r3, [pc, #8]	; (269fc <data_out_block_mode+0x48>)
   269f2:	781b      	ldrb	r3, [r3, #0]
   269f4:	b903      	cbnz	r3, 269f8 <data_out_block_mode+0x44>
   269f6:	462c      	mov	r4, r5
}
   269f8:	4620      	mov	r0, r4
   269fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   269fc:	20010df8 	.word	0x20010df8

00026a00 <panic>:

static void panic(struct log_backend const *const backend)
{
   26a00:	b508      	push	{r3, lr}
	panic_mode = true;
   26a02:	4b03      	ldr	r3, [pc, #12]	; (26a10 <panic+0x10>)
   26a04:	2201      	movs	r2, #1
   26a06:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   26a08:	4802      	ldr	r0, [pc, #8]	; (26a14 <panic+0x14>)
   26a0a:	f015 fb71 	bl	3c0f0 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
   26a0e:	bd08      	pop	{r3, pc}
   26a10:	20010df9 	.word	0x20010df9
   26a14:	00042430 	.word	0x00042430

00026a18 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   26a18:	b500      	push	{lr}
   26a1a:	b085      	sub	sp, #20
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(output, src_level, timestamp,
   26a1c:	200f      	movs	r0, #15
   26a1e:	9002      	str	r0, [sp, #8]
   26a20:	9807      	ldr	r0, [sp, #28]
   26a22:	9001      	str	r0, [sp, #4]
   26a24:	9806      	ldr	r0, [sp, #24]
   26a26:	9000      	str	r0, [sp, #0]
   26a28:	4802      	ldr	r0, [pc, #8]	; (26a34 <sync_hexdump+0x1c>)
   26a2a:	f7ff ff41 	bl	268b0 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_rtt, flag, src_level,
				     timestamp, metadata, data, length);
}
   26a2e:	b005      	add	sp, #20
   26a30:	f85d fb04 	ldr.w	pc, [sp], #4
   26a34:	00042430 	.word	0x00042430

00026a38 <sync_string>:
{
   26a38:	b500      	push	{lr}
   26a3a:	b083      	sub	sp, #12
	log_output_string(output, src_level, timestamp, fmt, ap, flags);
   26a3c:	200f      	movs	r0, #15
   26a3e:	9001      	str	r0, [sp, #4]
   26a40:	9804      	ldr	r0, [sp, #16]
   26a42:	9000      	str	r0, [sp, #0]
   26a44:	4802      	ldr	r0, [pc, #8]	; (26a50 <sync_string+0x18>)
   26a46:	f7ff feff 	bl	26848 <log_output_string>
}
   26a4a:	b003      	add	sp, #12
   26a4c:	f85d fb04 	ldr.w	pc, [sp], #4
   26a50:	00042430 	.word	0x00042430

00026a54 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   26a54:	b570      	push	{r4, r5, r6, lr}
   26a56:	b08e      	sub	sp, #56	; 0x38
   26a58:	4604      	mov	r4, r0
   26a5a:	460e      	mov	r6, r1
   26a5c:	4615      	mov	r5, r2
	struct sntp_pkt tx_pkt = { 0 };
   26a5e:	2230      	movs	r2, #48	; 0x30
   26a60:	2100      	movs	r1, #0
   26a62:	a802      	add	r0, sp, #8
   26a64:	f019 fa6c 	bl	3ff40 <memset>
	int ret = 0;

	if (!ctx || !time) {
   26a68:	b32c      	cbz	r4, 26ab6 <sntp_query+0x62>
   26a6a:	b33d      	cbz	r5, 26abc <sntp_query+0x68>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   26a6c:	231b      	movs	r3, #27
   26a6e:	f88d 3008 	strb.w	r3, [sp, #8]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   26a72:	f015 fb4a 	bl	3c10a <get_uptime_in_sec>
   26a76:	4a13      	ldr	r2, [pc, #76]	; (26ac4 <sntp_query+0x70>)
   26a78:	4402      	add	r2, r0
   26a7a:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   26a7c:	0a13      	lsrs	r3, r2, #8
   26a7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   26a82:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   26a86:	0211      	lsls	r1, r2, #8
   26a88:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   26a8c:	430b      	orrs	r3, r1
   26a8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   26a92:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   26a94:	68e0      	ldr	r0, [r4, #12]
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   26a96:	2300      	movs	r3, #0
   26a98:	9301      	str	r3, [sp, #4]
   26a9a:	9300      	str	r3, [sp, #0]
   26a9c:	2230      	movs	r2, #48	; 0x30
   26a9e:	a902      	add	r1, sp, #8
   26aa0:	f015 fc2e 	bl	3c300 <z_impl_zsock_sendto>
	if (ret < 0) {
   26aa4:	2800      	cmp	r0, #0
   26aa6:	db04      	blt.n	26ab2 <sntp_query+0x5e>
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
   26aa8:	462a      	mov	r2, r5
   26aaa:	4631      	mov	r1, r6
   26aac:	4620      	mov	r0, r4
   26aae:	f015 fb4c 	bl	3c14a <sntp_recv_response>
}
   26ab2:	b00e      	add	sp, #56	; 0x38
   26ab4:	bd70      	pop	{r4, r5, r6, pc}
		return -EFAULT;
   26ab6:	f06f 000d 	mvn.w	r0, #13
   26aba:	e7fa      	b.n	26ab2 <sntp_query+0x5e>
   26abc:	f06f 000d 	mvn.w	r0, #13
   26ac0:	e7f7      	b.n	26ab2 <sntp_query+0x5e>
   26ac2:	bf00      	nop
   26ac4:	83aa7e80 	.word	0x83aa7e80

00026ac8 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   26ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26acc:	4605      	mov	r5, r0
   26ace:	460e      	mov	r6, r1
   26ad0:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   26ad2:	4c1d      	ldr	r4, [pc, #116]	; (26b48 <z_impl_zsock_socket+0x80>)
   26ad4:	4b1d      	ldr	r3, [pc, #116]	; (26b4c <z_impl_zsock_socket+0x84>)
   26ad6:	429c      	cmp	r4, r3
   26ad8:	d823      	bhi.n	26b22 <z_impl_zsock_socket+0x5a>
   26ada:	4b1c      	ldr	r3, [pc, #112]	; (26b4c <z_impl_zsock_socket+0x84>)
   26adc:	429c      	cmp	r4, r3
   26ade:	d22c      	bcs.n	26b3a <z_impl_zsock_socket+0x72>
		if (sock_family->family != family &&
   26ae0:	6823      	ldr	r3, [r4, #0]
   26ae2:	42ab      	cmp	r3, r5
   26ae4:	d000      	beq.n	26ae8 <z_impl_zsock_socket+0x20>
   26ae6:	b9d3      	cbnz	r3, 26b1e <z_impl_zsock_socket+0x56>
		    sock_family->family != AF_UNSPEC) {
			continue;
		}

		NET_ASSERT(sock_family->is_supported);
   26ae8:	6863      	ldr	r3, [r4, #4]
   26aea:	b163      	cbz	r3, 26b06 <z_impl_zsock_socket+0x3e>

		if (!sock_family->is_supported(family, type, proto)) {
   26aec:	6863      	ldr	r3, [r4, #4]
   26aee:	463a      	mov	r2, r7
   26af0:	4631      	mov	r1, r6
   26af2:	4628      	mov	r0, r5
   26af4:	4798      	blx	r3
   26af6:	b190      	cbz	r0, 26b1e <z_impl_zsock_socket+0x56>
			continue;
		}

		return sock_family->handler(family, type, proto);
   26af8:	68a3      	ldr	r3, [r4, #8]
   26afa:	463a      	mov	r2, r7
   26afc:	4631      	mov	r1, r6
   26afe:	4628      	mov	r0, r5
   26b00:	4798      	blx	r3
	}

	errno = EAFNOSUPPORT;
	return -1;
}
   26b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NET_ASSERT(sock_family->is_supported);
   26b06:	f8df 804c 	ldr.w	r8, [pc, #76]	; 26b54 <z_impl_zsock_socket+0x8c>
   26b0a:	22db      	movs	r2, #219	; 0xdb
   26b0c:	4641      	mov	r1, r8
   26b0e:	4810      	ldr	r0, [pc, #64]	; (26b50 <z_impl_zsock_socket+0x88>)
   26b10:	f015 f812 	bl	3bb38 <printk>
   26b14:	21db      	movs	r1, #219	; 0xdb
   26b16:	4640      	mov	r0, r8
   26b18:	f015 fa62 	bl	3bfe0 <assert_post_action>
   26b1c:	e7e6      	b.n	26aec <z_impl_zsock_socket+0x24>
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   26b1e:	340c      	adds	r4, #12
   26b20:	e7d8      	b.n	26ad4 <z_impl_zsock_socket+0xc>
   26b22:	f8df 8030 	ldr.w	r8, [pc, #48]	; 26b54 <z_impl_zsock_socket+0x8c>
   26b26:	22d5      	movs	r2, #213	; 0xd5
   26b28:	4641      	mov	r1, r8
   26b2a:	4809      	ldr	r0, [pc, #36]	; (26b50 <z_impl_zsock_socket+0x88>)
   26b2c:	f015 f804 	bl	3bb38 <printk>
   26b30:	21d5      	movs	r1, #213	; 0xd5
   26b32:	4640      	mov	r0, r8
   26b34:	f015 fa54 	bl	3bfe0 <assert_post_action>
   26b38:	e7cf      	b.n	26ada <z_impl_zsock_socket+0x12>
	errno = EAFNOSUPPORT;
   26b3a:	f015 fe9d 	bl	3c878 <__errno>
   26b3e:	236a      	movs	r3, #106	; 0x6a
   26b40:	6003      	str	r3, [r0, #0]
	return -1;
   26b42:	f04f 30ff 	mov.w	r0, #4294967295
   26b46:	e7dc      	b.n	26b02 <z_impl_zsock_socket+0x3a>
   26b48:	000411f4 	.word	0x000411f4
   26b4c:	00041200 	.word	0x00041200
   26b50:	00041c84 	.word	0x00041c84
   26b54:	00042470 	.word	0x00042470

00026b58 <zsock_poll_internal>:

	return timeout - elapsed;
}

int zsock_poll_internal(struct zsock_pollfd *fds, int nfds, k_timeout_t timeout)
{
   26b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b5c:	b09f      	sub	sp, #124	; 0x7c
   26b5e:	4604      	mov	r4, r0
   26b60:	9003      	str	r0, [sp, #12]
   26b62:	460d      	mov	r5, r1
   26b64:	9104      	str	r1, [sp, #16]
   26b66:	4692      	mov	sl, r2
   26b68:	469b      	mov	fp, r3
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	end = sys_clock_timeout_end_calc(timeout);
   26b6a:	4610      	mov	r0, r2
   26b6c:	4619      	mov	r1, r3
   26b6e:	f019 f8d9 	bl	3fd24 <sys_clock_timeout_end_calc>
   26b72:	9006      	str	r0, [sp, #24]
   26b74:	9107      	str	r1, [sp, #28]

	pev = poll_events;
   26b76:	ab0f      	add	r3, sp, #60	; 0x3c
   26b78:	930e      	str	r3, [sp, #56]	; 0x38
	void *offl_ctx = NULL;
   26b7a:	2300      	movs	r3, #0
   26b7c:	9305      	str	r3, [sp, #20]
	const struct fd_op_vtable *offl_vtable = NULL;
   26b7e:	4699      	mov	r9, r3
	bool offload = false;
   26b80:	4698      	mov	r8, r3
	for (pfd = fds, i = nfds; i--; pfd++) {
   26b82:	e00b      	b.n	26b9c <zsock_poll_internal+0x44>
			/* If POLL_PREPARE returned with EALREADY, it means
			 * it already detected that some socket is ready. In
			 * this case, we still perform a k_poll to pick up
			 * as many events as possible, but without any wait.
			 */
			timeout = K_NO_WAIT;
   26b84:	f04f 0a00 	mov.w	sl, #0
   26b88:	f04f 0b00 	mov.w	fp, #0
			result = 0;
   26b8c:	2500      	movs	r5, #0
			}

			result = 0;
		}

		k_mutex_unlock(lock);
   26b8e:	980c      	ldr	r0, [sp, #48]	; 0x30
	return z_impl_k_mutex_unlock(mutex);
   26b90:	f00f fb14 	bl	361bc <z_impl_k_mutex_unlock>

		if (result < 0) {
   26b94:	2d00      	cmp	r5, #0
   26b96:	db35      	blt.n	26c04 <zsock_poll_internal+0xac>
	for (pfd = fds, i = nfds; i--; pfd++) {
   26b98:	3408      	adds	r4, #8
   26b9a:	4635      	mov	r5, r6
   26b9c:	1e6e      	subs	r6, r5, #1
   26b9e:	2d00      	cmp	r5, #0
   26ba0:	d037      	beq.n	26c12 <zsock_poll_internal+0xba>
		if (pfd->fd < 0) {
   26ba2:	6820      	ldr	r0, [r4, #0]
   26ba4:	2800      	cmp	r0, #0
   26ba6:	dbf7      	blt.n	26b98 <zsock_poll_internal+0x40>
	ctx = z_get_fd_obj_and_vtable(sock,
   26ba8:	aa0c      	add	r2, sp, #48	; 0x30
   26baa:	a90d      	add	r1, sp, #52	; 0x34
   26bac:	f7fe f862 	bl	24c74 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   26bb0:	4607      	mov	r7, r0
   26bb2:	2800      	cmp	r0, #0
   26bb4:	d0f0      	beq.n	26b98 <zsock_poll_internal+0x40>
		(void)k_mutex_lock(lock, K_FOREVER);
   26bb6:	980c      	ldr	r0, [sp, #48]	; 0x30
	return z_impl_k_mutex_lock(mutex, timeout);
   26bb8:	f04f 32ff 	mov.w	r2, #4294967295
   26bbc:	f04f 33ff 	mov.w	r3, #4294967295
   26bc0:	f00f fa06 	bl	35fd0 <z_impl_k_mutex_lock>
		result = z_fdtable_call_ioctl(vtable, ctx,
   26bc4:	ab1e      	add	r3, sp, #120	; 0x78
   26bc6:	9301      	str	r3, [sp, #4]
   26bc8:	ab0e      	add	r3, sp, #56	; 0x38
   26bca:	9300      	str	r3, [sp, #0]
   26bcc:	4623      	mov	r3, r4
   26bce:	f44f 7281 	mov.w	r2, #258	; 0x102
   26bd2:	4639      	mov	r1, r7
   26bd4:	980d      	ldr	r0, [sp, #52]	; 0x34
   26bd6:	f015 fb36 	bl	3c246 <z_fdtable_call_ioctl>
   26bda:	4605      	mov	r5, r0
		if (result == -EALREADY) {
   26bdc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   26be0:	d0d0      	beq.n	26b84 <zsock_poll_internal+0x2c>
		} else if (result == -EXDEV) {
   26be2:	f110 0f12 	cmn.w	r0, #18
   26be6:	d1d2      	bne.n	26b8e <zsock_poll_internal+0x36>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   26be8:	f1b9 0f00 	cmp.w	r9, #0
   26bec:	d003      	beq.n	26bf6 <zsock_poll_internal+0x9e>
			result = 0;
   26bee:	2500      	movs	r5, #0
			offload = true;
   26bf0:	f04f 0801 	mov.w	r8, #1
   26bf4:	e7cb      	b.n	26b8e <zsock_poll_internal+0x36>
				offl_vtable = vtable;
   26bf6:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
				offl_ctx = ctx;
   26bfa:	9705      	str	r7, [sp, #20]
			result = 0;
   26bfc:	2500      	movs	r5, #0
			offload = true;
   26bfe:	f04f 0801 	mov.w	r8, #1
   26c02:	e7c4      	b.n	26b8e <zsock_poll_internal+0x36>
			errno = -result;
   26c04:	f015 fe38 	bl	3c878 <__errno>
   26c08:	426d      	negs	r5, r5
   26c0a:	6005      	str	r5, [r0, #0]
			return -1;
   26c0c:	f04f 39ff 	mov.w	r9, #4294967295
   26c10:	e0c3      	b.n	26d9a <zsock_poll_internal+0x242>
		}
	}

	if (offload) {
   26c12:	f1b8 0f00 	cmp.w	r8, #0
   26c16:	d10a      	bne.n	26c2e <zsock_poll_internal+0xd6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
					    ZFD_IOCTL_POLL_OFFLOAD,
					    fds, nfds, poll_timeout);
	}

	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26c18:	ea5a 030b 	orrs.w	r3, sl, fp
   26c1c:	d04e      	beq.n	26cbc <zsock_poll_internal+0x164>
   26c1e:	f1bb 3fff 	cmp.w	fp, #4294967295
   26c22:	bf08      	it	eq
   26c24:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   26c28:	d12f      	bne.n	26c8a <zsock_poll_internal+0x132>
   26c2a:	9505      	str	r5, [sp, #20]
   26c2c:	e09b      	b.n	26d66 <zsock_poll_internal+0x20e>
		if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26c2e:	f1bb 3fff 	cmp.w	fp, #4294967295
   26c32:	bf08      	it	eq
   26c34:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   26c38:	d024      	beq.n	26c84 <zsock_poll_internal+0x12c>
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ticks_to_ms_floor32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, true, false, false);
   26c3a:	2100      	movs	r1, #0
   26c3c:	4608      	mov	r0, r1
   26c3e:	4651      	mov	r1, sl
			return (uint32_t)((t * to_hz + off) / from_hz);
   26c40:	014b      	lsls	r3, r1, #5
   26c42:	0eca      	lsrs	r2, r1, #27
   26c44:	ebb3 030a 	subs.w	r3, r3, sl
   26c48:	eb62 0200 	sbc.w	r2, r2, r0
   26c4c:	0094      	lsls	r4, r2, #2
   26c4e:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   26c52:	009d      	lsls	r5, r3, #2
   26c54:	4622      	mov	r2, r4
   26c56:	eb15 030a 	adds.w	r3, r5, sl
   26c5a:	eb40 0202 	adc.w	r2, r0, r2
   26c5e:	00d1      	lsls	r1, r2, #3
   26c60:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   26c64:	00d8      	lsls	r0, r3, #3
   26c66:	0bc3      	lsrs	r3, r0, #15
   26c68:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   26c6c:	9301      	str	r3, [sp, #4]
   26c6e:	9b04      	ldr	r3, [sp, #16]
   26c70:	9300      	str	r3, [sp, #0]
   26c72:	9b03      	ldr	r3, [sp, #12]
   26c74:	f44f 7282 	mov.w	r2, #260	; 0x104
   26c78:	9905      	ldr	r1, [sp, #20]
   26c7a:	4648      	mov	r0, r9
   26c7c:	f015 fae3 	bl	3c246 <z_fdtable_call_ioctl>
   26c80:	4681      	mov	r9, r0
   26c82:	e08a      	b.n	26d9a <zsock_poll_internal+0x242>
			poll_timeout = SYS_FOREVER_MS;
   26c84:	f04f 33ff 	mov.w	r3, #4294967295
   26c88:	e7f0      	b.n	26c6c <zsock_poll_internal+0x114>
	    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
		int64_t remaining = end - sys_clock_tick_get();
   26c8a:	f011 fe45 	bl	38918 <sys_clock_tick_get>
   26c8e:	9b06      	ldr	r3, [sp, #24]
   26c90:	1a1b      	subs	r3, r3, r0
   26c92:	9308      	str	r3, [sp, #32]
   26c94:	9b07      	ldr	r3, [sp, #28]
   26c96:	eb63 0301 	sbc.w	r3, r3, r1
   26c9a:	9309      	str	r3, [sp, #36]	; 0x24

		if (remaining <= 0) {
   26c9c:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   26ca0:	2b01      	cmp	r3, #1
   26ca2:	f174 0300 	sbcs.w	r3, r4, #0
   26ca6:	db03      	blt.n	26cb0 <zsock_poll_internal+0x158>
			timeout = K_NO_WAIT;
		} else {
			timeout = Z_TIMEOUT_TICKS(remaining);
   26ca8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
   26cac:	9505      	str	r5, [sp, #20]
   26cae:	e05a      	b.n	26d66 <zsock_poll_internal+0x20e>
			timeout = K_NO_WAIT;
   26cb0:	f04f 0a00 	mov.w	sl, #0
   26cb4:	f04f 0b00 	mov.w	fp, #0
   26cb8:	9505      	str	r5, [sp, #20]
   26cba:	e054      	b.n	26d66 <zsock_poll_internal+0x20e>
   26cbc:	9505      	str	r5, [sp, #20]
   26cbe:	e052      	b.n	26d66 <zsock_poll_internal+0x20e>
		}

		retry = false;
		ret = 0;

		pev = poll_events;
   26cc0:	ab0f      	add	r3, sp, #60	; 0x3c
   26cc2:	930e      	str	r3, [sp, #56]	; 0x38
		for (pfd = fds, i = nfds; i--; pfd++) {
   26cc4:	9c03      	ldr	r4, [sp, #12]
   26cc6:	9b04      	ldr	r3, [sp, #16]
		ret = 0;
   26cc8:	f8dd 9014 	ldr.w	r9, [sp, #20]
		retry = false;
   26ccc:	4647      	mov	r7, r8
		for (pfd = fds, i = nfds; i--; pfd++) {
   26cce:	e005      	b.n	26cdc <zsock_poll_internal+0x184>
			ctx = get_sock_vtable(
				pfd->fd,
				(const struct socket_op_vtable **)&vtable,
				&lock);
			if (ctx == NULL) {
				pfd->revents = ZSOCK_POLLNVAL;
   26cd0:	2320      	movs	r3, #32
   26cd2:	80e3      	strh	r3, [r4, #6]
				ret++;
   26cd4:	f109 0901 	add.w	r9, r9, #1
		for (pfd = fds, i = nfds; i--; pfd++) {
   26cd8:	3408      	adds	r4, #8
   26cda:	4633      	mov	r3, r6
   26cdc:	1e5e      	subs	r6, r3, #1
   26cde:	2b00      	cmp	r3, #0
   26ce0:	d033      	beq.n	26d4a <zsock_poll_internal+0x1f2>
			pfd->revents = 0;
   26ce2:	2300      	movs	r3, #0
   26ce4:	80e3      	strh	r3, [r4, #6]
			if (pfd->fd < 0) {
   26ce6:	6820      	ldr	r0, [r4, #0]
   26ce8:	4298      	cmp	r0, r3
   26cea:	dbf5      	blt.n	26cd8 <zsock_poll_internal+0x180>
	ctx = z_get_fd_obj_and_vtable(sock,
   26cec:	aa0c      	add	r2, sp, #48	; 0x30
   26cee:	a90d      	add	r1, sp, #52	; 0x34
   26cf0:	f7fd ffc0 	bl	24c74 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   26cf4:	4605      	mov	r5, r0
   26cf6:	2800      	cmp	r0, #0
   26cf8:	d0ea      	beq.n	26cd0 <zsock_poll_internal+0x178>
				continue;
			}

			(void)k_mutex_lock(lock, K_FOREVER);
   26cfa:	980c      	ldr	r0, [sp, #48]	; 0x30
   26cfc:	f04f 32ff 	mov.w	r2, #4294967295
   26d00:	f04f 33ff 	mov.w	r3, #4294967295
   26d04:	f00f f964 	bl	35fd0 <z_impl_k_mutex_lock>

			result = z_fdtable_call_ioctl(vtable, ctx,
   26d08:	ab0e      	add	r3, sp, #56	; 0x38
   26d0a:	9300      	str	r3, [sp, #0]
   26d0c:	4623      	mov	r3, r4
   26d0e:	f240 1203 	movw	r2, #259	; 0x103
   26d12:	4629      	mov	r1, r5
   26d14:	980d      	ldr	r0, [sp, #52]	; 0x34
   26d16:	f015 fa96 	bl	3c246 <z_fdtable_call_ioctl>
   26d1a:	4605      	mov	r5, r0
						      ZFD_IOCTL_POLL_UPDATE,
						      pfd, &pev);
			k_mutex_unlock(lock);
   26d1c:	980c      	ldr	r0, [sp, #48]	; 0x30
	return z_impl_k_mutex_unlock(mutex);
   26d1e:	f00f fa4d 	bl	361bc <z_impl_k_mutex_unlock>

			if (result == -EAGAIN) {
   26d22:	f115 0f0b 	cmn.w	r5, #11
   26d26:	d00e      	beq.n	26d46 <zsock_poll_internal+0x1ee>
				retry = true;
				continue;
			} else if (result != 0) {
   26d28:	b935      	cbnz	r5, 26d38 <zsock_poll_internal+0x1e0>
				errno = -result;
				return -1;
			}

			if (pfd->revents != 0) {
   26d2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   26d2e:	2b00      	cmp	r3, #0
   26d30:	d0d2      	beq.n	26cd8 <zsock_poll_internal+0x180>
				ret++;
   26d32:	f109 0901 	add.w	r9, r9, #1
   26d36:	e7cf      	b.n	26cd8 <zsock_poll_internal+0x180>
				errno = -result;
   26d38:	f015 fd9e 	bl	3c878 <__errno>
   26d3c:	426f      	negs	r7, r5
   26d3e:	6007      	str	r7, [r0, #0]
				return -1;
   26d40:	f04f 39ff 	mov.w	r9, #4294967295
   26d44:	e029      	b.n	26d9a <zsock_poll_internal+0x242>
				retry = true;
   26d46:	2701      	movs	r7, #1
   26d48:	e7c6      	b.n	26cd8 <zsock_poll_internal+0x180>
			}
		}

		if (retry) {
   26d4a:	b15f      	cbz	r7, 26d64 <zsock_poll_internal+0x20c>
			if (ret > 0) {
   26d4c:	f1b9 0f00 	cmp.w	r9, #0
   26d50:	dc23      	bgt.n	26d9a <zsock_poll_internal+0x242>
				break;
			}

			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26d52:	ea5a 030b 	orrs.w	r3, sl, fp
   26d56:	d020      	beq.n	26d9a <zsock_poll_internal+0x242>
				break;
			}

			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26d58:	f1bb 3fff 	cmp.w	fp, #4294967295
   26d5c:	bf08      	it	eq
   26d5e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   26d62:	d11e      	bne.n	26da2 <zsock_poll_internal+0x24a>
				} else {
					timeout = Z_TIMEOUT_TICKS(remaining);
				}
			}
		}
	} while (retry);
   26d64:	b1cf      	cbz	r7, 26d9a <zsock_poll_internal+0x242>
		ret = k_poll(poll_events, pev - poll_events, timeout);
   26d66:	a80f      	add	r0, sp, #60	; 0x3c
   26d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26d6a:	1a1b      	subs	r3, r3, r0
   26d6c:	109b      	asrs	r3, r3, #2
   26d6e:	4915      	ldr	r1, [pc, #84]	; (26dc4 <zsock_poll_internal+0x26c>)
   26d70:	fb01 f103 	mul.w	r1, r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   26d74:	4652      	mov	r2, sl
   26d76:	465b      	mov	r3, fp
   26d78:	f011 ff72 	bl	38c60 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   26d7c:	4604      	mov	r4, r0
   26d7e:	2800      	cmp	r0, #0
   26d80:	d09e      	beq.n	26cc0 <zsock_poll_internal+0x168>
   26d82:	f110 0f0b 	cmn.w	r0, #11
   26d86:	d09b      	beq.n	26cc0 <zsock_poll_internal+0x168>
   26d88:	f110 0f04 	cmn.w	r0, #4
   26d8c:	d098      	beq.n	26cc0 <zsock_poll_internal+0x168>
			errno = -ret;
   26d8e:	f015 fd73 	bl	3c878 <__errno>
   26d92:	4264      	negs	r4, r4
   26d94:	6004      	str	r4, [r0, #0]
			return -1;
   26d96:	f04f 39ff 	mov.w	r9, #4294967295

	return ret;
}
   26d9a:	4648      	mov	r0, r9
   26d9c:	b01f      	add	sp, #124	; 0x7c
   26d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				int64_t remaining = end - sys_clock_tick_get();
   26da2:	f011 fdb9 	bl	38918 <sys_clock_tick_get>
   26da6:	9b06      	ldr	r3, [sp, #24]
   26da8:	1a1b      	subs	r3, r3, r0
   26daa:	930a      	str	r3, [sp, #40]	; 0x28
   26dac:	9b07      	ldr	r3, [sp, #28]
   26dae:	eb63 0301 	sbc.w	r3, r3, r1
   26db2:	930b      	str	r3, [sp, #44]	; 0x2c
				if (remaining <= 0) {
   26db4:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   26db8:	f1ba 0f01 	cmp.w	sl, #1
   26dbc:	f17b 0300 	sbcs.w	r3, fp, #0
   26dc0:	dad0      	bge.n	26d64 <zsock_poll_internal+0x20c>
   26dc2:	e7ea      	b.n	26d9a <zsock_poll_internal+0x242>
   26dc4:	cccccccd 	.word	0xcccccccd

00026dc8 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   26dc8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   26dca:	4604      	mov	r4, r0
   26dcc:	b178      	cbz	r0, 26dee <socket_offload_dns_register+0x26>
	__ASSERT_NO_MSG(dns_offload == NULL);
   26dce:	4b0d      	ldr	r3, [pc, #52]	; (26e04 <socket_offload_dns_register+0x3c>)
   26dd0:	681b      	ldr	r3, [r3, #0]
   26dd2:	b14b      	cbz	r3, 26de8 <socket_offload_dns_register+0x20>
   26dd4:	4d0c      	ldr	r5, [pc, #48]	; (26e08 <socket_offload_dns_register+0x40>)
   26dd6:	2214      	movs	r2, #20
   26dd8:	4629      	mov	r1, r5
   26dda:	480c      	ldr	r0, [pc, #48]	; (26e0c <socket_offload_dns_register+0x44>)
   26ddc:	f014 feac 	bl	3bb38 <printk>
   26de0:	2114      	movs	r1, #20
   26de2:	4628      	mov	r0, r5
   26de4:	f015 f8fc 	bl	3bfe0 <assert_post_action>

	dns_offload = ops;
   26de8:	4b06      	ldr	r3, [pc, #24]	; (26e04 <socket_offload_dns_register+0x3c>)
   26dea:	601c      	str	r4, [r3, #0]
}
   26dec:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(ops);
   26dee:	4d06      	ldr	r5, [pc, #24]	; (26e08 <socket_offload_dns_register+0x40>)
   26df0:	2213      	movs	r2, #19
   26df2:	4629      	mov	r1, r5
   26df4:	4805      	ldr	r0, [pc, #20]	; (26e0c <socket_offload_dns_register+0x44>)
   26df6:	f014 fe9f 	bl	3bb38 <printk>
   26dfa:	2113      	movs	r1, #19
   26dfc:	4628      	mov	r0, r5
   26dfe:	f015 f8ef 	bl	3bfe0 <assert_post_action>
   26e02:	e7e4      	b.n	26dce <socket_offload_dns_register+0x6>
   26e04:	2000fef8 	.word	0x2000fef8
   26e08:	000424a4 	.word	0x000424a4
   26e0c:	00041c84 	.word	0x00041c84

00026e10 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   26e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26e14:	4604      	mov	r4, r0
   26e16:	460d      	mov	r5, r1
   26e18:	4616      	mov	r6, r2
   26e1a:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dns_offload);
   26e1c:	4b14      	ldr	r3, [pc, #80]	; (26e70 <socket_offload_getaddrinfo+0x60>)
   26e1e:	681b      	ldr	r3, [r3, #0]
   26e20:	b173      	cbz	r3, 26e40 <socket_offload_getaddrinfo+0x30>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   26e22:	4b13      	ldr	r3, [pc, #76]	; (26e70 <socket_offload_getaddrinfo+0x60>)
   26e24:	681b      	ldr	r3, [r3, #0]
   26e26:	681b      	ldr	r3, [r3, #0]
   26e28:	b1b3      	cbz	r3, 26e58 <socket_offload_getaddrinfo+0x48>

	return dns_offload->getaddrinfo(node, service, hints, res);
   26e2a:	4b11      	ldr	r3, [pc, #68]	; (26e70 <socket_offload_getaddrinfo+0x60>)
   26e2c:	681b      	ldr	r3, [r3, #0]
   26e2e:	f8d3 8000 	ldr.w	r8, [r3]
   26e32:	463b      	mov	r3, r7
   26e34:	4632      	mov	r2, r6
   26e36:	4629      	mov	r1, r5
   26e38:	4620      	mov	r0, r4
   26e3a:	47c0      	blx	r8
}
   26e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dns_offload);
   26e40:	f8df 8034 	ldr.w	r8, [pc, #52]	; 26e78 <socket_offload_getaddrinfo+0x68>
   26e44:	221d      	movs	r2, #29
   26e46:	4641      	mov	r1, r8
   26e48:	480a      	ldr	r0, [pc, #40]	; (26e74 <socket_offload_getaddrinfo+0x64>)
   26e4a:	f014 fe75 	bl	3bb38 <printk>
   26e4e:	211d      	movs	r1, #29
   26e50:	4640      	mov	r0, r8
   26e52:	f015 f8c5 	bl	3bfe0 <assert_post_action>
   26e56:	e7e4      	b.n	26e22 <socket_offload_getaddrinfo+0x12>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   26e58:	f8df 801c 	ldr.w	r8, [pc, #28]	; 26e78 <socket_offload_getaddrinfo+0x68>
   26e5c:	221e      	movs	r2, #30
   26e5e:	4641      	mov	r1, r8
   26e60:	4804      	ldr	r0, [pc, #16]	; (26e74 <socket_offload_getaddrinfo+0x64>)
   26e62:	f014 fe69 	bl	3bb38 <printk>
   26e66:	211e      	movs	r1, #30
   26e68:	4640      	mov	r0, r8
   26e6a:	f015 f8b9 	bl	3bfe0 <assert_post_action>
   26e6e:	e7dc      	b.n	26e2a <socket_offload_getaddrinfo+0x1a>
   26e70:	2000fef8 	.word	0x2000fef8
   26e74:	00041c84 	.word	0x00041c84
   26e78:	000424a4 	.word	0x000424a4

00026e7c <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   26e7c:	b538      	push	{r3, r4, r5, lr}
   26e7e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(dns_offload);
   26e80:	4b11      	ldr	r3, [pc, #68]	; (26ec8 <socket_offload_freeaddrinfo+0x4c>)
   26e82:	681b      	ldr	r3, [r3, #0]
   26e84:	b14b      	cbz	r3, 26e9a <socket_offload_freeaddrinfo+0x1e>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   26e86:	4b10      	ldr	r3, [pc, #64]	; (26ec8 <socket_offload_freeaddrinfo+0x4c>)
   26e88:	681b      	ldr	r3, [r3, #0]
   26e8a:	685b      	ldr	r3, [r3, #4]
   26e8c:	b183      	cbz	r3, 26eb0 <socket_offload_freeaddrinfo+0x34>

	return dns_offload->freeaddrinfo(res);
   26e8e:	4b0e      	ldr	r3, [pc, #56]	; (26ec8 <socket_offload_freeaddrinfo+0x4c>)
   26e90:	681b      	ldr	r3, [r3, #0]
   26e92:	685b      	ldr	r3, [r3, #4]
   26e94:	4620      	mov	r0, r4
   26e96:	4798      	blx	r3
}
   26e98:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(dns_offload);
   26e9a:	4d0c      	ldr	r5, [pc, #48]	; (26ecc <socket_offload_freeaddrinfo+0x50>)
   26e9c:	2225      	movs	r2, #37	; 0x25
   26e9e:	4629      	mov	r1, r5
   26ea0:	480b      	ldr	r0, [pc, #44]	; (26ed0 <socket_offload_freeaddrinfo+0x54>)
   26ea2:	f014 fe49 	bl	3bb38 <printk>
   26ea6:	2125      	movs	r1, #37	; 0x25
   26ea8:	4628      	mov	r0, r5
   26eaa:	f015 f899 	bl	3bfe0 <assert_post_action>
   26eae:	e7ea      	b.n	26e86 <socket_offload_freeaddrinfo+0xa>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   26eb0:	4d06      	ldr	r5, [pc, #24]	; (26ecc <socket_offload_freeaddrinfo+0x50>)
   26eb2:	2226      	movs	r2, #38	; 0x26
   26eb4:	4629      	mov	r1, r5
   26eb6:	4806      	ldr	r0, [pc, #24]	; (26ed0 <socket_offload_freeaddrinfo+0x54>)
   26eb8:	f014 fe3e 	bl	3bb38 <printk>
   26ebc:	2126      	movs	r1, #38	; 0x26
   26ebe:	4628      	mov	r0, r5
   26ec0:	f015 f88e 	bl	3bfe0 <assert_post_action>
   26ec4:	e7e3      	b.n	26e8e <socket_offload_freeaddrinfo+0x12>
   26ec6:	bf00      	nop
   26ec8:	2000fef8 	.word	0x2000fef8
   26ecc:	000424a4 	.word	0x000424a4
   26ed0:	00041c84 	.word	0x00041c84

00026ed4 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   26ed4:	b430      	push	{r4, r5}
	const struct flash_area *area;

	if (flash_map == NULL) {
   26ed6:	4b0e      	ldr	r3, [pc, #56]	; (26f10 <flash_area_open+0x3c>)
   26ed8:	681c      	ldr	r4, [r3, #0]
   26eda:	b194      	cbz	r4, 26f02 <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   26edc:	2300      	movs	r3, #0
   26ede:	4a0d      	ldr	r2, [pc, #52]	; (26f14 <flash_area_open+0x40>)
   26ee0:	6812      	ldr	r2, [r2, #0]
   26ee2:	4293      	cmp	r3, r2
   26ee4:	da07      	bge.n	26ef6 <flash_area_open+0x22>
		if (flash_map[i].fa_id == idx) {
   26ee6:	011a      	lsls	r2, r3, #4
   26ee8:	eb04 1503 	add.w	r5, r4, r3, lsl #4
   26eec:	5ca2      	ldrb	r2, [r4, r2]
   26eee:	4290      	cmp	r0, r2
   26ef0:	d002      	beq.n	26ef8 <flash_area_open+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
   26ef2:	3301      	adds	r3, #1
   26ef4:	e7f3      	b.n	26ede <flash_area_open+0xa>
			return &flash_map[i];
		}
	}

	return NULL;
   26ef6:	2500      	movs	r5, #0
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
   26ef8:	b135      	cbz	r5, 26f08 <flash_area_open+0x34>
		return -ENOENT;
	}

	*fap = area;
   26efa:	600d      	str	r5, [r1, #0]
	return 0;
   26efc:	2000      	movs	r0, #0
}
   26efe:	bc30      	pop	{r4, r5}
   26f00:	4770      	bx	lr
		return -EACCES;
   26f02:	f06f 000c 	mvn.w	r0, #12
   26f06:	e7fa      	b.n	26efe <flash_area_open+0x2a>
		return -ENOENT;
   26f08:	f06f 0001 	mvn.w	r0, #1
   26f0c:	e7f7      	b.n	26efe <flash_area_open+0x2a>
   26f0e:	bf00      	nop
   26f10:	2000c618 	.word	0x2000c618
   26f14:	00042700 	.word	0x00042700

00026f18 <find_flash_total_size>:
	size_t total_size;
};

static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
   26f18:	b510      	push	{r4, lr}
   26f1a:	460c      	mov	r4, r1
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   26f1c:	680b      	ldr	r3, [r1, #0]
   26f1e:	6842      	ldr	r2, [r0, #4]
   26f20:	4293      	cmp	r3, r2
   26f22:	d804      	bhi.n	26f2e <find_flash_total_size+0x16>
		LOG_ERR("Buffer size is bigger than page");
		ctx->total_size = 0;
		return false;
	}

	ctx->total_size += info->size;
   26f24:	684b      	ldr	r3, [r1, #4]
   26f26:	4413      	add	r3, r2
   26f28:	604b      	str	r3, [r1, #4]

	return true;
   26f2a:	2001      	movs	r0, #1
}
   26f2c:	bd10      	pop	{r4, pc}
   26f2e:	4b09      	ldr	r3, [pc, #36]	; (26f54 <find_flash_total_size+0x3c>)
   26f30:	4a09      	ldr	r2, [pc, #36]	; (26f58 <find_flash_total_size+0x40>)
   26f32:	1a9b      	subs	r3, r3, r2
   26f34:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Buffer size is bigger than page");
   26f36:	f04f 0000 	mov.w	r0, #0
   26f3a:	2201      	movs	r2, #1
   26f3c:	f362 0002 	bfi	r0, r2, #0, #3
   26f40:	f36f 00c5 	bfc	r0, #3, #3
   26f44:	f363 108f 	bfi	r0, r3, #6, #10
   26f48:	4904      	ldr	r1, [pc, #16]	; (26f5c <find_flash_total_size+0x44>)
   26f4a:	f015 f87d 	bl	3c048 <log_string_sync>
		ctx->total_size = 0;
   26f4e:	2000      	movs	r0, #0
   26f50:	6060      	str	r0, [r4, #4]
		return false;
   26f52:	e7eb      	b.n	26f2c <find_flash_total_size+0x14>
   26f54:	00041200 	.word	0x00041200
   26f58:	00041200 	.word	0x00041200
   26f5c:	000424e0 	.word	0x000424e0

00026f60 <stream_flash_erase_page>:
{
   26f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26f64:	b085      	sub	sp, #20
   26f66:	4604      	mov	r4, r0
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   26f68:	68c0      	ldr	r0, [r0, #12]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   26f6a:	aa01      	add	r2, sp, #4
   26f6c:	f015 ff19 	bl	3cda2 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   26f70:	4605      	mov	r5, r0
   26f72:	bb20      	cbnz	r0, 26fbe <stream_flash_erase_page+0x5e>
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   26f74:	6a23      	ldr	r3, [r4, #32]
   26f76:	9f01      	ldr	r7, [sp, #4]
   26f78:	42bb      	cmp	r3, r7
   26f7a:	d01c      	beq.n	26fb6 <stream_flash_erase_page+0x56>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   26f7c:	68e6      	ldr	r6, [r4, #12]
   26f7e:	f8dd 9008 	ldr.w	r9, [sp, #8]
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   26f82:	f8d6 8008 	ldr.w	r8, [r6, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   26f86:	f8d8 300c 	ldr.w	r3, [r8, #12]
   26f8a:	b123      	cbz	r3, 26f96 <stream_flash_erase_page+0x36>
		rc = api->write_protection(dev, false);
   26f8c:	2100      	movs	r1, #0
   26f8e:	4630      	mov	r0, r6
   26f90:	4798      	blx	r3
		if (rc) {
   26f92:	4605      	mov	r5, r0
   26f94:	b960      	cbnz	r0, 26fb0 <stream_flash_erase_page+0x50>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   26f96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26f9a:	464a      	mov	r2, r9
   26f9c:	4639      	mov	r1, r7
   26f9e:	4630      	mov	r0, r6
   26fa0:	4798      	blx	r3
   26fa2:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   26fa4:	f8d8 300c 	ldr.w	r3, [r8, #12]
   26fa8:	b113      	cbz	r3, 26fb0 <stream_flash_erase_page+0x50>
		(void) api->write_protection(dev, true);
   26faa:	2101      	movs	r1, #1
   26fac:	4630      	mov	r0, r6
   26fae:	4798      	blx	r3
	if (rc != 0) {
   26fb0:	b9bd      	cbnz	r5, 26fe2 <stream_flash_erase_page+0x82>
		ctx->last_erased_page_start_offset = page.start_offset;
   26fb2:	9b01      	ldr	r3, [sp, #4]
   26fb4:	6223      	str	r3, [r4, #32]
}
   26fb6:	4628      	mov	r0, r5
   26fb8:	b005      	add	sp, #20
   26fba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   26fbe:	4b12      	ldr	r3, [pc, #72]	; (27008 <stream_flash_erase_page+0xa8>)
   26fc0:	4a12      	ldr	r2, [pc, #72]	; (2700c <stream_flash_erase_page+0xac>)
   26fc2:	1a9b      	subs	r3, r3, r2
   26fc4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Error %d while getting page info", rc);
   26fc6:	f04f 0000 	mov.w	r0, #0
   26fca:	2201      	movs	r2, #1
   26fcc:	f362 0002 	bfi	r0, r2, #0, #3
   26fd0:	f36f 00c5 	bfc	r0, #3, #3
   26fd4:	f363 108f 	bfi	r0, r3, #6, #10
   26fd8:	462a      	mov	r2, r5
   26fda:	490d      	ldr	r1, [pc, #52]	; (27010 <stream_flash_erase_page+0xb0>)
   26fdc:	f015 f834 	bl	3c048 <log_string_sync>
		return rc;
   26fe0:	e7e9      	b.n	26fb6 <stream_flash_erase_page+0x56>
   26fe2:	4b09      	ldr	r3, [pc, #36]	; (27008 <stream_flash_erase_page+0xa8>)
   26fe4:	4a09      	ldr	r2, [pc, #36]	; (2700c <stream_flash_erase_page+0xac>)
   26fe6:	1a9b      	subs	r3, r3, r2
   26fe8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Error %d while erasing page", rc);
   26fea:	f04f 0000 	mov.w	r0, #0
   26fee:	2201      	movs	r2, #1
   26ff0:	f362 0002 	bfi	r0, r2, #0, #3
   26ff4:	f36f 00c5 	bfc	r0, #3, #3
   26ff8:	f363 108f 	bfi	r0, r3, #6, #10
   26ffc:	462a      	mov	r2, r5
   26ffe:	4905      	ldr	r1, [pc, #20]	; (27014 <stream_flash_erase_page+0xb4>)
   27000:	f015 f822 	bl	3c048 <log_string_sync>
   27004:	e7d7      	b.n	26fb6 <stream_flash_erase_page+0x56>
   27006:	bf00      	nop
   27008:	00041200 	.word	0x00041200
   2700c:	00041200 	.word	0x00041200
   27010:	00042500 	.word	0x00042500
   27014:	00042524 	.word	0x00042524

00027018 <flash_sync>:
{
   27018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2701c:	6946      	ldr	r6, [r0, #20]
   2701e:	6903      	ldr	r3, [r0, #16]
   27020:	441e      	add	r6, r3
	if (ctx->buf_bytes == 0) {
   27022:	6881      	ldr	r1, [r0, #8]
   27024:	b919      	cbnz	r1, 2702e <flash_sync+0x16>
		return 0;
   27026:	2500      	movs	r5, #0
}
   27028:	4628      	mov	r0, r5
   2702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2702e:	4604      	mov	r4, r0
					     write_addr + ctx->buf_bytes - 1);
   27030:	4431      	add	r1, r6
		rc = stream_flash_erase_page(ctx,
   27032:	3901      	subs	r1, #1
   27034:	f7ff ff94 	bl	26f60 <stream_flash_erase_page>
		if (rc < 0) {
   27038:	1e05      	subs	r5, r0, #0
   2703a:	db41      	blt.n	270c0 <flash_sync+0xa8>
	fill_length = flash_get_write_block_size(ctx->fdev);
   2703c:	68e0      	ldr	r0, [r4, #12]
 */
__syscall size_t flash_get_write_block_size(const struct device *dev);

static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
   2703e:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   27040:	691b      	ldr	r3, [r3, #16]
   27042:	4798      	blx	r3
   27044:	6803      	ldr	r3, [r0, #0]
	if (ctx->buf_bytes % fill_length) {
   27046:	68a2      	ldr	r2, [r4, #8]
   27048:	fbb2 f5f3 	udiv	r5, r2, r3
   2704c:	fb03 2515 	mls	r5, r3, r5, r2
   27050:	b15d      	cbz	r5, 2706a <flash_sync+0x52>
		fill_length -= ctx->buf_bytes % fill_length;
   27052:	1b5d      	subs	r5, r3, r5
		filler = flash_get_parameters(ctx->fdev)->erase_value;
   27054:	68e0      	ldr	r0, [r4, #12]
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   27056:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   27058:	691b      	ldr	r3, [r3, #16]
   2705a:	4798      	blx	r3
		memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   2705c:	6827      	ldr	r7, [r4, #0]
   2705e:	68a3      	ldr	r3, [r4, #8]
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   27060:	462a      	mov	r2, r5
   27062:	7901      	ldrb	r1, [r0, #4]
   27064:	18f8      	adds	r0, r7, r3
   27066:	f018 ff6b 	bl	3ff40 <memset>
	buf_bytes_aligned = ctx->buf_bytes + fill_length;
   2706a:	68a3      	ldr	r3, [r4, #8]
   2706c:	eb03 0805 	add.w	r8, r3, r5
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, buf_bytes_aligned);
   27070:	68e7      	ldr	r7, [r4, #12]
   27072:	f8d4 a000 	ldr.w	sl, [r4]
	const struct flash_driver_api *api =
   27076:	f8d7 9008 	ldr.w	r9, [r7, #8]
	if (api->write_protection != NULL) {
   2707a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2707e:	b123      	cbz	r3, 2708a <flash_sync+0x72>
		rc = api->write_protection(dev, false);
   27080:	2100      	movs	r1, #0
   27082:	4638      	mov	r0, r7
   27084:	4798      	blx	r3
		if (rc) {
   27086:	4605      	mov	r5, r0
   27088:	b968      	cbnz	r0, 270a6 <flash_sync+0x8e>
	rc = api->write(dev, offset, data, len);
   2708a:	4643      	mov	r3, r8
   2708c:	4652      	mov	r2, sl
   2708e:	4631      	mov	r1, r6
   27090:	4638      	mov	r0, r7
   27092:	f8d9 5004 	ldr.w	r5, [r9, #4]
   27096:	47a8      	blx	r5
   27098:	4605      	mov	r5, r0
	if (api->write_protection != NULL) {
   2709a:	f8d9 300c 	ldr.w	r3, [r9, #12]
   2709e:	b113      	cbz	r3, 270a6 <flash_sync+0x8e>
		(void) api->write_protection(dev, true);
   270a0:	2101      	movs	r1, #1
   270a2:	4638      	mov	r0, r7
   270a4:	4798      	blx	r3
	if (rc != 0) {
   270a6:	b9f5      	cbnz	r5, 270e6 <flash_sync+0xce>
	if (ctx->callback) {
   270a8:	69e3      	ldr	r3, [r4, #28]
   270aa:	2b00      	cmp	r3, #0
   270ac:	d03d      	beq.n	2712a <flash_sync+0x112>
		for (int i = 0; i < ctx->buf_bytes; i++) {
   270ae:	68a3      	ldr	r3, [r4, #8]
   270b0:	42ab      	cmp	r3, r5
   270b2:	d92b      	bls.n	2710c <flash_sync+0xf4>
			ctx->buf[i] = ~ctx->buf[i];
   270b4:	6822      	ldr	r2, [r4, #0]
   270b6:	5d53      	ldrb	r3, [r2, r5]
   270b8:	43db      	mvns	r3, r3
   270ba:	5553      	strb	r3, [r2, r5]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   270bc:	3501      	adds	r5, #1
   270be:	e7f6      	b.n	270ae <flash_sync+0x96>
   270c0:	4b2f      	ldr	r3, [pc, #188]	; (27180 <flash_sync+0x168>)
   270c2:	4a30      	ldr	r2, [pc, #192]	; (27184 <flash_sync+0x16c>)
   270c4:	1a9b      	subs	r3, r3, r2
   270c6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   270c8:	f04f 0000 	mov.w	r0, #0
   270cc:	2201      	movs	r2, #1
   270ce:	f362 0002 	bfi	r0, r2, #0, #3
   270d2:	f36f 00c5 	bfc	r0, #3, #3
   270d6:	f363 108f 	bfi	r0, r3, #6, #10
   270da:	4633      	mov	r3, r6
   270dc:	462a      	mov	r2, r5
   270de:	492a      	ldr	r1, [pc, #168]	; (27188 <flash_sync+0x170>)
   270e0:	f014 ffb2 	bl	3c048 <log_string_sync>
			return rc;
   270e4:	e7a0      	b.n	27028 <flash_sync+0x10>
   270e6:	4b26      	ldr	r3, [pc, #152]	; (27180 <flash_sync+0x168>)
   270e8:	4a26      	ldr	r2, [pc, #152]	; (27184 <flash_sync+0x16c>)
   270ea:	1a9b      	subs	r3, r3, r2
   270ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   270ee:	f04f 0000 	mov.w	r0, #0
   270f2:	2201      	movs	r2, #1
   270f4:	f362 0002 	bfi	r0, r2, #0, #3
   270f8:	f36f 00c5 	bfc	r0, #3, #3
   270fc:	f363 108f 	bfi	r0, r3, #6, #10
   27100:	4633      	mov	r3, r6
   27102:	462a      	mov	r2, r5
   27104:	4921      	ldr	r1, [pc, #132]	; (2718c <flash_sync+0x174>)
   27106:	f014 ff9f 	bl	3c048 <log_string_sync>
		return rc;
   2710a:	e78d      	b.n	27028 <flash_sync+0x10>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   2710c:	68e0      	ldr	r0, [r4, #12]
   2710e:	6822      	ldr	r2, [r4, #0]
	const struct flash_driver_api *api =
   27110:	6881      	ldr	r1, [r0, #8]
	return api->read(dev, offset, data, len);
   27112:	680d      	ldr	r5, [r1, #0]
   27114:	4631      	mov	r1, r6
   27116:	47a8      	blx	r5
		if (rc != 0) {
   27118:	4605      	mov	r5, r0
   2711a:	b968      	cbnz	r0, 27138 <flash_sync+0x120>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   2711c:	69e3      	ldr	r3, [r4, #28]
   2711e:	4632      	mov	r2, r6
   27120:	68a1      	ldr	r1, [r4, #8]
   27122:	6820      	ldr	r0, [r4, #0]
   27124:	4798      	blx	r3
		if (rc != 0) {
   27126:	4605      	mov	r5, r0
   27128:	b9c0      	cbnz	r0, 2715c <flash_sync+0x144>
	ctx->bytes_written += ctx->buf_bytes;
   2712a:	68a2      	ldr	r2, [r4, #8]
   2712c:	6923      	ldr	r3, [r4, #16]
   2712e:	4413      	add	r3, r2
   27130:	6123      	str	r3, [r4, #16]
	ctx->buf_bytes = 0U;
   27132:	2300      	movs	r3, #0
   27134:	60a3      	str	r3, [r4, #8]
	return rc;
   27136:	e777      	b.n	27028 <flash_sync+0x10>
   27138:	4b11      	ldr	r3, [pc, #68]	; (27180 <flash_sync+0x168>)
   2713a:	4a12      	ldr	r2, [pc, #72]	; (27184 <flash_sync+0x16c>)
   2713c:	1a9b      	subs	r3, r3, r2
   2713e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("flash read failed: %d", rc);
   27140:	f04f 0000 	mov.w	r0, #0
   27144:	2201      	movs	r2, #1
   27146:	f362 0002 	bfi	r0, r2, #0, #3
   2714a:	f36f 00c5 	bfc	r0, #3, #3
   2714e:	f363 108f 	bfi	r0, r3, #6, #10
   27152:	462a      	mov	r2, r5
   27154:	490e      	ldr	r1, [pc, #56]	; (27190 <flash_sync+0x178>)
   27156:	f014 ff77 	bl	3c048 <log_string_sync>
			return rc;
   2715a:	e765      	b.n	27028 <flash_sync+0x10>
   2715c:	4b08      	ldr	r3, [pc, #32]	; (27180 <flash_sync+0x168>)
   2715e:	4a09      	ldr	r2, [pc, #36]	; (27184 <flash_sync+0x16c>)
   27160:	1a9b      	subs	r3, r3, r2
   27162:	08db      	lsrs	r3, r3, #3
			LOG_ERR("callback failed: %d", rc);
   27164:	f04f 0000 	mov.w	r0, #0
   27168:	2201      	movs	r2, #1
   2716a:	f362 0002 	bfi	r0, r2, #0, #3
   2716e:	f36f 00c5 	bfc	r0, #3, #3
   27172:	f363 108f 	bfi	r0, r3, #6, #10
   27176:	462a      	mov	r2, r5
   27178:	4906      	ldr	r1, [pc, #24]	; (27194 <flash_sync+0x17c>)
   2717a:	f014 ff65 	bl	3c048 <log_string_sync>
			return rc;
   2717e:	e753      	b.n	27028 <flash_sync+0x10>
   27180:	00041200 	.word	0x00041200
   27184:	00041200 	.word	0x00041200
   27188:	00042540 	.word	0x00042540
   2718c:	00042570 	.word	0x00042570
   27190:	00042594 	.word	0x00042594
   27194:	000425ac 	.word	0x000425ac

00027198 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   27198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2719c:	b083      	sub	sp, #12
   2719e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   271a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
	if (!ctx || !fdev || !buf) {
   271a4:	2800      	cmp	r0, #0
   271a6:	d06a      	beq.n	2727e <stream_flash_init+0xe6>
   271a8:	460c      	mov	r4, r1
   271aa:	4691      	mov	r9, r2
   271ac:	461e      	mov	r6, r3
   271ae:	4605      	mov	r5, r0
   271b0:	2900      	cmp	r1, #0
   271b2:	d067      	beq.n	27284 <stream_flash_init+0xec>
   271b4:	2a00      	cmp	r2, #0
   271b6:	d068      	beq.n	2728a <stream_flash_init+0xf2>
		LOG_ERR("Error %d initializing settings subsystem", rc);
		return rc;
	}
#endif

	struct _inspect_flash inspect_flash_ctx = {
   271b8:	9300      	str	r3, [sp, #0]
   271ba:	2300      	movs	r3, #0
   271bc:	9301      	str	r3, [sp, #4]
	const struct flash_driver_api *api =
   271be:	688b      	ldr	r3, [r1, #8]
	return api->get_parameters(dev)->write_block_size;
   271c0:	691b      	ldr	r3, [r3, #16]
   271c2:	4608      	mov	r0, r1
   271c4:	4798      	blx	r3
   271c6:	6802      	ldr	r2, [r0, #0]
		.buf_len = buf_len,
		.total_size = 0
	};

	if (buf_len % flash_get_write_block_size(fdev)) {
   271c8:	fbb6 f3f2 	udiv	r3, r6, r2
   271cc:	fb02 6313 	mls	r3, r2, r3, r6
   271d0:	2b00      	cmp	r3, #0
   271d2:	d12e      	bne.n	27232 <stream_flash_init+0x9a>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
		return -EFAULT;
	}

	/* Calculate the total size of the flash device */
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   271d4:	466a      	mov	r2, sp
   271d6:	4930      	ldr	r1, [pc, #192]	; (27298 <stream_flash_init+0x100>)
   271d8:	4620      	mov	r0, r4
   271da:	f015 fde8 	bl	3cdae <flash_page_foreach>

	/* The flash size counted should never be equal zero */
	if (inspect_flash_ctx.total_size == 0) {
   271de:	9b01      	ldr	r3, [sp, #4]
   271e0:	2b00      	cmp	r3, #0
   271e2:	d055      	beq.n	27290 <stream_flash_init+0xf8>
		return -EFAULT;
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
   271e4:	eb07 0208 	add.w	r2, r7, r8
   271e8:	4293      	cmp	r3, r2
   271ea:	d335      	bcc.n	27258 <stream_flash_init+0xc0>
	const struct flash_driver_api *api =
   271ec:	68a3      	ldr	r3, [r4, #8]
	return api->get_parameters(dev)->write_block_size;
   271ee:	691b      	ldr	r3, [r3, #16]
   271f0:	4620      	mov	r0, r4
   271f2:	4798      	blx	r3
   271f4:	6802      	ldr	r2, [r0, #0]
	    offset % flash_get_write_block_size(fdev)) {
   271f6:	fbb7 f3f2 	udiv	r3, r7, r2
   271fa:	fb02 7313 	mls	r3, r2, r3, r7
	if ((offset + size) > inspect_flash_ctx.total_size ||
   271fe:	bb5b      	cbnz	r3, 27258 <stream_flash_init+0xc0>
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
	}

	ctx->fdev = fdev;
   27200:	60ec      	str	r4, [r5, #12]
	ctx->buf = buf;
   27202:	f8c5 9000 	str.w	r9, [r5]
	ctx->buf_len = buf_len;
   27206:	606e      	str	r6, [r5, #4]
	ctx->bytes_written = 0;
   27208:	2300      	movs	r3, #0
   2720a:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   2720c:	60ab      	str	r3, [r5, #8]
	ctx->offset = offset;
   2720e:	616f      	str	r7, [r5, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   27210:	f1b8 0f00 	cmp.w	r8, #0
   27214:	d102      	bne.n	2721c <stream_flash_init+0x84>
   27216:	9b01      	ldr	r3, [sp, #4]
   27218:	eba3 0807 	sub.w	r8, r3, r7
   2721c:	f8c5 8018 	str.w	r8, [r5, #24]
				      size);
	ctx->callback = cb;
   27220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   27222:	61eb      	str	r3, [r5, #28]

#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
   27224:	f04f 33ff 	mov.w	r3, #4294967295
   27228:	622b      	str	r3, [r5, #32]
#endif

	return 0;
   2722a:	2000      	movs	r0, #0
}
   2722c:	b003      	add	sp, #12
   2722e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27232:	4b1a      	ldr	r3, [pc, #104]	; (2729c <stream_flash_init+0x104>)
   27234:	4a1a      	ldr	r2, [pc, #104]	; (272a0 <stream_flash_init+0x108>)
   27236:	1a9b      	subs	r3, r3, r2
   27238:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   2723a:	f04f 0000 	mov.w	r0, #0
   2723e:	2201      	movs	r2, #1
   27240:	f362 0002 	bfi	r0, r2, #0, #3
   27244:	f36f 00c5 	bfc	r0, #3, #3
   27248:	f363 108f 	bfi	r0, r3, #6, #10
   2724c:	4915      	ldr	r1, [pc, #84]	; (272a4 <stream_flash_init+0x10c>)
   2724e:	f014 fefb 	bl	3c048 <log_string_sync>
		return -EFAULT;
   27252:	f06f 000d 	mvn.w	r0, #13
   27256:	e7e9      	b.n	2722c <stream_flash_init+0x94>
   27258:	4b10      	ldr	r3, [pc, #64]	; (2729c <stream_flash_init+0x104>)
   2725a:	4a11      	ldr	r2, [pc, #68]	; (272a0 <stream_flash_init+0x108>)
   2725c:	1a9b      	subs	r3, r3, r2
   2725e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Incorrect parameter");
   27260:	f04f 0000 	mov.w	r0, #0
   27264:	2201      	movs	r2, #1
   27266:	f362 0002 	bfi	r0, r2, #0, #3
   2726a:	f36f 00c5 	bfc	r0, #3, #3
   2726e:	f363 108f 	bfi	r0, r3, #6, #10
   27272:	490d      	ldr	r1, [pc, #52]	; (272a8 <stream_flash_init+0x110>)
   27274:	f014 fee8 	bl	3c048 <log_string_sync>
		return -EFAULT;
   27278:	f06f 000d 	mvn.w	r0, #13
   2727c:	e7d6      	b.n	2722c <stream_flash_init+0x94>
		return -EFAULT;
   2727e:	f06f 000d 	mvn.w	r0, #13
   27282:	e7d3      	b.n	2722c <stream_flash_init+0x94>
   27284:	f06f 000d 	mvn.w	r0, #13
   27288:	e7d0      	b.n	2722c <stream_flash_init+0x94>
   2728a:	f06f 000d 	mvn.w	r0, #13
   2728e:	e7cd      	b.n	2722c <stream_flash_init+0x94>
		return -EFAULT;
   27290:	f06f 000d 	mvn.w	r0, #13
   27294:	e7ca      	b.n	2722c <stream_flash_init+0x94>
   27296:	bf00      	nop
   27298:	00026f19 	.word	0x00026f19
   2729c:	00041200 	.word	0x00041200
   272a0:	00041200 	.word	0x00041200
   272a4:	000425c0 	.word	0x000425c0
   272a8:	000425f8 	.word	0x000425f8

000272ac <pm_resume_devices>:

	return 0;
}

static void pm_resume_devices(void)
{
   272ac:	b510      	push	{r4, lr}
	for (int i = (num_susp - 1); i >= 0; i--) {
   272ae:	4b08      	ldr	r3, [pc, #32]	; (272d0 <pm_resume_devices+0x24>)
   272b0:	681c      	ldr	r4, [r3, #0]
   272b2:	3c01      	subs	r4, #1
   272b4:	2c00      	cmp	r4, #0
   272b6:	db07      	blt.n	272c8 <pm_resume_devices+0x1c>
		pm_device_action_run(__pm_device_slots_start[i],
   272b8:	2101      	movs	r1, #1
   272ba:	4b06      	ldr	r3, [pc, #24]	; (272d4 <pm_resume_devices+0x28>)
   272bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   272c0:	f015 f9dc 	bl	3c67c <pm_device_action_run>
	for (int i = (num_susp - 1); i >= 0; i--) {
   272c4:	3c01      	subs	r4, #1
   272c6:	e7f5      	b.n	272b4 <pm_resume_devices+0x8>
				    PM_DEVICE_ACTION_RESUME);
	}

	num_susp = 0;
   272c8:	4b01      	ldr	r3, [pc, #4]	; (272d0 <pm_resume_devices+0x24>)
   272ca:	2200      	movs	r2, #0
   272cc:	601a      	str	r2, [r3, #0]
}
   272ce:	bd10      	pop	{r4, pc}
   272d0:	2000fefc 	.word	0x2000fefc
   272d4:	2000c950 	.word	0x2000c950

000272d8 <pm_suspend_devices>:
{
   272d8:	b570      	push	{r4, r5, r6, lr}
   272da:	b084      	sub	sp, #16
	devc = z_device_get_all_static(&devs);
   272dc:	a803      	add	r0, sp, #12
   272de:	f00e fa03 	bl	356e8 <z_device_get_all_static>
	num_susp = 0;
   272e2:	4b29      	ldr	r3, [pc, #164]	; (27388 <pm_suspend_devices+0xb0>)
   272e4:	2200      	movs	r2, #0
   272e6:	601a      	str	r2, [r3, #0]
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   272e8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   272ec:	0084      	lsls	r4, r0, #2
   272ee:	f1a4 031c 	sub.w	r3, r4, #28
   272f2:	9c03      	ldr	r4, [sp, #12]
   272f4:	441c      	add	r4, r3
   272f6:	e018      	b.n	2732a <pm_suspend_devices+0x52>
   272f8:	4b24      	ldr	r3, [pc, #144]	; (2738c <pm_suspend_devices+0xb4>)
   272fa:	4a25      	ldr	r2, [pc, #148]	; (27390 <pm_suspend_devices+0xb8>)
   272fc:	1a9b      	subs	r3, r3, r2
   272fe:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Device %s did not enter %s state (%d)",
   27300:	2001      	movs	r0, #1
   27302:	f04f 0600 	mov.w	r6, #0
   27306:	f360 0602 	bfi	r6, r0, #0, #3
   2730a:	f36f 06c5 	bfc	r6, #3, #3
   2730e:	f363 168f 	bfi	r6, r3, #6, #10
   27312:	6824      	ldr	r4, [r4, #0]
   27314:	f000 f9dc 	bl	276d0 <pm_device_state_str>
   27318:	4603      	mov	r3, r0
   2731a:	9500      	str	r5, [sp, #0]
   2731c:	4622      	mov	r2, r4
   2731e:	491d      	ldr	r1, [pc, #116]	; (27394 <pm_suspend_devices+0xbc>)
   27320:	4630      	mov	r0, r6
   27322:	f014 fe91 	bl	3c048 <log_string_sync>
			return ret;
   27326:	e02b      	b.n	27380 <pm_suspend_devices+0xa8>
	for (const struct device *dev = devs + devc - 1; dev >= devs; dev--) {
   27328:	3c1c      	subs	r4, #28
   2732a:	9b03      	ldr	r3, [sp, #12]
   2732c:	429c      	cmp	r4, r3
   2732e:	d326      	bcc.n	2737e <pm_suspend_devices+0xa6>
		if (pm_device_is_busy(dev) || pm_device_state_is_locked(dev)
   27330:	4620      	mov	r0, r4
   27332:	f015 f988 	bl	3c646 <pm_device_is_busy>
   27336:	2800      	cmp	r0, #0
   27338:	d1f6      	bne.n	27328 <pm_suspend_devices+0x50>
   2733a:	4620      	mov	r0, r4
   2733c:	f015 f995 	bl	3c66a <pm_device_state_is_locked>
   27340:	2800      	cmp	r0, #0
   27342:	d1f1      	bne.n	27328 <pm_suspend_devices+0x50>
		    || pm_device_wakeup_is_enabled(dev) ||
   27344:	4620      	mov	r0, r4
   27346:	f015 f987 	bl	3c658 <pm_device_wakeup_is_enabled>
   2734a:	2800      	cmp	r0, #0
   2734c:	d1ec      	bne.n	27328 <pm_suspend_devices+0x50>
		ret = pm_device_action_run(dev, PM_DEVICE_ACTION_SUSPEND);
   2734e:	2100      	movs	r1, #0
   27350:	4620      	mov	r0, r4
   27352:	f015 f993 	bl	3c67c <pm_device_action_run>
   27356:	4605      	mov	r5, r0
		if ((ret == -ENOSYS) || (ret == -ENOTSUP) || (ret == -EALREADY)) {
   27358:	f110 0f58 	cmn.w	r0, #88	; 0x58
   2735c:	d0e4      	beq.n	27328 <pm_suspend_devices+0x50>
   2735e:	f110 0f86 	cmn.w	r0, #134	; 0x86
   27362:	d0e1      	beq.n	27328 <pm_suspend_devices+0x50>
   27364:	f110 0f78 	cmn.w	r0, #120	; 0x78
   27368:	d0de      	beq.n	27328 <pm_suspend_devices+0x50>
		} else if (ret < 0) {
   2736a:	2800      	cmp	r0, #0
   2736c:	dbc4      	blt.n	272f8 <pm_suspend_devices+0x20>
		__pm_device_slots_start[num_susp] = dev;
   2736e:	4a06      	ldr	r2, [pc, #24]	; (27388 <pm_suspend_devices+0xb0>)
   27370:	6813      	ldr	r3, [r2, #0]
   27372:	4909      	ldr	r1, [pc, #36]	; (27398 <pm_suspend_devices+0xc0>)
   27374:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		num_susp++;
   27378:	3301      	adds	r3, #1
   2737a:	6013      	str	r3, [r2, #0]
   2737c:	e7d4      	b.n	27328 <pm_suspend_devices+0x50>
	return 0;
   2737e:	2500      	movs	r5, #0
}
   27380:	4628      	mov	r0, r5
   27382:	b004      	add	sp, #16
   27384:	bd70      	pop	{r4, r5, r6, pc}
   27386:	bf00      	nop
   27388:	2000fefc 	.word	0x2000fefc
   2738c:	000412f0 	.word	0x000412f0
   27390:	00041200 	.word	0x00041200
   27394:	0004261c 	.word	0x0004261c
   27398:	2000c950 	.word	0x2000c950

0002739c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   2739c:	b570      	push	{r4, r5, r6, lr}
   2739e:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   273a0:	4b3b      	ldr	r3, [pc, #236]	; (27490 <pm_system_resume+0xf4>)
   273a2:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   273a4:	f004 031f 	and.w	r3, r4, #31
   273a8:	2201      	movs	r2, #1
   273aa:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   273ac:	0961      	lsrs	r1, r4, #5
   273ae:	4b39      	ldr	r3, [pc, #228]	; (27494 <pm_system_resume+0xf8>)
   273b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   273b4:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   273b6:	e8d3 1fef 	ldaex	r1, [r3]
   273ba:	ea01 0500 	and.w	r5, r1, r0
   273be:	e8c3 5fe6 	stlex	r6, r5, [r3]
   273c2:	2e00      	cmp	r6, #0
   273c4:	d1f7      	bne.n	273b6 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   273c6:	420a      	tst	r2, r1
   273c8:	d055      	beq.n	27476 <pm_system_resume+0xda>
		exit_pos_ops(z_power_states[id]);
   273ca:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   273ce:	4a32      	ldr	r2, [pc, #200]	; (27498 <pm_system_resume+0xfc>)
   273d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   273d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   273d8:	ab04      	add	r3, sp, #16
   273da:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   273de:	4b2f      	ldr	r3, [pc, #188]	; (2749c <pm_system_resume+0x100>)
   273e0:	b19b      	cbz	r3, 2740a <pm_system_resume+0x6e>
		pm_power_state_exit_post_ops(info);
   273e2:	f014 fe18 	bl	3c016 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   273e6:	f04f 0320 	mov.w	r3, #32
   273ea:	f3ef 8611 	mrs	r6, BASEPRI
   273ee:	f383 8812 	msr	BASEPRI_MAX, r3
   273f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   273f6:	482a      	ldr	r0, [pc, #168]	; (274a0 <pm_system_resume+0x104>)
   273f8:	f00e fd96 	bl	35f28 <z_spin_lock_valid>
   273fc:	b158      	cbz	r0, 27416 <pm_system_resume+0x7a>
	z_spin_lock_set_owner(l);
   273fe:	4828      	ldr	r0, [pc, #160]	; (274a0 <pm_system_resume+0x104>)
   27400:	f00e fdb2 	bl	35f68 <z_spin_lock_set_owner>
	return list->head;
   27404:	4b27      	ldr	r3, [pc, #156]	; (274a4 <pm_system_resume+0x108>)
   27406:	681d      	ldr	r5, [r3, #0]
   27408:	e015      	b.n	27436 <pm_system_resume+0x9a>
	__asm__ volatile(
   2740a:	2300      	movs	r3, #0
   2740c:	f383 8811 	msr	BASEPRI, r3
   27410:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   27414:	e7e7      	b.n	273e6 <pm_system_resume+0x4a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27416:	4d24      	ldr	r5, [pc, #144]	; (274a8 <pm_system_resume+0x10c>)
   27418:	2281      	movs	r2, #129	; 0x81
   2741a:	4629      	mov	r1, r5
   2741c:	4823      	ldr	r0, [pc, #140]	; (274ac <pm_system_resume+0x110>)
   2741e:	f014 fb8b 	bl	3bb38 <printk>
   27422:	2181      	movs	r1, #129	; 0x81
   27424:	4628      	mov	r0, r5
   27426:	f014 fddb 	bl	3bfe0 <assert_post_action>
   2742a:	e7e8      	b.n	273fe <pm_system_resume+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2742c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   2742e:	b10d      	cbz	r5, 27434 <pm_system_resume+0x98>
	return node->next;
   27430:	682b      	ldr	r3, [r5, #0]
   27432:	b16b      	cbz	r3, 27450 <pm_system_resume+0xb4>
{
   27434:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   27436:	b15d      	cbz	r5, 27450 <pm_system_resume+0xb4>
			callback = notifier->state_exit;
   27438:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   2743a:	2a00      	cmp	r2, #0
   2743c:	d0f6      	beq.n	2742c <pm_system_resume+0x90>
			callback(z_power_states[_current_cpu->id].state);
   2743e:	4b14      	ldr	r3, [pc, #80]	; (27490 <pm_system_resume+0xf4>)
   27440:	7d1b      	ldrb	r3, [r3, #20]
   27442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   27446:	4914      	ldr	r1, [pc, #80]	; (27498 <pm_system_resume+0xfc>)
   27448:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   2744c:	4790      	blx	r2
   2744e:	e7ed      	b.n	2742c <pm_system_resume+0x90>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   27450:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27452:	4813      	ldr	r0, [pc, #76]	; (274a0 <pm_system_resume+0x104>)
   27454:	f00e fd78 	bl	35f48 <z_spin_unlock_valid>
   27458:	b178      	cbz	r0, 2747a <pm_system_resume+0xde>
	__asm__ volatile(
   2745a:	f385 8811 	msr	BASEPRI, r5
   2745e:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   27462:	4a0d      	ldr	r2, [pc, #52]	; (27498 <pm_system_resume+0xfc>)
   27464:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   27468:	00a1      	lsls	r1, r4, #2
   2746a:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   2746e:	2300      	movs	r3, #0
   27470:	5053      	str	r3, [r2, r1]
   27472:	6063      	str	r3, [r4, #4]
   27474:	60a3      	str	r3, [r4, #8]
			0, 0};
	}
}
   27476:	b004      	add	sp, #16
   27478:	bd70      	pop	{r4, r5, r6, pc}
   2747a:	4e0b      	ldr	r6, [pc, #44]	; (274a8 <pm_system_resume+0x10c>)
   2747c:	22ac      	movs	r2, #172	; 0xac
   2747e:	4631      	mov	r1, r6
   27480:	480a      	ldr	r0, [pc, #40]	; (274ac <pm_system_resume+0x110>)
   27482:	f014 fb59 	bl	3bb38 <printk>
   27486:	21ac      	movs	r1, #172	; 0xac
   27488:	4630      	mov	r0, r6
   2748a:	f014 fda9 	bl	3bfe0 <assert_post_action>
   2748e:	e7e4      	b.n	2745a <pm_system_resume+0xbe>
   27490:	20010d7c 	.word	0x20010d7c
   27494:	2000ff0c 	.word	0x2000ff0c
   27498:	2000ff10 	.word	0x2000ff10
   2749c:	0003c017 	.word	0x0003c017
   274a0:	2000ff00 	.word	0x2000ff00
   274a4:	2000ff04 	.word	0x2000ff04
   274a8:	00042210 	.word	0x00042210
   274ac:	00041c84 	.word	0x00041c84

000274b0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   274b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   274b2:	b089      	sub	sp, #36	; 0x24
   274b4:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   274b6:	4b7a      	ldr	r3, [pc, #488]	; (276a0 <pm_system_suspend+0x1f0>)
   274b8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   274ba:	f004 031f 	and.w	r3, r4, #31
   274be:	2201      	movs	r2, #1
   274c0:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   274c2:	0961      	lsrs	r1, r4, #5
   274c4:	4b77      	ldr	r3, [pc, #476]	; (276a4 <pm_system_suspend+0x1f4>)
   274c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   274ca:	e8d3 1fef 	ldaex	r1, [r3]
   274ce:	ea41 0002 	orr.w	r0, r1, r2
   274d2:	e8c3 0fe6 	stlex	r6, r0, [r3]
   274d6:	2e00      	cmp	r6, #0
   274d8:	d1f7      	bne.n	274ca <pm_system_suspend+0x1a>

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   274da:	420a      	tst	r2, r1
   274dc:	d030      	beq.n	27540 <pm_system_suspend+0x90>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   274de:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   274e2:	4a71      	ldr	r2, [pc, #452]	; (276a8 <pm_system_suspend+0x1f8>)
   274e4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   274e8:	2b00      	cmp	r3, #0
   274ea:	f000 80d6 	beq.w	2769a <pm_system_suspend+0x1ea>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   274ee:	f1b5 3fff 	cmp.w	r5, #4294967295
   274f2:	d135      	bne.n	27560 <pm_system_suspend+0xb0>
			     z_power_states[id].exit_latency_us),
				     true);
	}

#if CONFIG_PM_DEVICE
	if ((z_power_states[id].state != PM_STATE_RUNTIME_IDLE) &&
   274f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   274f8:	4a6b      	ldr	r2, [pc, #428]	; (276a8 <pm_system_suspend+0x1f8>)
   274fa:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   274fe:	2b01      	cmp	r3, #1
   27500:	d009      	beq.n	27516 <pm_system_suspend+0x66>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27502:	4b6a      	ldr	r3, [pc, #424]	; (276ac <pm_system_suspend+0x1fc>)
   27504:	e8d3 2fef 	ldaex	r2, [r3]
   27508:	1e51      	subs	r1, r2, #1
   2750a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2750e:	2800      	cmp	r0, #0
   27510:	d1f8      	bne.n	27504 <pm_system_suspend+0x54>
   27512:	2a01      	cmp	r2, #1
   27514:	d03a      	beq.n	2758c <pm_system_suspend+0xdc>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   27516:	f00f fe17 	bl	37148 <k_sched_lock>
	__asm__ volatile(
   2751a:	f04f 0320 	mov.w	r3, #32
   2751e:	f3ef 8611 	mrs	r6, BASEPRI
   27522:	f383 8812 	msr	BASEPRI_MAX, r3
   27526:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2752a:	4861      	ldr	r0, [pc, #388]	; (276b0 <pm_system_suspend+0x200>)
   2752c:	f00e fcfc 	bl	35f28 <z_spin_lock_valid>
   27530:	2800      	cmp	r0, #0
   27532:	d040      	beq.n	275b6 <pm_system_suspend+0x106>
	z_spin_lock_set_owner(l);
   27534:	485e      	ldr	r0, [pc, #376]	; (276b0 <pm_system_suspend+0x200>)
   27536:	f00e fd17 	bl	35f68 <z_spin_lock_set_owner>
	return list->head;
   2753a:	4b5e      	ldr	r3, [pc, #376]	; (276b4 <pm_system_suspend+0x204>)
   2753c:	681d      	ldr	r5, [r3, #0]
   2753e:	e04a      	b.n	275d6 <pm_system_suspend+0x126>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   27540:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   27544:	4b58      	ldr	r3, [pc, #352]	; (276a8 <pm_system_suspend+0x1f8>)
   27546:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2754a:	466f      	mov	r7, sp
   2754c:	462a      	mov	r2, r5
   2754e:	4621      	mov	r1, r4
   27550:	4638      	mov	r0, r7
   27552:	f015 f8ce 	bl	3c6f2 <pm_policy_next_state>
   27556:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   2755a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   2755e:	e7be      	b.n	274de <pm_system_suspend+0x2e>
		     k_us_to_ticks_ceil32(
   27560:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   27564:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   27568:	689b      	ldr	r3, [r3, #8]
   2756a:	0c59      	lsrs	r1, r3, #17
   2756c:	03d8      	lsls	r0, r3, #15
   2756e:	4e52      	ldr	r6, [pc, #328]	; (276b8 <pm_system_suspend+0x208>)
   27570:	4a52      	ldr	r2, [pc, #328]	; (276bc <pm_system_suspend+0x20c>)
   27572:	2300      	movs	r3, #0
   27574:	1980      	adds	r0, r0, r6
   27576:	f04f 0600 	mov.w	r6, #0
   2757a:	eb46 0101 	adc.w	r1, r6, r1
   2757e:	f7f9 fd8f 	bl	210a0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   27582:	2101      	movs	r1, #1
   27584:	1a28      	subs	r0, r5, r0
   27586:	f011 f8c7 	bl	38718 <z_set_timeout_expiry>
   2758a:	e7b3      	b.n	274f4 <pm_system_suspend+0x44>
		if (pm_suspend_devices()) {
   2758c:	f7ff fea4 	bl	272d8 <pm_suspend_devices>
   27590:	2800      	cmp	r0, #0
   27592:	d0c0      	beq.n	27516 <pm_system_suspend+0x66>
			pm_resume_devices();
   27594:	f7ff fe8a 	bl	272ac <pm_resume_devices>
			z_power_states[id].state = PM_STATE_ACTIVE;
   27598:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2759c:	009b      	lsls	r3, r3, #2
   2759e:	2000      	movs	r0, #0
   275a0:	4a41      	ldr	r2, [pc, #260]	; (276a8 <pm_system_suspend+0x1f8>)
   275a2:	54d0      	strb	r0, [r2, r3]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   275a4:	4b41      	ldr	r3, [pc, #260]	; (276ac <pm_system_suspend+0x1fc>)
   275a6:	e8d3 2fef 	ldaex	r2, [r3]
   275aa:	3201      	adds	r2, #1
   275ac:	e8c3 2fe1 	stlex	r1, r2, [r3]
   275b0:	2900      	cmp	r1, #0
   275b2:	d052      	beq.n	2765a <pm_system_suspend+0x1aa>
   275b4:	e7f7      	b.n	275a6 <pm_system_suspend+0xf6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275b6:	4d42      	ldr	r5, [pc, #264]	; (276c0 <pm_system_suspend+0x210>)
   275b8:	2281      	movs	r2, #129	; 0x81
   275ba:	4629      	mov	r1, r5
   275bc:	4841      	ldr	r0, [pc, #260]	; (276c4 <pm_system_suspend+0x214>)
   275be:	f014 fabb 	bl	3bb38 <printk>
   275c2:	2181      	movs	r1, #129	; 0x81
   275c4:	4628      	mov	r0, r5
   275c6:	f014 fd0b 	bl	3bfe0 <assert_post_action>
   275ca:	e7b3      	b.n	27534 <pm_system_suspend+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   275cc:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   275ce:	b10d      	cbz	r5, 275d4 <pm_system_suspend+0x124>
	return node->next;
   275d0:	682b      	ldr	r3, [r5, #0]
   275d2:	b16b      	cbz	r3, 275f0 <pm_system_suspend+0x140>
{
   275d4:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   275d6:	b15d      	cbz	r5, 275f0 <pm_system_suspend+0x140>
			callback = notifier->state_entry;
   275d8:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   275da:	2a00      	cmp	r2, #0
   275dc:	d0f6      	beq.n	275cc <pm_system_suspend+0x11c>
			callback(z_power_states[_current_cpu->id].state);
   275de:	4b30      	ldr	r3, [pc, #192]	; (276a0 <pm_system_suspend+0x1f0>)
   275e0:	7d1b      	ldrb	r3, [r3, #20]
   275e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   275e6:	4930      	ldr	r1, [pc, #192]	; (276a8 <pm_system_suspend+0x1f8>)
   275e8:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   275ec:	4790      	blx	r2
   275ee:	e7ed      	b.n	275cc <pm_system_suspend+0x11c>
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
   275f0:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   275f2:	482f      	ldr	r0, [pc, #188]	; (276b0 <pm_system_suspend+0x200>)
   275f4:	f00e fca8 	bl	35f48 <z_spin_unlock_valid>
   275f8:	2800      	cmp	r0, #0
   275fa:	d040      	beq.n	2767e <pm_system_suspend+0x1ce>
	__asm__ volatile(
   275fc:	f385 8811 	msr	BASEPRI, r5
   27600:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   27604:	f004 031f 	and.w	r3, r4, #31
   27608:	2101      	movs	r1, #1
   2760a:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2760c:	0963      	lsrs	r3, r4, #5
   2760e:	4a2e      	ldr	r2, [pc, #184]	; (276c8 <pm_system_suspend+0x218>)
   27610:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27614:	e8d3 2fef 	ldaex	r2, [r3]
   27618:	430a      	orrs	r2, r1
   2761a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2761e:	2800      	cmp	r0, #0
   27620:	d1f8      	bne.n	27614 <pm_system_suspend+0x164>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   27622:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   27626:	4a20      	ldr	r2, [pc, #128]	; (276a8 <pm_system_suspend+0x1f8>)
   27628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2762c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   27630:	ab08      	add	r3, sp, #32
   27632:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   27636:	4b25      	ldr	r3, [pc, #148]	; (276cc <pm_system_suspend+0x21c>)
   27638:	b10b      	cbz	r3, 2763e <pm_system_suspend+0x18e>
		pm_power_state_set(info);
   2763a:	f014 fcd9 	bl	3bff0 <pm_power_state_set>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2763e:	4b1b      	ldr	r3, [pc, #108]	; (276ac <pm_system_suspend+0x1fc>)
   27640:	e8d3 2fef 	ldaex	r2, [r3]
   27644:	1c51      	adds	r1, r2, #1
   27646:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2764a:	2800      	cmp	r0, #0
   2764c:	d1f8      	bne.n	27640 <pm_system_suspend+0x190>
	pm_stats_stop();

	/* Wake up sequence starts here */
#if CONFIG_PM_DEVICE
	if (atomic_add(&z_cpus_active, 1) == 0) {
   2764e:	b30a      	cbz	r2, 27694 <pm_system_suspend+0x1e4>
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   27650:	f7ff fea4 	bl	2739c <pm_system_resume>
	k_sched_unlock();
   27654:	f010 faae 	bl	37bb4 <k_sched_unlock>
	bool ret = true;
   27658:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   2765a:	f004 021f 	and.w	r2, r4, #31
   2765e:	2301      	movs	r3, #1
   27660:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27662:	0964      	lsrs	r4, r4, #5
   27664:	4a0f      	ldr	r2, [pc, #60]	; (276a4 <pm_system_suspend+0x1f4>)
   27666:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   2766a:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2766c:	e8d4 2fef 	ldaex	r2, [r4]
   27670:	401a      	ands	r2, r3
   27672:	e8c4 2fe1 	stlex	r1, r2, [r4]
   27676:	2900      	cmp	r1, #0
   27678:	d1f8      	bne.n	2766c <pm_system_suspend+0x1bc>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   2767a:	b009      	add	sp, #36	; 0x24
   2767c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2767e:	4e10      	ldr	r6, [pc, #64]	; (276c0 <pm_system_suspend+0x210>)
   27680:	22ac      	movs	r2, #172	; 0xac
   27682:	4631      	mov	r1, r6
   27684:	480f      	ldr	r0, [pc, #60]	; (276c4 <pm_system_suspend+0x214>)
   27686:	f014 fa57 	bl	3bb38 <printk>
   2768a:	21ac      	movs	r1, #172	; 0xac
   2768c:	4630      	mov	r0, r6
   2768e:	f014 fca7 	bl	3bfe0 <assert_post_action>
   27692:	e7b3      	b.n	275fc <pm_system_suspend+0x14c>
		pm_resume_devices();
   27694:	f7ff fe0a 	bl	272ac <pm_resume_devices>
   27698:	e7da      	b.n	27650 <pm_system_suspend+0x1a0>
		ret = false;
   2769a:	2000      	movs	r0, #0
   2769c:	e7dd      	b.n	2765a <pm_system_suspend+0x1aa>
   2769e:	bf00      	nop
   276a0:	20010d7c 	.word	0x20010d7c
   276a4:	2000ff1c 	.word	0x2000ff1c
   276a8:	2000ff10 	.word	0x2000ff10
   276ac:	2000c614 	.word	0x2000c614
   276b0:	2000ff00 	.word	0x2000ff00
   276b4:	2000ff04 	.word	0x2000ff04
   276b8:	000f423f 	.word	0x000f423f
   276bc:	000f4240 	.word	0x000f4240
   276c0:	00042210 	.word	0x00042210
   276c4:	00041c84 	.word	0x00041c84
   276c8:	2000ff0c 	.word	0x2000ff0c
   276cc:	0003bff1 	.word	0x0003bff1

000276d0 <pm_device_state_str>:
#include <logging/log.h>
LOG_MODULE_REGISTER(pm_device, CONFIG_PM_DEVICE_LOG_LEVEL);

const char *pm_device_state_str(enum pm_device_state state)
{
	switch (state) {
   276d0:	2801      	cmp	r0, #1
   276d2:	d006      	beq.n	276e2 <pm_device_state_str+0x12>
   276d4:	2803      	cmp	r0, #3
   276d6:	d006      	beq.n	276e6 <pm_device_state_str+0x16>
   276d8:	b108      	cbz	r0, 276de <pm_device_state_str+0xe>
	case PM_DEVICE_STATE_SUSPENDED:
		return "suspended";
	case PM_DEVICE_STATE_OFF:
		return "off";
	default:
		return "";
   276da:	4804      	ldr	r0, [pc, #16]	; (276ec <pm_device_state_str+0x1c>)
	}
}
   276dc:	4770      	bx	lr
	switch (state) {
   276de:	4804      	ldr	r0, [pc, #16]	; (276f0 <pm_device_state_str+0x20>)
   276e0:	4770      	bx	lr
		return "suspended";
   276e2:	4804      	ldr	r0, [pc, #16]	; (276f4 <pm_device_state_str+0x24>)
   276e4:	4770      	bx	lr
		return "off";
   276e6:	4804      	ldr	r0, [pc, #16]	; (276f8 <pm_device_state_str+0x28>)
   276e8:	4770      	bx	lr
   276ea:	bf00      	nop
   276ec:	00044c1c 	.word	0x00044c1c
   276f0:	00042658 	.word	0x00042658
   276f4:	0004264c 	.word	0x0004264c
   276f8:	00042648 	.word	0x00042648

000276fc <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   276fc:	b508      	push	{r3, lr}
	k_sched_lock();
   276fe:	f00f fd23 	bl	37148 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
   27702:	4802      	ldr	r0, [pc, #8]	; (2770c <before_nse+0x10>)
   27704:	f015 f85b 	bl	3c7be <z_arm_save_fp_context>
}
   27708:	bd08      	pop	{r3, pc}
   2770a:	bf00      	nop
   2770c:	2000ff20 	.word	0x2000ff20

00027710 <after_nse>:

void after_nse(void)
{
   27710:	b508      	push	{r3, lr}
	z_arm_restore_fp_context(&context_buffer);
   27712:	4803      	ldr	r0, [pc, #12]	; (27720 <after_nse+0x10>)
   27714:	f015 f854 	bl	3c7c0 <z_arm_restore_fp_context>
	k_sched_unlock();
   27718:	f010 fa4c 	bl	37bb4 <k_sched_unlock>
}
   2771c:	bd08      	pop	{r3, pc}
   2771e:	bf00      	nop
   27720:	2000ff20 	.word	0x2000ff20

00027724 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   27724:	4901      	ldr	r1, [pc, #4]	; (2772c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   27726:	2210      	movs	r2, #16
	str	r2, [r1]
   27728:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2772a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   2772c:	e000ed10 	.word	0xe000ed10

00027730 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   27730:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   27732:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   27734:	f380 8811 	msr	BASEPRI, r0
	isb
   27738:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   2773c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   27740:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   27742:	b662      	cpsie	i
	isb
   27744:	f3bf 8f6f 	isb	sy

	bx	lr
   27748:	4770      	bx	lr
   2774a:	bf00      	nop

0002774c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   2774c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2774e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   27750:	f381 8811 	msr	BASEPRI, r1

	wfe
   27754:	bf20      	wfe

	msr	BASEPRI, r0
   27756:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2775a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   2775c:	4770      	bx	lr
   2775e:	bf00      	nop

00027760 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   27760:	b570      	push	{r4, r5, r6, lr}
   27762:	b082      	sub	sp, #8
   27764:	4604      	mov	r4, r0
   27766:	4d1e      	ldr	r5, [pc, #120]	; (277e0 <esf_dump+0x80>)
   27768:	4b1e      	ldr	r3, [pc, #120]	; (277e4 <esf_dump+0x84>)
   2776a:	1aed      	subs	r5, r5, r3
   2776c:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2776e:	2601      	movs	r6, #1
   27770:	f04f 0000 	mov.w	r0, #0
   27774:	f366 0002 	bfi	r0, r6, #0, #3
   27778:	f36f 00c5 	bfc	r0, #3, #3
   2777c:	f365 108f 	bfi	r0, r5, #6, #10
   27780:	68a3      	ldr	r3, [r4, #8]
   27782:	9300      	str	r3, [sp, #0]
   27784:	6863      	ldr	r3, [r4, #4]
   27786:	6822      	ldr	r2, [r4, #0]
   27788:	4917      	ldr	r1, [pc, #92]	; (277e8 <esf_dump+0x88>)
   2778a:	f014 fc5d 	bl	3c048 <log_string_sync>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   2778e:	f04f 0000 	mov.w	r0, #0
   27792:	f366 0002 	bfi	r0, r6, #0, #3
   27796:	f36f 00c5 	bfc	r0, #3, #3
   2779a:	f365 108f 	bfi	r0, r5, #6, #10
   2779e:	6963      	ldr	r3, [r4, #20]
   277a0:	9300      	str	r3, [sp, #0]
   277a2:	6923      	ldr	r3, [r4, #16]
   277a4:	68e2      	ldr	r2, [r4, #12]
   277a6:	4911      	ldr	r1, [pc, #68]	; (277ec <esf_dump+0x8c>)
   277a8:	f014 fc4e 	bl	3c048 <log_string_sync>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   277ac:	f04f 0000 	mov.w	r0, #0
   277b0:	f366 0002 	bfi	r0, r6, #0, #3
   277b4:	f36f 00c5 	bfc	r0, #3, #3
   277b8:	f365 108f 	bfi	r0, r5, #6, #10
   277bc:	69e2      	ldr	r2, [r4, #28]
   277be:	490c      	ldr	r1, [pc, #48]	; (277f0 <esf_dump+0x90>)
   277c0:	f014 fc42 	bl	3c048 <log_string_sync>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   277c4:	f04f 0000 	mov.w	r0, #0
   277c8:	f366 0002 	bfi	r0, r6, #0, #3
   277cc:	f36f 00c5 	bfc	r0, #3, #3
   277d0:	f365 108f 	bfi	r0, r5, #6, #10
   277d4:	69a2      	ldr	r2, [r4, #24]
   277d6:	4907      	ldr	r1, [pc, #28]	; (277f4 <esf_dump+0x94>)
   277d8:	f014 fc36 	bl	3c048 <log_string_sync>
		esf->basic.pc);
}
   277dc:	b002      	add	sp, #8
   277de:	bd70      	pop	{r4, r5, r6, pc}
   277e0:	000412e8 	.word	0x000412e8
   277e4:	00041200 	.word	0x00041200
   277e8:	00042704 	.word	0x00042704
   277ec:	00042734 	.word	0x00042734
   277f0:	00042764 	.word	0x00042764
   277f4:	00042774 	.word	0x00042774

000277f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   277f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   277fa:	2b00      	cmp	r3, #0
   277fc:	db08      	blt.n	27810 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   277fe:	f000 001f 	and.w	r0, r0, #31
   27802:	095b      	lsrs	r3, r3, #5
   27804:	2201      	movs	r2, #1
   27806:	fa02 f000 	lsl.w	r0, r2, r0
   2780a:	4a02      	ldr	r2, [pc, #8]	; (27814 <arch_irq_enable+0x1c>)
   2780c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   27810:	4770      	bx	lr
   27812:	bf00      	nop
   27814:	e000e100 	.word	0xe000e100

00027818 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   27818:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   2781a:	2b00      	cmp	r3, #0
   2781c:	db0d      	blt.n	2783a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2781e:	f000 001f 	and.w	r0, r0, #31
   27822:	095b      	lsrs	r3, r3, #5
   27824:	2201      	movs	r2, #1
   27826:	fa02 f000 	lsl.w	r0, r2, r0
   2782a:	3320      	adds	r3, #32
   2782c:	4a03      	ldr	r2, [pc, #12]	; (2783c <arch_irq_disable+0x24>)
   2782e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27832:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27836:	f3bf 8f6f 	isb	sy
}
   2783a:	4770      	bx	lr
   2783c:	e000e100 	.word	0xe000e100

00027840 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   27840:	0942      	lsrs	r2, r0, #5
   27842:	4b05      	ldr	r3, [pc, #20]	; (27858 <arch_irq_is_enabled+0x18>)
   27844:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27848:	f000 001f 	and.w	r0, r0, #31
   2784c:	2301      	movs	r3, #1
   2784e:	fa03 f000 	lsl.w	r0, r3, r0
}
   27852:	4010      	ands	r0, r2
   27854:	4770      	bx	lr
   27856:	bf00      	nop
   27858:	e000e100 	.word	0xe000e100

0002785c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   2785c:	b570      	push	{r4, r5, r6, lr}
   2785e:	4605      	mov	r5, r0
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   27860:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   27862:	2c07      	cmp	r4, #7
   27864:	d80b      	bhi.n	2787e <z_arm_irq_priority_set+0x22>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27866:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   27868:	2b00      	cmp	r3, #0
   2786a:	db13      	blt.n	27894 <z_arm_irq_priority_set+0x38>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2786c:	0164      	lsls	r4, r4, #5
   2786e:	b2e4      	uxtb	r4, r4
   27870:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27874:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27878:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
}
   2787c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   2787e:	4e09      	ldr	r6, [pc, #36]	; (278a4 <z_arm_irq_priority_set+0x48>)
   27880:	2259      	movs	r2, #89	; 0x59
   27882:	4631      	mov	r1, r6
   27884:	4808      	ldr	r0, [pc, #32]	; (278a8 <z_arm_irq_priority_set+0x4c>)
   27886:	f014 f957 	bl	3bb38 <printk>
   2788a:	2159      	movs	r1, #89	; 0x59
   2788c:	4630      	mov	r0, r6
   2788e:	f014 fba7 	bl	3bfe0 <assert_post_action>
   27892:	e7e8      	b.n	27866 <z_arm_irq_priority_set+0xa>
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27894:	f005 050f 	and.w	r5, r5, #15
   27898:	0164      	lsls	r4, r4, #5
   2789a:	b2e4      	uxtb	r4, r4
   2789c:	4b03      	ldr	r3, [pc, #12]	; (278ac <z_arm_irq_priority_set+0x50>)
   2789e:	555c      	strb	r4, [r3, r5]
}
   278a0:	e7ec      	b.n	2787c <z_arm_irq_priority_set+0x20>
   278a2:	bf00      	nop
   278a4:	000427a4 	.word	0x000427a4
   278a8:	00041c84 	.word	0x00041c84
   278ac:	e000ed14 	.word	0xe000ed14

000278b0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   278b0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   278b2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   278b4:	4b05      	ldr	r3, [pc, #20]	; (278cc <_arch_isr_direct_pm+0x1c>)
   278b6:	699b      	ldr	r3, [r3, #24]
   278b8:	b90b      	cbnz	r3, 278be <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   278ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   278bc:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   278be:	4b03      	ldr	r3, [pc, #12]	; (278cc <_arch_isr_direct_pm+0x1c>)
   278c0:	2200      	movs	r2, #0
   278c2:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   278c4:	f018 f974 	bl	3fbb0 <z_pm_save_idle_exit>
   278c8:	e7f7      	b.n	278ba <_arch_isr_direct_pm+0xa>
   278ca:	bf00      	nop
   278cc:	20010d7c 	.word	0x20010d7c

000278d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   278d0:	bf30      	wfi
    b z_SysNmiOnReset
   278d2:	f7ff bffd 	b.w	278d0 <z_SysNmiOnReset>
   278d6:	bf00      	nop

000278d8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   278d8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   278da:	4b0b      	ldr	r3, [pc, #44]	; (27908 <z_arm_prep_c+0x30>)
   278dc:	4a0b      	ldr	r2, [pc, #44]	; (2790c <z_arm_prep_c+0x34>)
   278de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   278e2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   278e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   278e8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   278ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   278f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   278f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   278f8:	f00e f886 	bl	35a08 <z_bss_zero>
	z_data_copy();
   278fc:	f010 fd3e 	bl	3837c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   27900:	f000 fcea 	bl	282d8 <z_arm_interrupt_init>
	z_cstart();
   27904:	f00e f88c 	bl	35a20 <z_cstart>
   27908:	e000ed00 	.word	0xe000ed00
   2790c:	00020200 	.word	0x00020200

00027910 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   27910:	4a09      	ldr	r2, [pc, #36]	; (27938 <arch_swap+0x28>)
   27912:	6893      	ldr	r3, [r2, #8]
   27914:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   27916:	4909      	ldr	r1, [pc, #36]	; (2793c <arch_swap+0x2c>)
   27918:	6809      	ldr	r1, [r1, #0]
   2791a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2791c:	4908      	ldr	r1, [pc, #32]	; (27940 <arch_swap+0x30>)
   2791e:	684b      	ldr	r3, [r1, #4]
   27920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27924:	604b      	str	r3, [r1, #4]
   27926:	2300      	movs	r3, #0
   27928:	f383 8811 	msr	BASEPRI, r3
   2792c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   27930:	6893      	ldr	r3, [r2, #8]
}
   27932:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   27934:	4770      	bx	lr
   27936:	bf00      	nop
   27938:	20010d7c 	.word	0x20010d7c
   2793c:	00045a18 	.word	0x00045a18
   27940:	e000ed00 	.word	0xe000ed00

00027944 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   27944:	4913      	ldr	r1, [pc, #76]	; (27994 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27946:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   27948:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   2794c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2794e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   27952:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27956:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   27958:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2795c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   27960:	4f0d      	ldr	r7, [pc, #52]	; (27998 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   27962:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   27966:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   27968:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2796a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2796c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2796e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27970:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   27972:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   27976:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   2797a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   2797e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   27982:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   27986:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   27988:	f014 feee 	bl	3c768 <configure_builtin_stack_guard>
    pop {r2, lr}
   2798c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   27990:	4770      	bx	lr
   27992:	0000      	.short	0x0000
    ldr r1, =_kernel
   27994:	20010d7c 	.word	0x20010d7c
    ldr v4, =_SCS_ICSR
   27998:	e000ed04 	.word	0xe000ed04

0002799c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   2799c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   279a0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   279a2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   279a6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   279aa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   279ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   279b0:	2902      	cmp	r1, #2
    beq _oops
   279b2:	d0ff      	beq.n	279b4 <_oops>

000279b4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   279b4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   279b6:	f014 fec5 	bl	3c744 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   279ba:	bd01      	pop	{r0, pc}

000279bc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   279bc:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   279be:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   279c2:	490c      	ldr	r1, [pc, #48]	; (279f4 <arch_new_thread+0x38>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   279c4:	f021 0101 	bic.w	r1, r1, #1
   279c8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   279cc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   279d0:	9b01      	ldr	r3, [sp, #4]
   279d2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   279d6:	9b02      	ldr	r3, [sp, #8]
   279d8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   279dc:	9b03      	ldr	r3, [sp, #12]
   279de:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   279e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   279e6:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   279ea:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   279ec:	2300      	movs	r3, #0
   279ee:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   279f0:	bc10      	pop	{r4}
   279f2:	4770      	bx	lr
   279f4:	0003bc8d 	.word	0x0003bc8d

000279f8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   279f8:	4b08      	ldr	r3, [pc, #32]	; (27a1c <arch_switch_to_main_thread+0x24>)
   279fa:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   279fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   279fe:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   27a02:	4610      	mov	r0, r2
   27a04:	f381 8809 	msr	PSP, r1
   27a08:	2100      	movs	r1, #0
   27a0a:	b663      	cpsie	if
   27a0c:	f381 8811 	msr	BASEPRI, r1
   27a10:	f3bf 8f6f 	isb	sy
   27a14:	2200      	movs	r2, #0
   27a16:	2300      	movs	r3, #0
   27a18:	f014 f938 	bl	3bc8c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   27a1c:	20010d7c 	.word	0x20010d7c

00027a20 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   27a20:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   27a22:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27a24:	4a0b      	ldr	r2, [pc, #44]	; (27a54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27a26:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   27a28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   27a2a:	bf1e      	ittt	ne
	movne	r1, #0
   27a2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   27a2e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   27a30:	f018 f8be 	blne	3fbb0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27a34:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   27a36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   27a3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27a3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   27a42:	4905      	ldr	r1, [pc, #20]	; (27a58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27a44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27a46:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   27a48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   27a4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   27a4e:	4903      	ldr	r1, [pc, #12]	; (27a5c <_isr_wrapper+0x3c>)
	bx r1
   27a50:	4708      	bx	r1
   27a52:	0000      	.short	0x0000
	ldr r2, =_kernel
   27a54:	20010d7c 	.word	0x20010d7c
	ldr r1, =_sw_isr_table
   27a58:	00040fec 	.word	0x00040fec
	ldr r1, =z_arm_int_exit
   27a5c:	00027a61 	.word	0x00027a61

00027a60 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   27a60:	4b04      	ldr	r3, [pc, #16]	; (27a74 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   27a62:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   27a64:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   27a66:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   27a68:	d003      	beq.n	27a72 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   27a6a:	4903      	ldr	r1, [pc, #12]	; (27a78 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   27a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   27a70:	600a      	str	r2, [r1, #0]

00027a72 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   27a72:	4770      	bx	lr
	ldr r3, =_kernel
   27a74:	20010d7c 	.word	0x20010d7c
	ldr r1, =_SCS_ICSR
   27a78:	e000ed04 	.word	0xe000ed04

00027a7c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   27a7c:	b570      	push	{r4, r5, r6, lr}
   27a7e:	4605      	mov	r5, r0
   27a80:	460e      	mov	r6, r1
   27a82:	4614      	mov	r4, r2
   27a84:	4b61      	ldr	r3, [pc, #388]	; (27c0c <mem_manage_fault+0x190>)
   27a86:	4a62      	ldr	r2, [pc, #392]	; (27c10 <mem_manage_fault+0x194>)
   27a88:	1a9b      	subs	r3, r3, r2
   27a8a:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   27a8c:	f04f 0000 	mov.w	r0, #0
   27a90:	2201      	movs	r2, #1
   27a92:	f362 0002 	bfi	r0, r2, #0, #3
   27a96:	f36f 00c5 	bfc	r0, #3, #3
   27a9a:	f363 108f 	bfi	r0, r3, #6, #10
   27a9e:	495d      	ldr	r1, [pc, #372]	; (27c14 <mem_manage_fault+0x198>)
   27aa0:	f014 fad2 	bl	3c048 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   27aa4:	4b5c      	ldr	r3, [pc, #368]	; (27c18 <mem_manage_fault+0x19c>)
   27aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27aa8:	f013 0f10 	tst.w	r3, #16
   27aac:	d12e      	bne.n	27b0c <mem_manage_fault+0x90>
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   27aae:	4b5a      	ldr	r3, [pc, #360]	; (27c18 <mem_manage_fault+0x19c>)
   27ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ab2:	f013 0f08 	tst.w	r3, #8
   27ab6:	d13a      	bne.n	27b2e <mem_manage_fault+0xb2>
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   27ab8:	4b57      	ldr	r3, [pc, #348]	; (27c18 <mem_manage_fault+0x19c>)
   27aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27abc:	f013 0f02 	tst.w	r3, #2
   27ac0:	d146      	bne.n	27b50 <mem_manage_fault+0xd4>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   27ac2:	4b55      	ldr	r3, [pc, #340]	; (27c18 <mem_manage_fault+0x19c>)
   27ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ac6:	f013 0f01 	tst.w	r3, #1
   27aca:	d16f      	bne.n	27bac <mem_manage_fault+0x130>
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   27acc:	4b52      	ldr	r3, [pc, #328]	; (27c18 <mem_manage_fault+0x19c>)
   27ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ad0:	f013 0f20 	tst.w	r3, #32
   27ad4:	d17b      	bne.n	27bce <mem_manage_fault+0x152>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   27ad6:	4b50      	ldr	r3, [pc, #320]	; (27c18 <mem_manage_fault+0x19c>)
   27ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ada:	f013 0f10 	tst.w	r3, #16
   27ade:	d104      	bne.n	27aea <mem_manage_fault+0x6e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   27ae0:	4b4d      	ldr	r3, [pc, #308]	; (27c18 <mem_manage_fault+0x19c>)
   27ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   27ae4:	f013 0f02 	tst.w	r3, #2
   27ae8:	d004      	beq.n	27af4 <mem_manage_fault+0x78>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   27aea:	4b4b      	ldr	r3, [pc, #300]	; (27c18 <mem_manage_fault+0x19c>)
   27aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27aee:	f013 0f10 	tst.w	r3, #16
   27af2:	d17d      	bne.n	27bf0 <mem_manage_fault+0x174>
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   27af4:	4a48      	ldr	r2, [pc, #288]	; (27c18 <mem_manage_fault+0x19c>)
   27af6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27af8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   27afc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   27afe:	2101      	movs	r1, #1
   27b00:	4628      	mov	r0, r5
   27b02:	f014 fe35 	bl	3c770 <memory_fault_recoverable>
   27b06:	7020      	strb	r0, [r4, #0]

	return reason;
}
   27b08:	2000      	movs	r0, #0
   27b0a:	bd70      	pop	{r4, r5, r6, pc}
   27b0c:	4b3f      	ldr	r3, [pc, #252]	; (27c0c <mem_manage_fault+0x190>)
   27b0e:	4a40      	ldr	r2, [pc, #256]	; (27c10 <mem_manage_fault+0x194>)
   27b10:	1a9b      	subs	r3, r3, r2
   27b12:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   27b14:	f04f 0000 	mov.w	r0, #0
   27b18:	2201      	movs	r2, #1
   27b1a:	f362 0002 	bfi	r0, r2, #0, #3
   27b1e:	f36f 00c5 	bfc	r0, #3, #3
   27b22:	f363 108f 	bfi	r0, r3, #6, #10
   27b26:	493d      	ldr	r1, [pc, #244]	; (27c1c <mem_manage_fault+0x1a0>)
   27b28:	f014 fa8e 	bl	3c048 <log_string_sync>
   27b2c:	e7bf      	b.n	27aae <mem_manage_fault+0x32>
   27b2e:	4b37      	ldr	r3, [pc, #220]	; (27c0c <mem_manage_fault+0x190>)
   27b30:	4a37      	ldr	r2, [pc, #220]	; (27c10 <mem_manage_fault+0x194>)
   27b32:	1a9b      	subs	r3, r3, r2
   27b34:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   27b36:	f04f 0000 	mov.w	r0, #0
   27b3a:	2201      	movs	r2, #1
   27b3c:	f362 0002 	bfi	r0, r2, #0, #3
   27b40:	f36f 00c5 	bfc	r0, #3, #3
   27b44:	f363 108f 	bfi	r0, r3, #6, #10
   27b48:	4935      	ldr	r1, [pc, #212]	; (27c20 <mem_manage_fault+0x1a4>)
   27b4a:	f014 fa7d 	bl	3c048 <log_string_sync>
   27b4e:	e7b3      	b.n	27ab8 <mem_manage_fault+0x3c>
   27b50:	4b2e      	ldr	r3, [pc, #184]	; (27c0c <mem_manage_fault+0x190>)
   27b52:	4a2f      	ldr	r2, [pc, #188]	; (27c10 <mem_manage_fault+0x194>)
   27b54:	1a9b      	subs	r3, r3, r2
   27b56:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   27b58:	f04f 0000 	mov.w	r0, #0
   27b5c:	2201      	movs	r2, #1
   27b5e:	f362 0002 	bfi	r0, r2, #0, #3
   27b62:	f36f 00c5 	bfc	r0, #3, #3
   27b66:	f363 108f 	bfi	r0, r3, #6, #10
   27b6a:	492e      	ldr	r1, [pc, #184]	; (27c24 <mem_manage_fault+0x1a8>)
   27b6c:	f014 fa6c 	bl	3c048 <log_string_sync>
		uint32_t temp = SCB->MMFAR;
   27b70:	4b29      	ldr	r3, [pc, #164]	; (27c18 <mem_manage_fault+0x19c>)
   27b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   27b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27b76:	f013 0f80 	tst.w	r3, #128	; 0x80
   27b7a:	d0a2      	beq.n	27ac2 <mem_manage_fault+0x46>
   27b7c:	4b23      	ldr	r3, [pc, #140]	; (27c0c <mem_manage_fault+0x190>)
   27b7e:	4924      	ldr	r1, [pc, #144]	; (27c10 <mem_manage_fault+0x194>)
   27b80:	1a5b      	subs	r3, r3, r1
   27b82:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   27b84:	f04f 0000 	mov.w	r0, #0
   27b88:	2101      	movs	r1, #1
   27b8a:	f361 0002 	bfi	r0, r1, #0, #3
   27b8e:	f36f 00c5 	bfc	r0, #3, #3
   27b92:	f363 108f 	bfi	r0, r3, #6, #10
   27b96:	4924      	ldr	r1, [pc, #144]	; (27c28 <mem_manage_fault+0x1ac>)
   27b98:	f014 fa56 	bl	3c048 <log_string_sync>
			if (from_hard_fault != 0) {
   27b9c:	2e00      	cmp	r6, #0
   27b9e:	d090      	beq.n	27ac2 <mem_manage_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   27ba0:	4a1d      	ldr	r2, [pc, #116]	; (27c18 <mem_manage_fault+0x19c>)
   27ba2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   27ba8:	6293      	str	r3, [r2, #40]	; 0x28
   27baa:	e78a      	b.n	27ac2 <mem_manage_fault+0x46>
   27bac:	4b17      	ldr	r3, [pc, #92]	; (27c0c <mem_manage_fault+0x190>)
   27bae:	4a18      	ldr	r2, [pc, #96]	; (27c10 <mem_manage_fault+0x194>)
   27bb0:	1a9b      	subs	r3, r3, r2
   27bb2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   27bb4:	f04f 0000 	mov.w	r0, #0
   27bb8:	2201      	movs	r2, #1
   27bba:	f362 0002 	bfi	r0, r2, #0, #3
   27bbe:	f36f 00c5 	bfc	r0, #3, #3
   27bc2:	f363 108f 	bfi	r0, r3, #6, #10
   27bc6:	4919      	ldr	r1, [pc, #100]	; (27c2c <mem_manage_fault+0x1b0>)
   27bc8:	f014 fa3e 	bl	3c048 <log_string_sync>
   27bcc:	e77e      	b.n	27acc <mem_manage_fault+0x50>
   27bce:	4b0f      	ldr	r3, [pc, #60]	; (27c0c <mem_manage_fault+0x190>)
   27bd0:	4a0f      	ldr	r2, [pc, #60]	; (27c10 <mem_manage_fault+0x194>)
   27bd2:	1a9b      	subs	r3, r3, r2
   27bd4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   27bd6:	f04f 0000 	mov.w	r0, #0
   27bda:	2201      	movs	r2, #1
   27bdc:	f362 0002 	bfi	r0, r2, #0, #3
   27be0:	f36f 00c5 	bfc	r0, #3, #3
   27be4:	f363 108f 	bfi	r0, r3, #6, #10
   27be8:	4911      	ldr	r1, [pc, #68]	; (27c30 <mem_manage_fault+0x1b4>)
   27bea:	f014 fa2d 	bl	3c048 <log_string_sync>
   27bee:	e772      	b.n	27ad6 <mem_manage_fault+0x5a>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   27bf0:	4e10      	ldr	r6, [pc, #64]	; (27c34 <mem_manage_fault+0x1b8>)
   27bf2:	f240 124f 	movw	r2, #335	; 0x14f
   27bf6:	4631      	mov	r1, r6
   27bf8:	480f      	ldr	r0, [pc, #60]	; (27c38 <mem_manage_fault+0x1bc>)
   27bfa:	f013 ff9d 	bl	3bb38 <printk>
   27bfe:	f240 114f 	movw	r1, #335	; 0x14f
   27c02:	4630      	mov	r0, r6
   27c04:	f014 f9ec 	bl	3bfe0 <assert_post_action>
   27c08:	e774      	b.n	27af4 <mem_manage_fault+0x78>
   27c0a:	bf00      	nop
   27c0c:	000412e8 	.word	0x000412e8
   27c10:	00041200 	.word	0x00041200
   27c14:	000427dc 	.word	0x000427dc
   27c18:	e000ed00 	.word	0xe000ed00
   27c1c:	000427f4 	.word	0x000427f4
   27c20:	00042828 	.word	0x00042828
   27c24:	0004283c 	.word	0x0004283c
   27c28:	00042854 	.word	0x00042854
   27c2c:	0004286c 	.word	0x0004286c
   27c30:	0004288c 	.word	0x0004288c
   27c34:	000428bc 	.word	0x000428bc
   27c38:	00041c84 	.word	0x00041c84

00027c3c <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   27c3c:	b570      	push	{r4, r5, r6, lr}
   27c3e:	4605      	mov	r5, r0
   27c40:	460e      	mov	r6, r1
   27c42:	4614      	mov	r4, r2
   27c44:	4b5e      	ldr	r3, [pc, #376]	; (27dc0 <bus_fault+0x184>)
   27c46:	4a5f      	ldr	r2, [pc, #380]	; (27dc4 <bus_fault+0x188>)
   27c48:	1a9b      	subs	r3, r3, r2
   27c4a:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   27c4c:	f04f 0000 	mov.w	r0, #0
   27c50:	2201      	movs	r2, #1
   27c52:	f362 0002 	bfi	r0, r2, #0, #3
   27c56:	f36f 00c5 	bfc	r0, #3, #3
   27c5a:	f363 108f 	bfi	r0, r3, #6, #10
   27c5e:	495a      	ldr	r1, [pc, #360]	; (27dc8 <bus_fault+0x18c>)
   27c60:	f014 f9f2 	bl	3c048 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   27c64:	4b59      	ldr	r3, [pc, #356]	; (27dcc <bus_fault+0x190>)
   27c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c68:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   27c6c:	d124      	bne.n	27cb8 <bus_fault+0x7c>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   27c6e:	4b57      	ldr	r3, [pc, #348]	; (27dcc <bus_fault+0x190>)
   27c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c72:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27c76:	d130      	bne.n	27cda <bus_fault+0x9e>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   27c78:	4b54      	ldr	r3, [pc, #336]	; (27dcc <bus_fault+0x190>)
   27c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c7c:	f413 7f00 	tst.w	r3, #512	; 0x200
   27c80:	d13c      	bne.n	27cfc <bus_fault+0xc0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   27c82:	4b52      	ldr	r3, [pc, #328]	; (27dcc <bus_fault+0x190>)
   27c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c86:	f413 6f80 	tst.w	r3, #1024	; 0x400
   27c8a:	d165      	bne.n	27d58 <bus_fault+0x11c>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   27c8c:	4b4f      	ldr	r3, [pc, #316]	; (27dcc <bus_fault+0x190>)
   27c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c90:	f413 7f80 	tst.w	r3, #256	; 0x100
   27c94:	d171      	bne.n	27d7a <bus_fault+0x13e>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   27c96:	4b4d      	ldr	r3, [pc, #308]	; (27dcc <bus_fault+0x190>)
   27c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   27c9e:	d17d      	bne.n	27d9c <bus_fault+0x160>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   27ca0:	4a4a      	ldr	r2, [pc, #296]	; (27dcc <bus_fault+0x190>)
   27ca2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27ca4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   27ca8:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   27caa:	2101      	movs	r1, #1
   27cac:	4628      	mov	r0, r5
   27cae:	f014 fd5f 	bl	3c770 <memory_fault_recoverable>
   27cb2:	7020      	strb	r0, [r4, #0]

	return reason;
}
   27cb4:	2000      	movs	r0, #0
   27cb6:	bd70      	pop	{r4, r5, r6, pc}
   27cb8:	4b41      	ldr	r3, [pc, #260]	; (27dc0 <bus_fault+0x184>)
   27cba:	4a42      	ldr	r2, [pc, #264]	; (27dc4 <bus_fault+0x188>)
   27cbc:	1a9b      	subs	r3, r3, r2
   27cbe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   27cc0:	f04f 0000 	mov.w	r0, #0
   27cc4:	2201      	movs	r2, #1
   27cc6:	f362 0002 	bfi	r0, r2, #0, #3
   27cca:	f36f 00c5 	bfc	r0, #3, #3
   27cce:	f363 108f 	bfi	r0, r3, #6, #10
   27cd2:	493f      	ldr	r1, [pc, #252]	; (27dd0 <bus_fault+0x194>)
   27cd4:	f014 f9b8 	bl	3c048 <log_string_sync>
   27cd8:	e7c9      	b.n	27c6e <bus_fault+0x32>
   27cda:	4b39      	ldr	r3, [pc, #228]	; (27dc0 <bus_fault+0x184>)
   27cdc:	4a39      	ldr	r2, [pc, #228]	; (27dc4 <bus_fault+0x188>)
   27cde:	1a9b      	subs	r3, r3, r2
   27ce0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   27ce2:	f04f 0000 	mov.w	r0, #0
   27ce6:	2201      	movs	r2, #1
   27ce8:	f362 0002 	bfi	r0, r2, #0, #3
   27cec:	f36f 00c5 	bfc	r0, #3, #3
   27cf0:	f363 108f 	bfi	r0, r3, #6, #10
   27cf4:	4937      	ldr	r1, [pc, #220]	; (27dd4 <bus_fault+0x198>)
   27cf6:	f014 f9a7 	bl	3c048 <log_string_sync>
   27cfa:	e7bd      	b.n	27c78 <bus_fault+0x3c>
   27cfc:	4b30      	ldr	r3, [pc, #192]	; (27dc0 <bus_fault+0x184>)
   27cfe:	4a31      	ldr	r2, [pc, #196]	; (27dc4 <bus_fault+0x188>)
   27d00:	1a9b      	subs	r3, r3, r2
   27d02:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   27d04:	f04f 0000 	mov.w	r0, #0
   27d08:	2201      	movs	r2, #1
   27d0a:	f362 0002 	bfi	r0, r2, #0, #3
   27d0e:	f36f 00c5 	bfc	r0, #3, #3
   27d12:	f363 108f 	bfi	r0, r3, #6, #10
   27d16:	4930      	ldr	r1, [pc, #192]	; (27dd8 <bus_fault+0x19c>)
   27d18:	f014 f996 	bl	3c048 <log_string_sync>
		STORE_xFAR(bfar, SCB->BFAR);
   27d1c:	4b2b      	ldr	r3, [pc, #172]	; (27dcc <bus_fault+0x190>)
   27d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   27d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d22:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   27d26:	d0ac      	beq.n	27c82 <bus_fault+0x46>
   27d28:	4b25      	ldr	r3, [pc, #148]	; (27dc0 <bus_fault+0x184>)
   27d2a:	4926      	ldr	r1, [pc, #152]	; (27dc4 <bus_fault+0x188>)
   27d2c:	1a5b      	subs	r3, r3, r1
   27d2e:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   27d30:	f04f 0000 	mov.w	r0, #0
   27d34:	2101      	movs	r1, #1
   27d36:	f361 0002 	bfi	r0, r1, #0, #3
   27d3a:	f36f 00c5 	bfc	r0, #3, #3
   27d3e:	f363 108f 	bfi	r0, r3, #6, #10
   27d42:	4926      	ldr	r1, [pc, #152]	; (27ddc <bus_fault+0x1a0>)
   27d44:	f014 f980 	bl	3c048 <log_string_sync>
			if (from_hard_fault != 0) {
   27d48:	2e00      	cmp	r6, #0
   27d4a:	d09a      	beq.n	27c82 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   27d4c:	4a1f      	ldr	r2, [pc, #124]	; (27dcc <bus_fault+0x190>)
   27d4e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27d54:	6293      	str	r3, [r2, #40]	; 0x28
   27d56:	e794      	b.n	27c82 <bus_fault+0x46>
   27d58:	4b19      	ldr	r3, [pc, #100]	; (27dc0 <bus_fault+0x184>)
   27d5a:	4a1a      	ldr	r2, [pc, #104]	; (27dc4 <bus_fault+0x188>)
   27d5c:	1a9b      	subs	r3, r3, r2
   27d5e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   27d60:	f04f 0000 	mov.w	r0, #0
   27d64:	2201      	movs	r2, #1
   27d66:	f362 0002 	bfi	r0, r2, #0, #3
   27d6a:	f36f 00c5 	bfc	r0, #3, #3
   27d6e:	f363 108f 	bfi	r0, r3, #6, #10
   27d72:	491b      	ldr	r1, [pc, #108]	; (27de0 <bus_fault+0x1a4>)
   27d74:	f014 f968 	bl	3c048 <log_string_sync>
   27d78:	e788      	b.n	27c8c <bus_fault+0x50>
   27d7a:	4b11      	ldr	r3, [pc, #68]	; (27dc0 <bus_fault+0x184>)
   27d7c:	4a11      	ldr	r2, [pc, #68]	; (27dc4 <bus_fault+0x188>)
   27d7e:	1a9b      	subs	r3, r3, r2
   27d80:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   27d82:	f04f 0000 	mov.w	r0, #0
   27d86:	2201      	movs	r2, #1
   27d88:	f362 0002 	bfi	r0, r2, #0, #3
   27d8c:	f36f 00c5 	bfc	r0, #3, #3
   27d90:	f363 108f 	bfi	r0, r3, #6, #10
   27d94:	4913      	ldr	r1, [pc, #76]	; (27de4 <bus_fault+0x1a8>)
   27d96:	f014 f957 	bl	3c048 <log_string_sync>
   27d9a:	e781      	b.n	27ca0 <bus_fault+0x64>
   27d9c:	4b08      	ldr	r3, [pc, #32]	; (27dc0 <bus_fault+0x184>)
   27d9e:	4a09      	ldr	r2, [pc, #36]	; (27dc4 <bus_fault+0x188>)
   27da0:	1a9b      	subs	r3, r3, r2
   27da2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   27da4:	f04f 0000 	mov.w	r0, #0
   27da8:	2201      	movs	r2, #1
   27daa:	f362 0002 	bfi	r0, r2, #0, #3
   27dae:	f36f 00c5 	bfc	r0, #3, #3
   27db2:	f363 108f 	bfi	r0, r3, #6, #10
   27db6:	490c      	ldr	r1, [pc, #48]	; (27de8 <bus_fault+0x1ac>)
   27db8:	f014 f946 	bl	3c048 <log_string_sync>
   27dbc:	e770      	b.n	27ca0 <bus_fault+0x64>
   27dbe:	bf00      	nop
   27dc0:	000412e8 	.word	0x000412e8
   27dc4:	00041200 	.word	0x00041200
   27dc8:	000428f8 	.word	0x000428f8
   27dcc:	e000ed00 	.word	0xe000ed00
   27dd0:	00042910 	.word	0x00042910
   27dd4:	00042828 	.word	0x00042828
   27dd8:	00042924 	.word	0x00042924
   27ddc:	00042940 	.word	0x00042940
   27de0:	00042958 	.word	0x00042958
   27de4:	00042974 	.word	0x00042974
   27de8:	0004288c 	.word	0x0004288c

00027dec <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   27dec:	b510      	push	{r4, lr}
   27dee:	4b5a      	ldr	r3, [pc, #360]	; (27f58 <usage_fault+0x16c>)
   27df0:	4a5a      	ldr	r2, [pc, #360]	; (27f5c <usage_fault+0x170>)
   27df2:	1a9b      	subs	r3, r3, r2
   27df4:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   27df6:	f04f 0000 	mov.w	r0, #0
   27dfa:	2201      	movs	r2, #1
   27dfc:	f362 0002 	bfi	r0, r2, #0, #3
   27e00:	f36f 00c5 	bfc	r0, #3, #3
   27e04:	f363 108f 	bfi	r0, r3, #6, #10
   27e08:	4955      	ldr	r1, [pc, #340]	; (27f60 <usage_fault+0x174>)
   27e0a:	f014 f91d 	bl	3c048 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   27e0e:	4b55      	ldr	r3, [pc, #340]	; (27f64 <usage_fault+0x178>)
   27e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e12:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   27e16:	d126      	bne.n	27e66 <usage_fault+0x7a>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   27e18:	4b52      	ldr	r3, [pc, #328]	; (27f64 <usage_fault+0x178>)
   27e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   27e20:	d132      	bne.n	27e88 <usage_fault+0x9c>
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   27e22:	4b50      	ldr	r3, [pc, #320]	; (27f64 <usage_fault+0x178>)
   27e24:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   27e26:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   27e2a:	d13e      	bne.n	27eaa <usage_fault+0xbe>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   27e2c:	4b4d      	ldr	r3, [pc, #308]	; (27f64 <usage_fault+0x178>)
   27e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e30:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   27e34:	d14b      	bne.n	27ece <usage_fault+0xe2>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   27e36:	4b4b      	ldr	r3, [pc, #300]	; (27f64 <usage_fault+0x178>)
   27e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e3a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   27e3e:	d157      	bne.n	27ef0 <usage_fault+0x104>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   27e40:	4b48      	ldr	r3, [pc, #288]	; (27f64 <usage_fault+0x178>)
   27e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   27e48:	d163      	bne.n	27f12 <usage_fault+0x126>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   27e4a:	4b46      	ldr	r3, [pc, #280]	; (27f64 <usage_fault+0x178>)
   27e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27e4e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   27e52:	d16f      	bne.n	27f34 <usage_fault+0x148>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27e54:	4a43      	ldr	r2, [pc, #268]	; (27f64 <usage_fault+0x178>)
   27e56:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27e58:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   27e5c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   27e60:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   27e62:	4620      	mov	r0, r4
   27e64:	bd10      	pop	{r4, pc}
   27e66:	4b3c      	ldr	r3, [pc, #240]	; (27f58 <usage_fault+0x16c>)
   27e68:	4a3c      	ldr	r2, [pc, #240]	; (27f5c <usage_fault+0x170>)
   27e6a:	1a9b      	subs	r3, r3, r2
   27e6c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   27e6e:	f04f 0000 	mov.w	r0, #0
   27e72:	2201      	movs	r2, #1
   27e74:	f362 0002 	bfi	r0, r2, #0, #3
   27e78:	f36f 00c5 	bfc	r0, #3, #3
   27e7c:	f363 108f 	bfi	r0, r3, #6, #10
   27e80:	4939      	ldr	r1, [pc, #228]	; (27f68 <usage_fault+0x17c>)
   27e82:	f014 f8e1 	bl	3c048 <log_string_sync>
   27e86:	e7c7      	b.n	27e18 <usage_fault+0x2c>
   27e88:	4b33      	ldr	r3, [pc, #204]	; (27f58 <usage_fault+0x16c>)
   27e8a:	4a34      	ldr	r2, [pc, #208]	; (27f5c <usage_fault+0x170>)
   27e8c:	1a9b      	subs	r3, r3, r2
   27e8e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   27e90:	f04f 0000 	mov.w	r0, #0
   27e94:	2201      	movs	r2, #1
   27e96:	f362 0002 	bfi	r0, r2, #0, #3
   27e9a:	f36f 00c5 	bfc	r0, #3, #3
   27e9e:	f363 108f 	bfi	r0, r3, #6, #10
   27ea2:	4932      	ldr	r1, [pc, #200]	; (27f6c <usage_fault+0x180>)
   27ea4:	f014 f8d0 	bl	3c048 <log_string_sync>
   27ea8:	e7bb      	b.n	27e22 <usage_fault+0x36>
   27eaa:	4b2b      	ldr	r3, [pc, #172]	; (27f58 <usage_fault+0x16c>)
   27eac:	4a2b      	ldr	r2, [pc, #172]	; (27f5c <usage_fault+0x170>)
   27eae:	1a9b      	subs	r3, r3, r2
   27eb0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   27eb2:	f04f 0000 	mov.w	r0, #0
   27eb6:	2201      	movs	r2, #1
   27eb8:	f362 0002 	bfi	r0, r2, #0, #3
   27ebc:	f36f 00c5 	bfc	r0, #3, #3
   27ec0:	f363 108f 	bfi	r0, r3, #6, #10
   27ec4:	492a      	ldr	r1, [pc, #168]	; (27f70 <usage_fault+0x184>)
   27ec6:	f014 f8bf 	bl	3c048 <log_string_sync>
		reason = K_ERR_STACK_CHK_FAIL;
   27eca:	2402      	movs	r4, #2
   27ecc:	e7ae      	b.n	27e2c <usage_fault+0x40>
   27ece:	4b22      	ldr	r3, [pc, #136]	; (27f58 <usage_fault+0x16c>)
   27ed0:	4a22      	ldr	r2, [pc, #136]	; (27f5c <usage_fault+0x170>)
   27ed2:	1a9b      	subs	r3, r3, r2
   27ed4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   27ed6:	f04f 0000 	mov.w	r0, #0
   27eda:	2201      	movs	r2, #1
   27edc:	f362 0002 	bfi	r0, r2, #0, #3
   27ee0:	f36f 00c5 	bfc	r0, #3, #3
   27ee4:	f363 108f 	bfi	r0, r3, #6, #10
   27ee8:	4922      	ldr	r1, [pc, #136]	; (27f74 <usage_fault+0x188>)
   27eea:	f014 f8ad 	bl	3c048 <log_string_sync>
   27eee:	e7a2      	b.n	27e36 <usage_fault+0x4a>
   27ef0:	4b19      	ldr	r3, [pc, #100]	; (27f58 <usage_fault+0x16c>)
   27ef2:	4a1a      	ldr	r2, [pc, #104]	; (27f5c <usage_fault+0x170>)
   27ef4:	1a9b      	subs	r3, r3, r2
   27ef6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   27ef8:	f04f 0000 	mov.w	r0, #0
   27efc:	2201      	movs	r2, #1
   27efe:	f362 0002 	bfi	r0, r2, #0, #3
   27f02:	f36f 00c5 	bfc	r0, #3, #3
   27f06:	f363 108f 	bfi	r0, r3, #6, #10
   27f0a:	491b      	ldr	r1, [pc, #108]	; (27f78 <usage_fault+0x18c>)
   27f0c:	f014 f89c 	bl	3c048 <log_string_sync>
   27f10:	e796      	b.n	27e40 <usage_fault+0x54>
   27f12:	4b11      	ldr	r3, [pc, #68]	; (27f58 <usage_fault+0x16c>)
   27f14:	4a11      	ldr	r2, [pc, #68]	; (27f5c <usage_fault+0x170>)
   27f16:	1a9b      	subs	r3, r3, r2
   27f18:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   27f1a:	f04f 0000 	mov.w	r0, #0
   27f1e:	2201      	movs	r2, #1
   27f20:	f362 0002 	bfi	r0, r2, #0, #3
   27f24:	f36f 00c5 	bfc	r0, #3, #3
   27f28:	f363 108f 	bfi	r0, r3, #6, #10
   27f2c:	4913      	ldr	r1, [pc, #76]	; (27f7c <usage_fault+0x190>)
   27f2e:	f014 f88b 	bl	3c048 <log_string_sync>
   27f32:	e78a      	b.n	27e4a <usage_fault+0x5e>
   27f34:	4b08      	ldr	r3, [pc, #32]	; (27f58 <usage_fault+0x16c>)
   27f36:	4a09      	ldr	r2, [pc, #36]	; (27f5c <usage_fault+0x170>)
   27f38:	1a9b      	subs	r3, r3, r2
   27f3a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   27f3c:	f04f 0000 	mov.w	r0, #0
   27f40:	2201      	movs	r2, #1
   27f42:	f362 0002 	bfi	r0, r2, #0, #3
   27f46:	f36f 00c5 	bfc	r0, #3, #3
   27f4a:	f363 108f 	bfi	r0, r3, #6, #10
   27f4e:	490c      	ldr	r1, [pc, #48]	; (27f80 <usage_fault+0x194>)
   27f50:	f014 f87a 	bl	3c048 <log_string_sync>
   27f54:	e77e      	b.n	27e54 <usage_fault+0x68>
   27f56:	bf00      	nop
   27f58:	000412e8 	.word	0x000412e8
   27f5c:	00041200 	.word	0x00041200
   27f60:	0004298c 	.word	0x0004298c
   27f64:	e000ed00 	.word	0xe000ed00
   27f68:	000429a4 	.word	0x000429a4
   27f6c:	000429b8 	.word	0x000429b8
   27f70:	000429d4 	.word	0x000429d4
   27f74:	00042a00 	.word	0x00042a00
   27f78:	00042a20 	.word	0x00042a20
   27f7c:	00042a48 	.word	0x00042a48
   27f80:	00042a64 	.word	0x00042a64

00027f84 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   27f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f86:	4606      	mov	r6, r0
   27f88:	460c      	mov	r4, r1
   27f8a:	4b56      	ldr	r3, [pc, #344]	; (280e4 <hard_fault+0x160>)
   27f8c:	4a56      	ldr	r2, [pc, #344]	; (280e8 <hard_fault+0x164>)
   27f8e:	1a9b      	subs	r3, r3, r2
   27f90:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   27f92:	f04f 0000 	mov.w	r0, #0
   27f96:	2201      	movs	r2, #1
   27f98:	f362 0002 	bfi	r0, r2, #0, #3
   27f9c:	f36f 00c5 	bfc	r0, #3, #3
   27fa0:	f363 108f 	bfi	r0, r3, #6, #10
   27fa4:	4951      	ldr	r1, [pc, #324]	; (280ec <hard_fault+0x168>)
   27fa6:	f014 f84f 	bl	3c048 <log_string_sync>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   27faa:	2300      	movs	r3, #0
   27fac:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   27fae:	4b50      	ldr	r3, [pc, #320]	; (280f0 <hard_fault+0x16c>)
   27fb0:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   27fb2:	f017 0702 	ands.w	r7, r7, #2
   27fb6:	d134      	bne.n	28022 <hard_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   27fb8:	4b4d      	ldr	r3, [pc, #308]	; (280f0 <hard_fault+0x16c>)
   27fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27fbc:	2b00      	cmp	r3, #0
   27fbe:	db43      	blt.n	28048 <hard_fault+0xc4>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   27fc0:	4b4b      	ldr	r3, [pc, #300]	; (280f0 <hard_fault+0x16c>)
   27fc2:	6add      	ldr	r5, [r3, #44]	; 0x2c
   27fc4:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
   27fc8:	d07f      	beq.n	280ca <hard_fault+0x146>
   27fca:	4b46      	ldr	r3, [pc, #280]	; (280e4 <hard_fault+0x160>)
   27fcc:	4a46      	ldr	r2, [pc, #280]	; (280e8 <hard_fault+0x164>)
   27fce:	1a9b      	subs	r3, r3, r2
   27fd0:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   27fd2:	f04f 0000 	mov.w	r0, #0
   27fd6:	2201      	movs	r2, #1
   27fd8:	f362 0002 	bfi	r0, r2, #0, #3
   27fdc:	f36f 00c5 	bfc	r0, #3, #3
   27fe0:	f363 108f 	bfi	r0, r3, #6, #10
   27fe4:	4943      	ldr	r1, [pc, #268]	; (280f4 <hard_fault+0x170>)
   27fe6:	f014 f82f 	bl	3c048 <log_string_sync>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   27fea:	69b3      	ldr	r3, [r6, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   27fec:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   27ff0:	f64d 7302 	movw	r3, #57090	; 0xdf02
   27ff4:	429a      	cmp	r2, r3
   27ff6:	d039      	beq.n	2806c <hard_fault+0xe8>
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
   27ff8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27ffc:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   28000:	781b      	ldrb	r3, [r3, #0]
   28002:	2b00      	cmp	r3, #0
   28004:	d145      	bne.n	28092 <hard_fault+0x10e>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   28006:	4b3c      	ldr	r3, [pc, #240]	; (280f8 <hard_fault+0x174>)
   28008:	781b      	ldrb	r3, [r3, #0]
   2800a:	2b00      	cmp	r3, #0
   2800c:	d148      	bne.n	280a0 <hard_fault+0x11c>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   2800e:	4b3b      	ldr	r3, [pc, #236]	; (280fc <hard_fault+0x178>)
   28010:	881b      	ldrh	r3, [r3, #0]
   28012:	b29b      	uxth	r3, r3
   28014:	2b00      	cmp	r3, #0
   28016:	d04a      	beq.n	280ae <hard_fault+0x12a>
			reason = usage_fault(esf);
   28018:	4630      	mov	r0, r6
   2801a:	f7ff fee7 	bl	27dec <usage_fault>
   2801e:	4605      	mov	r5, r0
   28020:	e010      	b.n	28044 <hard_fault+0xc0>
   28022:	4b30      	ldr	r3, [pc, #192]	; (280e4 <hard_fault+0x160>)
   28024:	4a30      	ldr	r2, [pc, #192]	; (280e8 <hard_fault+0x164>)
   28026:	1a9b      	subs	r3, r3, r2
   28028:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   2802a:	f04f 0000 	mov.w	r0, #0
   2802e:	2201      	movs	r2, #1
   28030:	f362 0002 	bfi	r0, r2, #0, #3
   28034:	f36f 00c5 	bfc	r0, #3, #3
   28038:	f363 108f 	bfi	r0, r3, #6, #10
   2803c:	4930      	ldr	r1, [pc, #192]	; (28100 <hard_fault+0x17c>)
   2803e:	f014 f803 	bl	3c048 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   28042:	2500      	movs	r5, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   28044:	4628      	mov	r0, r5
   28046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28048:	4b26      	ldr	r3, [pc, #152]	; (280e4 <hard_fault+0x160>)
   2804a:	4a27      	ldr	r2, [pc, #156]	; (280e8 <hard_fault+0x164>)
   2804c:	1a9b      	subs	r3, r3, r2
   2804e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   28050:	f04f 0000 	mov.w	r0, #0
   28054:	2201      	movs	r2, #1
   28056:	f362 0002 	bfi	r0, r2, #0, #3
   2805a:	f36f 00c5 	bfc	r0, #3, #3
   2805e:	f363 108f 	bfi	r0, r3, #6, #10
   28062:	4928      	ldr	r1, [pc, #160]	; (28104 <hard_fault+0x180>)
   28064:	f013 fff0 	bl	3c048 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   28068:	463d      	mov	r5, r7
   2806a:	e7eb      	b.n	28044 <hard_fault+0xc0>
   2806c:	4b1d      	ldr	r3, [pc, #116]	; (280e4 <hard_fault+0x160>)
   2806e:	4a1e      	ldr	r2, [pc, #120]	; (280e8 <hard_fault+0x164>)
   28070:	1a9b      	subs	r3, r3, r2
   28072:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   28074:	f04f 0000 	mov.w	r0, #0
   28078:	2201      	movs	r2, #1
   2807a:	f362 0002 	bfi	r0, r2, #0, #3
   2807e:	f36f 00c5 	bfc	r0, #3, #3
   28082:	f363 108f 	bfi	r0, r3, #6, #10
   28086:	6832      	ldr	r2, [r6, #0]
   28088:	491f      	ldr	r1, [pc, #124]	; (28108 <hard_fault+0x184>)
   2808a:	f013 ffdd 	bl	3c048 <log_string_sync>
			reason = esf->basic.r0;
   2808e:	6835      	ldr	r5, [r6, #0]
   28090:	e7d8      	b.n	28044 <hard_fault+0xc0>
			reason = mem_manage_fault(esf, 1, recoverable);
   28092:	4622      	mov	r2, r4
   28094:	2101      	movs	r1, #1
   28096:	4630      	mov	r0, r6
   28098:	f7ff fcf0 	bl	27a7c <mem_manage_fault>
   2809c:	4605      	mov	r5, r0
   2809e:	e7d1      	b.n	28044 <hard_fault+0xc0>
			reason = bus_fault(esf, 1, recoverable);
   280a0:	4622      	mov	r2, r4
   280a2:	2101      	movs	r1, #1
   280a4:	4630      	mov	r0, r6
   280a6:	f7ff fdc9 	bl	27c3c <bus_fault>
   280aa:	4605      	mov	r5, r0
   280ac:	e7ca      	b.n	28044 <hard_fault+0xc0>
			__ASSERT(0,
   280ae:	4c17      	ldr	r4, [pc, #92]	; (2810c <hard_fault+0x188>)
   280b0:	f240 22c3 	movw	r2, #707	; 0x2c3
   280b4:	4621      	mov	r1, r4
   280b6:	4816      	ldr	r0, [pc, #88]	; (28110 <hard_fault+0x18c>)
   280b8:	f013 fd3e 	bl	3bb38 <printk>
   280bc:	f240 21c3 	movw	r1, #707	; 0x2c3
   280c0:	4620      	mov	r0, r4
   280c2:	f013 ff8d 	bl	3bfe0 <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   280c6:	463d      	mov	r5, r7
   280c8:	e7bc      	b.n	28044 <hard_fault+0xc0>
		__ASSERT(0,
   280ca:	4c10      	ldr	r4, [pc, #64]	; (2810c <hard_fault+0x188>)
   280cc:	f240 22c7 	movw	r2, #711	; 0x2c7
   280d0:	4621      	mov	r1, r4
   280d2:	480f      	ldr	r0, [pc, #60]	; (28110 <hard_fault+0x18c>)
   280d4:	f013 fd30 	bl	3bb38 <printk>
   280d8:	f240 21c7 	movw	r1, #711	; 0x2c7
   280dc:	4620      	mov	r0, r4
   280de:	f013 ff7f 	bl	3bfe0 <assert_post_action>
	return reason;
   280e2:	e7af      	b.n	28044 <hard_fault+0xc0>
   280e4:	000412e8 	.word	0x000412e8
   280e8:	00041200 	.word	0x00041200
   280ec:	00042a90 	.word	0x00042a90
   280f0:	e000ed00 	.word	0xe000ed00
   280f4:	00042adc 	.word	0x00042adc
   280f8:	e000ed29 	.word	0xe000ed29
   280fc:	e000ed2a 	.word	0xe000ed2a
   28100:	00042aa8 	.word	0x00042aa8
   28104:	00042acc 	.word	0x00042acc
   28108:	00042afc 	.word	0x00042afc
   2810c:	000428bc 	.word	0x000428bc
   28110:	00041c84 	.word	0x00041c84

00028114 <debug_monitor>:
{
   28114:	b508      	push	{r3, lr}
	*recoverable = false;
   28116:	2200      	movs	r2, #0
   28118:	700a      	strb	r2, [r1, #0]
   2811a:	4b08      	ldr	r3, [pc, #32]	; (2813c <debug_monitor+0x28>)
   2811c:	4908      	ldr	r1, [pc, #32]	; (28140 <debug_monitor+0x2c>)
   2811e:	1a5b      	subs	r3, r3, r1
   28120:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO(
   28122:	f04f 0000 	mov.w	r0, #0
   28126:	2101      	movs	r1, #1
   28128:	f361 0002 	bfi	r0, r1, #0, #3
   2812c:	f362 00c5 	bfi	r0, r2, #3, #3
   28130:	f363 108f 	bfi	r0, r3, #6, #10
   28134:	4903      	ldr	r1, [pc, #12]	; (28144 <debug_monitor+0x30>)
   28136:	f013 ff87 	bl	3c048 <log_string_sync>
}
   2813a:	bd08      	pop	{r3, pc}
   2813c:	000412e8 	.word	0x000412e8
   28140:	00041200 	.word	0x00041200
   28144:	00042b18 	.word	0x00042b18

00028148 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   28148:	b508      	push	{r3, lr}
   2814a:	4a0c      	ldr	r2, [pc, #48]	; (2817c <reserved_exception+0x34>)
   2814c:	4b0c      	ldr	r3, [pc, #48]	; (28180 <reserved_exception+0x38>)
   2814e:	1ad2      	subs	r2, r2, r3
   28150:	08d2      	lsrs	r2, r2, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   28152:	f04f 0000 	mov.w	r0, #0
   28156:	2301      	movs	r3, #1
   28158:	f363 0002 	bfi	r0, r3, #0, #3
   2815c:	f36f 00c5 	bfc	r0, #3, #3
   28160:	f362 108f 	bfi	r0, r2, #6, #10
   28164:	290f      	cmp	r1, #15
   28166:	dc06      	bgt.n	28176 <reserved_exception+0x2e>
   28168:	4a06      	ldr	r2, [pc, #24]	; (28184 <reserved_exception+0x3c>)
   2816a:	f1a1 0310 	sub.w	r3, r1, #16
   2816e:	4906      	ldr	r1, [pc, #24]	; (28188 <reserved_exception+0x40>)
   28170:	f013 ff6a 	bl	3c048 <log_string_sync>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   28174:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   28176:	4a05      	ldr	r2, [pc, #20]	; (2818c <reserved_exception+0x44>)
   28178:	e7f7      	b.n	2816a <reserved_exception+0x22>
   2817a:	bf00      	nop
   2817c:	000412e8 	.word	0x000412e8
   28180:	00041200 	.word	0x00041200
   28184:	00042b58 	.word	0x00042b58
   28188:	00042b70 	.word	0x00042b70
   2818c:	00042b3c 	.word	0x00042b3c

00028190 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   28190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28194:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   28196:	4b3f      	ldr	r3, [pc, #252]	; (28294 <z_arm_fault+0x104>)
   28198:	685e      	ldr	r6, [r3, #4]
   2819a:	f3c6 0608 	ubfx	r6, r6, #0, #9
   2819e:	2300      	movs	r3, #0
   281a0:	f383 8811 	msr	BASEPRI, r3
   281a4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   281a8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   281ac:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   281b0:	d12c      	bne.n	2820c <z_arm_fault+0x7c>
   281b2:	4680      	mov	r8, r0
   281b4:	4689      	mov	r9, r1
   281b6:	4615      	mov	r5, r2
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   281b8:	f012 0f01 	tst.w	r2, #1
   281bc:	d129      	bne.n	28212 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   281be:	f012 0f40 	tst.w	r2, #64	; 0x40
   281c2:	d107      	bne.n	281d4 <z_arm_fault+0x44>
	z_arch_esf_t *ptr_esf = NULL;
   281c4:	2400      	movs	r4, #0
	bool alternative_state_exc = false;
   281c6:	4627      	mov	r7, r4
	if (!alternative_state_exc) {
   281c8:	bb37      	cbnz	r7, 28218 <z_arm_fault+0x88>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   281ca:	f015 0f08 	tst.w	r5, #8
   281ce:	d01a      	beq.n	28206 <z_arm_fault+0x76>
			ptr_esf =  (z_arch_esf_t *)psp;
   281d0:	464c      	mov	r4, r9
   281d2:	e022      	b.n	2821a <z_arm_fault+0x8a>
   281d4:	4b30      	ldr	r3, [pc, #192]	; (28298 <z_arm_fault+0x108>)
   281d6:	4a31      	ldr	r2, [pc, #196]	; (2829c <z_arm_fault+0x10c>)
   281d8:	1a9b      	subs	r3, r3, r2
   281da:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("Exception occurred in Secure State");
   281dc:	f04f 0000 	mov.w	r0, #0
   281e0:	2201      	movs	r2, #1
   281e2:	f362 0002 	bfi	r0, r2, #0, #3
   281e6:	f36f 00c5 	bfc	r0, #3, #3
   281ea:	f363 108f 	bfi	r0, r3, #6, #10
   281ee:	492c      	ldr	r1, [pc, #176]	; (282a0 <z_arm_fault+0x110>)
   281f0:	f013 ff2a 	bl	3c048 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   281f4:	f015 0f04 	tst.w	r5, #4
   281f8:	d002      	beq.n	28200 <z_arm_fault+0x70>
			ptr_esf = (z_arch_esf_t *)psp;
   281fa:	464c      	mov	r4, r9
		alternative_state_exc = true;
   281fc:	2701      	movs	r7, #1
   281fe:	e7e3      	b.n	281c8 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   28200:	4644      	mov	r4, r8
		alternative_state_exc = true;
   28202:	2701      	movs	r7, #1
   28204:	e7e0      	b.n	281c8 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   28206:	4644      	mov	r4, r8
			*nested_exc = true;
   28208:	2701      	movs	r7, #1
   2820a:	e006      	b.n	2821a <z_arm_fault+0x8a>
	*nested_exc = false;
   2820c:	2700      	movs	r7, #0
		return NULL;
   2820e:	463c      	mov	r4, r7
   28210:	e003      	b.n	2821a <z_arm_fault+0x8a>
	*nested_exc = false;
   28212:	2700      	movs	r7, #0
		return NULL;
   28214:	463c      	mov	r4, r7
   28216:	e000      	b.n	2821a <z_arm_fault+0x8a>
	*nested_exc = false;
   28218:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   2821a:	b164      	cbz	r4, 28236 <z_arm_fault+0xa6>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   2821c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   28220:	4631      	mov	r1, r6
   28222:	4620      	mov	r0, r4
   28224:	f014 faa6 	bl	3c774 <fault_handle>
   28228:	4606      	mov	r6, r0
	if (recoverable) {
   2822a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2822e:	b17b      	cbz	r3, 28250 <z_arm_fault+0xc0>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   28230:	b00b      	add	sp, #44	; 0x2c
   28232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(esf != NULL,
   28236:	4d1b      	ldr	r5, [pc, #108]	; (282a4 <z_arm_fault+0x114>)
   28238:	f240 32f2 	movw	r2, #1010	; 0x3f2
   2823c:	4629      	mov	r1, r5
   2823e:	481a      	ldr	r0, [pc, #104]	; (282a8 <z_arm_fault+0x118>)
   28240:	f013 fc7a 	bl	3bb38 <printk>
   28244:	f240 31f2 	movw	r1, #1010	; 0x3f2
   28248:	4628      	mov	r0, r5
   2824a:	f013 fec9 	bl	3bfe0 <assert_post_action>
   2824e:	e7e5      	b.n	2821c <z_arm_fault+0x8c>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   28250:	ad01      	add	r5, sp, #4
   28252:	6820      	ldr	r0, [r4, #0]
   28254:	6861      	ldr	r1, [r4, #4]
   28256:	68a2      	ldr	r2, [r4, #8]
   28258:	68e3      	ldr	r3, [r4, #12]
   2825a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2825c:	6920      	ldr	r0, [r4, #16]
   2825e:	6961      	ldr	r1, [r4, #20]
   28260:	69a2      	ldr	r2, [r4, #24]
   28262:	69e3      	ldr	r3, [r4, #28]
   28264:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
   28266:	b14f      	cbz	r7, 2827c <z_arm_fault+0xec>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   28268:	9b08      	ldr	r3, [sp, #32]
   2826a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   2826e:	b95a      	cbnz	r2, 28288 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   28270:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   28274:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   28278:	9308      	str	r3, [sp, #32]
   2827a:	e005      	b.n	28288 <z_arm_fault+0xf8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2827c:	9b08      	ldr	r3, [sp, #32]
   2827e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   28282:	f023 0301 	bic.w	r3, r3, #1
   28286:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   28288:	a901      	add	r1, sp, #4
   2828a:	4630      	mov	r0, r6
   2828c:	f014 fa4e 	bl	3c72c <z_arm_fatal_error>
   28290:	e7ce      	b.n	28230 <z_arm_fault+0xa0>
   28292:	bf00      	nop
   28294:	e000ed00 	.word	0xe000ed00
   28298:	000412e8 	.word	0x000412e8
   2829c:	00041200 	.word	0x00041200
   282a0:	00042b84 	.word	0x00042b84
   282a4:	000428bc 	.word	0x000428bc
   282a8:	00041c84 	.word	0x00041c84

000282ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   282ac:	4b04      	ldr	r3, [pc, #16]	; (282c0 <z_arm_fault_init+0x14>)
   282ae:	695a      	ldr	r2, [r3, #20]
   282b0:	f042 0210 	orr.w	r2, r2, #16
   282b4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   282b6:	695a      	ldr	r2, [r3, #20]
   282b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   282bc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   282be:	4770      	bx	lr
   282c0:	e000ed00 	.word	0xe000ed00

000282c4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   282c4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   282c8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   282cc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   282ce:	4672      	mov	r2, lr
	bl z_arm_fault
   282d0:	f7ff ff5e 	bl	28190 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   282d4:	bd01      	pop	{r0, pc}
   282d6:	bf00      	nop

000282d8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   282d8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   282da:	e006      	b.n	282ea <z_arm_interrupt_init+0x12>
   282dc:	f002 010f 	and.w	r1, r2, #15
   282e0:	4b09      	ldr	r3, [pc, #36]	; (28308 <z_arm_interrupt_init+0x30>)
   282e2:	440b      	add	r3, r1
   282e4:	2120      	movs	r1, #32
   282e6:	7619      	strb	r1, [r3, #24]
   282e8:	3201      	adds	r2, #1
   282ea:	2a40      	cmp	r2, #64	; 0x40
   282ec:	dc0a      	bgt.n	28304 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   282ee:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   282f0:	2b00      	cmp	r3, #0
   282f2:	dbf3      	blt.n	282dc <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   282f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   282f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   282fc:	2120      	movs	r1, #32
   282fe:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   28302:	e7f1      	b.n	282e8 <z_arm_interrupt_init+0x10>
	}
}
   28304:	4770      	bx	lr
   28306:	bf00      	nop
   28308:	e000ecfc 	.word	0xe000ecfc

0002830c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   2830c:	2000      	movs	r0, #0
    msr CONTROL, r0
   2830e:	f380 8814 	msr	CONTROL, r0
    isb
   28312:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   28316:	2000      	movs	r0, #0
    msr MSPLIM, r0
   28318:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   2831c:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   28320:	f018 fda8 	bl	40e74 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   28324:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   28326:	490e      	ldr	r1, [pc, #56]	; (28360 <__start+0x54>)
    str r0, [r1]
   28328:	6008      	str	r0, [r1, #0]
    dsb
   2832a:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2832e:	480d      	ldr	r0, [pc, #52]	; (28364 <__start+0x58>)
    msr msp, r0
   28330:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   28334:	f000 f83c 	bl	283b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   28338:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2833a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2833e:	480a      	ldr	r0, [pc, #40]	; (28368 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   28340:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   28344:	1840      	adds	r0, r0, r1
    msr PSP, r0
   28346:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   2834a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2834e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   28350:	4308      	orrs	r0, r1
    msr CONTROL, r0
   28352:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   28356:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   2835a:	f7ff fabd 	bl	278d8 <z_arm_prep_c>
   2835e:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   28360:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   28364:	200138c8 	.word	0x200138c8
    ldr r0, =z_interrupt_stacks
   28368:	20013a08 	.word	0x20013a08

0002836c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2836c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   28370:	4905      	ldr	r1, [pc, #20]	; (28388 <sys_arch_reboot+0x1c>)
   28372:	68ca      	ldr	r2, [r1, #12]
   28374:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   28378:	4b04      	ldr	r3, [pc, #16]	; (2838c <sys_arch_reboot+0x20>)
   2837a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2837c:	60cb      	str	r3, [r1, #12]
   2837e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   28382:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   28384:	e7fd      	b.n	28382 <sys_arch_reboot+0x16>
   28386:	bf00      	nop
   28388:	e000ed00 	.word	0xe000ed00
   2838c:	05fa0004 	.word	0x05fa0004

00028390 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   28390:	4b06      	ldr	r3, [pc, #24]	; (283ac <z_arm_clear_arm_mpu_config+0x1c>)
   28392:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   28394:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   28398:	2300      	movs	r3, #0
   2839a:	4283      	cmp	r3, r0
   2839c:	da05      	bge.n	283aa <z_arm_clear_arm_mpu_config+0x1a>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
   2839e:	4a03      	ldr	r2, [pc, #12]	; (283ac <z_arm_clear_arm_mpu_config+0x1c>)
   283a0:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   283a2:	2100      	movs	r1, #0
   283a4:	6111      	str	r1, [r2, #16]
   283a6:	3301      	adds	r3, #1
   283a8:	e7f7      	b.n	2839a <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   283aa:	4770      	bx	lr
   283ac:	e000ed90 	.word	0xe000ed90

000283b0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   283b0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   283b2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   283b4:	2400      	movs	r4, #0
   283b6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   283ba:	f7ff ffe9 	bl	28390 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   283be:	4623      	mov	r3, r4
   283c0:	2b0f      	cmp	r3, #15
   283c2:	d809      	bhi.n	283d8 <z_arm_init_arch_hw_at_boot+0x28>
		NVIC->ICER[i] = 0xFFFFFFFF;
   283c4:	f103 0120 	add.w	r1, r3, #32
   283c8:	4a0d      	ldr	r2, [pc, #52]	; (28400 <z_arm_init_arch_hw_at_boot+0x50>)
   283ca:	f04f 30ff 	mov.w	r0, #4294967295
   283ce:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   283d2:	3301      	adds	r3, #1
   283d4:	b2db      	uxtb	r3, r3
   283d6:	e7f3      	b.n	283c0 <z_arm_init_arch_hw_at_boot+0x10>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   283d8:	2300      	movs	r3, #0
   283da:	2b0f      	cmp	r3, #15
   283dc:	d809      	bhi.n	283f2 <z_arm_init_arch_hw_at_boot+0x42>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   283de:	f103 0160 	add.w	r1, r3, #96	; 0x60
   283e2:	4a07      	ldr	r2, [pc, #28]	; (28400 <z_arm_init_arch_hw_at_boot+0x50>)
   283e4:	f04f 30ff 	mov.w	r0, #4294967295
   283e8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   283ec:	3301      	adds	r3, #1
   283ee:	b2db      	uxtb	r3, r3
   283f0:	e7f3      	b.n	283da <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   283f2:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   283f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   283f8:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   283fc:	bd10      	pop	{r4, pc}
   283fe:	bf00      	nop
   28400:	e000e100 	.word	0xe000e100

00028404 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   28404:	b508      	push	{r3, lr}
	if (_current == thread) {
   28406:	4b08      	ldr	r3, [pc, #32]	; (28428 <z_impl_k_thread_abort+0x24>)
   28408:	689b      	ldr	r3, [r3, #8]
   2840a:	4283      	cmp	r3, r0
   2840c:	d002      	beq.n	28414 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   2840e:	f00f fec5 	bl	3819c <z_thread_abort>
}
   28412:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28414:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   28418:	2b00      	cmp	r3, #0
   2841a:	d0f8      	beq.n	2840e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2841c:	4a03      	ldr	r2, [pc, #12]	; (2842c <z_impl_k_thread_abort+0x28>)
   2841e:	6853      	ldr	r3, [r2, #4]
   28420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   28424:	6053      	str	r3, [r2, #4]
   28426:	e7f2      	b.n	2840e <z_impl_k_thread_abort+0xa>
   28428:	20010d7c 	.word	0x20010d7c
   2842c:	e000ed00 	.word	0xe000ed00

00028430 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   28430:	b510      	push	{r4, lr}
   28432:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   28434:	4c09      	ldr	r4, [pc, #36]	; (2845c <z_arm_configure_static_mpu_regions+0x2c>)
   28436:	4623      	mov	r3, r4
   28438:	4a09      	ldr	r2, [pc, #36]	; (28460 <z_arm_configure_static_mpu_regions+0x30>)
   2843a:	2101      	movs	r1, #1
   2843c:	4809      	ldr	r0, [pc, #36]	; (28464 <z_arm_configure_static_mpu_regions+0x34>)
   2843e:	f000 f9b3 	bl	287a8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   28442:	2300      	movs	r3, #0
   28444:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   28446:	4b08      	ldr	r3, [pc, #32]	; (28468 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   28448:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   2844a:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   2844c:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2844e:	2101      	movs	r1, #1
   28450:	a801      	add	r0, sp, #4
   28452:	f000 f9c1 	bl	287d8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   28456:	b004      	add	sp, #16
   28458:	bd10      	pop	{r4, pc}
   2845a:	bf00      	nop
   2845c:	20040000 	.word	0x20040000
   28460:	2000c500 	.word	0x2000c500
   28464:	00042bac 	.word	0x00042bac
   28468:	2000cb28 	.word	0x2000cb28

0002846c <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
   2846c:	4b01      	ldr	r3, [pc, #4]	; (28474 <mpu_init+0x8>)
   2846e:	4a02      	ldr	r2, [pc, #8]	; (28478 <mpu_init+0xc>)
   28470:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
   28472:	4770      	bx	lr
   28474:	e000ed90 	.word	0xe000ed90
   28478:	0044ffaa 	.word	0x0044ffaa

0002847c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   2847c:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2847e:	680b      	ldr	r3, [r1, #0]
   28480:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   28484:	7a0c      	ldrb	r4, [r1, #8]
   28486:	f004 031f 	and.w	r3, r4, #31
   2848a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   2848c:	68cb      	ldr	r3, [r1, #12]
   2848e:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   28492:	0964      	lsrs	r4, r4, #5
   28494:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   28498:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   2849c:	4902      	ldr	r1, [pc, #8]	; (284a8 <region_init+0x2c>)
   2849e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   284a0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   284a2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   284a4:	bc10      	pop	{r4}
   284a6:	4770      	bx	lr
   284a8:	e000ed90 	.word	0xe000ed90

000284ac <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   284ac:	b510      	push	{r4, lr}
   284ae:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   284b0:	280f      	cmp	r0, #15
   284b2:	d803      	bhi.n	284bc <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   284b4:	f7ff ffe2 	bl	2847c <region_init>

	return index;
   284b8:	4620      	mov	r0, r4
}
   284ba:	bd10      	pop	{r4, pc}
   284bc:	4b09      	ldr	r3, [pc, #36]	; (284e4 <region_allocate_and_init+0x38>)
   284be:	4a0a      	ldr	r2, [pc, #40]	; (284e8 <region_allocate_and_init+0x3c>)
   284c0:	1a9b      	subs	r3, r3, r2
   284c2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   284c4:	f04f 0000 	mov.w	r0, #0
   284c8:	2201      	movs	r2, #1
   284ca:	f362 0002 	bfi	r0, r2, #0, #3
   284ce:	f36f 00c5 	bfc	r0, #3, #3
   284d2:	f363 108f 	bfi	r0, r3, #6, #10
   284d6:	4622      	mov	r2, r4
   284d8:	4904      	ldr	r1, [pc, #16]	; (284ec <region_allocate_and_init+0x40>)
   284da:	f013 fdb5 	bl	3c048 <log_string_sync>
		return -EINVAL;
   284de:	f06f 0015 	mvn.w	r0, #21
   284e2:	e7ea      	b.n	284ba <region_allocate_and_init+0xe>
   284e4:	000412d0 	.word	0x000412d0
   284e8:	00041200 	.word	0x00041200
   284ec:	00042bb8 	.word	0x00042bb8

000284f0 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   284f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284f4:	b087      	sub	sp, #28
   284f6:	4681      	mov	r9, r0
   284f8:	9100      	str	r1, [sp, #0]
   284fa:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   284fc:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   284fe:	2700      	movs	r7, #0
   28500:	e05b      	b.n	285ba <mpu_configure_regions_and_partition+0xca>
   28502:	4b6b      	ldr	r3, [pc, #428]	; (286b0 <mpu_configure_regions_and_partition+0x1c0>)
   28504:	4a6b      	ldr	r2, [pc, #428]	; (286b4 <mpu_configure_regions_and_partition+0x1c4>)
   28506:	1a9b      	subs	r3, r3, r2
   28508:	08db      	lsrs	r3, r3, #3
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   2850a:	2201      	movs	r2, #1
   2850c:	f362 0002 	bfi	r0, r2, #0, #3
   28510:	f36f 00c5 	bfc	r0, #3, #3
   28514:	f363 108f 	bfi	r0, r3, #6, #10
   28518:	463a      	mov	r2, r7
   2851a:	4967      	ldr	r1, [pc, #412]	; (286b8 <mpu_configure_regions_and_partition+0x1c8>)
   2851c:	f013 fd94 	bl	3c048 <log_string_sync>
			return -EINVAL;
   28520:	f06f 0415 	mvn.w	r4, #21
   28524:	e015      	b.n	28552 <mpu_configure_regions_and_partition+0x62>
	return -EINVAL;
   28526:	f06f 0615 	mvn.w	r6, #21
   2852a:	e068      	b.n	285fe <mpu_configure_regions_and_partition+0x10e>
   2852c:	4b60      	ldr	r3, [pc, #384]	; (286b0 <mpu_configure_regions_and_partition+0x1c0>)
   2852e:	4a61      	ldr	r2, [pc, #388]	; (286b4 <mpu_configure_regions_and_partition+0x1c4>)
   28530:	1a9b      	subs	r3, r3, r2
   28532:	08db      	lsrs	r3, r3, #3
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   28534:	f04f 0000 	mov.w	r0, #0
   28538:	2201      	movs	r2, #1
   2853a:	f362 0002 	bfi	r0, r2, #0, #3
   2853e:	f36f 00c5 	bfc	r0, #3, #3
   28542:	f363 108f 	bfi	r0, r3, #6, #10
   28546:	4632      	mov	r2, r6
   28548:	495c      	ldr	r1, [pc, #368]	; (286bc <mpu_configure_regions_and_partition+0x1cc>)
   2854a:	f013 fd7d 	bl	3c048 <log_string_sync>
				u_reg_index);
			return -EINVAL;
   2854e:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   28552:	4620      	mov	r0, r4
   28554:	b007      	add	sp, #28
   28556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i].start == u_reg_base) &&
   2855a:	45d8      	cmp	r8, fp
   2855c:	d167      	bne.n	2862e <mpu_configure_regions_and_partition+0x13e>
			mpu_configure_region(u_reg_index, &regions[i]);
   2855e:	4629      	mov	r1, r5
   28560:	b2f0      	uxtb	r0, r6
   28562:	f014 f94a 	bl	3c7fa <mpu_configure_region>
   28566:	e027      	b.n	285b8 <mpu_configure_regions_and_partition+0xc8>
	MPU->RNR = index;
   28568:	4b55      	ldr	r3, [pc, #340]	; (286c0 <mpu_configure_regions_and_partition+0x1d0>)
   2856a:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2856c:	68d9      	ldr	r1, [r3, #12]
   2856e:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
   28572:	f022 021f 	bic.w	r2, r2, #31
   28576:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   28578:	60da      	str	r2, [r3, #12]
				mpu_configure_region(reg_index, &regions[i]);
   2857a:	4629      	mov	r1, r5
   2857c:	b2e0      	uxtb	r0, r4
   2857e:	f014 f93c 	bl	3c7fa <mpu_configure_region>
   28582:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   28584:	f110 0f16 	cmn.w	r0, #22
   28588:	d0e3      	beq.n	28552 <mpu_configure_regions_and_partition+0x62>
			reg_index++;
   2858a:	3401      	adds	r4, #1
   2858c:	e014      	b.n	285b8 <mpu_configure_regions_and_partition+0xc8>
				regions[i].start - 1);
   2858e:	3b01      	subs	r3, #1
	MPU->RNR = index;
   28590:	494b      	ldr	r1, [pc, #300]	; (286c0 <mpu_configure_regions_and_partition+0x1d0>)
   28592:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   28594:	690a      	ldr	r2, [r1, #16]
   28596:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   2859a:	f023 031f 	bic.w	r3, r3, #31
   2859e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   285a0:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
   285a2:	4629      	mov	r1, r5
   285a4:	b2e0      	uxtb	r0, r4
   285a6:	f014 f928 	bl	3c7fa <mpu_configure_region>
   285aa:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   285ac:	f110 0f16 	cmn.w	r0, #22
   285b0:	d0cf      	beq.n	28552 <mpu_configure_regions_and_partition+0x62>
			reg_index++;
   285b2:	3401      	adds	r4, #1
   285b4:	e000      	b.n	285b8 <mpu_configure_regions_and_partition+0xc8>
			reg_index++;
   285b6:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   285b8:	3701      	adds	r7, #1
   285ba:	9b00      	ldr	r3, [sp, #0]
   285bc:	429f      	cmp	r7, r3
   285be:	dac8      	bge.n	28552 <mpu_configure_regions_and_partition+0x62>
		if (regions[i].size == 0U) {
   285c0:	eb07 0547 	add.w	r5, r7, r7, lsl #1
   285c4:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   285c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   285cc:	f8d5 8004 	ldr.w	r8, [r5, #4]
   285d0:	f1b8 0f00 	cmp.w	r8, #0
   285d4:	d0f0      	beq.n	285b8 <mpu_configure_regions_and_partition+0xc8>
		if (do_sanity_check &&
   285d6:	9b01      	ldr	r3, [sp, #4]
   285d8:	b123      	cbz	r3, 285e4 <mpu_configure_regions_and_partition+0xf4>
			(!mpu_partition_is_valid(&regions[i]))) {
   285da:	4628      	mov	r0, r5
   285dc:	f014 f8fb 	bl	3c7d6 <mpu_partition_is_valid>
		if (do_sanity_check &&
   285e0:	2800      	cmp	r0, #0
   285e2:	d08e      	beq.n	28502 <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i].start, regions[i].size);
   285e4:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   285e8:	4658      	mov	r0, fp
   285ea:	f014 f8ea 	bl	3c7c2 <arm_cmse_mpu_region_get>
   285ee:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   285f0:	eb08 000b 	add.w	r0, r8, fp
   285f4:	3801      	subs	r0, #1
   285f6:	f014 f8e4 	bl	3c7c2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   285fa:	4286      	cmp	r6, r0
   285fc:	d193      	bne.n	28526 <mpu_configure_regions_and_partition+0x36>
		if ((u_reg_index == -EINVAL) ||
   285fe:	f116 0f16 	cmn.w	r6, #22
   28602:	d093      	beq.n	2852c <mpu_configure_regions_and_partition+0x3c>
			(u_reg_index > (reg_index - 1))) {
   28604:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   28606:	42b3      	cmp	r3, r6
   28608:	db90      	blt.n	2852c <mpu_configure_regions_and_partition+0x3c>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
   2860a:	4630      	mov	r0, r6
	MPU->RNR = index;
   2860c:	4b2c      	ldr	r3, [pc, #176]	; (286c0 <mpu_configure_regions_and_partition+0x1d0>)
   2860e:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   28610:	68d9      	ldr	r1, [r3, #12]
   28612:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
   28616:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   28618:	691b      	ldr	r3, [r3, #16]
   2861a:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   2861e:	f859 300a 	ldr.w	r3, [r9, sl]
   28622:	686a      	ldr	r2, [r5, #4]
   28624:	441a      	add	r2, r3
   28626:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   2862a:	4299      	cmp	r1, r3
   2862c:	d095      	beq.n	2855a <mpu_configure_regions_and_partition+0x6a>
		} else if (regions[i].start == u_reg_base) {
   2862e:	4299      	cmp	r1, r3
   28630:	d09a      	beq.n	28568 <mpu_configure_regions_and_partition+0x78>
		} else if (reg_last == u_reg_last) {
   28632:	45d8      	cmp	r8, fp
   28634:	d0ab      	beq.n	2858e <mpu_configure_regions_and_partition+0x9e>
				regions[i].start - 1);
   28636:	3b01      	subs	r3, #1
	MPU->RNR = index;
   28638:	4921      	ldr	r1, [pc, #132]	; (286c0 <mpu_configure_regions_and_partition+0x1d0>)
   2863a:	4606      	mov	r6, r0
   2863c:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   2863e:	690a      	ldr	r2, [r1, #16]
   28640:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   28644:	f023 031f 	bic.w	r3, r3, #31
   28648:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   2864a:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
   2864c:	4629      	mov	r1, r5
   2864e:	b2e0      	uxtb	r0, r4
   28650:	f014 f8d3 	bl	3c7fa <mpu_configure_region>
   28654:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   28656:	f110 0f16 	cmn.w	r0, #22
   2865a:	f43f af7a 	beq.w	28552 <mpu_configure_regions_and_partition+0x62>
			reg_index++;
   2865e:	3001      	adds	r0, #1
	MPU->RNR = index;
   28660:	4b17      	ldr	r3, [pc, #92]	; (286c0 <mpu_configure_regions_and_partition+0x1d0>)
   28662:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
   28664:	68d9      	ldr	r1, [r3, #12]
   28666:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2866a:	f361 0204 	bfi	r2, r1, #0, #5
   2866e:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   28672:	691b      	ldr	r3, [r3, #16]
   28674:	f3c3 0342 	ubfx	r3, r3, #1, #3
   28678:	b2d2      	uxtb	r2, r2
   2867a:	f363 1247 	bfi	r2, r3, #5, #3
   2867e:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
   28682:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   28686:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   28688:	4413      	add	r3, r2
   2868a:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   2868c:	f023 031f 	bic.w	r3, r3, #31
   28690:	eba8 080b 	sub.w	r8, r8, fp
   28694:	4443      	add	r3, r8
   28696:	3b01      	subs	r3, #1
   28698:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   2869c:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
   2869e:	a902      	add	r1, sp, #8
   286a0:	b2c0      	uxtb	r0, r0
   286a2:	f7ff ff03 	bl	284ac <region_allocate_and_init>
   286a6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   286a8:	f110 0f16 	cmn.w	r0, #22
   286ac:	d183      	bne.n	285b6 <mpu_configure_regions_and_partition+0xc6>
   286ae:	e750      	b.n	28552 <mpu_configure_regions_and_partition+0x62>
   286b0:	000412d0 	.word	0x000412d0
   286b4:	00041200 	.word	0x00041200
   286b8:	00042be0 	.word	0x00042be0
   286bc:	00042c04 	.word	0x00042c04
   286c0:	e000ed90 	.word	0xe000ed90

000286c4 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   286c4:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   286c6:	4c03      	ldr	r4, [pc, #12]	; (286d4 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   286c8:	2301      	movs	r3, #1
   286ca:	7822      	ldrb	r2, [r4, #0]
   286cc:	f7ff ff10 	bl	284f0 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   286d0:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   286d2:	bd10      	pop	{r4, pc}
   286d4:	20010dfa 	.word	0x20010dfa

000286d8 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   286d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   286dc:	4607      	mov	r7, r0
   286de:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   286e0:	2400      	movs	r4, #0
   286e2:	e003      	b.n	286ec <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
   286e4:	f06f 0515 	mvn.w	r5, #21
   286e8:	e017      	b.n	2871a <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
   286ea:	3401      	adds	r4, #1
   286ec:	45a0      	cmp	r8, r4
   286ee:	dd3c      	ble.n	2876a <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
   286f0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   286f4:	009a      	lsls	r2, r3, #2
   286f6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   286fa:	685e      	ldr	r6, [r3, #4]
   286fc:	2e00      	cmp	r6, #0
   286fe:	d0f4      	beq.n	286ea <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   28700:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   28704:	4648      	mov	r0, r9
   28706:	f014 f85c 	bl	3c7c2 <arm_cmse_mpu_region_get>
   2870a:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2870c:	eb06 0009 	add.w	r0, r6, r9
   28710:	3801      	subs	r0, #1
   28712:	f014 f856 	bl	3c7c2 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   28716:	4285      	cmp	r5, r0
   28718:	d1e4      	bne.n	286e4 <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
   2871a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2871e:	4a16      	ldr	r2, [pc, #88]	; (28778 <mpu_mark_areas_for_dynamic_regions+0xa0>)
   28720:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   28724:	f115 0f16 	cmn.w	r5, #22
   28728:	d020      	beq.n	2876c <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   2872a:	4b14      	ldr	r3, [pc, #80]	; (2877c <mpu_mark_areas_for_dynamic_regions+0xa4>)
   2872c:	781b      	ldrb	r3, [r3, #0]
   2872e:	42ab      	cmp	r3, r5
   28730:	dd1f      	ble.n	28772 <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   28732:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28736:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
   2873a:	4a11      	ldr	r2, [pc, #68]	; (28780 <mpu_mark_areas_for_dynamic_regions+0xa8>)
   2873c:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
   2873e:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
   28740:	68d5      	ldr	r5, [r2, #12]
   28742:	7b18      	ldrb	r0, [r3, #12]
   28744:	f365 0004 	bfi	r0, r5, #0, #5
   28748:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   2874a:	6910      	ldr	r0, [r2, #16]
   2874c:	f3c0 0042 	ubfx	r0, r0, #1, #3
   28750:	7b1d      	ldrb	r5, [r3, #12]
   28752:	f360 1547 	bfi	r5, r0, #5, #3
   28756:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   28758:	68d1      	ldr	r1, [r2, #12]
   2875a:	f021 011f 	bic.w	r1, r1, #31
   2875e:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   28760:	6912      	ldr	r2, [r2, #16]
   28762:	f022 021f 	bic.w	r2, r2, #31
   28766:	611a      	str	r2, [r3, #16]
}
   28768:	e7bf      	b.n	286ea <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   2876a:	2500      	movs	r5, #0
}
   2876c:	4628      	mov	r0, r5
   2876e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   28772:	f06f 0515 	mvn.w	r5, #21
   28776:	e7f9      	b.n	2876c <mpu_mark_areas_for_dynamic_regions+0x94>
   28778:	2000ffa8 	.word	0x2000ffa8
   2877c:	20010dfa 	.word	0x20010dfa
   28780:	e000ed90 	.word	0xe000ed90

00028784 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   28784:	4b03      	ldr	r3, [pc, #12]	; (28794 <arm_core_mpu_enable+0x10>)
   28786:	2205      	movs	r2, #5
   28788:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   2878a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2878e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   28792:	4770      	bx	lr
   28794:	e000ed90 	.word	0xe000ed90

00028798 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   28798:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2879c:	4b01      	ldr	r3, [pc, #4]	; (287a4 <arm_core_mpu_disable+0xc>)
   2879e:	2200      	movs	r2, #0
   287a0:	605a      	str	r2, [r3, #4]
}
   287a2:	4770      	bx	lr
   287a4:	e000ed90 	.word	0xe000ed90

000287a8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   287a8:	b510      	push	{r4, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   287aa:	f7ff ff8b 	bl	286c4 <mpu_configure_static_mpu_regions>
   287ae:	f110 0f16 	cmn.w	r0, #22
   287b2:	d000      	beq.n	287b6 <arm_core_mpu_configure_static_mpu_regions+0xe>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   287b4:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   287b6:	4c06      	ldr	r4, [pc, #24]	; (287d0 <arm_core_mpu_configure_static_mpu_regions+0x28>)
   287b8:	f240 1211 	movw	r2, #273	; 0x111
   287bc:	4621      	mov	r1, r4
   287be:	4805      	ldr	r0, [pc, #20]	; (287d4 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
   287c0:	f013 f9ba 	bl	3bb38 <printk>
   287c4:	f240 1111 	movw	r1, #273	; 0x111
   287c8:	4620      	mov	r0, r4
   287ca:	f013 fc09 	bl	3bfe0 <assert_post_action>
}
   287ce:	e7f1      	b.n	287b4 <arm_core_mpu_configure_static_mpu_regions+0xc>
   287d0:	00042c28 	.word	0x00042c28
   287d4:	00041c84 	.word	0x00041c84

000287d8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   287d8:	b510      	push	{r4, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   287da:	f7ff ff7d 	bl	286d8 <mpu_mark_areas_for_dynamic_regions>
   287de:	f110 0f16 	cmn.w	r0, #22
   287e2:	d000      	beq.n	287e6 <arm_core_mpu_mark_areas_for_dynamic_regions+0xe>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   287e4:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   287e6:	4c06      	ldr	r4, [pc, #24]	; (28800 <arm_core_mpu_mark_areas_for_dynamic_regions+0x28>)
   287e8:	f240 1221 	movw	r2, #289	; 0x121
   287ec:	4621      	mov	r1, r4
   287ee:	4805      	ldr	r0, [pc, #20]	; (28804 <arm_core_mpu_mark_areas_for_dynamic_regions+0x2c>)
   287f0:	f013 f9a2 	bl	3bb38 <printk>
   287f4:	f240 1121 	movw	r1, #289	; 0x121
   287f8:	4620      	mov	r0, r4
   287fa:	f013 fbf1 	bl	3bfe0 <assert_post_action>
}
   287fe:	e7f1      	b.n	287e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc>
   28800:	00042c28 	.word	0x00042c28
   28804:	00041c84 	.word	0x00041c84

00028808 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   28808:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2880a:	4b1e      	ldr	r3, [pc, #120]	; (28884 <z_arm_mpu_init+0x7c>)
   2880c:	681d      	ldr	r5, [r3, #0]
   2880e:	2d10      	cmp	r5, #16
   28810:	d805      	bhi.n	2881e <z_arm_mpu_init+0x16>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   28812:	f7ff ffc1 	bl	28798 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   28816:	f7ff fe29 	bl	2846c <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2881a:	2400      	movs	r4, #0
   2881c:	e016      	b.n	2884c <z_arm_mpu_init+0x44>
		__ASSERT(0,
   2881e:	4c1a      	ldr	r4, [pc, #104]	; (28888 <z_arm_mpu_init+0x80>)
   28820:	f44f 72a4 	mov.w	r2, #328	; 0x148
   28824:	4621      	mov	r1, r4
   28826:	4819      	ldr	r0, [pc, #100]	; (2888c <z_arm_mpu_init+0x84>)
   28828:	f013 f986 	bl	3bb38 <printk>
   2882c:	f44f 71a4 	mov.w	r1, #328	; 0x148
   28830:	4620      	mov	r0, r4
   28832:	f013 fbd5 	bl	3bfe0 <assert_post_action>
		return -1;
   28836:	f04f 30ff 	mov.w	r0, #4294967295
   2883a:	e014      	b.n	28866 <z_arm_mpu_init+0x5e>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   2883c:	4b11      	ldr	r3, [pc, #68]	; (28884 <z_arm_mpu_init+0x7c>)
   2883e:	6859      	ldr	r1, [r3, #4]
   28840:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   28844:	4620      	mov	r0, r4
   28846:	f7ff fe19 	bl	2847c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2884a:	3401      	adds	r4, #1
   2884c:	42a5      	cmp	r5, r4
   2884e:	d8f5      	bhi.n	2883c <z_arm_mpu_init+0x34>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   28850:	4b0f      	ldr	r3, [pc, #60]	; (28890 <z_arm_mpu_init+0x88>)
   28852:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   28854:	f7ff ff96 	bl	28784 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   28858:	4b0e      	ldr	r3, [pc, #56]	; (28894 <z_arm_mpu_init+0x8c>)
   2885a:	681b      	ldr	r3, [r3, #0]
   2885c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   28860:	2b10      	cmp	r3, #16
   28862:	d101      	bne.n	28868 <z_arm_mpu_init+0x60>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   28864:	2000      	movs	r0, #0
}
   28866:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   28868:	4c07      	ldr	r4, [pc, #28]	; (28888 <z_arm_mpu_init+0x80>)
   2886a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
   2886e:	4621      	mov	r1, r4
   28870:	4806      	ldr	r0, [pc, #24]	; (2888c <z_arm_mpu_init+0x84>)
   28872:	f013 f961 	bl	3bb38 <printk>
   28876:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   2887a:	4620      	mov	r0, r4
   2887c:	f013 fbb0 	bl	3bfe0 <assert_post_action>
	return 0;
   28880:	2000      	movs	r0, #0
   28882:	e7f0      	b.n	28866 <z_arm_mpu_init+0x5e>
   28884:	00042cc8 	.word	0x00042cc8
   28888:	00042c28 	.word	0x00042c28
   2888c:	00041c84 	.word	0x00041c84
   28890:	20010dfa 	.word	0x20010dfa
   28894:	e000ed90 	.word	0xe000ed90

00028898 <malloc_prepare>:

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   28898:	4b0b      	ldr	r3, [pc, #44]	; (288c8 <malloc_prepare+0x30>)
   2889a:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   2889e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   288a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   288a6:	d301      	bcc.n	288ac <malloc_prepare+0x14>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   288a8:	2000      	movs	r0, #0
   288aa:	4770      	bx	lr
{
   288ac:	b510      	push	{r4, lr}
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   288ae:	4c07      	ldr	r4, [pc, #28]	; (288cc <malloc_prepare+0x34>)
   288b0:	2281      	movs	r2, #129	; 0x81
   288b2:	4621      	mov	r1, r4
   288b4:	4806      	ldr	r0, [pc, #24]	; (288d0 <malloc_prepare+0x38>)
   288b6:	f013 f93f 	bl	3bb38 <printk>
   288ba:	2181      	movs	r1, #129	; 0x81
   288bc:	4620      	mov	r0, r4
   288be:	f013 fb8f 	bl	3bfe0 <assert_post_action>
}
   288c2:	2000      	movs	r0, #0
   288c4:	bd10      	pop	{r4, pc}
   288c6:	bf00      	nop
   288c8:	20014e08 	.word	0x20014e08
   288cc:	00042c60 	.word	0x00042c60
   288d0:	00041c84 	.word	0x00041c84

000288d4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   288d4:	4b01      	ldr	r3, [pc, #4]	; (288dc <__stdout_hook_install+0x8>)
   288d6:	6018      	str	r0, [r3, #0]
}
   288d8:	4770      	bx	lr
   288da:	bf00      	nop
   288dc:	2000c620 	.word	0x2000c620

000288e0 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   288e0:	b570      	push	{r4, r5, r6, lr}
   288e2:	4606      	mov	r6, r0
   288e4:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   288e6:	2400      	movs	r4, #0
   288e8:	e000      	b.n	288ec <z_impl_zephyr_read_stdin+0xc>
   288ea:	3401      	adds	r4, #1
   288ec:	42ac      	cmp	r4, r5
   288ee:	da08      	bge.n	28902 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
   288f0:	4b05      	ldr	r3, [pc, #20]	; (28908 <z_impl_zephyr_read_stdin+0x28>)
   288f2:	681b      	ldr	r3, [r3, #0]
   288f4:	4798      	blx	r3
   288f6:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   288f8:	280a      	cmp	r0, #10
   288fa:	d001      	beq.n	28900 <z_impl_zephyr_read_stdin+0x20>
   288fc:	280d      	cmp	r0, #13
   288fe:	d1f4      	bne.n	288ea <z_impl_zephyr_read_stdin+0xa>
			i++;
   28900:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
   28902:	4620      	mov	r0, r4
   28904:	bd70      	pop	{r4, r5, r6, pc}
   28906:	bf00      	nop
   28908:	2000c61c 	.word	0x2000c61c

0002890c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   2890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2890e:	4605      	mov	r5, r0
   28910:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   28912:	2400      	movs	r4, #0
   28914:	e004      	b.n	28920 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   28916:	4b09      	ldr	r3, [pc, #36]	; (2893c <z_impl_zephyr_write_stdout+0x30>)
   28918:	681b      	ldr	r3, [r3, #0]
   2891a:	7830      	ldrb	r0, [r6, #0]
   2891c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   2891e:	3401      	adds	r4, #1
   28920:	42bc      	cmp	r4, r7
   28922:	da08      	bge.n	28936 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   28924:	192e      	adds	r6, r5, r4
   28926:	5d2b      	ldrb	r3, [r5, r4]
   28928:	2b0a      	cmp	r3, #10
   2892a:	d1f4      	bne.n	28916 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   2892c:	4b03      	ldr	r3, [pc, #12]	; (2893c <z_impl_zephyr_write_stdout+0x30>)
   2892e:	681b      	ldr	r3, [r3, #0]
   28930:	200d      	movs	r0, #13
   28932:	4798      	blx	r3
   28934:	e7ef      	b.n	28916 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   28936:	4638      	mov	r0, r7
   28938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2893a:	bf00      	nop
   2893c:	2000c620 	.word	0x2000c620

00028940 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   28940:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
   28942:	2205      	movs	r2, #5
   28944:	4902      	ldr	r1, [pc, #8]	; (28950 <_exit+0x10>)
   28946:	2001      	movs	r0, #1
   28948:	f013 ff7d 	bl	3c846 <_write>
	while (1) {
   2894c:	e7fe      	b.n	2894c <_exit+0xc>
   2894e:	bf00      	nop
   28950:	00042c90 	.word	0x00042c90

00028954 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   28954:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   28956:	4b08      	ldr	r3, [pc, #32]	; (28978 <_sbrk+0x24>)
   28958:	6819      	ldr	r1, [r3, #0]
   2895a:	4b08      	ldr	r3, [pc, #32]	; (2897c <_sbrk+0x28>)
   2895c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   2895e:	440a      	add	r2, r1
   28960:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   28964:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   28968:	429a      	cmp	r2, r3
   2896a:	d202      	bcs.n	28972 <_sbrk+0x1e>
		heap_sz += count;
   2896c:	4b02      	ldr	r3, [pc, #8]	; (28978 <_sbrk+0x24>)
   2896e:	601a      	str	r2, [r3, #0]
		ret = ptr;
   28970:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   28972:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
   28976:	4770      	bx	lr
   28978:	2000ffbc 	.word	0x2000ffbc
   2897c:	20014e08 	.word	0x20014e08

00028980 <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   28980:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   28982:	4604      	mov	r4, r0
   28984:	b140      	cbz	r0, 28998 <__retarget_lock_init_recursive+0x18>

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   28986:	2014      	movs	r0, #20
   28988:	f010 ffdc 	bl	39944 <malloc>
   2898c:	6020      	str	r0, [r4, #0]
#else
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   2898e:	b180      	cbz	r0, 289b2 <__retarget_lock_init_recursive+0x32>

	k_mutex_init((struct k_mutex *)*lock);
   28990:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   28992:	f017 f929 	bl	3fbe8 <z_impl_k_mutex_init>
}
   28996:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   28998:	4d0c      	ldr	r5, [pc, #48]	; (289cc <__retarget_lock_init_recursive+0x4c>)
   2899a:	f240 1277 	movw	r2, #375	; 0x177
   2899e:	4629      	mov	r1, r5
   289a0:	480b      	ldr	r0, [pc, #44]	; (289d0 <__retarget_lock_init_recursive+0x50>)
   289a2:	f013 f8c9 	bl	3bb38 <printk>
   289a6:	f240 1177 	movw	r1, #375	; 0x177
   289aa:	4628      	mov	r0, r5
   289ac:	f013 fb18 	bl	3bfe0 <assert_post_action>
   289b0:	e7e9      	b.n	28986 <__retarget_lock_init_recursive+0x6>
	__ASSERT(*lock != NULL, "recursive lock allocation failed");
   289b2:	4d06      	ldr	r5, [pc, #24]	; (289cc <__retarget_lock_init_recursive+0x4c>)
   289b4:	f240 127f 	movw	r2, #383	; 0x17f
   289b8:	4629      	mov	r1, r5
   289ba:	4805      	ldr	r0, [pc, #20]	; (289d0 <__retarget_lock_init_recursive+0x50>)
   289bc:	f013 f8bc 	bl	3bb38 <printk>
   289c0:	f240 117f 	movw	r1, #383	; 0x17f
   289c4:	4628      	mov	r0, r5
   289c6:	f013 fb0b 	bl	3bfe0 <assert_post_action>
   289ca:	e7e1      	b.n	28990 <__retarget_lock_init_recursive+0x10>
   289cc:	00042c60 	.word	0x00042c60
   289d0:	00041c84 	.word	0x00041c84

000289d4 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   289d4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   289d6:	4604      	mov	r4, r0
   289d8:	b138      	cbz	r0, 289ea <__retarget_lock_acquire_recursive+0x16>
	return z_impl_k_mutex_lock(mutex, timeout);
   289da:	f04f 32ff 	mov.w	r2, #4294967295
   289de:	f04f 33ff 	mov.w	r3, #4294967295
   289e2:	4620      	mov	r0, r4
   289e4:	f00d faf4 	bl	35fd0 <z_impl_k_mutex_lock>
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   289e8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   289ea:	4d06      	ldr	r5, [pc, #24]	; (28a04 <__retarget_lock_acquire_recursive+0x30>)
   289ec:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   289f0:	4629      	mov	r1, r5
   289f2:	4805      	ldr	r0, [pc, #20]	; (28a08 <__retarget_lock_acquire_recursive+0x34>)
   289f4:	f013 f8a0 	bl	3bb38 <printk>
   289f8:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   289fc:	4628      	mov	r0, r5
   289fe:	f013 faef 	bl	3bfe0 <assert_post_action>
   28a02:	e7ea      	b.n	289da <__retarget_lock_acquire_recursive+0x6>
   28a04:	00042c60 	.word	0x00042c60
   28a08:	00041c84 	.word	0x00041c84

00028a0c <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   28a0c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(lock != NULL);
   28a0e:	4604      	mov	r4, r0
   28a10:	b118      	cbz	r0, 28a1a <__retarget_lock_release_recursive+0xe>
	return z_impl_k_mutex_unlock(mutex);
   28a12:	4620      	mov	r0, r4
   28a14:	f00d fbd2 	bl	361bc <z_impl_k_mutex_unlock>
	k_mutex_unlock((struct k_mutex *)lock);
}
   28a18:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(lock != NULL);
   28a1a:	4d06      	ldr	r5, [pc, #24]	; (28a34 <__retarget_lock_release_recursive+0x28>)
   28a1c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   28a20:	4629      	mov	r1, r5
   28a22:	4805      	ldr	r0, [pc, #20]	; (28a38 <__retarget_lock_release_recursive+0x2c>)
   28a24:	f013 f888 	bl	3bb38 <printk>
   28a28:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   28a2c:	4628      	mov	r0, r5
   28a2e:	f013 fad7 	bl	3bfe0 <assert_post_action>
   28a32:	e7ee      	b.n	28a12 <__retarget_lock_release_recursive+0x6>
   28a34:	00042c60 	.word	0x00042c60
   28a38:	00041c84 	.word	0x00041c84

00028a3c <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   28a3c:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   28a3e:	221d      	movs	r2, #29
   28a40:	4904      	ldr	r1, [pc, #16]	; (28a54 <__chk_fail+0x18>)
   28a42:	2002      	movs	r0, #2
   28a44:	f013 feff 	bl	3c846 <_write>
	k_oops();
   28a48:	4040      	eors	r0, r0
   28a4a:	f380 8811 	msr	BASEPRI, r0
   28a4e:	f04f 0003 	mov.w	r0, #3
   28a52:	df02      	svc	2
	CODE_UNREACHABLE;
   28a54:	00042c98 	.word	0x00042c98

00028a58 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   28a58:	b570      	push	{r4, r5, r6, lr}
   28a5a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   28a5c:	f04f 32ff 	mov.w	r2, #4294967295
   28a60:	f04f 33ff 	mov.w	r3, #4294967295
   28a64:	4839      	ldr	r0, [pc, #228]	; (28b4c <net_if_up+0xf4>)
   28a66:	f00d fab3 	bl	35fd0 <z_impl_k_mutex_lock>
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
	if (iface == NULL) {
   28a6a:	b134      	cbz	r4, 28a7a <net_if_up+0x22>
		return false;
	}

	return atomic_test_bit(iface->if_dev->flags, value);
   28a6c:	6823      	ldr	r3, [r4, #0]
   28a6e:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28a70:	e8d3 3faf 	lda	r3, [r3]

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   28a74:	f013 0f01 	tst.w	r3, #1
   28a78:	d164      	bne.n	28b44 <net_if_up+0xec>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   28a7a:	6823      	ldr	r3, [r4, #0]
   28a7c:	7e9a      	ldrb	r2, [r3, #26]
		status = -EALREADY;
		goto out;
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   28a7e:	bb2a      	cbnz	r2, 28acc <net_if_up+0x74>
	if (!iface || !iface->if_dev) {
   28a80:	2c00      	cmp	r4, #0
   28a82:	d03d      	beq.n	28b00 <net_if_up+0xa8>
   28a84:	2b00      	cmp	r3, #0
   28a86:	d03d      	beq.n	28b04 <net_if_up+0xac>
	return iface->if_dev->l2;
   28a88:	685b      	ldr	r3, [r3, #4]
		net_if_flag_set(iface, NET_IF_UP);
		goto notify;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   28a8a:	2b00      	cmp	r3, #0
   28a8c:	d03c      	beq.n	28b08 <net_if_up+0xb0>
   28a8e:	689b      	ldr	r3, [r3, #8]
   28a90:	2b00      	cmp	r3, #0
   28a92:	d03b      	beq.n	28b0c <net_if_up+0xb4>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
   28a94:	2101      	movs	r1, #1
   28a96:	4620      	mov	r0, r4
   28a98:	4798      	blx	r3
	if (status < 0) {
   28a9a:	1e05      	subs	r5, r0, #0
   28a9c:	db11      	blt.n	28ac2 <net_if_up+0x6a>
 *
 * @return a pointer to the network link address
 */
static inline struct net_linkaddr *net_if_get_link_addr(struct net_if *iface)
{
	return &iface->if_dev->link_addr;
   28a9e:	6823      	ldr	r3, [r4, #0]
	    (net_if_l2(iface) == &NET_L2_GET_NAME(CANBUS_RAW)))	{
		/* CAN does not require link address. */
	} else
#endif	/* CONFIG_NET_L2_CANBUS_RAW */
	{
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   28aa0:	691b      	ldr	r3, [r3, #16]
   28aa2:	b3ab      	cbz	r3, 28b10 <net_if_up+0xb8>
	NET_ASSERT(iface);
   28aa4:	2c00      	cmp	r4, #0
   28aa6:	d040      	beq.n	28b2a <net_if_up+0xd2>
	atomic_set_bit(iface->if_dev->flags, value);
   28aa8:	6823      	ldr	r3, [r4, #0]
   28aaa:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28aac:	e8d3 2fef 	ldaex	r2, [r3]
   28ab0:	f042 0201 	orr.w	r2, r2, #1
   28ab4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   28ab8:	2900      	cmp	r1, #0
   28aba:	d1f7      	bne.n	28aac <net_if_up+0x54>
	net_if_flag_set(iface, NET_IF_UP);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   28abc:	4620      	mov	r0, r4
   28abe:	f013 fefa 	bl	3c8b6 <l2_flags_get>
	return z_impl_k_mutex_unlock(mutex);
   28ac2:	4822      	ldr	r0, [pc, #136]	; (28b4c <net_if_up+0xf4>)
   28ac4:	f00d fb7a 	bl	361bc <z_impl_k_mutex_unlock>

out:
	k_mutex_unlock(&lock);

	return status;
}
   28ac8:	4628      	mov	r0, r5
   28aca:	bd70      	pop	{r4, r5, r6, pc}
	NET_ASSERT(iface);
   28acc:	b15c      	cbz	r4, 28ae6 <net_if_up+0x8e>
	atomic_set_bit(iface->if_dev->flags, value);
   28ace:	6823      	ldr	r3, [r4, #0]
   28ad0:	330c      	adds	r3, #12
   28ad2:	e8d3 2fef 	ldaex	r2, [r3]
   28ad6:	f042 0201 	orr.w	r2, r2, #1
   28ada:	e8c3 2fe1 	stlex	r1, r2, [r3]
   28ade:	2900      	cmp	r1, #0
   28ae0:	d1f7      	bne.n	28ad2 <net_if_up+0x7a>
	int status = 0;
   28ae2:	2500      	movs	r5, #0
		goto notify;
   28ae4:	e7ed      	b.n	28ac2 <net_if_up+0x6a>
	NET_ASSERT(iface);
   28ae6:	4d1a      	ldr	r5, [pc, #104]	; (28b50 <net_if_up+0xf8>)
   28ae8:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   28aec:	4629      	mov	r1, r5
   28aee:	4819      	ldr	r0, [pc, #100]	; (28b54 <net_if_up+0xfc>)
   28af0:	f013 f822 	bl	3bb38 <printk>
   28af4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   28af8:	4628      	mov	r0, r5
   28afa:	f013 fa71 	bl	3bfe0 <assert_post_action>
   28afe:	e7e6      	b.n	28ace <net_if_up+0x76>
	int status = 0;
   28b00:	2500      	movs	r5, #0
   28b02:	e7cc      	b.n	28a9e <net_if_up+0x46>
   28b04:	2500      	movs	r5, #0
   28b06:	e7ca      	b.n	28a9e <net_if_up+0x46>
   28b08:	2500      	movs	r5, #0
   28b0a:	e7c8      	b.n	28a9e <net_if_up+0x46>
   28b0c:	2500      	movs	r5, #0
   28b0e:	e7c6      	b.n	28a9e <net_if_up+0x46>
		NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   28b10:	4e11      	ldr	r6, [pc, #68]	; (28b58 <net_if_up+0x100>)
   28b12:	f640 72b5 	movw	r2, #4021	; 0xfb5
   28b16:	4631      	mov	r1, r6
   28b18:	480e      	ldr	r0, [pc, #56]	; (28b54 <net_if_up+0xfc>)
   28b1a:	f013 f80d 	bl	3bb38 <printk>
   28b1e:	f640 71b5 	movw	r1, #4021	; 0xfb5
   28b22:	4630      	mov	r0, r6
   28b24:	f013 fa5c 	bl	3bfe0 <assert_post_action>
   28b28:	e7bc      	b.n	28aa4 <net_if_up+0x4c>
   28b2a:	4e09      	ldr	r6, [pc, #36]	; (28b50 <net_if_up+0xf8>)
   28b2c:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   28b30:	4631      	mov	r1, r6
   28b32:	4808      	ldr	r0, [pc, #32]	; (28b54 <net_if_up+0xfc>)
   28b34:	f013 f800 	bl	3bb38 <printk>
   28b38:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   28b3c:	4630      	mov	r0, r6
   28b3e:	f013 fa4f 	bl	3bfe0 <assert_post_action>
   28b42:	e7b1      	b.n	28aa8 <net_if_up+0x50>
		status = -EALREADY;
   28b44:	f06f 0577 	mvn.w	r5, #119	; 0x77
   28b48:	e7bb      	b.n	28ac2 <net_if_up+0x6a>
   28b4a:	bf00      	nop
   28b4c:	2000ca94 	.word	0x2000ca94
   28b50:	00042d24 	.word	0x00042d24
   28b54:	00041c84 	.word	0x00041c84
   28b58:	00042cf8 	.word	0x00042cf8

00028b5c <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   28b5c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   28b5e:	f04f 32ff 	mov.w	r2, #4294967295
   28b62:	f04f 33ff 	mov.w	r3, #4294967295
   28b66:	4814      	ldr	r0, [pc, #80]	; (28bb8 <net_if_init+0x5c>)
   28b68:	f00d fa32 	bl	35fd0 <z_impl_k_mutex_lock>

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   28b6c:	4c13      	ldr	r4, [pc, #76]	; (28bbc <net_if_init+0x60>)
   28b6e:	e000      	b.n	28b72 <net_if_init+0x16>
   28b70:	3404      	adds	r4, #4
   28b72:	4b13      	ldr	r3, [pc, #76]	; (28bc0 <net_if_init+0x64>)
   28b74:	429c      	cmp	r4, r3
   28b76:	d80d      	bhi.n	28b94 <net_if_init+0x38>
   28b78:	4b11      	ldr	r3, [pc, #68]	; (28bc0 <net_if_init+0x64>)
   28b7a:	429c      	cmp	r4, r3
   28b7c:	d217      	bcs.n	28bae <net_if_init+0x52>
	return iface->if_dev->dev;
   28b7e:	6823      	ldr	r3, [r4, #0]
   28b80:	681b      	ldr	r3, [r3, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
   28b82:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   28b84:	2b00      	cmp	r3, #0
   28b86:	d0f3      	beq.n	28b70 <net_if_init+0x14>
   28b88:	681b      	ldr	r3, [r3, #0]
   28b8a:	2b00      	cmp	r3, #0
   28b8c:	d0f0      	beq.n	28b70 <net_if_init+0x14>
	api->init(iface);
   28b8e:	4620      	mov	r0, r4
   28b90:	4798      	blx	r3
   28b92:	e7ed      	b.n	28b70 <net_if_init+0x14>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   28b94:	4d0b      	ldr	r5, [pc, #44]	; (28bc4 <net_if_init+0x68>)
   28b96:	f241 02cf 	movw	r2, #4303	; 0x10cf
   28b9a:	4629      	mov	r1, r5
   28b9c:	480a      	ldr	r0, [pc, #40]	; (28bc8 <net_if_init+0x6c>)
   28b9e:	f012 ffcb 	bl	3bb38 <printk>
   28ba2:	f241 01cf 	movw	r1, #4303	; 0x10cf
   28ba6:	4628      	mov	r0, r5
   28ba8:	f013 fa1a 	bl	3bfe0 <assert_post_action>
   28bac:	e7e4      	b.n	28b78 <net_if_init+0x1c>
	return z_impl_k_mutex_unlock(mutex);
   28bae:	4802      	ldr	r0, [pc, #8]	; (28bb8 <net_if_init+0x5c>)
   28bb0:	f00d fb04 	bl	361bc <z_impl_k_mutex_unlock>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   28bb4:	bd38      	pop	{r3, r4, r5, pc}
   28bb6:	bf00      	nop
   28bb8:	2000ca94 	.word	0x2000ca94
   28bbc:	2000cb04 	.word	0x2000cb04
   28bc0:	2000cb08 	.word	0x2000cb08
   28bc4:	00042cf8 	.word	0x00042cf8
   28bc8:	00041c84 	.word	0x00041c84

00028bcc <net_if_post_init>:

void net_if_post_init(void)
{
   28bcc:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   28bce:	4c12      	ldr	r4, [pc, #72]	; (28c18 <net_if_post_init+0x4c>)
   28bd0:	e003      	b.n	28bda <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
   28bd2:	4620      	mov	r0, r4
   28bd4:	f7ff ff40 	bl	28a58 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   28bd8:	3404      	adds	r4, #4
   28bda:	4b10      	ldr	r3, [pc, #64]	; (28c1c <net_if_post_init+0x50>)
   28bdc:	429c      	cmp	r4, r3
   28bde:	d80d      	bhi.n	28bfc <net_if_post_init+0x30>
   28be0:	4b0e      	ldr	r3, [pc, #56]	; (28c1c <net_if_post_init+0x50>)
   28be2:	429c      	cmp	r4, r3
   28be4:	d217      	bcs.n	28c16 <net_if_post_init+0x4a>
	if (iface == NULL) {
   28be6:	2c00      	cmp	r4, #0
   28be8:	d0f3      	beq.n	28bd2 <net_if_post_init+0x6>
	return atomic_test_bit(iface->if_dev->flags, value);
   28bea:	6823      	ldr	r3, [r4, #0]
   28bec:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28bee:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28bf2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   28bf6:	2b00      	cmp	r3, #0
   28bf8:	d1ee      	bne.n	28bd8 <net_if_post_init+0xc>
   28bfa:	e7ea      	b.n	28bd2 <net_if_post_init+0x6>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   28bfc:	4d08      	ldr	r5, [pc, #32]	; (28c20 <net_if_post_init+0x54>)
   28bfe:	f241 1201 	movw	r2, #4353	; 0x1101
   28c02:	4629      	mov	r1, r5
   28c04:	4807      	ldr	r0, [pc, #28]	; (28c24 <net_if_post_init+0x58>)
   28c06:	f012 ff97 	bl	3bb38 <printk>
   28c0a:	f241 1101 	movw	r1, #4353	; 0x1101
   28c0e:	4628      	mov	r0, r5
   28c10:	f013 f9e6 	bl	3bfe0 <assert_post_action>
   28c14:	e7e4      	b.n	28be0 <net_if_post_init+0x14>
		}
	}
}
   28c16:	bd38      	pop	{r3, r4, r5, pc}
   28c18:	2000cb04 	.word	0x2000cb04
   28c1c:	2000cb08 	.word	0x2000cb08
   28c20:	00042cf8 	.word	0x00042cf8
   28c24:	00041c84 	.word	0x00041c84

00028c28 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   28c28:	4800      	ldr	r0, [pc, #0]	; (28c2c <get_hf_flags+0x4>)
   28c2a:	4770      	bx	lr
   28c2c:	2001001c 	.word	0x2001001c

00028c30 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   28c30:	4b01      	ldr	r3, [pc, #4]	; (28c38 <get_subsys+0x8>)
   28c32:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   28c34:	1140      	asrs	r0, r0, #5
   28c36:	4770      	bx	lr
   28c38:	2000ffd4 	.word	0x2000ffd4

00028c3c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   28c3c:	b530      	push	{r4, r5, lr}
   28c3e:	b083      	sub	sp, #12
   28c40:	4605      	mov	r5, r0
   28c42:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   28c44:	f7ff fff4 	bl	28c30 <get_subsys>
   28c48:	4601      	mov	r1, r0
   28c4a:	2340      	movs	r3, #64	; 0x40
   28c4c:	9300      	str	r3, [sp, #0]
   28c4e:	4623      	mov	r3, r4
   28c50:	4a05      	ldr	r2, [pc, #20]	; (28c68 <onoff_start+0x2c>)
   28c52:	4806      	ldr	r0, [pc, #24]	; (28c6c <onoff_start+0x30>)
   28c54:	f013 ff94 	bl	3cb80 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   28c58:	1e01      	subs	r1, r0, #0
   28c5a:	db01      	blt.n	28c60 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   28c5c:	b003      	add	sp, #12
   28c5e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   28c60:	4628      	mov	r0, r5
   28c62:	47a0      	blx	r4
}
   28c64:	e7fa      	b.n	28c5c <onoff_start+0x20>
   28c66:	bf00      	nop
   28c68:	0003cbc9 	.word	0x0003cbc9
   28c6c:	00040f28 	.word	0x00040f28

00028c70 <generic_hfclk_stop>:
{
   28c70:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28c72:	4b08      	ldr	r3, [pc, #32]	; (28c94 <generic_hfclk_stop+0x24>)
   28c74:	e8d3 2fef 	ldaex	r2, [r3]
   28c78:	f022 0102 	bic.w	r1, r2, #2
   28c7c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   28c80:	2800      	cmp	r0, #0
   28c82:	d1f7      	bne.n	28c74 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   28c84:	f012 0f01 	tst.w	r2, #1
   28c88:	d000      	beq.n	28c8c <generic_hfclk_stop+0x1c>
}
   28c8a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   28c8c:	f013 ffae 	bl	3cbec <hfclk_stop>
   28c90:	e7fb      	b.n	28c8a <generic_hfclk_stop+0x1a>
   28c92:	bf00      	nop
   28c94:	2001002c 	.word	0x2001002c

00028c98 <generic_hfclk_start>:
{
   28c98:	b510      	push	{r4, lr}
	__asm__ volatile(
   28c9a:	f04f 0320 	mov.w	r3, #32
   28c9e:	f3ef 8411 	mrs	r4, BASEPRI
   28ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   28ca6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   28caa:	4a13      	ldr	r2, [pc, #76]	; (28cf8 <generic_hfclk_start+0x60>)
   28cac:	6813      	ldr	r3, [r2, #0]
   28cae:	f043 0302 	orr.w	r3, r3, #2
   28cb2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   28cb4:	f013 0f01 	tst.w	r3, #1
   28cb8:	d108      	bne.n	28ccc <generic_hfclk_start+0x34>
	bool already_started = false;
   28cba:	2300      	movs	r3, #0
	__asm__ volatile(
   28cbc:	f384 8811 	msr	BASEPRI, r4
   28cc0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   28cc4:	b993      	cbnz	r3, 28cec <generic_hfclk_start+0x54>
	hfclk_start();
   28cc6:	f013 ff87 	bl	3cbd8 <hfclk_start>
}
   28cca:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   28ccc:	4b0b      	ldr	r3, [pc, #44]	; (28cfc <generic_hfclk_start+0x64>)
   28cce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   28cd2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   28cd6:	f012 0f01 	tst.w	r2, #1
   28cda:	d101      	bne.n	28ce0 <generic_hfclk_start+0x48>
	bool already_started = false;
   28cdc:	2300      	movs	r3, #0
   28cde:	e7ed      	b.n	28cbc <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   28ce0:	f7ff ffa2 	bl	28c28 <get_hf_flags>
   28ce4:	f013 ff27 	bl	3cb36 <set_on_state>
			already_started = true;
   28ce8:	2301      	movs	r3, #1
   28cea:	e7e7      	b.n	28cbc <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   28cec:	2100      	movs	r1, #0
   28cee:	4804      	ldr	r0, [pc, #16]	; (28d00 <generic_hfclk_start+0x68>)
   28cf0:	f013 ff34 	bl	3cb5c <clkstarted_handle>
		return;
   28cf4:	e7e9      	b.n	28cca <generic_hfclk_start+0x32>
   28cf6:	bf00      	nop
   28cf8:	2001002c 	.word	0x2001002c
   28cfc:	40005000 	.word	0x40005000
   28d00:	00040f28 	.word	0x00040f28

00028d04 <get_status>:
{
   28d04:	b570      	push	{r4, r5, r6, lr}
   28d06:	4605      	mov	r5, r0
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   28d08:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   28d0a:	2c01      	cmp	r4, #1
   28d0c:	d807      	bhi.n	28d1e <get_status+0x1a>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   28d0e:	4621      	mov	r1, r4
   28d10:	4628      	mov	r0, r5
   28d12:	f013 fec6 	bl	3caa2 <get_sub_data>
   28d16:	6880      	ldr	r0, [r0, #8]
}
   28d18:	f000 0007 	and.w	r0, r0, #7
   28d1c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   28d1e:	4e05      	ldr	r6, [pc, #20]	; (28d34 <get_status+0x30>)
   28d20:	2279      	movs	r2, #121	; 0x79
   28d22:	4631      	mov	r1, r6
   28d24:	4804      	ldr	r0, [pc, #16]	; (28d38 <get_status+0x34>)
   28d26:	f012 ff07 	bl	3bb38 <printk>
   28d2a:	2179      	movs	r1, #121	; 0x79
   28d2c:	4630      	mov	r0, r6
   28d2e:	f013 f957 	bl	3bfe0 <assert_post_action>
   28d32:	e7ec      	b.n	28d0e <get_status+0xa>
   28d34:	00042d4c 	.word	0x00042d4c
   28d38:	00041c84 	.word	0x00041c84

00028d3c <stop>:
{
   28d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d40:	4607      	mov	r7, r0
   28d42:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   28d44:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   28d46:	4621      	mov	r1, r4
   28d48:	f013 feab 	bl	3caa2 <get_sub_data>
   28d4c:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   28d4e:	2c01      	cmp	r4, #1
   28d50:	d80f      	bhi.n	28d72 <stop+0x36>
	err = set_off_state(&subdata->flags, ctx);
   28d52:	4631      	mov	r1, r6
   28d54:	f105 0008 	add.w	r0, r5, #8
   28d58:	f013 feb4 	bl	3cac4 <set_off_state>
	if (err < 0) {
   28d5c:	2800      	cmp	r0, #0
   28d5e:	db06      	blt.n	28d6e <stop+0x32>
	get_sub_config(dev, type)->stop();
   28d60:	4621      	mov	r1, r4
   28d62:	4638      	mov	r0, r7
   28d64:	f013 fea4 	bl	3cab0 <get_sub_config>
   28d68:	6843      	ldr	r3, [r0, #4]
   28d6a:	4798      	blx	r3
	return 0;
   28d6c:	2000      	movs	r0, #0
}
   28d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   28d72:	f8df 8020 	ldr.w	r8, [pc, #32]	; 28d94 <stop+0x58>
   28d76:	f240 124d 	movw	r2, #333	; 0x14d
   28d7a:	4641      	mov	r1, r8
   28d7c:	4804      	ldr	r0, [pc, #16]	; (28d90 <stop+0x54>)
   28d7e:	f012 fedb 	bl	3bb38 <printk>
   28d82:	f240 114d 	movw	r1, #333	; 0x14d
   28d86:	4640      	mov	r0, r8
   28d88:	f013 f92a 	bl	3bfe0 <assert_post_action>
   28d8c:	e7e1      	b.n	28d52 <stop+0x16>
   28d8e:	bf00      	nop
   28d90:	00041c84 	.word	0x00041c84
   28d94:	00042d4c 	.word	0x00042d4c

00028d98 <onoff_stop>:
{
   28d98:	b538      	push	{r3, r4, r5, lr}
   28d9a:	4605      	mov	r5, r0
   28d9c:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   28d9e:	f7ff ff47 	bl	28c30 <get_subsys>
   28da2:	4601      	mov	r1, r0
   28da4:	2240      	movs	r2, #64	; 0x40
   28da6:	4803      	ldr	r0, [pc, #12]	; (28db4 <onoff_stop+0x1c>)
   28da8:	f7ff ffc8 	bl	28d3c <stop>
   28dac:	4601      	mov	r1, r0
	notify(mgr, res);
   28dae:	4628      	mov	r0, r5
   28db0:	47a0      	blx	r4
}
   28db2:	bd38      	pop	{r3, r4, r5, pc}
   28db4:	00040f28 	.word	0x00040f28

00028db8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   28db8:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   28dba:	2801      	cmp	r0, #1
   28dbc:	d01c      	beq.n	28df8 <clock_event_handler+0x40>
   28dbe:	2803      	cmp	r0, #3
   28dc0:	d01f      	beq.n	28e02 <clock_event_handler+0x4a>
   28dc2:	b160      	cbz	r0, 28dde <clock_event_handler+0x26>
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
		}
		break;
	default:
		__ASSERT_NO_MSG(0);
   28dc4:	4c15      	ldr	r4, [pc, #84]	; (28e1c <clock_event_handler+0x64>)
   28dc6:	f240 2262 	movw	r2, #610	; 0x262
   28dca:	4621      	mov	r1, r4
   28dcc:	4814      	ldr	r0, [pc, #80]	; (28e20 <clock_event_handler+0x68>)
   28dce:	f012 feb3 	bl	3bb38 <printk>
   28dd2:	f240 2162 	movw	r1, #610	; 0x262
   28dd6:	4620      	mov	r0, r4
   28dd8:	f013 f902 	bl	3bfe0 <assert_post_action>
		break;
	}
}
   28ddc:	e010      	b.n	28e00 <clock_event_handler+0x48>
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   28dde:	2100      	movs	r1, #0
   28de0:	4810      	ldr	r0, [pc, #64]	; (28e24 <clock_event_handler+0x6c>)
   28de2:	f013 fe5e 	bl	3caa2 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   28de6:	6883      	ldr	r3, [r0, #8]
   28de8:	f013 0f07 	tst.w	r3, #7
   28dec:	d108      	bne.n	28e00 <clock_event_handler+0x48>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   28dee:	2100      	movs	r1, #0
   28df0:	480c      	ldr	r0, [pc, #48]	; (28e24 <clock_event_handler+0x6c>)
   28df2:	f013 feb3 	bl	3cb5c <clkstarted_handle>
   28df6:	e003      	b.n	28e00 <clock_event_handler+0x48>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   28df8:	2101      	movs	r1, #1
   28dfa:	480a      	ldr	r0, [pc, #40]	; (28e24 <clock_event_handler+0x6c>)
   28dfc:	f013 feae 	bl	3cb5c <clkstarted_handle>
}
   28e00:	bd10      	pop	{r4, pc}
			__ASSERT_NO_MSG(false);
   28e02:	4c06      	ldr	r4, [pc, #24]	; (28e1c <clock_event_handler+0x64>)
   28e04:	f240 225e 	movw	r2, #606	; 0x25e
   28e08:	4621      	mov	r1, r4
   28e0a:	4805      	ldr	r0, [pc, #20]	; (28e20 <clock_event_handler+0x68>)
   28e0c:	f012 fe94 	bl	3bb38 <printk>
   28e10:	f240 215e 	movw	r1, #606	; 0x25e
   28e14:	4620      	mov	r0, r4
   28e16:	f013 f8e3 	bl	3bfe0 <assert_post_action>
		break;
   28e1a:	e7f1      	b.n	28e00 <clock_event_handler+0x48>
   28e1c:	00042d4c 	.word	0x00042d4c
   28e20:	00041c84 	.word	0x00041c84
   28e24:	00040f28 	.word	0x00040f28

00028e28 <api_blocking_start>:
{
   28e28:	b500      	push	{lr}
   28e2a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   28e2c:	f8cd d000 	str.w	sp, [sp]
   28e30:	f8cd d004 	str.w	sp, [sp, #4]
   28e34:	2300      	movs	r3, #0
   28e36:	9302      	str	r3, [sp, #8]
   28e38:	2301      	movs	r3, #1
   28e3a:	9303      	str	r3, [sp, #12]
   28e3c:	ab04      	add	r3, sp, #16
   28e3e:	9304      	str	r3, [sp, #16]
   28e40:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   28e42:	466b      	mov	r3, sp
   28e44:	4a06      	ldr	r2, [pc, #24]	; (28e60 <api_blocking_start+0x38>)
   28e46:	f013 feb7 	bl	3cbb8 <api_start>
	if (err < 0) {
   28e4a:	2800      	cmp	r0, #0
   28e4c:	db05      	blt.n	28e5a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   28e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   28e52:	2300      	movs	r3, #0
   28e54:	4668      	mov	r0, sp
   28e56:	f00d fba5 	bl	365a4 <z_impl_k_sem_take>
}
   28e5a:	b007      	add	sp, #28
   28e5c:	f85d fb04 	ldr.w	pc, [sp], #4
   28e60:	0003cc0b 	.word	0x0003cc0b

00028e64 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   28e64:	b570      	push	{r4, r5, r6, lr}
   28e66:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   28e68:	2200      	movs	r2, #0
   28e6a:	2101      	movs	r1, #1
   28e6c:	2005      	movs	r0, #5
   28e6e:	f7fe fcf5 	bl	2785c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   28e72:	2005      	movs	r0, #5
   28e74:	f7fe fcc0 	bl	277f8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   28e78:	4811      	ldr	r0, [pc, #68]	; (28ec0 <clk_init+0x5c>)
   28e7a:	f008 f803 	bl	30e84 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   28e7e:	4b11      	ldr	r3, [pc, #68]	; (28ec4 <clk_init+0x60>)
   28e80:	4298      	cmp	r0, r3
   28e82:	d11a      	bne.n	28eba <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   28e84:	f008 f822 	bl	30ecc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   28e88:	2400      	movs	r4, #0
   28e8a:	e003      	b.n	28e94 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   28e8c:	2301      	movs	r3, #1
   28e8e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   28e90:	441c      	add	r4, r3
   28e92:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   28e94:	2c01      	cmp	r4, #1
   28e96:	d80e      	bhi.n	28eb6 <clk_init+0x52>
						get_sub_data(dev, i);
   28e98:	4621      	mov	r1, r4
   28e9a:	4630      	mov	r0, r6
   28e9c:	f013 fe01 	bl	3caa2 <get_sub_data>
   28ea0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   28ea2:	4621      	mov	r1, r4
   28ea4:	4630      	mov	r0, r6
   28ea6:	f013 fe09 	bl	3cabc <get_onoff_manager>
   28eaa:	4907      	ldr	r1, [pc, #28]	; (28ec8 <clk_init+0x64>)
   28eac:	f012 fed2 	bl	3bc54 <onoff_manager_init>
		if (err < 0) {
   28eb0:	2800      	cmp	r0, #0
   28eb2:	daeb      	bge.n	28e8c <clk_init+0x28>
   28eb4:	e000      	b.n	28eb8 <clk_init+0x54>
	}

	return 0;
   28eb6:	2000      	movs	r0, #0
}
   28eb8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   28eba:	f06f 0004 	mvn.w	r0, #4
   28ebe:	e7fb      	b.n	28eb8 <clk_init+0x54>
   28ec0:	00028db9 	.word	0x00028db9
   28ec4:	0bad0000 	.word	0x0bad0000
   28ec8:	00042de4 	.word	0x00042de4

00028ecc <lfclk_spinwait>:
{
   28ecc:	b570      	push	{r4, r5, r6, lr}
   28ece:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   28ed0:	2801      	cmp	r0, #1
   28ed2:	d106      	bne.n	28ee2 <lfclk_spinwait+0x16>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   28ed4:	4b32      	ldr	r3, [pc, #200]	; (28fa0 <lfclk_spinwait+0xd4>)
   28ed6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   28eda:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   28ede:	2b02      	cmp	r3, #2
   28ee0:	d03c      	beq.n	28f5c <lfclk_spinwait+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28ee2:	f016 fe4b 	bl	3fb7c <k_is_in_isr>
   28ee6:	b920      	cbnz	r0, 28ef2 <lfclk_spinwait+0x26>
	return !z_sys_post_kernel;
   28ee8:	4b2e      	ldr	r3, [pc, #184]	; (28fa4 <lfclk_spinwait+0xd8>)
   28eea:	781b      	ldrb	r3, [r3, #0]
   28eec:	b193      	cbz	r3, 28f14 <lfclk_spinwait+0x48>
   28eee:	2300      	movs	r3, #0
   28ef0:	e000      	b.n	28ef4 <lfclk_spinwait+0x28>
   28ef2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   28ef4:	461c      	mov	r4, r3
   28ef6:	b17b      	cbz	r3, 28f18 <lfclk_spinwait+0x4c>
	__asm__ volatile(
   28ef8:	f04f 0320 	mov.w	r3, #32
   28efc:	f3ef 8611 	mrs	r6, BASEPRI
   28f00:	f383 8812 	msr	BASEPRI_MAX, r3
   28f04:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   28f08:	b994      	cbnz	r4, 28f30 <lfclk_spinwait+0x64>
    p_reg->INTENCLR = mask;
   28f0a:	4b25      	ldr	r3, [pc, #148]	; (28fa0 <lfclk_spinwait+0xd4>)
   28f0c:	2202      	movs	r2, #2
   28f0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   28f12:	e00d      	b.n	28f30 <lfclk_spinwait+0x64>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28f14:	2301      	movs	r3, #1
   28f16:	e7ed      	b.n	28ef4 <lfclk_spinwait+0x28>
	int key = isr_mode ? irq_lock() : 0;
   28f18:	2600      	movs	r6, #0
   28f1a:	e7f5      	b.n	28f08 <lfclk_spinwait+0x3c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   28f1c:	b1fc      	cbz	r4, 28f5e <lfclk_spinwait+0x92>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   28f1e:	4630      	mov	r0, r6
   28f20:	f7fe fc14 	bl	2774c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   28f24:	4b1e      	ldr	r3, [pc, #120]	; (28fa0 <lfclk_spinwait+0xd4>)
   28f26:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   28f2a:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   28f2c:	2b01      	cmp	r3, #1
   28f2e:	d01b      	beq.n	28f68 <lfclk_spinwait+0x9c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   28f30:	4a1b      	ldr	r2, [pc, #108]	; (28fa0 <lfclk_spinwait+0xd4>)
   28f32:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   28f36:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   28f3a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   28f3e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   28f42:	d125      	bne.n	28f90 <lfclk_spinwait+0xc4>
    return false;
   28f44:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   28f46:	2a00      	cmp	r2, #0
   28f48:	d0e8      	beq.n	28f1c <lfclk_spinwait+0x50>
   28f4a:	2b02      	cmp	r3, #2
   28f4c:	d001      	beq.n	28f52 <lfclk_spinwait+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   28f4e:	2d01      	cmp	r5, #1
   28f50:	d1e4      	bne.n	28f1c <lfclk_spinwait+0x50>
	if (isr_mode) {
   28f52:	b1fc      	cbz	r4, 28f94 <lfclk_spinwait+0xc8>
	__asm__ volatile(
   28f54:	f386 8811 	msr	BASEPRI, r6
   28f58:	f3bf 8f6f 	isb	sy
}
   28f5c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   28f5e:	2021      	movs	r0, #33	; 0x21
   28f60:	2100      	movs	r1, #0
   28f62:	f00f f8c1 	bl	380e8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   28f66:	e7dd      	b.n	28f24 <lfclk_spinwait+0x58>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   28f68:	4b0f      	ldr	r3, [pc, #60]	; (28fa8 <lfclk_spinwait+0xdc>)
   28f6a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   28f6c:	2b00      	cmp	r3, #0
   28f6e:	d0df      	beq.n	28f30 <lfclk_spinwait+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28f70:	4b0d      	ldr	r3, [pc, #52]	; (28fa8 <lfclk_spinwait+0xdc>)
   28f72:	2200      	movs	r2, #0
   28f74:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   28f76:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   28f78:	4b09      	ldr	r3, [pc, #36]	; (28fa0 <lfclk_spinwait+0xd4>)
   28f7a:	2202      	movs	r2, #2
   28f7c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   28f80:	4b0a      	ldr	r3, [pc, #40]	; (28fac <lfclk_spinwait+0xe0>)
   28f82:	2220      	movs	r2, #32
   28f84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28f88:	4b09      	ldr	r3, [pc, #36]	; (28fb0 <lfclk_spinwait+0xe4>)
   28f8a:	2201      	movs	r2, #1
   28f8c:	601a      	str	r2, [r3, #0]
}
   28f8e:	e7cf      	b.n	28f30 <lfclk_spinwait+0x64>
                return true;
   28f90:	2201      	movs	r2, #1
   28f92:	e7d8      	b.n	28f46 <lfclk_spinwait+0x7a>
    p_reg->INTENSET = mask;
   28f94:	4b02      	ldr	r3, [pc, #8]	; (28fa0 <lfclk_spinwait+0xd4>)
   28f96:	2202      	movs	r2, #2
   28f98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   28f9c:	e7de      	b.n	28f5c <lfclk_spinwait+0x90>
   28f9e:	bf00      	nop
   28fa0:	40005000 	.word	0x40005000
   28fa4:	20010f3e 	.word	0x20010f3e
   28fa8:	40005104 	.word	0x40005104
   28fac:	e000e100 	.word	0xe000e100
   28fb0:	40005008 	.word	0x40005008

00028fb4 <z_nrf_clock_control_lf_on>:
{
   28fb4:	b538      	push	{r3, r4, r5, lr}
   28fb6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28fb8:	4b1c      	ldr	r3, [pc, #112]	; (2902c <z_nrf_clock_control_lf_on+0x78>)
   28fba:	2101      	movs	r1, #1
   28fbc:	e8d3 2fef 	ldaex	r2, [r3]
   28fc0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   28fc4:	2800      	cmp	r0, #0
   28fc6:	d1f9      	bne.n	28fbc <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   28fc8:	b142      	cbz	r2, 28fdc <z_nrf_clock_control_lf_on+0x28>
	switch (start_mode) {
   28fca:	b134      	cbz	r4, 28fda <z_nrf_clock_control_lf_on+0x26>
   28fcc:	1e63      	subs	r3, r4, #1
   28fce:	b2db      	uxtb	r3, r3
   28fd0:	2b01      	cmp	r3, #1
   28fd2:	d81d      	bhi.n	29010 <z_nrf_clock_control_lf_on+0x5c>
		lfclk_spinwait(start_mode);
   28fd4:	4620      	mov	r0, r4
   28fd6:	f7ff ff79 	bl	28ecc <lfclk_spinwait>
}
   28fda:	bd38      	pop	{r3, r4, r5, pc}
				get_onoff_manager(CLOCK_DEVICE,
   28fdc:	4814      	ldr	r0, [pc, #80]	; (29030 <z_nrf_clock_control_lf_on+0x7c>)
   28fde:	f013 fd6d 	bl	3cabc <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   28fe2:	4914      	ldr	r1, [pc, #80]	; (29034 <z_nrf_clock_control_lf_on+0x80>)
   28fe4:	2300      	movs	r3, #0
   28fe6:	604b      	str	r3, [r1, #4]
   28fe8:	60cb      	str	r3, [r1, #12]
   28fea:	2301      	movs	r3, #1
   28fec:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   28fee:	f7fc f921 	bl	25234 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   28ff2:	2800      	cmp	r0, #0
   28ff4:	dae9      	bge.n	28fca <z_nrf_clock_control_lf_on+0x16>
   28ff6:	4d10      	ldr	r5, [pc, #64]	; (29038 <z_nrf_clock_control_lf_on+0x84>)
   28ff8:	f44f 7208 	mov.w	r2, #544	; 0x220
   28ffc:	4629      	mov	r1, r5
   28ffe:	480f      	ldr	r0, [pc, #60]	; (2903c <z_nrf_clock_control_lf_on+0x88>)
   29000:	f012 fd9a 	bl	3bb38 <printk>
   29004:	f44f 7108 	mov.w	r1, #544	; 0x220
   29008:	4628      	mov	r0, r5
   2900a:	f012 ffe9 	bl	3bfe0 <assert_post_action>
   2900e:	e7dc      	b.n	28fca <z_nrf_clock_control_lf_on+0x16>
		__ASSERT_NO_MSG(false);
   29010:	4c09      	ldr	r4, [pc, #36]	; (29038 <z_nrf_clock_control_lf_on+0x84>)
   29012:	f240 2232 	movw	r2, #562	; 0x232
   29016:	4621      	mov	r1, r4
   29018:	4808      	ldr	r0, [pc, #32]	; (2903c <z_nrf_clock_control_lf_on+0x88>)
   2901a:	f012 fd8d 	bl	3bb38 <printk>
   2901e:	f240 2132 	movw	r1, #562	; 0x232
   29022:	4620      	mov	r0, r4
   29024:	f012 ffdc 	bl	3bfe0 <assert_post_action>
   29028:	e7d7      	b.n	28fda <z_nrf_clock_control_lf_on+0x26>
   2902a:	bf00      	nop
   2902c:	20010030 	.word	0x20010030
   29030:	00040f28 	.word	0x00040f28
   29034:	2000ffc4 	.word	0x2000ffc4
   29038:	00042d4c 	.word	0x00042d4c
   2903c:	00041c84 	.word	0x00041c84

00029040 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   29040:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   29042:	4c04      	ldr	r4, [pc, #16]	; (29054 <rtt_console_init+0x14>)
   29044:	4620      	mov	r0, r4
   29046:	f7fb fe9f 	bl	24d88 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   2904a:	4620      	mov	r0, r4
   2904c:	f7ff fc42 	bl	288d4 <__stdout_hook_install>

	return 0;
}
   29050:	2000      	movs	r0, #0
   29052:	bd10      	pop	{r4, pc}
   29054:	00029059 	.word	0x00029059

00029058 <rtt_console_out>:
{
   29058:	b5f0      	push	{r4, r5, r6, r7, lr}
   2905a:	b083      	sub	sp, #12
   2905c:	4607      	mov	r7, r0
	char c = (char)character;
   2905e:	f88d 0007 	strb.w	r0, [sp, #7]
	int max_cnt = CONFIG_RTT_TX_RETRY_CNT;
   29062:	2602      	movs	r6, #2
   29064:	e006      	b.n	29074 <rtt_console_out+0x1c>
			host_present = true;
   29066:	4b13      	ldr	r3, [pc, #76]	; (290b4 <rtt_console_out+0x5c>)
   29068:	2201      	movs	r2, #1
   2906a:	701a      	strb	r2, [r3, #0]
   2906c:	e01e      	b.n	290ac <rtt_console_out+0x54>
				wait();
   2906e:	f013 fdd1 	bl	3cc14 <wait>
				max_cnt--;
   29072:	3e01      	subs	r6, #1
	return z_impl_k_mutex_lock(mutex, timeout);
   29074:	4d10      	ldr	r5, [pc, #64]	; (290b8 <rtt_console_out+0x60>)
   29076:	f04f 32ff 	mov.w	r2, #4294967295
   2907a:	f04f 33ff 	mov.w	r3, #4294967295
   2907e:	4628      	mov	r0, r5
   29080:	f00c ffa6 	bl	35fd0 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   29084:	2201      	movs	r2, #1
   29086:	f10d 0107 	add.w	r1, sp, #7
   2908a:	2000      	movs	r0, #0
   2908c:	f009 fb24 	bl	326d8 <SEGGER_RTT_WriteNoLock>
   29090:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   29092:	4628      	mov	r0, r5
   29094:	f00d f892 	bl	361bc <z_impl_k_mutex_unlock>
		if (cnt) {
   29098:	2c00      	cmp	r4, #0
   2909a:	d1e4      	bne.n	29066 <rtt_console_out+0xe>
		} else if (host_present) {
   2909c:	4b05      	ldr	r3, [pc, #20]	; (290b4 <rtt_console_out+0x5c>)
   2909e:	781b      	ldrb	r3, [r3, #0]
   290a0:	b123      	cbz	r3, 290ac <rtt_console_out+0x54>
			if (max_cnt) {
   290a2:	2e00      	cmp	r6, #0
   290a4:	d1e3      	bne.n	2906e <rtt_console_out+0x16>
				host_present = false;
   290a6:	4b03      	ldr	r3, [pc, #12]	; (290b4 <rtt_console_out+0x5c>)
   290a8:	2200      	movs	r2, #0
   290aa:	701a      	strb	r2, [r3, #0]
}
   290ac:	4638      	mov	r0, r7
   290ae:	b003      	add	sp, #12
   290b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   290b2:	bf00      	nop
   290b4:	20010dfb 	.word	0x20010dfb
   290b8:	2000caa8 	.word	0x2000caa8

000290bc <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   290bc:	4b1f      	ldr	r3, [pc, #124]	; (2913c <get_drive+0x80>)
   290be:	4003      	ands	r3, r0
   290c0:	4a1f      	ldr	r2, [pc, #124]	; (29140 <get_drive+0x84>)
   290c2:	4293      	cmp	r3, r2
   290c4:	d032      	beq.n	2912c <get_drive+0x70>
   290c6:	d816      	bhi.n	290f6 <get_drive+0x3a>
   290c8:	2b06      	cmp	r3, #6
   290ca:	d02b      	beq.n	29124 <get_drive+0x68>
   290cc:	d906      	bls.n	290dc <get_drive+0x20>
   290ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   290d2:	d10d      	bne.n	290f0 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   290d4:	2301      	movs	r3, #1
   290d6:	700b      	strb	r3, [r1, #0]
	int err = 0;
   290d8:	2000      	movs	r0, #0
		break;
   290da:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   290dc:	b1fb      	cbz	r3, 2911e <get_drive+0x62>
   290de:	2b02      	cmp	r3, #2
   290e0:	d103      	bne.n	290ea <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   290e2:	2304      	movs	r3, #4
   290e4:	700b      	strb	r3, [r1, #0]
	int err = 0;
   290e6:	2000      	movs	r0, #0
		break;
   290e8:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   290ea:	f06f 0015 	mvn.w	r0, #21
   290ee:	4770      	bx	lr
   290f0:	f06f 0015 	mvn.w	r0, #21
   290f4:	4770      	bx	lr
   290f6:	4a13      	ldr	r2, [pc, #76]	; (29144 <get_drive+0x88>)
   290f8:	4293      	cmp	r3, r2
   290fa:	d01b      	beq.n	29134 <get_drive+0x78>
   290fc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   29100:	d103      	bne.n	2910a <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   29102:	2303      	movs	r3, #3
   29104:	700b      	strb	r3, [r1, #0]
	int err = 0;
   29106:	2000      	movs	r0, #0
		break;
   29108:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2910a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2910e:	d103      	bne.n	29118 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   29110:	2302      	movs	r3, #2
   29112:	700b      	strb	r3, [r1, #0]
	int err = 0;
   29114:	2000      	movs	r0, #0
		break;
   29116:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   29118:	f06f 0015 	mvn.w	r0, #21
   2911c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   2911e:	2000      	movs	r0, #0
   29120:	7008      	strb	r0, [r1, #0]
		break;
   29122:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   29124:	2306      	movs	r3, #6
   29126:	700b      	strb	r3, [r1, #0]
	int err = 0;
   29128:	2000      	movs	r0, #0
		break;
   2912a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   2912c:	2307      	movs	r3, #7
   2912e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   29130:	2000      	movs	r0, #0
		break;
   29132:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   29134:	2305      	movs	r3, #5
   29136:	700b      	strb	r3, [r1, #0]
	int err = 0;
   29138:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   2913a:	4770      	bx	lr
   2913c:	00f00006 	.word	0x00f00006
   29140:	00100006 	.word	0x00100006
   29144:	00400002 	.word	0x00400002

00029148 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29148:	b908      	cbnz	r0, 2914e <get_dev+0x6>
   2914a:	4802      	ldr	r0, [pc, #8]	; (29154 <get_dev+0xc>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   2914c:	4770      	bx	lr
	const struct device *dev = NULL;
   2914e:	2000      	movs	r0, #0
   29150:	4770      	bx	lr
   29152:	bf00      	nop
   29154:	00040f44 	.word	0x00040f44

00029158 <gpio_nrfx_manage_callback>:
{
   29158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2915c:	4615      	mov	r5, r2
	return port->data;
   2915e:	6906      	ldr	r6, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29160:	1d37      	adds	r7, r6, #4
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   29162:	460c      	mov	r4, r1
   29164:	b139      	cbz	r1, 29176 <gpio_nrfx_manage_callback+0x1e>
	__ASSERT(callback->handler, "No callback handler!");
   29166:	6863      	ldr	r3, [r4, #4]
   29168:	b18b      	cbz	r3, 2918e <gpio_nrfx_manage_callback+0x36>
	return list->head;
   2916a:	6873      	ldr	r3, [r6, #4]

	if (!sys_slist_is_empty(callbacks)) {
   2916c:	2b00      	cmp	r3, #0
   2916e:	d033      	beq.n	291d8 <gpio_nrfx_manage_callback+0x80>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   29170:	4621      	mov	r1, r4
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29172:	2200      	movs	r2, #0
   29174:	e022      	b.n	291bc <gpio_nrfx_manage_callback+0x64>
	__ASSERT(callback, "No callback!");
   29176:	f8df 8088 	ldr.w	r8, [pc, #136]	; 29200 <gpio_nrfx_manage_callback+0xa8>
   2917a:	2224      	movs	r2, #36	; 0x24
   2917c:	4641      	mov	r1, r8
   2917e:	481f      	ldr	r0, [pc, #124]	; (291fc <gpio_nrfx_manage_callback+0xa4>)
   29180:	f012 fcda 	bl	3bb38 <printk>
   29184:	2124      	movs	r1, #36	; 0x24
   29186:	4640      	mov	r0, r8
   29188:	f012 ff2a 	bl	3bfe0 <assert_post_action>
   2918c:	e7eb      	b.n	29166 <gpio_nrfx_manage_callback+0xe>
	__ASSERT(callback->handler, "No callback handler!");
   2918e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 29200 <gpio_nrfx_manage_callback+0xa8>
   29192:	2225      	movs	r2, #37	; 0x25
   29194:	4641      	mov	r1, r8
   29196:	4819      	ldr	r0, [pc, #100]	; (291fc <gpio_nrfx_manage_callback+0xa4>)
   29198:	f012 fcce 	bl	3bb38 <printk>
   2919c:	2125      	movs	r1, #37	; 0x25
   2919e:	4640      	mov	r0, r8
   291a0:	f012 ff1e 	bl	3bfe0 <assert_post_action>
   291a4:	e7e1      	b.n	2916a <gpio_nrfx_manage_callback+0x12>
	return node->next;
   291a6:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   291a8:	6073      	str	r3, [r6, #4]
	return list->tail;
   291aa:	687a      	ldr	r2, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   291ac:	4294      	cmp	r4, r2
   291ae:	d10f      	bne.n	291d0 <gpio_nrfx_manage_callback+0x78>
	list->tail = node;
   291b0:	607b      	str	r3, [r7, #4]
}
   291b2:	e00d      	b.n	291d0 <gpio_nrfx_manage_callback+0x78>
	list->tail = node;
   291b4:	607a      	str	r2, [r7, #4]
}
   291b6:	e00b      	b.n	291d0 <gpio_nrfx_manage_callback+0x78>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   291b8:	461a      	mov	r2, r3
   291ba:	681b      	ldr	r3, [r3, #0]
   291bc:	b15b      	cbz	r3, 291d6 <gpio_nrfx_manage_callback+0x7e>
   291be:	4299      	cmp	r1, r3
   291c0:	d1fa      	bne.n	291b8 <gpio_nrfx_manage_callback+0x60>
Z_GENLIST_REMOVE(slist, snode)
   291c2:	2a00      	cmp	r2, #0
   291c4:	d0ef      	beq.n	291a6 <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   291c6:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   291c8:	6013      	str	r3, [r2, #0]
	return list->tail;
   291ca:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_REMOVE(slist, snode)
   291cc:	429c      	cmp	r4, r3
   291ce:	d0f1      	beq.n	291b4 <gpio_nrfx_manage_callback+0x5c>
	parent->next = child;
   291d0:	2300      	movs	r3, #0
   291d2:	6023      	str	r3, [r4, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   291d4:	e000      	b.n	291d8 <gpio_nrfx_manage_callback+0x80>
			if (!set) {
   291d6:	b155      	cbz	r5, 291ee <gpio_nrfx_manage_callback+0x96>
				return -EINVAL;
			}
		}
	}

	if (set) {
   291d8:	b165      	cbz	r5, 291f4 <gpio_nrfx_manage_callback+0x9c>
	return list->head;
   291da:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
   291dc:	6023      	str	r3, [r4, #0]
	list->head = node;
   291de:	6074      	str	r4, [r6, #4]
	return list->tail;
   291e0:	687b      	ldr	r3, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   291e2:	b10b      	cbz	r3, 291e8 <gpio_nrfx_manage_callback+0x90>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   291e4:	2000      	movs	r0, #0
   291e6:	e006      	b.n	291f6 <gpio_nrfx_manage_callback+0x9e>
	list->tail = node;
   291e8:	607c      	str	r4, [r7, #4]
   291ea:	2000      	movs	r0, #0
}
   291ec:	e003      	b.n	291f6 <gpio_nrfx_manage_callback+0x9e>
				return -EINVAL;
   291ee:	f06f 0015 	mvn.w	r0, #21
   291f2:	e000      	b.n	291f6 <gpio_nrfx_manage_callback+0x9e>
	return 0;
   291f4:	2000      	movs	r0, #0
}
   291f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   291fa:	bf00      	nop
   291fc:	00041c84 	.word	0x00041c84
   29200:	00042df0 	.word	0x00042df0

00029204 <nrfx_gpio_handler>:

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   29204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   29208:	f000 041f 	and.w	r4, r0, #31
	uint32_t pin = abs_pin;
	uint32_t port_id = nrf_gpio_pin_port_number_extract(&pin);
	const struct device *port = get_dev(port_id);
   2920c:	0940      	lsrs	r0, r0, #5
   2920e:	f7ff ff9b 	bl	29148 <get_dev>

	/* If given port is handled directly by nrfx driver it might not be enabled in DT. */
	if (port == NULL) {
   29212:	b360      	cbz	r0, 2926e <nrfx_gpio_handler+0x6a>
   29214:	4607      	mov	r7, r0
	return port->data;
   29216:	6903      	ldr	r3, [r0, #16]
	}

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
   29218:	2601      	movs	r6, #1
   2921a:	40a6      	lsls	r6, r4
	return list->head;
   2921c:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2921e:	b11c      	cbz	r4, 29228 <nrfx_gpio_handler+0x24>
   29220:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   29222:	b17c      	cbz	r4, 29244 <nrfx_gpio_handler+0x40>
	return node->next;
   29224:	6825      	ldr	r5, [r4, #0]
   29226:	e00d      	b.n	29244 <nrfx_gpio_handler+0x40>
   29228:	4625      	mov	r5, r4
   2922a:	e00b      	b.n	29244 <nrfx_gpio_handler+0x40>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2922c:	6863      	ldr	r3, [r4, #4]
   2922e:	68a2      	ldr	r2, [r4, #8]
   29230:	4032      	ands	r2, r6
   29232:	4621      	mov	r1, r4
   29234:	4638      	mov	r0, r7
   29236:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   29238:	b1bd      	cbz	r5, 2926a <nrfx_gpio_handler+0x66>
   2923a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   2923c:	b105      	cbz	r5, 29240 <nrfx_gpio_handler+0x3c>
	return node->next;
   2923e:	682b      	ldr	r3, [r5, #0]
   29240:	462c      	mov	r4, r5
   29242:	461d      	mov	r5, r3
   29244:	b19c      	cbz	r4, 2926e <nrfx_gpio_handler+0x6a>
		if (cb->pin_mask & pins) {
   29246:	68a3      	ldr	r3, [r4, #8]
   29248:	421e      	tst	r6, r3
   2924a:	d0f5      	beq.n	29238 <nrfx_gpio_handler+0x34>
			__ASSERT(cb->handler, "No callback handler!");
   2924c:	6863      	ldr	r3, [r4, #4]
   2924e:	2b00      	cmp	r3, #0
   29250:	d1ec      	bne.n	2922c <nrfx_gpio_handler+0x28>
   29252:	f8df 8024 	ldr.w	r8, [pc, #36]	; 29278 <nrfx_gpio_handler+0x74>
   29256:	2245      	movs	r2, #69	; 0x45
   29258:	4641      	mov	r1, r8
   2925a:	4806      	ldr	r0, [pc, #24]	; (29274 <nrfx_gpio_handler+0x70>)
   2925c:	f012 fc6c 	bl	3bb38 <printk>
   29260:	2145      	movs	r1, #69	; 0x45
   29262:	4640      	mov	r0, r8
   29264:	f012 febc 	bl	3bfe0 <assert_post_action>
   29268:	e7e0      	b.n	2922c <nrfx_gpio_handler+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2926a:	462b      	mov	r3, r5
   2926c:	e7e8      	b.n	29240 <nrfx_gpio_handler+0x3c>
}
   2926e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29272:	bf00      	nop
   29274:	00041c84 	.word	0x00041c84
   29278:	00042df0 	.word	0x00042df0

0002927c <gpio_nrfx_pin_interrupt_configure>:
{
   2927c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2927e:	b085      	sub	sp, #20
   29280:	460e      	mov	r6, r1
   29282:	4619      	mov	r1, r3
	return port->config;
   29284:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   29286:	7b1b      	ldrb	r3, [r3, #12]
   29288:	f006 051f 	and.w	r5, r6, #31
   2928c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   29290:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   29294:	d022      	beq.n	292dc <gpio_nrfx_pin_interrupt_configure+0x60>
   29296:	4607      	mov	r7, r0
   29298:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2929a:	2300      	movs	r3, #0
   2929c:	9302      	str	r3, [sp, #8]
   2929e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   292a0:	4610      	mov	r0, r2
   292a2:	f013 fced 	bl	3cc80 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   292a6:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   292aa:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   292ac:	6899      	ldr	r1, [r3, #8]
   292ae:	40f1      	lsrs	r1, r6
   292b0:	f011 0101 	ands.w	r1, r1, #1
   292b4:	d102      	bne.n	292bc <gpio_nrfx_pin_interrupt_configure+0x40>
   292b6:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   292ba:	d014      	beq.n	292e6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   292bc:	2300      	movs	r3, #0
   292be:	aa02      	add	r2, sp, #8
   292c0:	4619      	mov	r1, r3
   292c2:	4628      	mov	r0, r5
   292c4:	f008 fa8e 	bl	317e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   292c8:	4b2b      	ldr	r3, [pc, #172]	; (29378 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   292ca:	4298      	cmp	r0, r3
   292cc:	d150      	bne.n	29370 <gpio_nrfx_pin_interrupt_configure+0xf4>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   292ce:	2101      	movs	r1, #1
   292d0:	4628      	mov	r0, r5
   292d2:	f008 fcd1 	bl	31c78 <nrfx_gpiote_trigger_enable>
	return 0;
   292d6:	2000      	movs	r0, #0
}
   292d8:	b005      	add	sp, #20
   292da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   292dc:	4628      	mov	r0, r5
   292de:	f008 fdad 	bl	31e3c <nrfx_gpiote_trigger_disable>
		return 0;
   292e2:	2000      	movs	r0, #0
   292e4:	e7f8      	b.n	292d8 <gpio_nrfx_pin_interrupt_configure+0x5c>
    switch (port)
   292e6:	096b      	lsrs	r3, r5, #5
   292e8:	d101      	bne.n	292ee <gpio_nrfx_pin_interrupt_configure+0x72>
            mask = P0_FEATURE_PINS_PRESENT;
   292ea:	f04f 31ff 	mov.w	r1, #4294967295
    pin_number &= 0x1F;
   292ee:	f005 031f 	and.w	r3, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   292f2:	40d9      	lsrs	r1, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   292f4:	f011 0f01 	tst.w	r1, #1
   292f8:	d016      	beq.n	29328 <gpio_nrfx_pin_interrupt_configure+0xac>
    *p_pin = pin_number & 0x1F;
   292fa:	f005 041f 	and.w	r4, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   292fe:	096b      	lsrs	r3, r5, #5
   29300:	d11f      	bne.n	29342 <gpio_nrfx_pin_interrupt_configure+0xc6>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   29302:	3480      	adds	r4, #128	; 0x80
   29304:	4b1d      	ldr	r3, [pc, #116]	; (2937c <gpio_nrfx_pin_interrupt_configure+0x100>)
   29306:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2930a:	f013 0f01 	tst.w	r3, #1
   2930e:	d1d5      	bne.n	292bc <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   29310:	f10d 0107 	add.w	r1, sp, #7
   29314:	4628      	mov	r0, r5
   29316:	f008 fc41 	bl	31b9c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2931a:	4b19      	ldr	r3, [pc, #100]	; (29380 <gpio_nrfx_pin_interrupt_configure+0x104>)
   2931c:	4298      	cmp	r0, r3
   2931e:	d01d      	beq.n	2935c <gpio_nrfx_pin_interrupt_configure+0xe0>
		trigger_config.p_in_channel = &ch;
   29320:	f10d 0307 	add.w	r3, sp, #7
   29324:	9303      	str	r3, [sp, #12]
   29326:	e7c9      	b.n	292bc <gpio_nrfx_pin_interrupt_configure+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29328:	4c16      	ldr	r4, [pc, #88]	; (29384 <gpio_nrfx_pin_interrupt_configure+0x108>)
   2932a:	f240 2229 	movw	r2, #553	; 0x229
   2932e:	4621      	mov	r1, r4
   29330:	4815      	ldr	r0, [pc, #84]	; (29388 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   29332:	f012 fc01 	bl	3bb38 <printk>
   29336:	f240 2129 	movw	r1, #553	; 0x229
   2933a:	4620      	mov	r0, r4
   2933c:	f012 fe50 	bl	3bfe0 <assert_post_action>
   29340:	e7db      	b.n	292fa <gpio_nrfx_pin_interrupt_configure+0x7e>
            NRFX_ASSERT(0);
   29342:	4e10      	ldr	r6, [pc, #64]	; (29384 <gpio_nrfx_pin_interrupt_configure+0x108>)
   29344:	f240 222e 	movw	r2, #558	; 0x22e
   29348:	4631      	mov	r1, r6
   2934a:	480f      	ldr	r0, [pc, #60]	; (29388 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   2934c:	f012 fbf4 	bl	3bb38 <printk>
   29350:	f240 212e 	movw	r1, #558	; 0x22e
   29354:	4630      	mov	r0, r6
   29356:	f012 fe43 	bl	3bfe0 <assert_post_action>
   2935a:	e7d2      	b.n	29302 <gpio_nrfx_pin_interrupt_configure+0x86>
			err = nrfx_gpiote_channel_alloc(&ch);
   2935c:	f10d 0007 	add.w	r0, sp, #7
   29360:	f008 fc82 	bl	31c68 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   29364:	4b04      	ldr	r3, [pc, #16]	; (29378 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   29366:	4298      	cmp	r0, r3
   29368:	d0da      	beq.n	29320 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   2936a:	f06f 000b 	mvn.w	r0, #11
   2936e:	e7b3      	b.n	292d8 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   29370:	f06f 0004 	mvn.w	r0, #4
   29374:	e7b0      	b.n	292d8 <gpio_nrfx_pin_interrupt_configure+0x5c>
   29376:	bf00      	nop
   29378:	0bad0000 	.word	0x0bad0000
   2937c:	40842500 	.word	0x40842500
   29380:	0bad0004 	.word	0x0bad0004
   29384:	00042e20 	.word	0x00042e20
   29388:	00041c84 	.word	0x00041c84

0002938c <pin_uninit>:
{
   2938c:	b530      	push	{r4, r5, lr}
   2938e:	b083      	sub	sp, #12
   29390:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   29392:	f10d 0107 	add.w	r1, sp, #7
   29396:	f008 fc01 	bl	31b9c <nrfx_gpiote_channel_get>
   2939a:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   2939c:	4620      	mov	r0, r4
   2939e:	f008 fda3 	bl	31ee8 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   293a2:	4b0b      	ldr	r3, [pc, #44]	; (293d0 <pin_uninit+0x44>)
   293a4:	4298      	cmp	r0, r3
   293a6:	d10f      	bne.n	293c8 <pin_uninit+0x3c>
	if (free_ch) {
   293a8:	429d      	cmp	r5, r3
   293aa:	d005      	beq.n	293b8 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   293ac:	4b08      	ldr	r3, [pc, #32]	; (293d0 <pin_uninit+0x44>)
   293ae:	4298      	cmp	r0, r3
   293b0:	d107      	bne.n	293c2 <pin_uninit+0x36>
   293b2:	2000      	movs	r0, #0
}
   293b4:	b003      	add	sp, #12
   293b6:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   293b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   293bc:	f008 fc4c 	bl	31c58 <nrfx_gpiote_channel_free>
   293c0:	e7f4      	b.n	293ac <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   293c2:	f06f 0004 	mvn.w	r0, #4
   293c6:	e7f5      	b.n	293b4 <pin_uninit+0x28>
		return -EIO;
   293c8:	f06f 0004 	mvn.w	r0, #4
   293cc:	e7f2      	b.n	293b4 <pin_uninit+0x28>
   293ce:	bf00      	nop
   293d0:	0bad0000 	.word	0x0bad0000

000293d4 <gpio_nrfx_pin_configure>:
{
   293d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   293d8:	b087      	sub	sp, #28
	return port->config;
   293da:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   293de:	f898 300c 	ldrb.w	r3, [r8, #12]
   293e2:	f001 051f 	and.w	r5, r1, #31
   293e6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   293ea:	2a00      	cmp	r2, #0
   293ec:	d043      	beq.n	29476 <gpio_nrfx_pin_configure+0xa2>
   293ee:	460c      	mov	r4, r1
   293f0:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   293f2:	2600      	movs	r6, #0
   293f4:	9603      	str	r6, [sp, #12]
   293f6:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   293f8:	f10d 0117 	add.w	r1, sp, #23
   293fc:	4620      	mov	r0, r4
   293fe:	f008 fbcd 	bl	31b9c <nrfx_gpiote_channel_get>
   29402:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   29404:	4633      	mov	r3, r6
   29406:	aa03      	add	r2, sp, #12
   29408:	4631      	mov	r1, r6
   2940a:	4628      	mov	r0, r5
   2940c:	f008 f9ea 	bl	317e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   29410:	4b2f      	ldr	r3, [pc, #188]	; (294d0 <gpio_nrfx_pin_configure+0xfc>)
   29412:	4298      	cmp	r0, r3
   29414:	d159      	bne.n	294ca <gpio_nrfx_pin_configure+0xf6>
	if (free_ch) {
   29416:	4599      	cmp	r9, r3
   29418:	d035      	beq.n	29486 <gpio_nrfx_pin_configure+0xb2>
	if (flags & GPIO_OUTPUT) {
   2941a:	f417 7f00 	tst.w	r7, #512	; 0x200
   2941e:	d041      	beq.n	294a4 <gpio_nrfx_pin_configure+0xd0>
		int rv = get_drive(flags, &drive);
   29420:	f10d 0103 	add.w	r1, sp, #3
   29424:	4638      	mov	r0, r7
   29426:	f7ff fe49 	bl	290bc <get_drive>
		if (rv != 0) {
   2942a:	4606      	mov	r6, r0
   2942c:	bb38      	cbnz	r0, 2947e <gpio_nrfx_pin_configure+0xaa>
		nrfx_gpiote_output_config_t output_config = {
   2942e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   29432:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   29436:	f417 7f80 	tst.w	r7, #256	; 0x100
   2943a:	bf0c      	ite	eq
   2943c:	2301      	moveq	r3, #1
   2943e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   29440:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   29444:	4638      	mov	r0, r7
   29446:	f013 fbef 	bl	3cc28 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   2944a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2944e:	f417 6f00 	tst.w	r7, #2048	; 0x800
   29452:	d01d      	beq.n	29490 <gpio_nrfx_pin_configure+0xbc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   29454:	f8d8 3004 	ldr.w	r3, [r8, #4]
   29458:	2101      	movs	r1, #1
   2945a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   2945e:	609c      	str	r4, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   29460:	2200      	movs	r2, #0
   29462:	a901      	add	r1, sp, #4
   29464:	4628      	mov	r0, r5
   29466:	f008 faa1 	bl	319ac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2946a:	4b19      	ldr	r3, [pc, #100]	; (294d0 <gpio_nrfx_pin_configure+0xfc>)
   2946c:	4298      	cmp	r0, r3
   2946e:	d006      	beq.n	2947e <gpio_nrfx_pin_configure+0xaa>
   29470:	f06f 0615 	mvn.w	r6, #21
   29474:	e003      	b.n	2947e <gpio_nrfx_pin_configure+0xaa>
		return pin_uninit(abs_pin);
   29476:	4628      	mov	r0, r5
   29478:	f7ff ff88 	bl	2938c <pin_uninit>
   2947c:	4606      	mov	r6, r0
}
   2947e:	4630      	mov	r0, r6
   29480:	b007      	add	sp, #28
   29482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   29486:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2948a:	f008 fbe5 	bl	31c58 <nrfx_gpiote_channel_free>
   2948e:	e7c4      	b.n	2941a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   29490:	f417 6f80 	tst.w	r7, #1024	; 0x400
   29494:	d0e4      	beq.n	29460 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   29496:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2949a:	2301      	movs	r3, #1
   2949c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   294a0:	60d4      	str	r4, [r2, #12]
}
   294a2:	e7dd      	b.n	29460 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
   294a4:	4638      	mov	r0, r7
   294a6:	f013 fbbf 	bl	3cc28 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   294aa:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   294ae:	2300      	movs	r3, #0
   294b0:	461a      	mov	r2, r3
   294b2:	a902      	add	r1, sp, #8
   294b4:	4628      	mov	r0, r5
   294b6:	f008 f995 	bl	317e4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   294ba:	4b05      	ldr	r3, [pc, #20]	; (294d0 <gpio_nrfx_pin_configure+0xfc>)
   294bc:	4298      	cmp	r0, r3
   294be:	d101      	bne.n	294c4 <gpio_nrfx_pin_configure+0xf0>
   294c0:	2600      	movs	r6, #0
   294c2:	e7dc      	b.n	2947e <gpio_nrfx_pin_configure+0xaa>
   294c4:	f06f 0615 	mvn.w	r6, #21
   294c8:	e7d9      	b.n	2947e <gpio_nrfx_pin_configure+0xaa>
		return -EINVAL;
   294ca:	f06f 0615 	mvn.w	r6, #21
   294ce:	e7d6      	b.n	2947e <gpio_nrfx_pin_configure+0xaa>
   294d0:	0bad0000 	.word	0x0bad0000

000294d4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   294d4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   294d6:	f008 fbb5 	bl	31c44 <nrfx_gpiote_is_init>
   294da:	b108      	cbz	r0, 294e0 <gpio_nrfx_init+0xc>
		return 0;
   294dc:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   294de:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   294e0:	f008 fb86 	bl	31bf0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   294e4:	4b08      	ldr	r3, [pc, #32]	; (29508 <gpio_nrfx_init+0x34>)
   294e6:	4298      	cmp	r0, r3
   294e8:	d10a      	bne.n	29500 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   294ea:	2100      	movs	r1, #0
   294ec:	4807      	ldr	r0, [pc, #28]	; (2950c <gpio_nrfx_init+0x38>)
   294ee:	f008 fb4f 	bl	31b90 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   294f2:	2200      	movs	r2, #0
   294f4:	2105      	movs	r1, #5
   294f6:	2031      	movs	r0, #49	; 0x31
   294f8:	f7fe f9b0 	bl	2785c <z_arm_irq_priority_set>
	return 0;
   294fc:	2000      	movs	r0, #0
   294fe:	e7ee      	b.n	294de <gpio_nrfx_init+0xa>
		return -EIO;
   29500:	f06f 0004 	mvn.w	r0, #4
   29504:	e7eb      	b.n	294de <gpio_nrfx_init+0xa>
   29506:	bf00      	nop
   29508:	0bad0000 	.word	0x0bad0000
   2950c:	00029205 	.word	0x00029205

00029510 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   29510:	4b03      	ldr	r3, [pc, #12]	; (29520 <nvmc_wait_ready+0x10>)
   29512:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   29516:	f013 0f01 	tst.w	r3, #1
   2951a:	d0f9      	beq.n	29510 <nvmc_wait_ready>
	}
}
   2951c:	4770      	bx	lr
   2951e:	bf00      	nop
   29520:	40039000 	.word	0x40039000

00029524 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   29524:	4b02      	ldr	r3, [pc, #8]	; (29530 <flash_nrf_pages_layout+0xc>)
   29526:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   29528:	2301      	movs	r3, #1
   2952a:	6013      	str	r3, [r2, #0]
}
   2952c:	4770      	bx	lr
   2952e:	bf00      	nop
   29530:	20010040 	.word	0x20010040

00029534 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   29534:	4800      	ldr	r0, [pc, #0]	; (29538 <flash_nrf_get_parameters+0x4>)
   29536:	4770      	bx	lr
   29538:	00042f14 	.word	0x00042f14

0002953c <flash_nrf_erase>:
{
   2953c:	b570      	push	{r4, r5, r6, lr}
   2953e:	460c      	mov	r4, r1
   29540:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   29542:	f015 fb52 	bl	3ebea <nrfx_nvmc_flash_page_size_get>
   29546:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
   29548:	f015 fb4b 	bl	3ebe2 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2954c:	42a0      	cmp	r0, r4
   2954e:	d914      	bls.n	2957a <flash_nrf_erase+0x3e>
   29550:	2c00      	cmp	r4, #0
   29552:	db12      	blt.n	2957a <flash_nrf_erase+0x3e>
	    addr < 0 ||
   29554:	42a8      	cmp	r0, r5
   29556:	d310      	bcc.n	2957a <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
   29558:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   2955a:	4283      	cmp	r3, r0
   2955c:	d80d      	bhi.n	2957a <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2955e:	fbb4 f3f6 	udiv	r3, r4, r6
   29562:	fb06 4313 	mls	r3, r6, r3, r4
   29566:	b9f3      	cbnz	r3, 295a6 <flash_nrf_erase+0x6a>
   29568:	fbb5 f3f6 	udiv	r3, r5, r6
   2956c:	fb06 5313 	mls	r3, r6, r3, r5
   29570:	b9cb      	cbnz	r3, 295a6 <flash_nrf_erase+0x6a>
		if (!n_pages) {
   29572:	42b5      	cmp	r5, r6
   29574:	d22c      	bcs.n	295d0 <flash_nrf_erase+0x94>
			return 0;
   29576:	2400      	movs	r4, #0
   29578:	e013      	b.n	295a2 <flash_nrf_erase+0x66>
   2957a:	4b1e      	ldr	r3, [pc, #120]	; (295f4 <flash_nrf_erase+0xb8>)
   2957c:	4a1e      	ldr	r2, [pc, #120]	; (295f8 <flash_nrf_erase+0xbc>)
   2957e:	1a9b      	subs	r3, r3, r2
   29580:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   29582:	f04f 0000 	mov.w	r0, #0
   29586:	2201      	movs	r2, #1
   29588:	f362 0002 	bfi	r0, r2, #0, #3
   2958c:	f36f 00c5 	bfc	r0, #3, #3
   29590:	f363 108f 	bfi	r0, r3, #6, #10
   29594:	462b      	mov	r3, r5
   29596:	4622      	mov	r2, r4
   29598:	4918      	ldr	r1, [pc, #96]	; (295fc <flash_nrf_erase+0xc0>)
   2959a:	f012 fd55 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2959e:	f06f 0415 	mvn.w	r4, #21
}
   295a2:	4620      	mov	r0, r4
   295a4:	bd70      	pop	{r4, r5, r6, pc}
   295a6:	4b13      	ldr	r3, [pc, #76]	; (295f4 <flash_nrf_erase+0xb8>)
   295a8:	4a13      	ldr	r2, [pc, #76]	; (295f8 <flash_nrf_erase+0xbc>)
   295aa:	1a9b      	subs	r3, r3, r2
   295ac:	08db      	lsrs	r3, r3, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   295ae:	f04f 0000 	mov.w	r0, #0
   295b2:	2201      	movs	r2, #1
   295b4:	f362 0002 	bfi	r0, r2, #0, #3
   295b8:	f36f 00c5 	bfc	r0, #3, #3
   295bc:	f363 108f 	bfi	r0, r3, #6, #10
   295c0:	462b      	mov	r3, r5
   295c2:	4622      	mov	r2, r4
   295c4:	490e      	ldr	r1, [pc, #56]	; (29600 <flash_nrf_erase+0xc4>)
   295c6:	f012 fd3f 	bl	3c048 <log_string_sync>
			return -EINVAL;
   295ca:	f06f 0415 	mvn.w	r4, #21
   295ce:	e7e8      	b.n	295a2 <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
   295d0:	4e0c      	ldr	r6, [pc, #48]	; (29604 <flash_nrf_erase+0xc8>)
   295d2:	f04f 32ff 	mov.w	r2, #4294967295
   295d6:	f04f 33ff 	mov.w	r3, #4294967295
   295da:	4630      	mov	r0, r6
   295dc:	f00c ffe2 	bl	365a4 <z_impl_k_sem_take>
		ret = erase(addr, size);
   295e0:	4629      	mov	r1, r5
   295e2:	4620      	mov	r0, r4
   295e4:	f013 fb7e 	bl	3cce4 <erase>
   295e8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   295ea:	4630      	mov	r0, r6
   295ec:	f00c ff9c 	bl	36528 <z_impl_k_sem_give>
	return ret;
   295f0:	e7d7      	b.n	295a2 <flash_nrf_erase+0x66>
   295f2:	bf00      	nop
   295f4:	00041280 	.word	0x00041280
   295f8:	00041200 	.word	0x00041200
   295fc:	00042e90 	.word	0x00042e90
   29600:	00042eb0 	.word	0x00042eb0
   29604:	20010048 	.word	0x20010048

00029608 <flash_nrf_write>:
{
   29608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2960a:	460c      	mov	r4, r1
   2960c:	4616      	mov	r6, r2
   2960e:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   29610:	f015 fae7 	bl	3ebe2 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   29614:	42a0      	cmp	r0, r4
   29616:	d90f      	bls.n	29638 <flash_nrf_write+0x30>
   29618:	2c00      	cmp	r4, #0
   2961a:	db0d      	blt.n	29638 <flash_nrf_write+0x30>
	    addr < 0 ||
   2961c:	42a8      	cmp	r0, r5
   2961e:	d30b      	bcc.n	29638 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
   29620:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   29622:	4298      	cmp	r0, r3
   29624:	d308      	bcc.n	29638 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   29626:	f014 0f03 	tst.w	r4, #3
   2962a:	d11b      	bne.n	29664 <flash_nrf_write+0x5c>
   2962c:	f015 0f03 	tst.w	r5, #3
   29630:	d118      	bne.n	29664 <flash_nrf_write+0x5c>
	if (!len) {
   29632:	bb65      	cbnz	r5, 2968e <flash_nrf_write+0x86>
		return 0;
   29634:	2400      	movs	r4, #0
   29636:	e013      	b.n	29660 <flash_nrf_write+0x58>
   29638:	4b1e      	ldr	r3, [pc, #120]	; (296b4 <flash_nrf_write+0xac>)
   2963a:	4a1f      	ldr	r2, [pc, #124]	; (296b8 <flash_nrf_write+0xb0>)
   2963c:	1a9b      	subs	r3, r3, r2
   2963e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   29640:	f04f 0000 	mov.w	r0, #0
   29644:	2201      	movs	r2, #1
   29646:	f362 0002 	bfi	r0, r2, #0, #3
   2964a:	f36f 00c5 	bfc	r0, #3, #3
   2964e:	f363 108f 	bfi	r0, r3, #6, #10
   29652:	462b      	mov	r3, r5
   29654:	4622      	mov	r2, r4
   29656:	4919      	ldr	r1, [pc, #100]	; (296bc <flash_nrf_write+0xb4>)
   29658:	f012 fcf6 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2965c:	f06f 0415 	mvn.w	r4, #21
}
   29660:	4620      	mov	r0, r4
   29662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29664:	4b13      	ldr	r3, [pc, #76]	; (296b4 <flash_nrf_write+0xac>)
   29666:	4a14      	ldr	r2, [pc, #80]	; (296b8 <flash_nrf_write+0xb0>)
   29668:	1a9b      	subs	r3, r3, r2
   2966a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2966c:	f04f 0000 	mov.w	r0, #0
   29670:	2201      	movs	r2, #1
   29672:	f362 0002 	bfi	r0, r2, #0, #3
   29676:	f36f 00c5 	bfc	r0, #3, #3
   2967a:	f363 108f 	bfi	r0, r3, #6, #10
   2967e:	462b      	mov	r3, r5
   29680:	4622      	mov	r2, r4
   29682:	490f      	ldr	r1, [pc, #60]	; (296c0 <flash_nrf_write+0xb8>)
   29684:	f012 fce0 	bl	3c048 <log_string_sync>
		return -EINVAL;
   29688:	f06f 0415 	mvn.w	r4, #21
   2968c:	e7e8      	b.n	29660 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   2968e:	4f0d      	ldr	r7, [pc, #52]	; (296c4 <flash_nrf_write+0xbc>)
   29690:	f04f 32ff 	mov.w	r2, #4294967295
   29694:	f04f 33ff 	mov.w	r3, #4294967295
   29698:	4638      	mov	r0, r7
   2969a:	f00c ff83 	bl	365a4 <z_impl_k_sem_take>
		ret = write(addr, data, len);
   2969e:	462a      	mov	r2, r5
   296a0:	4631      	mov	r1, r6
   296a2:	4620      	mov	r0, r4
   296a4:	f013 fb3d 	bl	3cd22 <write>
   296a8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   296aa:	4638      	mov	r0, r7
   296ac:	f00c ff3c 	bl	36528 <z_impl_k_sem_give>
	return ret;
   296b0:	e7d6      	b.n	29660 <flash_nrf_write+0x58>
   296b2:	bf00      	nop
   296b4:	00041280 	.word	0x00041280
   296b8:	00041200 	.word	0x00041200
   296bc:	00042e90 	.word	0x00042e90
   296c0:	00042ed0 	.word	0x00042ed0
   296c4:	20010048 	.word	0x20010048

000296c8 <flash_nrf_read>:
{
   296c8:	b570      	push	{r4, r5, r6, lr}
   296ca:	460c      	mov	r4, r1
   296cc:	4616      	mov	r6, r2
   296ce:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   296d0:	f015 fa87 	bl	3ebe2 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   296d4:	4284      	cmp	r4, r0
   296d6:	d211      	bcs.n	296fc <flash_nrf_read+0x34>
   296d8:	2c00      	cmp	r4, #0
   296da:	db0f      	blt.n	296fc <flash_nrf_read+0x34>
	    addr < 0 ||
   296dc:	42a8      	cmp	r0, r5
   296de:	d30d      	bcc.n	296fc <flash_nrf_read+0x34>
	    (addr) + len > flash_size) {
   296e0:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   296e2:	4283      	cmp	r3, r0
   296e4:	d80a      	bhi.n	296fc <flash_nrf_read+0x34>
	if (!len) {
   296e6:	b325      	cbz	r5, 29732 <flash_nrf_read+0x6a>
	if (addr < PM_APP_ADDRESS) {
   296e8:	4b13      	ldr	r3, [pc, #76]	; (29738 <flash_nrf_read+0x70>)
   296ea:	429c      	cmp	r4, r3
   296ec:	dd1b      	ble.n	29726 <flash_nrf_read+0x5e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   296ee:	462a      	mov	r2, r5
   296f0:	4621      	mov	r1, r4
   296f2:	4630      	mov	r0, r6
   296f4:	f016 fc04 	bl	3ff00 <memcpy>
	return 0;
   296f8:	2000      	movs	r0, #0
   296fa:	e013      	b.n	29724 <flash_nrf_read+0x5c>
   296fc:	4b0f      	ldr	r3, [pc, #60]	; (2973c <flash_nrf_read+0x74>)
   296fe:	4a10      	ldr	r2, [pc, #64]	; (29740 <flash_nrf_read+0x78>)
   29700:	1a9b      	subs	r3, r3, r2
   29702:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
   29704:	f04f 0000 	mov.w	r0, #0
   29708:	2201      	movs	r2, #1
   2970a:	f362 0002 	bfi	r0, r2, #0, #3
   2970e:	f36f 00c5 	bfc	r0, #3, #3
   29712:	f363 108f 	bfi	r0, r3, #6, #10
   29716:	462b      	mov	r3, r5
   29718:	4622      	mov	r2, r4
   2971a:	490a      	ldr	r1, [pc, #40]	; (29744 <flash_nrf_read+0x7c>)
   2971c:	f012 fc94 	bl	3c048 <log_string_sync>
		return -EINVAL;
   29720:	f06f 0015 	mvn.w	r0, #21
}
   29724:	bd70      	pop	{r4, r5, r6, pc}
		return spm_request_read(data, addr, len);
   29726:	462a      	mov	r2, r5
   29728:	4621      	mov	r1, r4
   2972a:	4630      	mov	r0, r6
   2972c:	f012 fff2 	bl	3c714 <spm_request_read>
   29730:	e7f8      	b.n	29724 <flash_nrf_read+0x5c>
		return 0;
   29732:	2000      	movs	r0, #0
   29734:	e7f6      	b.n	29724 <flash_nrf_read+0x5c>
   29736:	bf00      	nop
   29738:	000201ff 	.word	0x000201ff
   2973c:	00041280 	.word	0x00041280
   29740:	00041200 	.word	0x00041200
   29744:	00042e90 	.word	0x00042e90

00029748 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   29748:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2974a:	2201      	movs	r2, #1
   2974c:	4611      	mov	r1, r2
   2974e:	4806      	ldr	r0, [pc, #24]	; (29768 <nrf_flash_init+0x20>)
   29750:	f016 fa73 	bl	3fc3a <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   29754:	f015 fa4d 	bl	3ebf2 <nrfx_nvmc_flash_page_count_get>
   29758:	4c04      	ldr	r4, [pc, #16]	; (2976c <nrf_flash_init+0x24>)
   2975a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2975c:	f015 fa45 	bl	3ebea <nrfx_nvmc_flash_page_size_get>
   29760:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   29762:	2000      	movs	r0, #0
   29764:	bd10      	pop	{r4, pc}
   29766:	bf00      	nop
   29768:	20010048 	.word	0x20010048
   2976c:	20010040 	.word	0x20010040

00029770 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   29770:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   29772:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   29774:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   29778:	d06f      	beq.n	2985a <baudrate_set+0xea>
   2977a:	d83a      	bhi.n	297f2 <baudrate_set+0x82>
   2977c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   29780:	d06e      	beq.n	29860 <baudrate_set+0xf0>
   29782:	d90a      	bls.n	2979a <baudrate_set+0x2a>
   29784:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   29788:	d075      	beq.n	29876 <baudrate_set+0x106>
   2978a:	d924      	bls.n	297d6 <baudrate_set+0x66>
   2978c:	f647 2312 	movw	r3, #31250	; 0x7a12
   29790:	4299      	cmp	r1, r3
   29792:	d12b      	bne.n	297ec <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   29794:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   29798:	e013      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   2979a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   2979e:	d061      	beq.n	29864 <baudrate_set+0xf4>
   297a0:	d907      	bls.n	297b2 <baudrate_set+0x42>
   297a2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   297a6:	d063      	beq.n	29870 <baudrate_set+0x100>
   297a8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   297ac:	d110      	bne.n	297d0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   297ae:	4b3c      	ldr	r3, [pc, #240]	; (298a0 <baudrate_set+0x130>)
   297b0:	e007      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   297b2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   297b6:	d058      	beq.n	2986a <baudrate_set+0xfa>
   297b8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   297bc:	d105      	bne.n	297ca <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   297be:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   297c2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   297c6:	2000      	movs	r0, #0
   297c8:	4770      	bx	lr
	switch (baudrate) {
   297ca:	f06f 0015 	mvn.w	r0, #21
   297ce:	4770      	bx	lr
   297d0:	f06f 0015 	mvn.w	r0, #21
   297d4:	4770      	bx	lr
   297d6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   297da:	d04e      	beq.n	2987a <baudrate_set+0x10a>
   297dc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   297e0:	d101      	bne.n	297e6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   297e2:	4b30      	ldr	r3, [pc, #192]	; (298a4 <baudrate_set+0x134>)
   297e4:	e7ed      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   297e6:	f06f 0015 	mvn.w	r0, #21
   297ea:	4770      	bx	lr
   297ec:	f06f 0015 	mvn.w	r0, #21
   297f0:	4770      	bx	lr
   297f2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   297f6:	d042      	beq.n	2987e <baudrate_set+0x10e>
   297f8:	d909      	bls.n	2980e <baudrate_set+0x9e>
   297fa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   297fe:	d046      	beq.n	2988e <baudrate_set+0x11e>
   29800:	d91f      	bls.n	29842 <baudrate_set+0xd2>
   29802:	4b29      	ldr	r3, [pc, #164]	; (298a8 <baudrate_set+0x138>)
   29804:	4299      	cmp	r1, r3
   29806:	d148      	bne.n	2989a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   29808:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2980c:	e7d9      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   2980e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   29812:	d037      	beq.n	29884 <baudrate_set+0x114>
   29814:	d905      	bls.n	29822 <baudrate_set+0xb2>
   29816:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   2981a:	d10f      	bne.n	2983c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2981c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   29820:	e7cf      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   29822:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   29826:	4299      	cmp	r1, r3
   29828:	d02e      	beq.n	29888 <baudrate_set+0x118>
   2982a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   2982e:	d102      	bne.n	29836 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   29830:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   29834:	e7c5      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   29836:	f06f 0015 	mvn.w	r0, #21
   2983a:	4770      	bx	lr
   2983c:	f06f 0015 	mvn.w	r0, #21
   29840:	4770      	bx	lr
   29842:	4b1a      	ldr	r3, [pc, #104]	; (298ac <baudrate_set+0x13c>)
   29844:	4299      	cmp	r1, r3
   29846:	d025      	beq.n	29894 <baudrate_set+0x124>
   29848:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   2984c:	d102      	bne.n	29854 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2984e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   29852:	e7b6      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   29854:	f06f 0015 	mvn.w	r0, #21
   29858:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2985a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2985e:	e7b0      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   29860:	4b13      	ldr	r3, [pc, #76]	; (298b0 <baudrate_set+0x140>)
   29862:	e7ae      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   29864:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   29868:	e7ab      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   2986a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2986e:	e7a8      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   29870:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   29874:	e7a5      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   29876:	4b0f      	ldr	r3, [pc, #60]	; (298b4 <baudrate_set+0x144>)
   29878:	e7a3      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2987a:	4b0f      	ldr	r3, [pc, #60]	; (298b8 <baudrate_set+0x148>)
   2987c:	e7a1      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2987e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   29882:	e79e      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   29884:	4b0d      	ldr	r3, [pc, #52]	; (298bc <baudrate_set+0x14c>)
   29886:	e79c      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   29888:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2988c:	e799      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2988e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   29892:	e796      	b.n	297c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   29894:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   29898:	e793      	b.n	297c2 <baudrate_set+0x52>
	switch (baudrate) {
   2989a:	f06f 0015 	mvn.w	r0, #21
}
   2989e:	4770      	bx	lr
   298a0:	0013b000 	.word	0x0013b000
   298a4:	004ea000 	.word	0x004ea000
   298a8:	000f4240 	.word	0x000f4240
   298ac:	0003d090 	.word	0x0003d090
   298b0:	00275000 	.word	0x00275000
   298b4:	0075c000 	.word	0x0075c000
   298b8:	003af000 	.word	0x003af000
   298bc:	013a9000 	.word	0x013a9000

000298c0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   298c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   298c4:	4605      	mov	r5, r0
   298c6:	4688      	mov	r8, r1
	return dev->data;
   298c8:	6907      	ldr	r7, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   298ca:	f016 f957 	bl	3fb7c <k_is_in_isr>
   298ce:	b920      	cbnz	r0, 298da <uarte_nrfx_poll_out+0x1a>
	return !z_sys_post_kernel;
   298d0:	4b1d      	ldr	r3, [pc, #116]	; (29948 <uarte_nrfx_poll_out+0x88>)
   298d2:	781b      	ldrb	r3, [r3, #0]
   298d4:	b1ab      	cbz	r3, 29902 <uarte_nrfx_poll_out+0x42>
   298d6:	2300      	movs	r3, #0
   298d8:	e000      	b.n	298dc <uarte_nrfx_poll_out+0x1c>
   298da:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   298dc:	b313      	cbz	r3, 29924 <uarte_nrfx_poll_out+0x64>
	__asm__ volatile(
   298de:	f04f 0320 	mov.w	r3, #32
   298e2:	f3ef 8411 	mrs	r4, BASEPRI
   298e6:	f383 8812 	msr	BASEPRI_MAX, r3
   298ea:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   298ee:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   298f0:	4628      	mov	r0, r5
   298f2:	f013 fb01 	bl	3cef8 <is_tx_ready>
   298f6:	b930      	cbnz	r0, 29906 <uarte_nrfx_poll_out+0x46>
	__asm__ volatile(
   298f8:	f384 8811 	msr	BASEPRI, r4
   298fc:	f3bf 8f6f 	isb	sy
}
   29900:	e7ed      	b.n	298de <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   29902:	2301      	movs	r3, #1
   29904:	e7ea      	b.n	298dc <uarte_nrfx_poll_out+0x1c>
#if CONFIG_UART_ASYNC_API
				if (data->async && data->async->tx_size &&
   29906:	68fb      	ldr	r3, [r7, #12]
   29908:	b183      	cbz	r3, 2992c <uarte_nrfx_poll_out+0x6c>
   2990a:	68da      	ldr	r2, [r3, #12]
   2990c:	b172      	cbz	r2, 2992c <uarte_nrfx_poll_out+0x6c>
					data->async->tx_amount < 0) {
   2990e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   29912:	2a00      	cmp	r2, #0
   29914:	da0a      	bge.n	2992c <uarte_nrfx_poll_out+0x6c>
	return dev->config;
   29916:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   29918:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   2991a:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   2991e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
   29922:	e003      	b.n	2992c <uarte_nrfx_poll_out+0x6c>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   29924:	4628      	mov	r0, r5
   29926:	f013 fbdc 	bl	3d0e2 <wait_tx_ready>
   2992a:	4606      	mov	r6, r0
	}

	data->char_out = c;
   2992c:	4639      	mov	r1, r7
   2992e:	f801 8f14 	strb.w	r8, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   29932:	2201      	movs	r2, #1
   29934:	4628      	mov	r0, r5
   29936:	f013 fc20 	bl	3d17a <tx_start>
	__asm__ volatile(
   2993a:	f386 8811 	msr	BASEPRI, r6
   2993e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   29942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29946:	bf00      	nop
   29948:	20010f3e 	.word	0x20010f3e

0002994c <uarte_nrfx_rx_enable>:
{
   2994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29950:	4616      	mov	r6, r2
	return dev->data;
   29952:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   29954:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   29956:	f8d2 8000 	ldr.w	r8, [r2]
	if (cfg->disable_rx) {
   2995a:	7a12      	ldrb	r2, [r2, #8]
   2995c:	2a00      	cmp	r2, #0
   2995e:	d151      	bne.n	29a04 <uarte_nrfx_rx_enable+0xb8>
   29960:	4605      	mov	r5, r0
   29962:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
   29964:	68e2      	ldr	r2, [r4, #12]
   29966:	f892 10d2 	ldrb.w	r1, [r2, #210]	; 0xd2
   2996a:	2900      	cmp	r1, #0
   2996c:	f040 8082 	bne.w	29a74 <uarte_nrfx_rx_enable+0x128>
	data->async->rx_timeout = timeout;
   29970:	67d3      	str	r3, [r2, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   29972:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   29976:	dd54      	ble.n	29a22 <uarte_nrfx_rx_enable+0xd6>
   29978:	4a40      	ldr	r2, [pc, #256]	; (29a7c <uarte_nrfx_rx_enable+0x130>)
   2997a:	fb82 1203 	smull	r1, r2, r2, r3
   2997e:	17db      	asrs	r3, r3, #31
   29980:	ebc3 0362 	rsb	r3, r3, r2, asr #1
	data->async->rx_timeout_slab =
   29984:	68e2      	ldr	r2, [r4, #12]
   29986:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	data->async->rx_buf = buf;
   2998a:	68e3      	ldr	r3, [r4, #12]
   2998c:	661f      	str	r7, [r3, #96]	; 0x60
	data->async->rx_buf_len = len;
   2998e:	68e3      	ldr	r3, [r4, #12]
   29990:	665e      	str	r6, [r3, #100]	; 0x64
	data->async->rx_offset = 0;
   29992:	68e2      	ldr	r2, [r4, #12]
   29994:	2300      	movs	r3, #0
   29996:	6693      	str	r3, [r2, #104]	; 0x68
	data->async->rx_next_buf = NULL;
   29998:	68e2      	ldr	r2, [r4, #12]
   2999a:	66d3      	str	r3, [r2, #108]	; 0x6c
	data->async->rx_next_buf_len = 0;
   2999c:	68e2      	ldr	r2, [r4, #12]
   2999e:	6713      	str	r3, [r2, #112]	; 0x70
	return dev->config;
   299a0:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   299a2:	685b      	ldr	r3, [r3, #4]
   299a4:	f013 0f10 	tst.w	r3, #16
   299a8:	d010      	beq.n	299cc <uarte_nrfx_rx_enable+0x80>
		if (data->async->rx_flush_cnt) {
   299aa:	68e1      	ldr	r1, [r4, #12]
   299ac:	f891 30d1 	ldrb.w	r3, [r1, #209]	; 0xd1
   299b0:	b163      	cbz	r3, 299cc <uarte_nrfx_rx_enable+0x80>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   299b2:	42b3      	cmp	r3, r6
   299b4:	bf28      	it	cs
   299b6:	4633      	movcs	r3, r6
   299b8:	4699      	mov	r9, r3
   299ba:	461a      	mov	r2, r3
   299bc:	31cc      	adds	r1, #204	; 0xcc
   299be:	4638      	mov	r0, r7
   299c0:	f016 fa9e 	bl	3ff00 <memcpy>
			buf += cpy_len;
   299c4:	444f      	add	r7, r9
			if (!len) {
   299c6:	ebb6 0609 	subs.w	r6, r6, r9
   299ca:	d02c      	beq.n	29a26 <uarte_nrfx_rx_enable+0xda>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   299cc:	f8c8 7534 	str.w	r7, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   299d0:	f8c8 6538 	str.w	r6, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   299d4:	2300      	movs	r3, #0
   299d6:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
   299da:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
   299de:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
   299e2:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
   299e6:	68e3      	ldr	r3, [r4, #12]
   299e8:	2201      	movs	r2, #1
   299ea:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	return dev->config;
   299ee:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   299f0:	685b      	ldr	r3, [r3, #4]
   299f2:	f013 0f10 	tst.w	r3, #16
   299f6:	d12c      	bne.n	29a52 <uarte_nrfx_rx_enable+0x106>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   299f8:	2301      	movs	r3, #1
   299fa:	f8c8 3000 	str.w	r3, [r8]
	return 0;
   299fe:	2000      	movs	r0, #0
}
   29a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__ASSERT(false, "TX only UARTE instance");
   29a04:	4c1e      	ldr	r4, [pc, #120]	; (29a80 <uarte_nrfx_rx_enable+0x134>)
   29a06:	f240 327f 	movw	r2, #895	; 0x37f
   29a0a:	4621      	mov	r1, r4
   29a0c:	481d      	ldr	r0, [pc, #116]	; (29a84 <uarte_nrfx_rx_enable+0x138>)
   29a0e:	f012 f893 	bl	3bb38 <printk>
   29a12:	f240 317f 	movw	r1, #895	; 0x37f
   29a16:	4620      	mov	r0, r4
   29a18:	f012 fae2 	bl	3bfe0 <assert_post_action>
		return -ENOTSUP;
   29a1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29a20:	e7ee      	b.n	29a00 <uarte_nrfx_rx_enable+0xb4>
		MAX(timeout / RX_TIMEOUT_DIV,
   29a22:	235c      	movs	r3, #92	; 0x5c
   29a24:	e7ae      	b.n	29984 <uarte_nrfx_rx_enable+0x38>
				data->async->rx_flush_cnt -= cpy_len;
   29a26:	68e2      	ldr	r2, [r4, #12]
   29a28:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   29a2c:	eba3 0309 	sub.w	r3, r3, r9
   29a30:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   29a34:	4649      	mov	r1, r9
   29a36:	4628      	mov	r0, r5
   29a38:	f013 fa7b 	bl	3cf32 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   29a3c:	68e1      	ldr	r1, [r4, #12]
   29a3e:	2201      	movs	r2, #1
   29a40:	3160      	adds	r1, #96	; 0x60
   29a42:	4628      	mov	r0, r5
   29a44:	f013 fa8d 	bl	3cf62 <notify_rx_buf_release>
				notify_rx_disable(dev);
   29a48:	4628      	mov	r0, r5
   29a4a:	f013 faa3 	bl	3cf94 <notify_rx_disable>
				return 0;
   29a4e:	2000      	movs	r0, #0
   29a50:	e7d6      	b.n	29a00 <uarte_nrfx_rx_enable+0xb4>
	__asm__ volatile(
   29a52:	f04f 0320 	mov.w	r3, #32
   29a56:	f3ef 8411 	mrs	r4, BASEPRI
   29a5a:	f383 8812 	msr	BASEPRI_MAX, r3
   29a5e:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   29a62:	2102      	movs	r1, #2
   29a64:	4628      	mov	r0, r5
   29a66:	f013 fb63 	bl	3d130 <uarte_enable>
	__asm__ volatile(
   29a6a:	f384 8811 	msr	BASEPRI, r4
   29a6e:	f3bf 8f6f 	isb	sy
}
   29a72:	e7c1      	b.n	299f8 <uarte_nrfx_rx_enable+0xac>
		return -EBUSY;
   29a74:	f06f 000f 	mvn.w	r0, #15
   29a78:	e7c2      	b.n	29a00 <uarte_nrfx_rx_enable+0xb4>
   29a7a:	bf00      	nop
   29a7c:	66666667 	.word	0x66666667
   29a80:	00042f1c 	.word	0x00042f1c
   29a84:	00041c84 	.word	0x00041c84

00029a88 <uarte_nrfx_tx>:
{
   29a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29a8c:	b082      	sub	sp, #8
   29a8e:	4605      	mov	r5, r0
   29a90:	461f      	mov	r7, r3
	return dev->data;
   29a92:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   29a94:	6840      	ldr	r0, [r0, #4]
	return config->uarte_regs;
   29a96:	6803      	ldr	r3, [r0, #0]
	__asm__ volatile(
   29a98:	f04f 0020 	mov.w	r0, #32
   29a9c:	f3ef 8811 	mrs	r8, BASEPRI
   29aa0:	f380 8812 	msr	BASEPRI_MAX, r0
   29aa4:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   29aa8:	68e0      	ldr	r0, [r4, #12]
   29aaa:	68c6      	ldr	r6, [r0, #12]
   29aac:	b9f6      	cbnz	r6, 29aec <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
   29aae:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
   29ab0:	68e0      	ldr	r0, [r4, #12]
   29ab2:	6081      	str	r1, [r0, #8]
    p_reg->INTENSET = mask;
   29ab4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   29ab8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   29abc:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   29ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   29ac4:	d119      	bne.n	29afa <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   29ac6:	68e3      	ldr	r3, [r4, #12]
   29ac8:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   29aca:	68e3      	ldr	r3, [r4, #12]
   29acc:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   29ace:	4621      	mov	r1, r4
   29ad0:	4628      	mov	r0, r5
   29ad2:	f013 fb7e 	bl	3d1d2 <start_tx_locked>
	__asm__ volatile(
   29ad6:	f388 8811 	msr	BASEPRI, r8
   29ada:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   29ade:	7ae3      	ldrb	r3, [r4, #11]
   29ae0:	2b01      	cmp	r3, #1
   29ae2:	d011      	beq.n	29b08 <uarte_nrfx_tx+0x80>
	return 0;
   29ae4:	2000      	movs	r0, #0
}
   29ae6:	b002      	add	sp, #8
   29ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29aec:	f388 8811 	msr	BASEPRI, r8
   29af0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   29af4:	f06f 000f 	mvn.w	r0, #15
   29af8:	e7f5      	b.n	29ae6 <uarte_nrfx_tx+0x5e>
		data->async->tx_cache_offset = 0;
   29afa:	68e3      	ldr	r3, [r4, #12]
   29afc:	2200      	movs	r2, #0
   29afe:	621a      	str	r2, [r3, #32]
		(void)setup_tx_cache(data);
   29b00:	4620      	mov	r0, r4
   29b02:	f013 fc4a 	bl	3d39a <setup_tx_cache>
   29b06:	e7e2      	b.n	29ace <uarte_nrfx_tx+0x46>
	    && timeout != SYS_FOREVER_US) {
   29b08:	f1b7 3fff 	cmp.w	r7, #4294967295
   29b0c:	d101      	bne.n	29b12 <uarte_nrfx_tx+0x8a>
	return 0;
   29b0e:	2000      	movs	r0, #0
   29b10:	e7e9      	b.n	29ae6 <uarte_nrfx_tx+0x5e>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   29b12:	68e4      	ldr	r4, [r4, #12]
   29b14:	3428      	adds	r4, #40	; 0x28
   29b16:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
   29b1a:	17df      	asrs	r7, r3, #31
			return (t * to_hz + off) / from_hz;
   29b1c:	03f9      	lsls	r1, r7, #15
   29b1e:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   29b22:	03d8      	lsls	r0, r3, #15
   29b24:	4d0a      	ldr	r5, [pc, #40]	; (29b50 <uarte_nrfx_tx+0xc8>)
   29b26:	4a0b      	ldr	r2, [pc, #44]	; (29b54 <uarte_nrfx_tx+0xcc>)
   29b28:	2300      	movs	r3, #0
   29b2a:	1940      	adds	r0, r0, r5
   29b2c:	f04f 0500 	mov.w	r5, #0
   29b30:	eb45 0101 	adc.w	r1, r5, r1
   29b34:	f7f7 fab4 	bl	210a0 <__aeabi_uldivmod>
   29b38:	4602      	mov	r2, r0
   29b3a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   29b3c:	2000      	movs	r0, #0
   29b3e:	2100      	movs	r1, #0
   29b40:	e9cd 0100 	strd	r0, r1, [sp]
   29b44:	4620      	mov	r0, r4
   29b46:	f00e ffd5 	bl	38af4 <z_impl_k_timer_start>
	return 0;
   29b4a:	4628      	mov	r0, r5
   29b4c:	e7cb      	b.n	29ae6 <uarte_nrfx_tx+0x5e>
   29b4e:	bf00      	nop
   29b50:	000f423f 	.word	0x000f423f
   29b54:	000f4240 	.word	0x000f4240

00029b58 <rxstarted_isr>:
{
   29b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b5a:	b089      	sub	sp, #36	; 0x24
	return dev->data;
   29b5c:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
   29b5e:	2300      	movs	r3, #0
   29b60:	9303      	str	r3, [sp, #12]
   29b62:	9304      	str	r3, [sp, #16]
   29b64:	9305      	str	r3, [sp, #20]
   29b66:	9306      	str	r3, [sp, #24]
   29b68:	9307      	str	r3, [sp, #28]
   29b6a:	2303      	movs	r3, #3
   29b6c:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   29b70:	a903      	add	r1, sp, #12
   29b72:	f013 f9d6 	bl	3cf22 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   29b76:	68e3      	ldr	r3, [r4, #12]
   29b78:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   29b7a:	f1b2 3fff 	cmp.w	r2, #4294967295
   29b7e:	d101      	bne.n	29b84 <rxstarted_isr+0x2c>
}
   29b80:	b009      	add	sp, #36	; 0x24
   29b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
   29b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		k_timer_start(&data->async->rx_timeout_timer,
   29b88:	68e3      	ldr	r3, [r4, #12]
   29b8a:	f103 0488 	add.w	r4, r3, #136	; 0x88
			      K_USEC(data->async->rx_timeout_slab),
   29b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   29b92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   29b96:	17df      	asrs	r7, r3, #31
   29b98:	03f9      	lsls	r1, r7, #15
   29b9a:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   29b9e:	03d8      	lsls	r0, r3, #15
   29ba0:	4d08      	ldr	r5, [pc, #32]	; (29bc4 <rxstarted_isr+0x6c>)
   29ba2:	4a09      	ldr	r2, [pc, #36]	; (29bc8 <rxstarted_isr+0x70>)
   29ba4:	2300      	movs	r3, #0
   29ba6:	1940      	adds	r0, r0, r5
   29ba8:	f04f 0500 	mov.w	r5, #0
   29bac:	eb45 0101 	adc.w	r1, r5, r1
   29bb0:	f7f7 fa76 	bl	210a0 <__aeabi_uldivmod>
   29bb4:	4602      	mov	r2, r0
   29bb6:	460b      	mov	r3, r1
   29bb8:	9000      	str	r0, [sp, #0]
   29bba:	9101      	str	r1, [sp, #4]
   29bbc:	4620      	mov	r0, r4
   29bbe:	f00e ff99 	bl	38af4 <z_impl_k_timer_start>
}
   29bc2:	e7dd      	b.n	29b80 <rxstarted_isr+0x28>
   29bc4:	000f423f 	.word	0x000f423f
   29bc8:	000f4240 	.word	0x000f4240

00029bcc <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   29bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29bd0:	4604      	mov	r4, r0
   29bd2:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   29bd4:	f101 0016 	add.w	r0, r1, #22
   29bd8:	f007 fae2 	bl	311a0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   29bdc:	4b24      	ldr	r3, [pc, #144]	; (29c70 <endtx_stoptx_ppi_init+0xa4>)
   29bde:	4298      	cmp	r0, r3
   29be0:	d117      	bne.n	29c12 <endtx_stoptx_ppi_init+0x46>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   29be2:	7dae      	ldrb	r6, [r5, #22]
    return (uint32_t)p_reg + (uint32_t)task;
   29be4:	f104 070c 	add.w	r7, r4, #12
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   29be8:	f514 7490 	adds.w	r4, r4, #288	; 0x120
   29bec:	d024      	beq.n	29c38 <endtx_stoptx_ppi_init+0x6c>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   29bee:	f046 4300 	orr.w	r3, r6, #2147483648	; 0x80000000
   29bf2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   29bf6:	b36f      	cbz	r7, 29c54 <endtx_stoptx_ppi_init+0x88>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   29bf8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
   29bfc:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   29c00:	7daa      	ldrb	r2, [r5, #22]
   29c02:	2301      	movs	r3, #1
   29c04:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   29c06:	4a1b      	ldr	r2, [pc, #108]	; (29c74 <endtx_stoptx_ppi_init+0xa8>)
   29c08:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   29c0c:	2000      	movs	r0, #0
}
   29c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29c12:	4b19      	ldr	r3, [pc, #100]	; (29c78 <endtx_stoptx_ppi_init+0xac>)
   29c14:	4a19      	ldr	r2, [pc, #100]	; (29c7c <endtx_stoptx_ppi_init+0xb0>)
   29c16:	1a9b      	subs	r3, r3, r2
   29c18:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   29c1a:	f04f 0000 	mov.w	r0, #0
   29c1e:	2201      	movs	r2, #1
   29c20:	f362 0002 	bfi	r0, r2, #0, #3
   29c24:	f36f 00c5 	bfc	r0, #3, #3
   29c28:	f363 108f 	bfi	r0, r3, #6, #10
   29c2c:	4914      	ldr	r1, [pc, #80]	; (29c80 <endtx_stoptx_ppi_init+0xb4>)
   29c2e:	f012 fa0b 	bl	3c048 <log_string_sync>
		return -EIO;
   29c32:	f06f 0004 	mvn.w	r0, #4
   29c36:	e7ea      	b.n	29c0e <endtx_stoptx_ppi_init+0x42>
    NRFX_ASSERT(eep);
   29c38:	f8df 804c 	ldr.w	r8, [pc, #76]	; 29c88 <endtx_stoptx_ppi_init+0xbc>
   29c3c:	f44f 7212 	mov.w	r2, #584	; 0x248
   29c40:	4641      	mov	r1, r8
   29c42:	4810      	ldr	r0, [pc, #64]	; (29c84 <endtx_stoptx_ppi_init+0xb8>)
   29c44:	f011 ff78 	bl	3bb38 <printk>
   29c48:	f44f 7112 	mov.w	r1, #584	; 0x248
   29c4c:	4640      	mov	r0, r8
   29c4e:	f012 f9c7 	bl	3bfe0 <assert_post_action>
   29c52:	e7cc      	b.n	29bee <endtx_stoptx_ppi_init+0x22>
    NRFX_ASSERT(tep);
   29c54:	4c0c      	ldr	r4, [pc, #48]	; (29c88 <endtx_stoptx_ppi_init+0xbc>)
   29c56:	f240 224e 	movw	r2, #590	; 0x24e
   29c5a:	4621      	mov	r1, r4
   29c5c:	4809      	ldr	r0, [pc, #36]	; (29c84 <endtx_stoptx_ppi_init+0xb8>)
   29c5e:	f011 ff6b 	bl	3bb38 <printk>
   29c62:	f240 214e 	movw	r1, #590	; 0x24e
   29c66:	4620      	mov	r0, r4
   29c68:	f012 f9ba 	bl	3bfe0 <assert_post_action>
   29c6c:	e7c4      	b.n	29bf8 <endtx_stoptx_ppi_init+0x2c>
   29c6e:	bf00      	nop
   29c70:	0bad0000 	.word	0x0bad0000
   29c74:	40017000 	.word	0x40017000
   29c78:	00041308 	.word	0x00041308
   29c7c:	00041200 	.word	0x00041200
   29c80:	00042f50 	.word	0x00042f50
   29c84:	00041c84 	.word	0x00041c84
   29c88:	00042f70 	.word	0x00042f70

00029c8c <uarte_nrfx_rx_counting_init>:
{
   29c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29c8e:	b083      	sub	sp, #12
	return dev->data;
   29c90:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   29c92:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   29c94:	682e      	ldr	r6, [r5, #0]
		return data->async->hw_rx_counting;
   29c96:	68e3      	ldr	r3, [r4, #12]
   29c98:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   29c9c:	b97b      	cbnz	r3, 29cbe <uarte_nrfx_rx_counting_init+0x32>
		return data->async->hw_rx_counting;
   29c9e:	68e0      	ldr	r0, [r4, #12]
   29ca0:	f890 30d3 	ldrb.w	r3, [r0, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   29ca4:	2b00      	cmp	r3, #0
   29ca6:	d13d      	bne.n	29d24 <uarte_nrfx_rx_counting_init+0x98>
		return data->async->hw_rx_counting;
   29ca8:	68e3      	ldr	r3, [r4, #12]
   29caa:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   29cae:	2a00      	cmp	r2, #0
   29cb0:	d157      	bne.n	29d62 <uarte_nrfx_rx_counting_init+0xd6>
    p_reg->INTENSET = mask;
   29cb2:	2304      	movs	r3, #4
   29cb4:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	return 0;
   29cb8:	2000      	movs	r0, #0
}
   29cba:	b003      	add	sp, #12
   29cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
   29cbe:	2300      	movs	r3, #0
   29cc0:	f88d 3000 	strb.w	r3, [sp]
   29cc4:	2207      	movs	r2, #7
   29cc6:	f88d 2003 	strb.w	r2, [sp, #3]
   29cca:	9301      	str	r3, [sp, #4]
		tmr_config.mode = NRF_TIMER_MODE_COUNTER;
   29ccc:	2301      	movs	r3, #1
   29cce:	f88d 3001 	strb.w	r3, [sp, #1]
		tmr_config.bit_width = NRF_TIMER_BIT_WIDTH_32;
   29cd2:	2303      	movs	r3, #3
   29cd4:	f88d 3002 	strb.w	r3, [sp, #2]
		ret = nrfx_timer_init(&cfg->timer,
   29cd8:	f105 0720 	add.w	r7, r5, #32
   29cdc:	4a2e      	ldr	r2, [pc, #184]	; (29d98 <uarte_nrfx_rx_counting_init+0x10c>)
   29cde:	4669      	mov	r1, sp
   29ce0:	4638      	mov	r0, r7
   29ce2:	f008 fad9 	bl	32298 <nrfx_timer_init>
		if (ret != NRFX_SUCCESS) {
   29ce6:	4b2d      	ldr	r3, [pc, #180]	; (29d9c <uarte_nrfx_rx_counting_init+0x110>)
   29ce8:	4298      	cmp	r0, r3
   29cea:	d014      	beq.n	29d16 <uarte_nrfx_rx_counting_init+0x8a>
   29cec:	4b2c      	ldr	r3, [pc, #176]	; (29da0 <uarte_nrfx_rx_counting_init+0x114>)
   29cee:	4a2d      	ldr	r2, [pc, #180]	; (29da4 <uarte_nrfx_rx_counting_init+0x118>)
   29cf0:	1a9b      	subs	r3, r3, r2
   29cf2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Timer already initialized, "
   29cf4:	f04f 0000 	mov.w	r0, #0
   29cf8:	2201      	movs	r2, #1
   29cfa:	f362 0002 	bfi	r0, r2, #0, #3
   29cfe:	f36f 00c5 	bfc	r0, #3, #3
   29d02:	f363 108f 	bfi	r0, r3, #6, #10
   29d06:	4928      	ldr	r1, [pc, #160]	; (29da8 <uarte_nrfx_rx_counting_init+0x11c>)
   29d08:	f012 f99e 	bl	3c048 <log_string_sync>
			data->async->hw_rx_counting = false;
   29d0c:	68e3      	ldr	r3, [r4, #12]
   29d0e:	2200      	movs	r2, #0
   29d10:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
   29d14:	e7c3      	b.n	29c9e <uarte_nrfx_rx_counting_init+0x12>
			nrfx_timer_enable(&cfg->timer);
   29d16:	4638      	mov	r0, r7
   29d18:	f008 fb56 	bl	323c8 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
   29d1c:	4638      	mov	r0, r7
   29d1e:	f008 fbc1 	bl	324a4 <nrfx_timer_clear>
   29d22:	e7bc      	b.n	29c9e <uarte_nrfx_rx_counting_init+0x12>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
   29d24:	30c0      	adds	r0, #192	; 0xc0
   29d26:	f007 fa3b 	bl	311a0 <nrfx_dppi_channel_alloc>
		if (ret != NRFX_SUCCESS) {
   29d2a:	4b1c      	ldr	r3, [pc, #112]	; (29d9c <uarte_nrfx_rx_counting_init+0x110>)
   29d2c:	4298      	cmp	r0, r3
   29d2e:	d0bb      	beq.n	29ca8 <uarte_nrfx_rx_counting_init+0x1c>
   29d30:	4b1b      	ldr	r3, [pc, #108]	; (29da0 <uarte_nrfx_rx_counting_init+0x114>)
   29d32:	4a1c      	ldr	r2, [pc, #112]	; (29da4 <uarte_nrfx_rx_counting_init+0x118>)
   29d34:	1a9b      	subs	r3, r3, r2
   29d36:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to allocate PPI Channel, "
   29d38:	f04f 0000 	mov.w	r0, #0
   29d3c:	2201      	movs	r2, #1
   29d3e:	f362 0002 	bfi	r0, r2, #0, #3
   29d42:	f36f 00c5 	bfc	r0, #3, #3
   29d46:	f363 108f 	bfi	r0, r3, #6, #10
   29d4a:	4918      	ldr	r1, [pc, #96]	; (29dac <uarte_nrfx_rx_counting_init+0x120>)
   29d4c:	f012 f97c 	bl	3c048 <log_string_sync>
			data->async->hw_rx_counting = false;
   29d50:	68e3      	ldr	r3, [r4, #12]
   29d52:	2200      	movs	r2, #0
   29d54:	f883 20d3 	strb.w	r2, [r3, #211]	; 0xd3
			nrfx_timer_uninit(&cfg->timer);
   29d58:	f105 0020 	add.w	r0, r5, #32
   29d5c:	f008 fb82 	bl	32464 <nrfx_timer_uninit>
   29d60:	e7a2      	b.n	29ca8 <uarte_nrfx_rx_counting_init+0x1c>
		nrf_uarte_publish_set(uarte,
   29d62:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   29d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   29d6a:	f8c6 3188 	str.w	r3, [r6, #392]	; 0x188
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   29d6e:	6a2a      	ldr	r2, [r5, #32]
					data->async->rx_cnt.ppi);
   29d70:	68e3      	ldr	r3, [r4, #12]
		nrf_timer_subscribe_set(cfg->timer.p_reg,
   29d72:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   29d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   29d7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
   29d7e:	68e3      	ldr	r3, [r4, #12]
   29d80:	f893 00c0 	ldrb.w	r0, [r3, #192]	; 0xc0
   29d84:	f007 fa14 	bl	311b0 <nrfx_dppi_channel_enable>
		if (ret != NRFX_SUCCESS) {
   29d88:	4b04      	ldr	r3, [pc, #16]	; (29d9c <uarte_nrfx_rx_counting_init+0x110>)
   29d8a:	4298      	cmp	r0, r3
   29d8c:	d101      	bne.n	29d92 <uarte_nrfx_rx_counting_init+0x106>
	return 0;
   29d8e:	2000      	movs	r0, #0
   29d90:	e793      	b.n	29cba <uarte_nrfx_rx_counting_init+0x2e>
			return -EIO;
   29d92:	f06f 0004 	mvn.w	r0, #4
   29d96:	e790      	b.n	29cba <uarte_nrfx_rx_counting_init+0x2e>
   29d98:	0003cf21 	.word	0x0003cf21
   29d9c:	0bad0000 	.word	0x0bad0000
   29da0:	00041308 	.word	0x00041308
   29da4:	00041200 	.word	0x00041200
   29da8:	00042fa8 	.word	0x00042fa8
   29dac:	00042fe8 	.word	0x00042fe8

00029db0 <uarte_nrfx_init>:
{
   29db0:	b570      	push	{r4, r5, r6, lr}
	return dev->data;
   29db2:	6905      	ldr	r5, [r0, #16]
	return dev->config;
   29db4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   29db6:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
   29db8:	f7ff ff68 	bl	29c8c <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
   29dbc:	4606      	mov	r6, r0
   29dbe:	bb90      	cbnz	r0, 29e26 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   29dc0:	68eb      	ldr	r3, [r5, #12]
   29dc2:	2201      	movs	r2, #1
   29dc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    p_reg->INTENSET = mask;
   29dc8:	4b18      	ldr	r3, [pc, #96]	; (29e2c <uarte_nrfx_init+0x7c>)
   29dca:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   29dce:	2308      	movs	r3, #8
   29dd0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29dd4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   29dd8:	b1a3      	cbz	r3, 29e04 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29dda:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29ddc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   29de0:	b91b      	cbnz	r3, 29dea <uarte_nrfx_init+0x3a>
   29de2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   29de6:	2b00      	cmp	r3, #0
   29de8:	d0f8      	beq.n	29ddc <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29dea:	2300      	movs	r3, #0
   29dec:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   29df0:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   29df4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   29df8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   29dfc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   29e00:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   29e04:	68e8      	ldr	r0, [r5, #12]
   29e06:	2200      	movs	r2, #0
   29e08:	4909      	ldr	r1, [pc, #36]	; (29e30 <uarte_nrfx_init+0x80>)
   29e0a:	3088      	adds	r0, #136	; 0x88
   29e0c:	f015 ffba 	bl	3fd84 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   29e10:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
   29e12:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   29e16:	68e8      	ldr	r0, [r5, #12]
   29e18:	2200      	movs	r2, #0
   29e1a:	4906      	ldr	r1, [pc, #24]	; (29e34 <uarte_nrfx_init+0x84>)
   29e1c:	3028      	adds	r0, #40	; 0x28
   29e1e:	f015 ffb1 	bl	3fd84 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   29e22:	68eb      	ldr	r3, [r5, #12]
   29e24:	65dd      	str	r5, [r3, #92]	; 0x5c
}
   29e26:	4630      	mov	r0, r6
   29e28:	bd70      	pop	{r4, r5, r6, pc}
   29e2a:	bf00      	nop
   29e2c:	000a0210 	.word	0x000a0210
   29e30:	0003d3cd 	.word	0x0003d3cd
   29e34:	0003d2d3 	.word	0x0003d2d3

00029e38 <uarte_nrfx_pins_configure>:
{
   29e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   29e3a:	6844      	ldr	r4, [r0, #4]
	if (!sleep) {
   29e3c:	2900      	cmp	r1, #0
   29e3e:	f040 8150 	bne.w	2a0e2 <uarte_nrfx_pins_configure+0x2aa>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   29e42:	68e5      	ldr	r5, [r4, #12]
   29e44:	f1b5 3fff 	cmp.w	r5, #4294967295
   29e48:	d14f      	bne.n	29eea <uarte_nrfx_pins_configure+0xb2>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   29e4a:	6925      	ldr	r5, [r4, #16]
   29e4c:	f1b5 3fff 	cmp.w	r5, #4294967295
   29e50:	d019      	beq.n	29e86 <uarte_nrfx_pins_configure+0x4e>
					   (cfg->rx_pull_up ?
   29e52:	7f23      	ldrb	r3, [r4, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   29e54:	2b00      	cmp	r3, #0
   29e56:	f000 80a7 	beq.w	29fa8 <uarte_nrfx_pins_configure+0x170>
   29e5a:	2703      	movs	r7, #3
    switch (port)
   29e5c:	096b      	lsrs	r3, r5, #5
   29e5e:	f000 80a5 	beq.w	29fac <uarte_nrfx_pins_configure+0x174>
    uint32_t mask = 0;
   29e62:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   29e64:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29e68:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29e6a:	f013 0f01 	tst.w	r3, #1
   29e6e:	f000 80a0 	beq.w	29fb2 <uarte_nrfx_pins_configure+0x17a>
    *p_pin = pin_number & 0x1F;
   29e72:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29e76:	096b      	lsrs	r3, r5, #5
   29e78:	f040 80a8 	bne.w	29fcc <uarte_nrfx_pins_configure+0x194>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29e7c:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
   29e7e:	3680      	adds	r6, #128	; 0x80
   29e80:	4bc4      	ldr	r3, [pc, #784]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   29e82:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   29e86:	6965      	ldr	r5, [r4, #20]
   29e88:	f1b5 3fff 	cmp.w	r5, #4294967295
   29e8c:	f040 80ab 	bne.w	29fe6 <uarte_nrfx_pins_configure+0x1ae>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   29e90:	69a5      	ldr	r5, [r4, #24]
   29e92:	f1b5 3fff 	cmp.w	r5, #4294967295
   29e96:	d019      	beq.n	29ecc <uarte_nrfx_pins_configure+0x94>
					   (cfg->cts_pull_up ?
   29e98:	7f63      	ldrb	r3, [r4, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   29e9a:	2b00      	cmp	r3, #0
   29e9c:	f000 8102 	beq.w	2a0a4 <uarte_nrfx_pins_configure+0x26c>
   29ea0:	2703      	movs	r7, #3
    switch (port)
   29ea2:	096b      	lsrs	r3, r5, #5
   29ea4:	f000 8100 	beq.w	2a0a8 <uarte_nrfx_pins_configure+0x270>
    uint32_t mask = 0;
   29ea8:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   29eaa:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29eae:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29eb0:	f013 0f01 	tst.w	r3, #1
   29eb4:	f000 80fb 	beq.w	2a0ae <uarte_nrfx_pins_configure+0x276>
    *p_pin = pin_number & 0x1F;
   29eb8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29ebc:	096b      	lsrs	r3, r5, #5
   29ebe:	f040 8103 	bne.w	2a0c8 <uarte_nrfx_pins_configure+0x290>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29ec2:	00bf      	lsls	r7, r7, #2
    reg->PIN_CNF[pin_number] = cnf;
   29ec4:	3680      	adds	r6, #128	; 0x80
   29ec6:	4bb3      	ldr	r3, [pc, #716]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   29ec8:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   29ecc:	6823      	ldr	r3, [r4, #0]
   29ece:	68e1      	ldr	r1, [r4, #12]
   29ed0:	6922      	ldr	r2, [r4, #16]
    p_reg->PSEL.TXD = pseltxd;
   29ed2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   29ed6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   29eda:	6823      	ldr	r3, [r4, #0]
   29edc:	6961      	ldr	r1, [r4, #20]
   29ede:	69a2      	ldr	r2, [r4, #24]
    p_reg->PSEL.RTS = pselrts;
   29ee0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   29ee4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   29ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (port)
   29eea:	096b      	lsrs	r3, r5, #5
   29eec:	d022      	beq.n	29f34 <uarte_nrfx_pins_configure+0xfc>
    uint32_t mask = 0;
   29eee:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   29ef0:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29ef4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29ef6:	f013 0f01 	tst.w	r3, #1
   29efa:	d01e      	beq.n	29f3a <uarte_nrfx_pins_configure+0x102>
    *p_pin = pin_number & 0x1F;
   29efc:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29f00:	096b      	lsrs	r3, r5, #5
   29f02:	d127      	bne.n	29f54 <uarte_nrfx_pins_configure+0x11c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   29f04:	2301      	movs	r3, #1
   29f06:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   29f08:	4aa2      	ldr	r2, [pc, #648]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   29f0a:	6093      	str	r3, [r2, #8]
			nrf_gpio_cfg_output(cfg->tx_pin);
   29f0c:	68e5      	ldr	r5, [r4, #12]
    switch (port)
   29f0e:	096b      	lsrs	r3, r5, #5
   29f10:	d02d      	beq.n	29f6e <uarte_nrfx_pins_configure+0x136>
    uint32_t mask = 0;
   29f12:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   29f14:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29f18:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29f1a:	f013 0f01 	tst.w	r3, #1
   29f1e:	d029      	beq.n	29f74 <uarte_nrfx_pins_configure+0x13c>
    *p_pin = pin_number & 0x1F;
   29f20:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29f24:	096b      	lsrs	r3, r5, #5
   29f26:	d132      	bne.n	29f8e <uarte_nrfx_pins_configure+0x156>
    reg->PIN_CNF[pin_number] = cnf;
   29f28:	3680      	adds	r6, #128	; 0x80
   29f2a:	4b9a      	ldr	r3, [pc, #616]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   29f2c:	2203      	movs	r2, #3
   29f2e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   29f32:	e78a      	b.n	29e4a <uarte_nrfx_pins_configure+0x12>
            mask = P0_FEATURE_PINS_PRESENT;
   29f34:	f04f 33ff 	mov.w	r3, #4294967295
   29f38:	e7da      	b.n	29ef0 <uarte_nrfx_pins_configure+0xb8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29f3a:	4e97      	ldr	r6, [pc, #604]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   29f3c:	f240 2229 	movw	r2, #553	; 0x229
   29f40:	4631      	mov	r1, r6
   29f42:	4896      	ldr	r0, [pc, #600]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   29f44:	f011 fdf8 	bl	3bb38 <printk>
   29f48:	f240 2129 	movw	r1, #553	; 0x229
   29f4c:	4630      	mov	r0, r6
   29f4e:	f012 f847 	bl	3bfe0 <assert_post_action>
   29f52:	e7d3      	b.n	29efc <uarte_nrfx_pins_configure+0xc4>
            NRFX_ASSERT(0);
   29f54:	4d90      	ldr	r5, [pc, #576]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   29f56:	f240 222e 	movw	r2, #558	; 0x22e
   29f5a:	4629      	mov	r1, r5
   29f5c:	488f      	ldr	r0, [pc, #572]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   29f5e:	f011 fdeb 	bl	3bb38 <printk>
   29f62:	f240 212e 	movw	r1, #558	; 0x22e
   29f66:	4628      	mov	r0, r5
   29f68:	f012 f83a 	bl	3bfe0 <assert_post_action>
   29f6c:	e7ca      	b.n	29f04 <uarte_nrfx_pins_configure+0xcc>
            mask = P0_FEATURE_PINS_PRESENT;
   29f6e:	f04f 33ff 	mov.w	r3, #4294967295
   29f72:	e7cf      	b.n	29f14 <uarte_nrfx_pins_configure+0xdc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29f74:	4e88      	ldr	r6, [pc, #544]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   29f76:	f240 2229 	movw	r2, #553	; 0x229
   29f7a:	4631      	mov	r1, r6
   29f7c:	4887      	ldr	r0, [pc, #540]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   29f7e:	f011 fddb 	bl	3bb38 <printk>
   29f82:	f240 2129 	movw	r1, #553	; 0x229
   29f86:	4630      	mov	r0, r6
   29f88:	f012 f82a 	bl	3bfe0 <assert_post_action>
   29f8c:	e7c8      	b.n	29f20 <uarte_nrfx_pins_configure+0xe8>
            NRFX_ASSERT(0);
   29f8e:	4d82      	ldr	r5, [pc, #520]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   29f90:	f240 222e 	movw	r2, #558	; 0x22e
   29f94:	4629      	mov	r1, r5
   29f96:	4881      	ldr	r0, [pc, #516]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   29f98:	f011 fdce 	bl	3bb38 <printk>
   29f9c:	f240 212e 	movw	r1, #558	; 0x22e
   29fa0:	4628      	mov	r0, r5
   29fa2:	f012 f81d 	bl	3bfe0 <assert_post_action>
   29fa6:	e7bf      	b.n	29f28 <uarte_nrfx_pins_configure+0xf0>
			nrf_gpio_cfg_input(cfg->rx_pin,
   29fa8:	2700      	movs	r7, #0
   29faa:	e757      	b.n	29e5c <uarte_nrfx_pins_configure+0x24>
            mask = P0_FEATURE_PINS_PRESENT;
   29fac:	f04f 33ff 	mov.w	r3, #4294967295
   29fb0:	e758      	b.n	29e64 <uarte_nrfx_pins_configure+0x2c>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29fb2:	4e79      	ldr	r6, [pc, #484]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   29fb4:	f240 2229 	movw	r2, #553	; 0x229
   29fb8:	4631      	mov	r1, r6
   29fba:	4878      	ldr	r0, [pc, #480]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   29fbc:	f011 fdbc 	bl	3bb38 <printk>
   29fc0:	f240 2129 	movw	r1, #553	; 0x229
   29fc4:	4630      	mov	r0, r6
   29fc6:	f012 f80b 	bl	3bfe0 <assert_post_action>
   29fca:	e752      	b.n	29e72 <uarte_nrfx_pins_configure+0x3a>
            NRFX_ASSERT(0);
   29fcc:	4d72      	ldr	r5, [pc, #456]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   29fce:	f240 222e 	movw	r2, #558	; 0x22e
   29fd2:	4629      	mov	r1, r5
   29fd4:	4871      	ldr	r0, [pc, #452]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   29fd6:	f011 fdaf 	bl	3bb38 <printk>
   29fda:	f240 212e 	movw	r1, #558	; 0x22e
   29fde:	4628      	mov	r0, r5
   29fe0:	f011 fffe 	bl	3bfe0 <assert_post_action>
   29fe4:	e74a      	b.n	29e7c <uarte_nrfx_pins_configure+0x44>
    switch (port)
   29fe6:	096b      	lsrs	r3, r5, #5
   29fe8:	d022      	beq.n	2a030 <uarte_nrfx_pins_configure+0x1f8>
    uint32_t mask = 0;
   29fea:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   29fec:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29ff0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29ff2:	f013 0f01 	tst.w	r3, #1
   29ff6:	d01e      	beq.n	2a036 <uarte_nrfx_pins_configure+0x1fe>
    *p_pin = pin_number & 0x1F;
   29ff8:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29ffc:	096b      	lsrs	r3, r5, #5
   29ffe:	d127      	bne.n	2a050 <uarte_nrfx_pins_configure+0x218>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2a000:	2301      	movs	r3, #1
   2a002:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2a004:	4a63      	ldr	r2, [pc, #396]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   2a006:	6093      	str	r3, [r2, #8]
			nrf_gpio_cfg_output(cfg->rts_pin);
   2a008:	6965      	ldr	r5, [r4, #20]
    switch (port)
   2a00a:	096b      	lsrs	r3, r5, #5
   2a00c:	d02d      	beq.n	2a06a <uarte_nrfx_pins_configure+0x232>
    uint32_t mask = 0;
   2a00e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2a010:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a014:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a016:	f013 0f01 	tst.w	r3, #1
   2a01a:	d029      	beq.n	2a070 <uarte_nrfx_pins_configure+0x238>
    *p_pin = pin_number & 0x1F;
   2a01c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a020:	096b      	lsrs	r3, r5, #5
   2a022:	d132      	bne.n	2a08a <uarte_nrfx_pins_configure+0x252>
    reg->PIN_CNF[pin_number] = cnf;
   2a024:	3680      	adds	r6, #128	; 0x80
   2a026:	4b5b      	ldr	r3, [pc, #364]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   2a028:	2203      	movs	r2, #3
   2a02a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   2a02e:	e72f      	b.n	29e90 <uarte_nrfx_pins_configure+0x58>
            mask = P0_FEATURE_PINS_PRESENT;
   2a030:	f04f 33ff 	mov.w	r3, #4294967295
   2a034:	e7da      	b.n	29fec <uarte_nrfx_pins_configure+0x1b4>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a036:	4e58      	ldr	r6, [pc, #352]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a038:	f240 2229 	movw	r2, #553	; 0x229
   2a03c:	4631      	mov	r1, r6
   2a03e:	4857      	ldr	r0, [pc, #348]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a040:	f011 fd7a 	bl	3bb38 <printk>
   2a044:	f240 2129 	movw	r1, #553	; 0x229
   2a048:	4630      	mov	r0, r6
   2a04a:	f011 ffc9 	bl	3bfe0 <assert_post_action>
   2a04e:	e7d3      	b.n	29ff8 <uarte_nrfx_pins_configure+0x1c0>
            NRFX_ASSERT(0);
   2a050:	4d51      	ldr	r5, [pc, #324]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a052:	f240 222e 	movw	r2, #558	; 0x22e
   2a056:	4629      	mov	r1, r5
   2a058:	4850      	ldr	r0, [pc, #320]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a05a:	f011 fd6d 	bl	3bb38 <printk>
   2a05e:	f240 212e 	movw	r1, #558	; 0x22e
   2a062:	4628      	mov	r0, r5
   2a064:	f011 ffbc 	bl	3bfe0 <assert_post_action>
   2a068:	e7ca      	b.n	2a000 <uarte_nrfx_pins_configure+0x1c8>
            mask = P0_FEATURE_PINS_PRESENT;
   2a06a:	f04f 33ff 	mov.w	r3, #4294967295
   2a06e:	e7cf      	b.n	2a010 <uarte_nrfx_pins_configure+0x1d8>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a070:	4e49      	ldr	r6, [pc, #292]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a072:	f240 2229 	movw	r2, #553	; 0x229
   2a076:	4631      	mov	r1, r6
   2a078:	4848      	ldr	r0, [pc, #288]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a07a:	f011 fd5d 	bl	3bb38 <printk>
   2a07e:	f240 2129 	movw	r1, #553	; 0x229
   2a082:	4630      	mov	r0, r6
   2a084:	f011 ffac 	bl	3bfe0 <assert_post_action>
   2a088:	e7c8      	b.n	2a01c <uarte_nrfx_pins_configure+0x1e4>
            NRFX_ASSERT(0);
   2a08a:	4d43      	ldr	r5, [pc, #268]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a08c:	f240 222e 	movw	r2, #558	; 0x22e
   2a090:	4629      	mov	r1, r5
   2a092:	4842      	ldr	r0, [pc, #264]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a094:	f011 fd50 	bl	3bb38 <printk>
   2a098:	f240 212e 	movw	r1, #558	; 0x22e
   2a09c:	4628      	mov	r0, r5
   2a09e:	f011 ff9f 	bl	3bfe0 <assert_post_action>
   2a0a2:	e7bf      	b.n	2a024 <uarte_nrfx_pins_configure+0x1ec>
			nrf_gpio_cfg_input(cfg->cts_pin,
   2a0a4:	2700      	movs	r7, #0
   2a0a6:	e6fc      	b.n	29ea2 <uarte_nrfx_pins_configure+0x6a>
            mask = P0_FEATURE_PINS_PRESENT;
   2a0a8:	f04f 33ff 	mov.w	r3, #4294967295
   2a0ac:	e6fd      	b.n	29eaa <uarte_nrfx_pins_configure+0x72>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a0ae:	4e3a      	ldr	r6, [pc, #232]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a0b0:	f240 2229 	movw	r2, #553	; 0x229
   2a0b4:	4631      	mov	r1, r6
   2a0b6:	4839      	ldr	r0, [pc, #228]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a0b8:	f011 fd3e 	bl	3bb38 <printk>
   2a0bc:	f240 2129 	movw	r1, #553	; 0x229
   2a0c0:	4630      	mov	r0, r6
   2a0c2:	f011 ff8d 	bl	3bfe0 <assert_post_action>
   2a0c6:	e6f7      	b.n	29eb8 <uarte_nrfx_pins_configure+0x80>
            NRFX_ASSERT(0);
   2a0c8:	4d33      	ldr	r5, [pc, #204]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a0ca:	f240 222e 	movw	r2, #558	; 0x22e
   2a0ce:	4629      	mov	r1, r5
   2a0d0:	4832      	ldr	r0, [pc, #200]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a0d2:	f011 fd31 	bl	3bb38 <printk>
   2a0d6:	f240 212e 	movw	r1, #558	; 0x22e
   2a0da:	4628      	mov	r0, r5
   2a0dc:	f011 ff80 	bl	3bfe0 <assert_post_action>
   2a0e0:	e6ef      	b.n	29ec2 <uarte_nrfx_pins_configure+0x8a>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2a0e2:	68e5      	ldr	r5, [r4, #12]
   2a0e4:	f1b5 3fff 	cmp.w	r5, #4294967295
   2a0e8:	d123      	bne.n	2a132 <uarte_nrfx_pins_configure+0x2fa>
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2a0ea:	6925      	ldr	r5, [r4, #16]
   2a0ec:	f1b5 3fff 	cmp.w	r5, #4294967295
   2a0f0:	d156      	bne.n	2a1a0 <uarte_nrfx_pins_configure+0x368>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2a0f2:	6965      	ldr	r5, [r4, #20]
   2a0f4:	f1b5 3fff 	cmp.w	r5, #4294967295
   2a0f8:	f040 8082 	bne.w	2a200 <uarte_nrfx_pins_configure+0x3c8>
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2a0fc:	69a5      	ldr	r5, [r4, #24]
   2a0fe:	f1b5 3fff 	cmp.w	r5, #4294967295
   2a102:	f43f aee3 	beq.w	29ecc <uarte_nrfx_pins_configure+0x94>
    switch (port)
   2a106:	096b      	lsrs	r3, r5, #5
   2a108:	f000 80aa 	beq.w	2a260 <uarte_nrfx_pins_configure+0x428>
    uint32_t mask = 0;
   2a10c:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2a10e:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a112:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a114:	f013 0f01 	tst.w	r3, #1
   2a118:	f000 80a5 	beq.w	2a266 <uarte_nrfx_pins_configure+0x42e>
    *p_pin = pin_number & 0x1F;
   2a11c:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a120:	096b      	lsrs	r3, r5, #5
   2a122:	f040 80ad 	bne.w	2a280 <uarte_nrfx_pins_configure+0x448>
    reg->PIN_CNF[pin_number] = cnf;
   2a126:	3680      	adds	r6, #128	; 0x80
   2a128:	4b1a      	ldr	r3, [pc, #104]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   2a12a:	2202      	movs	r2, #2
   2a12c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   2a130:	e6cc      	b.n	29ecc <uarte_nrfx_pins_configure+0x94>
    switch (port)
   2a132:	096b      	lsrs	r3, r5, #5
   2a134:	d010      	beq.n	2a158 <uarte_nrfx_pins_configure+0x320>
    uint32_t mask = 0;
   2a136:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2a138:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a13c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a13e:	f013 0f01 	tst.w	r3, #1
   2a142:	d00c      	beq.n	2a15e <uarte_nrfx_pins_configure+0x326>
    *p_pin = pin_number & 0x1F;
   2a144:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a148:	096b      	lsrs	r3, r5, #5
   2a14a:	d115      	bne.n	2a178 <uarte_nrfx_pins_configure+0x340>
    reg->PIN_CNF[pin_number] = cnf;
   2a14c:	3680      	adds	r6, #128	; 0x80
   2a14e:	4b11      	ldr	r3, [pc, #68]	; (2a194 <uarte_nrfx_pins_configure+0x35c>)
   2a150:	2202      	movs	r2, #2
   2a152:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   2a156:	e7c8      	b.n	2a0ea <uarte_nrfx_pins_configure+0x2b2>
            mask = P0_FEATURE_PINS_PRESENT;
   2a158:	f04f 33ff 	mov.w	r3, #4294967295
   2a15c:	e7ec      	b.n	2a138 <uarte_nrfx_pins_configure+0x300>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a15e:	4e0e      	ldr	r6, [pc, #56]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a160:	f240 2229 	movw	r2, #553	; 0x229
   2a164:	4631      	mov	r1, r6
   2a166:	480d      	ldr	r0, [pc, #52]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a168:	f011 fce6 	bl	3bb38 <printk>
   2a16c:	f240 2129 	movw	r1, #553	; 0x229
   2a170:	4630      	mov	r0, r6
   2a172:	f011 ff35 	bl	3bfe0 <assert_post_action>
   2a176:	e7e5      	b.n	2a144 <uarte_nrfx_pins_configure+0x30c>
            NRFX_ASSERT(0);
   2a178:	4d07      	ldr	r5, [pc, #28]	; (2a198 <uarte_nrfx_pins_configure+0x360>)
   2a17a:	f240 222e 	movw	r2, #558	; 0x22e
   2a17e:	4629      	mov	r1, r5
   2a180:	4806      	ldr	r0, [pc, #24]	; (2a19c <uarte_nrfx_pins_configure+0x364>)
   2a182:	f011 fcd9 	bl	3bb38 <printk>
   2a186:	f240 212e 	movw	r1, #558	; 0x22e
   2a18a:	4628      	mov	r0, r5
   2a18c:	f011 ff28 	bl	3bfe0 <assert_post_action>
   2a190:	e7dc      	b.n	2a14c <uarte_nrfx_pins_configure+0x314>
   2a192:	bf00      	nop
   2a194:	40842500 	.word	0x40842500
   2a198:	00042e20 	.word	0x00042e20
   2a19c:	00041c84 	.word	0x00041c84
    switch (port)
   2a1a0:	096b      	lsrs	r3, r5, #5
   2a1a2:	d010      	beq.n	2a1c6 <uarte_nrfx_pins_configure+0x38e>
    uint32_t mask = 0;
   2a1a4:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2a1a6:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a1aa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a1ac:	f013 0f01 	tst.w	r3, #1
   2a1b0:	d00c      	beq.n	2a1cc <uarte_nrfx_pins_configure+0x394>
    *p_pin = pin_number & 0x1F;
   2a1b2:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a1b6:	096b      	lsrs	r3, r5, #5
   2a1b8:	d115      	bne.n	2a1e6 <uarte_nrfx_pins_configure+0x3ae>
    reg->PIN_CNF[pin_number] = cnf;
   2a1ba:	3680      	adds	r6, #128	; 0x80
   2a1bc:	4b37      	ldr	r3, [pc, #220]	; (2a29c <uarte_nrfx_pins_configure+0x464>)
   2a1be:	2202      	movs	r2, #2
   2a1c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   2a1c4:	e795      	b.n	2a0f2 <uarte_nrfx_pins_configure+0x2ba>
            mask = P0_FEATURE_PINS_PRESENT;
   2a1c6:	f04f 33ff 	mov.w	r3, #4294967295
   2a1ca:	e7ec      	b.n	2a1a6 <uarte_nrfx_pins_configure+0x36e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a1cc:	4e34      	ldr	r6, [pc, #208]	; (2a2a0 <uarte_nrfx_pins_configure+0x468>)
   2a1ce:	f240 2229 	movw	r2, #553	; 0x229
   2a1d2:	4631      	mov	r1, r6
   2a1d4:	4833      	ldr	r0, [pc, #204]	; (2a2a4 <uarte_nrfx_pins_configure+0x46c>)
   2a1d6:	f011 fcaf 	bl	3bb38 <printk>
   2a1da:	f240 2129 	movw	r1, #553	; 0x229
   2a1de:	4630      	mov	r0, r6
   2a1e0:	f011 fefe 	bl	3bfe0 <assert_post_action>
   2a1e4:	e7e5      	b.n	2a1b2 <uarte_nrfx_pins_configure+0x37a>
            NRFX_ASSERT(0);
   2a1e6:	4d2e      	ldr	r5, [pc, #184]	; (2a2a0 <uarte_nrfx_pins_configure+0x468>)
   2a1e8:	f240 222e 	movw	r2, #558	; 0x22e
   2a1ec:	4629      	mov	r1, r5
   2a1ee:	482d      	ldr	r0, [pc, #180]	; (2a2a4 <uarte_nrfx_pins_configure+0x46c>)
   2a1f0:	f011 fca2 	bl	3bb38 <printk>
   2a1f4:	f240 212e 	movw	r1, #558	; 0x22e
   2a1f8:	4628      	mov	r0, r5
   2a1fa:	f011 fef1 	bl	3bfe0 <assert_post_action>
   2a1fe:	e7dc      	b.n	2a1ba <uarte_nrfx_pins_configure+0x382>
    switch (port)
   2a200:	096b      	lsrs	r3, r5, #5
   2a202:	d010      	beq.n	2a226 <uarte_nrfx_pins_configure+0x3ee>
    uint32_t mask = 0;
   2a204:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   2a206:	f005 021f 	and.w	r2, r5, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a20a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a20c:	f013 0f01 	tst.w	r3, #1
   2a210:	d00c      	beq.n	2a22c <uarte_nrfx_pins_configure+0x3f4>
    *p_pin = pin_number & 0x1F;
   2a212:	f005 061f 	and.w	r6, r5, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a216:	096b      	lsrs	r3, r5, #5
   2a218:	d115      	bne.n	2a246 <uarte_nrfx_pins_configure+0x40e>
    reg->PIN_CNF[pin_number] = cnf;
   2a21a:	3680      	adds	r6, #128	; 0x80
   2a21c:	4b1f      	ldr	r3, [pc, #124]	; (2a29c <uarte_nrfx_pins_configure+0x464>)
   2a21e:	2202      	movs	r2, #2
   2a220:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   2a224:	e76a      	b.n	2a0fc <uarte_nrfx_pins_configure+0x2c4>
            mask = P0_FEATURE_PINS_PRESENT;
   2a226:	f04f 33ff 	mov.w	r3, #4294967295
   2a22a:	e7ec      	b.n	2a206 <uarte_nrfx_pins_configure+0x3ce>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a22c:	4e1c      	ldr	r6, [pc, #112]	; (2a2a0 <uarte_nrfx_pins_configure+0x468>)
   2a22e:	f240 2229 	movw	r2, #553	; 0x229
   2a232:	4631      	mov	r1, r6
   2a234:	481b      	ldr	r0, [pc, #108]	; (2a2a4 <uarte_nrfx_pins_configure+0x46c>)
   2a236:	f011 fc7f 	bl	3bb38 <printk>
   2a23a:	f240 2129 	movw	r1, #553	; 0x229
   2a23e:	4630      	mov	r0, r6
   2a240:	f011 fece 	bl	3bfe0 <assert_post_action>
   2a244:	e7e5      	b.n	2a212 <uarte_nrfx_pins_configure+0x3da>
            NRFX_ASSERT(0);
   2a246:	4d16      	ldr	r5, [pc, #88]	; (2a2a0 <uarte_nrfx_pins_configure+0x468>)
   2a248:	f240 222e 	movw	r2, #558	; 0x22e
   2a24c:	4629      	mov	r1, r5
   2a24e:	4815      	ldr	r0, [pc, #84]	; (2a2a4 <uarte_nrfx_pins_configure+0x46c>)
   2a250:	f011 fc72 	bl	3bb38 <printk>
   2a254:	f240 212e 	movw	r1, #558	; 0x22e
   2a258:	4628      	mov	r0, r5
   2a25a:	f011 fec1 	bl	3bfe0 <assert_post_action>
   2a25e:	e7dc      	b.n	2a21a <uarte_nrfx_pins_configure+0x3e2>
            mask = P0_FEATURE_PINS_PRESENT;
   2a260:	f04f 33ff 	mov.w	r3, #4294967295
   2a264:	e753      	b.n	2a10e <uarte_nrfx_pins_configure+0x2d6>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a266:	4e0e      	ldr	r6, [pc, #56]	; (2a2a0 <uarte_nrfx_pins_configure+0x468>)
   2a268:	f240 2229 	movw	r2, #553	; 0x229
   2a26c:	4631      	mov	r1, r6
   2a26e:	480d      	ldr	r0, [pc, #52]	; (2a2a4 <uarte_nrfx_pins_configure+0x46c>)
   2a270:	f011 fc62 	bl	3bb38 <printk>
   2a274:	f240 2129 	movw	r1, #553	; 0x229
   2a278:	4630      	mov	r0, r6
   2a27a:	f011 feb1 	bl	3bfe0 <assert_post_action>
   2a27e:	e74d      	b.n	2a11c <uarte_nrfx_pins_configure+0x2e4>
            NRFX_ASSERT(0);
   2a280:	4d07      	ldr	r5, [pc, #28]	; (2a2a0 <uarte_nrfx_pins_configure+0x468>)
   2a282:	f240 222e 	movw	r2, #558	; 0x22e
   2a286:	4629      	mov	r1, r5
   2a288:	4806      	ldr	r0, [pc, #24]	; (2a2a4 <uarte_nrfx_pins_configure+0x46c>)
   2a28a:	f011 fc55 	bl	3bb38 <printk>
   2a28e:	f240 212e 	movw	r1, #558	; 0x22e
   2a292:	4628      	mov	r0, r5
   2a294:	f011 fea4 	bl	3bfe0 <assert_post_action>
   2a298:	e745      	b.n	2a126 <uarte_nrfx_pins_configure+0x2ee>
   2a29a:	bf00      	nop
   2a29c:	40842500 	.word	0x40842500
   2a2a0:	00042e20 	.word	0x00042e20
   2a2a4:	00041c84 	.word	0x00041c84

0002a2a8 <uarte_nrfx_pm_action>:
}


static int uarte_nrfx_pm_action(const struct device *dev,
				enum pm_device_action action)
{
   2a2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a2ac:	4605      	mov	r5, r0
	return dev->config;
   2a2ae:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   2a2b0:	683c      	ldr	r4, [r7, #0]
	return dev->data;
   2a2b2:	6906      	ldr	r6, [r0, #16]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
#ifdef CONFIG_PINCTRL
	int ret;
#endif

	switch (action) {
   2a2b4:	b321      	cbz	r1, 2a300 <uarte_nrfx_pm_action+0x58>
   2a2b6:	2901      	cmp	r1, #1
   2a2b8:	d170      	bne.n	2a39c <uarte_nrfx_pm_action+0xf4>
	case PM_DEVICE_ACTION_RESUME:
		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   2a2ba:	687b      	ldr	r3, [r7, #4]
   2a2bc:	f013 0f01 	tst.w	r3, #1
   2a2c0:	d10a      	bne.n	2a2d8 <uarte_nrfx_pm_action+0x30>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a2c2:	2308      	movs	r3, #8
   2a2c4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		return data->async->hw_rx_counting;
   2a2c8:	68f3      	ldr	r3, [r6, #12]
   2a2ca:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
		}

		nrf_uarte_enable(uarte);

#ifdef CONFIG_UART_ASYNC_API
		if (hw_rx_counting_enabled(data)) {
   2a2ce:	b93b      	cbnz	r3, 2a2e0 <uarte_nrfx_pm_action+0x38>
			nrfx_timer_enable(&get_dev_config(dev)->timer);
		}
		if (data->async) {
   2a2d0:	68f3      	ldr	r3, [r6, #12]
   2a2d2:	b153      	cbz	r3, 2a2ea <uarte_nrfx_pm_action+0x42>
			return 0;
   2a2d4:	2000      	movs	r0, #0
   2a2d6:	e063      	b.n	2a3a0 <uarte_nrfx_pm_action+0xf8>
			uarte_nrfx_pins_configure(dev, false);
   2a2d8:	2100      	movs	r1, #0
   2a2da:	f7ff fdad 	bl	29e38 <uarte_nrfx_pins_configure>
   2a2de:	e7f0      	b.n	2a2c2 <uarte_nrfx_pm_action+0x1a>
	return dev->config;
   2a2e0:	6868      	ldr	r0, [r5, #4]
			nrfx_timer_enable(&get_dev_config(dev)->timer);
   2a2e2:	3020      	adds	r0, #32
   2a2e4:	f008 f870 	bl	323c8 <nrfx_timer_enable>
   2a2e8:	e7f2      	b.n	2a2d0 <uarte_nrfx_pm_action+0x28>
		}
#endif
		if (!cfg->disable_rx) {
   2a2ea:	7a3b      	ldrb	r3, [r7, #8]
   2a2ec:	2b00      	cmp	r3, #0
   2a2ee:	d159      	bne.n	2a3a4 <uarte_nrfx_pm_action+0xfc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a2f0:	2000      	movs	r0, #0
   2a2f2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   2a2f6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a2fa:	2301      	movs	r3, #1
   2a2fc:	6023      	str	r3, [r4, #0]
}
   2a2fe:	e04f      	b.n	2a3a0 <uarte_nrfx_pm_action+0xf8>
	case PM_DEVICE_ACTION_SUSPEND:
		/* Disabling UART requires stopping RX, but stop RX event is
		 * only sent after each RX if async UART API is used.
		 */
#ifdef CONFIG_UART_ASYNC_API
		if (data->async) {
   2a300:	68f3      	ldr	r3, [r6, #12]
   2a302:	b12b      	cbz	r3, 2a310 <uarte_nrfx_pm_action+0x68>
			/* Entering inactive state requires device to be no
			 * active asynchronous calls.
			 */
			__ASSERT_NO_MSG(!data->async->rx_enabled);
   2a304:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
   2a308:	bb3b      	cbnz	r3, 2a35a <uarte_nrfx_pm_action+0xb2>
			__ASSERT_NO_MSG(!data->async->tx_size);
   2a30a:	68f3      	ldr	r3, [r6, #12]
   2a30c:	68db      	ldr	r3, [r3, #12]
   2a30e:	bb93      	cbnz	r3, 2a376 <uarte_nrfx_pm_action+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a310:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c

		}
#endif
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2a314:	b1ab      	cbz	r3, 2a342 <uarte_nrfx_pm_action+0x9a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a316:	2301      	movs	r3, #1
   2a318:	6063      	str	r3, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a31a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
						NRF_UARTE_INT_ENDRX_MASK);
				}
			}
#endif
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
			while (!nrf_uarte_event_check(uarte,
   2a31e:	b91b      	cbnz	r3, 2a328 <uarte_nrfx_pm_action+0x80>
   2a320:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
						      NRF_UARTE_EVENT_RXTO) &&
   2a324:	2b00      	cmp	r3, #0
   2a326:	d0f8      	beq.n	2a31a <uarte_nrfx_pm_action+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a328:	2300      	movs	r3, #0
   2a32a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2a32e:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   2a332:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   2a336:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   2a33a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2a33e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXTO);
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
		}

		wait_for_tx_stopped(dev);
   2a342:	4628      	mov	r0, r5
   2a344:	f012 fe85 	bl	3d052 <wait_for_tx_stopped>
		uart_disable(dev);
   2a348:	4628      	mov	r0, r5
   2a34a:	f012 feb2 	bl	3d0b2 <uart_disable>

		if (cfg->flags & UARTE_CFG_FLAG_GPIO_MGMT) {
   2a34e:	687b      	ldr	r3, [r7, #4]
   2a350:	f013 0f01 	tst.w	r3, #1
   2a354:	d11c      	bne.n	2a390 <uarte_nrfx_pm_action+0xe8>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2a356:	2000      	movs	r0, #0
   2a358:	e022      	b.n	2a3a0 <uarte_nrfx_pm_action+0xf8>
			__ASSERT_NO_MSG(!data->async->rx_enabled);
   2a35a:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2a3ac <uarte_nrfx_pm_action+0x104>
   2a35e:	f44f 62f5 	mov.w	r2, #1960	; 0x7a8
   2a362:	4641      	mov	r1, r8
   2a364:	4810      	ldr	r0, [pc, #64]	; (2a3a8 <uarte_nrfx_pm_action+0x100>)
   2a366:	f011 fbe7 	bl	3bb38 <printk>
   2a36a:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
   2a36e:	4640      	mov	r0, r8
   2a370:	f011 fe36 	bl	3bfe0 <assert_post_action>
   2a374:	e7c9      	b.n	2a30a <uarte_nrfx_pm_action+0x62>
			__ASSERT_NO_MSG(!data->async->tx_size);
   2a376:	4e0d      	ldr	r6, [pc, #52]	; (2a3ac <uarte_nrfx_pm_action+0x104>)
   2a378:	f240 72a9 	movw	r2, #1961	; 0x7a9
   2a37c:	4631      	mov	r1, r6
   2a37e:	480a      	ldr	r0, [pc, #40]	; (2a3a8 <uarte_nrfx_pm_action+0x100>)
   2a380:	f011 fbda 	bl	3bb38 <printk>
   2a384:	f240 71a9 	movw	r1, #1961	; 0x7a9
   2a388:	4630      	mov	r0, r6
   2a38a:	f011 fe29 	bl	3bfe0 <assert_post_action>
   2a38e:	e7bf      	b.n	2a310 <uarte_nrfx_pm_action+0x68>
			uarte_nrfx_pins_configure(dev, true);
   2a390:	2101      	movs	r1, #1
   2a392:	4628      	mov	r0, r5
   2a394:	f7ff fd50 	bl	29e38 <uarte_nrfx_pins_configure>
	return 0;
   2a398:	2000      	movs	r0, #0
   2a39a:	e001      	b.n	2a3a0 <uarte_nrfx_pm_action+0xf8>
	switch (action) {
   2a39c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2a3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   2a3a4:	2000      	movs	r0, #0
   2a3a6:	e7fb      	b.n	2a3a0 <uarte_nrfx_pm_action+0xf8>
   2a3a8:	00041c84 	.word	0x00041c84
   2a3ac:	00042f1c 	.word	0x00042f1c

0002a3b0 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a3b2:	b083      	sub	sp, #12
   2a3b4:	460f      	mov	r7, r1
   2a3b6:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   2a3b8:	b130      	cbz	r0, 2a3c8 <entropy_cc3xx_rng_get_entropy+0x18>
	__ASSERT_NO_MSG(buffer != NULL);
   2a3ba:	b187      	cbz	r7, 2a3de <entropy_cc3xx_rng_get_entropy+0x2e>
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
			chunk_size = length - offset;
   2a3bc:	f44f 6580 	mov.w	r5, #1024	; 0x400
   2a3c0:	2400      	movs	r4, #0
   2a3c2:	f06f 0015 	mvn.w	r0, #21
   2a3c6:	e01f      	b.n	2a408 <entropy_cc3xx_rng_get_entropy+0x58>
	__ASSERT_NO_MSG(dev != NULL);
   2a3c8:	4c15      	ldr	r4, [pc, #84]	; (2a420 <entropy_cc3xx_rng_get_entropy+0x70>)
   2a3ca:	2224      	movs	r2, #36	; 0x24
   2a3cc:	4621      	mov	r1, r4
   2a3ce:	4815      	ldr	r0, [pc, #84]	; (2a424 <entropy_cc3xx_rng_get_entropy+0x74>)
   2a3d0:	f011 fbb2 	bl	3bb38 <printk>
   2a3d4:	2124      	movs	r1, #36	; 0x24
   2a3d6:	4620      	mov	r0, r4
   2a3d8:	f011 fe02 	bl	3bfe0 <assert_post_action>
   2a3dc:	e7ed      	b.n	2a3ba <entropy_cc3xx_rng_get_entropy+0xa>
	__ASSERT_NO_MSG(buffer != NULL);
   2a3de:	4c10      	ldr	r4, [pc, #64]	; (2a420 <entropy_cc3xx_rng_get_entropy+0x70>)
   2a3e0:	2225      	movs	r2, #37	; 0x25
   2a3e2:	4621      	mov	r1, r4
   2a3e4:	480f      	ldr	r0, [pc, #60]	; (2a424 <entropy_cc3xx_rng_get_entropy+0x74>)
   2a3e6:	f011 fba7 	bl	3bb38 <printk>
   2a3ea:	2125      	movs	r1, #37	; 0x25
   2a3ec:	4620      	mov	r0, r4
   2a3ee:	f011 fdf7 	bl	3bfe0 <assert_post_action>
   2a3f2:	e7e3      	b.n	2a3bc <entropy_cc3xx_rng_get_entropy+0xc>
		#if defined(CONFIG_SPM)
			/** This is a call from a non-secure app that
			 * enables secure services, in which case entropy
			 * is gathered by calling through SPM.
			 */
			res = spm_request_random_number(buffer + offset,
   2a3f4:	aa01      	add	r2, sp, #4
   2a3f6:	4629      	mov	r1, r5
   2a3f8:	1938      	adds	r0, r7, r4
   2a3fa:	f012 f97f 	bl	3c6fc <spm_request_random_number>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   2a3fe:	9b01      	ldr	r3, [sp, #4]
   2a400:	42ab      	cmp	r3, r5
   2a402:	d109      	bne.n	2a418 <entropy_cc3xx_rng_get_entropy+0x68>
			return -EINVAL;
		}

		if (res != 0) {
   2a404:	b950      	cbnz	r0, 2a41c <entropy_cc3xx_rng_get_entropy+0x6c>
			break;
		}

		offset += chunk_size;
   2a406:	442c      	add	r4, r5
	while (offset < length) {
   2a408:	42a6      	cmp	r6, r4
   2a40a:	d907      	bls.n	2a41c <entropy_cc3xx_rng_get_entropy+0x6c>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2a40c:	1b33      	subs	r3, r6, r4
   2a40e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a412:	d2ef      	bcs.n	2a3f4 <entropy_cc3xx_rng_get_entropy+0x44>
			chunk_size = length - offset;
   2a414:	461d      	mov	r5, r3
   2a416:	e7ed      	b.n	2a3f4 <entropy_cc3xx_rng_get_entropy+0x44>
			return -EINVAL;
   2a418:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   2a41c:	b003      	add	sp, #12
   2a41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a420:	000430c4 	.word	0x000430c4
   2a424:	00041c84 	.word	0x00041c84

0002a428 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2a428:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   2a42c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2a430:	4b01      	ldr	r3, [pc, #4]	; (2a438 <set_comparator+0x10>)
   2a432:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   2a436:	4770      	bx	lr
   2a438:	40015000 	.word	0x40015000

0002a43c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   2a43c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2a440:	4b01      	ldr	r3, [pc, #4]	; (2a448 <get_comparator+0xc>)
   2a442:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   2a446:	4770      	bx	lr
   2a448:	40015000 	.word	0x40015000

0002a44c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2a44c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a450:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2a452:	4a02      	ldr	r2, [pc, #8]	; (2a45c <event_enable+0x10>)
   2a454:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   2a458:	4770      	bx	lr
   2a45a:	bf00      	nop
   2a45c:	40015000 	.word	0x40015000

0002a460 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2a460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a464:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2a466:	4a02      	ldr	r2, [pc, #8]	; (2a470 <event_disable+0x10>)
   2a468:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   2a46c:	4770      	bx	lr
   2a46e:	bf00      	nop
   2a470:	40015000 	.word	0x40015000

0002a474 <counter>:
     return p_reg->COUNTER;
   2a474:	4b01      	ldr	r3, [pc, #4]	; (2a47c <counter+0x8>)
   2a476:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   2a47a:	4770      	bx	lr
   2a47c:	40015000 	.word	0x40015000

0002a480 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   2a480:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2a482:	2301      	movs	r3, #1
   2a484:	4083      	lsls	r3, r0
   2a486:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a488:	4a0c      	ldr	r2, [pc, #48]	; (2a4bc <compare_int_lock+0x3c>)
   2a48a:	e8d2 1fef 	ldaex	r1, [r2]
   2a48e:	ea01 0c04 	and.w	ip, r1, r4
   2a492:	e8c2 cfee 	stlex	lr, ip, [r2]
   2a496:	f1be 0f00 	cmp.w	lr, #0
   2a49a:	d1f6      	bne.n	2a48a <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2a49c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2a4a0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   2a4a4:	4a06      	ldr	r2, [pc, #24]	; (2a4c0 <compare_int_lock+0x40>)
   2a4a6:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   2a4aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2a4ae:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   2a4b2:	420b      	tst	r3, r1
}
   2a4b4:	bf14      	ite	ne
   2a4b6:	2001      	movne	r0, #1
   2a4b8:	2000      	moveq	r0, #0
   2a4ba:	bd10      	pop	{r4, pc}
   2a4bc:	20010064 	.word	0x20010064
   2a4c0:	40015000 	.word	0x40015000

0002a4c4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   2a4c4:	b570      	push	{r4, r5, r6, lr}
   2a4c6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   2a4c8:	f013 f9f5 	bl	3d8b6 <full_int_lock>
   2a4cc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2a4ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a4d2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   2a4d4:	4a15      	ldr	r2, [pc, #84]	; (2a52c <channel_processing_check_and_clear+0x68>)
   2a4d6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   2a4da:	4213      	tst	r3, r2
   2a4dc:	d105      	bne.n	2a4ea <channel_processing_check_and_clear+0x26>
	bool result = false;
   2a4de:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   2a4e0:	4628      	mov	r0, r5
   2a4e2:	f013 f9f1 	bl	3d8c8 <full_int_unlock>

	return result;
}
   2a4e6:	4630      	mov	r0, r6
   2a4e8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2a4ea:	2301      	movs	r3, #1
   2a4ec:	40a3      	lsls	r3, r4
   2a4ee:	43db      	mvns	r3, r3
   2a4f0:	4a0f      	ldr	r2, [pc, #60]	; (2a530 <channel_processing_check_and_clear+0x6c>)
   2a4f2:	e8d2 1fef 	ldaex	r1, [r2]
   2a4f6:	ea01 0003 	and.w	r0, r1, r3
   2a4fa:	e8c2 0fe6 	stlex	r6, r0, [r2]
   2a4fe:	2e00      	cmp	r6, #0
   2a500:	d1f7      	bne.n	2a4f2 <channel_processing_check_and_clear+0x2e>
   2a502:	b959      	cbnz	r1, 2a51c <channel_processing_check_and_clear+0x58>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2a504:	f104 0350 	add.w	r3, r4, #80	; 0x50
   2a508:	009b      	lsls	r3, r3, #2
   2a50a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a50c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2a510:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   2a514:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2a516:	b113      	cbz	r3, 2a51e <channel_processing_check_and_clear+0x5a>
   2a518:	2301      	movs	r3, #1
   2a51a:	e000      	b.n	2a51e <channel_processing_check_and_clear+0x5a>
   2a51c:	2301      	movs	r3, #1
		if (result) {
   2a51e:	461e      	mov	r6, r3
   2a520:	2b00      	cmp	r3, #0
   2a522:	d0dd      	beq.n	2a4e0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   2a524:	4620      	mov	r0, r4
   2a526:	f013 f9b7 	bl	3d898 <event_clear>
   2a52a:	e7d9      	b.n	2a4e0 <channel_processing_check_and_clear+0x1c>
   2a52c:	40015000 	.word	0x40015000
   2a530:	20010060 	.word	0x20010060

0002a534 <compare_int_unlock>:
	if (key) {
   2a534:	b901      	cbnz	r1, 2a538 <compare_int_unlock+0x4>
}
   2a536:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   2a538:	2301      	movs	r3, #1
   2a53a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a53c:	4a0e      	ldr	r2, [pc, #56]	; (2a578 <compare_int_unlock+0x44>)
   2a53e:	e8d2 1fef 	ldaex	r1, [r2]
   2a542:	4319      	orrs	r1, r3
   2a544:	e8c2 1fec 	stlex	ip, r1, [r2]
   2a548:	f1bc 0f00 	cmp.w	ip, #0
   2a54c:	d1f7      	bne.n	2a53e <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2a54e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a552:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   2a554:	4a09      	ldr	r2, [pc, #36]	; (2a57c <compare_int_unlock+0x48>)
   2a556:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a55a:	4b09      	ldr	r3, [pc, #36]	; (2a580 <compare_int_unlock+0x4c>)
   2a55c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2a560:	fa23 f000 	lsr.w	r0, r3, r0
   2a564:	f010 0f01 	tst.w	r0, #1
   2a568:	d0e5      	beq.n	2a536 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a56a:	4b06      	ldr	r3, [pc, #24]	; (2a584 <compare_int_unlock+0x50>)
   2a56c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2a570:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2a574:	e7df      	b.n	2a536 <compare_int_unlock+0x2>
   2a576:	bf00      	nop
   2a578:	20010064 	.word	0x20010064
   2a57c:	40015000 	.word	0x40015000
   2a580:	20010060 	.word	0x20010060
   2a584:	e000e100 	.word	0xe000e100

0002a588 <sys_clock_timeout_handler>:
{
   2a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a58a:	4607      	mov	r7, r0
   2a58c:	4614      	mov	r4, r2
   2a58e:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   2a590:	4610      	mov	r0, r2
   2a592:	4619      	mov	r1, r3
   2a594:	f013 f98c 	bl	3d8b0 <absolute_time_to_cc>
   2a598:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2a59a:	4b15      	ldr	r3, [pc, #84]	; (2a5f0 <sys_clock_timeout_handler+0x68>)
   2a59c:	681a      	ldr	r2, [r3, #0]
   2a59e:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   2a5a0:	601c      	str	r4, [r3, #0]
   2a5a2:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2a5a4:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2a5a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2a5ac:	d308      	bcc.n	2a5c0 <sys_clock_timeout_handler+0x38>
	return false;
   2a5ae:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2a5b0:	f00e f906 	bl	387c0 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   2a5b4:	4638      	mov	r0, r7
   2a5b6:	f7ff ff41 	bl	2a43c <get_comparator>
   2a5ba:	42a8      	cmp	r0, r5
   2a5bc:	d00c      	beq.n	2a5d8 <sys_clock_timeout_handler+0x50>
}
   2a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2a5c0:	4b0c      	ldr	r3, [pc, #48]	; (2a5f4 <sys_clock_timeout_handler+0x6c>)
   2a5c2:	6819      	ldr	r1, [r3, #0]
   2a5c4:	0a0b      	lsrs	r3, r1, #8
   2a5c6:	060a      	lsls	r2, r1, #24
   2a5c8:	1952      	adds	r2, r2, r5
   2a5ca:	f143 0300 	adc.w	r3, r3, #0
   2a5ce:	490a      	ldr	r1, [pc, #40]	; (2a5f8 <sys_clock_timeout_handler+0x70>)
   2a5d0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   2a5d4:	2401      	movs	r4, #1
   2a5d6:	e7eb      	b.n	2a5b0 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   2a5d8:	b11c      	cbz	r4, 2a5e2 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   2a5da:	4638      	mov	r0, r7
   2a5dc:	f7ff ff36 	bl	2a44c <event_enable>
}
   2a5e0:	e7ed      	b.n	2a5be <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   2a5e2:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2a5e6:	4638      	mov	r0, r7
   2a5e8:	f7ff ff1e 	bl	2a428 <set_comparator>
   2a5ec:	e7f5      	b.n	2a5da <sys_clock_timeout_handler+0x52>
   2a5ee:	bf00      	nop
   2a5f0:	2000cc28 	.word	0x2000cc28
   2a5f4:	20010068 	.word	0x20010068
   2a5f8:	2000cc10 	.word	0x2000cc10

0002a5fc <z_nrf_rtc_timer_read>:
{
   2a5fc:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2a5fe:	4b0d      	ldr	r3, [pc, #52]	; (2a634 <z_nrf_rtc_timer_read+0x38>)
   2a600:	681b      	ldr	r3, [r3, #0]
   2a602:	0a1d      	lsrs	r5, r3, #8
   2a604:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2a606:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   2a60a:	f7ff ff33 	bl	2a474 <counter>
   2a60e:	4603      	mov	r3, r0
	val += cntr;
   2a610:	1820      	adds	r0, r4, r0
   2a612:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2a616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2a61a:	d20a      	bcs.n	2a632 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   2a61c:	4b06      	ldr	r3, [pc, #24]	; (2a638 <z_nrf_rtc_timer_read+0x3c>)
   2a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a622:	4299      	cmp	r1, r3
   2a624:	bf08      	it	eq
   2a626:	4290      	cmpeq	r0, r2
   2a628:	d203      	bcs.n	2a632 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   2a62a:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2a62e:	f141 0100 	adc.w	r1, r1, #0
}
   2a632:	bd38      	pop	{r3, r4, r5, pc}
   2a634:	20010068 	.word	0x20010068
   2a638:	2000cc10 	.word	0x2000cc10

0002a63c <compare_set_nolocks>:
{
   2a63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a640:	4606      	mov	r6, r0
   2a642:	4614      	mov	r4, r2
   2a644:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   2a646:	4610      	mov	r0, r2
   2a648:	4619      	mov	r1, r3
   2a64a:	f013 f931 	bl	3d8b0 <absolute_time_to_cc>
   2a64e:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2a650:	f7ff ffd4 	bl	2a5fc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2a654:	42a9      	cmp	r1, r5
   2a656:	bf08      	it	eq
   2a658:	42a0      	cmpeq	r0, r4
   2a65a:	d21e      	bcs.n	2a69a <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   2a65c:	ebb4 0800 	subs.w	r8, r4, r0
   2a660:	eb65 0901 	sbc.w	r9, r5, r1
   2a664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2a668:	2300      	movs	r3, #0
   2a66a:	454b      	cmp	r3, r9
   2a66c:	bf08      	it	eq
   2a66e:	4542      	cmpeq	r2, r8
   2a670:	d32a      	bcc.n	2a6c8 <compare_set_nolocks+0x8c>
		if (target_time != cc_data[chan].target_time) {
   2a672:	4b17      	ldr	r3, [pc, #92]	; (2a6d0 <compare_set_nolocks+0x94>)
   2a674:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   2a678:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2a67c:	42ab      	cmp	r3, r5
   2a67e:	bf08      	it	eq
   2a680:	42a2      	cmpeq	r2, r4
   2a682:	d014      	beq.n	2a6ae <compare_set_nolocks+0x72>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   2a684:	4639      	mov	r1, r7
   2a686:	4630      	mov	r0, r6
   2a688:	f013 f923 	bl	3d8d2 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   2a68c:	4639      	mov	r1, r7
   2a68e:	f013 f8ff 	bl	3d890 <counter_sub>
   2a692:	1824      	adds	r4, r4, r0
   2a694:	f145 0500 	adc.w	r5, r5, #0
   2a698:	e009      	b.n	2a6ae <compare_set_nolocks+0x72>
		atomic_or(&force_isr_mask, BIT(chan));
   2a69a:	2301      	movs	r3, #1
   2a69c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a69e:	4a0d      	ldr	r2, [pc, #52]	; (2a6d4 <compare_set_nolocks+0x98>)
   2a6a0:	e8d2 1fef 	ldaex	r1, [r2]
   2a6a4:	4319      	orrs	r1, r3
   2a6a6:	e8c2 1fe0 	stlex	r0, r1, [r2]
   2a6aa:	2800      	cmp	r0, #0
   2a6ac:	d1f8      	bne.n	2a6a0 <compare_set_nolocks+0x64>
	cc_data[chan].target_time = target_time;
   2a6ae:	4b08      	ldr	r3, [pc, #32]	; (2a6d0 <compare_set_nolocks+0x94>)
   2a6b0:	0132      	lsls	r2, r6, #4
   2a6b2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   2a6b6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   2a6ba:	9908      	ldr	r1, [sp, #32]
   2a6bc:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2a6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a6c0:	6073      	str	r3, [r6, #4]
	return ret;
   2a6c2:	2000      	movs	r0, #0
}
   2a6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   2a6c8:	f06f 0015 	mvn.w	r0, #21
   2a6cc:	e7fa      	b.n	2a6c4 <compare_set_nolocks+0x88>
   2a6ce:	bf00      	nop
   2a6d0:	2000cc18 	.word	0x2000cc18
   2a6d4:	20010060 	.word	0x20010060

0002a6d8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2a6d8:	b530      	push	{r4, r5, lr}
   2a6da:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   2a6dc:	2300      	movs	r3, #0
   2a6de:	4a1e      	ldr	r2, [pc, #120]	; (2a758 <sys_clock_driver_init+0x80>)
   2a6e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2a6e4:	2b00      	cmp	r3, #0
   2a6e6:	dd25      	ble.n	2a734 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   2a6e8:	4c1b      	ldr	r4, [pc, #108]	; (2a758 <sys_clock_driver_init+0x80>)
   2a6ea:	2502      	movs	r5, #2
   2a6ec:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a6f0:	4b1a      	ldr	r3, [pc, #104]	; (2a75c <sys_clock_driver_init+0x84>)
   2a6f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2a6f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2a6fa:	2200      	movs	r2, #0
   2a6fc:	2101      	movs	r1, #1
   2a6fe:	2015      	movs	r0, #21
   2a700:	f7fd f8ac 	bl	2785c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2a704:	2015      	movs	r0, #21
   2a706:	f7fd f877 	bl	277f8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2a70a:	2301      	movs	r3, #1
   2a70c:	4a14      	ldr	r2, [pc, #80]	; (2a760 <sys_clock_driver_init+0x88>)
   2a70e:	6013      	str	r3, [r2, #0]
   2a710:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2a712:	4a14      	ldr	r2, [pc, #80]	; (2a764 <sys_clock_driver_init+0x8c>)
   2a714:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2a716:	2400      	movs	r4, #0
   2a718:	9401      	str	r4, [sp, #4]
   2a71a:	4b13      	ldr	r3, [pc, #76]	; (2a768 <sys_clock_driver_init+0x90>)
   2a71c:	9300      	str	r3, [sp, #0]
   2a71e:	4a13      	ldr	r2, [pc, #76]	; (2a76c <sys_clock_driver_init+0x94>)
   2a720:	2300      	movs	r3, #0
   2a722:	4620      	mov	r0, r4
   2a724:	f013 f910 	bl	3d948 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2a728:	4628      	mov	r0, r5
   2a72a:	f7fe fc43 	bl	28fb4 <z_nrf_clock_control_lf_on>

	return 0;
}
   2a72e:	4620      	mov	r0, r4
   2a730:	b003      	add	sp, #12
   2a732:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2a734:	4a0e      	ldr	r2, [pc, #56]	; (2a770 <sys_clock_driver_init+0x98>)
   2a736:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2a73a:	f04f 30ff 	mov.w	r0, #4294967295
   2a73e:	f04f 31ff 	mov.w	r1, #4294967295
   2a742:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2a746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2a74a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   2a74c:	4902      	ldr	r1, [pc, #8]	; (2a758 <sys_clock_driver_init+0x80>)
   2a74e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2a752:	3301      	adds	r3, #1
   2a754:	e7c6      	b.n	2a6e4 <sys_clock_driver_init+0xc>
   2a756:	bf00      	nop
   2a758:	40015000 	.word	0x40015000
   2a75c:	e000e100 	.word	0xe000e100
   2a760:	40015008 	.word	0x40015008
   2a764:	20010064 	.word	0x20010064
   2a768:	0002a589 	.word	0x0002a589
   2a76c:	007fffff 	.word	0x007fffff
   2a770:	2000cc18 	.word	0x2000cc18

0002a774 <process_channel>:
{
   2a774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a778:	b082      	sub	sp, #8
   2a77a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   2a77c:	f7ff fea2 	bl	2a4c4 <channel_processing_check_and_clear>
   2a780:	b910      	cbnz	r0, 2a788 <process_channel+0x14>
}
   2a782:	b002      	add	sp, #8
   2a784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   2a788:	f7ff ff38 	bl	2a5fc <z_nrf_rtc_timer_read>
   2a78c:	4606      	mov	r6, r0
   2a78e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   2a790:	f013 f891 	bl	3d8b6 <full_int_lock>
   2a794:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   2a796:	4b13      	ldr	r3, [pc, #76]	; (2a7e4 <process_channel+0x70>)
   2a798:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2a79c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   2a7a0:	454f      	cmp	r7, r9
   2a7a2:	bf08      	it	eq
   2a7a4:	4546      	cmpeq	r6, r8
   2a7a6:	d20b      	bcs.n	2a7c0 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   2a7a8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   2a7aa:	4650      	mov	r0, sl
   2a7ac:	f013 f88c 	bl	3d8c8 <full_int_unlock>
		if (handler) {
   2a7b0:	2e00      	cmp	r6, #0
   2a7b2:	d0e6      	beq.n	2a782 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   2a7b4:	9500      	str	r5, [sp, #0]
   2a7b6:	4642      	mov	r2, r8
   2a7b8:	464b      	mov	r3, r9
   2a7ba:	4620      	mov	r0, r4
   2a7bc:	47b0      	blx	r6
}
   2a7be:	e7e0      	b.n	2a782 <process_channel+0xe>
			handler = cc_data[chan].callback;
   2a7c0:	4a08      	ldr	r2, [pc, #32]	; (2a7e4 <process_channel+0x70>)
   2a7c2:	0123      	lsls	r3, r4, #4
   2a7c4:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   2a7c8:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   2a7ca:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   2a7cc:	2000      	movs	r0, #0
   2a7ce:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2a7d0:	f04f 32ff 	mov.w	r2, #4294967295
   2a7d4:	f04f 33ff 	mov.w	r3, #4294967295
   2a7d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   2a7dc:	4620      	mov	r0, r4
   2a7de:	f7ff fe3f 	bl	2a460 <event_disable>
   2a7e2:	e7e2      	b.n	2a7aa <process_channel+0x36>
   2a7e4:	2000cc18 	.word	0x2000cc18

0002a7e8 <rtc_nrf_isr>:
{
   2a7e8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   2a7ea:	4b0d      	ldr	r3, [pc, #52]	; (2a820 <rtc_nrf_isr+0x38>)
   2a7ec:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2a7f0:	f013 0f02 	tst.w	r3, #2
   2a7f4:	d00a      	beq.n	2a80c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a7f6:	4b0b      	ldr	r3, [pc, #44]	; (2a824 <rtc_nrf_isr+0x3c>)
   2a7f8:	681b      	ldr	r3, [r3, #0]
   2a7fa:	b13b      	cbz	r3, 2a80c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2a7fc:	4b09      	ldr	r3, [pc, #36]	; (2a824 <rtc_nrf_isr+0x3c>)
   2a7fe:	2200      	movs	r2, #0
   2a800:	601a      	str	r2, [r3, #0]
   2a802:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   2a804:	4a08      	ldr	r2, [pc, #32]	; (2a828 <rtc_nrf_isr+0x40>)
   2a806:	6813      	ldr	r3, [r2, #0]
   2a808:	3301      	adds	r3, #1
   2a80a:	6013      	str	r3, [r2, #0]
{
   2a80c:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2a80e:	2c00      	cmp	r4, #0
   2a810:	dd00      	ble.n	2a814 <rtc_nrf_isr+0x2c>
}
   2a812:	bd10      	pop	{r4, pc}
		process_channel(chan);
   2a814:	4620      	mov	r0, r4
   2a816:	f7ff ffad 	bl	2a774 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2a81a:	3401      	adds	r4, #1
   2a81c:	e7f7      	b.n	2a80e <rtc_nrf_isr+0x26>
   2a81e:	bf00      	nop
   2a820:	40015000 	.word	0x40015000
   2a824:	40015104 	.word	0x40015104
   2a828:	20010068 	.word	0x20010068

0002a82c <sys_clock_set_timeout>:
{
   2a82c:	b510      	push	{r4, lr}
   2a82e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2a830:	f1b0 3fff 	cmp.w	r0, #4294967295
   2a834:	d007      	beq.n	2a846 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2a836:	1e44      	subs	r4, r0, #1
   2a838:	2c00      	cmp	r4, #0
   2a83a:	dd07      	ble.n	2a84c <sys_clock_set_timeout+0x20>
   2a83c:	4b11      	ldr	r3, [pc, #68]	; (2a884 <sys_clock_set_timeout+0x58>)
   2a83e:	429c      	cmp	r4, r3
   2a840:	dd05      	ble.n	2a84e <sys_clock_set_timeout+0x22>
   2a842:	4c11      	ldr	r4, [pc, #68]	; (2a888 <sys_clock_set_timeout+0x5c>)
   2a844:	e003      	b.n	2a84e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2a846:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   2a84a:	e7f4      	b.n	2a836 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2a84c:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2a84e:	f7ff fed5 	bl	2a5fc <z_nrf_rtc_timer_read>
   2a852:	4b0e      	ldr	r3, [pc, #56]	; (2a88c <sys_clock_set_timeout+0x60>)
   2a854:	e9d3 2300 	ldrd	r2, r3, [r3]
   2a858:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   2a85a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2a85e:	d300      	bcc.n	2a862 <sys_clock_set_timeout+0x36>
		ticks = 0;
   2a860:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2a862:	4404      	add	r4, r0
   2a864:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   2a866:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2a86a:	d300      	bcc.n	2a86e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   2a86c:	4c06      	ldr	r4, [pc, #24]	; (2a888 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2a86e:	2000      	movs	r0, #0
   2a870:	9001      	str	r0, [sp, #4]
   2a872:	4907      	ldr	r1, [pc, #28]	; (2a890 <sys_clock_set_timeout+0x64>)
   2a874:	9100      	str	r1, [sp, #0]
   2a876:	1912      	adds	r2, r2, r4
   2a878:	f143 0300 	adc.w	r3, r3, #0
   2a87c:	f013 f864 	bl	3d948 <compare_set>
}
   2a880:	b002      	add	sp, #8
   2a882:	bd10      	pop	{r4, pc}
   2a884:	007ffffe 	.word	0x007ffffe
   2a888:	007fffff 	.word	0x007fffff
   2a88c:	2000cc28 	.word	0x2000cc28
   2a890:	0002a589 	.word	0x0002a589

0002a894 <sys_clock_elapsed>:
{
   2a894:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2a896:	f7ff feb1 	bl	2a5fc <z_nrf_rtc_timer_read>
   2a89a:	4b02      	ldr	r3, [pc, #8]	; (2a8a4 <sys_clock_elapsed+0x10>)
   2a89c:	681b      	ldr	r3, [r3, #0]
}
   2a89e:	1ac0      	subs	r0, r0, r3
   2a8a0:	bd08      	pop	{r3, pc}
   2a8a2:	bf00      	nop
   2a8a4:	2000cc28 	.word	0x2000cc28

0002a8a8 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   2a8a8:	b510      	push	{r4, lr}
	if (!first_time_init) {
   2a8aa:	4b1d      	ldr	r3, [pc, #116]	; (2a920 <_nrf_modem_lib_init+0x78>)
   2a8ac:	781b      	ldrb	r3, [r3, #0]
   2a8ae:	b1c3      	cbz	r3, 2a8e2 <_nrf_modem_lib_init+0x3a>
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   2a8b0:	2200      	movs	r2, #0
   2a8b2:	4611      	mov	r1, r2
   2a8b4:	202a      	movs	r0, #42	; 0x2a
   2a8b6:	f7fc ffd1 	bl	2785c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   2a8ba:	2100      	movs	r1, #0
   2a8bc:	4819      	ldr	r0, [pc, #100]	; (2a924 <_nrf_modem_lib_init+0x7c>)
   2a8be:	f00a fe83 	bl	355c8 <nrf_modem_init>
   2a8c2:	4b19      	ldr	r3, [pc, #100]	; (2a928 <_nrf_modem_lib_init+0x80>)
   2a8c4:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2a8c6:	f04f 32ff 	mov.w	r2, #4294967295
   2a8ca:	f04f 33ff 	mov.w	r3, #4294967295
   2a8ce:	4817      	ldr	r0, [pc, #92]	; (2a92c <_nrf_modem_lib_init+0x84>)
   2a8d0:	f00b fb7e 	bl	35fd0 <z_impl_k_mutex_lock>
	return list->head;
   2a8d4:	4b16      	ldr	r3, [pc, #88]	; (2a930 <_nrf_modem_lib_init+0x88>)
   2a8d6:	6818      	ldr	r0, [r3, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2a8d8:	b1e0      	cbz	r0, 2a914 <_nrf_modem_lib_init+0x6c>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   2a8da:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a8dc:	b178      	cbz	r0, 2a8fe <_nrf_modem_lib_init+0x56>
	return node->next;
   2a8de:	6804      	ldr	r4, [r0, #0]
   2a8e0:	e00d      	b.n	2a8fe <_nrf_modem_lib_init+0x56>
	list->head = NULL;
   2a8e2:	4b13      	ldr	r3, [pc, #76]	; (2a930 <_nrf_modem_lib_init+0x88>)
   2a8e4:	2200      	movs	r2, #0
   2a8e6:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   2a8e8:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_init(mutex);
   2a8ea:	4810      	ldr	r0, [pc, #64]	; (2a92c <_nrf_modem_lib_init+0x84>)
   2a8ec:	f015 f97c 	bl	3fbe8 <z_impl_k_mutex_init>
		first_time_init = true;
   2a8f0:	4b0b      	ldr	r3, [pc, #44]	; (2a920 <_nrf_modem_lib_init+0x78>)
   2a8f2:	2201      	movs	r2, #1
   2a8f4:	701a      	strb	r2, [r3, #0]
   2a8f6:	e7db      	b.n	2a8b0 <_nrf_modem_lib_init+0x8>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   2a8f8:	4623      	mov	r3, r4
   2a8fa:	4620      	mov	r0, r4
   2a8fc:	461c      	mov	r4, r3
   2a8fe:	b148      	cbz	r0, 2a914 <_nrf_modem_lib_init+0x6c>
					     next_thread, node) {
			k_sem_give(&thread->sem);
   2a900:	3004      	adds	r0, #4
	z_impl_k_sem_give(sem);
   2a902:	f00b fe11 	bl	36528 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   2a906:	2c00      	cmp	r4, #0
   2a908:	d0f6      	beq.n	2a8f8 <_nrf_modem_lib_init+0x50>
   2a90a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a90c:	2c00      	cmp	r4, #0
   2a90e:	d0f4      	beq.n	2a8fa <_nrf_modem_lib_init+0x52>
	return node->next;
   2a910:	6823      	ldr	r3, [r4, #0]
   2a912:	e7f2      	b.n	2a8fa <_nrf_modem_lib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   2a914:	4805      	ldr	r0, [pc, #20]	; (2a92c <_nrf_modem_lib_init+0x84>)
   2a916:	f00b fc51 	bl	361bc <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   2a91a:	2000      	movs	r0, #0
   2a91c:	bd10      	pop	{r4, pc}
   2a91e:	bf00      	nop
   2a920:	20010dfc 	.word	0x20010dfc
   2a924:	0004310c 	.word	0x0004310c
   2a928:	2001006c 	.word	0x2001006c
   2a92c:	20010078 	.word	0x20010078
   2a930:	20010070 	.word	0x20010070

0002a934 <nrf_modem_lib_get_init_ret>:
}

int nrf_modem_lib_get_init_ret(void)
{
	return init_ret;
}
   2a934:	4b01      	ldr	r3, [pc, #4]	; (2a93c <nrf_modem_lib_get_init_ret+0x8>)
   2a936:	6818      	ldr	r0, [r3, #0]
   2a938:	4770      	bx	lr
   2a93a:	bf00      	nop
   2a93c:	2001006c 	.word	0x2001006c

0002a940 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2a940:	b430      	push	{r4, r5}
   2a942:	4604      	mov	r4, r0
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
	int entry_age, oldest_entry_age = 0;
   2a944:	2500      	movs	r5, #0
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2a946:	4811      	ldr	r0, [pc, #68]	; (2a98c <thread_monitor_entry_get+0x4c>)
	struct thread_monitor_entry *entry = thread_event_monitor;
   2a948:	4603      	mov	r3, r0

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2a94a:	e000      	b.n	2a94e <thread_monitor_entry_get+0xe>
   2a94c:	3308      	adds	r3, #8
   2a94e:	b19b      	cbz	r3, 2a978 <thread_monitor_entry_get+0x38>
   2a950:	4a0e      	ldr	r2, [pc, #56]	; (2a98c <thread_monitor_entry_get+0x4c>)
   2a952:	4293      	cmp	r3, r2
   2a954:	d310      	bcc.n	2a978 <thread_monitor_entry_get+0x38>
   2a956:	3250      	adds	r2, #80	; 0x50
   2a958:	4293      	cmp	r3, r2
   2a95a:	d20d      	bcs.n	2a978 <thread_monitor_entry_get+0x38>
		if (entry->id == id) {
   2a95c:	681a      	ldr	r2, [r3, #0]
   2a95e:	42a2      	cmp	r2, r4
   2a960:	d011      	beq.n	2a986 <thread_monitor_entry_get+0x46>
			return entry;
		} else if (entry->id == 0) {
   2a962:	b142      	cbz	r2, 2a976 <thread_monitor_entry_get+0x36>
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2a964:	4a0a      	ldr	r2, [pc, #40]	; (2a990 <thread_monitor_entry_get+0x50>)
   2a966:	6812      	ldr	r2, [r2, #0]
   2a968:	6859      	ldr	r1, [r3, #4]
   2a96a:	1a52      	subs	r2, r2, r1
		if (entry_age > oldest_entry_age) {
   2a96c:	4295      	cmp	r5, r2
   2a96e:	daed      	bge.n	2a94c <thread_monitor_entry_get+0xc>
			oldest_entry_age = entry_age;
   2a970:	4615      	mov	r5, r2
			new_entry = entry;
   2a972:	4618      	mov	r0, r3
   2a974:	e7ea      	b.n	2a94c <thread_monitor_entry_get+0xc>
			new_entry = entry;
   2a976:	4618      	mov	r0, r3
		}
	}

	new_entry->id = id;
   2a978:	6004      	str	r4, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2a97a:	4b05      	ldr	r3, [pc, #20]	; (2a990 <thread_monitor_entry_get+0x50>)
   2a97c:	681b      	ldr	r3, [r3, #0]
   2a97e:	3b01      	subs	r3, #1
   2a980:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   2a982:	bc30      	pop	{r4, r5}
   2a984:	4770      	bx	lr
			return entry;
   2a986:	4618      	mov	r0, r3
   2a988:	e7fb      	b.n	2a982 <thread_monitor_entry_get+0x42>
   2a98a:	bf00      	nop
   2a98c:	20010100 	.word	0x20010100
   2a990:	200100d8 	.word	0x200100d8

0002a994 <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
	entry->cnt = rpc_event_cnt;
   2a994:	4b01      	ldr	r3, [pc, #4]	; (2a99c <thread_monitor_entry_update+0x8>)
   2a996:	681b      	ldr	r3, [r3, #0]
   2a998:	6043      	str	r3, [r0, #4]
}
   2a99a:	4770      	bx	lr
   2a99c:	200100d8 	.word	0x200100d8

0002a9a0 <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   2a9a0:	b508      	push	{r3, lr}
	bool allow_to_sleep = true;

	if (rpc_event_cnt != entry->cnt) {
   2a9a2:	6842      	ldr	r2, [r0, #4]
   2a9a4:	4b04      	ldr	r3, [pc, #16]	; (2a9b8 <can_thread_sleep+0x18>)
   2a9a6:	681b      	ldr	r3, [r3, #0]
   2a9a8:	429a      	cmp	r2, r3
   2a9aa:	d101      	bne.n	2a9b0 <can_thread_sleep+0x10>
	bool allow_to_sleep = true;
   2a9ac:	2001      	movs	r0, #1
		thread_monitor_entry_update(entry);
		allow_to_sleep = false;
	}

	return allow_to_sleep;
}
   2a9ae:	bd08      	pop	{r3, pc}
		thread_monitor_entry_update(entry);
   2a9b0:	f7ff fff0 	bl	2a994 <thread_monitor_entry_update>
		allow_to_sleep = false;
   2a9b4:	2000      	movs	r0, #0
   2a9b6:	e7fa      	b.n	2a9ae <can_thread_sleep+0xe>
   2a9b8:	200100d8 	.word	0x200100d8

0002a9bc <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   2a9bc:	b538      	push	{r3, r4, r5, lr}
   2a9be:	4604      	mov	r4, r0
	__asm__ volatile(
   2a9c0:	f04f 0320 	mov.w	r3, #32
   2a9c4:	f3ef 8511 	mrs	r5, BASEPRI
   2a9c8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a9cc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2a9d0:	f00d fbce 	bl	38170 <z_impl_z_current_get>
	bool allow_to_sleep = false;
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	entry = thread_monitor_entry_get(k_current_get());
   2a9d4:	f7ff ffb4 	bl	2a940 <thread_monitor_entry_get>

	if (can_thread_sleep(entry)) {
   2a9d8:	f7ff ffe2 	bl	2a9a0 <can_thread_sleep>
   2a9dc:	b138      	cbz	r0, 2a9ee <sleeping_thread_add+0x32>
	parent->next = child;
   2a9de:	2300      	movs	r3, #0
   2a9e0:	6023      	str	r3, [r4, #0]
	return list->tail;
   2a9e2:	4b07      	ldr	r3, [pc, #28]	; (2aa00 <sleeping_thread_add+0x44>)
   2a9e4:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2a9e6:	b13b      	cbz	r3, 2a9f8 <sleeping_thread_add+0x3c>
	parent->next = child;
   2a9e8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a9ea:	4b05      	ldr	r3, [pc, #20]	; (2aa00 <sleeping_thread_add+0x44>)
   2a9ec:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   2a9ee:	f385 8811 	msr	BASEPRI, r5
   2a9f2:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return allow_to_sleep;
}
   2a9f6:	bd38      	pop	{r3, r4, r5, pc}
   2a9f8:	4b01      	ldr	r3, [pc, #4]	; (2aa00 <sleeping_thread_add+0x44>)
   2a9fa:	605c      	str	r4, [r3, #4]
	list->head = node;
   2a9fc:	601c      	str	r4, [r3, #0]
}
   2a9fe:	e7f6      	b.n	2a9ee <sleeping_thread_add+0x32>
   2aa00:	200100f8 	.word	0x200100f8

0002aa04 <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   2aa04:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aa06:	f04f 0320 	mov.w	r3, #32
   2aa0a:	f3ef 8411 	mrs	r4, BASEPRI
   2aa0e:	f383 8812 	msr	BASEPRI_MAX, r3
   2aa12:	f3bf 8f6f 	isb	sy
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
   2aa16:	4601      	mov	r1, r0
	return list->head;
   2aa18:	4b14      	ldr	r3, [pc, #80]	; (2aa6c <sleeping_thread_remove+0x68>)
   2aa1a:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2aa1c:	2200      	movs	r2, #0
   2aa1e:	b16b      	cbz	r3, 2aa3c <sleeping_thread_remove+0x38>
   2aa20:	4299      	cmp	r1, r3
   2aa22:	d002      	beq.n	2aa2a <sleeping_thread_remove+0x26>
   2aa24:	461a      	mov	r2, r3
   2aa26:	681b      	ldr	r3, [r3, #0]
   2aa28:	e7f9      	b.n	2aa1e <sleeping_thread_remove+0x1a>
Z_GENLIST_REMOVE(slist, snode)
   2aa2a:	b192      	cbz	r2, 2aa52 <sleeping_thread_remove+0x4e>
	return node->next;
   2aa2c:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   2aa2e:	6013      	str	r3, [r2, #0]
	return list->tail;
   2aa30:	4b0e      	ldr	r3, [pc, #56]	; (2aa6c <sleeping_thread_remove+0x68>)
   2aa32:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2aa34:	4298      	cmp	r0, r3
   2aa36:	d015      	beq.n	2aa64 <sleeping_thread_remove+0x60>
	parent->next = child;
   2aa38:	2300      	movs	r3, #0
   2aa3a:	6003      	str	r3, [r0, #0]
   2aa3c:	f00d fb98 	bl	38170 <z_impl_z_current_get>

	entry = thread_monitor_entry_get(k_current_get());
   2aa40:	f7ff ff7e 	bl	2a940 <thread_monitor_entry_get>
	thread_monitor_entry_update(entry);
   2aa44:	f7ff ffa6 	bl	2a994 <thread_monitor_entry_update>
	__asm__ volatile(
   2aa48:	f384 8811 	msr	BASEPRI, r4
   2aa4c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   2aa50:	bd10      	pop	{r4, pc}
	return node->next;
   2aa52:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2aa54:	4b05      	ldr	r3, [pc, #20]	; (2aa6c <sleeping_thread_remove+0x68>)
   2aa56:	601a      	str	r2, [r3, #0]
	return list->tail;
   2aa58:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2aa5a:	4298      	cmp	r0, r3
   2aa5c:	d1ec      	bne.n	2aa38 <sleeping_thread_remove+0x34>
	list->tail = node;
   2aa5e:	4b03      	ldr	r3, [pc, #12]	; (2aa6c <sleeping_thread_remove+0x68>)
   2aa60:	605a      	str	r2, [r3, #4]
}
   2aa62:	e7e9      	b.n	2aa38 <sleeping_thread_remove+0x34>
	list->tail = node;
   2aa64:	4b01      	ldr	r3, [pc, #4]	; (2aa6c <sleeping_thread_remove+0x68>)
   2aa66:	605a      	str	r2, [r3, #4]
}
   2aa68:	e7e6      	b.n	2aa38 <sleeping_thread_remove+0x34>
   2aa6a:	bf00      	nop
   2aa6c:	200100f8 	.word	0x200100f8

0002aa70 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2aa70:	4668      	mov	r0, sp
   2aa72:	f020 0107 	bic.w	r1, r0, #7
   2aa76:	468d      	mov	sp, r1
   2aa78:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2aa7a:	4b10      	ldr	r3, [pc, #64]	; (2aabc <rpc_proxy_irq_handler+0x4c>)
   2aa7c:	e8d3 2fef 	ldaex	r2, [r3]
   2aa80:	3201      	adds	r2, #1
   2aa82:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2aa86:	2900      	cmp	r1, #0
   2aa88:	d1f8      	bne.n	2aa7c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_application_irq_handler();
   2aa8a:	f008 f909 	bl	32ca0 <nrf_modem_application_irq_handler>
	return list->head;
   2aa8e:	4b0c      	ldr	r3, [pc, #48]	; (2aac0 <rpc_proxy_irq_handler+0x50>)
   2aa90:	681c      	ldr	r4, [r3, #0]
   2aa92:	e000      	b.n	2aa96 <rpc_proxy_irq_handler+0x26>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2aa94:	461c      	mov	r4, r3

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2aa96:	b144      	cbz	r4, 2aaaa <rpc_proxy_irq_handler+0x3a>
		k_sem_give(&thread->sem);
   2aa98:	1d20      	adds	r0, r4, #4
	z_impl_k_sem_give(sem);
   2aa9a:	f00b fd45 	bl	36528 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2aa9e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2aaa0:	2c00      	cmp	r4, #0
   2aaa2:	d0f7      	beq.n	2aa94 <rpc_proxy_irq_handler+0x24>
	return node->next;
   2aaa4:	6823      	ldr	r3, [r4, #0]
   2aaa6:	2b00      	cmp	r3, #0
   2aaa8:	d1f4      	bne.n	2aa94 <rpc_proxy_irq_handler+0x24>
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2aaaa:	f7fc ff01 	bl	278b0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2aaae:	f7fc ffd7 	bl	27a60 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2aab2:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   2aab6:	4685      	mov	sp, r0
   2aab8:	4770      	bx	lr
   2aaba:	bf00      	nop
   2aabc:	200100d8 	.word	0x200100d8
   2aac0:	200100f8 	.word	0x200100f8

0002aac4 <nrf_modem_os_sem_init>:
{
   2aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aac6:	4604      	mov	r4, r0
   2aac8:	460d      	mov	r5, r1
   2aaca:	4616      	mov	r6, r2
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   2aacc:	6803      	ldr	r3, [r0, #0]
   2aace:	b12b      	cbz	r3, 2aadc <nrf_modem_os_sem_init+0x18>
   2aad0:	4a12      	ldr	r2, [pc, #72]	; (2ab1c <nrf_modem_os_sem_init+0x58>)
   2aad2:	4293      	cmp	r3, r2
   2aad4:	d302      	bcc.n	2aadc <nrf_modem_os_sem_init+0x18>
   2aad6:	3248      	adds	r2, #72	; 0x48
   2aad8:	4293      	cmp	r3, r2
   2aada:	d30d      	bcc.n	2aaf8 <nrf_modem_os_sem_init+0x34>
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   2aadc:	4b10      	ldr	r3, [pc, #64]	; (2ab20 <nrf_modem_os_sem_init+0x5c>)
   2aade:	781b      	ldrb	r3, [r3, #0]
   2aae0:	2b02      	cmp	r3, #2
   2aae2:	d80f      	bhi.n	2ab04 <nrf_modem_os_sem_init+0x40>
	*sem = &nrf_modem_os_sems[used++];
   2aae4:	4a0e      	ldr	r2, [pc, #56]	; (2ab20 <nrf_modem_os_sem_init+0x5c>)
   2aae6:	7813      	ldrb	r3, [r2, #0]
   2aae8:	1c59      	adds	r1, r3, #1
   2aaea:	7011      	strb	r1, [r2, #0]
   2aaec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2aaf0:	4a0a      	ldr	r2, [pc, #40]	; (2ab1c <nrf_modem_os_sem_init+0x58>)
   2aaf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2aaf6:	6023      	str	r3, [r4, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   2aaf8:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2aafa:	4632      	mov	r2, r6
   2aafc:	4629      	mov	r1, r5
   2aafe:	f015 f89c 	bl	3fc3a <z_impl_k_sem_init>
}
   2ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(used < NRF_MODEM_OS_NUM_SEM_REQUIRED,
   2ab04:	4f07      	ldr	r7, [pc, #28]	; (2ab24 <nrf_modem_os_sem_init+0x60>)
   2ab06:	22f4      	movs	r2, #244	; 0xf4
   2ab08:	4639      	mov	r1, r7
   2ab0a:	4807      	ldr	r0, [pc, #28]	; (2ab28 <nrf_modem_os_sem_init+0x64>)
   2ab0c:	f011 f814 	bl	3bb38 <printk>
   2ab10:	21f4      	movs	r1, #244	; 0xf4
   2ab12:	4638      	mov	r0, r7
   2ab14:	f011 fa64 	bl	3bfe0 <assert_post_action>
   2ab18:	e7e4      	b.n	2aae4 <nrf_modem_os_sem_init+0x20>
   2ab1a:	bf00      	nop
   2ab1c:	20010090 	.word	0x20010090
   2ab20:	20010dfd 	.word	0x20010dfd
   2ab24:	00043130 	.word	0x00043130
   2ab28:	00041c84 	.word	0x00041c84

0002ab2c <nrf_modem_os_sem_give>:
{
   2ab2c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2ab2e:	4604      	mov	r4, r0
   2ab30:	b128      	cbz	r0, 2ab3e <nrf_modem_os_sem_give+0x12>
   2ab32:	4b0a      	ldr	r3, [pc, #40]	; (2ab5c <nrf_modem_os_sem_give+0x30>)
   2ab34:	4298      	cmp	r0, r3
   2ab36:	d302      	bcc.n	2ab3e <nrf_modem_os_sem_give+0x12>
   2ab38:	3348      	adds	r3, #72	; 0x48
   2ab3a:	4298      	cmp	r0, r3
   2ab3c:	d309      	bcc.n	2ab52 <nrf_modem_os_sem_give+0x26>
   2ab3e:	4d08      	ldr	r5, [pc, #32]	; (2ab60 <nrf_modem_os_sem_give+0x34>)
   2ab40:	22ff      	movs	r2, #255	; 0xff
   2ab42:	4629      	mov	r1, r5
   2ab44:	4807      	ldr	r0, [pc, #28]	; (2ab64 <nrf_modem_os_sem_give+0x38>)
   2ab46:	f010 fff7 	bl	3bb38 <printk>
   2ab4a:	21ff      	movs	r1, #255	; 0xff
   2ab4c:	4628      	mov	r0, r5
   2ab4e:	f011 fa47 	bl	3bfe0 <assert_post_action>
	z_impl_k_sem_give(sem);
   2ab52:	4620      	mov	r0, r4
   2ab54:	f00b fce8 	bl	36528 <z_impl_k_sem_give>
}
   2ab58:	bd38      	pop	{r3, r4, r5, pc}
   2ab5a:	bf00      	nop
   2ab5c:	20010090 	.word	0x20010090
   2ab60:	00043130 	.word	0x00043130
   2ab64:	00041c84 	.word	0x00041c84

0002ab68 <nrf_modem_os_sem_take>:
{
   2ab68:	b570      	push	{r4, r5, r6, lr}
   2ab6a:	460c      	mov	r4, r1
	__ASSERT(PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)sem),
   2ab6c:	4605      	mov	r5, r0
   2ab6e:	b128      	cbz	r0, 2ab7c <nrf_modem_os_sem_take+0x14>
   2ab70:	4b1b      	ldr	r3, [pc, #108]	; (2abe0 <nrf_modem_os_sem_take+0x78>)
   2ab72:	4298      	cmp	r0, r3
   2ab74:	d302      	bcc.n	2ab7c <nrf_modem_os_sem_take+0x14>
   2ab76:	3348      	adds	r3, #72	; 0x48
   2ab78:	4298      	cmp	r0, r3
   2ab7a:	d30b      	bcc.n	2ab94 <nrf_modem_os_sem_take+0x2c>
   2ab7c:	4e19      	ldr	r6, [pc, #100]	; (2abe4 <nrf_modem_os_sem_take+0x7c>)
   2ab7e:	f240 1209 	movw	r2, #265	; 0x109
   2ab82:	4631      	mov	r1, r6
   2ab84:	4818      	ldr	r0, [pc, #96]	; (2abe8 <nrf_modem_os_sem_take+0x80>)
   2ab86:	f010 ffd7 	bl	3bb38 <printk>
   2ab8a:	f240 1109 	movw	r1, #265	; 0x109
   2ab8e:	4630      	mov	r0, r6
   2ab90:	f011 fa26 	bl	3bfe0 <assert_post_action>
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2ab94:	f1b4 3fff 	cmp.w	r4, #4294967295
   2ab98:	d01c      	beq.n	2abd4 <nrf_modem_os_sem_take+0x6c>
   2ab9a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2ab9e:	17e3      	asrs	r3, r4, #31
   2aba0:	03d9      	lsls	r1, r3, #15
   2aba2:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
   2aba6:	03e0      	lsls	r0, r4, #15
   2aba8:	f240 34e7 	movw	r4, #999	; 0x3e7
   2abac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2abb0:	2300      	movs	r3, #0
   2abb2:	1900      	adds	r0, r0, r4
   2abb4:	f04f 0400 	mov.w	r4, #0
   2abb8:	eb44 0101 	adc.w	r1, r4, r1
   2abbc:	f7f6 fa70 	bl	210a0 <__aeabi_uldivmod>
   2abc0:	4602      	mov	r2, r0
   2abc2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2abc4:	4628      	mov	r0, r5
   2abc6:	f00b fced 	bl	365a4 <z_impl_k_sem_take>
	if (err == -EAGAIN) {
   2abca:	f110 0f0b 	cmn.w	r0, #11
   2abce:	d005      	beq.n	2abdc <nrf_modem_os_sem_take+0x74>
	return 0;
   2abd0:	2000      	movs	r0, #0
}
   2abd2:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   2abd4:	f04f 32ff 	mov.w	r2, #4294967295
   2abd8:	4613      	mov	r3, r2
   2abda:	e7f3      	b.n	2abc4 <nrf_modem_os_sem_take+0x5c>
		return NRF_ETIMEDOUT;
   2abdc:	2074      	movs	r0, #116	; 0x74
   2abde:	e7f8      	b.n	2abd2 <nrf_modem_os_sem_take+0x6a>
   2abe0:	20010090 	.word	0x20010090
   2abe4:	00043130 	.word	0x00043130
   2abe8:	00041c84 	.word	0x00041c84

0002abec <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2abec:	4b02      	ldr	r3, [pc, #8]	; (2abf8 <nrf_modem_os_application_irq_set+0xc>)
   2abee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2abf2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2abf6:	4770      	bx	lr
   2abf8:	e000e100 	.word	0xe000e100

0002abfc <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2abfc:	4b02      	ldr	r3, [pc, #8]	; (2ac08 <nrf_modem_os_application_irq_clear+0xc>)
   2abfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2ac02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2ac06:	4770      	bx	lr
   2ac08:	e000e100 	.word	0xe000e100

0002ac0c <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ac0c:	4b02      	ldr	r3, [pc, #8]	; (2ac18 <nrf_modem_os_trace_irq_set+0xc>)
   2ac0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2ac12:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2ac16:	4770      	bx	lr
   2ac18:	e000e100 	.word	0xe000e100

0002ac1c <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ac1c:	4b02      	ldr	r3, [pc, #8]	; (2ac28 <nrf_modem_os_trace_irq_clear+0xc>)
   2ac1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2ac22:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2ac26:	4770      	bx	lr
   2ac28:	e000e100 	.word	0xe000e100

0002ac2c <nrf_modem_os_alloc>:
			   rpc_proxy_irq_handler, UNUSED_FLAGS);
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
}

void *nrf_modem_os_alloc(size_t bytes)
{
   2ac2c:	b508      	push	{r3, lr}
   2ac2e:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   2ac30:	2200      	movs	r2, #0
   2ac32:	2300      	movs	r3, #0
   2ac34:	4801      	ldr	r0, [pc, #4]	; (2ac3c <nrf_modem_os_alloc+0x10>)
   2ac36:	f014 ff76 	bl	3fb26 <k_heap_alloc>
		heap_diag.failed_allocs++;
		LOG_WRN("alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   2ac3a:	bd08      	pop	{r3, pc}
   2ac3c:	2000c9f0 	.word	0x2000c9f0

0002ac40 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   2ac40:	b508      	push	{r3, lr}
   2ac42:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   2ac44:	4801      	ldr	r0, [pc, #4]	; (2ac4c <nrf_modem_os_free+0xc>)
   2ac46:	f00a ffe9 	bl	35c1c <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_ALLOC
	LOG_INF("free(%p)", mem);
#endif
}
   2ac4a:	bd08      	pop	{r3, pc}
   2ac4c:	2000c9f0 	.word	0x2000c9f0

0002ac50 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   2ac50:	b508      	push	{r3, lr}
   2ac52:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   2ac54:	2200      	movs	r2, #0
   2ac56:	2300      	movs	r3, #0
   2ac58:	4801      	ldr	r0, [pc, #4]	; (2ac60 <nrf_modem_os_shm_tx_alloc+0x10>)
   2ac5a:	f014 ff64 	bl	3fb26 <k_heap_alloc>
		shmem_diag.failed_allocs++;
		LOG_WRN("shm_tx_alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   2ac5e:	bd08      	pop	{r3, pc}
   2ac60:	200100e0 	.word	0x200100e0

0002ac64 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   2ac64:	b508      	push	{r3, lr}
   2ac66:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   2ac68:	4801      	ldr	r0, [pc, #4]	; (2ac70 <nrf_modem_os_shm_tx_free+0xc>)
   2ac6a:	f00a ffd7 	bl	35c1c <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_SHM_TX_ALLOC
	LOG_INF("shm_tx_free(%p)", mem);
#endif
}
   2ac6e:	bd08      	pop	{r3, pc}
   2ac70:	200100e0 	.word	0x200100e0

0002ac74 <nrf_modem_os_init>:
	}
}

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   2ac74:	b510      	push	{r4, lr}
	list->head = NULL;
   2ac76:	4b0c      	ldr	r3, [pc, #48]	; (2aca8 <nrf_modem_os_init+0x34>)
   2ac78:	2400      	movs	r4, #0
   2ac7a:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   2ac7c:	605c      	str	r4, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ac7e:	4b0b      	ldr	r3, [pc, #44]	; (2acac <nrf_modem_os_init+0x38>)
   2ac80:	e8d3 2fef 	ldaex	r2, [r3]
   2ac84:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2ac88:	2900      	cmp	r1, #0
   2ac8a:	d1f9      	bne.n	2ac80 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   2ac8c:	f012 ff26 	bl	3dadc <read_task_create>
		trace_irq_init();
	}

#endif

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   2ac90:	4b07      	ldr	r3, [pc, #28]	; (2acb0 <nrf_modem_os_init+0x3c>)
   2ac92:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   2ac94:	4b07      	ldr	r3, [pc, #28]	; (2acb4 <nrf_modem_os_init+0x40>)
   2ac96:	601c      	str	r4, [r3, #0]

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   2ac98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2ac9c:	4906      	ldr	r1, [pc, #24]	; (2acb8 <nrf_modem_os_init+0x44>)
   2ac9e:	4807      	ldr	r0, [pc, #28]	; (2acbc <nrf_modem_os_init+0x48>)
   2aca0:	f014 ff39 	bl	3fb16 <k_heap_init>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   2aca4:	bd10      	pop	{r4, pc}
   2aca6:	bf00      	nop
   2aca8:	200100f8 	.word	0x200100f8
   2acac:	200100d8 	.word	0x200100d8
   2acb0:	2001008c 	.word	0x2001008c
   2acb4:	200100dc 	.word	0x200100dc
   2acb8:	200084e8 	.word	0x200084e8
   2acbc:	200100e0 	.word	0x200100e0

0002acc0 <nrf91_socket_is_supported>:
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
}

static bool nrf91_socket_is_supported(int family, int type, int proto)
{
	if (offload_disabled) {
   2acc0:	4b0c      	ldr	r3, [pc, #48]	; (2acf4 <nrf91_socket_is_supported+0x34>)
   2acc2:	7818      	ldrb	r0, [r3, #0]
   2acc4:	b990      	cbnz	r0, 2acec <nrf91_socket_is_supported+0x2c>
		return false;
	}

	if (tls_offload_disabled && proto_is_secure(proto)) {
   2acc6:	4b0c      	ldr	r3, [pc, #48]	; (2acf8 <nrf91_socket_is_supported+0x38>)
   2acc8:	781b      	ldrb	r3, [r3, #0]
   2acca:	b18b      	cbz	r3, 2acf0 <nrf91_socket_is_supported+0x30>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   2accc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
   2acd0:	2902      	cmp	r1, #2
   2acd2:	d907      	bls.n	2ace4 <nrf91_socket_is_supported+0x24>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   2acd4:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   2acd8:	2a01      	cmp	r2, #1
   2acda:	d901      	bls.n	2ace0 <nrf91_socket_is_supported+0x20>
   2acdc:	2200      	movs	r2, #0
   2acde:	e002      	b.n	2ace6 <nrf91_socket_is_supported+0x26>
   2ace0:	2201      	movs	r2, #1
   2ace2:	e000      	b.n	2ace6 <nrf91_socket_is_supported+0x26>
   2ace4:	2201      	movs	r2, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   2ace6:	b922      	cbnz	r2, 2acf2 <nrf91_socket_is_supported+0x32>
		return false;
	}

	return true;
   2ace8:	4618      	mov	r0, r3
   2acea:	4770      	bx	lr
		return false;
   2acec:	2000      	movs	r0, #0
   2acee:	4770      	bx	lr
	return true;
   2acf0:	2001      	movs	r0, #1
}
   2acf2:	4770      	bx	lr
   2acf4:	20010dfe 	.word	0x20010dfe
   2acf8:	20010dff 	.word	0x20010dff

0002acfc <nrf91_nrf_modem_lib_socket_offload_init>:

static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   2acfc:	2300      	movs	r3, #0
   2acfe:	e005      	b.n	2ad0c <nrf91_nrf_modem_lib_socket_offload_init+0x10>
		offload_ctx[i].nrf_fd = -1;
   2ad00:	4a04      	ldr	r2, [pc, #16]	; (2ad14 <nrf91_nrf_modem_lib_socket_offload_init+0x18>)
   2ad02:	f04f 31ff 	mov.w	r1, #4294967295
   2ad06:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   2ad0a:	3301      	adds	r3, #1
   2ad0c:	2b07      	cmp	r3, #7
   2ad0e:	ddf7      	ble.n	2ad00 <nrf91_nrf_modem_lib_socket_offload_init+0x4>
	}

	return 0;
}
   2ad10:	2000      	movs	r0, #0
   2ad12:	4770      	bx	lr
   2ad14:	200101d4 	.word	0x200101d4

0002ad18 <release_ctx>:
{
   2ad18:	b538      	push	{r3, r4, r5, lr}
   2ad1a:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2ad1c:	4d08      	ldr	r5, [pc, #32]	; (2ad40 <release_ctx+0x28>)
   2ad1e:	f04f 32ff 	mov.w	r2, #4294967295
   2ad22:	f04f 33ff 	mov.w	r3, #4294967295
   2ad26:	4628      	mov	r0, r5
   2ad28:	f00b f952 	bl	35fd0 <z_impl_k_mutex_lock>
	ctx->nrf_fd = -1;
   2ad2c:	f04f 33ff 	mov.w	r3, #4294967295
   2ad30:	6023      	str	r3, [r4, #0]
	ctx->lock = NULL;
   2ad32:	2300      	movs	r3, #0
   2ad34:	6063      	str	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
   2ad36:	4628      	mov	r0, r5
   2ad38:	f00b fa40 	bl	361bc <z_impl_k_mutex_unlock>
}
   2ad3c:	bd38      	pop	{r3, r4, r5, pc}
   2ad3e:	bf00      	nop
   2ad40:	2000ca44 	.word	0x2000ca44

0002ad44 <allocate_ctx>:
{
   2ad44:	b538      	push	{r3, r4, r5, lr}
   2ad46:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2ad48:	f04f 32ff 	mov.w	r2, #4294967295
   2ad4c:	f04f 33ff 	mov.w	r3, #4294967295
   2ad50:	480c      	ldr	r0, [pc, #48]	; (2ad84 <allocate_ctx+0x40>)
   2ad52:	f00b f93d 	bl	35fd0 <z_impl_k_mutex_lock>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   2ad56:	2300      	movs	r3, #0
   2ad58:	e000      	b.n	2ad5c <allocate_ctx+0x18>
   2ad5a:	3301      	adds	r3, #1
   2ad5c:	2b07      	cmp	r3, #7
   2ad5e:	dc0b      	bgt.n	2ad78 <allocate_ctx+0x34>
		if (offload_ctx[i].nrf_fd == -1) {
   2ad60:	4a09      	ldr	r2, [pc, #36]	; (2ad88 <allocate_ctx+0x44>)
   2ad62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   2ad66:	f1b2 3fff 	cmp.w	r2, #4294967295
   2ad6a:	d1f6      	bne.n	2ad5a <allocate_ctx+0x16>
			ctx = &offload_ctx[i];
   2ad6c:	4a06      	ldr	r2, [pc, #24]	; (2ad88 <allocate_ctx+0x44>)
   2ad6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   2ad72:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
			break;
   2ad76:	e000      	b.n	2ad7a <allocate_ctx+0x36>
	struct nrf_sock_ctx *ctx = NULL;
   2ad78:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
   2ad7a:	4802      	ldr	r0, [pc, #8]	; (2ad84 <allocate_ctx+0x40>)
   2ad7c:	f00b fa1e 	bl	361bc <z_impl_k_mutex_unlock>
}
   2ad80:	4628      	mov	r0, r5
   2ad82:	bd38      	pop	{r3, r4, r5, pc}
   2ad84:	2000ca44 	.word	0x2000ca44
   2ad88:	200101d4 	.word	0x200101d4

0002ad8c <nrf91_socket_offload_sendmsg>:
{
   2ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad90:	b083      	sub	sp, #12
	if (msg == NULL) {
   2ad92:	b171      	cbz	r1, 2adb2 <nrf91_socket_offload_sendmsg+0x26>
   2ad94:	4681      	mov	r9, r0
   2ad96:	4692      	mov	sl, r2
   2ad98:	460d      	mov	r5, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   2ad9a:	2300      	movs	r3, #0
	ssize_t len = 0;
   2ad9c:	4619      	mov	r1, r3
	for (i = 0; i < msg->msg_iovlen; i++) {
   2ad9e:	68ea      	ldr	r2, [r5, #12]
   2ada0:	429a      	cmp	r2, r3
   2ada2:	d90d      	bls.n	2adc0 <nrf91_socket_offload_sendmsg+0x34>
		len += msg->msg_iov[i].iov_len;
   2ada4:	68aa      	ldr	r2, [r5, #8]
   2ada6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2adaa:	6852      	ldr	r2, [r2, #4]
   2adac:	4411      	add	r1, r2
	for (i = 0; i < msg->msg_iovlen; i++) {
   2adae:	3301      	adds	r3, #1
   2adb0:	e7f5      	b.n	2ad9e <nrf91_socket_offload_sendmsg+0x12>
		errno = EINVAL;
   2adb2:	f011 fd61 	bl	3c878 <__errno>
   2adb6:	2316      	movs	r3, #22
   2adb8:	6003      	str	r3, [r0, #0]
		return -1;
   2adba:	f04f 34ff 	mov.w	r4, #4294967295
   2adbe:	e03a      	b.n	2ae36 <nrf91_socket_offload_sendmsg+0xaa>
	if (len <= sizeof(buf)) {
   2adc0:	2980      	cmp	r1, #128	; 0x80
   2adc2:	d903      	bls.n	2adcc <nrf91_socket_offload_sendmsg+0x40>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2adc4:	f04f 0b00 	mov.w	fp, #0
	len = 0;
   2adc8:	46d8      	mov	r8, fp
   2adca:	e03a      	b.n	2ae42 <nrf91_socket_offload_sendmsg+0xb6>
	return z_impl_k_mutex_lock(mutex, timeout);
   2adcc:	f04f 32ff 	mov.w	r2, #4294967295
   2add0:	f04f 33ff 	mov.w	r3, #4294967295
   2add4:	482c      	ldr	r0, [pc, #176]	; (2ae88 <nrf91_socket_offload_sendmsg+0xfc>)
   2add6:	f00b f8fb 	bl	35fd0 <z_impl_k_mutex_lock>
		for (i = 0; i < msg->msg_iovlen; i++) {
   2adda:	2400      	movs	r4, #0
		len = 0;
   2addc:	4627      	mov	r7, r4
		for (i = 0; i < msg->msg_iovlen; i++) {
   2adde:	e00f      	b.n	2ae00 <nrf91_socket_offload_sendmsg+0x74>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2ade0:	68ab      	ldr	r3, [r5, #8]
   2ade2:	00e6      	lsls	r6, r4, #3
   2ade4:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   2ade8:	6852      	ldr	r2, [r2, #4]
   2adea:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   2adee:	4827      	ldr	r0, [pc, #156]	; (2ae8c <nrf91_socket_offload_sendmsg+0x100>)
   2adf0:	4438      	add	r0, r7
   2adf2:	f015 f885 	bl	3ff00 <memcpy>
			len += msg->msg_iov[i].iov_len;
   2adf6:	68ab      	ldr	r3, [r5, #8]
   2adf8:	4433      	add	r3, r6
   2adfa:	685b      	ldr	r3, [r3, #4]
   2adfc:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   2adfe:	3401      	adds	r4, #1
   2ae00:	68eb      	ldr	r3, [r5, #12]
   2ae02:	42a3      	cmp	r3, r4
   2ae04:	d8ec      	bhi.n	2ade0 <nrf91_socket_offload_sendmsg+0x54>
		offset = 0;
   2ae06:	2600      	movs	r6, #0
		ret = 0;
   2ae08:	4634      	mov	r4, r6
		while ((offset < len) && (ret >= 0)) {
   2ae0a:	42b7      	cmp	r7, r6
   2ae0c:	dd10      	ble.n	2ae30 <nrf91_socket_offload_sendmsg+0xa4>
   2ae0e:	2c00      	cmp	r4, #0
   2ae10:	db0e      	blt.n	2ae30 <nrf91_socket_offload_sendmsg+0xa4>
				msg->msg_name, msg->msg_namelen);
   2ae12:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   2ae14:	686a      	ldr	r2, [r5, #4]
   2ae16:	9201      	str	r2, [sp, #4]
   2ae18:	9300      	str	r3, [sp, #0]
   2ae1a:	4653      	mov	r3, sl
   2ae1c:	1bba      	subs	r2, r7, r6
   2ae1e:	491b      	ldr	r1, [pc, #108]	; (2ae8c <nrf91_socket_offload_sendmsg+0x100>)
   2ae20:	4431      	add	r1, r6
   2ae22:	4648      	mov	r0, r9
   2ae24:	f013 f8c8 	bl	3dfb8 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   2ae28:	1e04      	subs	r4, r0, #0
   2ae2a:	ddee      	ble.n	2ae0a <nrf91_socket_offload_sendmsg+0x7e>
				offset += ret;
   2ae2c:	4426      	add	r6, r4
   2ae2e:	e7ec      	b.n	2ae0a <nrf91_socket_offload_sendmsg+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   2ae30:	4815      	ldr	r0, [pc, #84]	; (2ae88 <nrf91_socket_offload_sendmsg+0xfc>)
   2ae32:	f00b f9c3 	bl	361bc <z_impl_k_mutex_unlock>
}
   2ae36:	4620      	mov	r0, r4
   2ae38:	b003      	add	sp, #12
   2ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < msg->msg_iovlen; i++) {
   2ae3e:	f10b 0b01 	add.w	fp, fp, #1
   2ae42:	68eb      	ldr	r3, [r5, #12]
   2ae44:	455b      	cmp	r3, fp
   2ae46:	d91d      	bls.n	2ae84 <nrf91_socket_offload_sendmsg+0xf8>
		if (msg->msg_iov[i].iov_len == 0) {
   2ae48:	68ab      	ldr	r3, [r5, #8]
   2ae4a:	ea4f 07cb 	mov.w	r7, fp, lsl #3
   2ae4e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   2ae52:	685b      	ldr	r3, [r3, #4]
   2ae54:	2b00      	cmp	r3, #0
   2ae56:	d0f2      	beq.n	2ae3e <nrf91_socket_offload_sendmsg+0xb2>
		offset = 0;
   2ae58:	2600      	movs	r6, #0
		while (offset < msg->msg_iov[i].iov_len) {
   2ae5a:	68ab      	ldr	r3, [r5, #8]
   2ae5c:	19da      	adds	r2, r3, r7
   2ae5e:	6852      	ldr	r2, [r2, #4]
   2ae60:	42b2      	cmp	r2, r6
   2ae62:	d9ec      	bls.n	2ae3e <nrf91_socket_offload_sendmsg+0xb2>
				(((uint8_t *) msg->msg_iov[i].iov_base) + offset),
   2ae64:	59d9      	ldr	r1, [r3, r7]
				msg->msg_name, msg->msg_namelen);
   2ae66:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   2ae68:	6868      	ldr	r0, [r5, #4]
   2ae6a:	9001      	str	r0, [sp, #4]
   2ae6c:	9300      	str	r3, [sp, #0]
   2ae6e:	4653      	mov	r3, sl
   2ae70:	1b92      	subs	r2, r2, r6
   2ae72:	4431      	add	r1, r6
   2ae74:	4648      	mov	r0, r9
   2ae76:	f013 f89f 	bl	3dfb8 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   2ae7a:	1e04      	subs	r4, r0, #0
   2ae7c:	dbdb      	blt.n	2ae36 <nrf91_socket_offload_sendmsg+0xaa>
			offset += ret;
   2ae7e:	4426      	add	r6, r4
			len += ret;
   2ae80:	44a0      	add	r8, r4
   2ae82:	e7ea      	b.n	2ae5a <nrf91_socket_offload_sendmsg+0xce>
	return len;
   2ae84:	4644      	mov	r4, r8
   2ae86:	e7d6      	b.n	2ae36 <nrf91_socket_offload_sendmsg+0xaa>
   2ae88:	2000cabc 	.word	0x2000cabc
   2ae8c:	20010150 	.word	0x20010150

0002ae90 <nrf91_socket_offload_accept>:
{
   2ae90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ae94:	b08b      	sub	sp, #44	; 0x2c
   2ae96:	4606      	mov	r6, r0
   2ae98:	460c      	mov	r4, r1
   2ae9a:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   2ae9c:	f7f9 ff08 	bl	24cb0 <z_reserve_fd>
   2aea0:	4605      	mov	r5, r0
	int sd = OBJ_TO_SD(obj);
   2aea2:	6830      	ldr	r0, [r6, #0]
	if (fd < 0) {
   2aea4:	2d00      	cmp	r5, #0
   2aea6:	db57      	blt.n	2af58 <nrf91_socket_offload_accept+0xc8>
	if ((addr != NULL) && (addrlen != NULL)) {
   2aea8:	b37c      	cbz	r4, 2af0a <nrf91_socket_offload_accept+0x7a>
   2aeaa:	b38f      	cbz	r7, 2af10 <nrf91_socket_offload_accept+0x80>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2aeac:	683b      	ldr	r3, [r7, #0]
   2aeae:	2b08      	cmp	r3, #8
   2aeb0:	d025      	beq.n	2aefe <nrf91_socket_offload_accept+0x6e>
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2aeb2:	2324      	movs	r3, #36	; 0x24
   2aeb4:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2aeb6:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   2aeb8:	f10d 0804 	add.w	r8, sp, #4
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   2aebc:	4641      	mov	r1, r8
   2aebe:	f014 fd8a 	bl	3f9d6 <nrf_accept>
	if (new_sd < 0) {
   2aec2:	1e06      	subs	r6, r0, #0
   2aec4:	db33      	blt.n	2af2e <nrf91_socket_offload_accept+0x9e>
	ctx = allocate_ctx(new_sd);
   2aec6:	4630      	mov	r0, r6
   2aec8:	f7ff ff3c 	bl	2ad44 <allocate_ctx>
	if (ctx == NULL) {
   2aecc:	4681      	mov	r9, r0
   2aece:	b310      	cbz	r0, 2af16 <nrf91_socket_offload_accept+0x86>
	if ((addr != NULL) && (addrlen != NULL)) {
   2aed0:	b164      	cbz	r4, 2aeec <nrf91_socket_offload_accept+0x5c>
   2aed2:	b15f      	cbz	r7, 2aeec <nrf91_socket_offload_accept+0x5c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   2aed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2aed8:	2b02      	cmp	r3, #2
   2aeda:	d021      	beq.n	2af20 <nrf91_socket_offload_accept+0x90>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   2aedc:	2b0a      	cmp	r3, #10
   2aede:	d128      	bne.n	2af32 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in6);
   2aee0:	2318      	movs	r3, #24
   2aee2:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv6(
   2aee4:	a901      	add	r1, sp, #4
   2aee6:	4620      	mov	r0, r4
   2aee8:	f012 ff3d 	bl	3dd66 <nrf_to_z_ipv6>
	z_finalize_fd(fd, ctx,
   2aeec:	4a1c      	ldr	r2, [pc, #112]	; (2af60 <nrf91_socket_offload_accept+0xd0>)
   2aeee:	4649      	mov	r1, r9
   2aef0:	4628      	mov	r0, r5
   2aef2:	f7f9 ff03 	bl	24cfc <z_finalize_fd>
}
   2aef6:	4628      	mov	r0, r5
   2aef8:	b00b      	add	sp, #44	; 0x2c
   2aefa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2aefe:	2310      	movs	r3, #16
   2af00:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2af02:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   2af04:	f10d 0804 	add.w	r8, sp, #4
   2af08:	e7d8      	b.n	2aebc <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2af0a:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2af0c:	46a0      	mov	r8, r4
   2af0e:	e7d5      	b.n	2aebc <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2af10:	463a      	mov	r2, r7
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2af12:	46b8      	mov	r8, r7
   2af14:	e7d2      	b.n	2aebc <nrf91_socket_offload_accept+0x2c>
		errno = ENOMEM;
   2af16:	f011 fcaf 	bl	3c878 <__errno>
   2af1a:	230c      	movs	r3, #12
   2af1c:	6003      	str	r3, [r0, #0]
		goto error;
   2af1e:	e008      	b.n	2af32 <nrf91_socket_offload_accept+0xa2>
			*addrlen = sizeof(struct sockaddr_in);
   2af20:	2308      	movs	r3, #8
   2af22:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv4(
   2af24:	a901      	add	r1, sp, #4
   2af26:	4620      	mov	r0, r4
   2af28:	f012 fded 	bl	3db06 <nrf_to_z_ipv4>
   2af2c:	e7de      	b.n	2aeec <nrf91_socket_offload_accept+0x5c>
	struct nrf_sock_ctx *ctx = NULL;
   2af2e:	f04f 0900 	mov.w	r9, #0
	if (new_sd != -1) {
   2af32:	f1b6 3fff 	cmp.w	r6, #4294967295
   2af36:	d10b      	bne.n	2af50 <nrf91_socket_offload_accept+0xc0>
	if (ctx != NULL) {
   2af38:	f1b9 0f00 	cmp.w	r9, #0
   2af3c:	d002      	beq.n	2af44 <nrf91_socket_offload_accept+0xb4>
		release_ctx(ctx);
   2af3e:	4648      	mov	r0, r9
   2af40:	f7ff feea 	bl	2ad18 <release_ctx>
	z_free_fd(fd);
   2af44:	4628      	mov	r0, r5
   2af46:	f010 fd6c 	bl	3ba22 <z_free_fd>
	return -1;
   2af4a:	f04f 35ff 	mov.w	r5, #4294967295
   2af4e:	e7d2      	b.n	2aef6 <nrf91_socket_offload_accept+0x66>
		nrf_close(new_sd);
   2af50:	4630      	mov	r0, r6
   2af52:	f014 fcdd 	bl	3f910 <nrf_close>
   2af56:	e7ef      	b.n	2af38 <nrf91_socket_offload_accept+0xa8>
		return -1;
   2af58:	f04f 35ff 	mov.w	r5, #4294967295
   2af5c:	e7cb      	b.n	2aef6 <nrf91_socket_offload_accept+0x66>
   2af5e:	bf00      	nop
   2af60:	000431c0 	.word	0x000431c0

0002af64 <nrf91_socket_offload_ioctl>:
{
   2af64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2af68:	b093      	sub	sp, #76	; 0x4c
   2af6a:	9201      	str	r2, [sp, #4]
	int sd = OBJ_TO_SD(obj);
   2af6c:	6804      	ldr	r4, [r0, #0]
	switch (request) {
   2af6e:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   2af72:	2b03      	cmp	r3, #3
   2af74:	f200 80b8 	bhi.w	2b0e8 <nrf91_socket_offload_ioctl+0x184>
   2af78:	e8df f003 	tbb	[pc, r3]
   2af7c:	af08bc02 	.word	0xaf08bc02
	int sd = OBJ_TO_SD(obj);
   2af80:	f06f 0711 	mvn.w	r7, #17
}
   2af84:	4638      	mov	r0, r7
   2af86:	b013      	add	sp, #76	; 0x4c
   2af88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		fds = va_arg(args, struct zsock_pollfd *);
   2af8c:	9901      	ldr	r1, [sp, #4]
   2af8e:	1d0a      	adds	r2, r1, #4
   2af90:	9201      	str	r2, [sp, #4]
   2af92:	680e      	ldr	r6, [r1, #0]
		nfds = va_arg(args, int);
   2af94:	f101 0308 	add.w	r3, r1, #8
   2af98:	9301      	str	r3, [sp, #4]
   2af9a:	f8d1 8004 	ldr.w	r8, [r1, #4]
		timeout = va_arg(args, int);
   2af9e:	f101 030c 	add.w	r3, r1, #12
   2afa2:	9301      	str	r3, [sp, #4]
   2afa4:	f8d1 9008 	ldr.w	r9, [r1, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   2afa8:	2240      	movs	r2, #64	; 0x40
   2afaa:	2100      	movs	r1, #0
   2afac:	a802      	add	r0, sp, #8
   2afae:	f014 ffc7 	bl	3ff40 <memset>
	for (int i = 0; i < nfds; i++) {
   2afb2:	2400      	movs	r4, #0
	int retval = 0;
   2afb4:	4627      	mov	r7, r4
	for (int i = 0; i < nfds; i++) {
   2afb6:	e005      	b.n	2afc4 <nrf91_socket_offload_ioctl+0x60>
			tmp[i].fd = fds[i].fd;
   2afb8:	ab12      	add	r3, sp, #72	; 0x48
   2afba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2afbe:	f843 0c40 	str.w	r0, [r3, #-64]
	for (int i = 0; i < nfds; i++) {
   2afc2:	3401      	adds	r4, #1
   2afc4:	45a0      	cmp	r8, r4
   2afc6:	dd38      	ble.n	2b03a <nrf91_socket_offload_ioctl+0xd6>
		tmp[i].events = 0;
   2afc8:	2200      	movs	r2, #0
   2afca:	ab12      	add	r3, sp, #72	; 0x48
   2afcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2afd0:	f823 2c3c 	strh.w	r2, [r3, #-60]
		fds[i].revents = 0;
   2afd4:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
   2afd8:	80ea      	strh	r2, [r5, #6]
		if (fds[i].fd < 0) {
   2afda:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   2afde:	4290      	cmp	r0, r2
   2afe0:	dbea      	blt.n	2afb8 <nrf91_socket_offload_ioctl+0x54>
			obj = z_get_fd_obj(fds[i].fd,
   2afe2:	2286      	movs	r2, #134	; 0x86
   2afe4:	4945      	ldr	r1, [pc, #276]	; (2b0fc <nrf91_socket_offload_ioctl+0x198>)
   2afe6:	f7f9 fe29 	bl	24c3c <z_get_fd_obj>
			if (obj != NULL) {
   2afea:	b310      	cbz	r0, 2b032 <nrf91_socket_offload_ioctl+0xce>
				tmp[i].fd = OBJ_TO_SD(obj);
   2afec:	6802      	ldr	r2, [r0, #0]
   2afee:	ab12      	add	r3, sp, #72	; 0x48
   2aff0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2aff4:	f843 2c40 	str.w	r2, [r3, #-64]
		if (fds[i].events & POLLIN) {
   2aff8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   2affc:	f013 0f01 	tst.w	r3, #1
   2b000:	d008      	beq.n	2b014 <nrf91_socket_offload_ioctl+0xb0>
			tmp[i].events |= NRF_POLLIN;
   2b002:	ab12      	add	r3, sp, #72	; 0x48
   2b004:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   2b008:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   2b00c:	f043 0301 	orr.w	r3, r3, #1
   2b010:	f822 3c3c 	strh.w	r3, [r2, #-60]
		if (fds[i].events & POLLOUT) {
   2b014:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   2b018:	f013 0f04 	tst.w	r3, #4
   2b01c:	d0d1      	beq.n	2afc2 <nrf91_socket_offload_ioctl+0x5e>
			tmp[i].events |= NRF_POLLOUT;
   2b01e:	ab12      	add	r3, sp, #72	; 0x48
   2b020:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   2b024:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   2b028:	f043 0302 	orr.w	r3, r3, #2
   2b02c:	f822 3c3c 	strh.w	r3, [r2, #-60]
   2b030:	e7c7      	b.n	2afc2 <nrf91_socket_offload_ioctl+0x5e>
				fds[i].revents = POLLNVAL;
   2b032:	2320      	movs	r3, #32
   2b034:	80eb      	strh	r3, [r5, #6]
				retval++;
   2b036:	3701      	adds	r7, #1
   2b038:	e7de      	b.n	2aff8 <nrf91_socket_offload_ioctl+0x94>
	if (retval > 0) {
   2b03a:	2f00      	cmp	r7, #0
   2b03c:	dca2      	bgt.n	2af84 <nrf91_socket_offload_ioctl+0x20>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2b03e:	464a      	mov	r2, r9
   2b040:	4641      	mov	r1, r8
   2b042:	a802      	add	r0, sp, #8
   2b044:	f014 fd27 	bl	3fa96 <nrf_poll>
   2b048:	4607      	mov	r7, r0
	for (int i = 0; i < nfds; i++) {
   2b04a:	2300      	movs	r3, #0
   2b04c:	e000      	b.n	2b050 <nrf91_socket_offload_ioctl+0xec>
   2b04e:	3301      	adds	r3, #1
   2b050:	4598      	cmp	r8, r3
   2b052:	dd97      	ble.n	2af84 <nrf91_socket_offload_ioctl+0x20>
		if (fds[i].fd < 0) {
   2b054:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
   2b058:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   2b05c:	2900      	cmp	r1, #0
   2b05e:	dbf6      	blt.n	2b04e <nrf91_socket_offload_ioctl+0xea>
		if (tmp[i].revents & NRF_POLLIN) {
   2b060:	a912      	add	r1, sp, #72	; 0x48
   2b062:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2b066:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   2b06a:	f011 0f01 	tst.w	r1, #1
   2b06e:	d003      	beq.n	2b078 <nrf91_socket_offload_ioctl+0x114>
			fds[i].revents |= POLLIN;
   2b070:	88d1      	ldrh	r1, [r2, #6]
   2b072:	f041 0101 	orr.w	r1, r1, #1
   2b076:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   2b078:	a912      	add	r1, sp, #72	; 0x48
   2b07a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2b07e:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   2b082:	f011 0f02 	tst.w	r1, #2
   2b086:	d003      	beq.n	2b090 <nrf91_socket_offload_ioctl+0x12c>
			fds[i].revents |= POLLOUT;
   2b088:	88d1      	ldrh	r1, [r2, #6]
   2b08a:	f041 0104 	orr.w	r1, r1, #4
   2b08e:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   2b090:	a912      	add	r1, sp, #72	; 0x48
   2b092:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2b096:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   2b09a:	f011 0f04 	tst.w	r1, #4
   2b09e:	d003      	beq.n	2b0a8 <nrf91_socket_offload_ioctl+0x144>
			fds[i].revents |= POLLERR;
   2b0a0:	88d1      	ldrh	r1, [r2, #6]
   2b0a2:	f041 0108 	orr.w	r1, r1, #8
   2b0a6:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   2b0a8:	a912      	add	r1, sp, #72	; 0x48
   2b0aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2b0ae:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   2b0b2:	f011 0f10 	tst.w	r1, #16
   2b0b6:	d003      	beq.n	2b0c0 <nrf91_socket_offload_ioctl+0x15c>
			fds[i].revents |= POLLNVAL;
   2b0b8:	88d1      	ldrh	r1, [r2, #6]
   2b0ba:	f041 0120 	orr.w	r1, r1, #32
   2b0be:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   2b0c0:	a912      	add	r1, sp, #72	; 0x48
   2b0c2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2b0c6:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   2b0ca:	f011 0f08 	tst.w	r1, #8
   2b0ce:	d0be      	beq.n	2b04e <nrf91_socket_offload_ioctl+0xea>
			fds[i].revents |= POLLHUP;
   2b0d0:	88d1      	ldrh	r1, [r2, #6]
   2b0d2:	f041 0110 	orr.w	r1, r1, #16
   2b0d6:	80d1      	strh	r1, [r2, #6]
   2b0d8:	e7b9      	b.n	2b04e <nrf91_socket_offload_ioctl+0xea>
		ctx->lock = va_arg(args, struct k_mutex *);
   2b0da:	9b01      	ldr	r3, [sp, #4]
   2b0dc:	1d1a      	adds	r2, r3, #4
   2b0de:	9201      	str	r2, [sp, #4]
   2b0e0:	681b      	ldr	r3, [r3, #0]
   2b0e2:	6043      	str	r3, [r0, #4]
		return 0;
   2b0e4:	2700      	movs	r7, #0
   2b0e6:	e74d      	b.n	2af84 <nrf91_socket_offload_ioctl+0x20>
		return nrf91_socket_offload_fcntl(sd, request, args);
   2b0e8:	9a01      	ldr	r2, [sp, #4]
   2b0ea:	4620      	mov	r0, r4
   2b0ec:	f013 f811 	bl	3e112 <nrf91_socket_offload_fcntl>
   2b0f0:	4607      	mov	r7, r0
   2b0f2:	e747      	b.n	2af84 <nrf91_socket_offload_ioctl+0x20>
		return -EOPNOTSUPP;
   2b0f4:	f06f 075e 	mvn.w	r7, #94	; 0x5e
   2b0f8:	e744      	b.n	2af84 <nrf91_socket_offload_ioctl+0x20>
   2b0fa:	bf00      	nop
   2b0fc:	000431c0 	.word	0x000431c0

0002b100 <nrf91_socket_create>:
{
   2b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b102:	4606      	mov	r6, r0
   2b104:	4617      	mov	r7, r2
	if (type & SOCK_NATIVE) {
   2b106:	1e0c      	subs	r4, r1, #0
   2b108:	db18      	blt.n	2b13c <nrf91_socket_create+0x3c>
	} else if (type & SOCK_NATIVE_TLS) {
   2b10a:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
   2b10e:	d11b      	bne.n	2b148 <nrf91_socket_create+0x48>
	fd = z_reserve_fd();
   2b110:	f7f9 fdce 	bl	24cb0 <z_reserve_fd>
	if (fd < 0) {
   2b114:	1e05      	subs	r5, r0, #0
   2b116:	db30      	blt.n	2b17a <nrf91_socket_create+0x7a>
	sd = nrf91_socket_offload_socket(family, type, proto);
   2b118:	463a      	mov	r2, r7
   2b11a:	4621      	mov	r1, r4
   2b11c:	4630      	mov	r0, r6
   2b11e:	f013 f834 	bl	3e18a <nrf91_socket_offload_socket>
	if (sd < 0) {
   2b122:	1e04      	subs	r4, r0, #0
   2b124:	db16      	blt.n	2b154 <nrf91_socket_create+0x54>
	ctx = allocate_ctx(sd);
   2b126:	4620      	mov	r0, r4
   2b128:	f7ff fe0c 	bl	2ad44 <allocate_ctx>
	if (ctx == NULL) {
   2b12c:	4601      	mov	r1, r0
   2b12e:	b1b8      	cbz	r0, 2b160 <nrf91_socket_create+0x60>
	z_finalize_fd(fd, ctx,
   2b130:	4a13      	ldr	r2, [pc, #76]	; (2b180 <nrf91_socket_create+0x80>)
   2b132:	4628      	mov	r0, r5
   2b134:	f7f9 fde2 	bl	24cfc <z_finalize_fd>
}
   2b138:	4628      	mov	r0, r5
   2b13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return native_socket(family, type, proto, &offload_disabled);
   2b13c:	4b11      	ldr	r3, [pc, #68]	; (2b184 <nrf91_socket_create+0x84>)
   2b13e:	4621      	mov	r1, r4
   2b140:	f013 f80d 	bl	3e15e <native_socket>
   2b144:	4605      	mov	r5, r0
   2b146:	e7f7      	b.n	2b138 <nrf91_socket_create+0x38>
		return native_socket(family, type, proto, &tls_offload_disabled);
   2b148:	4b0f      	ldr	r3, [pc, #60]	; (2b188 <nrf91_socket_create+0x88>)
   2b14a:	4621      	mov	r1, r4
   2b14c:	f013 f807 	bl	3e15e <native_socket>
   2b150:	4605      	mov	r5, r0
   2b152:	e7f1      	b.n	2b138 <nrf91_socket_create+0x38>
		z_free_fd(fd);
   2b154:	4628      	mov	r0, r5
   2b156:	f010 fc64 	bl	3ba22 <z_free_fd>
		return -1;
   2b15a:	f04f 35ff 	mov.w	r5, #4294967295
   2b15e:	e7eb      	b.n	2b138 <nrf91_socket_create+0x38>
		errno = ENOMEM;
   2b160:	f011 fb8a 	bl	3c878 <__errno>
   2b164:	230c      	movs	r3, #12
   2b166:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   2b168:	4620      	mov	r0, r4
   2b16a:	f014 fbd1 	bl	3f910 <nrf_close>
		z_free_fd(fd);
   2b16e:	4628      	mov	r0, r5
   2b170:	f010 fc57 	bl	3ba22 <z_free_fd>
		return -1;
   2b174:	f04f 35ff 	mov.w	r5, #4294967295
   2b178:	e7de      	b.n	2b138 <nrf91_socket_create+0x38>
		return -1;
   2b17a:	f04f 35ff 	mov.w	r5, #4294967295
   2b17e:	e7db      	b.n	2b138 <nrf91_socket_create+0x38>
   2b180:	000431c0 	.word	0x000431c0
   2b184:	20010dfe 	.word	0x20010dfe
   2b188:	20010dff 	.word	0x20010dff

0002b18c <nrf91_socket_iface_init>:
static struct nrf91_socket_iface_data {
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
   2b18c:	b508      	push	{r3, lr}
	nrf91_socket_iface_data.iface = iface;
   2b18e:	4b04      	ldr	r3, [pc, #16]	; (2b1a0 <nrf91_socket_iface_init+0x14>)
   2b190:	6018      	str	r0, [r3, #0]

	iface->if_dev->offloaded = true;
   2b192:	6803      	ldr	r3, [r0, #0]
   2b194:	2201      	movs	r2, #1
   2b196:	769a      	strb	r2, [r3, #26]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   2b198:	4802      	ldr	r0, [pc, #8]	; (2b1a4 <nrf91_socket_iface_init+0x18>)
   2b19a:	f7fb fe15 	bl	26dc8 <socket_offload_dns_register>
}
   2b19e:	bd08      	pop	{r3, pc}
   2b1a0:	200101d0 	.word	0x200101d0
   2b1a4:	000431b8 	.word	0x000431b8

0002b1a8 <nrf_to_z_dns_error_code>:
	switch (nrf_gai_err) {
   2b1a8:	f2a0 1001 	subw	r0, r0, #257	; 0x101
   2b1ac:	2814      	cmp	r0, #20
   2b1ae:	d82d      	bhi.n	2b20c <nrf_to_z_dns_error_code+0x64>
   2b1b0:	e8df f000 	tbb	[pc, r0]
   2b1b4:	110e3c0b 	.word	0x110e3c0b
   2b1b8:	2c2c2c2c 	.word	0x2c2c2c2c
   2b1bc:	2c2c2c2c 	.word	0x2c2c2c2c
   2b1c0:	1a17142c 	.word	0x1a17142c
   2b1c4:	2623201d 	.word	0x2623201d
   2b1c8:	29          	.byte	0x29
   2b1c9:	00          	.byte	0x00
		return DNS_EAI_SYSTEM;
   2b1ca:	f06f 0008 	mvn.w	r0, #8
   2b1ce:	4770      	bx	lr
		return DNS_EAI_BADFLAGS;
   2b1d0:	f04f 30ff 	mov.w	r0, #4294967295
   2b1d4:	4770      	bx	lr
		return DNS_EAI_FAIL;
   2b1d6:	f06f 0003 	mvn.w	r0, #3
   2b1da:	4770      	bx	lr
		return DNS_EAI_FAMILY;
   2b1dc:	f06f 0005 	mvn.w	r0, #5
   2b1e0:	4770      	bx	lr
		return DNS_EAI_MEMORY;
   2b1e2:	f06f 0009 	mvn.w	r0, #9
   2b1e6:	4770      	bx	lr
		return DNS_EAI_NODATA;
   2b1e8:	f06f 0004 	mvn.w	r0, #4
   2b1ec:	4770      	bx	lr
		return DNS_EAI_NONAME;
   2b1ee:	f06f 0001 	mvn.w	r0, #1
   2b1f2:	4770      	bx	lr
		return DNS_EAI_SERVICE;
   2b1f4:	f06f 0007 	mvn.w	r0, #7
   2b1f8:	4770      	bx	lr
		return DNS_EAI_SOCKTYPE;
   2b1fa:	f06f 0006 	mvn.w	r0, #6
   2b1fe:	4770      	bx	lr
		return DNS_EAI_INPROGRESS;
   2b200:	f06f 0063 	mvn.w	r0, #99	; 0x63
   2b204:	4770      	bx	lr
		return DNS_EAI_SYSTEM;
   2b206:	f06f 000a 	mvn.w	r0, #10
   2b20a:	4770      	bx	lr
{
   2b20c:	b510      	push	{r4, lr}
		__ASSERT(false, "Untranslated nrf_getaddrinfo() return value %d", nrf_gai_err);
   2b20e:	4c09      	ldr	r4, [pc, #36]	; (2b234 <nrf_to_z_dns_error_code+0x8c>)
   2b210:	f240 12bd 	movw	r2, #445	; 0x1bd
   2b214:	4621      	mov	r1, r4
   2b216:	4808      	ldr	r0, [pc, #32]	; (2b238 <nrf_to_z_dns_error_code+0x90>)
   2b218:	f010 fc8e 	bl	3bb38 <printk>
   2b21c:	f240 11bd 	movw	r1, #445	; 0x1bd
   2b220:	4620      	mov	r0, r4
   2b222:	f010 fedd 	bl	3bfe0 <assert_post_action>
		return -1;
   2b226:	f04f 30ff 	mov.w	r0, #4294967295
}
   2b22a:	bd10      	pop	{r4, pc}
		return DNS_EAI_AGAIN;
   2b22c:	f06f 0002 	mvn.w	r0, #2
}
   2b230:	4770      	bx	lr
   2b232:	bf00      	nop
   2b234:	00043174 	.word	0x00043174
   2b238:	00041c84 	.word	0x00041c84

0002b23c <nrf91_socket_offload_getaddrinfo>:
{
   2b23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b240:	b08a      	sub	sp, #40	; 0x28
   2b242:	4605      	mov	r5, r0
   2b244:	460e      	mov	r6, r1
   2b246:	4614      	mov	r4, r2
   2b248:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   2b24a:	2100      	movs	r1, #0
   2b24c:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   2b24e:	2220      	movs	r2, #32
   2b250:	a802      	add	r0, sp, #8
   2b252:	f014 fe75 	bl	3ff40 <memset>
	if (hints != NULL) {
   2b256:	b154      	cbz	r4, 2b26e <nrf91_socket_offload_getaddrinfo+0x32>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   2b258:	a902      	add	r1, sp, #8
   2b25a:	4620      	mov	r0, r4
   2b25c:	f013 f80d 	bl	3e27a <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   2b260:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2b264:	d059      	beq.n	2b31a <nrf91_socket_offload_getaddrinfo+0xde>
		} else if (error == -EAFNOSUPPORT) {
   2b266:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2b26a:	d059      	beq.n	2b320 <nrf91_socket_offload_getaddrinfo+0xe4>
		nrf_hints_ptr = &nrf_hints;
   2b26c:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   2b26e:	f04f 32ff 	mov.w	r2, #4294967295
   2b272:	f04f 33ff 	mov.w	r3, #4294967295
   2b276:	482c      	ldr	r0, [pc, #176]	; (2b328 <nrf91_socket_offload_getaddrinfo+0xec>)
   2b278:	f00a feaa 	bl	35fd0 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   2b27c:	ab01      	add	r3, sp, #4
   2b27e:	4622      	mov	r2, r4
   2b280:	4631      	mov	r1, r6
   2b282:	4628      	mov	r0, r5
   2b284:	f014 fc03 	bl	3fa8e <nrf_getaddrinfo>
	if (retval != 0) {
   2b288:	4680      	mov	r8, r0
   2b28a:	b918      	cbnz	r0, 2b294 <nrf91_socket_offload_getaddrinfo+0x58>
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   2b28c:	9c01      	ldr	r4, [sp, #4]
	*res = NULL;
   2b28e:	2600      	movs	r6, #0
   2b290:	603e      	str	r6, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2b292:	e018      	b.n	2b2c6 <nrf91_socket_offload_getaddrinfo+0x8a>
		error = nrf_to_z_dns_error_code(retval);
   2b294:	f7ff ff88 	bl	2b1a8 <nrf_to_z_dns_error_code>
   2b298:	4680      	mov	r8, r0
		goto error;
   2b29a:	e037      	b.n	2b30c <nrf91_socket_offload_getaddrinfo+0xd0>
			k_free(next_z_res);
   2b29c:	4628      	mov	r0, r5
   2b29e:	f014 fde3 	bl	3fe68 <k_free>
			retval = DNS_EAI_MEMORY;
   2b2a2:	f06f 0809 	mvn.w	r8, #9
   2b2a6:	e029      	b.n	2b2fc <nrf91_socket_offload_getaddrinfo+0xc0>
			k_free(next_z_res);
   2b2a8:	4628      	mov	r0, r5
   2b2aa:	f014 fddd 	bl	3fe68 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   2b2ae:	f06f 0806 	mvn.w	r8, #6
   2b2b2:	e023      	b.n	2b2fc <nrf91_socket_offload_getaddrinfo+0xc0>
			k_free(next_z_res);
   2b2b4:	4628      	mov	r0, r5
   2b2b6:	f014 fdd7 	bl	3fe68 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   2b2ba:	f06f 0808 	mvn.w	r8, #8
   2b2be:	e01d      	b.n	2b2fc <nrf91_socket_offload_getaddrinfo+0xc0>
			*res = next_z_res;
   2b2c0:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   2b2c2:	69e4      	ldr	r4, [r4, #28]
		latest_z_res = next_z_res;
   2b2c4:	462e      	mov	r6, r5
	while ((retval == 0) && (next_nrf_res != NULL)) {
   2b2c6:	b1b4      	cbz	r4, 2b2f6 <nrf91_socket_offload_getaddrinfo+0xba>
					k_malloc(sizeof(struct zsock_addrinfo));
   2b2c8:	2050      	movs	r0, #80	; 0x50
   2b2ca:	f014 fdd6 	bl	3fe7a <k_malloc>
		if (next_z_res == NULL) {
   2b2ce:	4605      	mov	r5, r0
   2b2d0:	b178      	cbz	r0, 2b2f2 <nrf91_socket_offload_getaddrinfo+0xb6>
		error = nrf_to_z_addrinfo(next_z_res, next_nrf_res);
   2b2d2:	4621      	mov	r1, r4
   2b2d4:	f012 ff8e 	bl	3e1f4 <nrf_to_z_addrinfo>
		if (error == -ENOMEM) {
   2b2d8:	f110 0f0c 	cmn.w	r0, #12
   2b2dc:	d0de      	beq.n	2b29c <nrf91_socket_offload_getaddrinfo+0x60>
		} else if (error == -EPROTONOSUPPORT) {
   2b2de:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   2b2e2:	d0e1      	beq.n	2b2a8 <nrf91_socket_offload_getaddrinfo+0x6c>
		} else if (error == -EAFNOSUPPORT) {
   2b2e4:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   2b2e8:	d0e4      	beq.n	2b2b4 <nrf91_socket_offload_getaddrinfo+0x78>
		if (latest_z_res == NULL) {
   2b2ea:	2e00      	cmp	r6, #0
   2b2ec:	d0e8      	beq.n	2b2c0 <nrf91_socket_offload_getaddrinfo+0x84>
			latest_z_res->ai_next = next_z_res;
   2b2ee:	6035      	str	r5, [r6, #0]
   2b2f0:	e7e7      	b.n	2b2c2 <nrf91_socket_offload_getaddrinfo+0x86>
			retval = DNS_EAI_MEMORY;
   2b2f2:	f06f 0809 	mvn.w	r8, #9
	if (retval != 0) {
   2b2f6:	f1b8 0f00 	cmp.w	r8, #0
   2b2fa:	d004      	beq.n	2b306 <nrf91_socket_offload_getaddrinfo+0xca>
		nrf91_socket_offload_freeaddrinfo(*res);
   2b2fc:	6838      	ldr	r0, [r7, #0]
   2b2fe:	f012 ff6c 	bl	3e1da <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   2b302:	2300      	movs	r3, #0
   2b304:	603b      	str	r3, [r7, #0]
	nrf_freeaddrinfo(nrf_res);
   2b306:	9801      	ldr	r0, [sp, #4]
   2b308:	f014 fbc3 	bl	3fa92 <nrf_freeaddrinfo>
	return z_impl_k_mutex_unlock(mutex);
   2b30c:	4806      	ldr	r0, [pc, #24]	; (2b328 <nrf91_socket_offload_getaddrinfo+0xec>)
   2b30e:	f00a ff55 	bl	361bc <z_impl_k_mutex_unlock>
}
   2b312:	4640      	mov	r0, r8
   2b314:	b00a      	add	sp, #40	; 0x28
   2b316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return DNS_EAI_SOCKTYPE;
   2b31a:	f06f 0806 	mvn.w	r8, #6
   2b31e:	e7f8      	b.n	2b312 <nrf91_socket_offload_getaddrinfo+0xd6>
			return DNS_EAI_ADDRFAMILY;
   2b320:	f06f 0808 	mvn.w	r8, #8
   2b324:	e7f5      	b.n	2b312 <nrf91_socket_offload_getaddrinfo+0xd6>
   2b326:	bf00      	nop
   2b328:	2000ca6c 	.word	0x2000ca6c

0002b32c <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   2b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b330:	b082      	sub	sp, #8
	uint32_t ret = 0;
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b332:	2400      	movs	r4, #0
	uint32_t ret = 0;
   2b334:	4627      	mov	r7, r4
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b336:	e023      	b.n	2b380 <get_buttons+0x54>
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b338:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 2b3e0 <get_buttons+0xb4>
   2b33c:	f240 423a 	movw	r2, #1082	; 0x43a
   2b340:	4641      	mov	r1, r8
   2b342:	4821      	ldr	r0, [pc, #132]	; (2b3c8 <get_buttons+0x9c>)
   2b344:	f010 fbf8 	bl	3bb38 <printk>
   2b348:	f240 413a 	movw	r1, #1082	; 0x43a
   2b34c:	4640      	mov	r0, r8
   2b34e:	f010 fe47 	bl	3bfe0 <assert_post_action>
   2b352:	e024      	b.n	2b39e <get_buttons+0x72>
   2b354:	4b1d      	ldr	r3, [pc, #116]	; (2b3cc <get_buttons+0xa0>)
   2b356:	4a1e      	ldr	r2, [pc, #120]	; (2b3d0 <get_buttons+0xa4>)
   2b358:	1a9b      	subs	r3, r3, r2
   2b35a:	08db      	lsrs	r3, r3, #3
		int val;

		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   2b35c:	f04f 0000 	mov.w	r0, #0
   2b360:	2201      	movs	r2, #1
   2b362:	f362 0002 	bfi	r0, r2, #0, #3
   2b366:	f36f 00c5 	bfc	r0, #3, #3
   2b36a:	f363 108f 	bfi	r0, r3, #6, #10
   2b36e:	4919      	ldr	r1, [pc, #100]	; (2b3d4 <get_buttons+0xa8>)
   2b370:	f010 fe6a 	bl	3c048 <log_string_sync>
			return 0;
   2b374:	2700      	movs	r7, #0
			ret |= 1U << i;
		}
	}

	return ret;
}
   2b376:	4638      	mov	r0, r7
   2b378:	b002      	add	sp, #8
   2b37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b37e:	3401      	adds	r4, #1
   2b380:	2c03      	cmp	r4, #3
   2b382:	d8f8      	bhi.n	2b376 <get_buttons+0x4a>
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2b384:	4b14      	ldr	r3, [pc, #80]	; (2b3d8 <get_buttons+0xac>)
   2b386:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
   2b38a:	4b14      	ldr	r3, [pc, #80]	; (2b3dc <get_buttons+0xb0>)
   2b38c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2b390:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_config *const cfg =
   2b392:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b394:	681b      	ldr	r3, [r3, #0]
   2b396:	2501      	movs	r5, #1
   2b398:	4095      	lsls	r5, r2
   2b39a:	422b      	tst	r3, r5
   2b39c:	d0cc      	beq.n	2b338 <get_buttons+0xc>
	const struct gpio_driver_api *api =
   2b39e:	68b3      	ldr	r3, [r6, #8]
	return api->port_get_raw(port, value);
   2b3a0:	685b      	ldr	r3, [r3, #4]
   2b3a2:	a901      	add	r1, sp, #4
   2b3a4:	4630      	mov	r0, r6
   2b3a6:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_port_get_raw(port, &value);
	if (ret == 0) {
   2b3a8:	4603      	mov	r3, r0
   2b3aa:	b920      	cbnz	r0, 2b3b6 <get_buttons+0x8a>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   2b3ac:	9b01      	ldr	r3, [sp, #4]
   2b3ae:	421d      	tst	r5, r3
   2b3b0:	bf14      	ite	ne
   2b3b2:	2301      	movne	r3, #1
   2b3b4:	2300      	moveq	r3, #0
		if (val < 0) {
   2b3b6:	2b00      	cmp	r3, #0
   2b3b8:	dbcc      	blt.n	2b354 <get_buttons+0x28>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2b3ba:	2b00      	cmp	r3, #0
   2b3bc:	d1df      	bne.n	2b37e <get_buttons+0x52>
			ret |= 1U << i;
   2b3be:	2301      	movs	r3, #1
   2b3c0:	40a3      	lsls	r3, r4
   2b3c2:	431f      	orrs	r7, r3
   2b3c4:	e7db      	b.n	2b37e <get_buttons+0x52>
   2b3c6:	bf00      	nop
   2b3c8:	00041c84 	.word	0x00041c84
   2b3cc:	00041268 	.word	0x00041268
   2b3d0:	00041200 	.word	0x00041200
   2b3d4:	00043224 	.word	0x00043224
   2b3d8:	20010214 	.word	0x20010214
   2b3dc:	0004337c 	.word	0x0004337c
   2b3e0:	000431f8 	.word	0x000431f8

0002b3e4 <button_handlers_call>:

static void button_handlers_call(uint32_t button_state, uint32_t has_changed)
{
   2b3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b3e6:	4606      	mov	r6, r0
   2b3e8:	460f      	mov	r7, r1
	struct button_handler *handler;

	if (button_handler_cb != NULL) {
   2b3ea:	4b11      	ldr	r3, [pc, #68]	; (2b430 <button_handlers_call+0x4c>)
   2b3ec:	681b      	ldr	r3, [r3, #0]
   2b3ee:	b103      	cbz	r3, 2b3f2 <button_handlers_call+0xe>
		button_handler_cb(button_state, has_changed);
   2b3f0:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2b3f2:	f04f 32ff 	mov.w	r2, #4294967295
   2b3f6:	f04f 33ff 	mov.w	r3, #4294967295
   2b3fa:	480e      	ldr	r0, [pc, #56]	; (2b434 <button_handlers_call+0x50>)
   2b3fc:	f00a fde8 	bl	35fd0 <z_impl_k_mutex_lock>
	return list->head;
   2b400:	4b0d      	ldr	r3, [pc, #52]	; (2b438 <button_handlers_call+0x54>)
   2b402:	681c      	ldr	r4, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_DK_LIBRARY_DYNAMIC_BUTTON_HANDLERS)) {
		k_mutex_lock(&button_handler_mut, K_FOREVER);
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2b404:	b114      	cbz	r4, 2b40c <button_handlers_call+0x28>
   2b406:	3c04      	subs	r4, #4
   2b408:	e000      	b.n	2b40c <button_handlers_call+0x28>
   2b40a:	462c      	mov	r4, r5
   2b40c:	b15c      	cbz	r4, 2b426 <button_handlers_call+0x42>
			handler->cb(button_state, has_changed);
   2b40e:	4625      	mov	r5, r4
   2b410:	f855 3b04 	ldr.w	r3, [r5], #4
   2b414:	4639      	mov	r1, r7
   2b416:	4630      	mov	r0, r6
   2b418:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b41a:	2d00      	cmp	r5, #0
   2b41c:	d0f5      	beq.n	2b40a <button_handlers_call+0x26>
	return node->next;
   2b41e:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2b420:	b10c      	cbz	r4, 2b426 <button_handlers_call+0x42>
   2b422:	3c04      	subs	r4, #4
   2b424:	e7f2      	b.n	2b40c <button_handlers_call+0x28>
	return z_impl_k_mutex_unlock(mutex);
   2b426:	4803      	ldr	r0, [pc, #12]	; (2b434 <button_handlers_call+0x50>)
   2b428:	f00a fec8 	bl	361bc <z_impl_k_mutex_unlock>
		}
		k_mutex_unlock(&button_handler_mut);
	}
}
   2b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b42e:	bf00      	nop
   2b430:	20010224 	.word	0x20010224
   2b434:	20010228 	.word	0x20010228
   2b438:	2001023c 	.word	0x2001023c

0002b43c <callback_ctrl>:
{
   2b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b440:	4606      	mov	r6, r0
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2b442:	2400      	movs	r4, #0
	int err = 0;
   2b444:	4620      	mov	r0, r4
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2b446:	e009      	b.n	2b45c <callback_ctrl+0x20>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2b448:	f8d8 8018 	ldr.w	r8, [r8, #24]
   2b44c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   2b450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2b454:	4639      	mov	r1, r7
   2b456:	4628      	mov	r0, r5
   2b458:	47c0      	blx	r8
   2b45a:	3401      	adds	r4, #1
   2b45c:	2c03      	cmp	r4, #3
   2b45e:	d845      	bhi.n	2b4ec <callback_ctrl+0xb0>
   2b460:	2800      	cmp	r0, #0
   2b462:	d143      	bne.n	2b4ec <callback_ctrl+0xb0>
		if (enable) {
   2b464:	b1e6      	cbz	r6, 2b4a0 <callback_ctrl+0x64>
			err = gpio_pin_interrupt_configure(button_devs[i],
   2b466:	4b22      	ldr	r3, [pc, #136]	; (2b4f0 <callback_ctrl+0xb4>)
   2b468:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2b46c:	4b21      	ldr	r3, [pc, #132]	; (2b4f4 <callback_ctrl+0xb8>)
   2b46e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2b472:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   2b474:	f8d5 8008 	ldr.w	r8, [r5, #8]
	const struct gpio_driver_config *const cfg =
   2b478:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b47a:	681a      	ldr	r2, [r3, #0]
   2b47c:	2301      	movs	r3, #1
   2b47e:	40bb      	lsls	r3, r7
   2b480:	421a      	tst	r2, r3
   2b482:	d1e1      	bne.n	2b448 <callback_ctrl+0xc>
   2b484:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2b4fc <callback_ctrl+0xc0>
   2b488:	f240 229d 	movw	r2, #669	; 0x29d
   2b48c:	4649      	mov	r1, r9
   2b48e:	481a      	ldr	r0, [pc, #104]	; (2b4f8 <callback_ctrl+0xbc>)
   2b490:	f010 fb52 	bl	3bb38 <printk>
   2b494:	f240 219d 	movw	r1, #669	; 0x29d
   2b498:	4648      	mov	r0, r9
   2b49a:	f010 fda1 	bl	3bfe0 <assert_post_action>
   2b49e:	e7d3      	b.n	2b448 <callback_ctrl+0xc>
			err = gpio_pin_interrupt_configure(button_devs[i],
   2b4a0:	4b13      	ldr	r3, [pc, #76]	; (2b4f0 <callback_ctrl+0xb4>)
   2b4a2:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2b4a6:	4b13      	ldr	r3, [pc, #76]	; (2b4f4 <callback_ctrl+0xb8>)
   2b4a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2b4ac:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   2b4ae:	f8d5 8008 	ldr.w	r8, [r5, #8]
	const struct gpio_driver_config *const cfg =
   2b4b2:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b4b4:	681a      	ldr	r2, [r3, #0]
   2b4b6:	2301      	movs	r3, #1
   2b4b8:	40bb      	lsls	r3, r7
   2b4ba:	421a      	tst	r2, r3
   2b4bc:	d008      	beq.n	2b4d0 <callback_ctrl+0x94>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2b4be:	f8d8 8018 	ldr.w	r8, [r8, #24]
   2b4c2:	2300      	movs	r3, #0
   2b4c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2b4c8:	4639      	mov	r1, r7
   2b4ca:	4628      	mov	r0, r5
   2b4cc:	47c0      	blx	r8
   2b4ce:	e7c4      	b.n	2b45a <callback_ctrl+0x1e>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b4d0:	f8df 9028 	ldr.w	r9, [pc, #40]	; 2b4fc <callback_ctrl+0xc0>
   2b4d4:	f240 229d 	movw	r2, #669	; 0x29d
   2b4d8:	4649      	mov	r1, r9
   2b4da:	4807      	ldr	r0, [pc, #28]	; (2b4f8 <callback_ctrl+0xbc>)
   2b4dc:	f010 fb2c 	bl	3bb38 <printk>
   2b4e0:	f240 219d 	movw	r1, #669	; 0x29d
   2b4e4:	4648      	mov	r0, r9
   2b4e6:	f010 fd7b 	bl	3bfe0 <assert_post_action>
   2b4ea:	e7e8      	b.n	2b4be <callback_ctrl+0x82>
}
   2b4ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b4f0:	20010214 	.word	0x20010214
   2b4f4:	0004337c 	.word	0x0004337c
   2b4f8:	00041c84 	.word	0x00041c84
   2b4fc:	000431f8 	.word	0x000431f8

0002b500 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   2b500:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b502:	f04f 0320 	mov.w	r3, #32
   2b506:	f3ef 8411 	mrs	r4, BASEPRI
   2b50a:	f383 8812 	msr	BASEPRI_MAX, r3
   2b50e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b512:	4828      	ldr	r0, [pc, #160]	; (2b5b4 <button_pressed+0xb4>)
   2b514:	f00a fd08 	bl	35f28 <z_spin_lock_valid>
   2b518:	b1d0      	cbz	r0, 2b550 <button_pressed+0x50>
	z_spin_lock_set_owner(l);
   2b51a:	4826      	ldr	r0, [pc, #152]	; (2b5b4 <button_pressed+0xb4>)
   2b51c:	f00a fd24 	bl	35f68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   2b520:	2000      	movs	r0, #0
   2b522:	f7ff ff8b 	bl	2b43c <callback_ctrl>

	if (err) {
   2b526:	b9f0      	cbnz	r0, 2b566 <button_pressed+0x66>
		LOG_ERR("Cannot disable callbacks");
	}

	switch (state) {
   2b528:	4b23      	ldr	r3, [pc, #140]	; (2b5b8 <button_pressed+0xb8>)
   2b52a:	781b      	ldrb	r3, [r3, #0]
   2b52c:	bb63      	cbnz	r3, 2b588 <button_pressed+0x88>
	case STATE_WAITING:
		state = STATE_SCANNING;
   2b52e:	4b22      	ldr	r3, [pc, #136]	; (2b5b8 <button_pressed+0xb8>)
   2b530:	2201      	movs	r2, #1
   2b532:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   2b534:	2221      	movs	r2, #33	; 0x21
   2b536:	2300      	movs	r3, #0
   2b538:	4820      	ldr	r0, [pc, #128]	; (2b5bc <button_pressed+0xbc>)
   2b53a:	f00b fcd9 	bl	36ef0 <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b53e:	481d      	ldr	r0, [pc, #116]	; (2b5b4 <button_pressed+0xb4>)
   2b540:	f00a fd02 	bl	35f48 <z_spin_unlock_valid>
   2b544:	b358      	cbz	r0, 2b59e <button_pressed+0x9e>
	__asm__ volatile(
   2b546:	f384 8811 	msr	BASEPRI, r4
   2b54a:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   2b54e:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b550:	4d1b      	ldr	r5, [pc, #108]	; (2b5c0 <button_pressed+0xc0>)
   2b552:	2281      	movs	r2, #129	; 0x81
   2b554:	4629      	mov	r1, r5
   2b556:	481b      	ldr	r0, [pc, #108]	; (2b5c4 <button_pressed+0xc4>)
   2b558:	f010 faee 	bl	3bb38 <printk>
   2b55c:	2181      	movs	r1, #129	; 0x81
   2b55e:	4628      	mov	r0, r5
   2b560:	f010 fd3e 	bl	3bfe0 <assert_post_action>
   2b564:	e7d9      	b.n	2b51a <button_pressed+0x1a>
   2b566:	4b18      	ldr	r3, [pc, #96]	; (2b5c8 <button_pressed+0xc8>)
   2b568:	4a18      	ldr	r2, [pc, #96]	; (2b5cc <button_pressed+0xcc>)
   2b56a:	1a9b      	subs	r3, r3, r2
   2b56c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot disable callbacks");
   2b56e:	f04f 0000 	mov.w	r0, #0
   2b572:	2201      	movs	r2, #1
   2b574:	f362 0002 	bfi	r0, r2, #0, #3
   2b578:	f36f 00c5 	bfc	r0, #3, #3
   2b57c:	f363 108f 	bfi	r0, r3, #6, #10
   2b580:	4913      	ldr	r1, [pc, #76]	; (2b5d0 <button_pressed+0xd0>)
   2b582:	f010 fd61 	bl	3c048 <log_string_sync>
   2b586:	e7cf      	b.n	2b528 <button_pressed+0x28>
		__ASSERT_NO_MSG(false);
   2b588:	4d12      	ldr	r5, [pc, #72]	; (2b5d4 <button_pressed+0xd4>)
   2b58a:	22e8      	movs	r2, #232	; 0xe8
   2b58c:	4629      	mov	r1, r5
   2b58e:	480d      	ldr	r0, [pc, #52]	; (2b5c4 <button_pressed+0xc4>)
   2b590:	f010 fad2 	bl	3bb38 <printk>
   2b594:	21e8      	movs	r1, #232	; 0xe8
   2b596:	4628      	mov	r0, r5
   2b598:	f010 fd22 	bl	3bfe0 <assert_post_action>
		break;
   2b59c:	e7cf      	b.n	2b53e <button_pressed+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b59e:	4d08      	ldr	r5, [pc, #32]	; (2b5c0 <button_pressed+0xc0>)
   2b5a0:	22ac      	movs	r2, #172	; 0xac
   2b5a2:	4629      	mov	r1, r5
   2b5a4:	4807      	ldr	r0, [pc, #28]	; (2b5c4 <button_pressed+0xc4>)
   2b5a6:	f010 fac7 	bl	3bb38 <printk>
   2b5aa:	21ac      	movs	r1, #172	; 0xac
   2b5ac:	4628      	mov	r0, r5
   2b5ae:	f010 fd17 	bl	3bfe0 <assert_post_action>
   2b5b2:	e7c8      	b.n	2b546 <button_pressed+0x46>
   2b5b4:	20010268 	.word	0x20010268
   2b5b8:	20010e00 	.word	0x20010e00
   2b5bc:	2000cc30 	.word	0x2000cc30
   2b5c0:	00042210 	.word	0x00042210
   2b5c4:	00041c84 	.word	0x00041c84
   2b5c8:	00041268 	.word	0x00041268
   2b5cc:	00041200 	.word	0x00041200
   2b5d0:	0004323c 	.word	0x0004323c
   2b5d4:	00043258 	.word	0x00043258

0002b5d8 <buttons_scan_fn>:
{
   2b5d8:	b570      	push	{r4, r5, r6, lr}
	button_scan = get_buttons();
   2b5da:	f7ff fea7 	bl	2b32c <get_buttons>
   2b5de:	4604      	mov	r4, r0
   2b5e0:	4b3b      	ldr	r3, [pc, #236]	; (2b6d0 <buttons_scan_fn+0xf8>)
   2b5e2:	e8d3 2fef 	ldaex	r2, [r3]
   2b5e6:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2b5ea:	2900      	cmp	r1, #0
   2b5ec:	d1f9      	bne.n	2b5e2 <buttons_scan_fn+0xa>
	if (!initial_run) {
   2b5ee:	4b39      	ldr	r3, [pc, #228]	; (2b6d4 <buttons_scan_fn+0xfc>)
   2b5f0:	781b      	ldrb	r3, [r3, #0]
   2b5f2:	b943      	cbnz	r3, 2b606 <buttons_scan_fn+0x2e>
		if (button_scan != last_button_scan) {
   2b5f4:	4b38      	ldr	r3, [pc, #224]	; (2b6d8 <buttons_scan_fn+0x100>)
   2b5f6:	6819      	ldr	r1, [r3, #0]
   2b5f8:	42a1      	cmp	r1, r4
   2b5fa:	d007      	beq.n	2b60c <buttons_scan_fn+0x34>
			button_handlers_call(button_scan, has_changed);
   2b5fc:	4061      	eors	r1, r4
   2b5fe:	4620      	mov	r0, r4
   2b600:	f7ff fef0 	bl	2b3e4 <button_handlers_call>
   2b604:	e002      	b.n	2b60c <buttons_scan_fn+0x34>
		initial_run = false;
   2b606:	4b33      	ldr	r3, [pc, #204]	; (2b6d4 <buttons_scan_fn+0xfc>)
   2b608:	2200      	movs	r2, #0
   2b60a:	701a      	strb	r2, [r3, #0]
	last_button_scan = button_scan;
   2b60c:	4b32      	ldr	r3, [pc, #200]	; (2b6d8 <buttons_scan_fn+0x100>)
   2b60e:	601c      	str	r4, [r3, #0]
	if (button_scan != 0) {
   2b610:	b134      	cbz	r4, 2b620 <buttons_scan_fn+0x48>
		k_work_reschedule(&buttons_scan,
   2b612:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2b616:	2300      	movs	r3, #0
   2b618:	4830      	ldr	r0, [pc, #192]	; (2b6dc <buttons_scan_fn+0x104>)
   2b61a:	f00b fc69 	bl	36ef0 <k_work_reschedule>
}
   2b61e:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2b620:	f04f 0320 	mov.w	r3, #32
   2b624:	f3ef 8511 	mrs	r5, BASEPRI
   2b628:	f383 8812 	msr	BASEPRI_MAX, r3
   2b62c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b630:	482b      	ldr	r0, [pc, #172]	; (2b6e0 <buttons_scan_fn+0x108>)
   2b632:	f00a fc79 	bl	35f28 <z_spin_lock_valid>
   2b636:	b360      	cbz	r0, 2b692 <buttons_scan_fn+0xba>
	z_spin_lock_set_owner(l);
   2b638:	4829      	ldr	r0, [pc, #164]	; (2b6e0 <buttons_scan_fn+0x108>)
   2b63a:	f00a fc95 	bl	35f68 <z_spin_lock_set_owner>
		switch (state) {
   2b63e:	4b29      	ldr	r3, [pc, #164]	; (2b6e4 <buttons_scan_fn+0x10c>)
   2b640:	781b      	ldrb	r3, [r3, #0]
   2b642:	2b01      	cmp	r3, #1
   2b644:	d030      	beq.n	2b6a8 <buttons_scan_fn+0xd0>
			__ASSERT_NO_MSG(false);
   2b646:	4c28      	ldr	r4, [pc, #160]	; (2b6e8 <buttons_scan_fn+0x110>)
   2b648:	22b1      	movs	r2, #177	; 0xb1
   2b64a:	4621      	mov	r1, r4
   2b64c:	4827      	ldr	r0, [pc, #156]	; (2b6ec <buttons_scan_fn+0x114>)
   2b64e:	f010 fa73 	bl	3bb38 <printk>
   2b652:	21b1      	movs	r1, #177	; 0xb1
   2b654:	4620      	mov	r0, r4
   2b656:	f010 fcc3 	bl	3bfe0 <assert_post_action>
		int err = 0;
   2b65a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b65c:	4820      	ldr	r0, [pc, #128]	; (2b6e0 <buttons_scan_fn+0x108>)
   2b65e:	f00a fc73 	bl	35f48 <z_spin_unlock_valid>
   2b662:	b348      	cbz	r0, 2b6b8 <buttons_scan_fn+0xe0>
	__asm__ volatile(
   2b664:	f385 8811 	msr	BASEPRI, r5
   2b668:	f3bf 8f6f 	isb	sy
		if (err) {
   2b66c:	2c00      	cmp	r4, #0
   2b66e:	d0d6      	beq.n	2b61e <buttons_scan_fn+0x46>
   2b670:	4b1f      	ldr	r3, [pc, #124]	; (2b6f0 <buttons_scan_fn+0x118>)
   2b672:	4a20      	ldr	r2, [pc, #128]	; (2b6f4 <buttons_scan_fn+0x11c>)
   2b674:	1a9b      	subs	r3, r3, r2
   2b676:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot enable callbacks");
   2b678:	f04f 0000 	mov.w	r0, #0
   2b67c:	2201      	movs	r2, #1
   2b67e:	f362 0002 	bfi	r0, r2, #0, #3
   2b682:	f36f 00c5 	bfc	r0, #3, #3
   2b686:	f363 108f 	bfi	r0, r3, #6, #10
   2b68a:	491b      	ldr	r1, [pc, #108]	; (2b6f8 <buttons_scan_fn+0x120>)
   2b68c:	f010 fcdc 	bl	3c048 <log_string_sync>
}
   2b690:	e7c5      	b.n	2b61e <buttons_scan_fn+0x46>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2b692:	4c1a      	ldr	r4, [pc, #104]	; (2b6fc <buttons_scan_fn+0x124>)
   2b694:	2281      	movs	r2, #129	; 0x81
   2b696:	4621      	mov	r1, r4
   2b698:	4814      	ldr	r0, [pc, #80]	; (2b6ec <buttons_scan_fn+0x114>)
   2b69a:	f010 fa4d 	bl	3bb38 <printk>
   2b69e:	2181      	movs	r1, #129	; 0x81
   2b6a0:	4620      	mov	r0, r4
   2b6a2:	f010 fc9d 	bl	3bfe0 <assert_post_action>
   2b6a6:	e7c7      	b.n	2b638 <buttons_scan_fn+0x60>
			state = STATE_WAITING;
   2b6a8:	4b0e      	ldr	r3, [pc, #56]	; (2b6e4 <buttons_scan_fn+0x10c>)
   2b6aa:	2200      	movs	r2, #0
   2b6ac:	701a      	strb	r2, [r3, #0]
			err = callback_ctrl(true);
   2b6ae:	2001      	movs	r0, #1
   2b6b0:	f7ff fec4 	bl	2b43c <callback_ctrl>
   2b6b4:	4604      	mov	r4, r0
			break;
   2b6b6:	e7d1      	b.n	2b65c <buttons_scan_fn+0x84>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2b6b8:	4e10      	ldr	r6, [pc, #64]	; (2b6fc <buttons_scan_fn+0x124>)
   2b6ba:	22ac      	movs	r2, #172	; 0xac
   2b6bc:	4631      	mov	r1, r6
   2b6be:	480b      	ldr	r0, [pc, #44]	; (2b6ec <buttons_scan_fn+0x114>)
   2b6c0:	f010 fa3a 	bl	3bb38 <printk>
   2b6c4:	21ac      	movs	r1, #172	; 0xac
   2b6c6:	4630      	mov	r0, r6
   2b6c8:	f010 fc8a 	bl	3bfe0 <assert_post_action>
   2b6cc:	e7ca      	b.n	2b664 <buttons_scan_fn+0x8c>
   2b6ce:	bf00      	nop
   2b6d0:	2001026c 	.word	0x2001026c
   2b6d4:	2000c8c6 	.word	0x2000c8c6
   2b6d8:	20010250 	.word	0x20010250
   2b6dc:	2000cc30 	.word	0x2000cc30
   2b6e0:	20010268 	.word	0x20010268
   2b6e4:	20010e00 	.word	0x20010e00
   2b6e8:	00043258 	.word	0x00043258
   2b6ec:	00041c84 	.word	0x00041c84
   2b6f0:	00041268 	.word	0x00041268
   2b6f4:	00041200 	.word	0x00041200
   2b6f8:	00043298 	.word	0x00043298
   2b6fc:	00042210 	.word	0x00042210

0002b700 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b700:	4b06      	ldr	r3, [pc, #24]	; (2b71c <dk_read_buttons+0x1c>)
   2b702:	e8d3 3faf 	lda	r3, [r3]
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   2b706:	b100      	cbz	r0, 2b70a <dk_read_buttons+0xa>
		*button_state = current_state;
   2b708:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   2b70a:	b119      	cbz	r1, 2b714 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2b70c:	4a04      	ldr	r2, [pc, #16]	; (2b720 <dk_read_buttons+0x20>)
   2b70e:	6812      	ldr	r2, [r2, #0]
   2b710:	405a      	eors	r2, r3
   2b712:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   2b714:	4a02      	ldr	r2, [pc, #8]	; (2b720 <dk_read_buttons+0x20>)
   2b716:	6013      	str	r3, [r2, #0]
}
   2b718:	4770      	bx	lr
   2b71a:	bf00      	nop
   2b71c:	2001026c 	.word	0x2001026c
   2b720:	20010254 	.word	0x20010254

0002b724 <dk_buttons_init>:
{
   2b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	button_handler_cb = button_handler;
   2b728:	4b76      	ldr	r3, [pc, #472]	; (2b904 <dk_buttons_init+0x1e0>)
   2b72a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   2b72c:	4876      	ldr	r0, [pc, #472]	; (2b908 <dk_buttons_init+0x1e4>)
   2b72e:	f014 fa5b 	bl	3fbe8 <z_impl_k_mutex_init>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b732:	2500      	movs	r5, #0
   2b734:	e02f      	b.n	2b796 <dk_buttons_init+0x72>
   2b736:	4b75      	ldr	r3, [pc, #468]	; (2b90c <dk_buttons_init+0x1e8>)
   2b738:	4a75      	ldr	r2, [pc, #468]	; (2b910 <dk_buttons_init+0x1ec>)
   2b73a:	1a9b      	subs	r3, r3, r2
   2b73c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   2b73e:	f04f 0000 	mov.w	r0, #0
   2b742:	2201      	movs	r2, #1
   2b744:	f362 0002 	bfi	r0, r2, #0, #3
   2b748:	f36f 00c5 	bfc	r0, #3, #3
   2b74c:	f363 108f 	bfi	r0, r3, #6, #10
   2b750:	4970      	ldr	r1, [pc, #448]	; (2b914 <dk_buttons_init+0x1f0>)
   2b752:	f010 fc79 	bl	3c048 <log_string_sync>
			return -ENODEV;
   2b756:	f06f 0612 	mvn.w	r6, #18
   2b75a:	e0d0      	b.n	2b8fe <dk_buttons_init+0x1da>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b75c:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 2b948 <dk_buttons_init+0x224>
   2b760:	f240 22fd 	movw	r2, #765	; 0x2fd
   2b764:	4651      	mov	r1, sl
   2b766:	486c      	ldr	r0, [pc, #432]	; (2b918 <dk_buttons_init+0x1f4>)
   2b768:	f010 f9e6 	bl	3bb38 <printk>
   2b76c:	f240 21fd 	movw	r1, #765	; 0x2fd
   2b770:	4650      	mov	r0, sl
   2b772:	f010 fc35 	bl	3bfe0 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2b776:	f8d8 3000 	ldr.w	r3, [r8]
   2b77a:	ea23 0606 	bic.w	r6, r3, r6
   2b77e:	f8c8 6000 	str.w	r6, [r8]
	return api->pin_configure(port, pin, flags);
   2b782:	f8d9 3000 	ldr.w	r3, [r9]
   2b786:	f44f 7288 	mov.w	r2, #272	; 0x110
   2b78a:	4639      	mov	r1, r7
   2b78c:	4620      	mov	r0, r4
   2b78e:	4798      	blx	r3
		if (err) {
   2b790:	4606      	mov	r6, r0
   2b792:	b9e0      	cbnz	r0, 2b7ce <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b794:	3501      	adds	r5, #1
   2b796:	2d03      	cmp	r5, #3
   2b798:	d82a      	bhi.n	2b7f0 <dk_buttons_init+0xcc>
		button_devs[i] = device_get_binding(button_pins[i].port);
   2b79a:	4b60      	ldr	r3, [pc, #384]	; (2b91c <dk_buttons_init+0x1f8>)
   2b79c:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   2b7a0:	f009 ffb2 	bl	35708 <z_impl_device_get_binding>
   2b7a4:	4604      	mov	r4, r0
   2b7a6:	4b5e      	ldr	r3, [pc, #376]	; (2b920 <dk_buttons_init+0x1fc>)
   2b7a8:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		if (!button_devs[i]) {
   2b7ac:	2800      	cmp	r0, #0
   2b7ae:	d0c2      	beq.n	2b736 <dk_buttons_init+0x12>
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2b7b0:	4b5a      	ldr	r3, [pc, #360]	; (2b91c <dk_buttons_init+0x1f8>)
   2b7b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2b7b6:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   2b7b8:	f8d0 9008 	ldr.w	r9, [r0, #8]
	const struct gpio_driver_config *const cfg =
   2b7bc:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
   2b7be:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b7c2:	681b      	ldr	r3, [r3, #0]
   2b7c4:	2601      	movs	r6, #1
   2b7c6:	40be      	lsls	r6, r7
   2b7c8:	4233      	tst	r3, r6
   2b7ca:	d1d4      	bne.n	2b776 <dk_buttons_init+0x52>
   2b7cc:	e7c6      	b.n	2b75c <dk_buttons_init+0x38>
   2b7ce:	4b4f      	ldr	r3, [pc, #316]	; (2b90c <dk_buttons_init+0x1e8>)
   2b7d0:	4a4f      	ldr	r2, [pc, #316]	; (2b910 <dk_buttons_init+0x1ec>)
   2b7d2:	1a9b      	subs	r3, r3, r2
   2b7d4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure button gpio");
   2b7d6:	f04f 0000 	mov.w	r0, #0
   2b7da:	2201      	movs	r2, #1
   2b7dc:	f362 0002 	bfi	r0, r2, #0, #3
   2b7e0:	f36f 00c5 	bfc	r0, #3, #3
   2b7e4:	f363 108f 	bfi	r0, r3, #6, #10
   2b7e8:	494e      	ldr	r1, [pc, #312]	; (2b924 <dk_buttons_init+0x200>)
   2b7ea:	f010 fc2d 	bl	3c048 <log_string_sync>
			return err;
   2b7ee:	e086      	b.n	2b8fe <dk_buttons_init+0x1da>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b7f0:	2400      	movs	r4, #0
	uint32_t pin_mask = 0;
   2b7f2:	4625      	mov	r5, r4
   2b7f4:	e01e      	b.n	2b834 <dk_buttons_init+0x110>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b7f6:	f8df 9150 	ldr.w	r9, [pc, #336]	; 2b948 <dk_buttons_init+0x224>
   2b7fa:	f240 229d 	movw	r2, #669	; 0x29d
   2b7fe:	4649      	mov	r1, r9
   2b800:	4845      	ldr	r0, [pc, #276]	; (2b918 <dk_buttons_init+0x1f4>)
   2b802:	f010 f999 	bl	3bb38 <printk>
   2b806:	f240 219d 	movw	r1, #669	; 0x29d
   2b80a:	4648      	mov	r0, r9
   2b80c:	f010 fbe8 	bl	3bfe0 <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2b810:	f8d8 8018 	ldr.w	r8, [r8, #24]
   2b814:	2300      	movs	r3, #0
   2b816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2b81a:	4639      	mov	r1, r7
   2b81c:	4630      	mov	r0, r6
   2b81e:	47c0      	blx	r8
		if (err) {
   2b820:	4606      	mov	r6, r0
   2b822:	b9c8      	cbnz	r0, 2b858 <dk_buttons_init+0x134>
		pin_mask |= BIT(button_pins[i].number);
   2b824:	4b3d      	ldr	r3, [pc, #244]	; (2b91c <dk_buttons_init+0x1f8>)
   2b826:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2b82a:	791a      	ldrb	r2, [r3, #4]
   2b82c:	2301      	movs	r3, #1
   2b82e:	4093      	lsls	r3, r2
   2b830:	431d      	orrs	r5, r3
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b832:	3401      	adds	r4, #1
   2b834:	2c03      	cmp	r4, #3
   2b836:	d820      	bhi.n	2b87a <dk_buttons_init+0x156>
		err = gpio_pin_interrupt_configure(button_devs[i],
   2b838:	4b39      	ldr	r3, [pc, #228]	; (2b920 <dk_buttons_init+0x1fc>)
   2b83a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
   2b83e:	4b37      	ldr	r3, [pc, #220]	; (2b91c <dk_buttons_init+0x1f8>)
   2b840:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2b844:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   2b846:	f8d6 8008 	ldr.w	r8, [r6, #8]
	const struct gpio_driver_config *const cfg =
   2b84a:	6873      	ldr	r3, [r6, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b84c:	681a      	ldr	r2, [r3, #0]
   2b84e:	2301      	movs	r3, #1
   2b850:	40bb      	lsls	r3, r7
   2b852:	421a      	tst	r2, r3
   2b854:	d1dc      	bne.n	2b810 <dk_buttons_init+0xec>
   2b856:	e7ce      	b.n	2b7f6 <dk_buttons_init+0xd2>
   2b858:	4b2c      	ldr	r3, [pc, #176]	; (2b90c <dk_buttons_init+0x1e8>)
   2b85a:	4a2d      	ldr	r2, [pc, #180]	; (2b910 <dk_buttons_init+0x1ec>)
   2b85c:	1a9b      	subs	r3, r3, r2
   2b85e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot disable callbacks()");
   2b860:	f04f 0000 	mov.w	r0, #0
   2b864:	2201      	movs	r2, #1
   2b866:	f362 0002 	bfi	r0, r2, #0, #3
   2b86a:	f36f 00c5 	bfc	r0, #3, #3
   2b86e:	f363 108f 	bfi	r0, r3, #6, #10
   2b872:	492d      	ldr	r1, [pc, #180]	; (2b928 <dk_buttons_init+0x204>)
   2b874:	f010 fbe8 	bl	3c048 <log_string_sync>
			return err;
   2b878:	e041      	b.n	2b8fe <dk_buttons_init+0x1da>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2b87a:	4b2c      	ldr	r3, [pc, #176]	; (2b92c <dk_buttons_init+0x208>)
   2b87c:	4a2c      	ldr	r2, [pc, #176]	; (2b930 <dk_buttons_init+0x20c>)
   2b87e:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
   2b880:	609d      	str	r5, [r3, #8]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b882:	2400      	movs	r4, #0
   2b884:	2c03      	cmp	r4, #3
   2b886:	d81f      	bhi.n	2b8c8 <dk_buttons_init+0x1a4>
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   2b888:	4b25      	ldr	r3, [pc, #148]	; (2b920 <dk_buttons_init+0x1fc>)
   2b88a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
   2b88e:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2b890:	69db      	ldr	r3, [r3, #28]
   2b892:	b133      	cbz	r3, 2b8a2 <dk_buttons_init+0x17e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2b894:	2201      	movs	r2, #1
   2b896:	4925      	ldr	r1, [pc, #148]	; (2b92c <dk_buttons_init+0x208>)
   2b898:	4798      	blx	r3
		if (err) {
   2b89a:	4606      	mov	r6, r0
   2b89c:	b918      	cbnz	r0, 2b8a6 <dk_buttons_init+0x182>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2b89e:	3401      	adds	r4, #1
   2b8a0:	e7f0      	b.n	2b884 <dk_buttons_init+0x160>
		return -ENOTSUP;
   2b8a2:	f06f 0685 	mvn.w	r6, #133	; 0x85
   2b8a6:	4b19      	ldr	r3, [pc, #100]	; (2b90c <dk_buttons_init+0x1e8>)
   2b8a8:	4a19      	ldr	r2, [pc, #100]	; (2b910 <dk_buttons_init+0x1ec>)
   2b8aa:	1a9b      	subs	r3, r3, r2
   2b8ac:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot add callback");
   2b8ae:	f04f 0000 	mov.w	r0, #0
   2b8b2:	2201      	movs	r2, #1
   2b8b4:	f362 0002 	bfi	r0, r2, #0, #3
   2b8b8:	f36f 00c5 	bfc	r0, #3, #3
   2b8bc:	f363 108f 	bfi	r0, r3, #6, #10
   2b8c0:	491c      	ldr	r1, [pc, #112]	; (2b934 <dk_buttons_init+0x210>)
   2b8c2:	f010 fbc1 	bl	3c048 <log_string_sync>
			return err;
   2b8c6:	e01a      	b.n	2b8fe <dk_buttons_init+0x1da>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   2b8c8:	4c1b      	ldr	r4, [pc, #108]	; (2b938 <dk_buttons_init+0x214>)
   2b8ca:	491c      	ldr	r1, [pc, #112]	; (2b93c <dk_buttons_init+0x218>)
   2b8cc:	4620      	mov	r0, r4
   2b8ce:	f00b f9df 	bl	36c90 <k_work_init_delayable>
	state = STATE_SCANNING;
   2b8d2:	4b1b      	ldr	r3, [pc, #108]	; (2b940 <dk_buttons_init+0x21c>)
   2b8d4:	2201      	movs	r2, #1
   2b8d6:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   2b8d8:	2200      	movs	r2, #0
   2b8da:	2300      	movs	r3, #0
   2b8dc:	4620      	mov	r0, r4
   2b8de:	f00b fa9d 	bl	36e1c <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   2b8e2:	2100      	movs	r1, #0
   2b8e4:	4608      	mov	r0, r1
   2b8e6:	f7ff ff0b 	bl	2b700 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   2b8ea:	f7ff fd1f 	bl	2b32c <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b8ee:	4b15      	ldr	r3, [pc, #84]	; (2b944 <dk_buttons_init+0x220>)
   2b8f0:	e8d3 2fef 	ldaex	r2, [r3]
   2b8f4:	e8c3 0fe1 	stlex	r1, r0, [r3]
   2b8f8:	2900      	cmp	r1, #0
   2b8fa:	d1f9      	bne.n	2b8f0 <dk_buttons_init+0x1cc>
	return 0;
   2b8fc:	2600      	movs	r6, #0
}
   2b8fe:	4630      	mov	r0, r6
   2b900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b904:	20010224 	.word	0x20010224
   2b908:	20010228 	.word	0x20010228
   2b90c:	00041268 	.word	0x00041268
   2b910:	00041200 	.word	0x00041200
   2b914:	000432b0 	.word	0x000432b0
   2b918:	00041c84 	.word	0x00041c84
   2b91c:	0004337c 	.word	0x0004337c
   2b920:	20010214 	.word	0x20010214
   2b924:	000432c8 	.word	0x000432c8
   2b928:	000432e8 	.word	0x000432e8
   2b92c:	20010244 	.word	0x20010244
   2b930:	0002b501 	.word	0x0002b501
   2b934:	00043304 	.word	0x00043304
   2b938:	2000cc30 	.word	0x2000cc30
   2b93c:	0002b5d9 	.word	0x0002b5d9
   2b940:	20010e00 	.word	0x20010e00
   2b944:	2001026c 	.word	0x2001026c
   2b948:	000431f8 	.word	0x000431f8

0002b94c <dk_get_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b94c:	4b01      	ldr	r3, [pc, #4]	; (2b954 <dk_get_buttons+0x8>)
   2b94e:	e8d3 0faf 	lda	r0, [r3]

uint32_t dk_get_buttons(void)
{
	return atomic_get(&my_buttons);
}
   2b952:	4770      	bx	lr
   2b954:	2001026c 	.word	0x2001026c

0002b958 <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   2b958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2b95c:	f030 030f 	bics.w	r3, r0, #15
   2b960:	d154      	bne.n	2ba0c <dk_set_leds_state+0xb4>
   2b962:	4680      	mov	r8, r0
   2b964:	4689      	mov	r9, r1
   2b966:	f031 040f 	bics.w	r4, r1, #15
   2b96a:	d018      	beq.n	2b99e <dk_set_leds_state+0x46>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
   2b96c:	f06f 0515 	mvn.w	r5, #21
   2b970:	e049      	b.n	2ba06 <dk_set_leds_state+0xae>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b972:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 2ba2c <dk_set_leds_state+0xd4>
   2b976:	f240 4291 	movw	r2, #1169	; 0x491
   2b97a:	4651      	mov	r1, sl
   2b97c:	4825      	ldr	r0, [pc, #148]	; (2ba14 <dk_set_leds_state+0xbc>)
   2b97e:	f010 f8db 	bl	3bb38 <printk>
   2b982:	f240 4191 	movw	r1, #1169	; 0x491
   2b986:	4650      	mov	r0, sl
   2b988:	f010 fb2a 	bl	3bfe0 <assert_post_action>
   2b98c:	e020      	b.n	2b9d0 <dk_set_leds_state+0x78>
	const struct gpio_driver_api *api =
   2b98e:	68bb      	ldr	r3, [r7, #8]
	return api->port_clear_bits_raw(port, pins);
   2b990:	691b      	ldr	r3, [r3, #16]
   2b992:	4629      	mov	r1, r5
   2b994:	4638      	mov	r0, r7
   2b996:	4798      	blx	r3
   2b998:	4605      	mov	r5, r0
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
						   led_pins[i].number, val);
			if (err) {
   2b99a:	bb15      	cbnz	r5, 2b9e2 <dk_set_leds_state+0x8a>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2b99c:	3401      	adds	r4, #1
   2b99e:	2c03      	cmp	r4, #3
   2b9a0:	d830      	bhi.n	2ba04 <dk_set_leds_state+0xac>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   2b9a2:	fa28 f304 	lsr.w	r3, r8, r4
   2b9a6:	f013 0601 	ands.w	r6, r3, #1
   2b9aa:	d104      	bne.n	2b9b6 <dk_set_leds_state+0x5e>
   2b9ac:	fa29 f304 	lsr.w	r3, r9, r4
   2b9b0:	f013 0f01 	tst.w	r3, #1
   2b9b4:	d0f2      	beq.n	2b99c <dk_set_leds_state+0x44>
			int err = gpio_pin_set_raw(led_devs[i],
   2b9b6:	4b18      	ldr	r3, [pc, #96]	; (2ba18 <dk_set_leds_state+0xc0>)
   2b9b8:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
   2b9bc:	4b17      	ldr	r3, [pc, #92]	; (2ba1c <dk_set_leds_state+0xc4>)
   2b9be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2b9c2:	791a      	ldrb	r2, [r3, #4]
	const struct gpio_driver_config *const cfg =
   2b9c4:	687b      	ldr	r3, [r7, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2b9c6:	681b      	ldr	r3, [r3, #0]
   2b9c8:	2501      	movs	r5, #1
   2b9ca:	4095      	lsls	r5, r2
   2b9cc:	422b      	tst	r3, r5
   2b9ce:	d0d0      	beq.n	2b972 <dk_set_leds_state+0x1a>
	if (value != 0)	{
   2b9d0:	2e00      	cmp	r6, #0
   2b9d2:	d0dc      	beq.n	2b98e <dk_set_leds_state+0x36>
	const struct gpio_driver_api *api =
   2b9d4:	68bb      	ldr	r3, [r7, #8]
	return api->port_set_bits_raw(port, pins);
   2b9d6:	68db      	ldr	r3, [r3, #12]
   2b9d8:	4629      	mov	r1, r5
   2b9da:	4638      	mov	r0, r7
   2b9dc:	4798      	blx	r3
   2b9de:	4605      	mov	r5, r0
   2b9e0:	e7db      	b.n	2b99a <dk_set_leds_state+0x42>
   2b9e2:	4b0f      	ldr	r3, [pc, #60]	; (2ba20 <dk_set_leds_state+0xc8>)
   2b9e4:	4a0f      	ldr	r2, [pc, #60]	; (2ba24 <dk_set_leds_state+0xcc>)
   2b9e6:	1a9b      	subs	r3, r3, r2
   2b9e8:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Cannot write LED gpio");
   2b9ea:	f04f 0000 	mov.w	r0, #0
   2b9ee:	2201      	movs	r2, #1
   2b9f0:	f362 0002 	bfi	r0, r2, #0, #3
   2b9f4:	f36f 00c5 	bfc	r0, #3, #3
   2b9f8:	f363 108f 	bfi	r0, r3, #6, #10
   2b9fc:	490a      	ldr	r1, [pc, #40]	; (2ba28 <dk_set_leds_state+0xd0>)
   2b9fe:	f010 fb23 	bl	3c048 <log_string_sync>
				return err;
   2ba02:	e000      	b.n	2ba06 <dk_set_leds_state+0xae>
			}
		}
	}

	return 0;
   2ba04:	2500      	movs	r5, #0
}
   2ba06:	4628      	mov	r0, r5
   2ba08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   2ba0c:	f06f 0515 	mvn.w	r5, #21
   2ba10:	e7f9      	b.n	2ba06 <dk_set_leds_state+0xae>
   2ba12:	bf00      	nop
   2ba14:	00041c84 	.word	0x00041c84
   2ba18:	20010258 	.word	0x20010258
   2ba1c:	0004339c 	.word	0x0004339c
   2ba20:	00041268 	.word	0x00041268
   2ba24:	00041200 	.word	0x00041200
   2ba28:	00043318 	.word	0x00043318
   2ba2c:	000431f8 	.word	0x000431f8

0002ba30 <dk_leds_init>:
{
   2ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2ba34:	2500      	movs	r5, #0
   2ba36:	e02f      	b.n	2ba98 <dk_leds_init+0x68>
   2ba38:	4b32      	ldr	r3, [pc, #200]	; (2bb04 <dk_leds_init+0xd4>)
   2ba3a:	4a33      	ldr	r2, [pc, #204]	; (2bb08 <dk_leds_init+0xd8>)
   2ba3c:	1a9b      	subs	r3, r3, r2
   2ba3e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot bind gpio device");
   2ba40:	f04f 0000 	mov.w	r0, #0
   2ba44:	2201      	movs	r2, #1
   2ba46:	f362 0002 	bfi	r0, r2, #0, #3
   2ba4a:	f36f 00c5 	bfc	r0, #3, #3
   2ba4e:	f363 108f 	bfi	r0, r3, #6, #10
   2ba52:	492e      	ldr	r1, [pc, #184]	; (2bb0c <dk_leds_init+0xdc>)
   2ba54:	f010 faf8 	bl	3c048 <log_string_sync>
			return -ENODEV;
   2ba58:	f06f 0412 	mvn.w	r4, #18
   2ba5c:	e04e      	b.n	2bafc <dk_leds_init+0xcc>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2ba5e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 2bb20 <dk_leds_init+0xf0>
   2ba62:	f240 22fd 	movw	r2, #765	; 0x2fd
   2ba66:	4651      	mov	r1, sl
   2ba68:	4829      	ldr	r0, [pc, #164]	; (2bb10 <dk_leds_init+0xe0>)
   2ba6a:	f010 f865 	bl	3bb38 <printk>
   2ba6e:	f240 21fd 	movw	r1, #765	; 0x2fd
   2ba72:	4650      	mov	r0, sl
   2ba74:	f010 fab4 	bl	3bfe0 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2ba78:	f8d8 3000 	ldr.w	r3, [r8]
   2ba7c:	ea23 0606 	bic.w	r6, r3, r6
   2ba80:	f8c8 6000 	str.w	r6, [r8]
	return api->pin_configure(port, pin, flags);
   2ba84:	f8d9 3000 	ldr.w	r3, [r9]
   2ba88:	f44f 7200 	mov.w	r2, #512	; 0x200
   2ba8c:	4639      	mov	r1, r7
   2ba8e:	4620      	mov	r0, r4
   2ba90:	4798      	blx	r3
		if (err) {
   2ba92:	4604      	mov	r4, r0
   2ba94:	b9e0      	cbnz	r0, 2bad0 <dk_leds_init+0xa0>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2ba96:	3501      	adds	r5, #1
   2ba98:	2d03      	cmp	r5, #3
   2ba9a:	d82a      	bhi.n	2baf2 <dk_leds_init+0xc2>
		led_devs[i] = device_get_binding(led_pins[i].port);
   2ba9c:	4b1d      	ldr	r3, [pc, #116]	; (2bb14 <dk_leds_init+0xe4>)
   2ba9e:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
   2baa2:	f009 fe31 	bl	35708 <z_impl_device_get_binding>
   2baa6:	4604      	mov	r4, r0
   2baa8:	4b1b      	ldr	r3, [pc, #108]	; (2bb18 <dk_leds_init+0xe8>)
   2baaa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
		if (!led_devs[i]) {
   2baae:	2800      	cmp	r0, #0
   2bab0:	d0c2      	beq.n	2ba38 <dk_leds_init+0x8>
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   2bab2:	4b18      	ldr	r3, [pc, #96]	; (2bb14 <dk_leds_init+0xe4>)
   2bab4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2bab8:	791f      	ldrb	r7, [r3, #4]
	const struct gpio_driver_api *api =
   2baba:	f8d0 9008 	ldr.w	r9, [r0, #8]
	const struct gpio_driver_config *const cfg =
   2babe:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
   2bac0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bac4:	681b      	ldr	r3, [r3, #0]
   2bac6:	2601      	movs	r6, #1
   2bac8:	40be      	lsls	r6, r7
   2baca:	4233      	tst	r3, r6
   2bacc:	d1d4      	bne.n	2ba78 <dk_leds_init+0x48>
   2bace:	e7c6      	b.n	2ba5e <dk_leds_init+0x2e>
   2bad0:	4b0c      	ldr	r3, [pc, #48]	; (2bb04 <dk_leds_init+0xd4>)
   2bad2:	4a0d      	ldr	r2, [pc, #52]	; (2bb08 <dk_leds_init+0xd8>)
   2bad4:	1a9b      	subs	r3, r3, r2
   2bad6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Cannot configure LED gpio");
   2bad8:	f04f 0000 	mov.w	r0, #0
   2badc:	2201      	movs	r2, #1
   2bade:	f362 0002 	bfi	r0, r2, #0, #3
   2bae2:	f36f 00c5 	bfc	r0, #3, #3
   2bae6:	f363 108f 	bfi	r0, r3, #6, #10
   2baea:	490c      	ldr	r1, [pc, #48]	; (2bb1c <dk_leds_init+0xec>)
   2baec:	f010 faac 	bl	3c048 <log_string_sync>
			return err;
   2baf0:	e004      	b.n	2bafc <dk_leds_init+0xcc>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   2baf2:	210f      	movs	r1, #15
   2baf4:	2000      	movs	r0, #0
   2baf6:	f7ff ff2f 	bl	2b958 <dk_set_leds_state>
   2bafa:	4604      	mov	r4, r0
}
   2bafc:	4620      	mov	r0, r4
   2bafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bb02:	bf00      	nop
   2bb04:	00041268 	.word	0x00041268
   2bb08:	00041200 	.word	0x00041200
   2bb0c:	000432b0 	.word	0x000432b0
   2bb10:	00041c84 	.word	0x00041c84
   2bb14:	0004339c 	.word	0x0004339c
   2bb18:	20010258 	.word	0x20010258
   2bb1c:	00043330 	.word	0x00043330
   2bb20:	000431f8 	.word	0x000431f8

0002bb24 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   2bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(led_pins)) {
   2bb26:	2803      	cmp	r0, #3
   2bb28:	d817      	bhi.n	2bb5a <dk_set_led+0x36>
   2bb2a:	460e      	mov	r6, r1
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   2bb2c:	4b27      	ldr	r3, [pc, #156]	; (2bbcc <dk_set_led+0xa8>)
   2bb2e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   2bb32:	4b27      	ldr	r3, [pc, #156]	; (2bbd0 <dk_set_led+0xac>)
   2bb34:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2bb38:	7902      	ldrb	r2, [r0, #4]
	const struct gpio_driver_config *const cfg =
   2bb3a:	686b      	ldr	r3, [r5, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bb3c:	681b      	ldr	r3, [r3, #0]
   2bb3e:	2401      	movs	r4, #1
   2bb40:	4094      	lsls	r4, r2
   2bb42:	4223      	tst	r3, r4
   2bb44:	d01c      	beq.n	2bb80 <dk_set_led+0x5c>
	if (value != 0)	{
   2bb46:	b346      	cbz	r6, 2bb9a <dk_set_led+0x76>
	const struct gpio_driver_api *api =
   2bb48:	68ab      	ldr	r3, [r5, #8]
	return api->port_set_bits_raw(port, pins);
   2bb4a:	68db      	ldr	r3, [r3, #12]
   2bb4c:	4621      	mov	r1, r4
   2bb4e:	4628      	mov	r0, r5
   2bb50:	4798      	blx	r3
   2bb52:	4604      	mov	r4, r0
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
   2bb54:	bb44      	cbnz	r4, 2bba8 <dk_set_led+0x84>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   2bb56:	4620      	mov	r0, r4
   2bb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bb5a:	4b1e      	ldr	r3, [pc, #120]	; (2bbd4 <dk_set_led+0xb0>)
   2bb5c:	4a1e      	ldr	r2, [pc, #120]	; (2bbd8 <dk_set_led+0xb4>)
   2bb5e:	1a9b      	subs	r3, r3, r2
   2bb60:	08db      	lsrs	r3, r3, #3
		LOG_ERR("LED index out of the range");
   2bb62:	f04f 0000 	mov.w	r0, #0
   2bb66:	2201      	movs	r2, #1
   2bb68:	f362 0002 	bfi	r0, r2, #0, #3
   2bb6c:	f36f 00c5 	bfc	r0, #3, #3
   2bb70:	f363 108f 	bfi	r0, r3, #6, #10
   2bb74:	4919      	ldr	r1, [pc, #100]	; (2bbdc <dk_set_led+0xb8>)
   2bb76:	f010 fa67 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2bb7a:	f06f 0415 	mvn.w	r4, #21
   2bb7e:	e7ea      	b.n	2bb56 <dk_set_led+0x32>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bb80:	4f17      	ldr	r7, [pc, #92]	; (2bbe0 <dk_set_led+0xbc>)
   2bb82:	f240 4291 	movw	r2, #1169	; 0x491
   2bb86:	4639      	mov	r1, r7
   2bb88:	4816      	ldr	r0, [pc, #88]	; (2bbe4 <dk_set_led+0xc0>)
   2bb8a:	f00f ffd5 	bl	3bb38 <printk>
   2bb8e:	f240 4191 	movw	r1, #1169	; 0x491
   2bb92:	4638      	mov	r0, r7
   2bb94:	f010 fa24 	bl	3bfe0 <assert_post_action>
   2bb98:	e7d5      	b.n	2bb46 <dk_set_led+0x22>
	const struct gpio_driver_api *api =
   2bb9a:	68ab      	ldr	r3, [r5, #8]
	return api->port_clear_bits_raw(port, pins);
   2bb9c:	691b      	ldr	r3, [r3, #16]
   2bb9e:	4621      	mov	r1, r4
   2bba0:	4628      	mov	r0, r5
   2bba2:	4798      	blx	r3
   2bba4:	4604      	mov	r4, r0
   2bba6:	e7d5      	b.n	2bb54 <dk_set_led+0x30>
   2bba8:	4b0a      	ldr	r3, [pc, #40]	; (2bbd4 <dk_set_led+0xb0>)
   2bbaa:	4a0b      	ldr	r2, [pc, #44]	; (2bbd8 <dk_set_led+0xb4>)
   2bbac:	1a9b      	subs	r3, r3, r2
   2bbae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot write LED gpio");
   2bbb0:	f04f 0000 	mov.w	r0, #0
   2bbb4:	2201      	movs	r2, #1
   2bbb6:	f362 0002 	bfi	r0, r2, #0, #3
   2bbba:	f36f 00c5 	bfc	r0, #3, #3
   2bbbe:	f363 108f 	bfi	r0, r3, #6, #10
   2bbc2:	4909      	ldr	r1, [pc, #36]	; (2bbe8 <dk_set_led+0xc4>)
   2bbc4:	f010 fa40 	bl	3c048 <log_string_sync>
   2bbc8:	e7c5      	b.n	2bb56 <dk_set_led+0x32>
   2bbca:	bf00      	nop
   2bbcc:	20010258 	.word	0x20010258
   2bbd0:	0004339c 	.word	0x0004339c
   2bbd4:	00041268 	.word	0x00041268
   2bbd8:	00041200 	.word	0x00041200
   2bbdc:	0004334c 	.word	0x0004334c
   2bbe0:	000431f8 	.word	0x000431f8
   2bbe4:	00041c84 	.word	0x00041c84
   2bbe8:	00043318 	.word	0x00043318

0002bbec <at_monitor_dispatch>:
static K_HEAP_DEFINE(at_monitor_heap, CONFIG_AT_MONITOR_HEAP_SIZE);
static K_WORK_DEFINE(at_monitor_work, at_monitor_task);

/* This is not static so that tests can call this function */
void at_monitor_dispatch(const char *notif)
{
   2bbec:	b570      	push	{r4, r5, r6, lr}
	bool monitored;
	struct at_notif_fifo *at_notif;
	size_t sz_needed;

	__ASSERT_NO_MSG(notif != NULL);
   2bbee:	4605      	mov	r5, r0
   2bbf0:	b108      	cbz	r0, 2bbf6 <at_monitor_dispatch+0xa>
{
   2bbf2:	4c31      	ldr	r4, [pc, #196]	; (2bcb8 <at_monitor_dispatch+0xcc>)
   2bbf4:	e00e      	b.n	2bc14 <at_monitor_dispatch+0x28>
	__ASSERT_NO_MSG(notif != NULL);
   2bbf6:	4c31      	ldr	r4, [pc, #196]	; (2bcbc <at_monitor_dispatch+0xd0>)
   2bbf8:	2224      	movs	r2, #36	; 0x24
   2bbfa:	4621      	mov	r1, r4
   2bbfc:	4830      	ldr	r0, [pc, #192]	; (2bcc0 <at_monitor_dispatch+0xd4>)
   2bbfe:	f00f ff9b 	bl	3bb38 <printk>
   2bc02:	2124      	movs	r1, #36	; 0x24
   2bc04:	4620      	mov	r0, r4
   2bc06:	f010 f9eb 	bl	3bfe0 <assert_post_action>
   2bc0a:	e7f2      	b.n	2bbf2 <at_monitor_dispatch+0x6>
	 * in the same notification, so copy it to the heap afterwards regardless.
	 */
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
			LOG_DBG("Dispatching to %p (ISR)", e->handler);
			e->handler(notif);
   2bc0c:	6863      	ldr	r3, [r4, #4]
   2bc0e:	4628      	mov	r0, r5
   2bc10:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   2bc12:	340c      	adds	r4, #12
   2bc14:	4b2b      	ldr	r3, [pc, #172]	; (2bcc4 <at_monitor_dispatch+0xd8>)
   2bc16:	429c      	cmp	r4, r3
   2bc18:	d80e      	bhi.n	2bc38 <at_monitor_dispatch+0x4c>
   2bc1a:	4b2a      	ldr	r3, [pc, #168]	; (2bcc4 <at_monitor_dispatch+0xd8>)
   2bc1c:	429c      	cmp	r4, r3
   2bc1e:	d216      	bcs.n	2bc4e <at_monitor_dispatch+0x62>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2bc20:	7a23      	ldrb	r3, [r4, #8]
   2bc22:	2b00      	cmp	r3, #0
   2bc24:	d1f5      	bne.n	2bc12 <at_monitor_dispatch+0x26>
   2bc26:	6821      	ldr	r1, [r4, #0]
   2bc28:	2900      	cmp	r1, #0
   2bc2a:	d0ef      	beq.n	2bc0c <at_monitor_dispatch+0x20>
   2bc2c:	4628      	mov	r0, r5
   2bc2e:	f014 fb64 	bl	402fa <strstr>
   2bc32:	2800      	cmp	r0, #0
   2bc34:	d1ea      	bne.n	2bc0c <at_monitor_dispatch+0x20>
   2bc36:	e7ec      	b.n	2bc12 <at_monitor_dispatch+0x26>
	STRUCT_SECTION_FOREACH(at_monitor_isr_entry, e) {
   2bc38:	4e20      	ldr	r6, [pc, #128]	; (2bcbc <at_monitor_dispatch+0xd0>)
   2bc3a:	222a      	movs	r2, #42	; 0x2a
   2bc3c:	4631      	mov	r1, r6
   2bc3e:	4820      	ldr	r0, [pc, #128]	; (2bcc0 <at_monitor_dispatch+0xd4>)
   2bc40:	f00f ff7a 	bl	3bb38 <printk>
   2bc44:	212a      	movs	r1, #42	; 0x2a
   2bc46:	4630      	mov	r0, r6
   2bc48:	f010 f9ca 	bl	3bfe0 <assert_post_action>
   2bc4c:	e7e5      	b.n	2bc1a <at_monitor_dispatch+0x2e>
		}
	}

	monitored = false;
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2bc4e:	4c1e      	ldr	r4, [pc, #120]	; (2bcc8 <at_monitor_dispatch+0xdc>)
   2bc50:	e000      	b.n	2bc54 <at_monitor_dispatch+0x68>
   2bc52:	340c      	adds	r4, #12
   2bc54:	4b1d      	ldr	r3, [pc, #116]	; (2bccc <at_monitor_dispatch+0xe0>)
   2bc56:	429c      	cmp	r4, r3
   2bc58:	d823      	bhi.n	2bca2 <at_monitor_dispatch+0xb6>
   2bc5a:	4b1c      	ldr	r3, [pc, #112]	; (2bccc <at_monitor_dispatch+0xe0>)
   2bc5c:	429c      	cmp	r4, r3
   2bc5e:	d21f      	bcs.n	2bca0 <at_monitor_dispatch+0xb4>
		if (!e->paused && (e->filter == ANY || strstr(notif, e->filter))) {
   2bc60:	7a23      	ldrb	r3, [r4, #8]
   2bc62:	2b00      	cmp	r3, #0
   2bc64:	d1f5      	bne.n	2bc52 <at_monitor_dispatch+0x66>
   2bc66:	6821      	ldr	r1, [r4, #0]
   2bc68:	b121      	cbz	r1, 2bc74 <at_monitor_dispatch+0x88>
   2bc6a:	4628      	mov	r0, r5
   2bc6c:	f014 fb45 	bl	402fa <strstr>
   2bc70:	2800      	cmp	r0, #0
   2bc72:	d0ee      	beq.n	2bc52 <at_monitor_dispatch+0x66>

	if (!monitored) {
		return;
	}

	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   2bc74:	4628      	mov	r0, r5
   2bc76:	f7f5 fc61 	bl	2153c <strlen>

	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   2bc7a:	2200      	movs	r2, #0
   2bc7c:	2300      	movs	r3, #0
   2bc7e:	1d41      	adds	r1, r0, #5
   2bc80:	4813      	ldr	r0, [pc, #76]	; (2bcd0 <at_monitor_dispatch+0xe4>)
   2bc82:	f013 ff50 	bl	3fb26 <k_heap_alloc>
	if (!at_notif) {
   2bc86:	4604      	mov	r4, r0
   2bc88:	b150      	cbz	r0, 2bca0 <at_monitor_dispatch+0xb4>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2bc8a:	4629      	mov	r1, r5
   2bc8c:	3004      	adds	r0, #4
   2bc8e:	f014 fae6 	bl	4025e <strcpy>
		return;
	}

	strcpy(at_notif->data, notif);

	k_fifo_put(&at_monitor_fifo, at_notif);
   2bc92:	4621      	mov	r1, r4
   2bc94:	480f      	ldr	r0, [pc, #60]	; (2bcd4 <at_monitor_dispatch+0xe8>)
   2bc96:	f013 ffc4 	bl	3fc22 <k_queue_append>
	k_work_submit(&at_monitor_work);
   2bc9a:	480f      	ldr	r0, [pc, #60]	; (2bcd8 <at_monitor_dispatch+0xec>)
   2bc9c:	f00a ff72 	bl	36b84 <k_work_submit>
}
   2bca0:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2bca2:	4e06      	ldr	r6, [pc, #24]	; (2bcbc <at_monitor_dispatch+0xd0>)
   2bca4:	2232      	movs	r2, #50	; 0x32
   2bca6:	4631      	mov	r1, r6
   2bca8:	4805      	ldr	r0, [pc, #20]	; (2bcc0 <at_monitor_dispatch+0xd4>)
   2bcaa:	f00f ff45 	bl	3bb38 <printk>
   2bcae:	2132      	movs	r1, #50	; 0x32
   2bcb0:	4630      	mov	r0, r6
   2bcb2:	f010 f995 	bl	3bfe0 <assert_post_action>
   2bcb6:	e7d0      	b.n	2bc5a <at_monitor_dispatch+0x6e>
   2bcb8:	2000c934 	.word	0x2000c934
   2bcbc:	000433bc 	.word	0x000433bc
   2bcc0:	00041c84 	.word	0x00041c84
   2bcc4:	2000c934 	.word	0x2000c934
   2bcc8:	2000c8c8 	.word	0x2000c8c8
   2bccc:	2000c934 	.word	0x2000c934
   2bcd0:	2000c9d8 	.word	0x2000c9d8
   2bcd4:	2000cae8 	.word	0x2000cae8
   2bcd8:	2000c670 	.word	0x2000c670

0002bcdc <at_monitor_task>:

static void at_monitor_task(struct k_work *work)
{
   2bcdc:	b570      	push	{r4, r5, r6, lr}
	struct at_notif_fifo *at_notif;

	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   2bcde:	e024      	b.n	2bd2a <at_monitor_task+0x4e>
		LOG_DBG("AT notif: %s", log_strdup(at_notif->data));
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
			if (!e->paused &&
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
				LOG_DBG("Dispatching to %p", e->handler);
				e->handler(at_notif->data);
   2bce0:	6863      	ldr	r3, [r4, #4]
   2bce2:	1d30      	adds	r0, r6, #4
   2bce4:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2bce6:	340c      	adds	r4, #12
   2bce8:	4b15      	ldr	r3, [pc, #84]	; (2bd40 <at_monitor_task+0x64>)
   2bcea:	429c      	cmp	r4, r3
   2bcec:	d80e      	bhi.n	2bd0c <at_monitor_task+0x30>
   2bcee:	4b14      	ldr	r3, [pc, #80]	; (2bd40 <at_monitor_task+0x64>)
   2bcf0:	429c      	cmp	r4, r3
   2bcf2:	d216      	bcs.n	2bd22 <at_monitor_task+0x46>
			if (!e->paused &&
   2bcf4:	7a23      	ldrb	r3, [r4, #8]
   2bcf6:	2b00      	cmp	r3, #0
   2bcf8:	d1f5      	bne.n	2bce6 <at_monitor_task+0xa>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   2bcfa:	6821      	ldr	r1, [r4, #0]
			if (!e->paused &&
   2bcfc:	2900      	cmp	r1, #0
   2bcfe:	d0ef      	beq.n	2bce0 <at_monitor_task+0x4>
			   (e->filter == ANY || strstr(at_notif->data, e->filter))) {
   2bd00:	1d30      	adds	r0, r6, #4
   2bd02:	f014 fafa 	bl	402fa <strstr>
   2bd06:	2800      	cmp	r0, #0
   2bd08:	d1ea      	bne.n	2bce0 <at_monitor_task+0x4>
   2bd0a:	e7ec      	b.n	2bce6 <at_monitor_task+0xa>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2bd0c:	4d0d      	ldr	r5, [pc, #52]	; (2bd44 <at_monitor_task+0x68>)
   2bd0e:	2253      	movs	r2, #83	; 0x53
   2bd10:	4629      	mov	r1, r5
   2bd12:	480d      	ldr	r0, [pc, #52]	; (2bd48 <at_monitor_task+0x6c>)
   2bd14:	f00f ff10 	bl	3bb38 <printk>
   2bd18:	2153      	movs	r1, #83	; 0x53
   2bd1a:	4628      	mov	r0, r5
   2bd1c:	f010 f960 	bl	3bfe0 <assert_post_action>
   2bd20:	e7e5      	b.n	2bcee <at_monitor_task+0x12>
			}
		}
		k_heap_free(&at_monitor_heap, at_notif);
   2bd22:	4631      	mov	r1, r6
   2bd24:	4809      	ldr	r0, [pc, #36]	; (2bd4c <at_monitor_task+0x70>)
   2bd26:	f009 ff79 	bl	35c1c <k_heap_free>
	return z_impl_k_queue_get(queue, timeout);
   2bd2a:	2200      	movs	r2, #0
   2bd2c:	2300      	movs	r3, #0
   2bd2e:	4808      	ldr	r0, [pc, #32]	; (2bd50 <at_monitor_task+0x74>)
   2bd30:	f00a fb84 	bl	3643c <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   2bd34:	4606      	mov	r6, r0
   2bd36:	b108      	cbz	r0, 2bd3c <at_monitor_task+0x60>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2bd38:	4c06      	ldr	r4, [pc, #24]	; (2bd54 <at_monitor_task+0x78>)
   2bd3a:	e7d5      	b.n	2bce8 <at_monitor_task+0xc>
	}
}
   2bd3c:	bd70      	pop	{r4, r5, r6, pc}
   2bd3e:	bf00      	nop
   2bd40:	2000c934 	.word	0x2000c934
   2bd44:	000433bc 	.word	0x000433bc
   2bd48:	00041c84 	.word	0x00041c84
   2bd4c:	2000c9d8 	.word	0x2000c9d8
   2bd50:	2000cae8 	.word	0x2000cae8
   2bd54:	2000c8c8 	.word	0x2000c8c8

0002bd58 <at_monitor_sys_init>:

static int at_monitor_sys_init(const struct device *unused)
{
   2bd58:	b508      	push	{r3, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   2bd5a:	480c      	ldr	r0, [pc, #48]	; (2bd8c <at_monitor_sys_init+0x34>)
   2bd5c:	f009 f800 	bl	34d60 <nrf_modem_at_notif_handler_set>
	if (err) {
   2bd60:	b908      	cbnz	r0, 2bd66 <at_monitor_sys_init+0xe>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
	}

	return 0;
}
   2bd62:	2000      	movs	r0, #0
   2bd64:	bd08      	pop	{r3, pc}
   2bd66:	4602      	mov	r2, r0
   2bd68:	4b09      	ldr	r3, [pc, #36]	; (2bd90 <at_monitor_sys_init+0x38>)
   2bd6a:	490a      	ldr	r1, [pc, #40]	; (2bd94 <at_monitor_sys_init+0x3c>)
   2bd6c:	1a5b      	subs	r3, r3, r1
   2bd6e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   2bd70:	f04f 0000 	mov.w	r0, #0
   2bd74:	2101      	movs	r1, #1
   2bd76:	f361 0002 	bfi	r0, r1, #0, #3
   2bd7a:	f36f 00c5 	bfc	r0, #3, #3
   2bd7e:	f363 108f 	bfi	r0, r3, #6, #10
   2bd82:	4905      	ldr	r1, [pc, #20]	; (2bd98 <at_monitor_sys_init+0x40>)
   2bd84:	f010 f960 	bl	3c048 <log_string_sync>
   2bd88:	e7eb      	b.n	2bd62 <at_monitor_sys_init+0xa>
   2bd8a:	bf00      	nop
   2bd8c:	0002bbed 	.word	0x0002bbed
   2bd90:	00041218 	.word	0x00041218
   2bd94:	00041200 	.word	0x00041200
   2bd98:	000433e8 	.word	0x000433e8

0002bd9c <is_clac>:
 *
 * @retval true  If the string is a CLAC response
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
   2bd9c:	b510      	push	{r4, lr}
   2bd9e:	4604      	mov	r4, r0
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   2bda0:	7823      	ldrb	r3, [r4, #0]
	if ((chr == '\r') || (chr == '\n')) {
   2bda2:	2b0d      	cmp	r3, #13
   2bda4:	d027      	beq.n	2bdf6 <is_clac+0x5a>
   2bda6:	2b0a      	cmp	r3, #10
   2bda8:	d025      	beq.n	2bdf6 <is_clac+0x5a>
		str++;
	}

	if (strlen(str) < 4) {
   2bdaa:	4620      	mov	r0, r4
   2bdac:	f7f5 fbc6 	bl	2153c <strlen>
   2bdb0:	2803      	cmp	r0, #3
   2bdb2:	d935      	bls.n	2be20 <is_clac+0x84>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2bdb4:	7823      	ldrb	r3, [r4, #0]
   2bdb6:	4a1f      	ldr	r2, [pc, #124]	; (2be34 <is_clac+0x98>)
   2bdb8:	5c9a      	ldrb	r2, [r3, r2]
   2bdba:	f002 0203 	and.w	r2, r2, #3
   2bdbe:	2a02      	cmp	r2, #2
   2bdc0:	d01b      	beq.n	2bdfa <is_clac+0x5e>
   2bdc2:	2b41      	cmp	r3, #65	; 0x41
   2bdc4:	d12e      	bne.n	2be24 <is_clac+0x88>
   2bdc6:	7863      	ldrb	r3, [r4, #1]
   2bdc8:	4a1a      	ldr	r2, [pc, #104]	; (2be34 <is_clac+0x98>)
   2bdca:	5c9a      	ldrb	r2, [r3, r2]
   2bdcc:	f002 0203 	and.w	r2, r2, #3
   2bdd0:	2a02      	cmp	r2, #2
   2bdd2:	d014      	beq.n	2bdfe <is_clac+0x62>
   2bdd4:	2b54      	cmp	r3, #84	; 0x54
   2bdd6:	d127      	bne.n	2be28 <is_clac+0x8c>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   2bdd8:	78a3      	ldrb	r3, [r4, #2]
   2bdda:	4a16      	ldr	r2, [pc, #88]	; (2be34 <is_clac+0x98>)
   2bddc:	5c9a      	ldrb	r2, [r3, r2]
   2bdde:	f002 0203 	and.w	r2, r2, #3
   2bde2:	2a02      	cmp	r2, #2
   2bde4:	d00d      	beq.n	2be02 <is_clac+0x66>
   2bde6:	2b2b      	cmp	r3, #43	; 0x2b
   2bde8:	d001      	beq.n	2bdee <is_clac+0x52>
   2bdea:	2b25      	cmp	r3, #37	; 0x25
   2bdec:	d11e      	bne.n	2be2c <is_clac+0x90>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   2bdee:	2b25      	cmp	r3, #37	; 0x25
   2bdf0:	d009      	beq.n	2be06 <is_clac+0x6a>
		/* Ignore AT%X to avoid false detect (read resp XCOEX0 etc.) */
		return false;
	}

	return true;
   2bdf2:	2001      	movs	r0, #1
   2bdf4:	e015      	b.n	2be22 <is_clac+0x86>
		str++;
   2bdf6:	3401      	adds	r4, #1
   2bdf8:	e7d2      	b.n	2bda0 <is_clac+0x4>
	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2bdfa:	3b20      	subs	r3, #32
   2bdfc:	e7e1      	b.n	2bdc2 <is_clac+0x26>
   2bdfe:	3b20      	subs	r3, #32
   2be00:	e7e8      	b.n	2bdd4 <is_clac+0x38>
	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   2be02:	3b20      	subs	r3, #32
   2be04:	e7ef      	b.n	2bde6 <is_clac+0x4a>
	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   2be06:	78e3      	ldrb	r3, [r4, #3]
   2be08:	4a0a      	ldr	r2, [pc, #40]	; (2be34 <is_clac+0x98>)
   2be0a:	5c9a      	ldrb	r2, [r3, r2]
   2be0c:	f002 0203 	and.w	r2, r2, #3
   2be10:	2a02      	cmp	r2, #2
   2be12:	d003      	beq.n	2be1c <is_clac+0x80>
   2be14:	2b58      	cmp	r3, #88	; 0x58
   2be16:	d00b      	beq.n	2be30 <is_clac+0x94>
	return true;
   2be18:	2001      	movs	r0, #1
   2be1a:	e002      	b.n	2be22 <is_clac+0x86>
	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   2be1c:	3b20      	subs	r3, #32
   2be1e:	e7f9      	b.n	2be14 <is_clac+0x78>
		return false;
   2be20:	2000      	movs	r0, #0
}
   2be22:	bd10      	pop	{r4, pc}
		return false;
   2be24:	2000      	movs	r0, #0
   2be26:	e7fc      	b.n	2be22 <is_clac+0x86>
   2be28:	2000      	movs	r0, #0
   2be2a:	e7fa      	b.n	2be22 <is_clac+0x86>
		return false;
   2be2c:	2000      	movs	r0, #0
   2be2e:	e7f8      	b.n	2be22 <is_clac+0x86>
		return false;
   2be30:	2000      	movs	r0, #0
   2be32:	e7f6      	b.n	2be22 <is_clac+0x86>
   2be34:	00045e47 	.word	0x00045e47

0002be38 <at_parse_detect_type>:

	return false;
}

static int at_parse_detect_type(const char **str, int index)
{
   2be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be3a:	4604      	mov	r4, r0
	const char *tmpstr = *str;
   2be3c:	6806      	ldr	r6, [r0, #0]

	if ((index == 0) && is_notification(*tmpstr)) {
   2be3e:	460d      	mov	r5, r1
   2be40:	b921      	cbnz	r1, 2be4c <at_parse_detect_type+0x14>
   2be42:	7833      	ldrb	r3, [r6, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2be44:	2b2b      	cmp	r3, #43	; 0x2b
   2be46:	d00b      	beq.n	2be60 <at_parse_detect_type+0x28>
   2be48:	2b25      	cmp	r3, #37	; 0x25
   2be4a:	d009      	beq.n	2be60 <at_parse_detect_type+0x28>
		set_new_state(NOTIFICATION);

		/* Check for responses we know need to be strings */
		set_type_string = check_response_for_forced_string(tmpstr);

	} else if (set_type_string) {
   2be4c:	4b6f      	ldr	r3, [pc, #444]	; (2c00c <at_parse_detect_type+0x1d4>)
   2be4e:	781f      	ldrb	r7, [r3, #0]
   2be50:	2f00      	cmp	r7, #0
   2be52:	d03c      	beq.n	2bece <at_parse_detect_type+0x96>
	state = new_state;
   2be54:	4b6e      	ldr	r3, [pc, #440]	; (2c010 <at_parse_detect_type+0x1d8>)
   2be56:	2202      	movs	r2, #2
   2be58:	701a      	strb	r2, [r3, #0]
		 */
		*str = tmpstr;
		return -1;
	}

	*str = tmpstr;
   2be5a:	6026      	str	r6, [r4, #0]
	return 0;
   2be5c:	2000      	movs	r0, #0
}
   2be5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	state = new_state;
   2be60:	4b6b      	ldr	r3, [pc, #428]	; (2c010 <at_parse_detect_type+0x1d8>)
   2be62:	2206      	movs	r2, #6
   2be64:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2be66:	2205      	movs	r2, #5
   2be68:	496a      	ldr	r1, [pc, #424]	; (2c014 <at_parse_detect_type+0x1dc>)
   2be6a:	4630      	mov	r0, r6
   2be6c:	f014 f9ff 	bl	4026e <strncmp>
   2be70:	b918      	cbnz	r0, 2be7a <at_parse_detect_type+0x42>
			retval = true;
   2be72:	2201      	movs	r2, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   2be74:	4b65      	ldr	r3, [pc, #404]	; (2c00c <at_parse_detect_type+0x1d4>)
   2be76:	701a      	strb	r2, [r3, #0]
   2be78:	e7ef      	b.n	2be5a <at_parse_detect_type+0x22>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2be7a:	2205      	movs	r2, #5
   2be7c:	4966      	ldr	r1, [pc, #408]	; (2c018 <at_parse_detect_type+0x1e0>)
   2be7e:	4630      	mov	r0, r6
   2be80:	f014 f9f5 	bl	4026e <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2be84:	b908      	cbnz	r0, 2be8a <at_parse_detect_type+0x52>
			retval = true;
   2be86:	2201      	movs	r2, #1
   2be88:	e7f4      	b.n	2be74 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2be8a:	220b      	movs	r2, #11
   2be8c:	4963      	ldr	r1, [pc, #396]	; (2c01c <at_parse_detect_type+0x1e4>)
   2be8e:	4630      	mov	r0, r6
   2be90:	f014 f9ed 	bl	4026e <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2be94:	b908      	cbnz	r0, 2be9a <at_parse_detect_type+0x62>
			retval = true;
   2be96:	2201      	movs	r2, #1
   2be98:	e7ec      	b.n	2be74 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2be9a:	220a      	movs	r2, #10
   2be9c:	4960      	ldr	r1, [pc, #384]	; (2c020 <at_parse_detect_type+0x1e8>)
   2be9e:	4630      	mov	r0, r6
   2bea0:	f014 f9e5 	bl	4026e <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2bea4:	b908      	cbnz	r0, 2beaa <at_parse_detect_type+0x72>
			retval = true;
   2bea6:	2201      	movs	r2, #1
   2bea8:	e7e4      	b.n	2be74 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   2beaa:	220b      	movs	r2, #11
   2beac:	495d      	ldr	r1, [pc, #372]	; (2c024 <at_parse_detect_type+0x1ec>)
   2beae:	4630      	mov	r0, r6
   2beb0:	f014 f9dd 	bl	4026e <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2beb4:	b908      	cbnz	r0, 2beba <at_parse_detect_type+0x82>
			retval = true;
   2beb6:	2201      	movs	r2, #1
   2beb8:	e7dc      	b.n	2be74 <at_parse_detect_type+0x3c>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   2beba:	2207      	movs	r2, #7
   2bebc:	495a      	ldr	r1, [pc, #360]	; (2c028 <at_parse_detect_type+0x1f0>)
   2bebe:	4630      	mov	r0, r6
   2bec0:	f014 f9d5 	bl	4026e <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   2bec4:	b108      	cbz	r0, 2beca <at_parse_detect_type+0x92>
	bool retval = false;
   2bec6:	2200      	movs	r2, #0
   2bec8:	e7d4      	b.n	2be74 <at_parse_detect_type+0x3c>
			retval = true;
   2beca:	2201      	movs	r2, #1
   2becc:	e7d2      	b.n	2be74 <at_parse_detect_type+0x3c>
	} else if ((index > 0) && is_clac(tmpstr)) {
   2bece:	2d00      	cmp	r5, #0
   2bed0:	dc06      	bgt.n	2bee0 <at_parse_detect_type+0xa8>
	} else if ((index == 0) && is_command(tmpstr)) {
   2bed2:	b185      	cbz	r5, 2bef6 <at_parse_detect_type+0xbe>
	} else if (index == 0) {
   2bed4:	2d00      	cmp	r5, #0
   2bed6:	d146      	bne.n	2bf66 <at_parse_detect_type+0x12e>
	state = new_state;
   2bed8:	4b4d      	ldr	r3, [pc, #308]	; (2c010 <at_parse_detect_type+0x1d8>)
   2beda:	2202      	movs	r2, #2
   2bedc:	701a      	strb	r2, [r3, #0]
}
   2bede:	e7bc      	b.n	2be5a <at_parse_detect_type+0x22>
	} else if ((index > 0) && is_clac(tmpstr)) {
   2bee0:	4630      	mov	r0, r6
   2bee2:	f7ff ff5b 	bl	2bd9c <is_clac>
   2bee6:	2800      	cmp	r0, #0
   2bee8:	d0f3      	beq.n	2bed2 <at_parse_detect_type+0x9a>
	state = new_state;
   2beea:	4b49      	ldr	r3, [pc, #292]	; (2c010 <at_parse_detect_type+0x1d8>)
   2beec:	2209      	movs	r2, #9
   2beee:	701a      	strb	r2, [r3, #0]
		return -2;
   2bef0:	f06f 0001 	mvn.w	r0, #1
   2bef4:	e7b3      	b.n	2be5e <at_parse_detect_type+0x26>
	if (strlen(str) < 2) {
   2bef6:	4630      	mov	r0, r6
   2bef8:	f7f5 fb20 	bl	2153c <strlen>
   2befc:	2801      	cmp	r0, #1
   2befe:	d924      	bls.n	2bf4a <at_parse_detect_type+0x112>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2bf00:	7832      	ldrb	r2, [r6, #0]
   2bf02:	4b4a      	ldr	r3, [pc, #296]	; (2c02c <at_parse_detect_type+0x1f4>)
   2bf04:	5cd3      	ldrb	r3, [r2, r3]
   2bf06:	f003 0303 	and.w	r3, r3, #3
   2bf0a:	2b02      	cmp	r3, #2
   2bf0c:	d018      	beq.n	2bf40 <at_parse_detect_type+0x108>
   2bf0e:	2a41      	cmp	r2, #65	; 0x41
   2bf10:	d11b      	bne.n	2bf4a <at_parse_detect_type+0x112>
   2bf12:	7872      	ldrb	r2, [r6, #1]
   2bf14:	4b45      	ldr	r3, [pc, #276]	; (2c02c <at_parse_detect_type+0x1f4>)
   2bf16:	5cd3      	ldrb	r3, [r2, r3]
   2bf18:	f003 0303 	and.w	r3, r3, #3
   2bf1c:	2b02      	cmp	r3, #2
   2bf1e:	d011      	beq.n	2bf44 <at_parse_detect_type+0x10c>
   2bf20:	2a54      	cmp	r2, #84	; 0x54
   2bf22:	d112      	bne.n	2bf4a <at_parse_detect_type+0x112>
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2bf24:	78b3      	ldrb	r3, [r6, #2]
   2bf26:	2b2b      	cmp	r3, #43	; 0x2b
   2bf28:	d00e      	beq.n	2bf48 <at_parse_detect_type+0x110>
   2bf2a:	2b25      	cmp	r3, #37	; 0x25
   2bf2c:	d013      	beq.n	2bf56 <at_parse_detect_type+0x11e>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2bf2e:	2b23      	cmp	r3, #35	; 0x23
   2bf30:	d013      	beq.n	2bf5a <at_parse_detect_type+0x122>
	if ((chr == '\r') || (chr == '\n')) {
   2bf32:	2b0d      	cmp	r3, #13
   2bf34:	d013      	beq.n	2bf5e <at_parse_detect_type+0x126>
   2bf36:	2b0a      	cmp	r3, #10
   2bf38:	d013      	beq.n	2bf62 <at_parse_detect_type+0x12a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2bf3a:	b933      	cbnz	r3, 2bf4a <at_parse_detect_type+0x112>
		return true;
   2bf3c:	2701      	movs	r7, #1
   2bf3e:	e004      	b.n	2bf4a <at_parse_detect_type+0x112>
	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2bf40:	3a20      	subs	r2, #32
   2bf42:	e7e4      	b.n	2bf0e <at_parse_detect_type+0xd6>
   2bf44:	3a20      	subs	r2, #32
   2bf46:	e7eb      	b.n	2bf20 <at_parse_detect_type+0xe8>
		return true;
   2bf48:	2701      	movs	r7, #1
	} else if ((index == 0) && is_command(tmpstr)) {
   2bf4a:	2f00      	cmp	r7, #0
   2bf4c:	d0c2      	beq.n	2bed4 <at_parse_detect_type+0x9c>
	state = new_state;
   2bf4e:	4b30      	ldr	r3, [pc, #192]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bf50:	2207      	movs	r2, #7
   2bf52:	701a      	strb	r2, [r3, #0]
}
   2bf54:	e781      	b.n	2be5a <at_parse_detect_type+0x22>
   2bf56:	2701      	movs	r7, #1
   2bf58:	e7f7      	b.n	2bf4a <at_parse_detect_type+0x112>
   2bf5a:	2701      	movs	r7, #1
   2bf5c:	e7f5      	b.n	2bf4a <at_parse_detect_type+0x112>
   2bf5e:	2701      	movs	r7, #1
   2bf60:	e7f3      	b.n	2bf4a <at_parse_detect_type+0x112>
   2bf62:	2701      	movs	r7, #1
   2bf64:	e7f1      	b.n	2bf4a <at_parse_detect_type+0x112>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2bf66:	2d00      	cmp	r5, #0
   2bf68:	dd04      	ble.n	2bf74 <at_parse_detect_type+0x13c>
   2bf6a:	7833      	ldrb	r3, [r6, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2bf6c:	2b2b      	cmp	r3, #43	; 0x2b
   2bf6e:	d021      	beq.n	2bfb4 <at_parse_detect_type+0x17c>
   2bf70:	2b25      	cmp	r3, #37	; 0x25
   2bf72:	d01f      	beq.n	2bfb4 <at_parse_detect_type+0x17c>
	} else if (is_number(*tmpstr)) {
   2bf74:	7833      	ldrb	r3, [r6, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2bf76:	4a2d      	ldr	r2, [pc, #180]	; (2c02c <at_parse_detect_type+0x1f4>)
   2bf78:	5c9a      	ldrb	r2, [r3, r2]
   2bf7a:	f012 0f04 	tst.w	r2, #4
   2bf7e:	d11d      	bne.n	2bfbc <at_parse_detect_type+0x184>
   2bf80:	2b2d      	cmp	r3, #45	; 0x2d
   2bf82:	d01b      	beq.n	2bfbc <at_parse_detect_type+0x184>
   2bf84:	2b2b      	cmp	r3, #43	; 0x2b
   2bf86:	d019      	beq.n	2bfbc <at_parse_detect_type+0x184>
	if (chr == '"') {
   2bf88:	2b22      	cmp	r3, #34	; 0x22
   2bf8a:	d01b      	beq.n	2bfc4 <at_parse_detect_type+0x18c>
	if (chr == '(') {
   2bf8c:	2b28      	cmp	r3, #40	; 0x28
   2bf8e:	d01e      	beq.n	2bfce <at_parse_detect_type+0x196>
	if ((chr == '\r') || (chr == '\n')) {
   2bf90:	2b0d      	cmp	r3, #13
   2bf92:	d021      	beq.n	2bfd8 <at_parse_detect_type+0x1a0>
   2bf94:	2b0a      	cmp	r3, #10
   2bf96:	d01f      	beq.n	2bfd8 <at_parse_detect_type+0x1a0>
   2bf98:	2b0d      	cmp	r3, #13
   2bf9a:	d02c      	beq.n	2bff6 <at_parse_detect_type+0x1be>
   2bf9c:	2b0a      	cmp	r3, #10
   2bf9e:	d02a      	beq.n	2bff6 <at_parse_detect_type+0x1be>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2bfa0:	2b2c      	cmp	r3, #44	; 0x2c
   2bfa2:	d02f      	beq.n	2c004 <at_parse_detect_type+0x1cc>
   2bfa4:	2b3a      	cmp	r3, #58	; 0x3a
   2bfa6:	d02d      	beq.n	2c004 <at_parse_detect_type+0x1cc>
   2bfa8:	2b3d      	cmp	r3, #61	; 0x3d
   2bfaa:	d02b      	beq.n	2c004 <at_parse_detect_type+0x1cc>
		*str = tmpstr;
   2bfac:	6026      	str	r6, [r4, #0]
		return -1;
   2bfae:	f04f 30ff 	mov.w	r0, #4294967295
   2bfb2:	e754      	b.n	2be5e <at_parse_detect_type+0x26>
		*str = tmpstr;
   2bfb4:	6026      	str	r6, [r4, #0]
		return -1;
   2bfb6:	f04f 30ff 	mov.w	r0, #4294967295
   2bfba:	e750      	b.n	2be5e <at_parse_detect_type+0x26>
	state = new_state;
   2bfbc:	4b14      	ldr	r3, [pc, #80]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bfbe:	2204      	movs	r2, #4
   2bfc0:	701a      	strb	r2, [r3, #0]
}
   2bfc2:	e74a      	b.n	2be5a <at_parse_detect_type+0x22>
	state = new_state;
   2bfc4:	4b12      	ldr	r3, [pc, #72]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bfc6:	2203      	movs	r2, #3
   2bfc8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2bfca:	3601      	adds	r6, #1
   2bfcc:	e745      	b.n	2be5a <at_parse_detect_type+0x22>
	state = new_state;
   2bfce:	4b10      	ldr	r3, [pc, #64]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bfd0:	2201      	movs	r2, #1
   2bfd2:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2bfd4:	4416      	add	r6, r2
   2bfd6:	e740      	b.n	2be5a <at_parse_detect_type+0x22>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2bfd8:	4a0d      	ldr	r2, [pc, #52]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bfda:	7812      	ldrb	r2, [r2, #0]
   2bfdc:	2a04      	cmp	r2, #4
   2bfde:	d1db      	bne.n	2bf98 <at_parse_detect_type+0x160>
		while (is_lfcr(*tmpstr)) {
   2bfe0:	7833      	ldrb	r3, [r6, #0]
	if ((chr == '\r') || (chr == '\n')) {
   2bfe2:	2b0d      	cmp	r3, #13
   2bfe4:	d005      	beq.n	2bff2 <at_parse_detect_type+0x1ba>
   2bfe6:	2b0a      	cmp	r3, #10
   2bfe8:	d003      	beq.n	2bff2 <at_parse_detect_type+0x1ba>
	state = new_state;
   2bfea:	4b09      	ldr	r3, [pc, #36]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bfec:	2205      	movs	r2, #5
   2bfee:	701a      	strb	r2, [r3, #0]
}
   2bff0:	e733      	b.n	2be5a <at_parse_detect_type+0x22>
			tmpstr++;
   2bff2:	3601      	adds	r6, #1
   2bff4:	e7f4      	b.n	2bfe0 <at_parse_detect_type+0x1a8>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2bff6:	4a06      	ldr	r2, [pc, #24]	; (2c010 <at_parse_detect_type+0x1d8>)
   2bff8:	7812      	ldrb	r2, [r2, #0]
   2bffa:	2a08      	cmp	r2, #8
   2bffc:	d1d0      	bne.n	2bfa0 <at_parse_detect_type+0x168>
	state = new_state;
   2bffe:	4b04      	ldr	r3, [pc, #16]	; (2c010 <at_parse_detect_type+0x1d8>)
   2c000:	701a      	strb	r2, [r3, #0]
}
   2c002:	e72a      	b.n	2be5a <at_parse_detect_type+0x22>
	state = new_state;
   2c004:	4b02      	ldr	r3, [pc, #8]	; (2c010 <at_parse_detect_type+0x1d8>)
   2c006:	2208      	movs	r2, #8
   2c008:	701a      	strb	r2, [r3, #0]
}
   2c00a:	e726      	b.n	2be5a <at_parse_detect_type+0x22>
   2c00c:	20010e01 	.word	0x20010e01
   2c010:	20010e02 	.word	0x20010e02
   2c014:	00043424 	.word	0x00043424
   2c018:	0004342c 	.word	0x0004342c
   2c01c:	00043434 	.word	0x00043434
   2c020:	00043440 	.word	0x00043440
   2c024:	0004344c 	.word	0x0004344c
   2c028:	00043458 	.word	0x00043458
   2c02c:	00045e47 	.word	0x00045e47

0002c030 <is_result>:
{
   2c030:	b570      	push	{r4, r5, r6, lr}
   2c032:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   2c034:	2400      	movs	r4, #0
   2c036:	2c03      	cmp	r4, #3
   2c038:	d80d      	bhi.n	2c056 <is_result+0x26>
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   2c03a:	4b09      	ldr	r3, [pc, #36]	; (2c060 <is_result+0x30>)
   2c03c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2c040:	4628      	mov	r0, r5
   2c042:	f7f5 fa7b 	bl	2153c <strlen>
   2c046:	4602      	mov	r2, r0
   2c048:	4629      	mov	r1, r5
   2c04a:	4630      	mov	r0, r6
   2c04c:	f014 f90f 	bl	4026e <strncmp>
		if (!diff) {
   2c050:	b118      	cbz	r0, 2c05a <is_result+0x2a>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   2c052:	3401      	adds	r4, #1
   2c054:	e7ef      	b.n	2c036 <is_result+0x6>
	return false;
   2c056:	2000      	movs	r0, #0
}
   2c058:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   2c05a:	2001      	movs	r0, #1
   2c05c:	e7fc      	b.n	2c058 <is_result+0x28>
   2c05e:	bf00      	nop
   2c060:	00043488 	.word	0x00043488

0002c064 <at_parse_process_element>:

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2c064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c068:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2c06a:	6806      	ldr	r6, [r0, #0]

	if (is_terminated(*tmpstr)) {
   2c06c:	7833      	ldrb	r3, [r6, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c06e:	2b00      	cmp	r3, #0
   2c070:	f000 80e1 	beq.w	2c236 <at_parse_process_element+0x1d2>
   2c074:	4605      	mov	r5, r0
   2c076:	4688      	mov	r8, r1
   2c078:	4617      	mov	r7, r2
		return -1;
	}

	if (state == NOTIFICATION) {
   2c07a:	4b70      	ldr	r3, [pc, #448]	; (2c23c <at_parse_process_element+0x1d8>)
   2c07c:	781b      	ldrb	r3, [r3, #0]
   2c07e:	2b06      	cmp	r3, #6
   2c080:	d014      	beq.n	2c0ac <at_parse_process_element+0x48>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	} else if (state == COMMAND) {
   2c082:	2b07      	cmp	r3, #7
   2c084:	d02e      	beq.n	2c0e4 <at_parse_process_element+0x80>
			tmpstr += 2;
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
			tmpstr++;
		}

	} else if (state == OPTIONAL) {
   2c086:	2b08      	cmp	r3, #8
   2c088:	d04e      	beq.n	2c128 <at_parse_process_element+0xc4>
		at_params_empty_put(list, index);

	} else if (state == STRING) {
   2c08a:	2b02      	cmp	r3, #2
   2c08c:	d051      	beq.n	2c132 <at_parse_process_element+0xce>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);

		tmpstr++;
	} else if (state == QUOTED_STRING) {
   2c08e:	2b03      	cmp	r3, #3
   2c090:	d060      	beq.n	2c154 <at_parse_process_element+0xf0>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);

		tmpstr++;
	} else if (state == ARRAY) {
   2c092:	2b01      	cmp	r3, #1
   2c094:	d06e      	beq.n	2c174 <at_parse_process_element+0x110>
		}

		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));

		tmpstr++;
	} else if (state == NUMBER) {
   2c096:	2b04      	cmp	r3, #4
   2c098:	f000 80a4 	beq.w	2c1e4 <at_parse_process_element+0x180>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);

		tmpstr = next;

		at_params_int_put(list, index, value);
	} else if (state == SMS_PDU) {
   2c09c:	2b05      	cmp	r3, #5
   2c09e:	f000 80bc 	beq.w	2c21a <at_parse_process_element+0x1b6>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	} else if (state == CLAC) {
   2c0a2:	2b09      	cmp	r3, #9
   2c0a4:	f000 80bb 	beq.w	2c21e <at_parse_process_element+0x1ba>
	const char *tmpstr = *str;
   2c0a8:	4634      	mov	r4, r6
   2c0aa:	e012      	b.n	2c0d2 <at_parse_process_element+0x6e>
		const char *start_ptr = tmpstr++;
   2c0ac:	1c74      	adds	r4, r6, #1
		while (is_valid_notification_char(*tmpstr)) {
   2c0ae:	7823      	ldrb	r3, [r4, #0]
	chr = toupper((int)chr);
   2c0b0:	4a63      	ldr	r2, [pc, #396]	; (2c240 <at_parse_process_element+0x1dc>)
   2c0b2:	5c9a      	ldrb	r2, [r3, r2]
   2c0b4:	f002 0203 	and.w	r2, r2, #3
   2c0b8:	2a02      	cmp	r2, #2
   2c0ba:	d00f      	beq.n	2c0dc <at_parse_process_element+0x78>
   2c0bc:	b2db      	uxtb	r3, r3
	if ((chr >= 'A') && (chr <= 'Z')) {
   2c0be:	3b41      	subs	r3, #65	; 0x41
   2c0c0:	b2db      	uxtb	r3, r3
   2c0c2:	2b19      	cmp	r3, #25
   2c0c4:	d90c      	bls.n	2c0e0 <at_parse_process_element+0x7c>
		at_params_string_put(list, index, start_ptr,
   2c0c6:	1ba3      	subs	r3, r4, r6
   2c0c8:	4632      	mov	r2, r6
   2c0ca:	4641      	mov	r1, r8
   2c0cc:	4638      	mov	r0, r7
   2c0ce:	f012 f98f 	bl	3e3f0 <at_params_string_put>

		at_params_string_put(list, index, start_ptr,
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
   2c0d2:	602c      	str	r4, [r5, #0]
	return 0;
   2c0d4:	2000      	movs	r0, #0
}
   2c0d6:	b023      	add	sp, #140	; 0x8c
   2c0d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	chr = toupper((int)chr);
   2c0dc:	3b20      	subs	r3, #32
   2c0de:	e7ed      	b.n	2c0bc <at_parse_process_element+0x58>
			tmpstr++;
   2c0e0:	3401      	adds	r4, #1
   2c0e2:	e7e4      	b.n	2c0ae <at_parse_process_element+0x4a>
	*cmd += sizeof("AT") - 1;
   2c0e4:	1cb4      	adds	r4, r6, #2
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   2c0e6:	78b3      	ldrb	r3, [r6, #2]
	if ((chr == '\r') || (chr == '\n')) {
   2c0e8:	2b0d      	cmp	r3, #13
   2c0ea:	d005      	beq.n	2c0f8 <at_parse_process_element+0x94>
   2c0ec:	2b0a      	cmp	r3, #10
   2c0ee:	d003      	beq.n	2c0f8 <at_parse_process_element+0x94>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c0f0:	b113      	cbz	r3, 2c0f8 <at_parse_process_element+0x94>
	(*cmd)++;
   2c0f2:	1cf4      	adds	r4, r6, #3
   2c0f4:	e000      	b.n	2c0f8 <at_parse_process_element+0x94>
			tmpstr++;
   2c0f6:	3401      	adds	r4, #1
		while (is_valid_command_char(*tmpstr)) {
   2c0f8:	7822      	ldrb	r2, [r4, #0]
	if (isalpha((int)chr) || isdigit((int)chr)) {
   2c0fa:	4b51      	ldr	r3, [pc, #324]	; (2c240 <at_parse_process_element+0x1dc>)
   2c0fc:	5cd3      	ldrb	r3, [r2, r3]
   2c0fe:	f013 0f07 	tst.w	r3, #7
   2c102:	d1f8      	bne.n	2c0f6 <at_parse_process_element+0x92>
		at_params_string_put(list, index, start_ptr,
   2c104:	1ba3      	subs	r3, r4, r6
   2c106:	4632      	mov	r2, r6
   2c108:	4641      	mov	r1, r8
   2c10a:	4638      	mov	r0, r7
   2c10c:	f012 f970 	bl	3e3f0 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2c110:	7823      	ldrb	r3, [r4, #0]
   2c112:	2b3d      	cmp	r3, #61	; 0x3d
   2c114:	d003      	beq.n	2c11e <at_parse_process_element+0xba>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2c116:	2b3f      	cmp	r3, #63	; 0x3f
   2c118:	d1db      	bne.n	2c0d2 <at_parse_process_element+0x6e>
			tmpstr++;
   2c11a:	3401      	adds	r4, #1
   2c11c:	e7d9      	b.n	2c0d2 <at_parse_process_element+0x6e>
		    (*(tmpstr + 1) == AT_CMD_READ_TEST_IDENTIFIER)) {
   2c11e:	7862      	ldrb	r2, [r4, #1]
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2c120:	2a3f      	cmp	r2, #63	; 0x3f
   2c122:	d1f8      	bne.n	2c116 <at_parse_process_element+0xb2>
			tmpstr += 2;
   2c124:	3402      	adds	r4, #2
   2c126:	e7d4      	b.n	2c0d2 <at_parse_process_element+0x6e>
		at_params_empty_put(list, index);
   2c128:	4610      	mov	r0, r2
   2c12a:	f012 f92b 	bl	3e384 <at_params_empty_put>
	const char *tmpstr = *str;
   2c12e:	4634      	mov	r4, r6
   2c130:	e7cf      	b.n	2c0d2 <at_parse_process_element+0x6e>
   2c132:	4634      	mov	r4, r6
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2c134:	7823      	ldrb	r3, [r4, #0]
	if ((chr == '\r') || (chr == '\n')) {
   2c136:	2b0d      	cmp	r3, #13
   2c138:	d004      	beq.n	2c144 <at_parse_process_element+0xe0>
   2c13a:	2b0a      	cmp	r3, #10
   2c13c:	d002      	beq.n	2c144 <at_parse_process_element+0xe0>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c13e:	b10b      	cbz	r3, 2c144 <at_parse_process_element+0xe0>
			tmpstr++;
   2c140:	3401      	adds	r4, #1
   2c142:	e7f7      	b.n	2c134 <at_parse_process_element+0xd0>
		at_params_string_put(list, index, start_ptr,
   2c144:	1ba3      	subs	r3, r4, r6
   2c146:	4632      	mov	r2, r6
   2c148:	4641      	mov	r1, r8
   2c14a:	4638      	mov	r0, r7
   2c14c:	f012 f950 	bl	3e3f0 <at_params_string_put>
		tmpstr++;
   2c150:	3401      	adds	r4, #1
   2c152:	e7be      	b.n	2c0d2 <at_parse_process_element+0x6e>
	const char *tmpstr = *str;
   2c154:	4634      	mov	r4, r6
   2c156:	e000      	b.n	2c15a <at_parse_process_element+0xf6>
			tmpstr++;
   2c158:	3401      	adds	r4, #1
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2c15a:	7823      	ldrb	r3, [r4, #0]
	if (chr == '"') {
   2c15c:	2b22      	cmp	r3, #34	; 0x22
   2c15e:	d001      	beq.n	2c164 <at_parse_process_element+0x100>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c160:	2b00      	cmp	r3, #0
   2c162:	d1f9      	bne.n	2c158 <at_parse_process_element+0xf4>
		at_params_string_put(list, index, start_ptr,
   2c164:	1ba3      	subs	r3, r4, r6
   2c166:	4632      	mov	r2, r6
   2c168:	4641      	mov	r1, r8
   2c16a:	4638      	mov	r0, r7
   2c16c:	f012 f940 	bl	3e3f0 <at_params_string_put>
		tmpstr++;
   2c170:	3401      	adds	r4, #1
   2c172:	e7ae      	b.n	2c0d2 <at_parse_process_element+0x6e>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2c174:	220a      	movs	r2, #10
   2c176:	a901      	add	r1, sp, #4
   2c178:	4630      	mov	r0, r6
   2c17a:	f00e faf3 	bl	3a764 <strtoul>
   2c17e:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2c180:	9c01      	ldr	r4, [sp, #4]
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2c182:	2601      	movs	r6, #1
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2c184:	e019      	b.n	2c1ba <at_parse_process_element+0x156>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2c186:	3401      	adds	r4, #1
				tmparray[i++] =
   2c188:	f106 0901 	add.w	r9, r6, #1
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2c18c:	220a      	movs	r2, #10
   2c18e:	a901      	add	r1, sp, #4
   2c190:	4620      	mov	r0, r4
   2c192:	f00e fae7 	bl	3a764 <strtoul>
				tmparray[i++] =
   2c196:	ab22      	add	r3, sp, #136	; 0x88
   2c198:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   2c19c:	f846 0c80 	str.w	r0, [r6, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2c1a0:	4620      	mov	r0, r4
   2c1a2:	f7f5 f9cb 	bl	2153c <strlen>
   2c1a6:	4606      	mov	r6, r0
   2c1a8:	9801      	ldr	r0, [sp, #4]
   2c1aa:	f7f5 f9c7 	bl	2153c <strlen>
   2c1ae:	4286      	cmp	r6, r0
   2c1b0:	d00f      	beq.n	2c1d2 <at_parse_process_element+0x16e>
					tmpstr = next;
   2c1b2:	9c01      	ldr	r4, [sp, #4]
				tmparray[i++] =
   2c1b4:	464e      	mov	r6, r9
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2c1b6:	2e20      	cmp	r6, #32
   2c1b8:	d00c      	beq.n	2c1d4 <at_parse_process_element+0x170>
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2c1ba:	7823      	ldrb	r3, [r4, #0]
	if (chr == ')') {
   2c1bc:	2b29      	cmp	r3, #41	; 0x29
   2c1be:	d009      	beq.n	2c1d4 <at_parse_process_element+0x170>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c1c0:	b143      	cbz	r3, 2c1d4 <at_parse_process_element+0x170>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2c1c2:	2b2c      	cmp	r3, #44	; 0x2c
   2c1c4:	d0df      	beq.n	2c186 <at_parse_process_element+0x122>
   2c1c6:	2b3a      	cmp	r3, #58	; 0x3a
   2c1c8:	d0dd      	beq.n	2c186 <at_parse_process_element+0x122>
   2c1ca:	2b3d      	cmp	r3, #61	; 0x3d
   2c1cc:	d0db      	beq.n	2c186 <at_parse_process_element+0x122>
				tmpstr++;
   2c1ce:	3401      	adds	r4, #1
   2c1d0:	e7f1      	b.n	2c1b6 <at_parse_process_element+0x152>
				tmparray[i++] =
   2c1d2:	464e      	mov	r6, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2c1d4:	00b3      	lsls	r3, r6, #2
   2c1d6:	aa02      	add	r2, sp, #8
   2c1d8:	4641      	mov	r1, r8
   2c1da:	4638      	mov	r0, r7
   2c1dc:	f012 f934 	bl	3e448 <at_params_array_put>
		tmpstr++;
   2c1e0:	3401      	adds	r4, #1
   2c1e2:	e776      	b.n	2c0d2 <at_parse_process_element+0x6e>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   2c1e4:	220a      	movs	r2, #10
   2c1e6:	a902      	add	r1, sp, #8
   2c1e8:	4630      	mov	r0, r6
   2c1ea:	f00e fa37 	bl	3a65c <strtoll>
   2c1ee:	4602      	mov	r2, r0
   2c1f0:	460b      	mov	r3, r1
		tmpstr = next;
   2c1f2:	9c02      	ldr	r4, [sp, #8]
		at_params_int_put(list, index, value);
   2c1f4:	4641      	mov	r1, r8
   2c1f6:	4638      	mov	r0, r7
   2c1f8:	f012 f8df 	bl	3e3ba <at_params_int_put>
   2c1fc:	e769      	b.n	2c0d2 <at_parse_process_element+0x6e>
			tmpstr++;
   2c1fe:	3401      	adds	r4, #1
		while (isxdigit((int)*tmpstr)) {
   2c200:	7822      	ldrb	r2, [r4, #0]
   2c202:	4b0f      	ldr	r3, [pc, #60]	; (2c240 <at_parse_process_element+0x1dc>)
   2c204:	5cd3      	ldrb	r3, [r2, r3]
   2c206:	f013 0f44 	tst.w	r3, #68	; 0x44
   2c20a:	d1f8      	bne.n	2c1fe <at_parse_process_element+0x19a>
		at_params_string_put(list, index, start_ptr,
   2c20c:	1ba3      	subs	r3, r4, r6
   2c20e:	4632      	mov	r2, r6
   2c210:	4641      	mov	r1, r8
   2c212:	4638      	mov	r0, r7
   2c214:	f012 f8ec 	bl	3e3f0 <at_params_string_put>
   2c218:	e75b      	b.n	2c0d2 <at_parse_process_element+0x6e>
	const char *tmpstr = *str;
   2c21a:	4634      	mov	r4, r6
   2c21c:	e7f0      	b.n	2c200 <at_parse_process_element+0x19c>
   2c21e:	4634      	mov	r4, r6
		while (!is_terminated(*tmpstr)) {
   2c220:	7823      	ldrb	r3, [r4, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c222:	b10b      	cbz	r3, 2c228 <at_parse_process_element+0x1c4>
			tmpstr++;
   2c224:	3401      	adds	r4, #1
   2c226:	e7fb      	b.n	2c220 <at_parse_process_element+0x1bc>
		at_params_string_put(list, index, start_ptr,
   2c228:	1ba3      	subs	r3, r4, r6
   2c22a:	4632      	mov	r2, r6
   2c22c:	4641      	mov	r1, r8
   2c22e:	4638      	mov	r0, r7
   2c230:	f012 f8de 	bl	3e3f0 <at_params_string_put>
   2c234:	e74d      	b.n	2c0d2 <at_parse_process_element+0x6e>
		return -1;
   2c236:	f04f 30ff 	mov.w	r0, #4294967295
   2c23a:	e74c      	b.n	2c0d6 <at_parse_process_element+0x72>
   2c23c:	20010e02 	.word	0x20010e02
   2c240:	00045e47 	.word	0x00045e47

0002c244 <at_parse_param>:
 * Parameters cannot be null. String must be null terminated.
 */
static int at_parse_param(const char **at_params_str,
			  struct at_param_list *const list,
			  const size_t max_params)
{
   2c244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c248:	b083      	sub	sp, #12
   2c24a:	4605      	mov	r5, r0
   2c24c:	460f      	mov	r7, r1
   2c24e:	4616      	mov	r6, r2
	int index = 0;
	const char *str = *at_params_str;
   2c250:	6803      	ldr	r3, [r0, #0]
   2c252:	9301      	str	r3, [sp, #4]
	state = IDLE;
   2c254:	2400      	movs	r4, #0
   2c256:	4b43      	ldr	r3, [pc, #268]	; (2c364 <at_parse_param+0x120>)
   2c258:	701c      	strb	r4, [r3, #0]
	set_type_string = false;
   2c25a:	4b43      	ldr	r3, [pc, #268]	; (2c368 <at_parse_param+0x124>)
   2c25c:	701c      	strb	r4, [r3, #0]
	bool oversized = false;
   2c25e:	46a0      	mov	r8, r4
	int ret;

	reset_state();

	while ((!is_terminated(*str)) && (index < max_params)) {
   2c260:	9b01      	ldr	r3, [sp, #4]
   2c262:	781a      	ldrb	r2, [r3, #0]
   2c264:	2a00      	cmp	r2, #0
   2c266:	d064      	beq.n	2c332 <at_parse_param+0xee>
   2c268:	42b4      	cmp	r4, r6
   2c26a:	d262      	bcs.n	2c332 <at_parse_param+0xee>
		if (isspace((int)*str)) {
   2c26c:	493f      	ldr	r1, [pc, #252]	; (2c36c <at_parse_param+0x128>)
   2c26e:	5c52      	ldrb	r2, [r2, r1]
   2c270:	f012 0f08 	tst.w	r2, #8
   2c274:	d001      	beq.n	2c27a <at_parse_param+0x36>
			str++;
   2c276:	3301      	adds	r3, #1
   2c278:	9301      	str	r3, [sp, #4]
		}

		ret = at_parse_detect_type(&str, index);
   2c27a:	4621      	mov	r1, r4
   2c27c:	a801      	add	r0, sp, #4
   2c27e:	f7ff fddb 	bl	2be38 <at_parse_detect_type>
		if (ret == -1) {
   2c282:	f1b0 3fff 	cmp.w	r0, #4294967295
   2c286:	d054      	beq.n	2c332 <at_parse_param+0xee>
			break;
		}
		if (ret == -2) {
   2c288:	f110 0f02 	cmn.w	r0, #2
   2c28c:	d023      	beq.n	2c2d6 <at_parse_param+0x92>
			/* CLAC response */
			str = *at_params_str;
			index = 0;
		}

		if (at_parse_process_element(&str, index, list) == -1) {
   2c28e:	463a      	mov	r2, r7
   2c290:	4621      	mov	r1, r4
   2c292:	a801      	add	r0, sp, #4
   2c294:	f7ff fee6 	bl	2c064 <at_parse_process_element>
   2c298:	f1b0 3fff 	cmp.w	r0, #4294967295
   2c29c:	d049      	beq.n	2c332 <at_parse_param+0xee>
			break;
		}

		if (is_separator(*str)) {
   2c29e:	9a01      	ldr	r2, [sp, #4]
   2c2a0:	7813      	ldrb	r3, [r2, #0]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2c2a2:	2b2c      	cmp	r3, #44	; 0x2c
   2c2a4:	d003      	beq.n	2c2ae <at_parse_param+0x6a>
   2c2a6:	2b3a      	cmp	r3, #58	; 0x3a
   2c2a8:	d001      	beq.n	2c2ae <at_parse_param+0x6a>
   2c2aa:	2b3d      	cmp	r3, #61	; 0x3d
   2c2ac:	d107      	bne.n	2c2be <at_parse_param+0x7a>
			if (is_lfcr(*(str + 1))) {
   2c2ae:	7853      	ldrb	r3, [r2, #1]
	if ((chr == '\r') || (chr == '\n')) {
   2c2b0:	2b0d      	cmp	r3, #13
   2c2b2:	d014      	beq.n	2c2de <at_parse_param+0x9a>
   2c2b4:	2b0a      	cmp	r3, #10
   2c2b6:	d012      	beq.n	2c2de <at_parse_param+0x9a>
							     list) == -1) {
					break;
				}
			}

			str++;
   2c2b8:	9b01      	ldr	r3, [sp, #4]
   2c2ba:	3301      	adds	r3, #1
   2c2bc:	9301      	str	r3, [sp, #4]
		}

		/* Peek forward to see if we will be terminated */
		if (is_lfcr(*str)) {
   2c2be:	9a01      	ldr	r2, [sp, #4]
   2c2c0:	7813      	ldrb	r3, [r2, #0]
   2c2c2:	2b0d      	cmp	r3, #13
   2c2c4:	d020      	beq.n	2c308 <at_parse_param+0xc4>
   2c2c6:	2b0a      	cmp	r3, #10
   2c2c8:	d01c      	beq.n	2c304 <at_parse_param+0xc0>
				str += i;
				break;
			}
		}

		index++;
   2c2ca:	3401      	adds	r4, #1

		if (index == max_params) {
   2c2cc:	42a6      	cmp	r6, r4
   2c2ce:	d1c7      	bne.n	2c260 <at_parse_param+0x1c>
			oversized = true;
   2c2d0:	f04f 0801 	mov.w	r8, #1
   2c2d4:	e7c4      	b.n	2c260 <at_parse_param+0x1c>
			str = *at_params_str;
   2c2d6:	682b      	ldr	r3, [r5, #0]
   2c2d8:	9301      	str	r3, [sp, #4]
			index = 0;
   2c2da:	2400      	movs	r4, #0
   2c2dc:	e7d7      	b.n	2c28e <at_parse_param+0x4a>
				index++;
   2c2de:	3401      	adds	r4, #1
				if (index == max_params) {
   2c2e0:	42a6      	cmp	r6, r4
   2c2e2:	d034      	beq.n	2c34e <at_parse_param+0x10a>
				if (at_parse_detect_type(&str, index) == -1) {
   2c2e4:	4621      	mov	r1, r4
   2c2e6:	a801      	add	r0, sp, #4
   2c2e8:	f7ff fda6 	bl	2be38 <at_parse_detect_type>
   2c2ec:	f1b0 3fff 	cmp.w	r0, #4294967295
   2c2f0:	d01f      	beq.n	2c332 <at_parse_param+0xee>
				if (at_parse_process_element(&str, index,
   2c2f2:	463a      	mov	r2, r7
   2c2f4:	4621      	mov	r1, r4
   2c2f6:	a801      	add	r0, sp, #4
   2c2f8:	f7ff feb4 	bl	2c064 <at_parse_process_element>
   2c2fc:	f1b0 3fff 	cmp.w	r0, #4294967295
   2c300:	d1da      	bne.n	2c2b8 <at_parse_param+0x74>
   2c302:	e016      	b.n	2c332 <at_parse_param+0xee>
   2c304:	2300      	movs	r3, #0
   2c306:	e000      	b.n	2c30a <at_parse_param+0xc6>
   2c308:	2300      	movs	r3, #0
			while (is_lfcr(str[++i])) {
   2c30a:	3301      	adds	r3, #1
   2c30c:	4699      	mov	r9, r3
   2c30e:	18d0      	adds	r0, r2, r3
   2c310:	5cd1      	ldrb	r1, [r2, r3]
   2c312:	290d      	cmp	r1, #13
   2c314:	d0f9      	beq.n	2c30a <at_parse_param+0xc6>
   2c316:	290a      	cmp	r1, #10
   2c318:	d0f7      	beq.n	2c30a <at_parse_param+0xc6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c31a:	b139      	cbz	r1, 2c32c <at_parse_param+0xe8>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2c31c:	292b      	cmp	r1, #43	; 0x2b
   2c31e:	d005      	beq.n	2c32c <at_parse_param+0xe8>
   2c320:	2925      	cmp	r1, #37	; 0x25
   2c322:	d003      	beq.n	2c32c <at_parse_param+0xe8>
			    is_result(str + i)) {
   2c324:	f7ff fe84 	bl	2c030 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   2c328:	2800      	cmp	r0, #0
   2c32a:	d0ce      	beq.n	2c2ca <at_parse_param+0x86>
				str += i;
   2c32c:	9b01      	ldr	r3, [sp, #4]
   2c32e:	444b      	add	r3, r9
   2c330:	9301      	str	r3, [sp, #4]
		}
	}

	*at_params_str = str;
   2c332:	9801      	ldr	r0, [sp, #4]
   2c334:	6028      	str	r0, [r5, #0]

	if (oversized) {
   2c336:	f1b8 0f00 	cmp.w	r8, #0
   2c33a:	d10b      	bne.n	2c354 <at_parse_param+0x110>
		return -E2BIG;
	}

	if (!is_terminated(*str) && !is_result(str)) {
   2c33c:	7803      	ldrb	r3, [r0, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2c33e:	b163      	cbz	r3, 2c35a <at_parse_param+0x116>
   2c340:	f7ff fe76 	bl	2c030 <is_result>
   2c344:	b158      	cbz	r0, 2c35e <at_parse_param+0x11a>
		return -EAGAIN;
	}

	return 0;
   2c346:	2000      	movs	r0, #0
}
   2c348:	b003      	add	sp, #12
   2c34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					oversized = true;
   2c34e:	f04f 0801 	mov.w	r8, #1
   2c352:	e7ee      	b.n	2c332 <at_parse_param+0xee>
		return -E2BIG;
   2c354:	f06f 0006 	mvn.w	r0, #6
   2c358:	e7f6      	b.n	2c348 <at_parse_param+0x104>
	return 0;
   2c35a:	2000      	movs	r0, #0
   2c35c:	e7f4      	b.n	2c348 <at_parse_param+0x104>
		return -EAGAIN;
   2c35e:	f06f 000a 	mvn.w	r0, #10
   2c362:	e7f1      	b.n	2c348 <at_parse_param+0x104>
   2c364:	20010e02 	.word	0x20010e02
   2c368:	20010e01 	.word	0x20010e01
   2c36c:	00045e47 	.word	0x00045e47

0002c370 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2c370:	b570      	push	{r4, r5, r6, lr}
   2c372:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2c374:	4605      	mov	r5, r0
   2c376:	b130      	cbz	r0, 2c386 <at_params_get+0x16>

	if (index >= list->param_count) {
   2c378:	682b      	ldr	r3, [r5, #0]
   2c37a:	42a3      	cmp	r3, r4
   2c37c:	d90e      	bls.n	2c39c <at_params_get+0x2c>
		return NULL;
	}

	struct at_param *param = list->params;
   2c37e:	6868      	ldr	r0, [r5, #4]

	return &param[index];
   2c380:	eb00 1004 	add.w	r0, r0, r4, lsl #4
}
   2c384:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2c386:	4e06      	ldr	r6, [pc, #24]	; (2c3a0 <at_params_get+0x30>)
   2c388:	222b      	movs	r2, #43	; 0x2b
   2c38a:	4631      	mov	r1, r6
   2c38c:	4805      	ldr	r0, [pc, #20]	; (2c3a4 <at_params_get+0x34>)
   2c38e:	f00f fbd3 	bl	3bb38 <printk>
   2c392:	212b      	movs	r1, #43	; 0x2b
   2c394:	4630      	mov	r0, r6
   2c396:	f00f fe23 	bl	3bfe0 <assert_post_action>
   2c39a:	e7ed      	b.n	2c378 <at_params_get+0x8>
		return NULL;
   2c39c:	2000      	movs	r0, #0
   2c39e:	e7f1      	b.n	2c384 <at_params_get+0x14>
   2c3a0:	00043498 	.word	0x00043498
   2c3a4:	00041c84 	.word	0x00041c84

0002c3a8 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2c3a8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2c3aa:	4604      	mov	r4, r0
   2c3ac:	b140      	cbz	r0, 2c3c0 <at_param_size+0x18>

	if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2c3ae:	7823      	ldrb	r3, [r4, #0]
   2c3b0:	2b01      	cmp	r3, #1
   2c3b2:	d012      	beq.n	2c3da <at_param_size+0x32>
		return sizeof(uint64_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2c3b4:	3b02      	subs	r3, #2
   2c3b6:	b2db      	uxtb	r3, r3
   2c3b8:	2b01      	cmp	r3, #1
   2c3ba:	d90c      	bls.n	2c3d6 <at_param_size+0x2e>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
	}

	return 0;
   2c3bc:	2000      	movs	r0, #0
}
   2c3be:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2c3c0:	4d07      	ldr	r5, [pc, #28]	; (2c3e0 <at_param_size+0x38>)
   2c3c2:	2239      	movs	r2, #57	; 0x39
   2c3c4:	4629      	mov	r1, r5
   2c3c6:	4807      	ldr	r0, [pc, #28]	; (2c3e4 <at_param_size+0x3c>)
   2c3c8:	f00f fbb6 	bl	3bb38 <printk>
   2c3cc:	2139      	movs	r1, #57	; 0x39
   2c3ce:	4628      	mov	r0, r5
   2c3d0:	f00f fe06 	bl	3bfe0 <assert_post_action>
   2c3d4:	e7eb      	b.n	2c3ae <at_param_size+0x6>
		return param->size;
   2c3d6:	6860      	ldr	r0, [r4, #4]
   2c3d8:	e7f1      	b.n	2c3be <at_param_size+0x16>
		return sizeof(uint64_t);
   2c3da:	2008      	movs	r0, #8
   2c3dc:	e7ef      	b.n	2c3be <at_param_size+0x16>
   2c3de:	bf00      	nop
   2c3e0:	00043498 	.word	0x00043498
   2c3e4:	00041c84 	.word	0x00041c84

0002c3e8 <at_param_clear>:
{
   2c3e8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2c3ea:	4604      	mov	r4, r0
   2c3ec:	b148      	cbz	r0, 2c402 <at_param_clear+0x1a>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2c3ee:	7823      	ldrb	r3, [r4, #0]
   2c3f0:	3b02      	subs	r3, #2
   2c3f2:	b2db      	uxtb	r3, r3
   2c3f4:	2b01      	cmp	r3, #1
   2c3f6:	d90f      	bls.n	2c418 <at_param_clear+0x30>
	param->value.int_val = 0;
   2c3f8:	2200      	movs	r2, #0
   2c3fa:	2300      	movs	r3, #0
   2c3fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   2c400:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2c402:	4d07      	ldr	r5, [pc, #28]	; (2c420 <at_param_clear+0x38>)
   2c404:	221d      	movs	r2, #29
   2c406:	4629      	mov	r1, r5
   2c408:	4806      	ldr	r0, [pc, #24]	; (2c424 <at_param_clear+0x3c>)
   2c40a:	f00f fb95 	bl	3bb38 <printk>
   2c40e:	211d      	movs	r1, #29
   2c410:	4628      	mov	r0, r5
   2c412:	f00f fde5 	bl	3bfe0 <assert_post_action>
   2c416:	e7ea      	b.n	2c3ee <at_param_clear+0x6>
		k_free(param->value.str_val);
   2c418:	68a0      	ldr	r0, [r4, #8]
   2c41a:	f013 fd25 	bl	3fe68 <k_free>
   2c41e:	e7eb      	b.n	2c3f8 <at_param_clear+0x10>
   2c420:	00043498 	.word	0x00043498
   2c424:	00041c84 	.word	0x00041c84

0002c428 <at_param_init>:
{
   2c428:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2c42a:	4604      	mov	r4, r0
   2c42c:	b128      	cbz	r0, 2c43a <at_param_init+0x12>
__ssp_bos_icheck3(memset, void *, int)
   2c42e:	2300      	movs	r3, #0
   2c430:	6023      	str	r3, [r4, #0]
   2c432:	6063      	str	r3, [r4, #4]
   2c434:	60a3      	str	r3, [r4, #8]
   2c436:	60e3      	str	r3, [r4, #12]
}
   2c438:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2c43a:	4d05      	ldr	r5, [pc, #20]	; (2c450 <at_param_init+0x28>)
   2c43c:	2214      	movs	r2, #20
   2c43e:	4629      	mov	r1, r5
   2c440:	4804      	ldr	r0, [pc, #16]	; (2c454 <at_param_init+0x2c>)
   2c442:	f00f fb79 	bl	3bb38 <printk>
   2c446:	2114      	movs	r1, #20
   2c448:	4628      	mov	r0, r5
   2c44a:	f00f fdc9 	bl	3bfe0 <assert_post_action>
   2c44e:	e7ee      	b.n	2c42e <at_param_init+0x6>
   2c450:	00043498 	.word	0x00043498
   2c454:	00041c84 	.word	0x00041c84

0002c458 <at_handler_cscon>:
		event_handler_list_dispatch(&evt);
	}
}

static void at_handler_cscon(const char *response)
{
   2c458:	b530      	push	{r4, r5, lr}
   2c45a:	b091      	sub	sp, #68	; 0x44
   2c45c:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   2c45e:	2240      	movs	r2, #64	; 0x40
   2c460:	2100      	movs	r1, #0
   2c462:	4668      	mov	r0, sp
   2c464:	f013 fd6c 	bl	3ff40 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2c468:	b174      	cbz	r4, 2c488 <at_handler_cscon+0x30>

	LOG_DBG("+CSCON notification");

	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   2c46a:	2201      	movs	r2, #1
   2c46c:	a902      	add	r1, sp, #8
   2c46e:	4620      	mov	r0, r4
   2c470:	f001 fa7a 	bl	2d968 <parse_rrc_mode>
	if (err) {
   2c474:	4602      	mov	r2, r0
   2c476:	b9a0      	cbnz	r0, 2c4a2 <at_handler_cscon+0x4a>
		LTE_LC_TRACE(LTE_LC_TRACE_RRC_IDLE);
	} else if (evt.rrc_mode == LTE_LC_RRC_MODE_CONNECTED) {
		LTE_LC_TRACE(LTE_LC_TRACE_RRC_CONNECTED);
	}

	evt.type = LTE_LC_EVT_RRC_UPDATE;
   2c478:	2303      	movs	r3, #3
   2c47a:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   2c47e:	4668      	mov	r0, sp
   2c480:	f001 f82c 	bl	2d4dc <event_handler_list_dispatch>
}
   2c484:	b011      	add	sp, #68	; 0x44
   2c486:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(response != NULL);
   2c488:	4d0e      	ldr	r5, [pc, #56]	; (2c4c4 <at_handler_cscon+0x6c>)
   2c48a:	f44f 7293 	mov.w	r2, #294	; 0x126
   2c48e:	4629      	mov	r1, r5
   2c490:	480d      	ldr	r0, [pc, #52]	; (2c4c8 <at_handler_cscon+0x70>)
   2c492:	f00f fb51 	bl	3bb38 <printk>
   2c496:	f44f 7193 	mov.w	r1, #294	; 0x126
   2c49a:	4628      	mov	r0, r5
   2c49c:	f00f fda0 	bl	3bfe0 <assert_post_action>
   2c4a0:	e7e3      	b.n	2c46a <at_handler_cscon+0x12>
   2c4a2:	4b0a      	ldr	r3, [pc, #40]	; (2c4cc <at_handler_cscon+0x74>)
   2c4a4:	490a      	ldr	r1, [pc, #40]	; (2c4d0 <at_handler_cscon+0x78>)
   2c4a6:	1a5b      	subs	r3, r3, r1
   2c4a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   2c4aa:	f04f 0000 	mov.w	r0, #0
   2c4ae:	2101      	movs	r1, #1
   2c4b0:	f361 0002 	bfi	r0, r1, #0, #3
   2c4b4:	f36f 00c5 	bfc	r0, #3, #3
   2c4b8:	f363 108f 	bfi	r0, r3, #6, #10
   2c4bc:	4905      	ldr	r1, [pc, #20]	; (2c4d4 <at_handler_cscon+0x7c>)
   2c4be:	f00f fdc3 	bl	3c048 <log_string_sync>
		return;
   2c4c2:	e7df      	b.n	2c484 <at_handler_cscon+0x2c>
   2c4c4:	000434c8 	.word	0x000434c8
   2c4c8:	00041c84 	.word	0x00041c84
   2c4cc:	000412a0 	.word	0x000412a0
   2c4d0:	00041200 	.word	0x00041200
   2c4d4:	000434f8 	.word	0x000434f8

0002c4d8 <at_handler_cedrxp>:

static void at_handler_cedrxp(const char *response)
{
   2c4d8:	b530      	push	{r4, r5, lr}
   2c4da:	b091      	sub	sp, #68	; 0x44
   2c4dc:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   2c4de:	2240      	movs	r2, #64	; 0x40
   2c4e0:	2100      	movs	r1, #0
   2c4e2:	4668      	mov	r0, sp
   2c4e4:	f013 fd2c 	bl	3ff40 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2c4e8:	b16c      	cbz	r4, 2c506 <at_handler_cedrxp+0x2e>

	LOG_DBG("+CEDRXP notification");

	err = parse_edrx(response, &evt.edrx_cfg);
   2c4ea:	a902      	add	r1, sp, #8
   2c4ec:	4620      	mov	r0, r4
   2c4ee:	f001 f84f 	bl	2d590 <parse_edrx>
	if (err) {
   2c4f2:	4602      	mov	r2, r0
   2c4f4:	b9a0      	cbnz	r0, 2c520 <at_handler_cedrxp+0x48>
		LOG_ERR("Can't parse eDRX, error: %d", err);
		return;
	}

	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   2c4f6:	2302      	movs	r3, #2
   2c4f8:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   2c4fc:	4668      	mov	r0, sp
   2c4fe:	f000 ffed 	bl	2d4dc <event_handler_list_dispatch>
}
   2c502:	b011      	add	sp, #68	; 0x44
   2c504:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(response != NULL);
   2c506:	4d0f      	ldr	r5, [pc, #60]	; (2c544 <at_handler_cedrxp+0x6c>)
   2c508:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2c50c:	4629      	mov	r1, r5
   2c50e:	480e      	ldr	r0, [pc, #56]	; (2c548 <at_handler_cedrxp+0x70>)
   2c510:	f00f fb12 	bl	3bb38 <printk>
   2c514:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2c518:	4628      	mov	r0, r5
   2c51a:	f00f fd61 	bl	3bfe0 <assert_post_action>
   2c51e:	e7e4      	b.n	2c4ea <at_handler_cedrxp+0x12>
   2c520:	4b0a      	ldr	r3, [pc, #40]	; (2c54c <at_handler_cedrxp+0x74>)
   2c522:	490b      	ldr	r1, [pc, #44]	; (2c550 <at_handler_cedrxp+0x78>)
   2c524:	1a5b      	subs	r3, r3, r1
   2c526:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse eDRX, error: %d", err);
   2c528:	f04f 0000 	mov.w	r0, #0
   2c52c:	2101      	movs	r1, #1
   2c52e:	f361 0002 	bfi	r0, r1, #0, #3
   2c532:	f36f 00c5 	bfc	r0, #3, #3
   2c536:	f363 108f 	bfi	r0, r3, #6, #10
   2c53a:	4906      	ldr	r1, [pc, #24]	; (2c554 <at_handler_cedrxp+0x7c>)
   2c53c:	f00f fd84 	bl	3c048 <log_string_sync>
		return;
   2c540:	e7df      	b.n	2c502 <at_handler_cedrxp+0x2a>
   2c542:	bf00      	nop
   2c544:	000434c8 	.word	0x000434c8
   2c548:	00041c84 	.word	0x00041c84
   2c54c:	000412a0 	.word	0x000412a0
   2c550:	00041200 	.word	0x00041200
   2c554:	00043520 	.word	0x00043520

0002c558 <at_handler_xt3412>:

static void at_handler_xt3412(const char *response)
{
   2c558:	b530      	push	{r4, r5, lr}
   2c55a:	b091      	sub	sp, #68	; 0x44
   2c55c:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   2c55e:	2240      	movs	r2, #64	; 0x40
   2c560:	2100      	movs	r1, #0
   2c562:	4668      	mov	r0, sp
   2c564:	f013 fcec 	bl	3ff40 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2c568:	b184      	cbz	r4, 2c58c <at_handler_xt3412+0x34>

	LOG_DBG("%%XT3412 notification");

	err = parse_xt3412(response, &evt.time);
   2c56a:	a902      	add	r1, sp, #8
   2c56c:	4620      	mov	r0, r4
   2c56e:	f001 fb9d 	bl	2dcac <parse_xt3412>
	if (err) {
   2c572:	4602      	mov	r2, r0
   2c574:	b9b8      	cbnz	r0, 2c5a6 <at_handler_xt3412+0x4e>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
		return;
	}

	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   2c576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2c57a:	f241 3288 	movw	r2, #5000	; 0x1388
   2c57e:	2300      	movs	r3, #0
   2c580:	4299      	cmp	r1, r3
   2c582:	bf08      	it	eq
   2c584:	4290      	cmpeq	r0, r2
   2c586:	d01f      	beq.n	2c5c8 <at_handler_xt3412+0x70>
	}

	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;

	event_handler_list_dispatch(&evt);
}
   2c588:	b011      	add	sp, #68	; 0x44
   2c58a:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(response != NULL);
   2c58c:	4d12      	ldr	r5, [pc, #72]	; (2c5d8 <at_handler_xt3412+0x80>)
   2c58e:	f44f 72aa 	mov.w	r2, #340	; 0x154
   2c592:	4629      	mov	r1, r5
   2c594:	4811      	ldr	r0, [pc, #68]	; (2c5dc <at_handler_xt3412+0x84>)
   2c596:	f00f facf 	bl	3bb38 <printk>
   2c59a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   2c59e:	4628      	mov	r0, r5
   2c5a0:	f00f fd1e 	bl	3bfe0 <assert_post_action>
   2c5a4:	e7e1      	b.n	2c56a <at_handler_xt3412+0x12>
   2c5a6:	4b0e      	ldr	r3, [pc, #56]	; (2c5e0 <at_handler_xt3412+0x88>)
   2c5a8:	490e      	ldr	r1, [pc, #56]	; (2c5e4 <at_handler_xt3412+0x8c>)
   2c5aa:	1a5b      	subs	r3, r3, r1
   2c5ac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   2c5ae:	f04f 0000 	mov.w	r0, #0
   2c5b2:	2101      	movs	r1, #1
   2c5b4:	f361 0002 	bfi	r0, r1, #0, #3
   2c5b8:	f36f 00c5 	bfc	r0, #3, #3
   2c5bc:	f363 108f 	bfi	r0, r3, #6, #10
   2c5c0:	4909      	ldr	r1, [pc, #36]	; (2c5e8 <at_handler_xt3412+0x90>)
   2c5c2:	f00f fd41 	bl	3c048 <log_string_sync>
		return;
   2c5c6:	e7df      	b.n	2c588 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   2c5c8:	2306      	movs	r3, #6
   2c5ca:	f88d 3000 	strb.w	r3, [sp]
	event_handler_list_dispatch(&evt);
   2c5ce:	4668      	mov	r0, sp
   2c5d0:	f000 ff84 	bl	2d4dc <event_handler_list_dispatch>
   2c5d4:	e7d8      	b.n	2c588 <at_handler_xt3412+0x30>
   2c5d6:	bf00      	nop
   2c5d8:	000434c8 	.word	0x000434c8
   2c5dc:	00041c84 	.word	0x00041c84
   2c5e0:	000412a0 	.word	0x000412a0
   2c5e4:	00041200 	.word	0x00041200
   2c5e8:	0004353c 	.word	0x0004353c

0002c5ec <at_handler_ncellmeas>:

static void at_handler_ncellmeas(const char *response)
{
   2c5ec:	b570      	push	{r4, r5, r6, lr}
   2c5ee:	b090      	sub	sp, #64	; 0x40
   2c5f0:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   2c5f2:	2240      	movs	r2, #64	; 0x40
   2c5f4:	2100      	movs	r1, #0
   2c5f6:	4668      	mov	r0, sp
   2c5f8:	f013 fca2 	bl	3ff40 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2c5fc:	b1ec      	cbz	r4, 2c63a <at_handler_ncellmeas+0x4e>

	int ncell_count = neighborcell_count_get(response);
   2c5fe:	4620      	mov	r0, r4
   2c600:	f001 fbde 	bl	2ddc0 <neighborcell_count_get>
   2c604:	4605      	mov	r5, r0
	struct lte_lc_ncell *neighbor_cells = NULL;

	LOG_DBG("%%NCELLMEAS notification");
	LOG_DBG("Neighbor cell count: %d", ncell_count);

	if (event_handler_list_is_empty()) {
   2c606:	f000 ff27 	bl	2d458 <event_handler_list_is_empty>
   2c60a:	2800      	cmp	r0, #0
   2c60c:	d139      	bne.n	2c682 <at_handler_ncellmeas+0x96>
		 * to receive the parsed data.
		 */
		return;
	}

	if (ncell_count != 0) {
   2c60e:	b30d      	cbz	r5, 2c654 <at_handler_ncellmeas+0x68>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   2c610:	2110      	movs	r1, #16
   2c612:	4628      	mov	r0, r5
   2c614:	f013 fc37 	bl	3fe86 <k_calloc>
		if (neighbor_cells == NULL) {
   2c618:	4605      	mov	r5, r0
   2c61a:	b9e0      	cbnz	r0, 2c656 <at_handler_ncellmeas+0x6a>
   2c61c:	4b31      	ldr	r3, [pc, #196]	; (2c6e4 <at_handler_ncellmeas+0xf8>)
   2c61e:	4a32      	ldr	r2, [pc, #200]	; (2c6e8 <at_handler_ncellmeas+0xfc>)
   2c620:	1a9b      	subs	r3, r3, r2
   2c622:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to allocate memory for neighbor cells");
   2c624:	2201      	movs	r2, #1
   2c626:	f362 0002 	bfi	r0, r2, #0, #3
   2c62a:	f36f 00c5 	bfc	r0, #3, #3
   2c62e:	f363 108f 	bfi	r0, r3, #6, #10
   2c632:	492e      	ldr	r1, [pc, #184]	; (2c6ec <at_handler_ncellmeas+0x100>)
   2c634:	f00f fd08 	bl	3c048 <log_string_sync>
			return;
   2c638:	e023      	b.n	2c682 <at_handler_ncellmeas+0x96>
	__ASSERT_NO_MSG(response != NULL);
   2c63a:	4d2d      	ldr	r5, [pc, #180]	; (2c6f0 <at_handler_ncellmeas+0x104>)
   2c63c:	f240 126f 	movw	r2, #367	; 0x16f
   2c640:	4629      	mov	r1, r5
   2c642:	482c      	ldr	r0, [pc, #176]	; (2c6f4 <at_handler_ncellmeas+0x108>)
   2c644:	f00f fa78 	bl	3bb38 <printk>
   2c648:	f240 116f 	movw	r1, #367	; 0x16f
   2c64c:	4628      	mov	r0, r5
   2c64e:	f00f fcc7 	bl	3bfe0 <assert_post_action>
   2c652:	e7d4      	b.n	2c5fe <at_handler_ncellmeas+0x12>
	struct lte_lc_ncell *neighbor_cells = NULL;
   2c654:	2500      	movs	r5, #0
		}
	}

	evt.cells_info.neighbor_cells = neighbor_cells;
   2c656:	950f      	str	r5, [sp, #60]	; 0x3c

	err = parse_ncellmeas(response, &evt.cells_info);
   2c658:	a902      	add	r1, sp, #8
   2c65a:	4620      	mov	r0, r4
   2c65c:	f001 fbd8 	bl	2de10 <parse_ncellmeas>
   2c660:	4602      	mov	r2, r0

	switch (err) {
   2c662:	f110 0f07 	cmn.w	r0, #7
   2c666:	d00e      	beq.n	2c686 <at_handler_ncellmeas+0x9a>
   2c668:	db2a      	blt.n	2c6c0 <at_handler_ncellmeas+0xd4>
   2c66a:	2801      	cmp	r0, #1
   2c66c:	d828      	bhi.n	2c6c0 <at_handler_ncellmeas+0xd4>
		LOG_WRN("More cells than the configured max count of %d were found",
			CONFIG_LTE_NEIGHBOR_CELLS_MAX);
		/* Fall through */
	case 0: /* Fall through */
	case 1:
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   2c66e:	2307      	movs	r3, #7
   2c670:	f88d 3000 	strb.w	r3, [sp]
		event_handler_list_dispatch(&evt);
   2c674:	4668      	mov	r0, sp
   2c676:	f000 ff31 	bl	2d4dc <event_handler_list_dispatch>
	default:
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
		break;
	}

	if (neighbor_cells) {
   2c67a:	b115      	cbz	r5, 2c682 <at_handler_ncellmeas+0x96>
		k_free(neighbor_cells);
   2c67c:	4628      	mov	r0, r5
   2c67e:	f013 fbf3 	bl	3fe68 <k_free>
	}
}
   2c682:	b010      	add	sp, #64	; 0x40
   2c684:	bd70      	pop	{r4, r5, r6, pc}
   2c686:	4c17      	ldr	r4, [pc, #92]	; (2c6e4 <at_handler_ncellmeas+0xf8>)
   2c688:	4b17      	ldr	r3, [pc, #92]	; (2c6e8 <at_handler_ncellmeas+0xfc>)
   2c68a:	1ae4      	subs	r4, r4, r3
   2c68c:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("Not all neighbor cells could be parsed");
   2c68e:	2602      	movs	r6, #2
   2c690:	f04f 0000 	mov.w	r0, #0
   2c694:	f366 0002 	bfi	r0, r6, #0, #3
   2c698:	f36f 00c5 	bfc	r0, #3, #3
   2c69c:	f364 108f 	bfi	r0, r4, #6, #10
   2c6a0:	4915      	ldr	r1, [pc, #84]	; (2c6f8 <at_handler_ncellmeas+0x10c>)
   2c6a2:	f00f fcd1 	bl	3c048 <log_string_sync>
		LOG_WRN("More cells than the configured max count of %d were found",
   2c6a6:	f04f 0000 	mov.w	r0, #0
   2c6aa:	f366 0002 	bfi	r0, r6, #0, #3
   2c6ae:	f36f 00c5 	bfc	r0, #3, #3
   2c6b2:	f364 108f 	bfi	r0, r4, #6, #10
   2c6b6:	220a      	movs	r2, #10
   2c6b8:	4910      	ldr	r1, [pc, #64]	; (2c6fc <at_handler_ncellmeas+0x110>)
   2c6ba:	f00f fcc5 	bl	3c048 <log_string_sync>
   2c6be:	e7d6      	b.n	2c66e <at_handler_ncellmeas+0x82>
   2c6c0:	4b08      	ldr	r3, [pc, #32]	; (2c6e4 <at_handler_ncellmeas+0xf8>)
   2c6c2:	4909      	ldr	r1, [pc, #36]	; (2c6e8 <at_handler_ncellmeas+0xfc>)
   2c6c4:	1a5b      	subs	r3, r3, r1
   2c6c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   2c6c8:	f04f 0000 	mov.w	r0, #0
   2c6cc:	2101      	movs	r1, #1
   2c6ce:	f361 0002 	bfi	r0, r1, #0, #3
   2c6d2:	f36f 00c5 	bfc	r0, #3, #3
   2c6d6:	f363 108f 	bfi	r0, r3, #6, #10
   2c6da:	4909      	ldr	r1, [pc, #36]	; (2c700 <at_handler_ncellmeas+0x114>)
   2c6dc:	f00f fcb4 	bl	3c048 <log_string_sync>
   2c6e0:	e7cb      	b.n	2c67a <at_handler_ncellmeas+0x8e>
   2c6e2:	bf00      	nop
   2c6e4:	000412a0 	.word	0x000412a0
   2c6e8:	00041200 	.word	0x00041200
   2c6ec:	00043570 	.word	0x00043570
   2c6f0:	000434c8 	.word	0x000434c8
   2c6f4:	00041c84 	.word	0x00041c84
   2c6f8:	000435a0 	.word	0x000435a0
   2c6fc:	000435c8 	.word	0x000435c8
   2c700:	00043604 	.word	0x00043604

0002c704 <at_handler_xmodemsleep>:

static void at_handler_xmodemsleep(const char *response)
{
   2c704:	b530      	push	{r4, r5, lr}
   2c706:	b091      	sub	sp, #68	; 0x44
   2c708:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   2c70a:	2240      	movs	r2, #64	; 0x40
   2c70c:	2100      	movs	r1, #0
   2c70e:	4668      	mov	r0, sp
   2c710:	f013 fc16 	bl	3ff40 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2c714:	b1e4      	cbz	r4, 2c750 <at_handler_xmodemsleep+0x4c>

	LOG_DBG("%%XMODEMSLEEP notification");

	err = parse_xmodemsleep(response, &evt.modem_sleep);
   2c716:	a902      	add	r1, sp, #8
   2c718:	4620      	mov	r0, r4
   2c71a:	f001 fcfd 	bl	2e118 <parse_xmodemsleep>
	if (err) {
   2c71e:	4602      	mov	r2, r0
   2c720:	bb18      	cbnz	r0, 2c76a <at_handler_xmodemsleep+0x66>
	}

	/* Link controller only supports PSM, RF inactivity and flight mode
	 * modem sleep types.
	 */
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   2c722:	f89d 2008 	ldrb.w	r2, [sp, #8]
   2c726:	1e53      	subs	r3, r2, #1
   2c728:	b2db      	uxtb	r3, r3
   2c72a:	2b01      	cmp	r3, #1
   2c72c:	d901      	bls.n	2c732 <at_handler_xmodemsleep+0x2e>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   2c72e:	2a04      	cmp	r2, #4
   2c730:	d132      	bne.n	2c798 <at_handler_xmodemsleep+0x94>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_FLIGHT_MODE)) {
		return;
	}

	/* Propagate the appropriate event depending on the parsed time parameter. */
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   2c732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2c736:	f241 3088 	movw	r0, #5000	; 0x1388
   2c73a:	2100      	movs	r1, #0
   2c73c:	428b      	cmp	r3, r1
   2c73e:	bf08      	it	eq
   2c740:	4282      	cmpeq	r2, r0
   2c742:	d023      	beq.n	2c78c <at_handler_xmodemsleep+0x88>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
	} else if (evt.modem_sleep.time == 0) {
   2c744:	4313      	orrs	r3, r2
   2c746:	d129      	bne.n	2c79c <at_handler_xmodemsleep+0x98>
		LTE_LC_TRACE(LTE_LC_TRACE_MODEM_SLEEP_EXIT);

		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   2c748:	2309      	movs	r3, #9
   2c74a:	f88d 3000 	strb.w	r3, [sp]
   2c74e:	e020      	b.n	2c792 <at_handler_xmodemsleep+0x8e>
	__ASSERT_NO_MSG(response != NULL);
   2c750:	4d14      	ldr	r5, [pc, #80]	; (2c7a4 <at_handler_xmodemsleep+0xa0>)
   2c752:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   2c756:	4629      	mov	r1, r5
   2c758:	4813      	ldr	r0, [pc, #76]	; (2c7a8 <at_handler_xmodemsleep+0xa4>)
   2c75a:	f00f f9ed 	bl	3bb38 <printk>
   2c75e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   2c762:	4628      	mov	r0, r5
   2c764:	f00f fc3c 	bl	3bfe0 <assert_post_action>
   2c768:	e7d5      	b.n	2c716 <at_handler_xmodemsleep+0x12>
   2c76a:	4b10      	ldr	r3, [pc, #64]	; (2c7ac <at_handler_xmodemsleep+0xa8>)
   2c76c:	4910      	ldr	r1, [pc, #64]	; (2c7b0 <at_handler_xmodemsleep+0xac>)
   2c76e:	1a5b      	subs	r3, r3, r1
   2c770:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   2c772:	f04f 0000 	mov.w	r0, #0
   2c776:	2101      	movs	r1, #1
   2c778:	f361 0002 	bfi	r0, r1, #0, #3
   2c77c:	f36f 00c5 	bfc	r0, #3, #3
   2c780:	f363 108f 	bfi	r0, r3, #6, #10
   2c784:	490b      	ldr	r1, [pc, #44]	; (2c7b4 <at_handler_xmodemsleep+0xb0>)
   2c786:	f00f fc5f 	bl	3c048 <log_string_sync>
		return;
   2c78a:	e005      	b.n	2c798 <at_handler_xmodemsleep+0x94>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   2c78c:	2308      	movs	r3, #8
   2c78e:	f88d 3000 	strb.w	r3, [sp]
		LTE_LC_TRACE(LTE_LC_TRACE_MODEM_SLEEP_ENTER);

		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
	}

	event_handler_list_dispatch(&evt);
   2c792:	4668      	mov	r0, sp
   2c794:	f000 fea2 	bl	2d4dc <event_handler_list_dispatch>
}
   2c798:	b011      	add	sp, #68	; 0x44
   2c79a:	bd30      	pop	{r4, r5, pc}
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   2c79c:	230a      	movs	r3, #10
   2c79e:	f88d 3000 	strb.w	r3, [sp]
   2c7a2:	e7f6      	b.n	2c792 <at_handler_xmodemsleep+0x8e>
   2c7a4:	000434c8 	.word	0x000434c8
   2c7a8:	00041c84 	.word	0x00041c84
   2c7ac:	000412a0 	.word	0x000412a0
   2c7b0:	00041200 	.word	0x00041200
   2c7b4:	00043630 	.word	0x00043630

0002c7b8 <at_handler_mdmev>:

static void at_handler_mdmev(const char *response)
{
   2c7b8:	b530      	push	{r4, r5, lr}
   2c7ba:	b091      	sub	sp, #68	; 0x44
   2c7bc:	4604      	mov	r4, r0
	int err;
	struct lte_lc_evt evt = {0};
   2c7be:	2240      	movs	r2, #64	; 0x40
   2c7c0:	2100      	movs	r1, #0
   2c7c2:	4668      	mov	r0, sp
   2c7c4:	f013 fbbc 	bl	3ff40 <memset>

	__ASSERT_NO_MSG(response != NULL);
   2c7c8:	b16c      	cbz	r4, 2c7e6 <at_handler_mdmev+0x2e>

	LOG_DBG("%%MDMEV notification");

	err = parse_mdmev(response, &evt.modem_evt);
   2c7ca:	a902      	add	r1, sp, #8
   2c7cc:	4620      	mov	r0, r4
   2c7ce:	f001 fd3b 	bl	2e248 <parse_mdmev>
	if (err) {
   2c7d2:	4602      	mov	r2, r0
   2c7d4:	b9a0      	cbnz	r0, 2c800 <at_handler_mdmev+0x48>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
		return;
	}

	evt.type = LTE_LC_EVT_MODEM_EVENT;
   2c7d6:	230b      	movs	r3, #11
   2c7d8:	f88d 3000 	strb.w	r3, [sp]

	event_handler_list_dispatch(&evt);
   2c7dc:	4668      	mov	r0, sp
   2c7de:	f000 fe7d 	bl	2d4dc <event_handler_list_dispatch>
}
   2c7e2:	b011      	add	sp, #68	; 0x44
   2c7e4:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(response != NULL);
   2c7e6:	4d0f      	ldr	r5, [pc, #60]	; (2c824 <at_handler_mdmev+0x6c>)
   2c7e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
   2c7ec:	4629      	mov	r1, r5
   2c7ee:	480e      	ldr	r0, [pc, #56]	; (2c828 <at_handler_mdmev+0x70>)
   2c7f0:	f00f f9a2 	bl	3bb38 <printk>
   2c7f4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   2c7f8:	4628      	mov	r0, r5
   2c7fa:	f00f fbf1 	bl	3bfe0 <assert_post_action>
   2c7fe:	e7e4      	b.n	2c7ca <at_handler_mdmev+0x12>
   2c800:	4b0a      	ldr	r3, [pc, #40]	; (2c82c <at_handler_mdmev+0x74>)
   2c802:	490b      	ldr	r1, [pc, #44]	; (2c830 <at_handler_mdmev+0x78>)
   2c804:	1a5b      	subs	r3, r3, r1
   2c806:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   2c808:	f04f 0000 	mov.w	r0, #0
   2c80c:	2101      	movs	r1, #1
   2c80e:	f361 0002 	bfi	r0, r1, #0, #3
   2c812:	f36f 00c5 	bfc	r0, #3, #3
   2c816:	f363 108f 	bfi	r0, r3, #6, #10
   2c81a:	4906      	ldr	r1, [pc, #24]	; (2c834 <at_handler_mdmev+0x7c>)
   2c81c:	f00f fc14 	bl	3c048 <log_string_sync>
		return;
   2c820:	e7df      	b.n	2c7e2 <at_handler_mdmev+0x2a>
   2c822:	bf00      	nop
   2c824:	000434c8 	.word	0x000434c8
   2c828:	00041c84 	.word	0x00041c84
   2c82c:	000412a0 	.word	0x000412a0
   2c830:	00041200 	.word	0x00041200
   2c834:	0004366c 	.word	0x0004366c

0002c838 <enable_notifications>:

static int enable_notifications(void)
{
   2c838:	b570      	push	{r4, r5, r6, lr}
   2c83a:	b08e      	sub	sp, #56	; 0x38
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   2c83c:	4830      	ldr	r0, [pc, #192]	; (2c900 <enable_notifications+0xc8>)
   2c83e:	f008 fa95 	bl	34d6c <nrf_modem_at_printf>
	if (err) {
   2c842:	4605      	mov	r5, r0
   2c844:	b928      	cbnz	r0, 2c852 <enable_notifications+0x1a>
			LOG_WRN("Modem sleep notifications require nRF9160 modem >= v1.3.0");
		}
	}

	/* +CSCON notifications */
	err = nrf_modem_at_printf(cscon);
   2c846:	482f      	ldr	r0, [pc, #188]	; (2c904 <enable_notifications+0xcc>)
   2c848:	f008 fa90 	bl	34d6c <nrf_modem_at_printf>
	if (err) {
   2c84c:	b9a8      	cbnz	r0, 2c87a <enable_notifications+0x42>
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
		}
	}

	return 0;
}
   2c84e:	b00e      	add	sp, #56	; 0x38
   2c850:	bd70      	pop	{r4, r5, r6, pc}
   2c852:	4b2d      	ldr	r3, [pc, #180]	; (2c908 <enable_notifications+0xd0>)
   2c854:	4a2d      	ldr	r2, [pc, #180]	; (2c90c <enable_notifications+0xd4>)
   2c856:	1a9b      	subs	r3, r3, r2
   2c858:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   2c85a:	f04f 0000 	mov.w	r0, #0
   2c85e:	2201      	movs	r2, #1
   2c860:	f362 0002 	bfi	r0, r2, #0, #3
   2c864:	f36f 00c5 	bfc	r0, #3, #3
   2c868:	f363 108f 	bfi	r0, r3, #6, #10
   2c86c:	462a      	mov	r2, r5
   2c86e:	4928      	ldr	r1, [pc, #160]	; (2c910 <enable_notifications+0xd8>)
   2c870:	f00f fbea 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2c874:	f06f 000d 	mvn.w	r0, #13
   2c878:	e7e9      	b.n	2c84e <enable_notifications+0x16>
   2c87a:	4c23      	ldr	r4, [pc, #140]	; (2c908 <enable_notifications+0xd0>)
   2c87c:	4b23      	ldr	r3, [pc, #140]	; (2c90c <enable_notifications+0xd4>)
   2c87e:	1ae4      	subs	r4, r4, r3
   2c880:	08e4      	lsrs	r4, r4, #3
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   2c882:	2602      	movs	r6, #2
   2c884:	f04f 0300 	mov.w	r3, #0
   2c888:	f366 0302 	bfi	r3, r6, #0, #3
   2c88c:	f36f 03c5 	bfc	r3, #3, #3
   2c890:	f364 138f 	bfi	r3, r4, #6, #10
   2c894:	4602      	mov	r2, r0
   2c896:	491f      	ldr	r1, [pc, #124]	; (2c914 <enable_notifications+0xdc>)
   2c898:	4618      	mov	r0, r3
   2c89a:	f00f fbd5 	bl	3c048 <log_string_sync>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   2c89e:	f04f 0000 	mov.w	r0, #0
   2c8a2:	f366 0002 	bfi	r0, r6, #0, #3
   2c8a6:	f36f 00c5 	bfc	r0, #3, #3
   2c8aa:	f364 108f 	bfi	r0, r4, #6, #10
   2c8ae:	491a      	ldr	r1, [pc, #104]	; (2c918 <enable_notifications+0xe0>)
   2c8b0:	f00f fbca 	bl	3c048 <log_string_sync>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   2c8b4:	4a19      	ldr	r2, [pc, #100]	; (2c91c <enable_notifications+0xe4>)
   2c8b6:	2132      	movs	r1, #50	; 0x32
   2c8b8:	a801      	add	r0, sp, #4
   2c8ba:	f008 fa7f 	bl	34dbc <nrf_modem_at_cmd>
		if (err == 0) {
   2c8be:	b108      	cbz	r0, 2c8c4 <enable_notifications+0x8c>
	return 0;
   2c8c0:	4628      	mov	r0, r5
   2c8c2:	e7c4      	b.n	2c84e <enable_notifications+0x16>
			char *end = strstr(buf, "\r\nOK");
   2c8c4:	4916      	ldr	r1, [pc, #88]	; (2c920 <enable_notifications+0xe8>)
   2c8c6:	a801      	add	r0, sp, #4
   2c8c8:	f013 fd17 	bl	402fa <strstr>
			if (end) {
   2c8cc:	b108      	cbz	r0, 2c8d2 <enable_notifications+0x9a>
				*end = '\0';
   2c8ce:	2200      	movs	r2, #0
   2c8d0:	7002      	strb	r2, [r0, #0]
   2c8d2:	4b0d      	ldr	r3, [pc, #52]	; (2c908 <enable_notifications+0xd0>)
   2c8d4:	4a0d      	ldr	r2, [pc, #52]	; (2c90c <enable_notifications+0xd4>)
   2c8d6:	1a9b      	subs	r3, r3, r2
   2c8d8:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Current modem firmware version: %s", log_strdup(buf));
   2c8da:	f04f 0400 	mov.w	r4, #0
   2c8de:	2202      	movs	r2, #2
   2c8e0:	f362 0402 	bfi	r4, r2, #0, #3
   2c8e4:	f36f 04c5 	bfc	r4, #3, #3
   2c8e8:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   2c8ec:	a801      	add	r0, sp, #4
   2c8ee:	f00f fbbf 	bl	3c070 <z_log_strdup>
   2c8f2:	4602      	mov	r2, r0
   2c8f4:	490b      	ldr	r1, [pc, #44]	; (2c924 <enable_notifications+0xec>)
   2c8f6:	4620      	mov	r0, r4
   2c8f8:	f00f fba6 	bl	3c048 <log_string_sync>
   2c8fc:	e7e0      	b.n	2c8c0 <enable_notifications+0x88>
   2c8fe:	bf00      	nop
   2c900:	0004369c 	.word	0x0004369c
   2c904:	00043c88 	.word	0x00043c88
   2c908:	000412a0 	.word	0x000412a0
   2c90c:	00041200 	.word	0x00041200
   2c910:	000436a8 	.word	0x000436a8
   2c914:	000436e0 	.word	0x000436e0
   2c918:	00043718 	.word	0x00043718
   2c91c:	0004374c 	.word	0x0004374c
   2c920:	00043754 	.word	0x00043754
   2c924:	0004375c 	.word	0x0004375c

0002c928 <lte_lc_register_handler>:

	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
   2c928:	b508      	push	{r3, lr}
	if (handler == NULL) {
   2c92a:	b110      	cbz	r0, 2c932 <lte_lc_register_handler+0xa>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
   2c92c:	f000 fd9c 	bl	2d468 <event_handler_list_append_handler>
}
   2c930:	bd08      	pop	{r3, pc}
   2c932:	4b07      	ldr	r3, [pc, #28]	; (2c950 <lte_lc_register_handler+0x28>)
   2c934:	4a07      	ldr	r2, [pc, #28]	; (2c954 <lte_lc_register_handler+0x2c>)
   2c936:	1a9b      	subs	r3, r3, r2
   2c938:	08db      	lsrs	r3, r3, #3
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   2c93a:	2203      	movs	r2, #3
   2c93c:	f362 0002 	bfi	r0, r2, #0, #3
   2c940:	f36f 00c5 	bfc	r0, #3, #3
   2c944:	f363 108f 	bfi	r0, r3, #6, #10
   2c948:	4903      	ldr	r1, [pc, #12]	; (2c958 <lte_lc_register_handler+0x30>)
   2c94a:	f00f fb7d 	bl	3c048 <log_string_sync>
		return;
   2c94e:	e7ef      	b.n	2c930 <lte_lc_register_handler+0x8>
   2c950:	000412a0 	.word	0x000412a0
   2c954:	00041200 	.word	0x00041200
   2c958:	00043780 	.word	0x00043780

0002c95c <lte_lc_psm_get>:

	return 0;
}

int lte_lc_psm_get(int *tau, int *active_time)
{
   2c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c95e:	b08d      	sub	sp, #52	; 0x34
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   2c960:	2300      	movs	r3, #0
   2c962:	9307      	str	r3, [sp, #28]
   2c964:	9308      	str	r3, [sp, #32]
   2c966:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   2c96a:	9304      	str	r3, [sp, #16]
   2c96c:	9305      	str	r3, [sp, #20]
   2c96e:	f88d 3018 	strb.w	r3, [sp, #24]
	char tau_legacy_str[9] = {0};
   2c972:	9301      	str	r3, [sp, #4]
   2c974:	9302      	str	r3, [sp, #8]
   2c976:	f88d 300c 	strb.w	r3, [sp, #12]
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   2c97a:	2800      	cmp	r0, #0
   2c97c:	f000 80a8 	beq.w	2cad0 <lte_lc_psm_get+0x174>
   2c980:	460e      	mov	r6, r1
   2c982:	4607      	mov	r7, r0
   2c984:	2900      	cmp	r1, #0
   2c986:	f000 80a6 	beq.w	2cad6 <lte_lc_psm_get+0x17a>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   2c98a:	4854      	ldr	r0, [pc, #336]	; (2cadc <lte_lc_psm_get+0x180>)
   2c98c:	7003      	strb	r3, [r0, #0]

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   2c98e:	4a54      	ldr	r2, [pc, #336]	; (2cae0 <lte_lc_psm_get+0x184>)
   2c990:	21a0      	movs	r1, #160	; 0xa0
   2c992:	f008 fa13 	bl	34dbc <nrf_modem_at_cmd>
	if (err < 0) {
   2c996:	2800      	cmp	r0, #0
   2c998:	db0f      	blt.n	2c9ba <lte_lc_psm_get+0x5e>
		LOG_ERR("AT command failed, error: %d", err);
		return -EFAULT;
	}

	/* Skip over first 13 fields in AT cmd response by counting delimiters (commas). */
	comma_ptr = strchr(response, ch);
   2c99a:	212c      	movs	r1, #44	; 0x2c
   2c99c:	484f      	ldr	r0, [pc, #316]	; (2cadc <lte_lc_psm_get+0x180>)
   2c99e:	f013 fc51 	bl	40244 <strchr>
   2c9a2:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   2c9a4:	2500      	movs	r5, #0
   2c9a6:	2d0b      	cmp	r5, #11
   2c9a8:	dc2f      	bgt.n	2ca0a <lte_lc_psm_get+0xae>
		if (comma_ptr) {
   2c9aa:	b1dc      	cbz	r4, 2c9e4 <lte_lc_psm_get+0x88>
			comma_ptr = strchr(comma_ptr + 1, ch);
   2c9ac:	212c      	movs	r1, #44	; 0x2c
   2c9ae:	1c60      	adds	r0, r4, #1
   2c9b0:	f013 fc48 	bl	40244 <strchr>
   2c9b4:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   2c9b6:	3501      	adds	r5, #1
   2c9b8:	e7f5      	b.n	2c9a6 <lte_lc_psm_get+0x4a>
   2c9ba:	4b4a      	ldr	r3, [pc, #296]	; (2cae4 <lte_lc_psm_get+0x188>)
   2c9bc:	4a4a      	ldr	r2, [pc, #296]	; (2cae8 <lte_lc_psm_get+0x18c>)
   2c9be:	1a9b      	subs	r3, r3, r2
   2c9c0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command failed, error: %d", err);
   2c9c2:	f04f 0400 	mov.w	r4, #0
   2c9c6:	2201      	movs	r2, #1
   2c9c8:	f362 0402 	bfi	r4, r2, #0, #3
   2c9cc:	f36f 04c5 	bfc	r4, #3, #3
   2c9d0:	f363 148f 	bfi	r4, r3, #6, #10
   2c9d4:	4602      	mov	r2, r0
   2c9d6:	4945      	ldr	r1, [pc, #276]	; (2caec <lte_lc_psm_get+0x190>)
   2c9d8:	4620      	mov	r0, r4
   2c9da:	f00f fb35 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2c9de:	f06f 040d 	mvn.w	r4, #13
   2c9e2:	e03a      	b.n	2ca5a <lte_lc_psm_get+0xfe>
   2c9e4:	4b3f      	ldr	r3, [pc, #252]	; (2cae4 <lte_lc_psm_get+0x188>)
   2c9e6:	4a40      	ldr	r2, [pc, #256]	; (2cae8 <lte_lc_psm_get+0x18c>)
   2c9e8:	1a9b      	subs	r3, r3, r2
   2c9ea:	08db      	lsrs	r3, r3, #3
		} else {
			LOG_ERR("AT command parsing failed");
   2c9ec:	f04f 0000 	mov.w	r0, #0
   2c9f0:	2201      	movs	r2, #1
   2c9f2:	f362 0002 	bfi	r0, r2, #0, #3
   2c9f6:	f36f 00c5 	bfc	r0, #3, #3
   2c9fa:	f363 108f 	bfi	r0, r3, #6, #10
   2c9fe:	493c      	ldr	r1, [pc, #240]	; (2caf0 <lte_lc_psm_get+0x194>)
   2ca00:	f00f fb22 	bl	3c048 <log_string_sync>
			return -EFAULT;
   2ca04:	f06f 040d 	mvn.w	r4, #13
   2ca08:	e027      	b.n	2ca5a <lte_lc_psm_get+0xfe>
	 * comma_ptr now points the comma before Active-Time. Discard the comma and the quote mark,
	 * hence + 2, and copy Active-Time into active_time_str. Find the next comma and repeat for
	 * Periodic-TAU-ext and so forth.
	 */

	if (comma_ptr) {
   2ca0a:	b34c      	cbz	r4, 2ca60 <lte_lc_psm_get+0x104>
		strncpy(active_time_str, comma_ptr + 2, 8);
   2ca0c:	2208      	movs	r2, #8
   2ca0e:	1ca1      	adds	r1, r4, #2
   2ca10:	a807      	add	r0, sp, #28
   2ca12:	f013 fc3e 	bl	40292 <strncpy>
	} else {
		LOG_ERR("AT command parsing failed");
		return -EFAULT;
	}

	comma_ptr = strchr(comma_ptr + 1, ch);
   2ca16:	212c      	movs	r1, #44	; 0x2c
   2ca18:	1c60      	adds	r0, r4, #1
   2ca1a:	f013 fc13 	bl	40244 <strchr>
	if (comma_ptr) {
   2ca1e:	4604      	mov	r4, r0
   2ca20:	b388      	cbz	r0, 2ca86 <lte_lc_psm_get+0x12a>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   2ca22:	2208      	movs	r2, #8
   2ca24:	1c81      	adds	r1, r0, #2
   2ca26:	a804      	add	r0, sp, #16
   2ca28:	f013 fc33 	bl	40292 <strncpy>
		LOG_ERR("AT command parsing failed");
		return -EFAULT;
	}

	/* It's ok not to have legacy Periodic-TAU, older FWs don't provide it. */
	comma_ptr = strchr(comma_ptr + 1, ch);
   2ca2c:	212c      	movs	r1, #44	; 0x2c
   2ca2e:	1c60      	adds	r0, r4, #1
   2ca30:	f013 fc08 	bl	40244 <strchr>
	if (comma_ptr) {
   2ca34:	4601      	mov	r1, r0
   2ca36:	b120      	cbz	r0, 2ca42 <lte_lc_psm_get+0xe6>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   2ca38:	2208      	movs	r2, #8
   2ca3a:	3102      	adds	r1, #2
   2ca3c:	a801      	add	r0, sp, #4
   2ca3e:	f013 fc28 	bl	40292 <strncpy>
	}

	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   2ca42:	ab0a      	add	r3, sp, #40	; 0x28
   2ca44:	aa01      	add	r2, sp, #4
   2ca46:	a904      	add	r1, sp, #16
   2ca48:	a807      	add	r0, sp, #28
   2ca4a:	f000 fecb 	bl	2d7e4 <parse_psm>
	if (err) {
   2ca4e:	4604      	mov	r4, r0
   2ca50:	bb60      	cbnz	r0, 2caac <lte_lc_psm_get+0x150>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
		return err;
	}

	*tau = psm_cfg.tau;
   2ca52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2ca54:	603b      	str	r3, [r7, #0]
	*active_time = psm_cfg.active_time;
   2ca56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2ca58:	6033      	str	r3, [r6, #0]

	LOG_DBG("TAU: %d sec, active time: %d sec\n", *tau, *active_time);

	return 0;
}
   2ca5a:	4620      	mov	r0, r4
   2ca5c:	b00d      	add	sp, #52	; 0x34
   2ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ca60:	4b20      	ldr	r3, [pc, #128]	; (2cae4 <lte_lc_psm_get+0x188>)
   2ca62:	4a21      	ldr	r2, [pc, #132]	; (2cae8 <lte_lc_psm_get+0x18c>)
   2ca64:	1a9b      	subs	r3, r3, r2
   2ca66:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command parsing failed");
   2ca68:	f04f 0000 	mov.w	r0, #0
   2ca6c:	2201      	movs	r2, #1
   2ca6e:	f362 0002 	bfi	r0, r2, #0, #3
   2ca72:	f36f 00c5 	bfc	r0, #3, #3
   2ca76:	f363 108f 	bfi	r0, r3, #6, #10
   2ca7a:	491d      	ldr	r1, [pc, #116]	; (2caf0 <lte_lc_psm_get+0x194>)
   2ca7c:	f00f fae4 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2ca80:	f06f 040d 	mvn.w	r4, #13
   2ca84:	e7e9      	b.n	2ca5a <lte_lc_psm_get+0xfe>
   2ca86:	4b17      	ldr	r3, [pc, #92]	; (2cae4 <lte_lc_psm_get+0x188>)
   2ca88:	4a17      	ldr	r2, [pc, #92]	; (2cae8 <lte_lc_psm_get+0x18c>)
   2ca8a:	1a9b      	subs	r3, r3, r2
   2ca8c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command parsing failed");
   2ca8e:	f04f 0000 	mov.w	r0, #0
   2ca92:	2201      	movs	r2, #1
   2ca94:	f362 0002 	bfi	r0, r2, #0, #3
   2ca98:	f36f 00c5 	bfc	r0, #3, #3
   2ca9c:	f363 108f 	bfi	r0, r3, #6, #10
   2caa0:	4913      	ldr	r1, [pc, #76]	; (2caf0 <lte_lc_psm_get+0x194>)
   2caa2:	f00f fad1 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2caa6:	f06f 040d 	mvn.w	r4, #13
   2caaa:	e7d6      	b.n	2ca5a <lte_lc_psm_get+0xfe>
   2caac:	4b0d      	ldr	r3, [pc, #52]	; (2cae4 <lte_lc_psm_get+0x188>)
   2caae:	4a0e      	ldr	r2, [pc, #56]	; (2cae8 <lte_lc_psm_get+0x18c>)
   2cab0:	1a9b      	subs	r3, r3, r2
   2cab2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   2cab4:	f04f 0000 	mov.w	r0, #0
   2cab8:	2201      	movs	r2, #1
   2caba:	f362 0002 	bfi	r0, r2, #0, #3
   2cabe:	f36f 00c5 	bfc	r0, #3, #3
   2cac2:	f363 108f 	bfi	r0, r3, #6, #10
   2cac6:	4622      	mov	r2, r4
   2cac8:	490a      	ldr	r1, [pc, #40]	; (2caf4 <lte_lc_psm_get+0x198>)
   2caca:	f00f fabd 	bl	3c048 <log_string_sync>
		return err;
   2cace:	e7c4      	b.n	2ca5a <lte_lc_psm_get+0xfe>
		return -EINVAL;
   2cad0:	f06f 0415 	mvn.w	r4, #21
   2cad4:	e7c1      	b.n	2ca5a <lte_lc_psm_get+0xfe>
   2cad6:	f06f 0415 	mvn.w	r4, #21
   2cada:	e7be      	b.n	2ca5a <lte_lc_psm_get+0xfe>
   2cadc:	20010294 	.word	0x20010294
   2cae0:	000437f4 	.word	0x000437f4
   2cae4:	000412a0 	.word	0x000412a0
   2cae8:	00041200 	.word	0x00041200
   2caec:	00043804 	.word	0x00043804
   2caf0:	00043824 	.word	0x00043824
   2caf4:	00043840 	.word	0x00043840

0002caf8 <at_handler_cereg>:
{
   2caf8:	b570      	push	{r4, r5, r6, lr}
   2cafa:	b0a4      	sub	sp, #144	; 0x90
   2cafc:	4604      	mov	r4, r0
	struct lte_lc_evt evt = {0};
   2cafe:	2240      	movs	r2, #64	; 0x40
   2cb00:	2100      	movs	r1, #0
   2cb02:	a814      	add	r0, sp, #80	; 0x50
   2cb04:	f013 fa1c 	bl	3ff40 <memset>
	__ASSERT_NO_MSG(response != NULL);
   2cb08:	2c00      	cmp	r4, #0
   2cb0a:	d055      	beq.n	2cbb8 <at_handler_cereg+0xc0>
	enum lte_lc_nw_reg_status reg_status = 0;
   2cb0c:	2500      	movs	r5, #0
   2cb0e:	f88d 504f 	strb.w	r5, [sp, #79]	; 0x4f
	struct lte_lc_cell cell = {0};
   2cb12:	2230      	movs	r2, #48	; 0x30
   2cb14:	4629      	mov	r1, r5
   2cb16:	a806      	add	r0, sp, #24
   2cb18:	f013 fa12 	bl	3ff40 <memset>
	struct lte_lc_psm_cfg psm_cfg = {0};
   2cb1c:	9503      	str	r5, [sp, #12]
   2cb1e:	9504      	str	r5, [sp, #16]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   2cb20:	f10d 0317 	add.w	r3, sp, #23
   2cb24:	9300      	str	r3, [sp, #0]
   2cb26:	ab06      	add	r3, sp, #24
   2cb28:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
   2cb2c:	2101      	movs	r1, #1
   2cb2e:	4620      	mov	r0, r4
   2cb30:	f000 ff9c 	bl	2da6c <parse_cereg>
	if (err) {
   2cb34:	4605      	mov	r5, r0
   2cb36:	2800      	cmp	r0, #0
   2cb38:	d149      	bne.n	2cbce <at_handler_cereg+0xd6>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2cb3a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   2cb3e:	2b01      	cmp	r3, #1
   2cb40:	d05d      	beq.n	2cbfe <at_handler_cereg+0x106>
   2cb42:	2b05      	cmp	r3, #5
   2cb44:	d05b      	beq.n	2cbfe <at_handler_cereg+0x106>
	if (event_handler_list_is_empty()) {
   2cb46:	f000 fc87 	bl	2d458 <event_handler_list_is_empty>
   2cb4a:	2800      	cmp	r0, #0
   2cb4c:	d155      	bne.n	2cbfa <at_handler_cereg+0x102>
	if (reg_status != prev_reg_status) {
   2cb4e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   2cb52:	4a52      	ldr	r2, [pc, #328]	; (2cc9c <at_handler_cereg+0x1a4>)
   2cb54:	7812      	ldrb	r2, [r2, #0]
   2cb56:	4293      	cmp	r3, r2
   2cb58:	d15d      	bne.n	2cc16 <at_handler_cereg+0x11e>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   2cb5a:	2230      	movs	r2, #48	; 0x30
   2cb5c:	4950      	ldr	r1, [pc, #320]	; (2cca0 <at_handler_cereg+0x1a8>)
   2cb5e:	a806      	add	r0, sp, #24
   2cb60:	f013 f9c0 	bl	3fee4 <memcmp>
   2cb64:	2800      	cmp	r0, #0
   2cb66:	d161      	bne.n	2cc2c <at_handler_cereg+0x134>
	if (lte_mode != prev_lte_mode) {
   2cb68:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2cb6c:	4a4d      	ldr	r2, [pc, #308]	; (2cca4 <at_handler_cereg+0x1ac>)
   2cb6e:	7812      	ldrb	r2, [r2, #0]
   2cb70:	4293      	cmp	r3, r2
   2cb72:	d176      	bne.n	2cc62 <at_handler_cereg+0x16a>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   2cb74:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   2cb78:	2b01      	cmp	r3, #1
   2cb7a:	d001      	beq.n	2cb80 <at_handler_cereg+0x88>
   2cb7c:	2b05      	cmp	r3, #5
   2cb7e:	d13c      	bne.n	2cbfa <at_handler_cereg+0x102>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   2cb80:	a904      	add	r1, sp, #16
   2cb82:	a803      	add	r0, sp, #12
   2cb84:	f7ff feea 	bl	2c95c <lte_lc_psm_get>
	if (err) {
   2cb88:	2800      	cmp	r0, #0
   2cb8a:	d175      	bne.n	2cc78 <at_handler_cereg+0x180>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   2cb8c:	2208      	movs	r2, #8
   2cb8e:	4946      	ldr	r1, [pc, #280]	; (2cca8 <at_handler_cereg+0x1b0>)
   2cb90:	a803      	add	r0, sp, #12
   2cb92:	f013 f9a7 	bl	3fee4 <memcmp>
   2cb96:	b380      	cbz	r0, 2cbfa <at_handler_cereg+0x102>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   2cb98:	2301      	movs	r3, #1
   2cb9a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		memcpy(&prev_psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   2cb9e:	4a42      	ldr	r2, [pc, #264]	; (2cca8 <at_handler_cereg+0x1b0>)
   2cba0:	ab03      	add	r3, sp, #12
   2cba2:	e893 0003 	ldmia.w	r3, {r0, r1}
   2cba6:	e882 0003 	stmia.w	r2, {r0, r1}
		memcpy(&evt.psm_cfg, &psm_cfg, sizeof(struct lte_lc_psm_cfg));
   2cbaa:	aa16      	add	r2, sp, #88	; 0x58
   2cbac:	e882 0003 	stmia.w	r2, {r0, r1}
		event_handler_list_dispatch(&evt);
   2cbb0:	a814      	add	r0, sp, #80	; 0x50
   2cbb2:	f000 fc93 	bl	2d4dc <event_handler_list_dispatch>
   2cbb6:	e020      	b.n	2cbfa <at_handler_cereg+0x102>
	__ASSERT_NO_MSG(response != NULL);
   2cbb8:	4d3c      	ldr	r5, [pc, #240]	; (2ccac <at_handler_cereg+0x1b4>)
   2cbba:	22ad      	movs	r2, #173	; 0xad
   2cbbc:	4629      	mov	r1, r5
   2cbbe:	483c      	ldr	r0, [pc, #240]	; (2ccb0 <at_handler_cereg+0x1b8>)
   2cbc0:	f00e ffba 	bl	3bb38 <printk>
   2cbc4:	21ad      	movs	r1, #173	; 0xad
   2cbc6:	4628      	mov	r0, r5
   2cbc8:	f00f fa0a 	bl	3bfe0 <assert_post_action>
   2cbcc:	e79e      	b.n	2cb0c <at_handler_cereg+0x14>
   2cbce:	4b39      	ldr	r3, [pc, #228]	; (2ccb4 <at_handler_cereg+0x1bc>)
   2cbd0:	4a39      	ldr	r2, [pc, #228]	; (2ccb8 <at_handler_cereg+0x1c0>)
   2cbd2:	1a9b      	subs	r3, r3, r2
   2cbd4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse notification (error %d): %s",
   2cbd6:	f04f 0600 	mov.w	r6, #0
   2cbda:	2201      	movs	r2, #1
   2cbdc:	f362 0602 	bfi	r6, r2, #0, #3
   2cbe0:	f36f 06c5 	bfc	r6, #3, #3
   2cbe4:	f363 168f 	bfi	r6, r3, #6, #10
   2cbe8:	4620      	mov	r0, r4
   2cbea:	f00f fa41 	bl	3c070 <z_log_strdup>
   2cbee:	4603      	mov	r3, r0
   2cbf0:	462a      	mov	r2, r5
   2cbf2:	4932      	ldr	r1, [pc, #200]	; (2ccbc <at_handler_cereg+0x1c4>)
   2cbf4:	4630      	mov	r0, r6
   2cbf6:	f00f fa27 	bl	3c048 <log_string_sync>
}
   2cbfa:	b024      	add	sp, #144	; 0x90
   2cbfc:	bd70      	pop	{r4, r5, r6, pc}
		if (!is_cellid_valid(cell.id)) {
   2cbfe:	9808      	ldr	r0, [sp, #32]
   2cc00:	f011 fd3a 	bl	3e678 <is_cellid_valid>
   2cc04:	b918      	cbnz	r0, 2cc0e <at_handler_cereg+0x116>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   2cc06:	2304      	movs	r3, #4
   2cc08:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   2cc0c:	e79b      	b.n	2cb46 <at_handler_cereg+0x4e>
	z_impl_k_sem_give(sem);
   2cc0e:	482c      	ldr	r0, [pc, #176]	; (2ccc0 <at_handler_cereg+0x1c8>)
   2cc10:	f009 fc8a 	bl	36528 <z_impl_k_sem_give>
}
   2cc14:	e797      	b.n	2cb46 <at_handler_cereg+0x4e>
		prev_reg_status = reg_status;
   2cc16:	4a21      	ldr	r2, [pc, #132]	; (2cc9c <at_handler_cereg+0x1a4>)
   2cc18:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   2cc1a:	2200      	movs	r2, #0
   2cc1c:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
		evt.nw_reg_status = reg_status;
   2cc20:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   2cc24:	a814      	add	r0, sp, #80	; 0x50
   2cc26:	f000 fc59 	bl	2d4dc <event_handler_list_dispatch>
   2cc2a:	e796      	b.n	2cb5a <at_handler_cereg+0x62>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   2cc2c:	2304      	movs	r3, #4
   2cc2e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   2cc32:	4c1b      	ldr	r4, [pc, #108]	; (2cca0 <at_handler_cereg+0x1a8>)
   2cc34:	ad06      	add	r5, sp, #24
   2cc36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2cc38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2cc3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2cc3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2cc3e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2cc42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   2cc46:	ac16      	add	r4, sp, #88	; 0x58
   2cc48:	ad06      	add	r5, sp, #24
   2cc4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2cc4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2cc4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2cc50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2cc52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2cc56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   2cc5a:	a814      	add	r0, sp, #80	; 0x50
   2cc5c:	f000 fc3e 	bl	2d4dc <event_handler_list_dispatch>
   2cc60:	e782      	b.n	2cb68 <at_handler_cereg+0x70>
		prev_lte_mode = lte_mode;
   2cc62:	4a10      	ldr	r2, [pc, #64]	; (2cca4 <at_handler_cereg+0x1ac>)
   2cc64:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   2cc66:	2205      	movs	r2, #5
   2cc68:	f88d 2050 	strb.w	r2, [sp, #80]	; 0x50
		evt.lte_mode = lte_mode;
   2cc6c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   2cc70:	a814      	add	r0, sp, #80	; 0x50
   2cc72:	f000 fc33 	bl	2d4dc <event_handler_list_dispatch>
   2cc76:	e77d      	b.n	2cb74 <at_handler_cereg+0x7c>
   2cc78:	4b0e      	ldr	r3, [pc, #56]	; (2ccb4 <at_handler_cereg+0x1bc>)
   2cc7a:	4a0f      	ldr	r2, [pc, #60]	; (2ccb8 <at_handler_cereg+0x1c0>)
   2cc7c:	1a9b      	subs	r3, r3, r2
   2cc7e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get PSM information");
   2cc80:	f04f 0000 	mov.w	r0, #0
   2cc84:	2201      	movs	r2, #1
   2cc86:	f362 0002 	bfi	r0, r2, #0, #3
   2cc8a:	f36f 00c5 	bfc	r0, #3, #3
   2cc8e:	f363 108f 	bfi	r0, r3, #6, #10
   2cc92:	490c      	ldr	r1, [pc, #48]	; (2ccc4 <at_handler_cereg+0x1cc>)
   2cc94:	f00f f9d8 	bl	3c048 <log_string_sync>
		return;
   2cc98:	e7af      	b.n	2cbfa <at_handler_cereg+0x102>
   2cc9a:	bf00      	nop
   2cc9c:	20010e07 	.word	0x20010e07
   2cca0:	2000cc60 	.word	0x2000cc60
   2cca4:	20010e06 	.word	0x20010e06
   2cca8:	2001028c 	.word	0x2001028c
   2ccac:	000434c8 	.word	0x000434c8
   2ccb0:	00041c84 	.word	0x00041c84
   2ccb4:	000412a0 	.word	0x000412a0
   2ccb8:	00041200 	.word	0x00041200
   2ccbc:	00043870 	.word	0x00043870
   2ccc0:	20010274 	.word	0x20010274
   2ccc4:	0004389c 	.word	0x0004389c

0002ccc8 <lte_lc_nw_reg_status_get>:

	return 0;
}

int lte_lc_nw_reg_status_get(enum lte_lc_nw_reg_status *status)
{
   2ccc8:	b510      	push	{r4, lr}
   2ccca:	b082      	sub	sp, #8
	int err;
	uint16_t status_tmp;
	uint32_t cell_id = 0;
   2cccc:	2300      	movs	r3, #0
   2ccce:	9300      	str	r3, [sp, #0]

	if (status == NULL) {
   2ccd0:	b350      	cbz	r0, 2cd28 <lte_lc_nw_reg_status_get+0x60>
   2ccd2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* Read network registration status */
	err = nrf_modem_at_scanf("AT+CEREG?",
   2ccd4:	466b      	mov	r3, sp
   2ccd6:	f10d 0206 	add.w	r2, sp, #6
   2ccda:	4915      	ldr	r1, [pc, #84]	; (2cd30 <lte_lc_nw_reg_status_get+0x68>)
   2ccdc:	4815      	ldr	r0, [pc, #84]	; (2cd34 <lte_lc_nw_reg_status_get+0x6c>)
   2ccde:	f008 f8d3 	bl	34e88 <nrf_modem_at_scanf>
		"%u,"		/* <stat> */
		"%*[^,],"	/* <tac> */
		"\"%x\",",	/* <ci> */
		&status_tmp,
		&cell_id);
	if (err < 1) {
   2cce2:	2800      	cmp	r0, #0
   2cce4:	dd0b      	ble.n	2ccfe <lte_lc_nw_reg_status_get+0x36>
		LOG_ERR("Could not get registration status, error: %d", err);
		return -EFAULT;
	}

	if (!is_cellid_valid(cell_id)) {
   2cce6:	9800      	ldr	r0, [sp, #0]
   2cce8:	f011 fcc6 	bl	3e678 <is_cellid_valid>
   2ccec:	b908      	cbnz	r0, 2ccf2 <lte_lc_nw_reg_status_get+0x2a>
		*status = LTE_LC_NW_REG_UNKNOWN;
   2ccee:	2304      	movs	r3, #4
   2ccf0:	7023      	strb	r3, [r4, #0]
	}

	*status = status_tmp;
   2ccf2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2ccf6:	7023      	strb	r3, [r4, #0]

	return 0;
   2ccf8:	2000      	movs	r0, #0
}
   2ccfa:	b002      	add	sp, #8
   2ccfc:	bd10      	pop	{r4, pc}
   2ccfe:	4b0e      	ldr	r3, [pc, #56]	; (2cd38 <lte_lc_nw_reg_status_get+0x70>)
   2cd00:	4a0e      	ldr	r2, [pc, #56]	; (2cd3c <lte_lc_nw_reg_status_get+0x74>)
   2cd02:	1a9b      	subs	r3, r3, r2
   2cd04:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get registration status, error: %d", err);
   2cd06:	f04f 0400 	mov.w	r4, #0
   2cd0a:	2201      	movs	r2, #1
   2cd0c:	f362 0402 	bfi	r4, r2, #0, #3
   2cd10:	f36f 04c5 	bfc	r4, #3, #3
   2cd14:	f363 148f 	bfi	r4, r3, #6, #10
   2cd18:	4602      	mov	r2, r0
   2cd1a:	4909      	ldr	r1, [pc, #36]	; (2cd40 <lte_lc_nw_reg_status_get+0x78>)
   2cd1c:	4620      	mov	r0, r4
   2cd1e:	f00f f993 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2cd22:	f06f 000d 	mvn.w	r0, #13
   2cd26:	e7e8      	b.n	2ccfa <lte_lc_nw_reg_status_get+0x32>
		return -EINVAL;
   2cd28:	f06f 0015 	mvn.w	r0, #21
   2cd2c:	e7e5      	b.n	2ccfa <lte_lc_nw_reg_status_get+0x32>
   2cd2e:	bf00      	nop
   2cd30:	000438bc 	.word	0x000438bc
   2cd34:	000438d8 	.word	0x000438d8
   2cd38:	000412a0 	.word	0x000412a0
   2cd3c:	00041200 	.word	0x00041200
   2cd40:	000438e4 	.word	0x000438e4

0002cd44 <lte_lc_system_mode_set>:

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   2cd44:	b538      	push	{r3, r4, r5, lr}
   2cd46:	4604      	mov	r4, r0
	int err;

	switch (mode) {
   2cd48:	2807      	cmp	r0, #7
   2cd4a:	d814      	bhi.n	2cd76 <lte_lc_system_mode_set+0x32>
   2cd4c:	460d      	mov	r5, r1
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
		return -EINVAL;
	}

	switch (preference) {
   2cd4e:	2904      	cmp	r1, #4
   2cd50:	d825      	bhi.n	2cd9e <lte_lc_system_mode_set+0x5a>
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   2cd52:	4b27      	ldr	r3, [pc, #156]	; (2cdf0 <lte_lc_system_mode_set+0xac>)
   2cd54:	5c5a      	ldrb	r2, [r3, r1]
   2cd56:	4b27      	ldr	r3, [pc, #156]	; (2cdf4 <lte_lc_system_mode_set+0xb0>)
   2cd58:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   2cd5c:	4826      	ldr	r0, [pc, #152]	; (2cdf8 <lte_lc_system_mode_set+0xb4>)
   2cd5e:	f008 f805 	bl	34d6c <nrf_modem_at_printf>
				  system_mode_params[mode],
				  system_mode_preference[preference]);
	if (err) {
   2cd62:	bb80      	cbnz	r0, 2cdc6 <lte_lc_system_mode_set+0x82>
		LOG_ERR("Could not send AT command, error: %d", err);
		return -EFAULT;
	}

	sys_mode_current = mode;
   2cd64:	4b25      	ldr	r3, [pc, #148]	; (2cdfc <lte_lc_system_mode_set+0xb8>)
   2cd66:	701c      	strb	r4, [r3, #0]
	sys_mode_target = mode;
   2cd68:	4b25      	ldr	r3, [pc, #148]	; (2ce00 <lte_lc_system_mode_set+0xbc>)
   2cd6a:	701c      	strb	r4, [r3, #0]
	mode_pref_current = preference;
   2cd6c:	4b25      	ldr	r3, [pc, #148]	; (2ce04 <lte_lc_system_mode_set+0xc0>)
   2cd6e:	701d      	strb	r5, [r3, #0]
	mode_pref_target = preference;
   2cd70:	4b25      	ldr	r3, [pc, #148]	; (2ce08 <lte_lc_system_mode_set+0xc4>)
   2cd72:	701d      	strb	r5, [r3, #0]

	return 0;
}
   2cd74:	bd38      	pop	{r3, r4, r5, pc}
   2cd76:	4b25      	ldr	r3, [pc, #148]	; (2ce0c <lte_lc_system_mode_set+0xc8>)
   2cd78:	4a25      	ldr	r2, [pc, #148]	; (2ce10 <lte_lc_system_mode_set+0xcc>)
   2cd7a:	1a9b      	subs	r3, r3, r2
   2cd7c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid system mode requested: %d", mode);
   2cd7e:	f04f 0000 	mov.w	r0, #0
   2cd82:	2201      	movs	r2, #1
   2cd84:	f362 0002 	bfi	r0, r2, #0, #3
   2cd88:	f36f 00c5 	bfc	r0, #3, #3
   2cd8c:	f363 108f 	bfi	r0, r3, #6, #10
   2cd90:	4622      	mov	r2, r4
   2cd92:	4920      	ldr	r1, [pc, #128]	; (2ce14 <lte_lc_system_mode_set+0xd0>)
   2cd94:	f00f f958 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2cd98:	f06f 0015 	mvn.w	r0, #21
   2cd9c:	e7ea      	b.n	2cd74 <lte_lc_system_mode_set+0x30>
   2cd9e:	4b1b      	ldr	r3, [pc, #108]	; (2ce0c <lte_lc_system_mode_set+0xc8>)
   2cda0:	4a1b      	ldr	r2, [pc, #108]	; (2ce10 <lte_lc_system_mode_set+0xcc>)
   2cda2:	1a9b      	subs	r3, r3, r2
   2cda4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   2cda6:	f04f 0000 	mov.w	r0, #0
   2cdaa:	2201      	movs	r2, #1
   2cdac:	f362 0002 	bfi	r0, r2, #0, #3
   2cdb0:	f36f 00c5 	bfc	r0, #3, #3
   2cdb4:	f363 108f 	bfi	r0, r3, #6, #10
   2cdb8:	460a      	mov	r2, r1
   2cdba:	4917      	ldr	r1, [pc, #92]	; (2ce18 <lte_lc_system_mode_set+0xd4>)
   2cdbc:	f00f f944 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2cdc0:	f06f 0015 	mvn.w	r0, #21
   2cdc4:	e7d6      	b.n	2cd74 <lte_lc_system_mode_set+0x30>
   2cdc6:	4b11      	ldr	r3, [pc, #68]	; (2ce0c <lte_lc_system_mode_set+0xc8>)
   2cdc8:	4a11      	ldr	r2, [pc, #68]	; (2ce10 <lte_lc_system_mode_set+0xcc>)
   2cdca:	1a9b      	subs	r3, r3, r2
   2cdcc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not send AT command, error: %d", err);
   2cdce:	f04f 0400 	mov.w	r4, #0
   2cdd2:	2201      	movs	r2, #1
   2cdd4:	f362 0402 	bfi	r4, r2, #0, #3
   2cdd8:	f36f 04c5 	bfc	r4, #3, #3
   2cddc:	f363 148f 	bfi	r4, r3, #6, #10
   2cde0:	4602      	mov	r2, r0
   2cde2:	490e      	ldr	r1, [pc, #56]	; (2ce1c <lte_lc_system_mode_set+0xd8>)
   2cde4:	4620      	mov	r0, r4
   2cde6:	f00f f92f 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2cdea:	f06f 000d 	mvn.w	r0, #13
   2cdee:	e7c1      	b.n	2cd74 <lte_lc_system_mode_set+0x30>
   2cdf0:	00043cb4 	.word	0x00043cb4
   2cdf4:	00043c94 	.word	0x00043c94
   2cdf8:	00043960 	.word	0x00043960
   2cdfc:	20010e08 	.word	0x20010e08
   2ce00:	2000c8c7 	.word	0x2000c8c7
   2ce04:	20010e04 	.word	0x20010e04
   2ce08:	20010e05 	.word	0x20010e05
   2ce0c:	000412a0 	.word	0x000412a0
   2ce10:	00041200 	.word	0x00041200
   2ce14:	00043914 	.word	0x00043914
   2ce18:	00043938 	.word	0x00043938
   2ce1c:	00043978 	.word	0x00043978

0002ce20 <lte_lc_system_mode_get>:
			   enum lte_lc_system_mode_preference *preference)
{
	int err, mode_bitmask = 0;
	int ltem_mode, nbiot_mode, gps_mode, mode_preference;

	if (mode == NULL) {
   2ce20:	2800      	cmp	r0, #0
   2ce22:	f000 80a8 	beq.w	2cf76 <lte_lc_system_mode_get+0x156>
{
   2ce26:	b530      	push	{r4, r5, lr}
   2ce28:	b087      	sub	sp, #28
   2ce2a:	460c      	mov	r4, r1
   2ce2c:	4605      	mov	r5, r0
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   2ce2e:	ab02      	add	r3, sp, #8
   2ce30:	9301      	str	r3, [sp, #4]
   2ce32:	ab03      	add	r3, sp, #12
   2ce34:	9300      	str	r3, [sp, #0]
   2ce36:	ab04      	add	r3, sp, #16
   2ce38:	aa05      	add	r2, sp, #20
   2ce3a:	4952      	ldr	r1, [pc, #328]	; (2cf84 <lte_lc_system_mode_get+0x164>)
   2ce3c:	4852      	ldr	r0, [pc, #328]	; (2cf88 <lte_lc_system_mode_get+0x168>)
   2ce3e:	f008 f823 	bl	34e88 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   2ce42:	2804      	cmp	r0, #4
   2ce44:	d116      	bne.n	2ce74 <lte_lc_system_mode_get+0x54>
		LOG_ERR("Failed to get system mode, error: %d", err);
		return -EFAULT;
	}

	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   2ce46:	9b05      	ldr	r3, [sp, #20]
   2ce48:	b34b      	cbz	r3, 2ce9e <lte_lc_system_mode_get+0x7e>
   2ce4a:	2302      	movs	r3, #2
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2ce4c:	9a04      	ldr	r2, [sp, #16]
   2ce4e:	b342      	cbz	r2, 2cea2 <lte_lc_system_mode_get+0x82>
   2ce50:	2204      	movs	r2, #4
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   2ce52:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   2ce54:	9a03      	ldr	r2, [sp, #12]
   2ce56:	b332      	cbz	r2, 2cea6 <lte_lc_system_mode_get+0x86>
   2ce58:	2208      	movs	r2, #8
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2ce5a:	4313      	orrs	r3, r2

	switch (mode_bitmask) {
   2ce5c:	2b0e      	cmp	r3, #14
   2ce5e:	d844      	bhi.n	2ceea <lte_lc_system_mode_get+0xca>
   2ce60:	e8df f003 	tbb	[pc, r3]
   2ce64:	432e4323 	.word	0x432e4323
   2ce68:	433d4331 	.word	0x433d4331
   2ce6c:	43374334 	.word	0x43374334
   2ce70:	433a      	.short	0x433a
   2ce72:	40          	.byte	0x40
   2ce73:	00          	.byte	0x00
   2ce74:	4b45      	ldr	r3, [pc, #276]	; (2cf8c <lte_lc_system_mode_get+0x16c>)
   2ce76:	4a46      	ldr	r2, [pc, #280]	; (2cf90 <lte_lc_system_mode_get+0x170>)
   2ce78:	1a9b      	subs	r3, r3, r2
   2ce7a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get system mode, error: %d", err);
   2ce7c:	f04f 0400 	mov.w	r4, #0
   2ce80:	2201      	movs	r2, #1
   2ce82:	f362 0402 	bfi	r4, r2, #0, #3
   2ce86:	f36f 04c5 	bfc	r4, #3, #3
   2ce8a:	f363 148f 	bfi	r4, r3, #6, #10
   2ce8e:	4602      	mov	r2, r0
   2ce90:	4940      	ldr	r1, [pc, #256]	; (2cf94 <lte_lc_system_mode_get+0x174>)
   2ce92:	4620      	mov	r0, r4
   2ce94:	f00f f8d8 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2ce98:	f06f 000d 	mvn.w	r0, #13
   2ce9c:	e04a      	b.n	2cf34 <lte_lc_system_mode_get+0x114>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   2ce9e:	2300      	movs	r3, #0
   2cea0:	e7d4      	b.n	2ce4c <lte_lc_system_mode_get+0x2c>
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   2cea2:	2200      	movs	r2, #0
   2cea4:	e7d5      	b.n	2ce52 <lte_lc_system_mode_get+0x32>
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   2cea6:	2200      	movs	r2, #0
   2cea8:	e7d7      	b.n	2ce5a <lte_lc_system_mode_get+0x3a>
	case 0:
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2ceaa:	2300      	movs	r3, #0
   2ceac:	702b      	strb	r3, [r5, #0]
		LOG_ERR("Invalid system mode, assuming parsing error");
		return -EFAULT;
	}

	/* Get LTE preference. */
	if (preference != NULL) {
   2ceae:	b38c      	cbz	r4, 2cf14 <lte_lc_system_mode_get+0xf4>
		switch (mode_preference) {
   2ceb0:	9a02      	ldr	r2, [sp, #8]
   2ceb2:	2a04      	cmp	r2, #4
   2ceb4:	d84c      	bhi.n	2cf50 <lte_lc_system_mode_get+0x130>
   2ceb6:	e8df f002 	tbb	[pc, r2]
   2ceba:	3f2b      	.short	0x3f2b
   2cebc:	4542      	.short	0x4542
   2cebe:	48          	.byte	0x48
   2cebf:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2cec0:	2301      	movs	r3, #1
   2cec2:	702b      	strb	r3, [r5, #0]
		break;
   2cec4:	e7f3      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2cec6:	2302      	movs	r3, #2
   2cec8:	702b      	strb	r3, [r5, #0]
		break;
   2ceca:	e7f0      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2cecc:	2303      	movs	r3, #3
   2cece:	702b      	strb	r3, [r5, #0]
		break;
   2ced0:	e7ed      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2ced2:	2304      	movs	r3, #4
   2ced4:	702b      	strb	r3, [r5, #0]
		break;
   2ced6:	e7ea      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2ced8:	2305      	movs	r3, #5
   2ceda:	702b      	strb	r3, [r5, #0]
		break;
   2cedc:	e7e7      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   2cede:	2306      	movs	r3, #6
   2cee0:	702b      	strb	r3, [r5, #0]
		break;
   2cee2:	e7e4      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   2cee4:	2307      	movs	r3, #7
   2cee6:	702b      	strb	r3, [r5, #0]
		break;
   2cee8:	e7e1      	b.n	2ceae <lte_lc_system_mode_get+0x8e>
   2ceea:	4b28      	ldr	r3, [pc, #160]	; (2cf8c <lte_lc_system_mode_get+0x16c>)
   2ceec:	4a28      	ldr	r2, [pc, #160]	; (2cf90 <lte_lc_system_mode_get+0x170>)
   2ceee:	1a9b      	subs	r3, r3, r2
   2cef0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid system mode, assuming parsing error");
   2cef2:	f04f 0000 	mov.w	r0, #0
   2cef6:	2201      	movs	r2, #1
   2cef8:	f362 0002 	bfi	r0, r2, #0, #3
   2cefc:	f36f 00c5 	bfc	r0, #3, #3
   2cf00:	f363 108f 	bfi	r0, r3, #6, #10
   2cf04:	4924      	ldr	r1, [pc, #144]	; (2cf98 <lte_lc_system_mode_get+0x178>)
   2cf06:	f00f f89f 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2cf0a:	f06f 000d 	mvn.w	r0, #13
   2cf0e:	e011      	b.n	2cf34 <lte_lc_system_mode_get+0x114>
		case 0:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_AUTO;
   2cf10:	2300      	movs	r3, #0
   2cf12:	7023      	strb	r3, [r4, #0]
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
			return -EFAULT;
		}
	}

	if (sys_mode_current != *mode) {
   2cf14:	782b      	ldrb	r3, [r5, #0]
   2cf16:	4a21      	ldr	r2, [pc, #132]	; (2cf9c <lte_lc_system_mode_get+0x17c>)
   2cf18:	7812      	ldrb	r2, [r2, #0]
   2cf1a:	4293      	cmp	r3, r2
   2cf1c:	d001      	beq.n	2cf22 <lte_lc_system_mode_get+0x102>
		LOG_DBG("Current system mode updated from %d to %d",
			sys_mode_current, *mode);
		sys_mode_current = *mode;
   2cf1e:	4a1f      	ldr	r2, [pc, #124]	; (2cf9c <lte_lc_system_mode_get+0x17c>)
   2cf20:	7013      	strb	r3, [r2, #0]
	}

	if ((preference != NULL) && (mode_pref_current != *preference)) {
   2cf22:	b35c      	cbz	r4, 2cf7c <lte_lc_system_mode_get+0x15c>
   2cf24:	7823      	ldrb	r3, [r4, #0]
   2cf26:	4a1e      	ldr	r2, [pc, #120]	; (2cfa0 <lte_lc_system_mode_get+0x180>)
   2cf28:	7812      	ldrb	r2, [r2, #0]
   2cf2a:	4293      	cmp	r3, r2
   2cf2c:	d028      	beq.n	2cf80 <lte_lc_system_mode_get+0x160>
		LOG_DBG("Current system mode preference updated from %d to %d",
			mode_pref_current, *preference);
		mode_pref_current = *preference;
   2cf2e:	4a1c      	ldr	r2, [pc, #112]	; (2cfa0 <lte_lc_system_mode_get+0x180>)
   2cf30:	7013      	strb	r3, [r2, #0]
	}

	return 0;
   2cf32:	2000      	movs	r0, #0
}
   2cf34:	b007      	add	sp, #28
   2cf36:	bd30      	pop	{r4, r5, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   2cf38:	2301      	movs	r3, #1
   2cf3a:	7023      	strb	r3, [r4, #0]
			break;
   2cf3c:	e7ea      	b.n	2cf14 <lte_lc_system_mode_get+0xf4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   2cf3e:	2302      	movs	r3, #2
   2cf40:	7023      	strb	r3, [r4, #0]
			break;
   2cf42:	e7e7      	b.n	2cf14 <lte_lc_system_mode_get+0xf4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   2cf44:	2303      	movs	r3, #3
   2cf46:	7023      	strb	r3, [r4, #0]
			break;
   2cf48:	e7e4      	b.n	2cf14 <lte_lc_system_mode_get+0xf4>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   2cf4a:	2304      	movs	r3, #4
   2cf4c:	7023      	strb	r3, [r4, #0]
			break;
   2cf4e:	e7e1      	b.n	2cf14 <lte_lc_system_mode_get+0xf4>
   2cf50:	4b0e      	ldr	r3, [pc, #56]	; (2cf8c <lte_lc_system_mode_get+0x16c>)
   2cf52:	490f      	ldr	r1, [pc, #60]	; (2cf90 <lte_lc_system_mode_get+0x170>)
   2cf54:	1a5b      	subs	r3, r3, r1
   2cf56:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   2cf58:	f04f 0000 	mov.w	r0, #0
   2cf5c:	2101      	movs	r1, #1
   2cf5e:	f361 0002 	bfi	r0, r1, #0, #3
   2cf62:	f36f 00c5 	bfc	r0, #3, #3
   2cf66:	f363 108f 	bfi	r0, r3, #6, #10
   2cf6a:	490e      	ldr	r1, [pc, #56]	; (2cfa4 <lte_lc_system_mode_get+0x184>)
   2cf6c:	f00f f86c 	bl	3c048 <log_string_sync>
			return -EFAULT;
   2cf70:	f06f 000d 	mvn.w	r0, #13
   2cf74:	e7de      	b.n	2cf34 <lte_lc_system_mode_get+0x114>
		return -EINVAL;
   2cf76:	f06f 0015 	mvn.w	r0, #21
}
   2cf7a:	4770      	bx	lr
	return 0;
   2cf7c:	2000      	movs	r0, #0
   2cf7e:	e7d9      	b.n	2cf34 <lte_lc_system_mode_get+0x114>
   2cf80:	2000      	movs	r0, #0
   2cf82:	e7d7      	b.n	2cf34 <lte_lc_system_mode_get+0x114>
   2cf84:	000439a0 	.word	0x000439a0
   2cf88:	000439bc 	.word	0x000439bc
   2cf8c:	000412a0 	.word	0x000412a0
   2cf90:	00041200 	.word	0x00041200
   2cf94:	000439cc 	.word	0x000439cc
   2cf98:	000439f4 	.word	0x000439f4
   2cf9c:	20010e08 	.word	0x20010e08
   2cfa0:	20010e04 	.word	0x20010e04
   2cfa4:	00043a20 	.word	0x00043a20

0002cfa8 <init_and_config>:
{
   2cfa8:	b510      	push	{r4, lr}
	if (is_initialized) {
   2cfaa:	4b30      	ldr	r3, [pc, #192]	; (2d06c <init_and_config+0xc4>)
   2cfac:	781b      	ldrb	r3, [r3, #0]
   2cfae:	b113      	cbz	r3, 2cfb6 <init_and_config+0xe>
		return 0;
   2cfb0:	2400      	movs	r4, #0
}
   2cfb2:	4620      	mov	r0, r4
   2cfb4:	bd10      	pop	{r4, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2cfb6:	2201      	movs	r2, #1
   2cfb8:	2100      	movs	r1, #0
   2cfba:	482d      	ldr	r0, [pc, #180]	; (2d070 <init_and_config+0xc8>)
   2cfbc:	f012 fe3d 	bl	3fc3a <z_impl_k_sem_init>
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   2cfc0:	492c      	ldr	r1, [pc, #176]	; (2d074 <init_and_config+0xcc>)
   2cfc2:	482d      	ldr	r0, [pc, #180]	; (2d078 <init_and_config+0xd0>)
   2cfc4:	f7ff ff2c 	bl	2ce20 <lte_lc_system_mode_get>
	if (err) {
   2cfc8:	4604      	mov	r4, r0
   2cfca:	b9c8      	cbnz	r0, 2d000 <init_and_config+0x58>
	if ((sys_mode_current != sys_mode_target) ||
   2cfcc:	4b2a      	ldr	r3, [pc, #168]	; (2d078 <init_and_config+0xd0>)
   2cfce:	781b      	ldrb	r3, [r3, #0]
   2cfd0:	4a2a      	ldr	r2, [pc, #168]	; (2d07c <init_and_config+0xd4>)
   2cfd2:	7810      	ldrb	r0, [r2, #0]
   2cfd4:	4283      	cmp	r3, r0
   2cfd6:	d105      	bne.n	2cfe4 <init_and_config+0x3c>
	    (mode_pref_current != mode_pref_target)) {
   2cfd8:	4b26      	ldr	r3, [pc, #152]	; (2d074 <init_and_config+0xcc>)
   2cfda:	781a      	ldrb	r2, [r3, #0]
   2cfdc:	4b28      	ldr	r3, [pc, #160]	; (2d080 <init_and_config+0xd8>)
   2cfde:	781b      	ldrb	r3, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   2cfe0:	429a      	cmp	r2, r3
   2cfe2:	d005      	beq.n	2cff0 <init_and_config+0x48>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   2cfe4:	4b26      	ldr	r3, [pc, #152]	; (2d080 <init_and_config+0xd8>)
   2cfe6:	7819      	ldrb	r1, [r3, #0]
   2cfe8:	f7ff feac 	bl	2cd44 <lte_lc_system_mode_set>
		if (err) {
   2cfec:	4604      	mov	r4, r0
   2cfee:	b9c8      	cbnz	r0, 2d024 <init_and_config+0x7c>
	err = enable_notifications();
   2cff0:	f7ff fc22 	bl	2c838 <enable_notifications>
	if (err) {
   2cff4:	4604      	mov	r4, r0
   2cff6:	bb38      	cbnz	r0, 2d048 <init_and_config+0xa0>
	is_initialized = true;
   2cff8:	4b1c      	ldr	r3, [pc, #112]	; (2d06c <init_and_config+0xc4>)
   2cffa:	2201      	movs	r2, #1
   2cffc:	701a      	strb	r2, [r3, #0]
	return 0;
   2cffe:	e7d8      	b.n	2cfb2 <init_and_config+0xa>
   2d000:	4b20      	ldr	r3, [pc, #128]	; (2d084 <init_and_config+0xdc>)
   2d002:	4a21      	ldr	r2, [pc, #132]	; (2d088 <init_and_config+0xe0>)
   2d004:	1a9b      	subs	r3, r3, r2
   2d006:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get current system mode, error: %d", err);
   2d008:	f04f 0000 	mov.w	r0, #0
   2d00c:	2201      	movs	r2, #1
   2d00e:	f362 0002 	bfi	r0, r2, #0, #3
   2d012:	f36f 00c5 	bfc	r0, #3, #3
   2d016:	f363 108f 	bfi	r0, r3, #6, #10
   2d01a:	4622      	mov	r2, r4
   2d01c:	491b      	ldr	r1, [pc, #108]	; (2d08c <init_and_config+0xe4>)
   2d01e:	f00f f813 	bl	3c048 <log_string_sync>
		return err;
   2d022:	e7c6      	b.n	2cfb2 <init_and_config+0xa>
   2d024:	4b17      	ldr	r3, [pc, #92]	; (2d084 <init_and_config+0xdc>)
   2d026:	4a18      	ldr	r2, [pc, #96]	; (2d088 <init_and_config+0xe0>)
   2d028:	1a9b      	subs	r3, r3, r2
   2d02a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not set system mode, error: %d", err);
   2d02c:	f04f 0000 	mov.w	r0, #0
   2d030:	2201      	movs	r2, #1
   2d032:	f362 0002 	bfi	r0, r2, #0, #3
   2d036:	f36f 00c5 	bfc	r0, #3, #3
   2d03a:	f363 108f 	bfi	r0, r3, #6, #10
   2d03e:	4622      	mov	r2, r4
   2d040:	4913      	ldr	r1, [pc, #76]	; (2d090 <init_and_config+0xe8>)
   2d042:	f00f f801 	bl	3c048 <log_string_sync>
			return err;
   2d046:	e7b4      	b.n	2cfb2 <init_and_config+0xa>
   2d048:	4b0e      	ldr	r3, [pc, #56]	; (2d084 <init_and_config+0xdc>)
   2d04a:	4a0f      	ldr	r2, [pc, #60]	; (2d088 <init_and_config+0xe0>)
   2d04c:	1a9b      	subs	r3, r3, r2
   2d04e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable notifications");
   2d050:	f04f 0000 	mov.w	r0, #0
   2d054:	2201      	movs	r2, #1
   2d056:	f362 0002 	bfi	r0, r2, #0, #3
   2d05a:	f36f 00c5 	bfc	r0, #3, #3
   2d05e:	f363 108f 	bfi	r0, r3, #6, #10
   2d062:	490c      	ldr	r1, [pc, #48]	; (2d094 <init_and_config+0xec>)
   2d064:	f00e fff0 	bl	3c048 <log_string_sync>
		return err;
   2d068:	e7a3      	b.n	2cfb2 <init_and_config+0xa>
   2d06a:	bf00      	nop
   2d06c:	20010e03 	.word	0x20010e03
   2d070:	20010274 	.word	0x20010274
   2d074:	20010e04 	.word	0x20010e04
   2d078:	20010e08 	.word	0x20010e08
   2d07c:	2000c8c7 	.word	0x2000c8c7
   2d080:	20010e05 	.word	0x20010e05
   2d084:	000412a0 	.word	0x000412a0
   2d088:	00041200 	.word	0x00041200
   2d08c:	00043a40 	.word	0x00043a40
   2d090:	00043a70 	.word	0x00043a70
   2d094:	00043a98 	.word	0x00043a98

0002d098 <lte_lc_func_mode_get>:
int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
	int err;
	uint16_t mode_tmp;

	if (mode == NULL) {
   2d098:	b328      	cbz	r0, 2d0e6 <lte_lc_func_mode_get+0x4e>
{
   2d09a:	b510      	push	{r4, lr}
   2d09c:	b082      	sub	sp, #8
   2d09e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	/* Exactly one parameter is expected to match. */
	err = nrf_modem_at_scanf(AT_CFUN_READ, "+CFUN: %hu", &mode_tmp);
   2d0a0:	f10d 0206 	add.w	r2, sp, #6
   2d0a4:	4911      	ldr	r1, [pc, #68]	; (2d0ec <lte_lc_func_mode_get+0x54>)
   2d0a6:	4812      	ldr	r0, [pc, #72]	; (2d0f0 <lte_lc_func_mode_get+0x58>)
   2d0a8:	f007 feee 	bl	34e88 <nrf_modem_at_scanf>
	if (err != 1) {
   2d0ac:	2801      	cmp	r0, #1
   2d0ae:	d105      	bne.n	2d0bc <lte_lc_func_mode_get+0x24>
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
		return -EFAULT;
	}

	*mode = mode_tmp;
   2d0b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2d0b4:	7023      	strb	r3, [r4, #0]

	return 0;
   2d0b6:	2000      	movs	r0, #0
}
   2d0b8:	b002      	add	sp, #8
   2d0ba:	bd10      	pop	{r4, pc}
   2d0bc:	4b0d      	ldr	r3, [pc, #52]	; (2d0f4 <lte_lc_func_mode_get+0x5c>)
   2d0be:	4a0e      	ldr	r2, [pc, #56]	; (2d0f8 <lte_lc_func_mode_get+0x60>)
   2d0c0:	1a9b      	subs	r3, r3, r2
   2d0c2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("AT command failed, nrf_modem_at_scanf() returned error: %d", err);
   2d0c4:	f04f 0400 	mov.w	r4, #0
   2d0c8:	2201      	movs	r2, #1
   2d0ca:	f362 0402 	bfi	r4, r2, #0, #3
   2d0ce:	f36f 04c5 	bfc	r4, #3, #3
   2d0d2:	f363 148f 	bfi	r4, r3, #6, #10
   2d0d6:	4602      	mov	r2, r0
   2d0d8:	4908      	ldr	r1, [pc, #32]	; (2d0fc <lte_lc_func_mode_get+0x64>)
   2d0da:	4620      	mov	r0, r4
   2d0dc:	f00e ffb4 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2d0e0:	f06f 000d 	mvn.w	r0, #13
   2d0e4:	e7e8      	b.n	2d0b8 <lte_lc_func_mode_get+0x20>
		return -EINVAL;
   2d0e6:	f06f 0015 	mvn.w	r0, #21
}
   2d0ea:	4770      	bx	lr
   2d0ec:	00043ab8 	.word	0x00043ab8
   2d0f0:	00043ac4 	.word	0x00043ac4
   2d0f4:	000412a0 	.word	0x000412a0
   2d0f8:	00041200 	.word	0x00041200
   2d0fc:	00043ad0 	.word	0x00043ad0

0002d100 <lte_lc_func_mode_set>:

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   2d100:	b510      	push	{r4, lr}
   2d102:	4604      	mov	r4, r0
	int err;

	switch (mode) {
   2d104:	282c      	cmp	r0, #44	; 0x2c
   2d106:	d84e      	bhi.n	2d1a6 <lte_lc_func_mode_set+0xa6>
   2d108:	e8df f000 	tbb	[pc, r0]
   2d10c:	4d1b351b 	.word	0x4d1b351b
   2d110:	4d4d4d1b 	.word	0x4d4d4d1b
   2d114:	4d4d4d4d 	.word	0x4d4d4d4d
   2d118:	4d4d4d4d 	.word	0x4d4d4d4d
   2d11c:	4d4d4d4d 	.word	0x4d4d4d4d
   2d120:	4d4d171b 	.word	0x4d4d171b
   2d124:	4d4d4d4d 	.word	0x4d4d4d4d
   2d128:	1b1b4d4d 	.word	0x1b1b4d4d
   2d12c:	4d4d4d4d 	.word	0x4d4d4d4d
   2d130:	4d4d4d4d 	.word	0x4d4d4d4d
   2d134:	4d4d1b1b 	.word	0x4d4d1b1b
   2d138:	1b          	.byte	0x1b
   2d139:	00          	.byte	0x00
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   2d13a:	f7ff fb7d 	bl	2c838 <enable_notifications>
		if (err) {
   2d13e:	4602      	mov	r2, r0
   2d140:	b930      	cbnz	r0, 2d150 <lte_lc_func_mode_set+0x50>
	default:
		LOG_ERR("Invalid functional mode: %d", mode);
		return -EINVAL;
	}

	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   2d142:	4621      	mov	r1, r4
   2d144:	4823      	ldr	r0, [pc, #140]	; (2d1d4 <lte_lc_func_mode_set+0xd4>)
   2d146:	f007 fe11 	bl	34d6c <nrf_modem_at_printf>
   2d14a:	2800      	cmp	r0, #0
   2d14c:	d13f      	bne.n	2d1ce <lte_lc_func_mode_set+0xce>
}
   2d14e:	bd10      	pop	{r4, pc}
   2d150:	4b21      	ldr	r3, [pc, #132]	; (2d1d8 <lte_lc_func_mode_set+0xd8>)
   2d152:	4922      	ldr	r1, [pc, #136]	; (2d1dc <lte_lc_func_mode_set+0xdc>)
   2d154:	1a5b      	subs	r3, r3, r1
   2d156:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to enable notifications, error: %d", err);
   2d158:	f04f 0000 	mov.w	r0, #0
   2d15c:	2101      	movs	r1, #1
   2d15e:	f361 0002 	bfi	r0, r1, #0, #3
   2d162:	f36f 00c5 	bfc	r0, #3, #3
   2d166:	f363 108f 	bfi	r0, r3, #6, #10
   2d16a:	491d      	ldr	r1, [pc, #116]	; (2d1e0 <lte_lc_func_mode_set+0xe0>)
   2d16c:	f00e ff6c 	bl	3c048 <log_string_sync>
			return -EFAULT;
   2d170:	f06f 000d 	mvn.w	r0, #13
   2d174:	e7eb      	b.n	2d14e <lte_lc_func_mode_set+0x4e>
		err = enable_notifications();
   2d176:	f7ff fb5f 	bl	2c838 <enable_notifications>
		if (err) {
   2d17a:	4602      	mov	r2, r0
   2d17c:	2800      	cmp	r0, #0
   2d17e:	d0e0      	beq.n	2d142 <lte_lc_func_mode_set+0x42>
   2d180:	4b15      	ldr	r3, [pc, #84]	; (2d1d8 <lte_lc_func_mode_set+0xd8>)
   2d182:	4916      	ldr	r1, [pc, #88]	; (2d1dc <lte_lc_func_mode_set+0xdc>)
   2d184:	1a5b      	subs	r3, r3, r1
   2d186:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to enable notifications, error: %d", err);
   2d188:	f04f 0000 	mov.w	r0, #0
   2d18c:	2101      	movs	r1, #1
   2d18e:	f361 0002 	bfi	r0, r1, #0, #3
   2d192:	f36f 00c5 	bfc	r0, #3, #3
   2d196:	f363 108f 	bfi	r0, r3, #6, #10
   2d19a:	4911      	ldr	r1, [pc, #68]	; (2d1e0 <lte_lc_func_mode_set+0xe0>)
   2d19c:	f00e ff54 	bl	3c048 <log_string_sync>
			return -EFAULT;
   2d1a0:	f06f 000d 	mvn.w	r0, #13
   2d1a4:	e7d3      	b.n	2d14e <lte_lc_func_mode_set+0x4e>
   2d1a6:	4b0c      	ldr	r3, [pc, #48]	; (2d1d8 <lte_lc_func_mode_set+0xd8>)
   2d1a8:	4a0c      	ldr	r2, [pc, #48]	; (2d1dc <lte_lc_func_mode_set+0xdc>)
   2d1aa:	1a9b      	subs	r3, r3, r2
   2d1ac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid functional mode: %d", mode);
   2d1ae:	f04f 0000 	mov.w	r0, #0
   2d1b2:	2201      	movs	r2, #1
   2d1b4:	f362 0002 	bfi	r0, r2, #0, #3
   2d1b8:	f36f 00c5 	bfc	r0, #3, #3
   2d1bc:	f363 108f 	bfi	r0, r3, #6, #10
   2d1c0:	4622      	mov	r2, r4
   2d1c2:	4908      	ldr	r1, [pc, #32]	; (2d1e4 <lte_lc_func_mode_set+0xe4>)
   2d1c4:	f00e ff40 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2d1c8:	f06f 0015 	mvn.w	r0, #21
   2d1cc:	e7bf      	b.n	2d14e <lte_lc_func_mode_set+0x4e>
	return nrf_modem_at_printf("AT+CFUN=%d", mode) ? -EFAULT : 0;
   2d1ce:	f06f 000d 	mvn.w	r0, #13
   2d1d2:	e7bc      	b.n	2d14e <lte_lc_func_mode_set+0x4e>
   2d1d4:	00043b54 	.word	0x00043b54
   2d1d8:	000412a0 	.word	0x000412a0
   2d1dc:	00041200 	.word	0x00041200
   2d1e0:	00043b0c 	.word	0x00043b0c
   2d1e4:	00043b38 	.word	0x00043b38

0002d1e8 <connect_lte>:
{
   2d1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d1ec:	b082      	sub	sp, #8
	if (!is_initialized) {
   2d1ee:	4b61      	ldr	r3, [pc, #388]	; (2d374 <connect_lte+0x18c>)
   2d1f0:	781b      	ldrb	r3, [r3, #0]
   2d1f2:	2b00      	cmp	r3, #0
   2d1f4:	d07f      	beq.n	2d2f6 <connect_lte+0x10e>
   2d1f6:	4606      	mov	r6, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d1f8:	4b5f      	ldr	r3, [pc, #380]	; (2d378 <connect_lte+0x190>)
   2d1fa:	2101      	movs	r1, #1
   2d1fc:	e8d3 2fef 	ldaex	r2, [r3]
   2d200:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2d204:	2800      	cmp	r0, #0
   2d206:	d1f9      	bne.n	2d1fc <connect_lte+0x14>
	if (atomic_set(&in_progress, 1)) {
   2d208:	2a00      	cmp	r2, #0
   2d20a:	f040 80b0 	bne.w	2d36e <connect_lte+0x186>
	err = lte_lc_nw_reg_status_get(&reg_status);
   2d20e:	f10d 0006 	add.w	r0, sp, #6
   2d212:	f7ff fd59 	bl	2ccc8 <lte_lc_nw_reg_status_get>
	if (err) {
   2d216:	4604      	mov	r4, r0
   2d218:	2800      	cmp	r0, #0
   2d21a:	d17f      	bne.n	2d31c <connect_lte+0x134>
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   2d21c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2d220:	2b01      	cmp	r3, #1
   2d222:	d064      	beq.n	2d2ee <connect_lte+0x106>
   2d224:	2b05      	cmp	r3, #5
   2d226:	d062      	beq.n	2d2ee <connect_lte+0x106>
	if (blocking) {
   2d228:	2e00      	cmp	r6, #0
   2d22a:	f040 808a 	bne.w	2d342 <connect_lte+0x15a>
{
   2d22e:	2502      	movs	r5, #2
		tries--;
   2d230:	3d01      	subs	r5, #1
		err = lte_lc_func_mode_get(&current_func_mode);
   2d232:	f10d 0007 	add.w	r0, sp, #7
   2d236:	f7ff ff2f 	bl	2d098 <lte_lc_func_mode_get>
		if (err) {
   2d23a:	2800      	cmp	r0, #0
   2d23c:	f040 808e 	bne.w	2d35c <connect_lte+0x174>
		    ((current_func_mode == LTE_LC_FUNC_MODE_POWER_OFF) ||
   2d240:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (!IS_ENABLED(CONFIG_LTE_NETWORK_DEFAULT) &&
   2d244:	b10b      	cbz	r3, 2d24a <connect_lte+0x62>
   2d246:	2b04      	cmp	r3, #4
   2d248:	d108      	bne.n	2d25c <connect_lte+0x74>
			err = lte_lc_system_mode_set(sys_mode_target, mode_pref_current);
   2d24a:	4b4c      	ldr	r3, [pc, #304]	; (2d37c <connect_lte+0x194>)
   2d24c:	7819      	ldrb	r1, [r3, #0]
   2d24e:	4b4c      	ldr	r3, [pc, #304]	; (2d380 <connect_lte+0x198>)
   2d250:	7818      	ldrb	r0, [r3, #0]
   2d252:	f7ff fd77 	bl	2cd44 <lte_lc_system_mode_set>
			if (err) {
   2d256:	2800      	cmp	r0, #0
   2d258:	f040 8083 	bne.w	2d362 <connect_lte+0x17a>
		err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_NORMAL);
   2d25c:	2001      	movs	r0, #1
   2d25e:	f7ff ff4f 	bl	2d100 <lte_lc_func_mode_set>
		if (err || !blocking) {
   2d262:	4604      	mov	r4, r0
   2d264:	2800      	cmp	r0, #0
   2d266:	d13a      	bne.n	2d2de <connect_lte+0xf6>
   2d268:	2e00      	cmp	r6, #0
   2d26a:	d038      	beq.n	2d2de <connect_lte+0xf6>
	return z_impl_k_sem_take(sem, timeout);
   2d26c:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2d270:	2300      	movs	r3, #0
   2d272:	4844      	ldr	r0, [pc, #272]	; (2d384 <connect_lte+0x19c>)
   2d274:	f009 f996 	bl	365a4 <z_impl_k_sem_take>
   2d278:	4604      	mov	r4, r0
		if (err == -EAGAIN) {
   2d27a:	f110 0f0b 	cmn.w	r0, #11
   2d27e:	d12e      	bne.n	2d2de <connect_lte+0xf6>
   2d280:	4b41      	ldr	r3, [pc, #260]	; (2d388 <connect_lte+0x1a0>)
   2d282:	4a42      	ldr	r2, [pc, #264]	; (2d38c <connect_lte+0x1a4>)
   2d284:	1a9b      	subs	r3, r3, r2
   2d286:	08db      	lsrs	r3, r3, #3
			LOG_INF("Network connection attempt timed out");
   2d288:	2203      	movs	r2, #3
   2d28a:	f362 0702 	bfi	r7, r2, #0, #3
   2d28e:	f36f 07c5 	bfc	r7, #3, #3
   2d292:	f363 178f 	bfi	r7, r3, #6, #10
   2d296:	493e      	ldr	r1, [pc, #248]	; (2d390 <connect_lte+0x1a8>)
   2d298:	4638      	mov	r0, r7
   2d29a:	f00e fed5 	bl	3c048 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2d29e:	2d00      	cmp	r5, #0
   2d2a0:	dd59      	ble.n	2d356 <connect_lte+0x16e>
				if (sys_mode_target == sys_mode_preferred) {
   2d2a2:	4b37      	ldr	r3, [pc, #220]	; (2d380 <connect_lte+0x198>)
   2d2a4:	781b      	ldrb	r3, [r3, #0]
   2d2a6:	2b01      	cmp	r3, #1
   2d2a8:	d051      	beq.n	2d34e <connect_lte+0x166>
					sys_mode_target = sys_mode_preferred;
   2d2aa:	4b35      	ldr	r3, [pc, #212]	; (2d380 <connect_lte+0x198>)
   2d2ac:	2201      	movs	r2, #1
   2d2ae:	701a      	strb	r2, [r3, #0]
				err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_OFFLINE);
   2d2b0:	2004      	movs	r0, #4
   2d2b2:	f7ff ff25 	bl	2d100 <lte_lc_func_mode_set>
				if (err) {
   2d2b6:	4604      	mov	r4, r0
   2d2b8:	2800      	cmp	r0, #0
   2d2ba:	d155      	bne.n	2d368 <connect_lte+0x180>
   2d2bc:	4b32      	ldr	r3, [pc, #200]	; (2d388 <connect_lte+0x1a0>)
   2d2be:	4a33      	ldr	r2, [pc, #204]	; (2d38c <connect_lte+0x1a4>)
   2d2c0:	1a9b      	subs	r3, r3, r2
   2d2c2:	08db      	lsrs	r3, r3, #3
				LOG_INF("Using fallback network mode");
   2d2c4:	2203      	movs	r2, #3
   2d2c6:	f362 0802 	bfi	r8, r2, #0, #3
   2d2ca:	f36f 08c5 	bfc	r8, #3, #3
   2d2ce:	f363 188f 	bfi	r8, r3, #6, #10
   2d2d2:	4930      	ldr	r1, [pc, #192]	; (2d394 <connect_lte+0x1ac>)
   2d2d4:	4640      	mov	r0, r8
   2d2d6:	f00e feb7 	bl	3c048 <log_string_sync>
	} while (tries > 0);
   2d2da:	2d00      	cmp	r5, #0
   2d2dc:	dca8      	bgt.n	2d230 <connect_lte+0x48>
   2d2de:	4b26      	ldr	r3, [pc, #152]	; (2d378 <connect_lte+0x190>)
   2d2e0:	2200      	movs	r2, #0
   2d2e2:	e8d3 1fef 	ldaex	r1, [r3]
   2d2e6:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2d2ea:	2800      	cmp	r0, #0
   2d2ec:	d1f9      	bne.n	2d2e2 <connect_lte+0xfa>
}
   2d2ee:	4620      	mov	r0, r4
   2d2f0:	b002      	add	sp, #8
   2d2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d2f6:	4b24      	ldr	r3, [pc, #144]	; (2d388 <connect_lte+0x1a0>)
   2d2f8:	4a24      	ldr	r2, [pc, #144]	; (2d38c <connect_lte+0x1a4>)
   2d2fa:	1a9b      	subs	r3, r3, r2
   2d2fc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("The LTE link controller is not initialized");
   2d2fe:	f04f 0000 	mov.w	r0, #0
   2d302:	2201      	movs	r2, #1
   2d304:	f362 0002 	bfi	r0, r2, #0, #3
   2d308:	f36f 00c5 	bfc	r0, #3, #3
   2d30c:	f363 108f 	bfi	r0, r3, #6, #10
   2d310:	4921      	ldr	r1, [pc, #132]	; (2d398 <connect_lte+0x1b0>)
   2d312:	f00e fe99 	bl	3c048 <log_string_sync>
		return -EPERM;
   2d316:	f04f 34ff 	mov.w	r4, #4294967295
   2d31a:	e7e8      	b.n	2d2ee <connect_lte+0x106>
   2d31c:	4b1a      	ldr	r3, [pc, #104]	; (2d388 <connect_lte+0x1a0>)
   2d31e:	4a1b      	ldr	r2, [pc, #108]	; (2d38c <connect_lte+0x1a4>)
   2d320:	1a9b      	subs	r3, r3, r2
   2d322:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get current registration status");
   2d324:	f04f 0000 	mov.w	r0, #0
   2d328:	2201      	movs	r2, #1
   2d32a:	f362 0002 	bfi	r0, r2, #0, #3
   2d32e:	f36f 00c5 	bfc	r0, #3, #3
   2d332:	f363 108f 	bfi	r0, r3, #6, #10
   2d336:	4919      	ldr	r1, [pc, #100]	; (2d39c <connect_lte+0x1b4>)
   2d338:	f00e fe86 	bl	3c048 <log_string_sync>
		return -EFAULT;
   2d33c:	f06f 040d 	mvn.w	r4, #13
   2d340:	e7d5      	b.n	2d2ee <connect_lte+0x106>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2d342:	2201      	movs	r2, #1
   2d344:	2100      	movs	r1, #0
   2d346:	480f      	ldr	r0, [pc, #60]	; (2d384 <connect_lte+0x19c>)
   2d348:	f012 fc77 	bl	3fc3a <z_impl_k_sem_init>
   2d34c:	e76f      	b.n	2d22e <connect_lte+0x46>
					sys_mode_target = sys_mode_fallback;
   2d34e:	4b0c      	ldr	r3, [pc, #48]	; (2d380 <connect_lte+0x198>)
   2d350:	2202      	movs	r2, #2
   2d352:	701a      	strb	r2, [r3, #0]
   2d354:	e7ac      	b.n	2d2b0 <connect_lte+0xc8>
				err = -ETIMEDOUT;
   2d356:	f06f 0473 	mvn.w	r4, #115	; 0x73
   2d35a:	e7be      	b.n	2d2da <connect_lte+0xf2>
			err = -EFAULT;
   2d35c:	f06f 040d 	mvn.w	r4, #13
   2d360:	e7bd      	b.n	2d2de <connect_lte+0xf6>
				err = -EFAULT;
   2d362:	f06f 040d 	mvn.w	r4, #13
   2d366:	e7ba      	b.n	2d2de <connect_lte+0xf6>
					err = -EFAULT;
   2d368:	f06f 040d 	mvn.w	r4, #13
   2d36c:	e7b7      	b.n	2d2de <connect_lte+0xf6>
		return -EINPROGRESS;
   2d36e:	f06f 0476 	mvn.w	r4, #118	; 0x76
   2d372:	e7bc      	b.n	2d2ee <connect_lte+0x106>
   2d374:	20010e03 	.word	0x20010e03
   2d378:	20010270 	.word	0x20010270
   2d37c:	20010e04 	.word	0x20010e04
   2d380:	2000c8c7 	.word	0x2000c8c7
   2d384:	20010274 	.word	0x20010274
   2d388:	000412a0 	.word	0x000412a0
   2d38c:	00041200 	.word	0x00041200
   2d390:	00043bb8 	.word	0x00043bb8
   2d394:	00043be0 	.word	0x00043be0
   2d398:	00043b60 	.word	0x00043b60
   2d39c:	00043b8c 	.word	0x00043b8c

0002d3a0 <event_handler_list_find_node>:
{
   2d3a0:	b410      	push	{r4}
   2d3a2:	4604      	mov	r4, r0
	return list->head;
   2d3a4:	4b09      	ldr	r3, [pc, #36]	; (2d3cc <event_handler_list_find_node+0x2c>)
   2d3a6:	6818      	ldr	r0, [r3, #0]
   2d3a8:	2200      	movs	r2, #0
   2d3aa:	e004      	b.n	2d3b6 <event_handler_list_find_node+0x16>
			*prev_out = prev;
   2d3ac:	6022      	str	r2, [r4, #0]
}
   2d3ae:	bc10      	pop	{r4}
   2d3b0:	4770      	bx	lr
   2d3b2:	4602      	mov	r2, r0
   2d3b4:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2d3b6:	2800      	cmp	r0, #0
   2d3b8:	d0f9      	beq.n	2d3ae <event_handler_list_find_node+0xe>
		if (curr->handler == handler) {
   2d3ba:	6843      	ldr	r3, [r0, #4]
   2d3bc:	428b      	cmp	r3, r1
   2d3be:	d0f5      	beq.n	2d3ac <event_handler_list_find_node+0xc>
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2d3c0:	4603      	mov	r3, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d3c2:	2800      	cmp	r0, #0
   2d3c4:	d0f5      	beq.n	2d3b2 <event_handler_list_find_node+0x12>
	return node->next;
   2d3c6:	6803      	ldr	r3, [r0, #0]
   2d3c8:	e7f3      	b.n	2d3b2 <event_handler_list_find_node+0x12>
   2d3ca:	bf00      	nop
   2d3cc:	20010334 	.word	0x20010334

0002d3d0 <get_ptw_multiplier>:
	switch (lte_mode) {
   2d3d0:	2807      	cmp	r0, #7
   2d3d2:	d004      	beq.n	2d3de <get_ptw_multiplier+0xe>
   2d3d4:	2809      	cmp	r0, #9
   2d3d6:	d006      	beq.n	2d3e6 <get_ptw_multiplier+0x16>
   2d3d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2d3dc:	4770      	bx	lr
		*ptw_multiplier = 1.28;
   2d3de:	4b04      	ldr	r3, [pc, #16]	; (2d3f0 <get_ptw_multiplier+0x20>)
   2d3e0:	600b      	str	r3, [r1, #0]
	return 0;
   2d3e2:	2000      	movs	r0, #0
		break;
   2d3e4:	4770      	bx	lr
		*ptw_multiplier = 2.56;
   2d3e6:	4b03      	ldr	r3, [pc, #12]	; (2d3f4 <get_ptw_multiplier+0x24>)
   2d3e8:	600b      	str	r3, [r1, #0]
	return 0;
   2d3ea:	2000      	movs	r0, #0
}
   2d3ec:	4770      	bx	lr
   2d3ee:	bf00      	nop
   2d3f0:	3fa3d70a 	.word	0x3fa3d70a
   2d3f4:	4023d70a 	.word	0x4023d70a

0002d3f8 <get_nw_reg_status>:
/* Get network registration status from CEREG response list.
 * Returns the (positive) registration value if it's found, otherwise a negative
 * error code.
 */
static int get_nw_reg_status(struct at_param_list *list, bool is_notif)
{
   2d3f8:	b500      	push	{lr}
   2d3fa:	b083      	sub	sp, #12
	int err, reg_status;
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   2d3fc:	b1f1      	cbz	r1, 2d43c <get_nw_reg_status+0x44>
   2d3fe:	2101      	movs	r1, #1
					     AT_CEREG_READ_REG_STATUS_INDEX;

	err = at_params_int_get(list, reg_status_index, &reg_status);
   2d400:	aa01      	add	r2, sp, #4
   2d402:	f011 f8a2 	bl	3e54a <at_params_int_get>
	if (err) {
   2d406:	4602      	mov	r2, r0
   2d408:	b9e0      	cbnz	r0, 2d444 <get_nw_reg_status+0x4c>
		return err;
	}

	/* Check if the parsed value maps to a valid registration status */
	switch (reg_status) {
   2d40a:	9a01      	ldr	r2, [sp, #4]
   2d40c:	2a08      	cmp	r2, #8
   2d40e:	d019      	beq.n	2d444 <get_nw_reg_status+0x4c>
   2d410:	dd16      	ble.n	2d440 <get_nw_reg_status+0x48>
   2d412:	2a5a      	cmp	r2, #90	; 0x5a
   2d414:	d016      	beq.n	2d444 <get_nw_reg_status+0x4c>
   2d416:	4b0d      	ldr	r3, [pc, #52]	; (2d44c <get_nw_reg_status+0x54>)
   2d418:	490d      	ldr	r1, [pc, #52]	; (2d450 <get_nw_reg_status+0x58>)
   2d41a:	1a5b      	subs	r3, r3, r1
   2d41c:	08db      	lsrs	r3, r3, #3
	case LTE_LC_NW_REG_REGISTERED_ROAMING:
	case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
	case LTE_LC_NW_REG_UICC_FAIL:
		break;
	default:
		LOG_ERR("Invalid network registration status: %d", reg_status);
   2d41e:	f04f 0000 	mov.w	r0, #0
   2d422:	2101      	movs	r1, #1
   2d424:	f361 0002 	bfi	r0, r1, #0, #3
   2d428:	f36f 00c5 	bfc	r0, #3, #3
   2d42c:	f363 108f 	bfi	r0, r3, #6, #10
   2d430:	4908      	ldr	r1, [pc, #32]	; (2d454 <get_nw_reg_status+0x5c>)
   2d432:	f00e fe09 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2d436:	f06f 0215 	mvn.w	r2, #21
   2d43a:	e003      	b.n	2d444 <get_nw_reg_status+0x4c>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   2d43c:	2102      	movs	r1, #2
   2d43e:	e7df      	b.n	2d400 <get_nw_reg_status+0x8>
	switch (reg_status) {
   2d440:	2a05      	cmp	r2, #5
   2d442:	d8e8      	bhi.n	2d416 <get_nw_reg_status+0x1e>
	}

	return reg_status;
}
   2d444:	4610      	mov	r0, r2
   2d446:	b003      	add	sp, #12
   2d448:	f85d fb04 	ldr.w	pc, [sp], #4
   2d44c:	000412a8 	.word	0x000412a8
   2d450:	00041200 	.word	0x00041200
   2d454:	00043cbc 	.word	0x00043cbc

0002d458 <event_handler_list_is_empty>:
	return list->head;
   2d458:	4b02      	ldr	r3, [pc, #8]	; (2d464 <event_handler_list_is_empty+0xc>)
   2d45a:	6818      	ldr	r0, [r3, #0]
}
   2d45c:	fab0 f080 	clz	r0, r0
   2d460:	0940      	lsrs	r0, r0, #5
   2d462:	4770      	bx	lr
   2d464:	20010334 	.word	0x20010334

0002d468 <event_handler_list_append_handler>:
{
   2d468:	b510      	push	{r4, lr}
   2d46a:	b082      	sub	sp, #8
   2d46c:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2d46e:	f04f 32ff 	mov.w	r2, #4294967295
   2d472:	f04f 33ff 	mov.w	r3, #4294967295
   2d476:	4817      	ldr	r0, [pc, #92]	; (2d4d4 <event_handler_list_append_handler+0x6c>)
   2d478:	f008 fdaa 	bl	35fd0 <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   2d47c:	4621      	mov	r1, r4
   2d47e:	a801      	add	r0, sp, #4
   2d480:	f7ff ff8e 	bl	2d3a0 <event_handler_list_find_node>
   2d484:	b128      	cbz	r0, 2d492 <event_handler_list_append_handler+0x2a>
	return z_impl_k_mutex_unlock(mutex);
   2d486:	4813      	ldr	r0, [pc, #76]	; (2d4d4 <event_handler_list_append_handler+0x6c>)
   2d488:	f008 fe98 	bl	361bc <z_impl_k_mutex_unlock>
		return 0;
   2d48c:	2000      	movs	r0, #0
}
   2d48e:	b002      	add	sp, #8
   2d490:	bd10      	pop	{r4, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   2d492:	2008      	movs	r0, #8
   2d494:	f012 fcf1 	bl	3fe7a <k_malloc>
   2d498:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2d49a:	b180      	cbz	r0, 2d4be <event_handler_list_append_handler+0x56>
   2d49c:	2200      	movs	r2, #0
   2d49e:	6002      	str	r2, [r0, #0]
   2d4a0:	6042      	str	r2, [r0, #4]
	to_ins->handler = handler;
   2d4a2:	9b01      	ldr	r3, [sp, #4]
   2d4a4:	605c      	str	r4, [r3, #4]
	parent->next = child;
   2d4a6:	601a      	str	r2, [r3, #0]
	return list->tail;
   2d4a8:	4a0b      	ldr	r2, [pc, #44]	; (2d4d8 <event_handler_list_append_handler+0x70>)
   2d4aa:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
   2d4ac:	b16a      	cbz	r2, 2d4ca <event_handler_list_append_handler+0x62>
	parent->next = child;
   2d4ae:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2d4b0:	4a09      	ldr	r2, [pc, #36]	; (2d4d8 <event_handler_list_append_handler+0x70>)
   2d4b2:	6053      	str	r3, [r2, #4]
   2d4b4:	4807      	ldr	r0, [pc, #28]	; (2d4d4 <event_handler_list_append_handler+0x6c>)
   2d4b6:	f008 fe81 	bl	361bc <z_impl_k_mutex_unlock>
	return 0;
   2d4ba:	2000      	movs	r0, #0
   2d4bc:	e7e7      	b.n	2d48e <event_handler_list_append_handler+0x26>
   2d4be:	4805      	ldr	r0, [pc, #20]	; (2d4d4 <event_handler_list_append_handler+0x6c>)
   2d4c0:	f008 fe7c 	bl	361bc <z_impl_k_mutex_unlock>
		return -ENOBUFS;
   2d4c4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2d4c8:	e7e1      	b.n	2d48e <event_handler_list_append_handler+0x26>
   2d4ca:	4a03      	ldr	r2, [pc, #12]	; (2d4d8 <event_handler_list_append_handler+0x70>)
   2d4cc:	6053      	str	r3, [r2, #4]
	list->head = node;
   2d4ce:	6013      	str	r3, [r2, #0]
}
   2d4d0:	e7f0      	b.n	2d4b4 <event_handler_list_append_handler+0x4c>
   2d4d2:	bf00      	nop
   2d4d4:	2000ca80 	.word	0x2000ca80
   2d4d8:	20010334 	.word	0x20010334

0002d4dc <event_handler_list_dispatch>:
{
   2d4dc:	b538      	push	{r3, r4, r5, lr}
   2d4de:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   2d4e0:	f7ff ffba 	bl	2d458 <event_handler_list_is_empty>
   2d4e4:	b100      	cbz	r0, 2d4e8 <event_handler_list_dispatch+0xc>
}
   2d4e6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   2d4e8:	f04f 32ff 	mov.w	r2, #4294967295
   2d4ec:	f04f 33ff 	mov.w	r3, #4294967295
   2d4f0:	480e      	ldr	r0, [pc, #56]	; (2d52c <event_handler_list_dispatch+0x50>)
   2d4f2:	f008 fd6d 	bl	35fd0 <z_impl_k_mutex_lock>
	return list->head;
   2d4f6:	4b0e      	ldr	r3, [pc, #56]	; (2d530 <event_handler_list_dispatch+0x54>)
   2d4f8:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2d4fa:	b11b      	cbz	r3, 2d504 <event_handler_list_dispatch+0x28>
   2d4fc:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d4fe:	b133      	cbz	r3, 2d50e <event_handler_list_dispatch+0x32>
	return node->next;
   2d500:	681c      	ldr	r4, [r3, #0]
   2d502:	e004      	b.n	2d50e <event_handler_list_dispatch+0x32>
   2d504:	461c      	mov	r4, r3
   2d506:	e002      	b.n	2d50e <event_handler_list_dispatch+0x32>
   2d508:	4622      	mov	r2, r4
   2d50a:	4623      	mov	r3, r4
   2d50c:	4614      	mov	r4, r2
   2d50e:	b14b      	cbz	r3, 2d524 <event_handler_list_dispatch+0x48>
		curr->handler(evt);
   2d510:	685b      	ldr	r3, [r3, #4]
   2d512:	4628      	mov	r0, r5
   2d514:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2d516:	2c00      	cmp	r4, #0
   2d518:	d0f6      	beq.n	2d508 <event_handler_list_dispatch+0x2c>
   2d51a:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2d51c:	2c00      	cmp	r4, #0
   2d51e:	d0f4      	beq.n	2d50a <event_handler_list_dispatch+0x2e>
	return node->next;
   2d520:	6822      	ldr	r2, [r4, #0]
   2d522:	e7f2      	b.n	2d50a <event_handler_list_dispatch+0x2e>
	return z_impl_k_mutex_unlock(mutex);
   2d524:	4801      	ldr	r0, [pc, #4]	; (2d52c <event_handler_list_dispatch+0x50>)
   2d526:	f008 fe49 	bl	361bc <z_impl_k_mutex_unlock>
   2d52a:	e7dc      	b.n	2d4e6 <event_handler_list_dispatch+0xa>
   2d52c:	2000ca80 	.word	0x2000ca80
   2d530:	20010334 	.word	0x20010334

0002d534 <response_is_valid>:
{
   2d534:	b570      	push	{r4, r5, r6, lr}
	if ((response == NULL) || (check == NULL)) {
   2d536:	b150      	cbz	r0, 2d54e <response_is_valid+0x1a>
   2d538:	460d      	mov	r5, r1
   2d53a:	4614      	mov	r4, r2
   2d53c:	4606      	mov	r6, r0
   2d53e:	b132      	cbz	r2, 2d54e <response_is_valid+0x1a>
	if ((response_len < strlen(check)) ||
   2d540:	4610      	mov	r0, r2
   2d542:	f7f3 fffb 	bl	2153c <strlen>
   2d546:	4285      	cmp	r5, r0
   2d548:	d213      	bcs.n	2d572 <response_is_valid+0x3e>
		return false;
   2d54a:	2000      	movs	r0, #0
}
   2d54c:	bd70      	pop	{r4, r5, r6, pc}
   2d54e:	4b0d      	ldr	r3, [pc, #52]	; (2d584 <response_is_valid+0x50>)
   2d550:	4a0d      	ldr	r2, [pc, #52]	; (2d588 <response_is_valid+0x54>)
   2d552:	1a9b      	subs	r3, r3, r2
   2d554:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid pointer provided");
   2d556:	f04f 0000 	mov.w	r0, #0
   2d55a:	2201      	movs	r2, #1
   2d55c:	f362 0002 	bfi	r0, r2, #0, #3
   2d560:	f36f 00c5 	bfc	r0, #3, #3
   2d564:	f363 108f 	bfi	r0, r3, #6, #10
   2d568:	4908      	ldr	r1, [pc, #32]	; (2d58c <response_is_valid+0x58>)
   2d56a:	f00e fd6d 	bl	3c048 <log_string_sync>
		return false;
   2d56e:	2000      	movs	r0, #0
   2d570:	e7ec      	b.n	2d54c <response_is_valid+0x18>
	    (memcmp(response, check, response_len) != 0)) {
   2d572:	462a      	mov	r2, r5
   2d574:	4621      	mov	r1, r4
   2d576:	4630      	mov	r0, r6
   2d578:	f012 fcb4 	bl	3fee4 <memcmp>
	if ((response_len < strlen(check)) ||
   2d57c:	2800      	cmp	r0, #0
   2d57e:	d1e4      	bne.n	2d54a <response_is_valid+0x16>
	return true;
   2d580:	2001      	movs	r0, #1
   2d582:	e7e3      	b.n	2d54c <response_is_valid+0x18>
   2d584:	000412a8 	.word	0x000412a8
   2d588:	00041200 	.word	0x00041200
   2d58c:	00043ce4 	.word	0x00043ce4

0002d590 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   2d590:	b570      	push	{r4, r5, r6, lr}
   2d592:	b088      	sub	sp, #32
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   2d594:	2300      	movs	r3, #0
   2d596:	9305      	str	r3, [sp, #20]
   2d598:	9306      	str	r3, [sp, #24]
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   2d59a:	2304      	movs	r3, #4
   2d59c:	9302      	str	r3, [sp, #8]
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   2d59e:	2800      	cmp	r0, #0
   2d5a0:	f000 8106 	beq.w	2d7b0 <parse_edrx+0x220>
   2d5a4:	460d      	mov	r5, r1
   2d5a6:	4606      	mov	r6, r0
   2d5a8:	2900      	cmp	r1, #0
   2d5aa:	f000 8104 	beq.w	2d7b6 <parse_edrx+0x226>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   2d5ae:	2106      	movs	r1, #6
   2d5b0:	a805      	add	r0, sp, #20
   2d5b2:	f010 feaf 	bl	3e314 <at_params_list_init>
	if (err) {
   2d5b6:	4604      	mov	r4, r0
   2d5b8:	2800      	cmp	r0, #0
   2d5ba:	d15e      	bne.n	2d67a <parse_edrx+0xea>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   2d5bc:	aa05      	add	r2, sp, #20
   2d5be:	2100      	movs	r1, #0
   2d5c0:	4630      	mov	r0, r6
   2d5c2:	f010 fea2 	bl	3e30a <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   2d5c6:	4604      	mov	r4, r0
   2d5c8:	2800      	cmp	r0, #0
   2d5ca:	d168      	bne.n	2d69e <parse_edrx+0x10e>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   2d5cc:	ab02      	add	r3, sp, #8
   2d5ce:	aa03      	add	r2, sp, #12
   2d5d0:	2103      	movs	r1, #3
   2d5d2:	a805      	add	r0, sp, #20
   2d5d4:	f011 f805 	bl	3e5e2 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   2d5d8:	4604      	mov	r4, r0
   2d5da:	2800      	cmp	r0, #0
   2d5dc:	d176      	bne.n	2d6cc <parse_edrx+0x13c>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   2d5de:	9b02      	ldr	r3, [sp, #8]
   2d5e0:	aa08      	add	r2, sp, #32
   2d5e2:	4413      	add	r3, r2
   2d5e4:	2100      	movs	r1, #0
   2d5e6:	f803 1c14 	strb.w	r1, [r3, #-20]
	 * special case of idx == 0 for LTE-M, where the value is 5.12 seconds.
	 * The variable idx is used to map to the entry of index idx in
	 * Figure 10.5.5.32/3GPP TS 24.008, table for eDRX in S1 mode, and
	 * note 4 and 5 are taken into account.
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   2d5ea:	2202      	movs	r2, #2
   2d5ec:	a803      	add	r0, sp, #12
   2d5ee:	f00d f8b9 	bl	3a764 <strtoul>
   2d5f2:	b2c6      	uxtb	r6, r0

	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   2d5f4:	aa07      	add	r2, sp, #28
   2d5f6:	2101      	movs	r1, #1
   2d5f8:	a805      	add	r0, sp, #20
   2d5fa:	f010 ffa6 	bl	3e54a <at_params_int_get>
	if (err) {
   2d5fe:	4604      	mov	r4, r0
   2d600:	2800      	cmp	r0, #0
   2d602:	d175      	bne.n	2d6f0 <parse_edrx+0x160>
	}

	/* The acces technology indicators 4 for LTE-M and 5 for NB-IoT are
	 * specified in 3GPP 27.007 Ch. 7.41.
	 */
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   2d604:	9b07      	ldr	r3, [sp, #28]
   2d606:	2b04      	cmp	r3, #4
   2d608:	f000 8086 	beq.w	2d718 <parse_edrx+0x188>
   2d60c:	2b05      	cmp	r3, #5
   2d60e:	f000 8081 	beq.w	2d714 <parse_edrx+0x184>
   2d612:	2000      	movs	r0, #0
   2d614:	7028      	strb	r0, [r5, #0]

	/* Confirm valid system mode and set Paging Time Window multiplier.
	 * Multiplier is 1.28 s for LTE-M, and 2.56 s for NB-IoT, derived from
	 * figure 10.5.5.32/3GPP TS 24.008.
	 */
	err = get_ptw_multiplier(cfg->mode, &ptw_multiplier);
   2d616:	a901      	add	r1, sp, #4
   2d618:	f7ff feda 	bl	2d3d0 <get_ptw_multiplier>
	if (err) {
   2d61c:	4604      	mov	r4, r0
   2d61e:	2800      	cmp	r0, #0
   2d620:	d17c      	bne.n	2d71c <parse_edrx+0x18c>
		LOG_WRN("Active LTE mode could not be determined");
		goto clean_exit;
	}

	err = get_edrx_value(cfg->mode, idx, &cfg->edrx);
   2d622:	462a      	mov	r2, r5
   2d624:	f812 0b04 	ldrb.w	r0, [r2], #4
   2d628:	4631      	mov	r1, r6
   2d62a:	f7f4 f891 	bl	21750 <get_edrx_value>
	if (err) {
   2d62e:	4604      	mov	r4, r0
   2d630:	2800      	cmp	r0, #0
   2d632:	f040 8084 	bne.w	2d73e <parse_edrx+0x1ae>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
		goto clean_exit;
	}

	len = sizeof(tmp_buf) - 1;
   2d636:	2104      	movs	r1, #4
   2d638:	9102      	str	r1, [sp, #8]

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   2d63a:	ab02      	add	r3, sp, #8
   2d63c:	aa03      	add	r2, sp, #12
   2d63e:	a805      	add	r0, sp, #20
   2d640:	f010 ffcf 	bl	3e5e2 <at_params_string_get>
				   tmp_buf, &len);
	if (err) {
   2d644:	4604      	mov	r4, r0
   2d646:	2800      	cmp	r0, #0
   2d648:	f040 808b 	bne.w	2d762 <parse_edrx+0x1d2>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
		goto clean_exit;
	}

	tmp_buf[len] = '\0';
   2d64c:	9b02      	ldr	r3, [sp, #8]
   2d64e:	aa08      	add	r2, sp, #32
   2d650:	4413      	add	r3, r2
   2d652:	2100      	movs	r1, #0
   2d654:	f803 1c14 	strb.w	r1, [r3, #-20]

	/* Value can be a maximum of 15, as there are 16 entries in the table
	 * for paging time window (both for LTE-M and NB1).
	 */
	idx = strtoul(tmp_buf, NULL, 2);
   2d658:	2202      	movs	r2, #2
   2d65a:	a803      	add	r0, sp, #12
   2d65c:	f00d f882 	bl	3a764 <strtoul>
   2d660:	b2c3      	uxtb	r3, r0
	if (idx > 15) {
   2d662:	2b0f      	cmp	r3, #15
   2d664:	f200 808f 	bhi.w	2d786 <parse_edrx+0x1f6>

	/* The Paging Time Window is different for LTE-M and NB-IoT:
	 *	- LTE-M: (idx + 1) * 1.28 s
	 *	- NB-IoT (idx + 1) * 2.56 s
	 */
	idx += 1;
   2d668:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   2d66a:	b2c0      	uxtb	r0, r0
   2d66c:	f7f3 fc74 	bl	20f58 <__aeabi_i2f>
   2d670:	9901      	ldr	r1, [sp, #4]
   2d672:	f7f2 fee5 	bl	20440 <__aeabi_fmul>
   2d676:	60a8      	str	r0, [r5, #8]

	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   2d678:	e022      	b.n	2d6c0 <parse_edrx+0x130>
   2d67a:	4b50      	ldr	r3, [pc, #320]	; (2d7bc <parse_edrx+0x22c>)
   2d67c:	4a50      	ldr	r2, [pc, #320]	; (2d7c0 <parse_edrx+0x230>)
   2d67e:	1a9b      	subs	r3, r3, r2
   2d680:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   2d682:	f04f 0000 	mov.w	r0, #0
   2d686:	2201      	movs	r2, #1
   2d688:	f362 0002 	bfi	r0, r2, #0, #3
   2d68c:	f36f 00c5 	bfc	r0, #3, #3
   2d690:	f363 108f 	bfi	r0, r3, #6, #10
   2d694:	4622      	mov	r2, r4
   2d696:	494b      	ldr	r1, [pc, #300]	; (2d7c4 <parse_edrx+0x234>)
   2d698:	f00e fcd6 	bl	3c048 <log_string_sync>
		return err;
   2d69c:	e013      	b.n	2d6c6 <parse_edrx+0x136>
   2d69e:	4b47      	ldr	r3, [pc, #284]	; (2d7bc <parse_edrx+0x22c>)
   2d6a0:	4a47      	ldr	r2, [pc, #284]	; (2d7c0 <parse_edrx+0x230>)
   2d6a2:	1a9b      	subs	r3, r3, r2
   2d6a4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   2d6a6:	f04f 0000 	mov.w	r0, #0
   2d6aa:	2201      	movs	r2, #1
   2d6ac:	f362 0002 	bfi	r0, r2, #0, #3
   2d6b0:	f36f 00c5 	bfc	r0, #3, #3
   2d6b4:	f363 108f 	bfi	r0, r3, #6, #10
   2d6b8:	4622      	mov	r2, r4
   2d6ba:	4943      	ldr	r1, [pc, #268]	; (2d7c8 <parse_edrx+0x238>)
   2d6bc:	f00e fcc4 	bl	3c048 <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   2d6c0:	a805      	add	r0, sp, #20
   2d6c2:	f010 fe50 	bl	3e366 <at_params_list_free>

	return err;
}
   2d6c6:	4620      	mov	r0, r4
   2d6c8:	b008      	add	sp, #32
   2d6ca:	bd70      	pop	{r4, r5, r6, pc}
   2d6cc:	4b3b      	ldr	r3, [pc, #236]	; (2d7bc <parse_edrx+0x22c>)
   2d6ce:	4a3c      	ldr	r2, [pc, #240]	; (2d7c0 <parse_edrx+0x230>)
   2d6d0:	1a9b      	subs	r3, r3, r2
   2d6d2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   2d6d4:	f04f 0000 	mov.w	r0, #0
   2d6d8:	2201      	movs	r2, #1
   2d6da:	f362 0002 	bfi	r0, r2, #0, #3
   2d6de:	f36f 00c5 	bfc	r0, #3, #3
   2d6e2:	f363 108f 	bfi	r0, r3, #6, #10
   2d6e6:	4622      	mov	r2, r4
   2d6e8:	4938      	ldr	r1, [pc, #224]	; (2d7cc <parse_edrx+0x23c>)
   2d6ea:	f00e fcad 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2d6ee:	e7e7      	b.n	2d6c0 <parse_edrx+0x130>
   2d6f0:	4b32      	ldr	r3, [pc, #200]	; (2d7bc <parse_edrx+0x22c>)
   2d6f2:	4a33      	ldr	r2, [pc, #204]	; (2d7c0 <parse_edrx+0x230>)
   2d6f4:	1a9b      	subs	r3, r3, r2
   2d6f6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   2d6f8:	f04f 0000 	mov.w	r0, #0
   2d6fc:	2201      	movs	r2, #1
   2d6fe:	f362 0002 	bfi	r0, r2, #0, #3
   2d702:	f36f 00c5 	bfc	r0, #3, #3
   2d706:	f363 108f 	bfi	r0, r3, #6, #10
   2d70a:	4622      	mov	r2, r4
   2d70c:	4930      	ldr	r1, [pc, #192]	; (2d7d0 <parse_edrx+0x240>)
   2d70e:	f00e fc9b 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2d712:	e7d5      	b.n	2d6c0 <parse_edrx+0x130>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   2d714:	2009      	movs	r0, #9
   2d716:	e77d      	b.n	2d614 <parse_edrx+0x84>
   2d718:	2007      	movs	r0, #7
   2d71a:	e77b      	b.n	2d614 <parse_edrx+0x84>
   2d71c:	4b27      	ldr	r3, [pc, #156]	; (2d7bc <parse_edrx+0x22c>)
   2d71e:	4a28      	ldr	r2, [pc, #160]	; (2d7c0 <parse_edrx+0x230>)
   2d720:	1a9b      	subs	r3, r3, r2
   2d722:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Active LTE mode could not be determined");
   2d724:	f04f 0000 	mov.w	r0, #0
   2d728:	2202      	movs	r2, #2
   2d72a:	f362 0002 	bfi	r0, r2, #0, #3
   2d72e:	f36f 00c5 	bfc	r0, #3, #3
   2d732:	f363 108f 	bfi	r0, r3, #6, #10
   2d736:	4927      	ldr	r1, [pc, #156]	; (2d7d4 <parse_edrx+0x244>)
   2d738:	f00e fc86 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2d73c:	e7c0      	b.n	2d6c0 <parse_edrx+0x130>
   2d73e:	4b1f      	ldr	r3, [pc, #124]	; (2d7bc <parse_edrx+0x22c>)
   2d740:	4a1f      	ldr	r2, [pc, #124]	; (2d7c0 <parse_edrx+0x230>)
   2d742:	1a9b      	subs	r3, r3, r2
   2d744:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   2d746:	f04f 0000 	mov.w	r0, #0
   2d74a:	2201      	movs	r2, #1
   2d74c:	f362 0002 	bfi	r0, r2, #0, #3
   2d750:	f36f 00c5 	bfc	r0, #3, #3
   2d754:	f363 108f 	bfi	r0, r3, #6, #10
   2d758:	4622      	mov	r2, r4
   2d75a:	491f      	ldr	r1, [pc, #124]	; (2d7d8 <parse_edrx+0x248>)
   2d75c:	f00e fc74 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2d760:	e7ae      	b.n	2d6c0 <parse_edrx+0x130>
   2d762:	4b16      	ldr	r3, [pc, #88]	; (2d7bc <parse_edrx+0x22c>)
   2d764:	4a16      	ldr	r2, [pc, #88]	; (2d7c0 <parse_edrx+0x230>)
   2d766:	1a9b      	subs	r3, r3, r2
   2d768:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   2d76a:	f04f 0000 	mov.w	r0, #0
   2d76e:	2201      	movs	r2, #1
   2d770:	f362 0002 	bfi	r0, r2, #0, #3
   2d774:	f36f 00c5 	bfc	r0, #3, #3
   2d778:	f363 108f 	bfi	r0, r3, #6, #10
   2d77c:	4622      	mov	r2, r4
   2d77e:	4917      	ldr	r1, [pc, #92]	; (2d7dc <parse_edrx+0x24c>)
   2d780:	f00e fc62 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2d784:	e79c      	b.n	2d6c0 <parse_edrx+0x130>
   2d786:	4b0d      	ldr	r3, [pc, #52]	; (2d7bc <parse_edrx+0x22c>)
   2d788:	4a0d      	ldr	r2, [pc, #52]	; (2d7c0 <parse_edrx+0x230>)
   2d78a:	1a9b      	subs	r3, r3, r2
   2d78c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   2d78e:	f04f 0400 	mov.w	r4, #0
   2d792:	2201      	movs	r2, #1
   2d794:	f362 0402 	bfi	r4, r2, #0, #3
   2d798:	f36f 04c5 	bfc	r4, #3, #3
   2d79c:	f363 148f 	bfi	r4, r3, #6, #10
   2d7a0:	b2c2      	uxtb	r2, r0
   2d7a2:	490f      	ldr	r1, [pc, #60]	; (2d7e0 <parse_edrx+0x250>)
   2d7a4:	4620      	mov	r0, r4
   2d7a6:	f00e fc4f 	bl	3c048 <log_string_sync>
		err = -EINVAL;
   2d7aa:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   2d7ae:	e787      	b.n	2d6c0 <parse_edrx+0x130>
		return -EINVAL;
   2d7b0:	f06f 0415 	mvn.w	r4, #21
   2d7b4:	e787      	b.n	2d6c6 <parse_edrx+0x136>
   2d7b6:	f06f 0415 	mvn.w	r4, #21
   2d7ba:	e784      	b.n	2d6c6 <parse_edrx+0x136>
   2d7bc:	000412a8 	.word	0x000412a8
   2d7c0:	00041200 	.word	0x00041200
   2d7c4:	00043d00 	.word	0x00043d00
   2d7c8:	00043d2c 	.word	0x00043d2c
   2d7cc:	00043d58 	.word	0x00043d58
   2d7d0:	00043d84 	.word	0x00043d84
   2d7d4:	00043da8 	.word	0x00043da8
   2d7d8:	00043dd0 	.word	0x00043dd0
   2d7dc:	00043df4 	.word	0x00043df4
   2d7e0:	00043e20 	.word	0x00043e20

0002d7e4 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   2d7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d7e8:	b082      	sub	sp, #8
   2d7ea:	4605      	mov	r5, r0
   2d7ec:	460c      	mov	r4, r1
   2d7ee:	4617      	mov	r7, r2
   2d7f0:	461e      	mov	r6, r3
	char unit_str[4] = {0};
   2d7f2:	2300      	movs	r3, #0
   2d7f4:	9301      	str	r3, [sp, #4]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   2d7f6:	f7f3 fea1 	bl	2153c <strlen>
   2d7fa:	2808      	cmp	r0, #8
   2d7fc:	d146      	bne.n	2d88c <parse_psm+0xa8>
   2d7fe:	4620      	mov	r0, r4
   2d800:	f7f3 fe9c 	bl	2153c <strlen>
   2d804:	2808      	cmp	r0, #8
   2d806:	d141      	bne.n	2d88c <parse_psm+0xa8>
		return -EINVAL;
	}

	/* Parse T3412-extended (periodic TAU) timer */
	memcpy(unit_str, tau_ext_str, unit_str_len);
   2d808:	8822      	ldrh	r2, [r4, #0]
   2d80a:	78a3      	ldrb	r3, [r4, #2]
   2d80c:	f8ad 2004 	strh.w	r2, [sp, #4]
   2d810:	f88d 3006 	strb.w	r3, [sp, #6]

	lut_idx = strtoul(unit_str, NULL, 2);
   2d814:	2202      	movs	r2, #2
   2d816:	2100      	movs	r1, #0
   2d818:	a801      	add	r0, sp, #4
   2d81a:	f00c ffa3 	bl	3a764 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   2d81e:	2807      	cmp	r0, #7
   2d820:	d837      	bhi.n	2d892 <parse_psm+0xae>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
		return -EINVAL;
	}

	timer_unit = t3412_ext_lookup[lut_idx];
   2d822:	4b49      	ldr	r3, [pc, #292]	; (2d948 <parse_psm+0x164>)
   2d824:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   2d828:	2202      	movs	r2, #2
   2d82a:	2100      	movs	r1, #0
   2d82c:	1ce0      	adds	r0, r4, #3
   2d82e:	f00c ff99 	bl	3a764 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2d832:	f1b8 0f00 	cmp.w	r8, #0
   2d836:	d03f      	beq.n	2d8b8 <parse_psm+0xd4>
   2d838:	fb00 f408 	mul.w	r4, r0, r8
   2d83c:	6034      	str	r4, [r6, #0]

	/* If T3412-extended is disabled, there's a chance that the network
	 * only reports the T3412 (legacy) timer. We therefore needs to check
	 * that as well. The legacy timer is only reported by modem fe >= 1.2.0.
	 */
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   2d83e:	f1b4 3fff 	cmp.w	r4, #4294967295
   2d842:	d105      	bne.n	2d850 <parse_psm+0x6c>
   2d844:	b127      	cbz	r7, 2d850 <parse_psm+0x6c>
   2d846:	4638      	mov	r0, r7
   2d848:	f7f3 fe78 	bl	2153c <strlen>
   2d84c:	2808      	cmp	r0, #8
   2d84e:	d036      	beq.n	2d8be <parse_psm+0xda>
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
	}

	/* Parse active time */
	memcpy(unit_str, active_time_str, unit_str_len);
   2d850:	882a      	ldrh	r2, [r5, #0]
   2d852:	78ab      	ldrb	r3, [r5, #2]
   2d854:	f8ad 2004 	strh.w	r2, [sp, #4]
   2d858:	f88d 3006 	strb.w	r3, [sp, #6]

	lut_idx = strtoul(unit_str, NULL, 2);
   2d85c:	2202      	movs	r2, #2
   2d85e:	2100      	movs	r1, #0
   2d860:	a801      	add	r0, sp, #4
   2d862:	f00c ff7f 	bl	3a764 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2d866:	2807      	cmp	r0, #7
   2d868:	d858      	bhi.n	2d91c <parse_psm+0x138>
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
	}

	timer_unit = t3324_lookup[lut_idx];
   2d86a:	4b38      	ldr	r3, [pc, #224]	; (2d94c <parse_psm+0x168>)
   2d86c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   2d870:	2202      	movs	r2, #2
   2d872:	2100      	movs	r1, #0
   2d874:	1ce8      	adds	r0, r5, #3
   2d876:	f00c ff75 	bl	3a764 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2d87a:	2c00      	cmp	r4, #0
   2d87c:	d061      	beq.n	2d942 <parse_psm+0x15e>
   2d87e:	fb04 f000 	mul.w	r0, r4, r0
   2d882:	6070      	str	r0, [r6, #4]

	LOG_DBG("TAU: %d sec, active time: %d sec\n",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
   2d884:	2000      	movs	r0, #0
}
   2d886:	b002      	add	sp, #8
   2d888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   2d88c:	f06f 0015 	mvn.w	r0, #21
   2d890:	e7f9      	b.n	2d886 <parse_psm+0xa2>
   2d892:	4b2f      	ldr	r3, [pc, #188]	; (2d950 <parse_psm+0x16c>)
   2d894:	4a2f      	ldr	r2, [pc, #188]	; (2d954 <parse_psm+0x170>)
   2d896:	1a9b      	subs	r3, r3, r2
   2d898:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   2d89a:	f04f 0000 	mov.w	r0, #0
   2d89e:	2201      	movs	r2, #1
   2d8a0:	f362 0002 	bfi	r0, r2, #0, #3
   2d8a4:	f36f 00c5 	bfc	r0, #3, #3
   2d8a8:	f363 108f 	bfi	r0, r3, #6, #10
   2d8ac:	492a      	ldr	r1, [pc, #168]	; (2d958 <parse_psm+0x174>)
   2d8ae:	f00e fbcb 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2d8b2:	f06f 0015 	mvn.w	r0, #21
   2d8b6:	e7e6      	b.n	2d886 <parse_psm+0xa2>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2d8b8:	f04f 34ff 	mov.w	r4, #4294967295
   2d8bc:	e7be      	b.n	2d83c <parse_psm+0x58>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   2d8be:	883a      	ldrh	r2, [r7, #0]
   2d8c0:	78bb      	ldrb	r3, [r7, #2]
   2d8c2:	f8ad 2004 	strh.w	r2, [sp, #4]
   2d8c6:	f88d 3006 	strb.w	r3, [sp, #6]
		lut_idx = strtoul(unit_str, NULL, 2);
   2d8ca:	2202      	movs	r2, #2
   2d8cc:	2100      	movs	r1, #0
   2d8ce:	a801      	add	r0, sp, #4
   2d8d0:	f00c ff48 	bl	3a764 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2d8d4:	2807      	cmp	r0, #7
   2d8d6:	d80e      	bhi.n	2d8f6 <parse_psm+0x112>
		timer_unit = t3412_lookup[lut_idx];
   2d8d8:	4b20      	ldr	r3, [pc, #128]	; (2d95c <parse_psm+0x178>)
   2d8da:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   2d8de:	2202      	movs	r2, #2
   2d8e0:	2100      	movs	r1, #0
   2d8e2:	1cf8      	adds	r0, r7, #3
   2d8e4:	f00c ff3e 	bl	3a764 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2d8e8:	f1b8 0f00 	cmp.w	r8, #0
   2d8ec:	d001      	beq.n	2d8f2 <parse_psm+0x10e>
   2d8ee:	fb00 f408 	mul.w	r4, r0, r8
   2d8f2:	6034      	str	r4, [r6, #0]
   2d8f4:	e7ac      	b.n	2d850 <parse_psm+0x6c>
   2d8f6:	4b16      	ldr	r3, [pc, #88]	; (2d950 <parse_psm+0x16c>)
   2d8f8:	4a16      	ldr	r2, [pc, #88]	; (2d954 <parse_psm+0x170>)
   2d8fa:	1a9b      	subs	r3, r3, r2
   2d8fc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   2d8fe:	f04f 0000 	mov.w	r0, #0
   2d902:	2201      	movs	r2, #1
   2d904:	f362 0002 	bfi	r0, r2, #0, #3
   2d908:	f36f 00c5 	bfc	r0, #3, #3
   2d90c:	f363 108f 	bfi	r0, r3, #6, #10
   2d910:	4913      	ldr	r1, [pc, #76]	; (2d960 <parse_psm+0x17c>)
   2d912:	f00e fb99 	bl	3c048 <log_string_sync>
			return -EINVAL;
   2d916:	f06f 0015 	mvn.w	r0, #21
   2d91a:	e7b4      	b.n	2d886 <parse_psm+0xa2>
   2d91c:	4b0c      	ldr	r3, [pc, #48]	; (2d950 <parse_psm+0x16c>)
   2d91e:	4a0d      	ldr	r2, [pc, #52]	; (2d954 <parse_psm+0x170>)
   2d920:	1a9b      	subs	r3, r3, r2
   2d922:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to parse active time string");
   2d924:	f04f 0000 	mov.w	r0, #0
   2d928:	2201      	movs	r2, #1
   2d92a:	f362 0002 	bfi	r0, r2, #0, #3
   2d92e:	f36f 00c5 	bfc	r0, #3, #3
   2d932:	f363 108f 	bfi	r0, r3, #6, #10
   2d936:	490b      	ldr	r1, [pc, #44]	; (2d964 <parse_psm+0x180>)
   2d938:	f00e fb86 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2d93c:	f06f 0015 	mvn.w	r0, #21
   2d940:	e7a1      	b.n	2d886 <parse_psm+0xa2>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2d942:	f04f 30ff 	mov.w	r0, #4294967295
   2d946:	e79c      	b.n	2d882 <parse_psm+0x9e>
   2d948:	00044274 	.word	0x00044274
   2d94c:	00044254 	.word	0x00044254
   2d950:	000412a8 	.word	0x000412a8
   2d954:	00041200 	.word	0x00041200
   2d958:	00043e40 	.word	0x00043e40
   2d95c:	00044294 	.word	0x00044294
   2d960:	00043e78 	.word	0x00043e78
   2d964:	00043ea4 	.word	0x00043ea4

0002d968 <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   2d968:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d96a:	b085      	sub	sp, #20
   2d96c:	4605      	mov	r5, r0
   2d96e:	460f      	mov	r7, r1
   2d970:	4616      	mov	r6, r2
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   2d972:	2300      	movs	r3, #0
   2d974:	9301      	str	r3, [sp, #4]
   2d976:	9302      	str	r3, [sp, #8]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   2d978:	2104      	movs	r1, #4
   2d97a:	eb0d 0001 	add.w	r0, sp, r1
   2d97e:	f010 fcc9 	bl	3e314 <at_params_list_init>
	if (err) {
   2d982:	b998      	cbnz	r0, 2d9ac <parse_rrc_mode+0x44>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   2d984:	aa01      	add	r2, sp, #4
   2d986:	2100      	movs	r1, #0
   2d988:	4628      	mov	r0, r5
   2d98a:	f010 fcbe 	bl	3e30a <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   2d98e:	4604      	mov	r4, r0
   2d990:	b9f8      	cbnz	r0, 2d9d2 <parse_rrc_mode+0x6a>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
		goto clean_exit;
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   2d992:	aa03      	add	r2, sp, #12
   2d994:	4631      	mov	r1, r6
   2d996:	a801      	add	r0, sp, #4
   2d998:	f010 fdd7 	bl	3e54a <at_params_int_get>
	if (err) {
   2d99c:	4604      	mov	r4, r0
   2d99e:	bb78      	cbnz	r0, 2da00 <parse_rrc_mode+0x98>
		LOG_ERR("Could not get signalling mode, error: %d", err);
		goto clean_exit;
	}

	/* Check if the parsed value maps to a valid registration status */
	if (temp_mode == 0) {
   2d9a0:	9a03      	ldr	r2, [sp, #12]
   2d9a2:	2a00      	cmp	r2, #0
   2d9a4:	d13e      	bne.n	2da24 <parse_rrc_mode+0xbc>
		*mode = LTE_LC_RRC_MODE_IDLE;
   2d9a6:	2300      	movs	r3, #0
   2d9a8:	703b      	strb	r3, [r7, #0]
   2d9aa:	e023      	b.n	2d9f4 <parse_rrc_mode+0x8c>
   2d9ac:	4604      	mov	r4, r0
   2d9ae:	4b29      	ldr	r3, [pc, #164]	; (2da54 <parse_rrc_mode+0xec>)
   2d9b0:	4a29      	ldr	r2, [pc, #164]	; (2da58 <parse_rrc_mode+0xf0>)
   2d9b2:	1a9b      	subs	r3, r3, r2
   2d9b4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   2d9b6:	f04f 0000 	mov.w	r0, #0
   2d9ba:	2201      	movs	r2, #1
   2d9bc:	f362 0002 	bfi	r0, r2, #0, #3
   2d9c0:	f36f 00c5 	bfc	r0, #3, #3
   2d9c4:	f363 108f 	bfi	r0, r3, #6, #10
   2d9c8:	4622      	mov	r2, r4
   2d9ca:	4924      	ldr	r1, [pc, #144]	; (2da5c <parse_rrc_mode+0xf4>)
   2d9cc:	f00e fb3c 	bl	3c048 <log_string_sync>
		return err;
   2d9d0:	e013      	b.n	2d9fa <parse_rrc_mode+0x92>
   2d9d2:	4b20      	ldr	r3, [pc, #128]	; (2da54 <parse_rrc_mode+0xec>)
   2d9d4:	4a20      	ldr	r2, [pc, #128]	; (2da58 <parse_rrc_mode+0xf0>)
   2d9d6:	1a9b      	subs	r3, r3, r2
   2d9d8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   2d9da:	f04f 0000 	mov.w	r0, #0
   2d9de:	2201      	movs	r2, #1
   2d9e0:	f362 0002 	bfi	r0, r2, #0, #3
   2d9e4:	f36f 00c5 	bfc	r0, #3, #3
   2d9e8:	f363 108f 	bfi	r0, r3, #6, #10
   2d9ec:	4622      	mov	r2, r4
   2d9ee:	491c      	ldr	r1, [pc, #112]	; (2da60 <parse_rrc_mode+0xf8>)
   2d9f0:	f00e fb2a 	bl	3c048 <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   2d9f4:	a801      	add	r0, sp, #4
   2d9f6:	f010 fcb6 	bl	3e366 <at_params_list_free>

	return err;
}
   2d9fa:	4620      	mov	r0, r4
   2d9fc:	b005      	add	sp, #20
   2d9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2da00:	4b14      	ldr	r3, [pc, #80]	; (2da54 <parse_rrc_mode+0xec>)
   2da02:	4a15      	ldr	r2, [pc, #84]	; (2da58 <parse_rrc_mode+0xf0>)
   2da04:	1a9b      	subs	r3, r3, r2
   2da06:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get signalling mode, error: %d", err);
   2da08:	f04f 0000 	mov.w	r0, #0
   2da0c:	2201      	movs	r2, #1
   2da0e:	f362 0002 	bfi	r0, r2, #0, #3
   2da12:	f36f 00c5 	bfc	r0, #3, #3
   2da16:	f363 108f 	bfi	r0, r3, #6, #10
   2da1a:	4622      	mov	r2, r4
   2da1c:	4911      	ldr	r1, [pc, #68]	; (2da64 <parse_rrc_mode+0xfc>)
   2da1e:	f00e fb13 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2da22:	e7e7      	b.n	2d9f4 <parse_rrc_mode+0x8c>
	} else if (temp_mode == 1) {
   2da24:	2a01      	cmp	r2, #1
   2da26:	d102      	bne.n	2da2e <parse_rrc_mode+0xc6>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   2da28:	2301      	movs	r3, #1
   2da2a:	703b      	strb	r3, [r7, #0]
   2da2c:	e7e2      	b.n	2d9f4 <parse_rrc_mode+0x8c>
   2da2e:	4b09      	ldr	r3, [pc, #36]	; (2da54 <parse_rrc_mode+0xec>)
   2da30:	4909      	ldr	r1, [pc, #36]	; (2da58 <parse_rrc_mode+0xf0>)
   2da32:	1a5b      	subs	r3, r3, r1
   2da34:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   2da36:	f04f 0000 	mov.w	r0, #0
   2da3a:	2101      	movs	r1, #1
   2da3c:	f361 0002 	bfi	r0, r1, #0, #3
   2da40:	f36f 00c5 	bfc	r0, #3, #3
   2da44:	f363 108f 	bfi	r0, r3, #6, #10
   2da48:	4907      	ldr	r1, [pc, #28]	; (2da68 <parse_rrc_mode+0x100>)
   2da4a:	f00e fafd 	bl	3c048 <log_string_sync>
		err = -EINVAL;
   2da4e:	f06f 0415 	mvn.w	r4, #21
   2da52:	e7cf      	b.n	2d9f4 <parse_rrc_mode+0x8c>
   2da54:	000412a8 	.word	0x000412a8
   2da58:	00041200 	.word	0x00041200
   2da5c:	00043d00 	.word	0x00043d00
   2da60:	00043ec8 	.word	0x00043ec8
   2da64:	00043ef4 	.word	0x00043ef4
   2da68:	00043f20 	.word	0x00043f20

0002da6c <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   2da6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2da70:	b08a      	sub	sp, #40	; 0x28
   2da72:	4605      	mov	r5, r0
   2da74:	460f      	mov	r7, r1
   2da76:	4690      	mov	r8, r2
   2da78:	461e      	mov	r6, r3
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2da7a:	2400      	movs	r4, #0
   2da7c:	9403      	str	r4, [sp, #12]
   2da7e:	f8ad 4010 	strh.w	r4, [sp, #16]
   2da82:	f88d 4012 	strb.w	r4, [sp, #18]
	size_t response_prefix_len = sizeof(response_prefix);
   2da86:	2307      	movs	r3, #7
   2da88:	9302      	str	r3, [sp, #8]
	size_t len = sizeof(str_buf) - 1;
   2da8a:	2309      	movs	r3, #9
   2da8c:	9301      	str	r3, [sp, #4]

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2da8e:	210b      	movs	r1, #11
   2da90:	a808      	add	r0, sp, #32
   2da92:	f010 fc3f 	bl	3e314 <at_params_list_init>
	if (err) {
   2da96:	2800      	cmp	r0, #0
   2da98:	d140      	bne.n	2db1c <parse_cereg+0xb0>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse CEREG response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   2da9a:	aa08      	add	r2, sp, #32
   2da9c:	2100      	movs	r1, #0
   2da9e:	4628      	mov	r0, r5
   2daa0:	f010 fc33 	bl	3e30a <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   2daa4:	4604      	mov	r4, r0
   2daa6:	2800      	cmp	r0, #0
   2daa8:	d14b      	bne.n	2db42 <parse_cereg+0xd6>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
		goto clean_exit;
	}

	/* Check if AT command response starts with +CEREG */
	err = at_params_string_get(&resp_list,
   2daaa:	ab02      	add	r3, sp, #8
   2daac:	aa03      	add	r2, sp, #12
   2daae:	2100      	movs	r1, #0
   2dab0:	a808      	add	r0, sp, #32
   2dab2:	f010 fd96 	bl	3e5e2 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   2dab6:	4604      	mov	r4, r0
   2dab8:	2800      	cmp	r0, #0
   2daba:	d15a      	bne.n	2db72 <parse_cereg+0x106>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   2dabc:	4a72      	ldr	r2, [pc, #456]	; (2dc88 <parse_cereg+0x21c>)
   2dabe:	9902      	ldr	r1, [sp, #8]
   2dac0:	a803      	add	r0, sp, #12
   2dac2:	f7ff fd37 	bl	2d534 <response_is_valid>
   2dac6:	2800      	cmp	r0, #0
   2dac8:	d04c      	beq.n	2db64 <parse_cereg+0xf8>
		LOG_DBG("Not a valid CEREG response");
		goto clean_exit;
	}

	/* Get network registration status */
	status = get_nw_reg_status(&resp_list, is_notif);
   2daca:	4639      	mov	r1, r7
   2dacc:	a808      	add	r0, sp, #32
   2dace:	f7ff fc93 	bl	2d3f8 <get_nw_reg_status>
	if (status < 0) {
   2dad2:	1e05      	subs	r5, r0, #0
   2dad4:	db5f      	blt.n	2db96 <parse_cereg+0x12a>
		LOG_ERR("Could not get registration status, error: %d", status);
		err = status;
		goto clean_exit;
	}

	if (reg_status) {
   2dad6:	f1b8 0f00 	cmp.w	r8, #0
   2dada:	d001      	beq.n	2dae0 <parse_cereg+0x74>
		*reg_status = status;
   2dadc:	f888 5000 	strb.w	r5, [r8]

		LOG_DBG("Network registration status: %d", *reg_status);
	}


	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2dae0:	b10e      	cbz	r6, 2dae6 <parse_cereg+0x7a>
   2dae2:	2d5a      	cmp	r5, #90	; 0x5a
   2dae4:	d16a      	bne.n	2dbbc <parse_cereg+0x150>
			goto clean_exit;
		}

		str_buf[len] = '\0';
		cell->id = strtoul(str_buf, NULL, 16);
	} else if (cell) {
   2dae6:	2e00      	cmp	r6, #0
   2dae8:	f000 80c2 	beq.w	2dc70 <parse_cereg+0x204>
		cell->tac = UINT32_MAX;
   2daec:	f04f 33ff 	mov.w	r3, #4294967295
   2daf0:	60f3      	str	r3, [r6, #12]
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   2daf2:	60b3      	str	r3, [r6, #8]
	err = at_params_string_get(&resp_list,
   2daf4:	4625      	mov	r5, r4
	}

	if (lte_mode) {
   2daf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2daf8:	2b00      	cmp	r3, #0
   2dafa:	f000 80c2 	beq.w	2dc82 <parse_cereg+0x216>
		int mode;

		/* Get currently active LTE mode. */
		err = at_params_int_get(&resp_list,
   2dafe:	2f00      	cmp	r7, #0
   2db00:	f000 80b8 	beq.w	2dc74 <parse_cereg+0x208>
   2db04:	2104      	movs	r1, #4
   2db06:	466a      	mov	r2, sp
   2db08:	a808      	add	r0, sp, #32
   2db0a:	f010 fd1e 	bl	3e54a <at_params_int_get>
				is_notif ? AT_CEREG_ACT_INDEX :
					   AT_CEREG_READ_ACT_INDEX,
				&mode);
		if (err) {
   2db0e:	2800      	cmp	r0, #0
   2db10:	f000 80b2 	beq.w	2dc78 <parse_cereg+0x20c>
			LOG_DBG("LTE mode not found, error code: %d", err);
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   2db14:	2300      	movs	r3, #0
   2db16:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2db18:	7013      	strb	r3, [r2, #0]

			/* This is not an error that should be returned, as it's
			 * expected in some situations that LTE mode is not
			 * available.
			 */
			err = 0;
   2db1a:	e023      	b.n	2db64 <parse_cereg+0xf8>
   2db1c:	4604      	mov	r4, r0
   2db1e:	4b5b      	ldr	r3, [pc, #364]	; (2dc8c <parse_cereg+0x220>)
   2db20:	4a5b      	ldr	r2, [pc, #364]	; (2dc90 <parse_cereg+0x224>)
   2db22:	1a9b      	subs	r3, r3, r2
   2db24:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   2db26:	f04f 0000 	mov.w	r0, #0
   2db2a:	2201      	movs	r2, #1
   2db2c:	f362 0002 	bfi	r0, r2, #0, #3
   2db30:	f36f 00c5 	bfc	r0, #3, #3
   2db34:	f363 108f 	bfi	r0, r3, #6, #10
   2db38:	4622      	mov	r2, r4
   2db3a:	4956      	ldr	r1, [pc, #344]	; (2dc94 <parse_cereg+0x228>)
   2db3c:	f00e fa84 	bl	3c048 <log_string_sync>
		return err;
   2db40:	e013      	b.n	2db6a <parse_cereg+0xfe>
   2db42:	4b52      	ldr	r3, [pc, #328]	; (2dc8c <parse_cereg+0x220>)
   2db44:	4a52      	ldr	r2, [pc, #328]	; (2dc90 <parse_cereg+0x224>)
   2db46:	1a9b      	subs	r3, r3, r2
   2db48:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   2db4a:	f04f 0000 	mov.w	r0, #0
   2db4e:	2201      	movs	r2, #1
   2db50:	f362 0002 	bfi	r0, r2, #0, #3
   2db54:	f36f 00c5 	bfc	r0, #3, #3
   2db58:	f363 108f 	bfi	r0, r3, #6, #10
   2db5c:	4622      	mov	r2, r4
   2db5e:	494e      	ldr	r1, [pc, #312]	; (2dc98 <parse_cereg+0x22c>)
   2db60:	f00e fa72 	bl	3c048 <log_string_sync>
			LOG_DBG("LTE mode: %d", *lte_mode);
		}
	}

clean_exit:
	at_params_list_free(&resp_list);
   2db64:	a808      	add	r0, sp, #32
   2db66:	f010 fbfe 	bl	3e366 <at_params_list_free>

	return err;
}
   2db6a:	4620      	mov	r0, r4
   2db6c:	b00a      	add	sp, #40	; 0x28
   2db6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2db72:	4b46      	ldr	r3, [pc, #280]	; (2dc8c <parse_cereg+0x220>)
   2db74:	4a46      	ldr	r2, [pc, #280]	; (2dc90 <parse_cereg+0x224>)
   2db76:	1a9b      	subs	r3, r3, r2
   2db78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get response prefix, error: %d", err);
   2db7a:	f04f 0000 	mov.w	r0, #0
   2db7e:	2201      	movs	r2, #1
   2db80:	f362 0002 	bfi	r0, r2, #0, #3
   2db84:	f36f 00c5 	bfc	r0, #3, #3
   2db88:	f363 108f 	bfi	r0, r3, #6, #10
   2db8c:	4622      	mov	r2, r4
   2db8e:	4943      	ldr	r1, [pc, #268]	; (2dc9c <parse_cereg+0x230>)
   2db90:	f00e fa5a 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2db94:	e7e6      	b.n	2db64 <parse_cereg+0xf8>
   2db96:	4b3d      	ldr	r3, [pc, #244]	; (2dc8c <parse_cereg+0x220>)
   2db98:	4a3d      	ldr	r2, [pc, #244]	; (2dc90 <parse_cereg+0x224>)
   2db9a:	1a9b      	subs	r3, r3, r2
   2db9c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get registration status, error: %d", status);
   2db9e:	f04f 0000 	mov.w	r0, #0
   2dba2:	2201      	movs	r2, #1
   2dba4:	f362 0002 	bfi	r0, r2, #0, #3
   2dba8:	f36f 00c5 	bfc	r0, #3, #3
   2dbac:	f363 108f 	bfi	r0, r3, #6, #10
   2dbb0:	462a      	mov	r2, r5
   2dbb2:	493b      	ldr	r1, [pc, #236]	; (2dca0 <parse_cereg+0x234>)
   2dbb4:	f00e fa48 	bl	3c048 <log_string_sync>
		err = status;
   2dbb8:	462c      	mov	r4, r5
		goto clean_exit;
   2dbba:	e7d3      	b.n	2db64 <parse_cereg+0xf8>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   2dbbc:	a808      	add	r0, sp, #32
   2dbbe:	f010 fd42 	bl	3e646 <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2dbc2:	2803      	cmp	r0, #3
   2dbc4:	d98f      	bls.n	2dae6 <parse_cereg+0x7a>
		err = at_params_string_get(
   2dbc6:	b34f      	cbz	r7, 2dc1c <parse_cereg+0x1b0>
   2dbc8:	2102      	movs	r1, #2
   2dbca:	ab01      	add	r3, sp, #4
   2dbcc:	aa05      	add	r2, sp, #20
   2dbce:	a808      	add	r0, sp, #32
   2dbd0:	f010 fd07 	bl	3e5e2 <at_params_string_get>
		if (err) {
   2dbd4:	4605      	mov	r5, r0
   2dbd6:	bb18      	cbnz	r0, 2dc20 <parse_cereg+0x1b4>
		str_buf[len] = '\0';
   2dbd8:	9b01      	ldr	r3, [sp, #4]
   2dbda:	aa0a      	add	r2, sp, #40	; 0x28
   2dbdc:	4413      	add	r3, r2
   2dbde:	2100      	movs	r1, #0
   2dbe0:	f803 1c14 	strb.w	r1, [r3, #-20]
		cell->tac = strtoul(str_buf, NULL, 16);
   2dbe4:	2210      	movs	r2, #16
   2dbe6:	a805      	add	r0, sp, #20
   2dbe8:	f00c fdbc 	bl	3a764 <strtoul>
   2dbec:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   2dbee:	2309      	movs	r3, #9
   2dbf0:	9301      	str	r3, [sp, #4]
		err = at_params_string_get(&resp_list,
   2dbf2:	b347      	cbz	r7, 2dc46 <parse_cereg+0x1da>
   2dbf4:	2103      	movs	r1, #3
   2dbf6:	ab01      	add	r3, sp, #4
   2dbf8:	aa05      	add	r2, sp, #20
   2dbfa:	a808      	add	r0, sp, #32
   2dbfc:	f010 fcf1 	bl	3e5e2 <at_params_string_get>
		if (err) {
   2dc00:	4605      	mov	r5, r0
   2dc02:	bb10      	cbnz	r0, 2dc4a <parse_cereg+0x1de>
		str_buf[len] = '\0';
   2dc04:	9b01      	ldr	r3, [sp, #4]
   2dc06:	aa0a      	add	r2, sp, #40	; 0x28
   2dc08:	4413      	add	r3, r2
   2dc0a:	2100      	movs	r1, #0
   2dc0c:	f803 1c14 	strb.w	r1, [r3, #-20]
		cell->id = strtoul(str_buf, NULL, 16);
   2dc10:	2210      	movs	r2, #16
   2dc12:	a805      	add	r0, sp, #20
   2dc14:	f00c fda6 	bl	3a764 <strtoul>
   2dc18:	60b0      	str	r0, [r6, #8]
   2dc1a:	e76c      	b.n	2daf6 <parse_cereg+0x8a>
		err = at_params_string_get(
   2dc1c:	2103      	movs	r1, #3
   2dc1e:	e7d4      	b.n	2dbca <parse_cereg+0x15e>
   2dc20:	4b1a      	ldr	r3, [pc, #104]	; (2dc8c <parse_cereg+0x220>)
   2dc22:	4a1b      	ldr	r2, [pc, #108]	; (2dc90 <parse_cereg+0x224>)
   2dc24:	1a9b      	subs	r3, r3, r2
   2dc26:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not get tracking area code, error: %d", err);
   2dc28:	f04f 0000 	mov.w	r0, #0
   2dc2c:	2201      	movs	r2, #1
   2dc2e:	f362 0002 	bfi	r0, r2, #0, #3
   2dc32:	f36f 00c5 	bfc	r0, #3, #3
   2dc36:	f363 108f 	bfi	r0, r3, #6, #10
   2dc3a:	462a      	mov	r2, r5
   2dc3c:	4919      	ldr	r1, [pc, #100]	; (2dca4 <parse_cereg+0x238>)
   2dc3e:	f00e fa03 	bl	3c048 <log_string_sync>
		err = at_params_string_get(
   2dc42:	462c      	mov	r4, r5
			goto clean_exit;
   2dc44:	e78e      	b.n	2db64 <parse_cereg+0xf8>
		err = at_params_string_get(&resp_list,
   2dc46:	2104      	movs	r1, #4
   2dc48:	e7d5      	b.n	2dbf6 <parse_cereg+0x18a>
   2dc4a:	4b10      	ldr	r3, [pc, #64]	; (2dc8c <parse_cereg+0x220>)
   2dc4c:	4a10      	ldr	r2, [pc, #64]	; (2dc90 <parse_cereg+0x224>)
   2dc4e:	1a9b      	subs	r3, r3, r2
   2dc50:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not get cell ID, error: %d", err);
   2dc52:	f04f 0000 	mov.w	r0, #0
   2dc56:	2201      	movs	r2, #1
   2dc58:	f362 0002 	bfi	r0, r2, #0, #3
   2dc5c:	f36f 00c5 	bfc	r0, #3, #3
   2dc60:	f363 108f 	bfi	r0, r3, #6, #10
   2dc64:	462a      	mov	r2, r5
   2dc66:	4910      	ldr	r1, [pc, #64]	; (2dca8 <parse_cereg+0x23c>)
   2dc68:	f00e f9ee 	bl	3c048 <log_string_sync>
		err = at_params_string_get(&resp_list,
   2dc6c:	462c      	mov	r4, r5
			goto clean_exit;
   2dc6e:	e779      	b.n	2db64 <parse_cereg+0xf8>
	err = at_params_string_get(&resp_list,
   2dc70:	4625      	mov	r5, r4
   2dc72:	e740      	b.n	2daf6 <parse_cereg+0x8a>
		err = at_params_int_get(&resp_list,
   2dc74:	2105      	movs	r1, #5
   2dc76:	e746      	b.n	2db06 <parse_cereg+0x9a>
			*lte_mode = mode;
   2dc78:	9a00      	ldr	r2, [sp, #0]
   2dc7a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2dc7c:	700a      	strb	r2, [r1, #0]
		err = at_params_int_get(&resp_list,
   2dc7e:	4604      	mov	r4, r0
			LOG_DBG("LTE mode: %d", *lte_mode);
   2dc80:	e770      	b.n	2db64 <parse_cereg+0xf8>
clean_exit:
   2dc82:	462c      	mov	r4, r5
   2dc84:	e76e      	b.n	2db64 <parse_cereg+0xf8>
   2dc86:	bf00      	nop
   2dc88:	00043c38 	.word	0x00043c38
   2dc8c:	000412a8 	.word	0x000412a8
   2dc90:	00041200 	.word	0x00041200
   2dc94:	00043d00 	.word	0x00043d00
   2dc98:	00043f3c 	.word	0x00043f3c
   2dc9c:	00043f6c 	.word	0x00043f6c
   2dca0:	000438e4 	.word	0x000438e4
   2dca4:	00043f98 	.word	0x00043f98
   2dca8:	00043fc4 	.word	0x00043fc4

0002dcac <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   2dcac:	b570      	push	{r4, r5, r6, lr}
   2dcae:	b082      	sub	sp, #8
	int err;
	struct at_param_list resp_list = {0};
   2dcb0:	2300      	movs	r3, #0
   2dcb2:	9300      	str	r3, [sp, #0]
   2dcb4:	9301      	str	r3, [sp, #4]

	if (time == NULL || at_response == NULL) {
   2dcb6:	2900      	cmp	r1, #0
   2dcb8:	d06e      	beq.n	2dd98 <parse_xt3412+0xec>
   2dcba:	4604      	mov	r4, r0
   2dcbc:	460e      	mov	r6, r1
   2dcbe:	2800      	cmp	r0, #0
   2dcc0:	d06d      	beq.n	2dd9e <parse_xt3412+0xf2>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   2dcc2:	2104      	movs	r1, #4
   2dcc4:	4668      	mov	r0, sp
   2dcc6:	f010 fb25 	bl	3e314 <at_params_list_init>
	if (err) {
   2dcca:	4605      	mov	r5, r0
   2dccc:	b9d8      	cbnz	r0, 2dd06 <parse_xt3412+0x5a>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XT3412 response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   2dcce:	466a      	mov	r2, sp
   2dcd0:	2100      	movs	r1, #0
   2dcd2:	4620      	mov	r0, r4
   2dcd4:	f010 fb19 	bl	3e30a <at_parser_params_from_str>
	if (err) {
   2dcd8:	4605      	mov	r5, r0
   2dcda:	bb30      	cbnz	r0, 2dd2a <parse_xt3412+0x7e>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
		goto clean_exit;
	}

	/* Get the remaining time of T3412 from the response */
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   2dcdc:	4632      	mov	r2, r6
   2dcde:	2102      	movs	r1, #2
   2dce0:	4668      	mov	r0, sp
   2dce2:	f010 fc5d 	bl	3e5a0 <at_params_int64_get>
	if (err) {
   2dce6:	4605      	mov	r5, r0
   2dce8:	bb88      	cbnz	r0, 2dd4e <parse_xt3412+0xa2>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
		goto clean_exit;
	}

	if ((*time > T3412_MAX) || *time < 0) {
   2dcea:	e9d6 2300 	ldrd	r2, r3, [r6]
   2dcee:	482d      	ldr	r0, [pc, #180]	; (2dda4 <parse_xt3412+0xf8>)
   2dcf0:	2108      	movs	r1, #8
   2dcf2:	4299      	cmp	r1, r3
   2dcf4:	bf08      	it	eq
   2dcf6:	4290      	cmpeq	r0, r2
   2dcf8:	d33b      	bcc.n	2dd72 <parse_xt3412+0xc6>
		LOG_WRN("Parsed time parameter not within valid range");
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   2dcfa:	4668      	mov	r0, sp
   2dcfc:	f010 fb33 	bl	3e366 <at_params_list_free>
	return err;
}
   2dd00:	4628      	mov	r0, r5
   2dd02:	b002      	add	sp, #8
   2dd04:	bd70      	pop	{r4, r5, r6, pc}
   2dd06:	4b28      	ldr	r3, [pc, #160]	; (2dda8 <parse_xt3412+0xfc>)
   2dd08:	4a28      	ldr	r2, [pc, #160]	; (2ddac <parse_xt3412+0x100>)
   2dd0a:	1a9b      	subs	r3, r3, r2
   2dd0c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   2dd0e:	f04f 0000 	mov.w	r0, #0
   2dd12:	2201      	movs	r2, #1
   2dd14:	f362 0002 	bfi	r0, r2, #0, #3
   2dd18:	f36f 00c5 	bfc	r0, #3, #3
   2dd1c:	f363 108f 	bfi	r0, r3, #6, #10
   2dd20:	462a      	mov	r2, r5
   2dd22:	4923      	ldr	r1, [pc, #140]	; (2ddb0 <parse_xt3412+0x104>)
   2dd24:	f00e f990 	bl	3c048 <log_string_sync>
		return err;
   2dd28:	e7ea      	b.n	2dd00 <parse_xt3412+0x54>
   2dd2a:	4b1f      	ldr	r3, [pc, #124]	; (2dda8 <parse_xt3412+0xfc>)
   2dd2c:	4a1f      	ldr	r2, [pc, #124]	; (2ddac <parse_xt3412+0x100>)
   2dd2e:	1a9b      	subs	r3, r3, r2
   2dd30:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   2dd32:	f04f 0000 	mov.w	r0, #0
   2dd36:	2201      	movs	r2, #1
   2dd38:	f362 0002 	bfi	r0, r2, #0, #3
   2dd3c:	f36f 00c5 	bfc	r0, #3, #3
   2dd40:	f363 108f 	bfi	r0, r3, #6, #10
   2dd44:	462a      	mov	r2, r5
   2dd46:	491b      	ldr	r1, [pc, #108]	; (2ddb4 <parse_xt3412+0x108>)
   2dd48:	f00e f97e 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2dd4c:	e7d5      	b.n	2dcfa <parse_xt3412+0x4e>
   2dd4e:	4b16      	ldr	r3, [pc, #88]	; (2dda8 <parse_xt3412+0xfc>)
   2dd50:	4a16      	ldr	r2, [pc, #88]	; (2ddac <parse_xt3412+0x100>)
   2dd52:	1a9b      	subs	r3, r3, r2
   2dd54:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   2dd56:	f04f 0000 	mov.w	r0, #0
   2dd5a:	2201      	movs	r2, #1
   2dd5c:	f362 0002 	bfi	r0, r2, #0, #3
   2dd60:	f36f 00c5 	bfc	r0, #3, #3
   2dd64:	f363 108f 	bfi	r0, r3, #6, #10
   2dd68:	462a      	mov	r2, r5
   2dd6a:	4913      	ldr	r1, [pc, #76]	; (2ddb8 <parse_xt3412+0x10c>)
   2dd6c:	f00e f96c 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2dd70:	e7c3      	b.n	2dcfa <parse_xt3412+0x4e>
   2dd72:	4b0d      	ldr	r3, [pc, #52]	; (2dda8 <parse_xt3412+0xfc>)
   2dd74:	4a0d      	ldr	r2, [pc, #52]	; (2ddac <parse_xt3412+0x100>)
   2dd76:	1a9b      	subs	r3, r3, r2
   2dd78:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Parsed time parameter not within valid range");
   2dd7a:	f04f 0000 	mov.w	r0, #0
   2dd7e:	2202      	movs	r2, #2
   2dd80:	f362 0002 	bfi	r0, r2, #0, #3
   2dd84:	f36f 00c5 	bfc	r0, #3, #3
   2dd88:	f363 108f 	bfi	r0, r3, #6, #10
   2dd8c:	490b      	ldr	r1, [pc, #44]	; (2ddbc <parse_xt3412+0x110>)
   2dd8e:	f00e f95b 	bl	3c048 <log_string_sync>
		err = -EINVAL;
   2dd92:	f06f 0515 	mvn.w	r5, #21
   2dd96:	e7b0      	b.n	2dcfa <parse_xt3412+0x4e>
		return -EINVAL;
   2dd98:	f06f 0515 	mvn.w	r5, #21
   2dd9c:	e7b0      	b.n	2dd00 <parse_xt3412+0x54>
   2dd9e:	f06f 0515 	mvn.w	r5, #21
   2dda2:	e7ad      	b.n	2dd00 <parse_xt3412+0x54>
   2dda4:	5099e000 	.word	0x5099e000
   2dda8:	000412a8 	.word	0x000412a8
   2ddac:	00041200 	.word	0x00041200
   2ddb0:	00043d00 	.word	0x00043d00
   2ddb4:	00043fe8 	.word	0x00043fe8
   2ddb8:	00044018 	.word	0x00044018
   2ddbc:	00044048 	.word	0x00044048

0002ddc0 <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   2ddc0:	b508      	push	{r3, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   2ddc2:	b150      	cbz	r0, 2ddda <neighborcell_count_get+0x1a>
		LOG_ERR("at_response is NULL, can't get cell count");
		return 0;
	}

	comma_count = get_char_frequency(at_response, ',');
   2ddc4:	212c      	movs	r1, #44	; 0x2c
   2ddc6:	f010 fc74 	bl	3e6b2 <get_char_frequency>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   2ddca:	280a      	cmp	r0, #10
   2ddcc:	d915      	bls.n	2ddfa <neighborcell_count_get+0x3a>
		return 0;
	}

	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   2ddce:	3809      	subs	r0, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   2ddd0:	4b0b      	ldr	r3, [pc, #44]	; (2de00 <neighborcell_count_get+0x40>)
   2ddd2:	fba3 3000 	umull	r3, r0, r3, r0
   2ddd6:	0880      	lsrs	r0, r0, #2

	return ncell_count;
}
   2ddd8:	bd08      	pop	{r3, pc}
   2ddda:	4b0a      	ldr	r3, [pc, #40]	; (2de04 <neighborcell_count_get+0x44>)
   2dddc:	4a0a      	ldr	r2, [pc, #40]	; (2de08 <neighborcell_count_get+0x48>)
   2ddde:	1a9b      	subs	r3, r3, r2
   2dde0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("at_response is NULL, can't get cell count");
   2dde2:	2201      	movs	r2, #1
   2dde4:	f362 0002 	bfi	r0, r2, #0, #3
   2dde8:	f36f 00c5 	bfc	r0, #3, #3
   2ddec:	f363 108f 	bfi	r0, r3, #6, #10
   2ddf0:	4906      	ldr	r1, [pc, #24]	; (2de0c <neighborcell_count_get+0x4c>)
   2ddf2:	f00e f929 	bl	3c048 <log_string_sync>
		return 0;
   2ddf6:	2000      	movs	r0, #0
   2ddf8:	e7ee      	b.n	2ddd8 <neighborcell_count_get+0x18>
		return 0;
   2ddfa:	2000      	movs	r0, #0
   2ddfc:	e7ec      	b.n	2ddd8 <neighborcell_count_get+0x18>
   2ddfe:	bf00      	nop
   2de00:	cccccccd 	.word	0xcccccccd
   2de04:	000412a8 	.word	0x000412a8
   2de08:	00041200 	.word	0x00041200
   2de0c:	00044078 	.word	0x00044078

0002de10 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   2de10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2de14:	b08d      	sub	sp, #52	; 0x34
   2de16:	4606      	mov	r6, r0
   2de18:	460d      	mov	r5, r1
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   2de1a:	2400      	movs	r4, #0
   2de1c:	9404      	str	r4, [sp, #16]
   2de1e:	9405      	str	r4, [sp, #20]
   2de20:	f8cd 4017 	str.w	r4, [sp, #23]
	size_t response_prefix_len = sizeof(response_prefix);
   2de24:	230b      	movs	r3, #11
   2de26:	9303      	str	r3, [sp, #12]
	 * allocating heap for it. This may save quite a bit of heap as the
	 * worst case scenario is 96 elements.
	 * 3 is added to account for the parameters that do not have a trailng
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;
   2de28:	212c      	movs	r1, #44	; 0x2c
   2de2a:	f010 fc42 	bl	3e6b2 <get_char_frequency>

	cells->ncells_count = 0;
   2de2e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   2de32:	f04f 33ff 	mov.w	r3, #4294967295
   2de36:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   2de38:	1cc1      	adds	r1, r0, #3
   2de3a:	a807      	add	r0, sp, #28
   2de3c:	f010 fa6a 	bl	3e314 <at_params_list_init>
	if (err) {
   2de40:	bb50      	cbnz	r0, 2de98 <parse_ncellmeas+0x88>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	err = at_parser_params_from_str(at_response,
   2de42:	aa07      	add	r2, sp, #28
   2de44:	2100      	movs	r1, #0
   2de46:	4630      	mov	r0, r6
   2de48:	f010 fa5f 	bl	3e30a <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err && err != -E2BIG) {
   2de4c:	4604      	mov	r4, r0
   2de4e:	b110      	cbz	r0, 2de56 <parse_ncellmeas+0x46>
   2de50:	f110 0f07 	cmn.w	r0, #7
   2de54:	d133      	bne.n	2debe <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
		goto clean_exit;
	} else if (err == -E2BIG) {
   2de56:	f114 0f07 	cmn.w	r4, #7
   2de5a:	d042      	beq.n	2dee2 <parse_ncellmeas+0xd2>
	bool incomplete = false;
   2de5c:	2700      	movs	r7, #0
		incomplete = true;
	}

	err = at_params_string_get(&resp_list,
   2de5e:	ab03      	add	r3, sp, #12
   2de60:	aa04      	add	r2, sp, #16
   2de62:	2100      	movs	r1, #0
   2de64:	a807      	add	r0, sp, #28
   2de66:	f010 fbbc 	bl	3e5e2 <at_params_string_get>
				   AT_RESPONSE_PREFIX_INDEX,
				   response_prefix,
				   &response_prefix_len);
	if (err) {
   2de6a:	4604      	mov	r4, r0
   2de6c:	2800      	cmp	r0, #0
   2de6e:	d13a      	bne.n	2dee6 <parse_ncellmeas+0xd6>
		LOG_ERR("Could not get response prefix, error: %d", err);
		goto clean_exit;
	}

	if (!response_is_valid(response_prefix, response_prefix_len,
   2de70:	4aa3      	ldr	r2, [pc, #652]	; (2e100 <parse_ncellmeas+0x2f0>)
   2de72:	9903      	ldr	r1, [sp, #12]
   2de74:	a804      	add	r0, sp, #16
   2de76:	f7ff fb5d 	bl	2d534 <response_is_valid>
   2de7a:	2800      	cmp	r0, #0
   2de7c:	d044      	beq.n	2df08 <parse_ncellmeas+0xf8>
		LOG_DBG("Not a valid NCELLMEAS response");
		goto clean_exit;
	}

	/* Status code. */
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   2de7e:	aa0b      	add	r2, sp, #44	; 0x2c
   2de80:	2101      	movs	r1, #1
   2de82:	a807      	add	r0, sp, #28
   2de84:	f010 fb61 	bl	3e54a <at_params_int_get>
	if (err) {
   2de88:	4604      	mov	r4, r0
   2de8a:	2800      	cmp	r0, #0
   2de8c:	d13c      	bne.n	2df08 <parse_ncellmeas+0xf8>
		goto clean_exit;
	}

	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   2de8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2de90:	2b00      	cmp	r3, #0
   2de92:	d040      	beq.n	2df16 <parse_ncellmeas+0x106>
		err = 1;
   2de94:	2401      	movs	r4, #1
   2de96:	e037      	b.n	2df08 <parse_ncellmeas+0xf8>
   2de98:	4604      	mov	r4, r0
   2de9a:	4b9a      	ldr	r3, [pc, #616]	; (2e104 <parse_ncellmeas+0x2f4>)
   2de9c:	4a9a      	ldr	r2, [pc, #616]	; (2e108 <parse_ncellmeas+0x2f8>)
   2de9e:	1a9b      	subs	r3, r3, r2
   2dea0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   2dea2:	f04f 0000 	mov.w	r0, #0
   2dea6:	2201      	movs	r2, #1
   2dea8:	f362 0002 	bfi	r0, r2, #0, #3
   2deac:	f36f 00c5 	bfc	r0, #3, #3
   2deb0:	f363 108f 	bfi	r0, r3, #6, #10
   2deb4:	4622      	mov	r2, r4
   2deb6:	4995      	ldr	r1, [pc, #596]	; (2e10c <parse_ncellmeas+0x2fc>)
   2deb8:	f00e f8c6 	bl	3c048 <log_string_sync>
		return err;
   2debc:	e027      	b.n	2df0e <parse_ncellmeas+0xfe>
   2debe:	4b91      	ldr	r3, [pc, #580]	; (2e104 <parse_ncellmeas+0x2f4>)
   2dec0:	4a91      	ldr	r2, [pc, #580]	; (2e108 <parse_ncellmeas+0x2f8>)
   2dec2:	1a9b      	subs	r3, r3, r2
   2dec4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   2dec6:	f04f 0000 	mov.w	r0, #0
   2deca:	2201      	movs	r2, #1
   2decc:	f362 0002 	bfi	r0, r2, #0, #3
   2ded0:	f36f 00c5 	bfc	r0, #3, #3
   2ded4:	f363 108f 	bfi	r0, r3, #6, #10
   2ded8:	4622      	mov	r2, r4
   2deda:	498d      	ldr	r1, [pc, #564]	; (2e110 <parse_ncellmeas+0x300>)
   2dedc:	f00e f8b4 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2dee0:	e012      	b.n	2df08 <parse_ncellmeas+0xf8>
		incomplete = true;
   2dee2:	2701      	movs	r7, #1
   2dee4:	e7bb      	b.n	2de5e <parse_ncellmeas+0x4e>
   2dee6:	4b87      	ldr	r3, [pc, #540]	; (2e104 <parse_ncellmeas+0x2f4>)
   2dee8:	4a87      	ldr	r2, [pc, #540]	; (2e108 <parse_ncellmeas+0x2f8>)
   2deea:	1a9b      	subs	r3, r3, r2
   2deec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get response prefix, error: %d", err);
   2deee:	f04f 0000 	mov.w	r0, #0
   2def2:	2201      	movs	r2, #1
   2def4:	f362 0002 	bfi	r0, r2, #0, #3
   2def8:	f36f 00c5 	bfc	r0, #3, #3
   2defc:	f363 108f 	bfi	r0, r3, #6, #10
   2df00:	4622      	mov	r2, r4
   2df02:	4984      	ldr	r1, [pc, #528]	; (2e114 <parse_ncellmeas+0x304>)
   2df04:	f00e f8a0 	bl	3c048 <log_string_sync>
	if (incomplete) {
		err = -E2BIG;
	}

clean_exit:
	at_params_list_free(&resp_list);
   2df08:	a807      	add	r0, sp, #28
   2df0a:	f010 fa2c 	bl	3e366 <at_params_list_free>

	return err;
}
   2df0e:	4620      	mov	r0, r4
   2df10:	b00d      	add	sp, #52	; 0x34
   2df12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   2df16:	2310      	movs	r3, #16
   2df18:	aa0a      	add	r2, sp, #40	; 0x28
   2df1a:	2102      	movs	r1, #2
   2df1c:	a807      	add	r0, sp, #28
   2df1e:	f010 fbf9 	bl	3e714 <string_param_to_int>
	if (err) {
   2df22:	4604      	mov	r4, r0
   2df24:	2800      	cmp	r0, #0
   2df26:	d1ef      	bne.n	2df08 <parse_ncellmeas+0xf8>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   2df28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2df2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   2df2e:	db02      	blt.n	2df36 <parse_ncellmeas+0x126>
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   2df30:	f04f 33ff 	mov.w	r3, #4294967295
   2df34:	930a      	str	r3, [sp, #40]	; 0x28
	cells->current_cell.id = tmp;
   2df36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2df38:	60ab      	str	r3, [r5, #8]
	len = sizeof(tmp_str);
   2df3a:	2307      	movs	r3, #7
   2df3c:	9309      	str	r3, [sp, #36]	; 0x24
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   2df3e:	ab09      	add	r3, sp, #36	; 0x24
   2df40:	aa01      	add	r2, sp, #4
   2df42:	2103      	movs	r1, #3
   2df44:	a807      	add	r0, sp, #28
   2df46:	f010 fb4c 	bl	3e5e2 <at_params_string_get>
	if (err) {
   2df4a:	4604      	mov	r4, r0
   2df4c:	2800      	cmp	r0, #0
   2df4e:	d1db      	bne.n	2df08 <parse_ncellmeas+0xf8>
	tmp_str[len] = '\0';
   2df50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2df52:	aa0c      	add	r2, sp, #48	; 0x30
   2df54:	4413      	add	r3, r2
   2df56:	2200      	movs	r2, #0
   2df58:	f803 2c2c 	strb.w	r2, [r3, #-44]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   2df5c:	1d2a      	adds	r2, r5, #4
   2df5e:	210a      	movs	r1, #10
   2df60:	f10d 0007 	add.w	r0, sp, #7
   2df64:	f010 fbb0 	bl	3e6c8 <string_to_int>
	if (err) {
   2df68:	4604      	mov	r4, r0
   2df6a:	2800      	cmp	r0, #0
   2df6c:	d1cc      	bne.n	2df08 <parse_ncellmeas+0xf8>
	tmp_str[3] = '\0';
   2df6e:	2300      	movs	r3, #0
   2df70:	f88d 3007 	strb.w	r3, [sp, #7]
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   2df74:	462a      	mov	r2, r5
   2df76:	210a      	movs	r1, #10
   2df78:	a801      	add	r0, sp, #4
   2df7a:	f010 fba5 	bl	3e6c8 <string_to_int>
	if (err) {
   2df7e:	4604      	mov	r4, r0
   2df80:	2800      	cmp	r0, #0
   2df82:	d1c1      	bne.n	2df08 <parse_ncellmeas+0xf8>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   2df84:	2310      	movs	r3, #16
   2df86:	aa0a      	add	r2, sp, #40	; 0x28
   2df88:	2104      	movs	r1, #4
   2df8a:	a807      	add	r0, sp, #28
   2df8c:	f010 fbc2 	bl	3e714 <string_param_to_int>
	if (err) {
   2df90:	4604      	mov	r4, r0
   2df92:	2800      	cmp	r0, #0
   2df94:	d1b8      	bne.n	2df08 <parse_ncellmeas+0xf8>
	cells->current_cell.tac = tmp;
   2df96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2df98:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   2df9a:	aa0a      	add	r2, sp, #40	; 0x28
   2df9c:	2105      	movs	r1, #5
   2df9e:	a807      	add	r0, sp, #28
   2dfa0:	f010 fad3 	bl	3e54a <at_params_int_get>
	if (err) {
   2dfa4:	4604      	mov	r4, r0
   2dfa6:	2800      	cmp	r0, #0
   2dfa8:	d1ae      	bne.n	2df08 <parse_ncellmeas+0xf8>
	cells->current_cell.timing_advance = tmp;
   2dfaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dfac:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   2dfae:	f105 0210 	add.w	r2, r5, #16
   2dfb2:	2106      	movs	r1, #6
   2dfb4:	a807      	add	r0, sp, #28
   2dfb6:	f010 fac8 	bl	3e54a <at_params_int_get>
	if (err) {
   2dfba:	4604      	mov	r4, r0
   2dfbc:	2800      	cmp	r0, #0
   2dfbe:	d1a3      	bne.n	2df08 <parse_ncellmeas+0xf8>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   2dfc0:	f105 0228 	add.w	r2, r5, #40	; 0x28
   2dfc4:	2107      	movs	r1, #7
   2dfc6:	a807      	add	r0, sp, #28
   2dfc8:	f010 fa6a 	bl	3e4a0 <at_params_short_get>
	if (err) {
   2dfcc:	4604      	mov	r4, r0
   2dfce:	2800      	cmp	r0, #0
   2dfd0:	d19a      	bne.n	2df08 <parse_ncellmeas+0xf8>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   2dfd2:	aa0a      	add	r2, sp, #40	; 0x28
   2dfd4:	2108      	movs	r1, #8
   2dfd6:	a807      	add	r0, sp, #28
   2dfd8:	f010 fab7 	bl	3e54a <at_params_int_get>
	if (err) {
   2dfdc:	4604      	mov	r4, r0
   2dfde:	2800      	cmp	r0, #0
   2dfe0:	d192      	bne.n	2df08 <parse_ncellmeas+0xf8>
	cells->current_cell.rsrp = tmp;
   2dfe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dfe4:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   2dfe6:	aa0a      	add	r2, sp, #40	; 0x28
   2dfe8:	2109      	movs	r1, #9
   2dfea:	a807      	add	r0, sp, #28
   2dfec:	f010 faad 	bl	3e54a <at_params_int_get>
	if (err) {
   2dff0:	4604      	mov	r4, r0
   2dff2:	2800      	cmp	r0, #0
   2dff4:	d188      	bne.n	2df08 <parse_ncellmeas+0xf8>
	cells->current_cell.rsrq = tmp;
   2dff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dff8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   2dffa:	f105 0220 	add.w	r2, r5, #32
   2dffe:	210a      	movs	r1, #10
   2e000:	a807      	add	r0, sp, #28
   2e002:	f010 facd 	bl	3e5a0 <at_params_int64_get>
	if (err) {
   2e006:	4604      	mov	r4, r0
   2e008:	2800      	cmp	r0, #0
   2e00a:	f47f af7d 	bne.w	2df08 <parse_ncellmeas+0xf8>
	cells->ncells_count = neighborcell_count_get(at_response);
   2e00e:	4630      	mov	r0, r6
   2e010:	f7ff fed6 	bl	2ddc0 <neighborcell_count_get>
   2e014:	b2c3      	uxtb	r3, r0
   2e016:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   2e01a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   2e01e:	f103 060b 	add.w	r6, r3, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   2e022:	a807      	add	r0, sp, #28
   2e024:	f010 fb0f 	bl	3e646 <at_params_valid_count_get>
   2e028:	4286      	cmp	r6, r0
   2e02a:	d358      	bcc.n	2e0de <parse_ncellmeas+0x2ce>
		cells->current_cell.timing_advance_meas_time = 0;
   2e02c:	2200      	movs	r2, #0
   2e02e:	2300      	movs	r3, #0
   2e030:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   2e034:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2e038:	2b00      	cmp	r3, #0
   2e03a:	f43f af65 	beq.w	2df08 <parse_ncellmeas+0xf8>
   2e03e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2e040:	2b00      	cmp	r3, #0
   2e042:	f43f af61 	beq.w	2df08 <parse_ncellmeas+0xf8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   2e046:	2600      	movs	r6, #0
   2e048:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   2e04c:	429e      	cmp	r6, r3
   2e04e:	d250      	bcs.n	2e0f2 <parse_ncellmeas+0x2e2>
				   i * AT_NCELLMEAS_N_PARAMS_COUNT;
   2e050:	eb06 0886 	add.w	r8, r6, r6, lsl #2
					&cells->neighbor_cells[i].earfcn);
   2e054:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   2e056:	ea4f 1906 	mov.w	r9, r6, lsl #4
		err = at_params_int_get(&resp_list,
   2e05a:	eb02 1206 	add.w	r2, r2, r6, lsl #4
   2e05e:	f108 010b 	add.w	r1, r8, #11
   2e062:	a807      	add	r0, sp, #28
   2e064:	f010 fa71 	bl	3e54a <at_params_int_get>
		if (err) {
   2e068:	4604      	mov	r4, r0
   2e06a:	2800      	cmp	r0, #0
   2e06c:	f47f af4c 	bne.w	2df08 <parse_ncellmeas+0xf8>
					  &cells->neighbor_cells[i].phys_cell_id);
   2e070:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2e072:	444b      	add	r3, r9
		err = at_params_short_get(&resp_list,
   2e074:	f103 0208 	add.w	r2, r3, #8
   2e078:	f108 010c 	add.w	r1, r8, #12
   2e07c:	a807      	add	r0, sp, #28
   2e07e:	f010 fa0f 	bl	3e4a0 <at_params_short_get>
		if (err) {
   2e082:	4604      	mov	r4, r0
   2e084:	2800      	cmp	r0, #0
   2e086:	f47f af3f 	bne.w	2df08 <parse_ncellmeas+0xf8>
		err = at_params_int_get(&resp_list,
   2e08a:	aa0a      	add	r2, sp, #40	; 0x28
   2e08c:	f108 010d 	add.w	r1, r8, #13
   2e090:	a807      	add	r0, sp, #28
   2e092:	f010 fa5a 	bl	3e54a <at_params_int_get>
		if (err) {
   2e096:	4604      	mov	r4, r0
   2e098:	2800      	cmp	r0, #0
   2e09a:	f47f af35 	bne.w	2df08 <parse_ncellmeas+0xf8>
		cells->neighbor_cells[i].rsrp = tmp;
   2e09e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2e0a0:	444b      	add	r3, r9
   2e0a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2e0a4:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   2e0a6:	aa0a      	add	r2, sp, #40	; 0x28
   2e0a8:	f108 010e 	add.w	r1, r8, #14
   2e0ac:	a807      	add	r0, sp, #28
   2e0ae:	f010 fa4c 	bl	3e54a <at_params_int_get>
		if (err) {
   2e0b2:	4604      	mov	r4, r0
   2e0b4:	2800      	cmp	r0, #0
   2e0b6:	f47f af27 	bne.w	2df08 <parse_ncellmeas+0xf8>
		cells->neighbor_cells[i].rsrq = tmp;
   2e0ba:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2e0bc:	444b      	add	r3, r9
   2e0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2e0c0:	819a      	strh	r2, [r3, #12]
					&cells->neighbor_cells[i].time_diff);
   2e0c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2e0c4:	444b      	add	r3, r9
		err = at_params_int_get(&resp_list,
   2e0c6:	1d1a      	adds	r2, r3, #4
   2e0c8:	f108 010f 	add.w	r1, r8, #15
   2e0cc:	a807      	add	r0, sp, #28
   2e0ce:	f010 fa3c 	bl	3e54a <at_params_int_get>
		if (err) {
   2e0d2:	4604      	mov	r4, r0
   2e0d4:	2800      	cmp	r0, #0
   2e0d6:	f47f af17 	bne.w	2df08 <parse_ncellmeas+0xf8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   2e0da:	3601      	adds	r6, #1
   2e0dc:	e7b4      	b.n	2e048 <parse_ncellmeas+0x238>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   2e0de:	f105 0218 	add.w	r2, r5, #24
   2e0e2:	4631      	mov	r1, r6
   2e0e4:	a807      	add	r0, sp, #28
   2e0e6:	f010 fa5b 	bl	3e5a0 <at_params_int64_get>
		if (err) {
   2e0ea:	4604      	mov	r4, r0
   2e0ec:	2800      	cmp	r0, #0
   2e0ee:	d0a1      	beq.n	2e034 <parse_ncellmeas+0x224>
   2e0f0:	e70a      	b.n	2df08 <parse_ncellmeas+0xf8>
	if (incomplete) {
   2e0f2:	2f00      	cmp	r7, #0
   2e0f4:	f43f af08 	beq.w	2df08 <parse_ncellmeas+0xf8>
		err = -E2BIG;
   2e0f8:	f06f 0406 	mvn.w	r4, #6
   2e0fc:	e704      	b.n	2df08 <parse_ncellmeas+0xf8>
   2e0fe:	bf00      	nop
   2e100:	00043c14 	.word	0x00043c14
   2e104:	000412a8 	.word	0x000412a8
   2e108:	00041200 	.word	0x00041200
   2e10c:	00043d00 	.word	0x00043d00
   2e110:	000440a4 	.word	0x000440a4
   2e114:	00043f6c 	.word	0x00043f6c

0002e118 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   2e118:	b570      	push	{r4, r5, r6, lr}
   2e11a:	b084      	sub	sp, #16
	int err;
	struct at_param_list resp_list = {0};
   2e11c:	2300      	movs	r3, #0
   2e11e:	9302      	str	r3, [sp, #8]
   2e120:	9303      	str	r3, [sp, #12]
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   2e122:	2900      	cmp	r1, #0
   2e124:	d07e      	beq.n	2e224 <parse_xmodemsleep+0x10c>
   2e126:	4604      	mov	r4, r0
   2e128:	460e      	mov	r6, r1
   2e12a:	2800      	cmp	r0, #0
   2e12c:	d07d      	beq.n	2e22a <parse_xmodemsleep+0x112>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   2e12e:	2104      	movs	r1, #4
   2e130:	a802      	add	r0, sp, #8
   2e132:	f010 f8ef 	bl	3e314 <at_params_list_init>
	if (err) {
   2e136:	4605      	mov	r5, r0
   2e138:	b9f0      	cbnz	r0, 2e178 <parse_xmodemsleep+0x60>
		LOG_ERR("Could not init AT params list, error: %d", err);
		return err;
	}

	/* Parse XMODEMSLEEP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   2e13a:	aa02      	add	r2, sp, #8
   2e13c:	2100      	movs	r1, #0
   2e13e:	4620      	mov	r0, r4
   2e140:	f010 f8e3 	bl	3e30a <at_parser_params_from_str>
	if (err) {
   2e144:	4605      	mov	r5, r0
   2e146:	bb48      	cbnz	r0, 2e19c <parse_xmodemsleep+0x84>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
		goto clean_exit;
	}

	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   2e148:	f10d 0206 	add.w	r2, sp, #6
   2e14c:	2101      	movs	r1, #1
   2e14e:	a802      	add	r0, sp, #8
   2e150:	f010 f9d2 	bl	3e4f8 <at_params_unsigned_short_get>
	if (err) {
   2e154:	4605      	mov	r5, r0
   2e156:	2800      	cmp	r0, #0
   2e158:	d137      	bne.n	2e1ca <parse_xmodemsleep+0xb2>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
		goto clean_exit;
	}
	modem_sleep->type = type;
   2e15a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2e15e:	7033      	strb	r3, [r6, #0]

	/* If the time parameter is not present sleep time is considered infinite. */
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   2e160:	a802      	add	r0, sp, #8
   2e162:	f010 fa70 	bl	3e646 <at_params_valid_count_get>
   2e166:	2802      	cmp	r0, #2
   2e168:	d841      	bhi.n	2e1ee <parse_xmodemsleep+0xd6>
		modem_sleep->time = -1;
   2e16a:	f04f 32ff 	mov.w	r2, #4294967295
   2e16e:	f04f 33ff 	mov.w	r3, #4294967295
   2e172:	e9c6 2302 	strd	r2, r3, [r6, #8]
		goto clean_exit;
   2e176:	e022      	b.n	2e1be <parse_xmodemsleep+0xa6>
   2e178:	4b2d      	ldr	r3, [pc, #180]	; (2e230 <parse_xmodemsleep+0x118>)
   2e17a:	4a2e      	ldr	r2, [pc, #184]	; (2e234 <parse_xmodemsleep+0x11c>)
   2e17c:	1a9b      	subs	r3, r3, r2
   2e17e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not init AT params list, error: %d", err);
   2e180:	f04f 0000 	mov.w	r0, #0
   2e184:	2201      	movs	r2, #1
   2e186:	f362 0002 	bfi	r0, r2, #0, #3
   2e18a:	f36f 00c5 	bfc	r0, #3, #3
   2e18e:	f363 108f 	bfi	r0, r3, #6, #10
   2e192:	462a      	mov	r2, r5
   2e194:	4928      	ldr	r1, [pc, #160]	; (2e238 <parse_xmodemsleep+0x120>)
   2e196:	f00d ff57 	bl	3c048 <log_string_sync>
		return err;
   2e19a:	e013      	b.n	2e1c4 <parse_xmodemsleep+0xac>
   2e19c:	4b24      	ldr	r3, [pc, #144]	; (2e230 <parse_xmodemsleep+0x118>)
   2e19e:	4a25      	ldr	r2, [pc, #148]	; (2e234 <parse_xmodemsleep+0x11c>)
   2e1a0:	1a9b      	subs	r3, r3, r2
   2e1a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   2e1a4:	f04f 0000 	mov.w	r0, #0
   2e1a8:	2201      	movs	r2, #1
   2e1aa:	f362 0002 	bfi	r0, r2, #0, #3
   2e1ae:	f36f 00c5 	bfc	r0, #3, #3
   2e1b2:	f363 108f 	bfi	r0, r3, #6, #10
   2e1b6:	462a      	mov	r2, r5
   2e1b8:	4920      	ldr	r1, [pc, #128]	; (2e23c <parse_xmodemsleep+0x124>)
   2e1ba:	f00d ff45 	bl	3c048 <log_string_sync>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
		goto clean_exit;
	}

clean_exit:
	at_params_list_free(&resp_list);
   2e1be:	a802      	add	r0, sp, #8
   2e1c0:	f010 f8d1 	bl	3e366 <at_params_list_free>
	return err;
}
   2e1c4:	4628      	mov	r0, r5
   2e1c6:	b004      	add	sp, #16
   2e1c8:	bd70      	pop	{r4, r5, r6, pc}
   2e1ca:	4b19      	ldr	r3, [pc, #100]	; (2e230 <parse_xmodemsleep+0x118>)
   2e1cc:	4a19      	ldr	r2, [pc, #100]	; (2e234 <parse_xmodemsleep+0x11c>)
   2e1ce:	1a9b      	subs	r3, r3, r2
   2e1d0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   2e1d2:	f04f 0000 	mov.w	r0, #0
   2e1d6:	2201      	movs	r2, #1
   2e1d8:	f362 0002 	bfi	r0, r2, #0, #3
   2e1dc:	f36f 00c5 	bfc	r0, #3, #3
   2e1e0:	f363 108f 	bfi	r0, r3, #6, #10
   2e1e4:	462a      	mov	r2, r5
   2e1e6:	4916      	ldr	r1, [pc, #88]	; (2e240 <parse_xmodemsleep+0x128>)
   2e1e8:	f00d ff2e 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2e1ec:	e7e7      	b.n	2e1be <parse_xmodemsleep+0xa6>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   2e1ee:	f106 0208 	add.w	r2, r6, #8
   2e1f2:	2102      	movs	r1, #2
   2e1f4:	a802      	add	r0, sp, #8
   2e1f6:	f010 f9d3 	bl	3e5a0 <at_params_int64_get>
	if (err) {
   2e1fa:	4605      	mov	r5, r0
   2e1fc:	2800      	cmp	r0, #0
   2e1fe:	d0de      	beq.n	2e1be <parse_xmodemsleep+0xa6>
   2e200:	4b0b      	ldr	r3, [pc, #44]	; (2e230 <parse_xmodemsleep+0x118>)
   2e202:	4a0c      	ldr	r2, [pc, #48]	; (2e234 <parse_xmodemsleep+0x11c>)
   2e204:	1a9b      	subs	r3, r3, r2
   2e206:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   2e208:	f04f 0000 	mov.w	r0, #0
   2e20c:	2201      	movs	r2, #1
   2e20e:	f362 0002 	bfi	r0, r2, #0, #3
   2e212:	f36f 00c5 	bfc	r0, #3, #3
   2e216:	f363 108f 	bfi	r0, r3, #6, #10
   2e21a:	462a      	mov	r2, r5
   2e21c:	4909      	ldr	r1, [pc, #36]	; (2e244 <parse_xmodemsleep+0x12c>)
   2e21e:	f00d ff13 	bl	3c048 <log_string_sync>
		goto clean_exit;
   2e222:	e7cc      	b.n	2e1be <parse_xmodemsleep+0xa6>
		return -EINVAL;
   2e224:	f06f 0515 	mvn.w	r5, #21
   2e228:	e7cc      	b.n	2e1c4 <parse_xmodemsleep+0xac>
   2e22a:	f06f 0515 	mvn.w	r5, #21
   2e22e:	e7c9      	b.n	2e1c4 <parse_xmodemsleep+0xac>
   2e230:	000412a8 	.word	0x000412a8
   2e234:	00041200 	.word	0x00041200
   2e238:	00043d00 	.word	0x00043d00
   2e23c:	000440d8 	.word	0x000440d8
   2e240:	0004410c 	.word	0x0004410c
   2e244:	00044138 	.word	0x00044138

0002e248 <parse_mdmev>:
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   2e248:	b368      	cbz	r0, 2e2a6 <parse_mdmev+0x5e>
{
   2e24a:	b570      	push	{r4, r5, r6, lr}
   2e24c:	460e      	mov	r6, r1
   2e24e:	4605      	mov	r5, r0
	if (at_response == NULL || modem_evt == NULL) {
   2e250:	b369      	cbz	r1, 2e2ae <parse_mdmev+0x66>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   2e252:	4a18      	ldr	r2, [pc, #96]	; (2e2b4 <parse_mdmev+0x6c>)
   2e254:	2108      	movs	r1, #8
   2e256:	f7ff f96d 	bl	2d534 <response_is_valid>
   2e25a:	b168      	cbz	r0, 2e278 <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
		return -EIO;
	}

	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   2e25c:	3508      	adds	r5, #8

	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2e25e:	2400      	movs	r4, #0
   2e260:	2c04      	cmp	r4, #4
   2e262:	d81c      	bhi.n	2e29e <parse_mdmev+0x56>
		if (strcmp(event_types[i], start_ptr) == 0) {
   2e264:	4629      	mov	r1, r5
   2e266:	4b14      	ldr	r3, [pc, #80]	; (2e2b8 <parse_mdmev+0x70>)
   2e268:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2e26c:	f7f3 f95c 	bl	21528 <strcmp>
   2e270:	4603      	mov	r3, r0
   2e272:	b190      	cbz	r0, 2e29a <parse_mdmev+0x52>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   2e274:	3401      	adds	r4, #1
   2e276:	e7f3      	b.n	2e260 <parse_mdmev+0x18>
   2e278:	4b10      	ldr	r3, [pc, #64]	; (2e2bc <parse_mdmev+0x74>)
   2e27a:	4a11      	ldr	r2, [pc, #68]	; (2e2c0 <parse_mdmev+0x78>)
   2e27c:	1a9b      	subs	r3, r3, r2
   2e27e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid MDMEV response");
   2e280:	2201      	movs	r2, #1
   2e282:	f362 0002 	bfi	r0, r2, #0, #3
   2e286:	f36f 00c5 	bfc	r0, #3, #3
   2e28a:	f363 108f 	bfi	r0, r3, #6, #10
   2e28e:	490d      	ldr	r1, [pc, #52]	; (2e2c4 <parse_mdmev+0x7c>)
   2e290:	f00d feda 	bl	3c048 <log_string_sync>
		return -EIO;
   2e294:	f06f 0304 	mvn.w	r3, #4
   2e298:	e003      	b.n	2e2a2 <parse_mdmev+0x5a>
			LOG_DBG("Occurrence found: %s", event_types[i]);
			*modem_evt = i;
   2e29a:	7034      	strb	r4, [r6, #0]

			return 0;
   2e29c:	e001      	b.n	2e2a2 <parse_mdmev+0x5a>
		}
	}

	LOG_DBG("No modem event type found: %s", log_strdup(at_response));

	return -ENODATA;
   2e29e:	f06f 033c 	mvn.w	r3, #60	; 0x3c
}
   2e2a2:	4618      	mov	r0, r3
   2e2a4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2e2a6:	f06f 0315 	mvn.w	r3, #21
}
   2e2aa:	4618      	mov	r0, r3
   2e2ac:	4770      	bx	lr
		return -EINVAL;
   2e2ae:	f06f 0315 	mvn.w	r3, #21
   2e2b2:	e7f6      	b.n	2e2a2 <parse_mdmev+0x5a>
   2e2b4:	00044170 	.word	0x00044170
   2e2b8:	00044240 	.word	0x00044240
   2e2bc:	000412a8 	.word	0x000412a8
   2e2c0:	00041200 	.word	0x00041200
   2e2c4:	0004417c 	.word	0x0004417c

0002e2c8 <modem_info_parse>:
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
			    const char *buf)
{
   2e2c8:	b538      	push	{r3, r4, r5, lr}
   2e2ca:	4605      	mov	r5, r0
   2e2cc:	4608      	mov	r0, r1
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2e2ce:	7a6b      	ldrb	r3, [r5, #9]
   2e2d0:	4a0a      	ldr	r2, [pc, #40]	; (2e2fc <modem_info_parse+0x34>)
   2e2d2:	2100      	movs	r1, #0
   2e2d4:	f00f fff6 	bl	3e2c4 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2e2d8:	f110 0f0b 	cmn.w	r0, #11
   2e2dc:	d009      	beq.n	2e2f2 <modem_info_parse+0x2a>
   2e2de:	4604      	mov	r4, r0
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2e2e0:	b928      	cbnz	r0, 2e2ee <modem_info_parse+0x26>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2e2e2:	4806      	ldr	r0, [pc, #24]	; (2e2fc <modem_info_parse+0x34>)
   2e2e4:	f010 f9af 	bl	3e646 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2e2e8:	7a6b      	ldrb	r3, [r5, #9]
   2e2ea:	4298      	cmp	r0, r3
   2e2ec:	d803      	bhi.n	2e2f6 <modem_info_parse+0x2e>
		return -EAGAIN;
	}

	return err;
}
   2e2ee:	4620      	mov	r0, r4
   2e2f0:	bd38      	pop	{r3, r4, r5, pc}
		err = 0;
   2e2f2:	2400      	movs	r4, #0
   2e2f4:	e7f5      	b.n	2e2e2 <modem_info_parse+0x1a>
		return -EAGAIN;
   2e2f6:	f06f 040a 	mvn.w	r4, #10
   2e2fa:	e7f8      	b.n	2e2ee <modem_info_parse+0x26>
   2e2fc:	2001033c 	.word	0x2001033c

0002e300 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(const char *notif)
{
   2e300:	b510      	push	{r4, lr}
   2e302:	b084      	sub	sp, #16
   2e304:	4604      	mov	r4, r0
	int err;
	uint16_t param_value;

	const struct modem_info_data rsrp_notify_data = {
   2e306:	4a1e      	ldr	r2, [pc, #120]	; (2e380 <modem_info_rsrp_subscribe_handler+0x80>)
   2e308:	466b      	mov	r3, sp
   2e30a:	ca07      	ldmia	r2, {r0, r1, r2}
   2e30c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_INT,
	};

	err = modem_info_parse(&rsrp_notify_data, notif);
   2e310:	4621      	mov	r1, r4
   2e312:	4618      	mov	r0, r3
   2e314:	f7ff ffd8 	bl	2e2c8 <modem_info_parse>
	if (err != 0) {
   2e318:	b978      	cbnz	r0, 2e33a <modem_info_rsrp_subscribe_handler+0x3a>
		LOG_ERR("modem_info_parse failed to parse "
			"CESQ notification, %d", err);
		return;
	}

	err = at_params_unsigned_short_get(&m_param_list,
   2e31a:	f10d 020e 	add.w	r2, sp, #14
   2e31e:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2e322:	4818      	ldr	r0, [pc, #96]	; (2e384 <modem_info_rsrp_subscribe_handler+0x84>)
   2e324:	f010 f8e8 	bl	3e4f8 <at_params_unsigned_short_get>
					   rsrp_notify_data.param_index,
					   &param_value);
	if (err != 0) {
   2e328:	4602      	mov	r2, r0
   2e32a:	b9c0      	cbnz	r0, 2e35e <modem_info_rsrp_subscribe_handler+0x5e>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
		return;
	}

	modem_info_rsrp_cb(param_value);
   2e32c:	4b16      	ldr	r3, [pc, #88]	; (2e388 <modem_info_rsrp_subscribe_handler+0x88>)
   2e32e:	681b      	ldr	r3, [r3, #0]
   2e330:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2e334:	4798      	blx	r3
}
   2e336:	b004      	add	sp, #16
   2e338:	bd10      	pop	{r4, pc}
   2e33a:	4602      	mov	r2, r0
   2e33c:	4b13      	ldr	r3, [pc, #76]	; (2e38c <modem_info_rsrp_subscribe_handler+0x8c>)
   2e33e:	4914      	ldr	r1, [pc, #80]	; (2e390 <modem_info_rsrp_subscribe_handler+0x90>)
   2e340:	1a5b      	subs	r3, r3, r1
   2e342:	08db      	lsrs	r3, r3, #3
		LOG_ERR("modem_info_parse failed to parse "
   2e344:	f04f 0000 	mov.w	r0, #0
   2e348:	2101      	movs	r1, #1
   2e34a:	f361 0002 	bfi	r0, r1, #0, #3
   2e34e:	f36f 00c5 	bfc	r0, #3, #3
   2e352:	f363 108f 	bfi	r0, r3, #6, #10
   2e356:	490f      	ldr	r1, [pc, #60]	; (2e394 <modem_info_rsrp_subscribe_handler+0x94>)
   2e358:	f00d fe76 	bl	3c048 <log_string_sync>
		return;
   2e35c:	e7eb      	b.n	2e336 <modem_info_rsrp_subscribe_handler+0x36>
   2e35e:	4b0b      	ldr	r3, [pc, #44]	; (2e38c <modem_info_rsrp_subscribe_handler+0x8c>)
   2e360:	490b      	ldr	r1, [pc, #44]	; (2e390 <modem_info_rsrp_subscribe_handler+0x90>)
   2e362:	1a5b      	subs	r3, r3, r1
   2e364:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2e366:	f04f 0000 	mov.w	r0, #0
   2e36a:	2101      	movs	r1, #1
   2e36c:	f361 0002 	bfi	r0, r1, #0, #3
   2e370:	f36f 00c5 	bfc	r0, #3, #3
   2e374:	f363 108f 	bfi	r0, r3, #6, #10
   2e378:	4907      	ldr	r1, [pc, #28]	; (2e398 <modem_info_rsrp_subscribe_handler+0x98>)
   2e37a:	f00d fe65 	bl	3c048 <log_string_sync>
		return;
   2e37e:	e7da      	b.n	2e336 <modem_info_rsrp_subscribe_handler+0x36>
   2e380:	00041350 	.word	0x00041350
   2e384:	2001033c 	.word	0x2001033c
   2e388:	20010344 	.word	0x20010344
   2e38c:	000412c0 	.word	0x000412c0
   2e390:	00041200 	.word	0x00041200
   2e394:	00044458 	.word	0x00044458
   2e398:	00044490 	.word	0x00044490

0002e39c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   2e39c:	b508      	push	{r3, lr}
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   2e39e:	f7f8 f86b 	bl	26478 <z_impl_log_panic>
   2e3a2:	4b09      	ldr	r3, [pc, #36]	; (2e3c8 <k_sys_fatal_error_handler+0x2c>)
   2e3a4:	4a09      	ldr	r2, [pc, #36]	; (2e3cc <k_sys_fatal_error_handler+0x30>)
   2e3a6:	1a9b      	subs	r3, r3, r2
   2e3a8:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   2e3aa:	f04f 0000 	mov.w	r0, #0
   2e3ae:	2201      	movs	r2, #1
   2e3b0:	f362 0002 	bfi	r0, r2, #0, #3
   2e3b4:	f36f 00c5 	bfc	r0, #3, #3
   2e3b8:	f363 108f 	bfi	r0, r3, #6, #10
   2e3bc:	4904      	ldr	r1, [pc, #16]	; (2e3d0 <k_sys_fatal_error_handler+0x34>)
   2e3be:	f00d fe43 	bl	3c048 <log_string_sync>
		sys_arch_reboot(0);
   2e3c2:	2000      	movs	r0, #0
   2e3c4:	f7f9 ffd2 	bl	2836c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   2e3c8:	00041278 	.word	0x00041278
   2e3cc:	00041200 	.word	0x00041200
   2e3d0:	000444c4 	.word	0x000444c4

0002e3d4 <date_time_core_notify_event>:

static int64_t date_time_last_update_uptime;
static date_time_evt_handler_t app_evt_handler;

static void date_time_core_notify_event(enum date_time_evt_type time_source)
{
   2e3d4:	b508      	push	{r3, lr}
	static struct date_time_evt evt;

	/* Update time source to the event if not requesting previous time source */
	if (time_source != DATE_TIME_EVT_TYPE_PREVIOUS) {
   2e3d6:	28ff      	cmp	r0, #255	; 0xff
   2e3d8:	d001      	beq.n	2e3de <date_time_core_notify_event+0xa>
		evt.type = time_source;
   2e3da:	4b04      	ldr	r3, [pc, #16]	; (2e3ec <date_time_core_notify_event+0x18>)
   2e3dc:	7018      	strb	r0, [r3, #0]
	}

	if (app_evt_handler != NULL) {
   2e3de:	4b04      	ldr	r3, [pc, #16]	; (2e3f0 <date_time_core_notify_event+0x1c>)
   2e3e0:	681b      	ldr	r3, [r3, #0]
   2e3e2:	b10b      	cbz	r3, 2e3e8 <date_time_core_notify_event+0x14>
		app_evt_handler(&evt);
   2e3e4:	4801      	ldr	r0, [pc, #4]	; (2e3ec <date_time_core_notify_event+0x18>)
   2e3e6:	4798      	blx	r3
	}
}
   2e3e8:	bd08      	pop	{r3, pc}
   2e3ea:	bf00      	nop
   2e3ec:	2001034c 	.word	0x2001034c
   2e3f0:	20010348 	.word	0x20010348

0002e3f4 <date_time_handler>:
K_THREAD_DEFINE(time_thread, CONFIG_DATE_TIME_THREAD_STACK_SIZE,
		date_time_update_thread, NULL, NULL, NULL,
		K_LOWEST_APPLICATION_THREAD_PRIO, 0, 0);

static void date_time_handler(struct k_work *work)
{
   2e3f4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2e3f6:	4802      	ldr	r0, [pc, #8]	; (2e400 <date_time_handler+0xc>)
   2e3f8:	f008 f896 	bl	36528 <z_impl_k_sem_give>
	k_sem_give(&time_fetch_sem);
}
   2e3fc:	bd08      	pop	{r3, pc}
   2e3fe:	bf00      	nop
   2e400:	2000cad0 	.word	0x2000cad0

0002e404 <date_time_core_schedule_update>:
{
   2e404:	b508      	push	{r3, lr}
	return k_work_delayable_busy_get(dwork) != 0;
   2e406:	4806      	ldr	r0, [pc, #24]	; (2e420 <date_time_core_schedule_update+0x1c>)
   2e408:	f008 fc70 	bl	36cec <k_work_delayable_busy_get>
	if (CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0 &&
   2e40c:	b100      	cbz	r0, 2e410 <date_time_core_schedule_update+0xc>
}
   2e40e:	bd08      	pop	{r3, pc}
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
   2e410:	f04f 52e1 	mov.w	r2, #471859200	; 0x1c200000
   2e414:	2300      	movs	r3, #0
   2e416:	4802      	ldr	r0, [pc, #8]	; (2e420 <date_time_core_schedule_update+0x1c>)
   2e418:	f008 fd00 	bl	36e1c <k_work_schedule>
}
   2e41c:	e7f7      	b.n	2e40e <date_time_core_schedule_update+0xa>
   2e41e:	bf00      	nop
   2e420:	2000c5d8 	.word	0x2000c5d8

0002e424 <date_time_lte_ind_handler>:

void date_time_lte_ind_handler(const struct lte_lc_evt *const evt)
{
   2e424:	b508      	push	{r3, lr}
#if defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL)
	switch (evt->type) {
   2e426:	7803      	ldrb	r3, [r0, #0]
   2e428:	b9cb      	cbnz	r3, 2e45e <date_time_lte_ind_handler+0x3a>
	case LTE_LC_EVT_NW_REG_STATUS:

		switch (evt->nw_reg_status) {
   2e42a:	7a03      	ldrb	r3, [r0, #8]
   2e42c:	3b01      	subs	r3, #1
   2e42e:	2b07      	cmp	r3, #7
   2e430:	d815      	bhi.n	2e45e <date_time_lte_ind_handler+0x3a>
   2e432:	e8df f003 	tbb	[pc, r3]
   2e436:	1204      	.short	0x1204
   2e438:	14041414 	.word	0x14041414
   2e43c:	0414      	.short	0x0414
		case LTE_LC_NW_REG_REGISTERED_EMERGENCY:
		case LTE_LC_NW_REG_REGISTERED_HOME:
		case LTE_LC_NW_REG_REGISTERED_ROAMING:
			if (!date_time_is_valid() && !k_work_delayable_is_pending(&time_work)) {
   2e43e:	f010 f98b 	bl	3e758 <date_time_is_valid>
   2e442:	b960      	cbnz	r0, 2e45e <date_time_lte_ind_handler+0x3a>
   2e444:	4806      	ldr	r0, [pc, #24]	; (2e460 <date_time_lte_ind_handler+0x3c>)
   2e446:	f008 fc51 	bl	36cec <k_work_delayable_busy_get>
   2e44a:	b940      	cbnz	r0, 2e45e <date_time_lte_ind_handler+0x3a>
				k_work_schedule(&time_work, K_SECONDS(1));
   2e44c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2e450:	2300      	movs	r3, #0
   2e452:	4803      	ldr	r0, [pc, #12]	; (2e460 <date_time_lte_ind_handler+0x3c>)
   2e454:	f008 fce2 	bl	36e1c <k_work_schedule>
   2e458:	e001      	b.n	2e45e <date_time_lte_ind_handler+0x3a>
			}
			break;
#if defined(CONFIG_DATE_TIME_MODEM)
		case LTE_LC_NW_REG_SEARCHING:
			date_time_modem_xtime_subscribe();
   2e45a:	f000 fb37 	bl	2eacc <date_time_modem_xtime_subscribe>
		break;
	default:
		break;
	}
#endif /* defined(CONFIG_DATE_TIME_AUTO_UPDATE) && defined(CONFIG_LTE_LINK_CONTROL) */
}
   2e45e:	bd08      	pop	{r3, pc}
   2e460:	2000c5d8 	.word	0x2000c5d8

0002e464 <date_time_core_init>:

void date_time_core_init(void)
{
   2e464:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) && IS_ENABLED(CONFIG_LTE_LINK_CONTROL)) {
		lte_lc_register_handler(date_time_lte_ind_handler);
   2e466:	4802      	ldr	r0, [pc, #8]	; (2e470 <date_time_core_init+0xc>)
   2e468:	f7fe fa5e 	bl	2c928 <lte_lc_register_handler>

	if (!IS_ENABLED(CONFIG_DATE_TIME_AUTO_UPDATE) &&
	    CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS > 0) {
		k_work_schedule(&time_work, K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}
   2e46c:	bd08      	pop	{r3, pc}
   2e46e:	bf00      	nop
   2e470:	0002e425 	.word	0x0002e425

0002e474 <date_time_core_is_valid>:
	return date_time_last_update_uptime;
}

bool date_time_core_is_valid(void)
{
	return (date_time_last_update_uptime != 0);
   2e474:	4b03      	ldr	r3, [pc, #12]	; (2e484 <date_time_core_is_valid+0x10>)
   2e476:	681a      	ldr	r2, [r3, #0]
   2e478:	685b      	ldr	r3, [r3, #4]
   2e47a:	4313      	orrs	r3, r2
}
   2e47c:	bf14      	ite	ne
   2e47e:	2001      	movne	r0, #1
   2e480:	2000      	moveq	r0, #0
   2e482:	4770      	bx	lr
   2e484:	2000cd10 	.word	0x2000cd10

0002e488 <date_time_core_current_check>:
{
	date_time_last_update_uptime = 0;
}

int date_time_core_current_check(void)
{
   2e488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (date_time_last_update_uptime == 0) {
   2e48a:	4b19      	ldr	r3, [pc, #100]	; (2e4f0 <date_time_core_current_check+0x68>)
   2e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2e490:	4313      	orrs	r3, r2
   2e492:	d026      	beq.n	2e4e2 <date_time_core_current_check+0x5a>
	return z_impl_k_uptime_ticks();
   2e494:	f011 fc3c 	bl	3fd10 <z_impl_k_uptime_ticks>
   2e498:	014b      	lsls	r3, r1, #5
   2e49a:	0142      	lsls	r2, r0, #5
   2e49c:	ea43 66d0 	orr.w	r6, r3, r0, lsr #27
   2e4a0:	1a13      	subs	r3, r2, r0
   2e4a2:	eb66 0201 	sbc.w	r2, r6, r1
   2e4a6:	0096      	lsls	r6, r2, #2
   2e4a8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2e4ac:	009f      	lsls	r7, r3, #2
   2e4ae:	4632      	mov	r2, r6
   2e4b0:	183b      	adds	r3, r7, r0
   2e4b2:	eb41 0202 	adc.w	r2, r1, r2
   2e4b6:	00d1      	lsls	r1, r2, #3
   2e4b8:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   2e4bc:	00d8      	lsls	r0, r3, #3
   2e4be:	0bc3      	lsrs	r3, r0, #15
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   2e4c0:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
   2e4c4:	0bc8      	lsrs	r0, r1, #15
		LOG_DBG("Date time never set");
		return -ENODATA;
	}

	if ((k_uptime_get() - date_time_last_update_uptime) >=
   2e4c6:	490a      	ldr	r1, [pc, #40]	; (2e4f0 <date_time_core_current_check+0x68>)
   2e4c8:	680b      	ldr	r3, [r1, #0]
   2e4ca:	6849      	ldr	r1, [r1, #4]
   2e4cc:	1ad4      	subs	r4, r2, r3
   2e4ce:	eb60 0501 	sbc.w	r5, r0, r1
   2e4d2:	4a08      	ldr	r2, [pc, #32]	; (2e4f4 <date_time_core_current_check+0x6c>)
   2e4d4:	2300      	movs	r3, #0
   2e4d6:	4294      	cmp	r4, r2
   2e4d8:	eb75 0303 	sbcs.w	r3, r5, r3
   2e4dc:	da04      	bge.n	2e4e8 <date_time_core_current_check+0x60>
	    CONFIG_DATE_TIME_TOO_OLD_SECONDS * MSEC_PER_SEC) {
		LOG_DBG("Current date time too old");
		return -ENODATA;
	}

	return 0;
   2e4de:	2000      	movs	r0, #0
}
   2e4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODATA;
   2e4e2:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2e4e6:	e7fb      	b.n	2e4e0 <date_time_core_current_check+0x58>
		return -ENODATA;
   2e4e8:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2e4ec:	e7f8      	b.n	2e4e0 <date_time_core_current_check+0x58>
   2e4ee:	bf00      	nop
   2e4f0:	2000cd10 	.word	0x2000cd10
   2e4f4:	0036ee80 	.word	0x0036ee80

0002e4f8 <date_time_core_store>:

void date_time_core_store(int64_t curr_time_ms, enum date_time_evt_type time_source)
{
   2e4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e4fa:	b08f      	sub	sp, #60	; 0x3c
   2e4fc:	4606      	mov	r6, r0
   2e4fe:	460d      	mov	r5, r1
   2e500:	4617      	mov	r7, r2
	struct timespec tp = { 0 };
   2e502:	2100      	movs	r1, #0
   2e504:	910a      	str	r1, [sp, #40]	; 0x28
   2e506:	910b      	str	r1, [sp, #44]	; 0x2c
   2e508:	910c      	str	r1, [sp, #48]	; 0x30
   2e50a:	910d      	str	r1, [sp, #52]	; 0x34
	struct tm ltm = { 0 };
   2e50c:	2224      	movs	r2, #36	; 0x24
   2e50e:	a801      	add	r0, sp, #4
   2e510:	f011 fd16 	bl	3ff40 <memset>
   2e514:	f011 fbfc 	bl	3fd10 <z_impl_k_uptime_ticks>
   2e518:	014b      	lsls	r3, r1, #5
   2e51a:	0144      	lsls	r4, r0, #5
   2e51c:	ea43 62d0 	orr.w	r2, r3, r0, lsr #27
   2e520:	1a23      	subs	r3, r4, r0
   2e522:	eb62 0401 	sbc.w	r4, r2, r1
   2e526:	00a2      	lsls	r2, r4, #2
   2e528:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   2e52c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2e530:	4614      	mov	r4, r2
   2e532:	eb1c 0300 	adds.w	r3, ip, r0
   2e536:	eb41 0404 	adc.w	r4, r1, r4
   2e53a:	00e2      	lsls	r2, r4, #3
   2e53c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2e540:	00d9      	lsls	r1, r3, #3
   2e542:	0bcb      	lsrs	r3, r1, #15
   2e544:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   2e548:	0bd2      	lsrs	r2, r2, #15
	int ret;

	date_time_last_update_uptime = k_uptime_get();
   2e54a:	491f      	ldr	r1, [pc, #124]	; (2e5c8 <date_time_core_store+0xd0>)
   2e54c:	600b      	str	r3, [r1, #0]
   2e54e:	604a      	str	r2, [r1, #4]

	date_time_core_schedule_update();
   2e550:	f7ff ff58 	bl	2e404 <date_time_core_schedule_update>

	tp.tv_sec = curr_time_ms / 1000;
   2e554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e558:	2300      	movs	r3, #0
   2e55a:	4630      	mov	r0, r6
   2e55c:	4629      	mov	r1, r5
   2e55e:	f7f2 fd4f 	bl	21000 <__aeabi_ldivmod>
   2e562:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	tp.tv_nsec = (curr_time_ms % 1000) * 1000000;
   2e566:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2e56a:	2300      	movs	r3, #0
   2e56c:	4630      	mov	r0, r6
   2e56e:	4629      	mov	r1, r5
   2e570:	f7f2 fd46 	bl	21000 <__aeabi_ldivmod>
   2e574:	4b15      	ldr	r3, [pc, #84]	; (2e5cc <date_time_core_store+0xd4>)
   2e576:	fb03 f302 	mul.w	r3, r3, r2
   2e57a:	930c      	str	r3, [sp, #48]	; 0x30

	ret = clock_settime(CLOCK_REALTIME, &tp);
   2e57c:	a90a      	add	r1, sp, #40	; 0x28
   2e57e:	2001      	movs	r0, #1
   2e580:	f7f3 f866 	bl	21650 <clock_settime>
	if (ret != 0) {
   2e584:	b958      	cbnz	r0, 2e59e <date_time_core_store+0xa6>
		LOG_ERR("Could not set system time, %d", ret);
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
		return;
	}
	gmtime_r(&tp.tv_sec, &ltm);
   2e586:	a901      	add	r1, sp, #4
   2e588:	a80a      	add	r0, sp, #40	; 0x28
   2e58a:	f00b f92d 	bl	397e8 <gmtime_r>
	LOG_DBG("System time updated: %04u-%02u-%02u %02u:%02u:%02u",
		ltm.tm_year + 1900, ltm.tm_mon + 1, ltm.tm_mday,
		ltm.tm_hour, ltm.tm_min, ltm.tm_sec);

#if defined(CONFIG_DATE_TIME_MODEM)
	date_time_modem_store(&ltm);
   2e58e:	a801      	add	r0, sp, #4
   2e590:	f000 fa5c 	bl	2ea4c <date_time_modem_store>
#endif

	date_time_core_notify_event(time_source);
   2e594:	4638      	mov	r0, r7
   2e596:	f7ff ff1d 	bl	2e3d4 <date_time_core_notify_event>
}
   2e59a:	b00f      	add	sp, #60	; 0x3c
   2e59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e59e:	4602      	mov	r2, r0
   2e5a0:	4b0b      	ldr	r3, [pc, #44]	; (2e5d0 <date_time_core_store+0xd8>)
   2e5a2:	490c      	ldr	r1, [pc, #48]	; (2e5d4 <date_time_core_store+0xdc>)
   2e5a4:	1a5b      	subs	r3, r3, r1
   2e5a6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Could not set system time, %d", ret);
   2e5a8:	f04f 0000 	mov.w	r0, #0
   2e5ac:	2101      	movs	r1, #1
   2e5ae:	f361 0002 	bfi	r0, r1, #0, #3
   2e5b2:	f36f 00c5 	bfc	r0, #3, #3
   2e5b6:	f363 108f 	bfi	r0, r3, #6, #10
   2e5ba:	4907      	ldr	r1, [pc, #28]	; (2e5d8 <date_time_core_store+0xe0>)
   2e5bc:	f00d fd44 	bl	3c048 <log_string_sync>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   2e5c0:	2003      	movs	r0, #3
   2e5c2:	f7ff ff07 	bl	2e3d4 <date_time_core_notify_event>
		return;
   2e5c6:	e7e8      	b.n	2e59a <date_time_core_store+0xa2>
   2e5c8:	2000cd10 	.word	0x2000cd10
   2e5cc:	000f4240 	.word	0x000f4240
   2e5d0:	00041238 	.word	0x00041238
   2e5d4:	00041200 	.word	0x00041200
   2e5d8:	000444f0 	.word	0x000444f0

0002e5dc <date_time_update_thread>:
{
   2e5dc:	b500      	push	{lr}
   2e5de:	b085      	sub	sp, #20
   2e5e0:	e014      	b.n	2e60c <date_time_update_thread+0x30>
		int64_t date_time_ms_modem = 0;
   2e5e2:	2200      	movs	r2, #0
   2e5e4:	2300      	movs	r3, #0
   2e5e6:	e9cd 2300 	strd	r2, r3, [sp]
		err = date_time_modem_get(&date_time_ms_modem);
   2e5ea:	4668      	mov	r0, sp
   2e5ec:	f000 f9d2 	bl	2e994 <date_time_modem_get>
		if (err == 0) {
   2e5f0:	b1e8      	cbz	r0, 2e62e <date_time_update_thread+0x52>
		int64_t date_time_ms_ntp = 0;
   2e5f2:	2200      	movs	r2, #0
   2e5f4:	2300      	movs	r3, #0
   2e5f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
		err = date_time_ntp_get(&date_time_ms_ntp);
   2e5fa:	a802      	add	r0, sp, #8
   2e5fc:	f000 f8c8 	bl	2e790 <date_time_ntp_get>
		if (err == 0) {
   2e600:	b1d8      	cbz	r0, 2e63a <date_time_update_thread+0x5e>
		date_time_core_schedule_update();
   2e602:	f7ff feff 	bl	2e404 <date_time_core_schedule_update>
		date_time_core_notify_event(DATE_TIME_NOT_OBTAINED);
   2e606:	2003      	movs	r0, #3
   2e608:	f7ff fee4 	bl	2e3d4 <date_time_core_notify_event>
	return z_impl_k_sem_take(sem, timeout);
   2e60c:	f04f 32ff 	mov.w	r2, #4294967295
   2e610:	f04f 33ff 	mov.w	r3, #4294967295
   2e614:	480c      	ldr	r0, [pc, #48]	; (2e648 <date_time_update_thread+0x6c>)
   2e616:	f007 ffc5 	bl	365a4 <z_impl_k_sem_take>
		err = date_time_core_current_check();
   2e61a:	f7ff ff35 	bl	2e488 <date_time_core_current_check>
		if (err == 0) {
   2e61e:	2800      	cmp	r0, #0
   2e620:	d1df      	bne.n	2e5e2 <date_time_update_thread+0x6>
			date_time_core_schedule_update();
   2e622:	f7ff feef 	bl	2e404 <date_time_core_schedule_update>
			date_time_core_notify_event(DATE_TIME_EVT_TYPE_PREVIOUS);
   2e626:	20ff      	movs	r0, #255	; 0xff
   2e628:	f7ff fed4 	bl	2e3d4 <date_time_core_notify_event>
			continue;
   2e62c:	e7ee      	b.n	2e60c <date_time_update_thread+0x30>
			date_time_core_store(date_time_ms_modem, DATE_TIME_OBTAINED_MODEM);
   2e62e:	2200      	movs	r2, #0
   2e630:	e9dd 0100 	ldrd	r0, r1, [sp]
   2e634:	f7ff ff60 	bl	2e4f8 <date_time_core_store>
			continue;
   2e638:	e7e8      	b.n	2e60c <date_time_update_thread+0x30>
			date_time_core_store(date_time_ms_ntp, DATE_TIME_OBTAINED_NTP);
   2e63a:	2201      	movs	r2, #1
   2e63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2e640:	f7ff ff5a 	bl	2e4f8 <date_time_core_store>
			continue;
   2e644:	e7e2      	b.n	2e60c <date_time_update_thread+0x30>
   2e646:	bf00      	nop
   2e648:	2000cad0 	.word	0x2000cad0

0002e64c <is_connected_to_lte>:
	return err;
}

#if defined(CONFIG_LTE_LINK_CONTROL)
static bool is_connected_to_lte(void)
{
   2e64c:	b500      	push	{lr}
   2e64e:	b083      	sub	sp, #12
	int err;
	enum lte_lc_nw_reg_status reg_status;

	err = lte_lc_nw_reg_status_get(&reg_status);
   2e650:	f10d 0007 	add.w	r0, sp, #7
   2e654:	f7fe fb38 	bl	2ccc8 <lte_lc_nw_reg_status_get>
	if (err) {
   2e658:	b958      	cbnz	r0, 2e672 <is_connected_to_lte+0x26>
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
		return false;
	}

	if (reg_status == LTE_LC_NW_REG_REGISTERED_EMERGENCY ||
   2e65a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2e65e:	2b08      	cmp	r3, #8
   2e660:	d01a      	beq.n	2e698 <is_connected_to_lte+0x4c>
   2e662:	2b01      	cmp	r3, #1
   2e664:	d01a      	beq.n	2e69c <is_connected_to_lte+0x50>
	    reg_status == LTE_LC_NW_REG_REGISTERED_HOME ||
   2e666:	2b05      	cmp	r3, #5
   2e668:	d01a      	beq.n	2e6a0 <is_connected_to_lte+0x54>
	    reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING) {
		return true;
	}

	return false;
   2e66a:	2000      	movs	r0, #0
}
   2e66c:	b003      	add	sp, #12
   2e66e:	f85d fb04 	ldr.w	pc, [sp], #4
   2e672:	4602      	mov	r2, r0
   2e674:	4b0b      	ldr	r3, [pc, #44]	; (2e6a4 <is_connected_to_lte+0x58>)
   2e676:	490c      	ldr	r1, [pc, #48]	; (2e6a8 <is_connected_to_lte+0x5c>)
   2e678:	1a5b      	subs	r3, r3, r1
   2e67a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Failed getting LTE network registration status, error: %d", err);
   2e67c:	f04f 0000 	mov.w	r0, #0
   2e680:	2102      	movs	r1, #2
   2e682:	f361 0002 	bfi	r0, r1, #0, #3
   2e686:	f36f 00c5 	bfc	r0, #3, #3
   2e68a:	f363 108f 	bfi	r0, r3, #6, #10
   2e68e:	4907      	ldr	r1, [pc, #28]	; (2e6ac <is_connected_to_lte+0x60>)
   2e690:	f00d fcda 	bl	3c048 <log_string_sync>
		return false;
   2e694:	2000      	movs	r0, #0
   2e696:	e7e9      	b.n	2e66c <is_connected_to_lte+0x20>
		return true;
   2e698:	2001      	movs	r0, #1
   2e69a:	e7e7      	b.n	2e66c <is_connected_to_lte+0x20>
   2e69c:	2001      	movs	r0, #1
   2e69e:	e7e5      	b.n	2e66c <is_connected_to_lte+0x20>
   2e6a0:	2001      	movs	r0, #1
   2e6a2:	e7e3      	b.n	2e66c <is_connected_to_lte+0x20>
   2e6a4:	00041238 	.word	0x00041238
   2e6a8:	00041200 	.word	0x00041200
   2e6ac:	0004451c 	.word	0x0004451c

0002e6b0 <sntp_time_request>:
{
   2e6b0:	b570      	push	{r4, r5, r6, lr}
   2e6b2:	b09a      	sub	sp, #104	; 0x68
   2e6b4:	4604      	mov	r4, r0
   2e6b6:	460e      	mov	r6, r1
   2e6b8:	4615      	mov	r5, r2
	struct addrinfo hints = {
   2e6ba:	2250      	movs	r2, #80	; 0x50
   2e6bc:	2100      	movs	r1, #0
   2e6be:	4668      	mov	r0, sp
   2e6c0:	f011 fc3e 	bl	3ff40 <memset>
   2e6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2e6c8:	9301      	str	r3, [sp, #4]

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2e6ca:	ab19      	add	r3, sp, #100	; 0x64
   2e6cc:	466a      	mov	r2, sp
   2e6ce:	492a      	ldr	r1, [pc, #168]	; (2e778 <sntp_time_request+0xc8>)
   2e6d0:	4620      	mov	r0, r4
   2e6d2:	f00d fdb0 	bl	3c236 <zsock_getaddrinfo>
	if (err) {
   2e6d6:	b9b8      	cbnz	r0, 2e708 <sntp_time_request+0x58>
	err = sntp_init(&sntp_ctx, addrinfo->ai_addr, addrinfo->ai_addrlen);
   2e6d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2e6da:	695a      	ldr	r2, [r3, #20]
   2e6dc:	6999      	ldr	r1, [r3, #24]
   2e6de:	a814      	add	r0, sp, #80	; 0x50
   2e6e0:	f00d fd69 	bl	3c1b6 <sntp_init>
	if (err) {
   2e6e4:	4604      	mov	r4, r0
   2e6e6:	bb10      	cbnz	r0, 2e72e <sntp_time_request+0x7e>
	err = sntp_query(&sntp_ctx, timeout, time);
   2e6e8:	462a      	mov	r2, r5
   2e6ea:	4631      	mov	r1, r6
   2e6ec:	a814      	add	r0, sp, #80	; 0x50
   2e6ee:	f7f8 f9b1 	bl	26a54 <sntp_query>
	if (err) {
   2e6f2:	4604      	mov	r4, r0
   2e6f4:	bb68      	cbnz	r0, 2e752 <sntp_time_request+0xa2>
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   2e6f6:	9819      	ldr	r0, [sp, #100]	; 0x64
   2e6f8:	f00d fda1 	bl	3c23e <zsock_freeaddrinfo>
	sntp_close(&sntp_ctx);
   2e6fc:	a814      	add	r0, sp, #80	; 0x50
   2e6fe:	f00d fd93 	bl	3c228 <sntp_close>
}
   2e702:	4620      	mov	r0, r4
   2e704:	b01a      	add	sp, #104	; 0x68
   2e706:	bd70      	pop	{r4, r5, r6, pc}
   2e708:	4604      	mov	r4, r0
   2e70a:	4b1c      	ldr	r3, [pc, #112]	; (2e77c <sntp_time_request+0xcc>)
   2e70c:	4a1c      	ldr	r2, [pc, #112]	; (2e780 <sntp_time_request+0xd0>)
   2e70e:	1a9b      	subs	r3, r3, r2
   2e710:	08db      	lsrs	r3, r3, #3
		LOG_WRN("getaddrinfo, error: %d", err);
   2e712:	f04f 0000 	mov.w	r0, #0
   2e716:	2202      	movs	r2, #2
   2e718:	f362 0002 	bfi	r0, r2, #0, #3
   2e71c:	f36f 00c5 	bfc	r0, #3, #3
   2e720:	f363 108f 	bfi	r0, r3, #6, #10
   2e724:	4622      	mov	r2, r4
   2e726:	4917      	ldr	r1, [pc, #92]	; (2e784 <sntp_time_request+0xd4>)
   2e728:	f00d fc8e 	bl	3c048 <log_string_sync>
		return err;
   2e72c:	e7e9      	b.n	2e702 <sntp_time_request+0x52>
   2e72e:	4b13      	ldr	r3, [pc, #76]	; (2e77c <sntp_time_request+0xcc>)
   2e730:	4a13      	ldr	r2, [pc, #76]	; (2e780 <sntp_time_request+0xd0>)
   2e732:	1a9b      	subs	r3, r3, r2
   2e734:	08db      	lsrs	r3, r3, #3
		LOG_WRN("sntp_init, error: %d", err);
   2e736:	f04f 0000 	mov.w	r0, #0
   2e73a:	2202      	movs	r2, #2
   2e73c:	f362 0002 	bfi	r0, r2, #0, #3
   2e740:	f36f 00c5 	bfc	r0, #3, #3
   2e744:	f363 108f 	bfi	r0, r3, #6, #10
   2e748:	4622      	mov	r2, r4
   2e74a:	490f      	ldr	r1, [pc, #60]	; (2e788 <sntp_time_request+0xd8>)
   2e74c:	f00d fc7c 	bl	3c048 <log_string_sync>
		goto socket_close;
   2e750:	e7d1      	b.n	2e6f6 <sntp_time_request+0x46>
   2e752:	4b0a      	ldr	r3, [pc, #40]	; (2e77c <sntp_time_request+0xcc>)
   2e754:	4a0a      	ldr	r2, [pc, #40]	; (2e780 <sntp_time_request+0xd0>)
   2e756:	1a9b      	subs	r3, r3, r2
   2e758:	08db      	lsrs	r3, r3, #3
		LOG_WRN("sntp_query, error: %d", err);
   2e75a:	f04f 0000 	mov.w	r0, #0
   2e75e:	2202      	movs	r2, #2
   2e760:	f362 0002 	bfi	r0, r2, #0, #3
   2e764:	f36f 00c5 	bfc	r0, #3, #3
   2e768:	f363 108f 	bfi	r0, r3, #6, #10
   2e76c:	4622      	mov	r2, r4
   2e76e:	4907      	ldr	r1, [pc, #28]	; (2e78c <sntp_time_request+0xdc>)
   2e770:	f00d fc6a 	bl	3c048 <log_string_sync>
   2e774:	e7bf      	b.n	2e6f6 <sntp_time_request+0x46>
   2e776:	bf00      	nop
   2e778:	00044558 	.word	0x00044558
   2e77c:	00041238 	.word	0x00041238
   2e780:	00041200 	.word	0x00041200
   2e784:	0004455c 	.word	0x0004455c
   2e788:	00044574 	.word	0x00044574
   2e78c:	0004458c 	.word	0x0004458c

0002e790 <date_time_ntp_get>:
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

int date_time_ntp_get(int64_t *date_time_ms)
{
   2e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e792:	4604      	mov	r4, r0
	int err;

#if defined(CONFIG_LTE_LINK_CONTROL)
	if (!is_connected_to_lte()) {
   2e794:	f7ff ff5a 	bl	2e64c <is_connected_to_lte>
   2e798:	b320      	cbz	r0, 2e7e4 <date_time_ntp_get+0x54>
	}

	LOG_DBG("Connected to LTE, performing NTP UTC time update");
#endif

	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2e79a:	2500      	movs	r5, #0
   2e79c:	2d01      	cmp	r5, #1
   2e79e:	dc26      	bgt.n	2e7ee <date_time_ntp_get+0x5e>
		err =  sntp_time_request(servers[i],
   2e7a0:	4a1c      	ldr	r2, [pc, #112]	; (2e814 <date_time_ntp_get+0x84>)
   2e7a2:	f241 3188 	movw	r1, #5000	; 0x1388
   2e7a6:	4b1c      	ldr	r3, [pc, #112]	; (2e818 <date_time_ntp_get+0x88>)
   2e7a8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2e7ac:	f7ff ff80 	bl	2e6b0 <sntp_time_request>
			MSEC_PER_SEC * CONFIG_DATE_TIME_NTP_QUERY_TIME_SECONDS,
			&sntp_time);
		if (err) {
   2e7b0:	b9d8      	cbnz	r0, 2e7ea <date_time_ntp_get+0x5a>
			LOG_DBG("Did not get time from NTP server %s, error %d", servers[i], err);
			continue;
		}
		LOG_DBG("Time obtained from NTP server %s", servers[i]);
		*date_time_ms = (int64_t)sntp_time.seconds * 1000;
   2e7b2:	4b18      	ldr	r3, [pc, #96]	; (2e814 <date_time_ntp_get+0x84>)
   2e7b4:	6819      	ldr	r1, [r3, #0]
   2e7b6:	685d      	ldr	r5, [r3, #4]
   2e7b8:	016e      	lsls	r6, r5, #5
   2e7ba:	014b      	lsls	r3, r1, #5
   2e7bc:	ea46 62d1 	orr.w	r2, r6, r1, lsr #27
   2e7c0:	1a5b      	subs	r3, r3, r1
   2e7c2:	eb62 0205 	sbc.w	r2, r2, r5
   2e7c6:	0096      	lsls	r6, r2, #2
   2e7c8:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
   2e7cc:	009f      	lsls	r7, r3, #2
   2e7ce:	4632      	mov	r2, r6
   2e7d0:	187b      	adds	r3, r7, r1
   2e7d2:	eb45 0202 	adc.w	r2, r5, r2
   2e7d6:	00d1      	lsls	r1, r2, #3
   2e7d8:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   2e7dc:	00dd      	lsls	r5, r3, #3
   2e7de:	6025      	str	r5, [r4, #0]
   2e7e0:	6061      	str	r1, [r4, #4]
	}

	LOG_WRN("Did not get time from any NTP server");

	return -ENODATA;
}
   2e7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODATA;
   2e7e4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2e7e8:	e7fb      	b.n	2e7e2 <date_time_ntp_get+0x52>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2e7ea:	3501      	adds	r5, #1
   2e7ec:	e7d6      	b.n	2e79c <date_time_ntp_get+0xc>
   2e7ee:	4b0b      	ldr	r3, [pc, #44]	; (2e81c <date_time_ntp_get+0x8c>)
   2e7f0:	4a0b      	ldr	r2, [pc, #44]	; (2e820 <date_time_ntp_get+0x90>)
   2e7f2:	1a9b      	subs	r3, r3, r2
   2e7f4:	08db      	lsrs	r3, r3, #3
	LOG_WRN("Did not get time from any NTP server");
   2e7f6:	f04f 0000 	mov.w	r0, #0
   2e7fa:	2202      	movs	r2, #2
   2e7fc:	f362 0002 	bfi	r0, r2, #0, #3
   2e800:	f36f 00c5 	bfc	r0, #3, #3
   2e804:	f363 108f 	bfi	r0, r3, #6, #10
   2e808:	4906      	ldr	r1, [pc, #24]	; (2e824 <date_time_ntp_get+0x94>)
   2e80a:	f00d fc1d 	bl	3c048 <log_string_sync>
	return -ENODATA;
   2e80e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2e812:	e7e6      	b.n	2e7e2 <date_time_ntp_get+0x52>
   2e814:	2000cd18 	.word	0x2000cd18
   2e818:	000445e8 	.word	0x000445e8
   2e81c:	00041238 	.word	0x00041238
   2e820:	00041200 	.word	0x00041200
   2e824:	000445a4 	.word	0x000445a4

0002e828 <date_time_at_xtime_handler>:
	uint8_t time_buf[6];
	size_t time_buf_len;
	char *time_str_start;
	int err;

	if (notif == NULL) {
   2e828:	2800      	cmp	r0, #0
   2e82a:	f000 80a4 	beq.w	2e976 <date_time_at_xtime_handler+0x14e>
{
   2e82e:	b530      	push	{r4, r5, lr}
   2e830:	b08d      	sub	sp, #52	; 0x34
   2e832:	4604      	mov	r4, r0
		return;
	}
	modem_valid_network_time = true;
   2e834:	4b50      	ldr	r3, [pc, #320]	; (2e978 <date_time_at_xtime_handler+0x150>)
   2e836:	2201      	movs	r2, #1
   2e838:	701a      	strb	r2, [r3, #0]

	/* Check if current time is valid */
	err = date_time_core_current_check();
   2e83a:	f7ff fe25 	bl	2e488 <date_time_core_current_check>
	if (err == 0) {
   2e83e:	b908      	cbnz	r0, 2e844 <date_time_at_xtime_handler+0x1c>
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;

	LOG_DBG("Time obtained from cellular network (XTIME notification)");

	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
}
   2e840:	b00d      	add	sp, #52	; 0x34
   2e842:	bd30      	pop	{r4, r5, pc}
	time_str_start = strchr(notif, ',');
   2e844:	212c      	movs	r1, #44	; 0x2c
   2e846:	4620      	mov	r0, r4
   2e848:	f011 fcfc 	bl	40244 <strchr>
	if (time_str_start == NULL) {
   2e84c:	4605      	mov	r5, r0
   2e84e:	b1c0      	cbz	r0, 2e882 <date_time_at_xtime_handler+0x5a>
	if (strlen(time_str_start) < 17) {
   2e850:	f7f2 fe74 	bl	2153c <strlen>
   2e854:	2810      	cmp	r0, #16
   2e856:	d924      	bls.n	2e8a2 <date_time_at_xtime_handler+0x7a>
	if (*(time_str_start + 1) != '"') {
   2e858:	786b      	ldrb	r3, [r5, #1]
   2e85a:	2b22      	cmp	r3, #34	; 0x22
   2e85c:	d033      	beq.n	2e8c6 <date_time_at_xtime_handler+0x9e>
   2e85e:	4b47      	ldr	r3, [pc, #284]	; (2e97c <date_time_at_xtime_handler+0x154>)
   2e860:	4a47      	ldr	r2, [pc, #284]	; (2e980 <date_time_at_xtime_handler+0x158>)
   2e862:	1a9b      	subs	r3, r3, r2
   2e864:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification doesn't contain '\"' after ',': %s", notif);
   2e866:	f04f 0000 	mov.w	r0, #0
   2e86a:	2201      	movs	r2, #1
   2e86c:	f362 0002 	bfi	r0, r2, #0, #3
   2e870:	f36f 00c5 	bfc	r0, #3, #3
   2e874:	f363 108f 	bfi	r0, r3, #6, #10
   2e878:	4622      	mov	r2, r4
   2e87a:	4942      	ldr	r1, [pc, #264]	; (2e984 <date_time_at_xtime_handler+0x15c>)
   2e87c:	f00d fbe4 	bl	3c048 <log_string_sync>
		return;
   2e880:	e7de      	b.n	2e840 <date_time_at_xtime_handler+0x18>
   2e882:	4b3e      	ldr	r3, [pc, #248]	; (2e97c <date_time_at_xtime_handler+0x154>)
   2e884:	4a3e      	ldr	r2, [pc, #248]	; (2e980 <date_time_at_xtime_handler+0x158>)
   2e886:	1a9b      	subs	r3, r3, r2
   2e888:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification doesn't contain ',': %s", notif);
   2e88a:	2201      	movs	r2, #1
   2e88c:	f362 0002 	bfi	r0, r2, #0, #3
   2e890:	f36f 00c5 	bfc	r0, #3, #3
   2e894:	f363 108f 	bfi	r0, r3, #6, #10
   2e898:	4622      	mov	r2, r4
   2e89a:	493b      	ldr	r1, [pc, #236]	; (2e988 <date_time_at_xtime_handler+0x160>)
   2e89c:	f00d fbd4 	bl	3c048 <log_string_sync>
		return;
   2e8a0:	e7ce      	b.n	2e840 <date_time_at_xtime_handler+0x18>
   2e8a2:	4b36      	ldr	r3, [pc, #216]	; (2e97c <date_time_at_xtime_handler+0x154>)
   2e8a4:	4a36      	ldr	r2, [pc, #216]	; (2e980 <date_time_at_xtime_handler+0x158>)
   2e8a6:	1a9b      	subs	r3, r3, r2
   2e8a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification too short: %s", notif);
   2e8aa:	f04f 0000 	mov.w	r0, #0
   2e8ae:	2201      	movs	r2, #1
   2e8b0:	f362 0002 	bfi	r0, r2, #0, #3
   2e8b4:	f36f 00c5 	bfc	r0, #3, #3
   2e8b8:	f363 108f 	bfi	r0, r3, #6, #10
   2e8bc:	4622      	mov	r2, r4
   2e8be:	4933      	ldr	r1, [pc, #204]	; (2e98c <date_time_at_xtime_handler+0x164>)
   2e8c0:	f00d fbc2 	bl	3c048 <log_string_sync>
		return;
   2e8c4:	e7bc      	b.n	2e840 <date_time_at_xtime_handler+0x18>
	time_buf_len = hex2bin(time_str_start, 12, time_buf, sizeof(time_buf));
   2e8c6:	2306      	movs	r3, #6
   2e8c8:	aa01      	add	r2, sp, #4
   2e8ca:	210c      	movs	r1, #12
   2e8cc:	1ca8      	adds	r0, r5, #2
   2e8ce:	f00d f8c9 	bl	3ba64 <hex2bin>
   2e8d2:	4602      	mov	r2, r0
	if (time_buf_len < sizeof(time_buf)) {
   2e8d4:	2805      	cmp	r0, #5
   2e8d6:	d93c      	bls.n	2e952 <date_time_at_xtime_handler+0x12a>
	date_time.tm_year = semioctet_to_dec(time_buf[0]);
   2e8d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2e8dc:	f00f ff40 	bl	3e760 <semioctet_to_dec>
   2e8e0:	4605      	mov	r5, r0
	date_time.tm_mon  = semioctet_to_dec(time_buf[1]);
   2e8e2:	f89d 0005 	ldrb.w	r0, [sp, #5]
   2e8e6:	f00f ff3b 	bl	3e760 <semioctet_to_dec>
   2e8ea:	4604      	mov	r4, r0
	date_time.tm_mday = semioctet_to_dec(time_buf[2]);
   2e8ec:	f89d 0006 	ldrb.w	r0, [sp, #6]
   2e8f0:	f00f ff36 	bl	3e760 <semioctet_to_dec>
   2e8f4:	9006      	str	r0, [sp, #24]
	date_time.tm_hour = semioctet_to_dec(time_buf[3]);
   2e8f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2e8fa:	f00f ff31 	bl	3e760 <semioctet_to_dec>
   2e8fe:	9005      	str	r0, [sp, #20]
	date_time.tm_min  = semioctet_to_dec(time_buf[4]);
   2e900:	f89d 0008 	ldrb.w	r0, [sp, #8]
   2e904:	f00f ff2c 	bl	3e760 <semioctet_to_dec>
   2e908:	9004      	str	r0, [sp, #16]
	date_time.tm_sec  = semioctet_to_dec(time_buf[5]);
   2e90a:	f89d 0009 	ldrb.w	r0, [sp, #9]
   2e90e:	f00f ff27 	bl	3e760 <semioctet_to_dec>
   2e912:	9003      	str	r0, [sp, #12]
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   2e914:	3564      	adds	r5, #100	; 0x64
   2e916:	9508      	str	r5, [sp, #32]
	date_time.tm_mon = date_time.tm_mon - 1;
   2e918:	3c01      	subs	r4, #1
   2e91a:	9407      	str	r4, [sp, #28]
	date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2e91c:	a803      	add	r0, sp, #12
   2e91e:	f00d f9bf 	bl	3bca0 <timeutil_timegm64>
   2e922:	014c      	lsls	r4, r1, #5
   2e924:	0143      	lsls	r3, r0, #5
   2e926:	ea44 62d0 	orr.w	r2, r4, r0, lsr #27
   2e92a:	1a1b      	subs	r3, r3, r0
   2e92c:	eb62 0201 	sbc.w	r2, r2, r1
   2e930:	0094      	lsls	r4, r2, #2
   2e932:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   2e936:	009d      	lsls	r5, r3, #2
   2e938:	1828      	adds	r0, r5, r0
   2e93a:	eb44 0101 	adc.w	r1, r4, r1
   2e93e:	00cb      	lsls	r3, r1, #3
   2e940:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   2e944:	00c2      	lsls	r2, r0, #3
   2e946:	4610      	mov	r0, r2
   2e948:	4619      	mov	r1, r3
	date_time_core_store(date_time_ms, DATE_TIME_OBTAINED_MODEM);
   2e94a:	2200      	movs	r2, #0
   2e94c:	f7ff fdd4 	bl	2e4f8 <date_time_core_store>
   2e950:	e776      	b.n	2e840 <date_time_at_xtime_handler+0x18>
   2e952:	4b0a      	ldr	r3, [pc, #40]	; (2e97c <date_time_at_xtime_handler+0x154>)
   2e954:	490a      	ldr	r1, [pc, #40]	; (2e980 <date_time_at_xtime_handler+0x158>)
   2e956:	1a5b      	subs	r3, r3, r1
   2e958:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%%XTIME notification decoding failed (ret=%d): %s", time_buf_len, notif);
   2e95a:	f04f 0000 	mov.w	r0, #0
   2e95e:	2101      	movs	r1, #1
   2e960:	f361 0002 	bfi	r0, r1, #0, #3
   2e964:	f36f 00c5 	bfc	r0, #3, #3
   2e968:	f363 108f 	bfi	r0, r3, #6, #10
   2e96c:	4623      	mov	r3, r4
   2e96e:	4908      	ldr	r1, [pc, #32]	; (2e990 <date_time_at_xtime_handler+0x168>)
   2e970:	f00d fb6a 	bl	3c048 <log_string_sync>
   2e974:	e7b0      	b.n	2e8d8 <date_time_at_xtime_handler+0xb0>
   2e976:	4770      	bx	lr
   2e978:	20010e09 	.word	0x20010e09
   2e97c:	00041238 	.word	0x00041238
   2e980:	00041200 	.word	0x00041200
   2e984:	00044644 	.word	0x00044644
   2e988:	000445f0 	.word	0x000445f0
   2e98c:	00044620 	.word	0x00044620
   2e990:	0004467c 	.word	0x0004467c

0002e994 <date_time_modem_get>:
	if (!modem_valid_network_time) {
   2e994:	4b27      	ldr	r3, [pc, #156]	; (2ea34 <date_time_modem_get+0xa0>)
   2e996:	781b      	ldrb	r3, [r3, #0]
   2e998:	2b00      	cmp	r3, #0
   2e99a:	d047      	beq.n	2ea2c <date_time_modem_get+0x98>
{
   2e99c:	b570      	push	{r4, r5, r6, lr}
   2e99e:	b08e      	sub	sp, #56	; 0x38
   2e9a0:	4605      	mov	r5, r0
	rc = nrf_modem_at_scanf("AT+CCLK?",
   2e9a2:	ab05      	add	r3, sp, #20
   2e9a4:	9303      	str	r3, [sp, #12]
   2e9a6:	ab06      	add	r3, sp, #24
   2e9a8:	9302      	str	r3, [sp, #8]
   2e9aa:	ab07      	add	r3, sp, #28
   2e9ac:	9301      	str	r3, [sp, #4]
   2e9ae:	ab08      	add	r3, sp, #32
   2e9b0:	9300      	str	r3, [sp, #0]
   2e9b2:	ab09      	add	r3, sp, #36	; 0x24
   2e9b4:	aa0a      	add	r2, sp, #40	; 0x28
   2e9b6:	4920      	ldr	r1, [pc, #128]	; (2ea38 <date_time_modem_get+0xa4>)
   2e9b8:	4820      	ldr	r0, [pc, #128]	; (2ea3c <date_time_modem_get+0xa8>)
   2e9ba:	f006 fa65 	bl	34e88 <nrf_modem_at_scanf>
	if (rc != 6) {
   2e9be:	2806      	cmp	r0, #6
   2e9c0:	d11f      	bne.n	2ea02 <date_time_modem_get+0x6e>
	date_time.tm_year = date_time.tm_year + 2000 - 1900;
   2e9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e9c4:	3364      	adds	r3, #100	; 0x64
   2e9c6:	930a      	str	r3, [sp, #40]	; 0x28
	date_time.tm_mon = date_time.tm_mon - 1;
   2e9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e9ca:	3b01      	subs	r3, #1
   2e9cc:	9309      	str	r3, [sp, #36]	; 0x24
	*date_time_ms = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2e9ce:	a805      	add	r0, sp, #20
   2e9d0:	f00d f966 	bl	3bca0 <timeutil_timegm64>
   2e9d4:	014b      	lsls	r3, r1, #5
   2e9d6:	0142      	lsls	r2, r0, #5
   2e9d8:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   2e9dc:	1a13      	subs	r3, r2, r0
   2e9de:	eb64 0201 	sbc.w	r2, r4, r1
   2e9e2:	0094      	lsls	r4, r2, #2
   2e9e4:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   2e9e8:	009e      	lsls	r6, r3, #2
   2e9ea:	1833      	adds	r3, r6, r0
   2e9ec:	eb44 0101 	adc.w	r1, r4, r1
   2e9f0:	00ca      	lsls	r2, r1, #3
   2e9f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   2e9f6:	00d8      	lsls	r0, r3, #3
   2e9f8:	6028      	str	r0, [r5, #0]
   2e9fa:	606a      	str	r2, [r5, #4]
	return 0;
   2e9fc:	2000      	movs	r0, #0
}
   2e9fe:	b00e      	add	sp, #56	; 0x38
   2ea00:	bd70      	pop	{r4, r5, r6, pc}
   2ea02:	4b0f      	ldr	r3, [pc, #60]	; (2ea40 <date_time_modem_get+0xac>)
   2ea04:	4a0f      	ldr	r2, [pc, #60]	; (2ea44 <date_time_modem_get+0xb0>)
   2ea06:	1a9b      	subs	r3, r3, r2
   2ea08:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Did not get time from cellular network (error: %d). "
   2ea0a:	f04f 0400 	mov.w	r4, #0
   2ea0e:	2202      	movs	r2, #2
   2ea10:	f362 0402 	bfi	r4, r2, #0, #3
   2ea14:	f36f 04c5 	bfc	r4, #3, #3
   2ea18:	f363 148f 	bfi	r4, r3, #6, #10
   2ea1c:	4602      	mov	r2, r0
   2ea1e:	490a      	ldr	r1, [pc, #40]	; (2ea48 <date_time_modem_get+0xb4>)
   2ea20:	4620      	mov	r0, r4
   2ea22:	f00d fb11 	bl	3c048 <log_string_sync>
		return -ENODATA;
   2ea26:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   2ea2a:	e7e8      	b.n	2e9fe <date_time_modem_get+0x6a>
		return -ENODATA;
   2ea2c:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   2ea30:	4770      	bx	lr
   2ea32:	bf00      	nop
   2ea34:	20010e09 	.word	0x20010e09
   2ea38:	000446b0 	.word	0x000446b0
   2ea3c:	000442dc 	.word	0x000442dc
   2ea40:	00041238 	.word	0x00041238
   2ea44:	00041200 	.word	0x00041200
   2ea48:	000446cc 	.word	0x000446cc

0002ea4c <date_time_modem_store>:
void date_time_modem_store(struct tm *ltm)
{
	int ret;

	/* Set modem time if modem has not got it from the LTE network */
	if (!modem_valid_network_time) {
   2ea4c:	4b19      	ldr	r3, [pc, #100]	; (2eab4 <date_time_modem_store+0x68>)
   2ea4e:	781b      	ldrb	r3, [r3, #0]
   2ea50:	b103      	cbz	r3, 2ea54 <date_time_modem_store+0x8>
   2ea52:	4770      	bx	lr
{
   2ea54:	b530      	push	{r4, r5, lr}
   2ea56:	b085      	sub	sp, #20
		 * POSIX year is relative to 1900 which doesn't affect as last two digits are taken
		 * with modulo 100.
		 * POSIX month is in range 0-11 so adding 1.
		 */
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
			ltm->tm_year % 100, ltm->tm_mon + 1, ltm->tm_mday,
   2ea58:	6945      	ldr	r5, [r0, #20]
   2ea5a:	6902      	ldr	r2, [r0, #16]
		ret = nrf_modem_at_printf("AT+CCLK=\"%02u/%02u/%02u,%02u:%02u:%02u+%02u\"",
   2ea5c:	4916      	ldr	r1, [pc, #88]	; (2eab8 <date_time_modem_store+0x6c>)
   2ea5e:	fb81 3105 	smull	r3, r1, r1, r5
   2ea62:	17ec      	asrs	r4, r5, #31
   2ea64:	ebc4 1461 	rsb	r4, r4, r1, asr #5
   2ea68:	2300      	movs	r3, #0
   2ea6a:	9303      	str	r3, [sp, #12]
   2ea6c:	6803      	ldr	r3, [r0, #0]
   2ea6e:	9302      	str	r3, [sp, #8]
   2ea70:	6843      	ldr	r3, [r0, #4]
   2ea72:	9301      	str	r3, [sp, #4]
   2ea74:	6883      	ldr	r3, [r0, #8]
   2ea76:	9300      	str	r3, [sp, #0]
   2ea78:	68c3      	ldr	r3, [r0, #12]
   2ea7a:	3201      	adds	r2, #1
   2ea7c:	2164      	movs	r1, #100	; 0x64
   2ea7e:	fb01 5114 	mls	r1, r1, r4, r5
   2ea82:	480e      	ldr	r0, [pc, #56]	; (2eabc <date_time_modem_store+0x70>)
   2ea84:	f006 f972 	bl	34d6c <nrf_modem_at_printf>
			ltm->tm_hour, ltm->tm_min, ltm->tm_sec, 0);
		if (ret) {
   2ea88:	4602      	mov	r2, r0
   2ea8a:	b908      	cbnz	r0, 2ea90 <date_time_modem_store+0x44>
			return;
		}

		LOG_DBG("Modem time updated");
	}
}
   2ea8c:	b005      	add	sp, #20
   2ea8e:	bd30      	pop	{r4, r5, pc}
   2ea90:	4b0b      	ldr	r3, [pc, #44]	; (2eac0 <date_time_modem_store+0x74>)
   2ea92:	490c      	ldr	r1, [pc, #48]	; (2eac4 <date_time_modem_store+0x78>)
   2ea94:	1a5b      	subs	r3, r3, r1
   2ea96:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Setting modem time failed, %d", ret);
   2ea98:	f04f 0000 	mov.w	r0, #0
   2ea9c:	2101      	movs	r1, #1
   2ea9e:	f361 0002 	bfi	r0, r1, #0, #3
   2eaa2:	f36f 00c5 	bfc	r0, #3, #3
   2eaa6:	f363 108f 	bfi	r0, r3, #6, #10
   2eaaa:	4907      	ldr	r1, [pc, #28]	; (2eac8 <date_time_modem_store+0x7c>)
   2eaac:	f00d facc 	bl	3c048 <log_string_sync>
			return;
   2eab0:	e7ec      	b.n	2ea8c <date_time_modem_store+0x40>
   2eab2:	bf00      	nop
   2eab4:	20010e09 	.word	0x20010e09
   2eab8:	51eb851f 	.word	0x51eb851f
   2eabc:	0004475c 	.word	0x0004475c
   2eac0:	00041238 	.word	0x00041238
   2eac4:	00041200 	.word	0x00041200
   2eac8:	0004478c 	.word	0x0004478c

0002eacc <date_time_modem_xtime_subscribe>:

void date_time_modem_xtime_subscribe(void)
{
   2eacc:	b508      	push	{r3, lr}
	/* Subscribe to modem time notifications */
	int err = nrf_modem_at_printf("AT%%XTIME=1");
   2eace:	480b      	ldr	r0, [pc, #44]	; (2eafc <date_time_modem_xtime_subscribe+0x30>)
   2ead0:	f006 f94c 	bl	34d6c <nrf_modem_at_printf>

	if (err) {
   2ead4:	b900      	cbnz	r0, 2ead8 <date_time_modem_xtime_subscribe+0xc>
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
	}
}
   2ead6:	bd08      	pop	{r3, pc}
   2ead8:	4602      	mov	r2, r0
   2eada:	4b09      	ldr	r3, [pc, #36]	; (2eb00 <date_time_modem_xtime_subscribe+0x34>)
   2eadc:	4909      	ldr	r1, [pc, #36]	; (2eb04 <date_time_modem_xtime_subscribe+0x38>)
   2eade:	1a5b      	subs	r3, r3, r1
   2eae0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Subscribing to modem AT%%XTIME notifications failed, err=%d", err);
   2eae2:	f04f 0000 	mov.w	r0, #0
   2eae6:	2101      	movs	r1, #1
   2eae8:	f361 0002 	bfi	r0, r1, #0, #3
   2eaec:	f36f 00c5 	bfc	r0, #3, #3
   2eaf0:	f363 108f 	bfi	r0, r3, #6, #10
   2eaf4:	4904      	ldr	r1, [pc, #16]	; (2eb08 <date_time_modem_xtime_subscribe+0x3c>)
   2eaf6:	f00d faa7 	bl	3c048 <log_string_sync>
}
   2eafa:	e7ec      	b.n	2ead6 <date_time_modem_xtime_subscribe+0xa>
   2eafc:	000447ac 	.word	0x000447ac
   2eb00:	00041238 	.word	0x00041238
   2eb04:	00041200 	.word	0x00041200
   2eb08:	000447b8 	.word	0x000447b8

0002eb0c <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   2eb0c:	b530      	push	{r4, r5, lr}
   2eb0e:	b085      	sub	sp, #20
   2eb10:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2eb12:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
   2eb16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2eb1a:	d80e      	bhi.n	2eb3a <fragment_evt_send+0x2e>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   2eb1c:	2300      	movs	r3, #0
   2eb1e:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   2eb22:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   2eb24:	9302      	str	r3, [sp, #8]
			.len = client->offset,
   2eb26:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	const struct download_client_evt evt = {
   2eb2a:	9303      	str	r3, [sp, #12]
		}
	};

	return client->callback(&evt);
   2eb2c:	f504 54c6 	add.w	r4, r4, #6336	; 0x18c0
   2eb30:	6823      	ldr	r3, [r4, #0]
   2eb32:	a801      	add	r0, sp, #4
   2eb34:	4798      	blx	r3
}
   2eb36:	b005      	add	sp, #20
   2eb38:	bd30      	pop	{r4, r5, pc}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   2eb3a:	4d06      	ldr	r5, [pc, #24]	; (2eb54 <fragment_evt_send+0x48>)
   2eb3c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
   2eb40:	4629      	mov	r1, r5
   2eb42:	4805      	ldr	r0, [pc, #20]	; (2eb58 <fragment_evt_send+0x4c>)
   2eb44:	f00c fff8 	bl	3bb38 <printk>
   2eb48:	f44f 71b5 	mov.w	r1, #362	; 0x16a
   2eb4c:	4628      	mov	r0, r5
   2eb4e:	f00d fa47 	bl	3bfe0 <assert_post_action>
   2eb52:	e7e3      	b.n	2eb1c <fragment_evt_send+0x10>
   2eb54:	000447fc 	.word	0x000447fc
   2eb58:	00041c84 	.word	0x00041c84

0002eb5c <error_evt_send>:

static int error_evt_send(const struct download_client *dl, int error)
{
   2eb5c:	b570      	push	{r4, r5, r6, lr}
   2eb5e:	b084      	sub	sp, #16
   2eb60:	4605      	mov	r5, r0
	/* Error will be sent as negative. */
	__ASSERT_NO_MSG(error > 0);
   2eb62:	1e0c      	subs	r4, r1, #0
   2eb64:	dd0e      	ble.n	2eb84 <error_evt_send+0x28>

	const struct download_client_evt evt = {
   2eb66:	2300      	movs	r3, #0
   2eb68:	9301      	str	r3, [sp, #4]
   2eb6a:	9303      	str	r3, [sp, #12]
   2eb6c:	2301      	movs	r3, #1
   2eb6e:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_ERROR,
		.error = -error
   2eb72:	4264      	negs	r4, r4
	const struct download_client_evt evt = {
   2eb74:	9402      	str	r4, [sp, #8]
	};

	return dl->callback(&evt);
   2eb76:	f505 55c6 	add.w	r5, r5, #6336	; 0x18c0
   2eb7a:	682b      	ldr	r3, [r5, #0]
   2eb7c:	a801      	add	r0, sp, #4
   2eb7e:	4798      	blx	r3
}
   2eb80:	b004      	add	sp, #16
   2eb82:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(error > 0);
   2eb84:	4e06      	ldr	r6, [pc, #24]	; (2eba0 <error_evt_send+0x44>)
   2eb86:	f240 127b 	movw	r2, #379	; 0x17b
   2eb8a:	4631      	mov	r1, r6
   2eb8c:	4805      	ldr	r0, [pc, #20]	; (2eba4 <error_evt_send+0x48>)
   2eb8e:	f00c ffd3 	bl	3bb38 <printk>
   2eb92:	f240 117b 	movw	r1, #379	; 0x17b
   2eb96:	4630      	mov	r0, r6
   2eb98:	f00d fa22 	bl	3bfe0 <assert_post_action>
   2eb9c:	e7e3      	b.n	2eb66 <error_evt_send+0xa>
   2eb9e:	bf00      	nop
   2eba0:	000447fc 	.word	0x000447fc
   2eba4:	00041c84 	.word	0x00041c84

0002eba8 <str_family>:
	switch (family) {
   2eba8:	2801      	cmp	r0, #1
   2ebaa:	d00e      	beq.n	2ebca <str_family+0x22>
   2ebac:	2802      	cmp	r0, #2
   2ebae:	d00e      	beq.n	2ebce <str_family+0x26>
{
   2ebb0:	b510      	push	{r4, lr}
		__ASSERT(false, "Unsupported family");
   2ebb2:	4c08      	ldr	r4, [pc, #32]	; (2ebd4 <str_family+0x2c>)
   2ebb4:	2232      	movs	r2, #50	; 0x32
   2ebb6:	4621      	mov	r1, r4
   2ebb8:	4807      	ldr	r0, [pc, #28]	; (2ebd8 <str_family+0x30>)
   2ebba:	f00c ffbd 	bl	3bb38 <printk>
   2ebbe:	2132      	movs	r1, #50	; 0x32
   2ebc0:	4620      	mov	r0, r4
   2ebc2:	f00d fa0d 	bl	3bfe0 <assert_post_action>
		return NULL;
   2ebc6:	2000      	movs	r0, #0
}
   2ebc8:	bd10      	pop	{r4, pc}
	switch (family) {
   2ebca:	4804      	ldr	r0, [pc, #16]	; (2ebdc <str_family+0x34>)
   2ebcc:	4770      	bx	lr
		return "IPv6";
   2ebce:	4804      	ldr	r0, [pc, #16]	; (2ebe0 <str_family+0x38>)
}
   2ebd0:	4770      	bx	lr
   2ebd2:	bf00      	nop
   2ebd4:	000447fc 	.word	0x000447fc
   2ebd8:	00041c84 	.word	0x00041c84
   2ebdc:	00044844 	.word	0x00044844
   2ebe0:	0004484c 	.word	0x0004484c

0002ebe4 <host_lookup>:
{
   2ebe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ebe6:	b0a7      	sub	sp, #156	; 0x9c
   2ebe8:	4605      	mov	r5, r0
   2ebea:	460e      	mov	r6, r1
   2ebec:	4617      	mov	r7, r2
   2ebee:	461c      	mov	r4, r3
	struct addrinfo hints = {
   2ebf0:	2250      	movs	r2, #80	; 0x50
   2ebf2:	2100      	movs	r1, #0
   2ebf4:	4668      	mov	r0, sp
   2ebf6:	f011 f9a3 	bl	3ff40 <memset>
   2ebfa:	9602      	str	r6, [sp, #8]
	err = url_parse_host(host, hostname, sizeof(hostname));
   2ebfc:	2240      	movs	r2, #64	; 0x40
   2ebfe:	a915      	add	r1, sp, #84	; 0x54
   2ec00:	4628      	mov	r0, r5
   2ec02:	f000 fdeb 	bl	2f7dc <url_parse_host>
	if (err) {
   2ec06:	4605      	mov	r5, r0
   2ec08:	bb08      	cbnz	r0, 2ec4e <host_lookup+0x6a>
	if (pdn_id) {
   2ec0a:	b31f      	cbz	r7, 2ec54 <host_lookup+0x70>
		hints.ai_flags = AI_PDNSERV;
   2ec0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   2ec10:	9301      	str	r3, [sp, #4]
		(void)snprintf(pdnserv, sizeof(pdnserv), "%d", pdn_id);
   2ec12:	463b      	mov	r3, r7
   2ec14:	4a22      	ldr	r2, [pc, #136]	; (2eca0 <host_lookup+0xbc>)
   2ec16:	2104      	movs	r1, #4
   2ec18:	a825      	add	r0, sp, #148	; 0x94
   2ec1a:	f00b fbd3 	bl	3a3c4 <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   2ec1e:	ab14      	add	r3, sp, #80	; 0x50
   2ec20:	466a      	mov	r2, sp
   2ec22:	a925      	add	r1, sp, #148	; 0x94
   2ec24:	a815      	add	r0, sp, #84	; 0x54
   2ec26:	f00d fb06 	bl	3c236 <zsock_getaddrinfo>
   2ec2a:	4605      	mov	r5, r0
	if (err) {
   2ec2c:	b9d5      	cbnz	r5, 2ec64 <host_lookup+0x80>
	*sa = *(ai->ai_addr);
   2ec2e:	9814      	ldr	r0, [sp, #80]	; 0x50
   2ec30:	6983      	ldr	r3, [r0, #24]
   2ec32:	6819      	ldr	r1, [r3, #0]
   2ec34:	685a      	ldr	r2, [r3, #4]
   2ec36:	689f      	ldr	r7, [r3, #8]
   2ec38:	68de      	ldr	r6, [r3, #12]
   2ec3a:	6021      	str	r1, [r4, #0]
   2ec3c:	6062      	str	r2, [r4, #4]
   2ec3e:	60a7      	str	r7, [r4, #8]
   2ec40:	60e6      	str	r6, [r4, #12]
   2ec42:	6919      	ldr	r1, [r3, #16]
   2ec44:	695a      	ldr	r2, [r3, #20]
   2ec46:	6121      	str	r1, [r4, #16]
   2ec48:	6162      	str	r2, [r4, #20]
	zsock_freeaddrinfo(ai);
   2ec4a:	f00d faf8 	bl	3c23e <zsock_freeaddrinfo>
}
   2ec4e:	4628      	mov	r0, r5
   2ec50:	b027      	add	sp, #156	; 0x9c
   2ec52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return zsock_getaddrinfo(host, service, hints, res);
   2ec54:	ab14      	add	r3, sp, #80	; 0x50
   2ec56:	466a      	mov	r2, sp
   2ec58:	2100      	movs	r1, #0
   2ec5a:	a815      	add	r0, sp, #84	; 0x54
   2ec5c:	f00d faeb 	bl	3c236 <zsock_getaddrinfo>
   2ec60:	4605      	mov	r5, r0
   2ec62:	e7e3      	b.n	2ec2c <host_lookup+0x48>
   2ec64:	4b0f      	ldr	r3, [pc, #60]	; (2eca4 <host_lookup+0xc0>)
   2ec66:	4a10      	ldr	r2, [pc, #64]	; (2eca8 <host_lookup+0xc4>)
   2ec68:	1a9b      	subs	r3, r3, r2
   2ec6a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Failed to resolve hostname %s on %s",
   2ec6c:	f04f 0400 	mov.w	r4, #0
   2ec70:	2202      	movs	r2, #2
   2ec72:	f362 0402 	bfi	r4, r2, #0, #3
   2ec76:	f36f 04c5 	bfc	r4, #3, #3
   2ec7a:	f363 148f 	bfi	r4, r3, #6, #10
   2ec7e:	a815      	add	r0, sp, #84	; 0x54
   2ec80:	f00d f9f6 	bl	3c070 <z_log_strdup>
   2ec84:	4605      	mov	r5, r0
   2ec86:	4630      	mov	r0, r6
   2ec88:	f7ff ff8e 	bl	2eba8 <str_family>
   2ec8c:	4603      	mov	r3, r0
   2ec8e:	462a      	mov	r2, r5
   2ec90:	4906      	ldr	r1, [pc, #24]	; (2ecac <host_lookup+0xc8>)
   2ec92:	4620      	mov	r0, r4
   2ec94:	f00d f9d8 	bl	3c048 <log_string_sync>
		return -EHOSTUNREACH;
   2ec98:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2ec9c:	e7d7      	b.n	2ec4e <host_lookup+0x6a>
   2ec9e:	bf00      	nop
   2eca0:	0004448c 	.word	0x0004448c
   2eca4:	00041270 	.word	0x00041270
   2eca8:	00041200 	.word	0x00041200
   2ecac:	00044854 	.word	0x00044854

0002ecb0 <socket_pdn_id_set>:
{
   2ecb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ecb2:	b085      	sub	sp, #20
   2ecb4:	4606      	mov	r6, r0
   2ecb6:	460d      	mov	r5, r1
	char buf[8] = {0};
   2ecb8:	2700      	movs	r7, #0
   2ecba:	9702      	str	r7, [sp, #8]
   2ecbc:	9703      	str	r7, [sp, #12]
	(void) snprintf(buf, sizeof(buf), "pdn%d", pdn_id);
   2ecbe:	460b      	mov	r3, r1
   2ecc0:	4a1f      	ldr	r2, [pc, #124]	; (2ed40 <socket_pdn_id_set+0x90>)
   2ecc2:	2108      	movs	r1, #8
   2ecc4:	eb0d 0001 	add.w	r0, sp, r1
   2ecc8:	f00b fb7c 	bl	3a3c4 <sniprintf>
   2eccc:	4b1d      	ldr	r3, [pc, #116]	; (2ed44 <socket_pdn_id_set+0x94>)
   2ecce:	4a1e      	ldr	r2, [pc, #120]	; (2ed48 <socket_pdn_id_set+0x98>)
   2ecd0:	1a9b      	subs	r3, r3, r2
   2ecd2:	08db      	lsrs	r3, r3, #3
	LOG_INF("Binding to PDN ID: %s", log_strdup(buf));
   2ecd4:	f04f 0400 	mov.w	r4, #0
   2ecd8:	2203      	movs	r2, #3
   2ecda:	f362 0402 	bfi	r4, r2, #0, #3
   2ecde:	f367 04c5 	bfi	r4, r7, #3, #3
   2ece2:	f363 148f 	bfi	r4, r3, #6, #10
   2ece6:	a802      	add	r0, sp, #8
   2ece8:	f00d f9c2 	bl	3c070 <z_log_strdup>
   2ecec:	4602      	mov	r2, r0
   2ecee:	4917      	ldr	r1, [pc, #92]	; (2ed4c <socket_pdn_id_set+0x9c>)
   2ecf0:	4620      	mov	r0, r4
   2ecf2:	f00d f9a9 	bl	3c048 <log_string_sync>
	err = setsockopt(fd, SOL_SOCKET, SO_BINDTODEVICE, &buf, strlen(buf));
   2ecf6:	a802      	add	r0, sp, #8
   2ecf8:	f7f2 fc20 	bl	2153c <strlen>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2ecfc:	9000      	str	r0, [sp, #0]
   2ecfe:	ab02      	add	r3, sp, #8
   2ed00:	2219      	movs	r2, #25
   2ed02:	2101      	movs	r1, #1
   2ed04:	4630      	mov	r0, r6
   2ed06:	f00d fb88 	bl	3c41a <z_impl_zsock_setsockopt>
	if (err) {
   2ed0a:	b908      	cbnz	r0, 2ed10 <socket_pdn_id_set+0x60>
}
   2ed0c:	b005      	add	sp, #20
   2ed0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ed10:	4b0c      	ldr	r3, [pc, #48]	; (2ed44 <socket_pdn_id_set+0x94>)
   2ed12:	4a0d      	ldr	r2, [pc, #52]	; (2ed48 <socket_pdn_id_set+0x98>)
   2ed14:	1a9b      	subs	r3, r3, r2
   2ed16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to bind socket to PDN ID %d, err %d",
   2ed18:	f04f 0400 	mov.w	r4, #0
   2ed1c:	2201      	movs	r2, #1
   2ed1e:	f362 0402 	bfi	r4, r2, #0, #3
   2ed22:	f36f 04c5 	bfc	r4, #3, #3
   2ed26:	f363 148f 	bfi	r4, r3, #6, #10
   2ed2a:	f00d fda5 	bl	3c878 <__errno>
   2ed2e:	6803      	ldr	r3, [r0, #0]
   2ed30:	462a      	mov	r2, r5
   2ed32:	4907      	ldr	r1, [pc, #28]	; (2ed50 <socket_pdn_id_set+0xa0>)
   2ed34:	4620      	mov	r0, r4
   2ed36:	f00d f987 	bl	3c048 <log_string_sync>
		return -ENETDOWN;
   2ed3a:	f06f 0072 	mvn.w	r0, #114	; 0x72
   2ed3e:	e7e5      	b.n	2ed0c <socket_pdn_id_set+0x5c>
   2ed40:	00044878 	.word	0x00044878
   2ed44:	00041270 	.word	0x00041270
   2ed48:	00041200 	.word	0x00041200
   2ed4c:	00044880 	.word	0x00044880
   2ed50:	00044898 	.word	0x00044898

0002ed54 <socket_sectag_set>:
{
   2ed54:	b530      	push	{r4, r5, lr}
   2ed56:	b085      	sub	sp, #20
   2ed58:	4605      	mov	r5, r0
   2ed5a:	460c      	mov	r4, r1
	sec_tag_t sec_tag_list[] = { sec_tag };
   2ed5c:	9102      	str	r1, [sp, #8]
	verify = REQUIRED;
   2ed5e:	2302      	movs	r3, #2
   2ed60:	9303      	str	r3, [sp, #12]
   2ed62:	2304      	movs	r3, #4
   2ed64:	9300      	str	r3, [sp, #0]
   2ed66:	ab03      	add	r3, sp, #12
   2ed68:	2205      	movs	r2, #5
   2ed6a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2ed6e:	f00d fb54 	bl	3c41a <z_impl_zsock_setsockopt>
	if (err) {
   2ed72:	b9e0      	cbnz	r0, 2edae <socket_sectag_set+0x5a>
   2ed74:	4b27      	ldr	r3, [pc, #156]	; (2ee14 <socket_sectag_set+0xc0>)
   2ed76:	4a28      	ldr	r2, [pc, #160]	; (2ee18 <socket_sectag_set+0xc4>)
   2ed78:	1a9b      	subs	r3, r3, r2
   2ed7a:	08db      	lsrs	r3, r3, #3
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   2ed7c:	f04f 0000 	mov.w	r0, #0
   2ed80:	2203      	movs	r2, #3
   2ed82:	f362 0002 	bfi	r0, r2, #0, #3
   2ed86:	f36f 00c5 	bfc	r0, #3, #3
   2ed8a:	f363 108f 	bfi	r0, r3, #6, #10
   2ed8e:	4622      	mov	r2, r4
   2ed90:	4922      	ldr	r1, [pc, #136]	; (2ee1c <socket_sectag_set+0xc8>)
   2ed92:	f00d f959 	bl	3c048 <log_string_sync>
   2ed96:	2304      	movs	r3, #4
   2ed98:	9300      	str	r3, [sp, #0]
   2ed9a:	ab02      	add	r3, sp, #8
   2ed9c:	2201      	movs	r2, #1
   2ed9e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2eda2:	4628      	mov	r0, r5
   2eda4:	f00d fb39 	bl	3c41a <z_impl_zsock_setsockopt>
	if (err) {
   2eda8:	b9d0      	cbnz	r0, 2ede0 <socket_sectag_set+0x8c>
}
   2edaa:	b005      	add	sp, #20
   2edac:	bd30      	pop	{r4, r5, pc}
   2edae:	4b19      	ldr	r3, [pc, #100]	; (2ee14 <socket_sectag_set+0xc0>)
   2edb0:	4a19      	ldr	r2, [pc, #100]	; (2ee18 <socket_sectag_set+0xc4>)
   2edb2:	1a9b      	subs	r3, r3, r2
   2edb4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   2edb6:	f04f 0400 	mov.w	r4, #0
   2edba:	2201      	movs	r2, #1
   2edbc:	f362 0402 	bfi	r4, r2, #0, #3
   2edc0:	f36f 04c5 	bfc	r4, #3, #3
   2edc4:	f363 148f 	bfi	r4, r3, #6, #10
   2edc8:	f00d fd56 	bl	3c878 <__errno>
   2edcc:	6802      	ldr	r2, [r0, #0]
   2edce:	4914      	ldr	r1, [pc, #80]	; (2ee20 <socket_sectag_set+0xcc>)
   2edd0:	4620      	mov	r0, r4
   2edd2:	f00d f939 	bl	3c048 <log_string_sync>
		return -errno;
   2edd6:	f00d fd4f 	bl	3c878 <__errno>
   2edda:	6800      	ldr	r0, [r0, #0]
   2eddc:	4240      	negs	r0, r0
   2edde:	e7e4      	b.n	2edaa <socket_sectag_set+0x56>
   2ede0:	4b0c      	ldr	r3, [pc, #48]	; (2ee14 <socket_sectag_set+0xc0>)
   2ede2:	4a0d      	ldr	r2, [pc, #52]	; (2ee18 <socket_sectag_set+0xc4>)
   2ede4:	1a9b      	subs	r3, r3, r2
   2ede6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   2ede8:	f04f 0400 	mov.w	r4, #0
   2edec:	2201      	movs	r2, #1
   2edee:	f362 0402 	bfi	r4, r2, #0, #3
   2edf2:	f36f 04c5 	bfc	r4, #3, #3
   2edf6:	f363 148f 	bfi	r4, r3, #6, #10
   2edfa:	f00d fd3d 	bl	3c878 <__errno>
   2edfe:	6802      	ldr	r2, [r0, #0]
   2ee00:	4908      	ldr	r1, [pc, #32]	; (2ee24 <socket_sectag_set+0xd0>)
   2ee02:	4620      	mov	r0, r4
   2ee04:	f00d f920 	bl	3c048 <log_string_sync>
		return -errno;
   2ee08:	f00d fd36 	bl	3c878 <__errno>
   2ee0c:	6800      	ldr	r0, [r0, #0]
   2ee0e:	4240      	negs	r0, r0
   2ee10:	e7cb      	b.n	2edaa <socket_sectag_set+0x56>
   2ee12:	bf00      	nop
   2ee14:	00041270 	.word	0x00041270
   2ee18:	00041200 	.word	0x00041200
   2ee1c:	000448f0 	.word	0x000448f0
   2ee20:	000448c4 	.word	0x000448c4
   2ee24:	00044914 	.word	0x00044914

0002ee28 <socket_tls_hostname_set>:
{
   2ee28:	b570      	push	{r4, r5, r6, lr}
   2ee2a:	b092      	sub	sp, #72	; 0x48
   2ee2c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(hostname);
   2ee2e:	460d      	mov	r5, r1
   2ee30:	b1b1      	cbz	r1, 2ee60 <socket_tls_hostname_set+0x38>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   2ee32:	2240      	movs	r2, #64	; 0x40
   2ee34:	a902      	add	r1, sp, #8
   2ee36:	4628      	mov	r0, r5
   2ee38:	f000 fcd0 	bl	2f7dc <url_parse_host>
	if (err) {
   2ee3c:	4605      	mov	r5, r0
   2ee3e:	b9d0      	cbnz	r0, 2ee76 <socket_tls_hostname_set+0x4e>
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   2ee40:	a802      	add	r0, sp, #8
   2ee42:	f7f2 fb7b 	bl	2153c <strlen>
   2ee46:	9000      	str	r0, [sp, #0]
   2ee48:	ab02      	add	r3, sp, #8
   2ee4a:	2202      	movs	r2, #2
   2ee4c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   2ee50:	4620      	mov	r0, r4
   2ee52:	f00d fae2 	bl	3c41a <z_impl_zsock_setsockopt>
	if (err) {
   2ee56:	4605      	mov	r5, r0
   2ee58:	b9f8      	cbnz	r0, 2ee9a <socket_tls_hostname_set+0x72>
}
   2ee5a:	4628      	mov	r0, r5
   2ee5c:	b012      	add	sp, #72	; 0x48
   2ee5e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(hostname);
   2ee60:	4e1d      	ldr	r6, [pc, #116]	; (2eed8 <socket_tls_hostname_set+0xb0>)
   2ee62:	227a      	movs	r2, #122	; 0x7a
   2ee64:	4631      	mov	r1, r6
   2ee66:	481d      	ldr	r0, [pc, #116]	; (2eedc <socket_tls_hostname_set+0xb4>)
   2ee68:	f00c fe66 	bl	3bb38 <printk>
   2ee6c:	217a      	movs	r1, #122	; 0x7a
   2ee6e:	4630      	mov	r0, r6
   2ee70:	f00d f8b6 	bl	3bfe0 <assert_post_action>
   2ee74:	e7dd      	b.n	2ee32 <socket_tls_hostname_set+0xa>
   2ee76:	4b1a      	ldr	r3, [pc, #104]	; (2eee0 <socket_tls_hostname_set+0xb8>)
   2ee78:	4a1a      	ldr	r2, [pc, #104]	; (2eee4 <socket_tls_hostname_set+0xbc>)
   2ee7a:	1a9b      	subs	r3, r3, r2
   2ee7c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to parse host, err %d", err);
   2ee7e:	f04f 0000 	mov.w	r0, #0
   2ee82:	2201      	movs	r2, #1
   2ee84:	f362 0002 	bfi	r0, r2, #0, #3
   2ee88:	f36f 00c5 	bfc	r0, #3, #3
   2ee8c:	f363 108f 	bfi	r0, r3, #6, #10
   2ee90:	462a      	mov	r2, r5
   2ee92:	4915      	ldr	r1, [pc, #84]	; (2eee8 <socket_tls_hostname_set+0xc0>)
   2ee94:	f00d f8d8 	bl	3c048 <log_string_sync>
		return err;
   2ee98:	e7df      	b.n	2ee5a <socket_tls_hostname_set+0x32>
   2ee9a:	4b11      	ldr	r3, [pc, #68]	; (2eee0 <socket_tls_hostname_set+0xb8>)
   2ee9c:	4a11      	ldr	r2, [pc, #68]	; (2eee4 <socket_tls_hostname_set+0xbc>)
   2ee9e:	1a9b      	subs	r3, r3, r2
   2eea0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   2eea2:	f04f 0400 	mov.w	r4, #0
   2eea6:	2201      	movs	r2, #1
   2eea8:	f362 0402 	bfi	r4, r2, #0, #3
   2eeac:	f36f 04c5 	bfc	r4, #3, #3
   2eeb0:	f363 148f 	bfi	r4, r3, #6, #10
   2eeb4:	a802      	add	r0, sp, #8
   2eeb6:	f00d f8db 	bl	3c070 <z_log_strdup>
   2eeba:	4605      	mov	r5, r0
   2eebc:	f00d fcdc 	bl	3c878 <__errno>
   2eec0:	6803      	ldr	r3, [r0, #0]
   2eec2:	462a      	mov	r2, r5
   2eec4:	4909      	ldr	r1, [pc, #36]	; (2eeec <socket_tls_hostname_set+0xc4>)
   2eec6:	4620      	mov	r0, r4
   2eec8:	f00d f8be 	bl	3c048 <log_string_sync>
		return -errno;
   2eecc:	f00d fcd4 	bl	3c878 <__errno>
   2eed0:	6805      	ldr	r5, [r0, #0]
   2eed2:	426d      	negs	r5, r5
   2eed4:	e7c1      	b.n	2ee5a <socket_tls_hostname_set+0x32>
   2eed6:	bf00      	nop
   2eed8:	000447fc 	.word	0x000447fc
   2eedc:	00041c84 	.word	0x00041c84
   2eee0:	00041270 	.word	0x00041270
   2eee4:	00041200 	.word	0x00041200
   2eee8:	00044944 	.word	0x00044944
   2eeec:	00044964 	.word	0x00044964

0002eef0 <socket_timeout_set>:
{
   2eef0:	b510      	push	{r4, lr}
   2eef2:	b084      	sub	sp, #16
   2eef4:	4604      	mov	r4, r0
	if (type == SOCK_STREAM) {
   2eef6:	2901      	cmp	r1, #1
   2eef8:	d028      	beq.n	2ef4c <socket_timeout_set+0x5c>
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   2eefa:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
		.tv_sec = (timeout_ms / 1000),
   2eefe:	4a21      	ldr	r2, [pc, #132]	; (2ef84 <socket_timeout_set+0x94>)
   2ef00:	fba2 3201 	umull	r3, r2, r2, r1
   2ef04:	0992      	lsrs	r2, r2, #6
	struct timeval timeo = {
   2ef06:	9202      	str	r2, [sp, #8]
		.tv_usec = (timeout_ms % 1000) * 1000,
   2ef08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2ef0c:	fb03 1112 	mls	r1, r3, r2, r1
   2ef10:	fb03 f301 	mul.w	r3, r3, r1
	struct timeval timeo = {
   2ef14:	9303      	str	r3, [sp, #12]
   2ef16:	4b1c      	ldr	r3, [pc, #112]	; (2ef88 <socket_timeout_set+0x98>)
   2ef18:	491c      	ldr	r1, [pc, #112]	; (2ef8c <socket_timeout_set+0x9c>)
   2ef1a:	1a5b      	subs	r3, r3, r1
   2ef1c:	08db      	lsrs	r3, r3, #3
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   2ef1e:	f04f 0000 	mov.w	r0, #0
   2ef22:	2103      	movs	r1, #3
   2ef24:	f361 0002 	bfi	r0, r1, #0, #3
   2ef28:	f36f 00c5 	bfc	r0, #3, #3
   2ef2c:	f363 108f 	bfi	r0, r3, #6, #10
   2ef30:	4917      	ldr	r1, [pc, #92]	; (2ef90 <socket_timeout_set+0xa0>)
   2ef32:	f00d f889 	bl	3c048 <log_string_sync>
   2ef36:	2308      	movs	r3, #8
   2ef38:	9300      	str	r3, [sp, #0]
   2ef3a:	446b      	add	r3, sp
   2ef3c:	2214      	movs	r2, #20
   2ef3e:	2101      	movs	r1, #1
   2ef40:	4620      	mov	r0, r4
   2ef42:	f00d fa6a 	bl	3c41a <z_impl_zsock_setsockopt>
	if (err) {
   2ef46:	b920      	cbnz	r0, 2ef52 <socket_timeout_set+0x62>
}
   2ef48:	b004      	add	sp, #16
   2ef4a:	bd10      	pop	{r4, pc}
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_TCP_SOCK_TIMEO_MS;
   2ef4c:	f247 5130 	movw	r1, #30000	; 0x7530
   2ef50:	e7d5      	b.n	2eefe <socket_timeout_set+0xe>
   2ef52:	4b0d      	ldr	r3, [pc, #52]	; (2ef88 <socket_timeout_set+0x98>)
   2ef54:	4a0d      	ldr	r2, [pc, #52]	; (2ef8c <socket_timeout_set+0x9c>)
   2ef56:	1a9b      	subs	r3, r3, r2
   2ef58:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   2ef5a:	f04f 0400 	mov.w	r4, #0
   2ef5e:	2202      	movs	r2, #2
   2ef60:	f362 0402 	bfi	r4, r2, #0, #3
   2ef64:	f36f 04c5 	bfc	r4, #3, #3
   2ef68:	f363 148f 	bfi	r4, r3, #6, #10
   2ef6c:	f00d fc84 	bl	3c878 <__errno>
   2ef70:	6802      	ldr	r2, [r0, #0]
   2ef72:	4908      	ldr	r1, [pc, #32]	; (2ef94 <socket_timeout_set+0xa4>)
   2ef74:	4620      	mov	r0, r4
   2ef76:	f00d f867 	bl	3c048 <log_string_sync>
		return -errno;
   2ef7a:	f00d fc7d 	bl	3c878 <__errno>
   2ef7e:	6800      	ldr	r0, [r0, #0]
   2ef80:	4240      	negs	r0, r0
   2ef82:	e7e1      	b.n	2ef48 <socket_timeout_set+0x58>
   2ef84:	10624dd3 	.word	0x10624dd3
   2ef88:	00041270 	.word	0x00041270
   2ef8c:	00041200 	.word	0x00041200
   2ef90:	00044990 	.word	0x00044990
   2ef94:	000449b4 	.word	0x000449b4

0002ef98 <client_connect>:
{
   2ef98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ef9c:	b083      	sub	sp, #12
   2ef9e:	4604      	mov	r4, r0
   2efa0:	460d      	mov	r5, r1
   2efa2:	4616      	mov	r6, r2
   2efa4:	461f      	mov	r7, r3
	err = url_parse_proto(host, &dl->proto, &type);
   2efa6:	aa01      	add	r2, sp, #4
   2efa8:	f600 0128 	addw	r1, r0, #2088	; 0x828
   2efac:	4628      	mov	r0, r5
   2efae:	f000 fbd9 	bl	2f764 <url_parse_proto>
	if (err) {
   2efb2:	b150      	cbz	r0, 2efca <client_connect+0x32>
		type = SOCK_STREAM;
   2efb4:	2301      	movs	r3, #1
   2efb6:	9301      	str	r3, [sp, #4]
		if (dl->config.sec_tag != -1) {
   2efb8:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2efbc:	f1b3 3fff 	cmp.w	r3, #4294967295
   2efc0:	d02e      	beq.n	2f020 <client_connect+0x88>
			dl->proto = IPPROTO_TLS_1_2;
   2efc2:	f44f 7381 	mov.w	r3, #258	; 0x102
   2efc6:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   2efca:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   2efce:	2b11      	cmp	r3, #17
   2efd0:	f000 8112 	beq.w	2f1f8 <client_connect+0x260>
   2efd4:	f240 1211 	movw	r2, #273	; 0x111
   2efd8:	4293      	cmp	r3, r2
   2efda:	f000 8110 	beq.w	2f1fe <client_connect+0x266>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   2efde:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2efe2:	d021      	beq.n	2f028 <client_connect+0x90>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   2efe4:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2efe8:	f1b3 3fff 	cmp.w	r3, #4294967295
   2efec:	d102      	bne.n	2eff4 <client_connect+0x5c>
   2efee:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
   2eff2:	bb8b      	cbnz	r3, 2f058 <client_connect+0xc0>
	err = url_parse_port(host, &port);
   2eff4:	f10d 0102 	add.w	r1, sp, #2
   2eff8:	4628      	mov	r0, r5
   2effa:	f000 fc2b 	bl	2f854 <url_parse_port>
	if (err) {
   2effe:	2800      	cmp	r0, #0
   2f000:	d04a      	beq.n	2f098 <client_connect+0x100>
		switch (dl->proto) {
   2f002:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   2f006:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2f00a:	d041      	beq.n	2f090 <client_connect+0xf8>
   2f00c:	dc37      	bgt.n	2f07e <client_connect+0xe6>
   2f00e:	2b06      	cmp	r3, #6
   2f010:	d077      	beq.n	2f102 <client_connect+0x16a>
   2f012:	2b11      	cmp	r3, #17
   2f014:	d140      	bne.n	2f098 <client_connect+0x100>
			port = 5683;
   2f016:	f241 6333 	movw	r3, #5683	; 0x1633
   2f01a:	f8ad 3002 	strh.w	r3, [sp, #2]
			break;
   2f01e:	e03b      	b.n	2f098 <client_connect+0x100>
			dl->proto = IPPROTO_TCP;
   2f020:	2306      	movs	r3, #6
   2f022:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
   2f026:	e7d0      	b.n	2efca <client_connect+0x32>
		if (dl->config.sec_tag == -1) {
   2f028:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   2f02c:	f1b3 3fff 	cmp.w	r3, #4294967295
   2f030:	d1d8      	bne.n	2efe4 <client_connect+0x4c>
   2f032:	4b77      	ldr	r3, [pc, #476]	; (2f210 <client_connect+0x278>)
   2f034:	4a77      	ldr	r2, [pc, #476]	; (2f214 <client_connect+0x27c>)
   2f036:	1a9b      	subs	r3, r3, r2
   2f038:	08db      	lsrs	r3, r3, #3
			LOG_WRN("No security tag provided for TLS/DTLS");
   2f03a:	f04f 0000 	mov.w	r0, #0
   2f03e:	2202      	movs	r2, #2
   2f040:	f362 0002 	bfi	r0, r2, #0, #3
   2f044:	f36f 00c5 	bfc	r0, #3, #3
   2f048:	f363 108f 	bfi	r0, r3, #6, #10
   2f04c:	4972      	ldr	r1, [pc, #456]	; (2f218 <client_connect+0x280>)
   2f04e:	f00c fffb 	bl	3c048 <log_string_sync>
			return -EINVAL;
   2f052:	f06f 0815 	mvn.w	r8, #21
   2f056:	e0d7      	b.n	2f208 <client_connect+0x270>
   2f058:	4b6d      	ldr	r3, [pc, #436]	; (2f210 <client_connect+0x278>)
   2f05a:	4a6e      	ldr	r2, [pc, #440]	; (2f214 <client_connect+0x27c>)
   2f05c:	1a9b      	subs	r3, r3, r2
   2f05e:	08db      	lsrs	r3, r3, #3
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   2f060:	f04f 0000 	mov.w	r0, #0
   2f064:	2202      	movs	r2, #2
   2f066:	f362 0002 	bfi	r0, r2, #0, #3
   2f06a:	f36f 00c5 	bfc	r0, #3, #3
   2f06e:	f363 108f 	bfi	r0, r3, #6, #10
   2f072:	496a      	ldr	r1, [pc, #424]	; (2f21c <client_connect+0x284>)
   2f074:	f00c ffe8 	bl	3c048 <log_string_sync>
		return -EINVAL;
   2f078:	f06f 0815 	mvn.w	r8, #21
   2f07c:	e0c4      	b.n	2f208 <client_connect+0x270>
		switch (dl->proto) {
   2f07e:	f240 1211 	movw	r2, #273	; 0x111
   2f082:	4293      	cmp	r3, r2
   2f084:	d108      	bne.n	2f098 <client_connect+0x100>
			port = 5684;
   2f086:	f241 6334 	movw	r3, #5684	; 0x1634
   2f08a:	f8ad 3002 	strh.w	r3, [sp, #2]
			break;
   2f08e:	e003      	b.n	2f098 <client_connect+0x100>
			port = 443;
   2f090:	f240 13bb 	movw	r3, #443	; 0x1bb
   2f094:	f8ad 3002 	strh.w	r3, [sp, #2]
	switch (sa->sa_family) {
   2f098:	8830      	ldrh	r0, [r6, #0]
   2f09a:	2801      	cmp	r0, #1
   2f09c:	d035      	beq.n	2f10a <client_connect+0x172>
   2f09e:	2802      	cmp	r0, #2
   2f0a0:	f040 80b0 	bne.w	2f204 <client_connect+0x26c>
		SIN6(sa)->sin6_port = htons(port);
   2f0a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2f0a8:	0a13      	lsrs	r3, r2, #8
   2f0aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2f0ae:	8073      	strh	r3, [r6, #2]
		addrlen = sizeof(struct sockaddr_in6);
   2f0b0:	f04f 0918 	mov.w	r9, #24
	*fd = socket(sa->sa_family, type, dl->proto);
   2f0b4:	9901      	ldr	r1, [sp, #4]
   2f0b6:	f8d4 2828 	ldr.w	r2, [r4, #2088]	; 0x828
	return z_impl_zsock_socket(family, type, proto);
   2f0ba:	f7f7 fd05 	bl	26ac8 <z_impl_zsock_socket>
   2f0be:	6038      	str	r0, [r7, #0]
	if (*fd < 0) {
   2f0c0:	2800      	cmp	r0, #0
   2f0c2:	db2b      	blt.n	2f11c <client_connect+0x184>
	if (dl->config.pdn_id) {
   2f0c4:	f894 181c 	ldrb.w	r1, [r4, #2076]	; 0x81c
   2f0c8:	2900      	cmp	r1, #0
   2f0ca:	d141      	bne.n	2f150 <client_connect+0x1b8>
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   2f0cc:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   2f0d0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2f0d4:	d042      	beq.n	2f15c <client_connect+0x1c4>
   2f0d6:	f240 1211 	movw	r2, #273	; 0x111
   2f0da:	4293      	cmp	r3, r2
   2f0dc:	d03e      	beq.n	2f15c <client_connect+0x1c4>
	err = socket_timeout_set(*fd, type);
   2f0de:	9901      	ldr	r1, [sp, #4]
   2f0e0:	6838      	ldr	r0, [r7, #0]
   2f0e2:	f7ff ff05 	bl	2eef0 <socket_timeout_set>
	if (err) {
   2f0e6:	4680      	mov	r8, r0
   2f0e8:	2800      	cmp	r0, #0
   2f0ea:	d04e      	beq.n	2f18a <client_connect+0x1f2>
	if (err) {
   2f0ec:	f1b8 0f00 	cmp.w	r8, #0
   2f0f0:	f000 808a 	beq.w	2f208 <client_connect+0x270>
		close(*fd);
   2f0f4:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_close(sock);
   2f0f6:	f00d f8b6 	bl	3c266 <z_impl_zsock_close>
		*fd = -1;
   2f0fa:	f04f 33ff 	mov.w	r3, #4294967295
   2f0fe:	603b      	str	r3, [r7, #0]
   2f100:	e082      	b.n	2f208 <client_connect+0x270>
			port = 80;
   2f102:	2350      	movs	r3, #80	; 0x50
   2f104:	f8ad 3002 	strh.w	r3, [sp, #2]
			break;
   2f108:	e7c6      	b.n	2f098 <client_connect+0x100>
		SIN(sa)->sin_port = htons(port);
   2f10a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2f10e:	0a13      	lsrs	r3, r2, #8
   2f110:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2f114:	8073      	strh	r3, [r6, #2]
		addrlen = sizeof(struct sockaddr_in);
   2f116:	f04f 0908 	mov.w	r9, #8
		break;
   2f11a:	e7cb      	b.n	2f0b4 <client_connect+0x11c>
   2f11c:	4b3c      	ldr	r3, [pc, #240]	; (2f210 <client_connect+0x278>)
   2f11e:	4a3d      	ldr	r2, [pc, #244]	; (2f214 <client_connect+0x27c>)
   2f120:	1a9b      	subs	r3, r3, r2
   2f122:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to create socket, err %d", errno);
   2f124:	f04f 0400 	mov.w	r4, #0
   2f128:	2201      	movs	r2, #1
   2f12a:	f362 0402 	bfi	r4, r2, #0, #3
   2f12e:	f36f 04c5 	bfc	r4, #3, #3
   2f132:	f363 148f 	bfi	r4, r3, #6, #10
   2f136:	f00d fb9f 	bl	3c878 <__errno>
   2f13a:	6802      	ldr	r2, [r0, #0]
   2f13c:	4938      	ldr	r1, [pc, #224]	; (2f220 <client_connect+0x288>)
   2f13e:	4620      	mov	r0, r4
   2f140:	f00c ff82 	bl	3c048 <log_string_sync>
		return -errno;
   2f144:	f00d fb98 	bl	3c878 <__errno>
   2f148:	6803      	ldr	r3, [r0, #0]
   2f14a:	f1c3 0800 	rsb	r8, r3, #0
   2f14e:	e05b      	b.n	2f208 <client_connect+0x270>
		err = socket_pdn_id_set(*fd, dl->config.pdn_id);
   2f150:	f7ff fdae 	bl	2ecb0 <socket_pdn_id_set>
		if (err) {
   2f154:	4680      	mov	r8, r0
   2f156:	2800      	cmp	r0, #0
   2f158:	d0b8      	beq.n	2f0cc <client_connect+0x134>
   2f15a:	e7c7      	b.n	2f0ec <client_connect+0x154>
	     && (dl->config.sec_tag != -1)) {
   2f15c:	f8d4 1818 	ldr.w	r1, [r4, #2072]	; 0x818
   2f160:	f1b1 3fff 	cmp.w	r1, #4294967295
   2f164:	d0bb      	beq.n	2f0de <client_connect+0x146>
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   2f166:	6838      	ldr	r0, [r7, #0]
   2f168:	f7ff fdf4 	bl	2ed54 <socket_sectag_set>
		if (err) {
   2f16c:	4680      	mov	r8, r0
   2f16e:	2800      	cmp	r0, #0
   2f170:	d1bc      	bne.n	2f0ec <client_connect+0x154>
		if (dl->config.set_tls_hostname) {
   2f172:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
   2f176:	2b00      	cmp	r3, #0
   2f178:	d0b1      	beq.n	2f0de <client_connect+0x146>
			err = socket_tls_hostname_set(*fd, host);
   2f17a:	4629      	mov	r1, r5
   2f17c:	6838      	ldr	r0, [r7, #0]
   2f17e:	f7ff fe53 	bl	2ee28 <socket_tls_hostname_set>
			if (err) {
   2f182:	4680      	mov	r8, r0
   2f184:	2800      	cmp	r0, #0
   2f186:	d0aa      	beq.n	2f0de <client_connect+0x146>
   2f188:	e7b0      	b.n	2f0ec <client_connect+0x154>
   2f18a:	4b21      	ldr	r3, [pc, #132]	; (2f210 <client_connect+0x278>)
   2f18c:	4a21      	ldr	r2, [pc, #132]	; (2f214 <client_connect+0x27c>)
   2f18e:	1a9b      	subs	r3, r3, r2
   2f190:	08db      	lsrs	r3, r3, #3
	LOG_INF("Connecting to %s", log_strdup(host));
   2f192:	f04f 0400 	mov.w	r4, #0
   2f196:	2203      	movs	r2, #3
   2f198:	f362 0402 	bfi	r4, r2, #0, #3
   2f19c:	f36f 04c5 	bfc	r4, #3, #3
   2f1a0:	f363 148f 	bfi	r4, r3, #6, #10
   2f1a4:	4628      	mov	r0, r5
   2f1a6:	f00c ff63 	bl	3c070 <z_log_strdup>
   2f1aa:	4602      	mov	r2, r0
   2f1ac:	491d      	ldr	r1, [pc, #116]	; (2f224 <client_connect+0x28c>)
   2f1ae:	4620      	mov	r0, r4
   2f1b0:	f00c ff4a 	bl	3c048 <log_string_sync>
	err = connect(*fd, sa, addrlen);
   2f1b4:	6838      	ldr	r0, [r7, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2f1b6:	464a      	mov	r2, r9
   2f1b8:	4631      	mov	r1, r6
   2f1ba:	f00d f879 	bl	3c2b0 <z_impl_zsock_connect>
	if (err) {
   2f1be:	4680      	mov	r8, r0
   2f1c0:	2800      	cmp	r0, #0
   2f1c2:	d093      	beq.n	2f0ec <client_connect+0x154>
   2f1c4:	4b12      	ldr	r3, [pc, #72]	; (2f210 <client_connect+0x278>)
   2f1c6:	4a13      	ldr	r2, [pc, #76]	; (2f214 <client_connect+0x27c>)
   2f1c8:	1a9b      	subs	r3, r3, r2
   2f1ca:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to connect, errno %d", errno);
   2f1cc:	f04f 0400 	mov.w	r4, #0
   2f1d0:	2201      	movs	r2, #1
   2f1d2:	f362 0402 	bfi	r4, r2, #0, #3
   2f1d6:	f36f 04c5 	bfc	r4, #3, #3
   2f1da:	f363 148f 	bfi	r4, r3, #6, #10
   2f1de:	f00d fb4b 	bl	3c878 <__errno>
   2f1e2:	6802      	ldr	r2, [r0, #0]
   2f1e4:	4910      	ldr	r1, [pc, #64]	; (2f228 <client_connect+0x290>)
   2f1e6:	4620      	mov	r0, r4
   2f1e8:	f00c ff2e 	bl	3c048 <log_string_sync>
		err = -errno;
   2f1ec:	f00d fb44 	bl	3c878 <__errno>
   2f1f0:	6803      	ldr	r3, [r0, #0]
   2f1f2:	f1c3 0800 	rsb	r8, r3, #0
   2f1f6:	e779      	b.n	2f0ec <client_connect+0x154>
			return -EPROTONOSUPPORT;
   2f1f8:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   2f1fc:	e004      	b.n	2f208 <client_connect+0x270>
   2f1fe:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   2f202:	e001      	b.n	2f208 <client_connect+0x270>
	switch (sa->sa_family) {
   2f204:	f06f 0869 	mvn.w	r8, #105	; 0x69
}
   2f208:	4640      	mov	r0, r8
   2f20a:	b003      	add	sp, #12
   2f20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2f210:	00041270 	.word	0x00041270
   2f214:	00041200 	.word	0x00041200
   2f218:	000449dc 	.word	0x000449dc
   2f21c:	00044a04 	.word	0x00044a04
   2f220:	00044a38 	.word	0x00044a38
   2f224:	00044a58 	.word	0x00044a58
   2f228:	00044a6c 	.word	0x00044a6c

0002f22c <download_client_init>:
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
	if (client == NULL || callback == NULL) {
   2f22c:	b328      	cbz	r0, 2f27a <download_client_init+0x4e>
{
   2f22e:	b530      	push	{r4, r5, lr}
   2f230:	b089      	sub	sp, #36	; 0x24
   2f232:	4605      	mov	r5, r0
	if (client == NULL || callback == NULL) {
   2f234:	b321      	cbz	r1, 2f280 <download_client_init+0x54>
		return -EINVAL;
	}

	client->fd = -1;
   2f236:	f04f 33ff 	mov.w	r3, #4294967295
   2f23a:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   2f23c:	f500 53c6 	add.w	r3, r0, #6336	; 0x18c0
   2f240:	6019      	str	r1, [r3, #0]

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
		k_thread_create(&client->thread, client->thread_stack,
   2f242:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   2f246:	f505 610c 	add.w	r1, r5, #2240	; 0x8c0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2f24a:	2200      	movs	r2, #0
   2f24c:	2300      	movs	r3, #0
   2f24e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2f252:	2400      	movs	r4, #0
   2f254:	9404      	str	r4, [sp, #16]
   2f256:	230e      	movs	r3, #14
   2f258:	9303      	str	r3, [sp, #12]
   2f25a:	9402      	str	r4, [sp, #8]
   2f25c:	9401      	str	r4, [sp, #4]
   2f25e:	9500      	str	r5, [sp, #0]
   2f260:	4b09      	ldr	r3, [pc, #36]	; (2f288 <download_client_init+0x5c>)
   2f262:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2f266:	f006 fdad 	bl	35dc4 <z_impl_k_thread_create>
	client->tid =
   2f26a:	f8c5 083c 	str.w	r0, [r5, #2108]	; 0x83c
	return z_impl_k_thread_name_set(thread, str);
   2f26e:	4907      	ldr	r1, [pc, #28]	; (2f28c <download_client_init+0x60>)
   2f270:	f010 fc8a 	bl	3fb88 <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   2f274:	4620      	mov	r0, r4
}
   2f276:	b009      	add	sp, #36	; 0x24
   2f278:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2f27a:	f06f 0015 	mvn.w	r0, #21
}
   2f27e:	4770      	bx	lr
		return -EINVAL;
   2f280:	f06f 0015 	mvn.w	r0, #21
   2f284:	e7f7      	b.n	2f276 <download_client_init+0x4a>
   2f286:	bf00      	nop
   2f288:	0002f3e9 	.word	0x0002f3e9
   2f28c:	00044a88 	.word	0x00044a88

0002f290 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   2f290:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f292:	b087      	sub	sp, #28
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   2f294:	2800      	cmp	r0, #0
   2f296:	d03c      	beq.n	2f312 <download_client_connect+0x82>
   2f298:	460f      	mov	r7, r1
   2f29a:	4614      	mov	r4, r2
   2f29c:	4605      	mov	r5, r0
   2f29e:	2900      	cmp	r1, #0
   2f2a0:	d03a      	beq.n	2f318 <download_client_connect+0x88>
   2f2a2:	2a00      	cmp	r2, #0
   2f2a4:	d03b      	beq.n	2f31e <download_client_connect+0x8e>
		return -EINVAL;
	}

	if (client->fd != -1) {
   2f2a6:	6803      	ldr	r3, [r0, #0]
   2f2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
   2f2ac:	d13a      	bne.n	2f324 <download_client_connect+0x94>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2f2ae:	6893      	ldr	r3, [r2, #8]
   2f2b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2f2b4:	d81a      	bhi.n	2f2ec <download_client_connect+0x5c>
	/* Attempt IPv6 connection if configured, fallback to IPv4 */
	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_IPV6)) {
		err = host_lookup(host, AF_INET6, config->pdn_id, &sa);
	}
	if (err || !IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_IPV6)) {
		err = host_lookup(host, AF_INET, config->pdn_id, &sa);
   2f2b6:	466b      	mov	r3, sp
   2f2b8:	7912      	ldrb	r2, [r2, #4]
   2f2ba:	2101      	movs	r1, #1
   2f2bc:	4638      	mov	r0, r7
   2f2be:	f7ff fc91 	bl	2ebe4 <host_lookup>
	}

	if (err) {
   2f2c2:	4606      	mov	r6, r0
   2f2c4:	bb78      	cbnz	r0, 2f326 <download_client_connect+0x96>
		return err;
	}

	client->config = *config;
   2f2c6:	f605 0c18 	addw	ip, r5, #2072	; 0x818
   2f2ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2f2ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	client->host = host;
   2f2d2:	f8c5 7810 	str.w	r7, [r5, #2064]	; 0x810

	err = client_connect(client, host, &sa, &client->fd);
   2f2d6:	462b      	mov	r3, r5
   2f2d8:	466a      	mov	r2, sp
   2f2da:	4639      	mov	r1, r7
   2f2dc:	4628      	mov	r0, r5
   2f2de:	f7ff fe5b 	bl	2ef98 <client_connect>
	if (client->fd < 0) {
   2f2e2:	682b      	ldr	r3, [r5, #0]
   2f2e4:	2b00      	cmp	r3, #0
   2f2e6:	da1e      	bge.n	2f326 <download_client_connect+0x96>
		return err;
   2f2e8:	4606      	mov	r6, r0
   2f2ea:	e01c      	b.n	2f326 <download_client_connect+0x96>
   2f2ec:	4b0f      	ldr	r3, [pc, #60]	; (2f32c <download_client_connect+0x9c>)
   2f2ee:	4a10      	ldr	r2, [pc, #64]	; (2f330 <download_client_connect+0xa0>)
   2f2f0:	1a9b      	subs	r3, r3, r2
   2f2f2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("The configured fragment size is larger than buffer");
   2f2f4:	f04f 0000 	mov.w	r0, #0
   2f2f8:	2201      	movs	r2, #1
   2f2fa:	f362 0002 	bfi	r0, r2, #0, #3
   2f2fe:	f36f 00c5 	bfc	r0, #3, #3
   2f302:	f363 108f 	bfi	r0, r3, #6, #10
   2f306:	490b      	ldr	r1, [pc, #44]	; (2f334 <download_client_connect+0xa4>)
   2f308:	f00c fe9e 	bl	3c048 <log_string_sync>
		return -E2BIG;
   2f30c:	f06f 0606 	mvn.w	r6, #6
   2f310:	e009      	b.n	2f326 <download_client_connect+0x96>
		return -EINVAL;
   2f312:	f06f 0615 	mvn.w	r6, #21
   2f316:	e006      	b.n	2f326 <download_client_connect+0x96>
   2f318:	f06f 0615 	mvn.w	r6, #21
   2f31c:	e003      	b.n	2f326 <download_client_connect+0x96>
   2f31e:	f06f 0615 	mvn.w	r6, #21
   2f322:	e000      	b.n	2f326 <download_client_connect+0x96>
		return 0;
   2f324:	2600      	movs	r6, #0
	}

	return 0;
}
   2f326:	4630      	mov	r0, r6
   2f328:	b007      	add	sp, #28
   2f32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f32c:	00041270 	.word	0x00041270
   2f330:	00041200 	.word	0x00041200
   2f334:	00044a98 	.word	0x00044a98

0002f338 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
	int err;

	if (client == NULL || client->fd < 0) {
   2f338:	b320      	cbz	r0, 2f384 <download_client_disconnect+0x4c>
{
   2f33a:	b510      	push	{r4, lr}
   2f33c:	4604      	mov	r4, r0
	if (client == NULL || client->fd < 0) {
   2f33e:	6800      	ldr	r0, [r0, #0]
   2f340:	2800      	cmp	r0, #0
   2f342:	db22      	blt.n	2f38a <download_client_disconnect+0x52>
	return z_impl_zsock_close(sock);
   2f344:	f00c ff8f 	bl	3c266 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   2f348:	b918      	cbnz	r0, 2f352 <download_client_disconnect+0x1a>
		LOG_ERR("Failed to close socket, errno %d", errno);
		return -errno;
	}

	client->fd = -1;
   2f34a:	f04f 33ff 	mov.w	r3, #4294967295
   2f34e:	6023      	str	r3, [r4, #0]

	return 0;
}
   2f350:	bd10      	pop	{r4, pc}
   2f352:	4b0f      	ldr	r3, [pc, #60]	; (2f390 <download_client_disconnect+0x58>)
   2f354:	4a0f      	ldr	r2, [pc, #60]	; (2f394 <download_client_disconnect+0x5c>)
   2f356:	1a9b      	subs	r3, r3, r2
   2f358:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to close socket, errno %d", errno);
   2f35a:	f04f 0400 	mov.w	r4, #0
   2f35e:	2201      	movs	r2, #1
   2f360:	f362 0402 	bfi	r4, r2, #0, #3
   2f364:	f36f 04c5 	bfc	r4, #3, #3
   2f368:	f363 148f 	bfi	r4, r3, #6, #10
   2f36c:	f00d fa84 	bl	3c878 <__errno>
   2f370:	6802      	ldr	r2, [r0, #0]
   2f372:	4909      	ldr	r1, [pc, #36]	; (2f398 <download_client_disconnect+0x60>)
   2f374:	4620      	mov	r0, r4
   2f376:	f00c fe67 	bl	3c048 <log_string_sync>
		return -errno;
   2f37a:	f00d fa7d 	bl	3c878 <__errno>
   2f37e:	6800      	ldr	r0, [r0, #0]
   2f380:	4240      	negs	r0, r0
   2f382:	e7e5      	b.n	2f350 <download_client_disconnect+0x18>
		return -EINVAL;
   2f384:	f06f 0015 	mvn.w	r0, #21
}
   2f388:	4770      	bx	lr
		return -EINVAL;
   2f38a:	f06f 0015 	mvn.w	r0, #21
   2f38e:	e7df      	b.n	2f350 <download_client_disconnect+0x18>
   2f390:	00041270 	.word	0x00041270
   2f394:	00041200 	.word	0x00041200
   2f398:	00044acc 	.word	0x00044acc

0002f39c <reconnect>:
{
   2f39c:	b510      	push	{r4, lr}
   2f39e:	4604      	mov	r4, r0
   2f3a0:	4b0e      	ldr	r3, [pc, #56]	; (2f3dc <reconnect+0x40>)
   2f3a2:	4a0f      	ldr	r2, [pc, #60]	; (2f3e0 <reconnect+0x44>)
   2f3a4:	1a9b      	subs	r3, r3, r2
   2f3a6:	08db      	lsrs	r3, r3, #3
	LOG_INF("Reconnecting..");
   2f3a8:	f04f 0000 	mov.w	r0, #0
   2f3ac:	2203      	movs	r2, #3
   2f3ae:	f362 0002 	bfi	r0, r2, #0, #3
   2f3b2:	f36f 00c5 	bfc	r0, #3, #3
   2f3b6:	f363 108f 	bfi	r0, r3, #6, #10
   2f3ba:	490a      	ldr	r1, [pc, #40]	; (2f3e4 <reconnect+0x48>)
   2f3bc:	f00c fe44 	bl	3c048 <log_string_sync>
	err = download_client_disconnect(dl);
   2f3c0:	4620      	mov	r0, r4
   2f3c2:	f7ff ffb9 	bl	2f338 <download_client_disconnect>
	if (err) {
   2f3c6:	b100      	cbz	r0, 2f3ca <reconnect+0x2e>
}
   2f3c8:	bd10      	pop	{r4, pc}
	err = download_client_connect(dl, dl->host, &dl->config);
   2f3ca:	f604 0218 	addw	r2, r4, #2072	; 0x818
   2f3ce:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   2f3d2:	4620      	mov	r0, r4
   2f3d4:	f7ff ff5c 	bl	2f290 <download_client_connect>
	if (err) {
   2f3d8:	e7f6      	b.n	2f3c8 <reconnect+0x2c>
   2f3da:	bf00      	nop
   2f3dc:	00041270 	.word	0x00041270
   2f3e0:	00041200 	.word	0x00041200
   2f3e4:	00044af0 	.word	0x00044af0

0002f3e8 <download_thread>:
{
   2f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f3ec:	b08b      	sub	sp, #44	; 0x2c
   2f3ee:	4604      	mov	r4, r0
	int rc = 0;
   2f3f0:	2500      	movs	r5, #0
   2f3f2:	e050      	b.n	2f496 <download_thread+0xae>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2f3f4:	4eb0      	ldr	r6, [pc, #704]	; (2f6b8 <download_thread+0x2d0>)
   2f3f6:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
   2f3fa:	4631      	mov	r1, r6
   2f3fc:	48af      	ldr	r0, [pc, #700]	; (2f6bc <download_thread+0x2d4>)
   2f3fe:	f00c fb9b 	bl	3bb38 <printk>
   2f402:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
   2f406:	4630      	mov	r0, r6
   2f408:	f00c fdea 	bl	3bfe0 <assert_post_action>
   2f40c:	e04c      	b.n	2f4a8 <download_thread+0xc0>
   2f40e:	4bac      	ldr	r3, [pc, #688]	; (2f6c0 <download_thread+0x2d8>)
   2f410:	4aac      	ldr	r2, [pc, #688]	; (2f6c4 <download_thread+0x2dc>)
   2f412:	1a9b      	subs	r3, r3, r2
   2f414:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   2f416:	2201      	movs	r2, #1
   2f418:	f362 0b02 	bfi	fp, r2, #0, #3
   2f41c:	f36f 0bc5 	bfc	fp, #3, #3
   2f420:	f363 1b8f 	bfi	fp, r3, #6, #10
   2f424:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2f428:	49a7      	ldr	r1, [pc, #668]	; (2f6c8 <download_thread+0x2e0>)
   2f42a:	4658      	mov	r0, fp
   2f42c:	f00c fe0c 	bl	3c048 <log_string_sync>
			error_evt_send(dl, E2BIG);
   2f430:	2107      	movs	r1, #7
   2f432:	4620      	mov	r0, r4
   2f434:	f7ff fb92 	bl	2eb5c <error_evt_send>
			break;
   2f438:	e02d      	b.n	2f496 <download_thread+0xae>
			if (len == -1) {
   2f43a:	f1b6 3fff 	cmp.w	r6, #4294967295
   2f43e:	d06b      	beq.n	2f518 <download_thread+0x130>
			error_cause = ECONNRESET;
   2f440:	2568      	movs	r5, #104	; 0x68
			if (len == 0) {
   2f442:	2e00      	cmp	r6, #0
   2f444:	f000 8095 	beq.w	2f572 <download_thread+0x18a>
			rc = error_evt_send(dl, error_cause);
   2f448:	4629      	mov	r1, r5
   2f44a:	4620      	mov	r0, r4
   2f44c:	f7ff fb86 	bl	2eb5c <error_evt_send>
			if (rc) {
   2f450:	4605      	mov	r5, r0
   2f452:	bb00      	cbnz	r0, 2f496 <download_thread+0xae>
			rc = reconnect(dl);
   2f454:	4620      	mov	r0, r4
   2f456:	f7ff ffa1 	bl	2f39c <reconnect>
			if (rc) {
   2f45a:	4605      	mov	r5, r0
   2f45c:	2800      	cmp	r0, #0
   2f45e:	f040 8098 	bne.w	2f592 <download_thread+0x1aa>
		dl->offset = 0;
   2f462:	2300      	movs	r3, #0
   2f464:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
			dl->http.has_header = false;
   2f468:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
			rc = request_send(dl);
   2f46c:	4620      	mov	r0, r4
   2f46e:	f00f f980 	bl	3e772 <request_send>
			if (rc) {
   2f472:	4605      	mov	r5, r0
   2f474:	b198      	cbz	r0, 2f49e <download_thread+0xb6>
				rc = error_evt_send(dl, ECONNRESET);
   2f476:	2168      	movs	r1, #104	; 0x68
   2f478:	4620      	mov	r0, r4
   2f47a:	f7ff fb6f 	bl	2eb5c <error_evt_send>
				if (rc) {
   2f47e:	4605      	mov	r5, r0
   2f480:	b948      	cbnz	r0, 2f496 <download_thread+0xae>
				rc = reconnect(dl);
   2f482:	4620      	mov	r0, r4
   2f484:	f7ff ff8a 	bl	2f39c <reconnect>
				if (rc) {
   2f488:	4605      	mov	r5, r0
   2f48a:	2800      	cmp	r0, #0
   2f48c:	d0e9      	beq.n	2f462 <download_thread+0x7a>
					error_evt_send(dl, EHOSTDOWN);
   2f48e:	2175      	movs	r1, #117	; 0x75
   2f490:	4620      	mov	r0, r4
   2f492:	f7ff fb63 	bl	2eb5c <error_evt_send>
	k_thread_suspend(dl->tid);
   2f496:	f8d4 083c 	ldr.w	r0, [r4, #2108]	; 0x83c
	z_impl_k_thread_suspend(thread);
   2f49a:	f008 fb21 	bl	37ae0 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   2f49e:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   2f4a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2f4a6:	d2a5      	bcs.n	2f3f4 <download_thread+0xc>
		if (sizeof(dl->buf) - dl->offset == 0) {
   2f4a8:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
   2f4ac:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2f4b0:	d0ad      	beq.n	2f40e <download_thread+0x26>
		len = recv(dl->fd, dl->buf + dl->offset,
   2f4b2:	4621      	mov	r1, r4
   2f4b4:	f851 0b04 	ldr.w	r0, [r1], #4
   2f4b8:	4411      	add	r1, r2
   2f4ba:	f5c2 6200 	rsb	r2, r2, #2048	; 0x800
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2f4be:	2300      	movs	r3, #0
   2f4c0:	9301      	str	r3, [sp, #4]
   2f4c2:	9300      	str	r3, [sp, #0]
   2f4c4:	f00c ff4d 	bl	3c362 <z_impl_zsock_recvfrom>
   2f4c8:	4606      	mov	r6, r0
		if ((len == 0) || (len == -1)) {
   2f4ca:	1e43      	subs	r3, r0, #1
   2f4cc:	f113 0f03 	cmn.w	r3, #3
   2f4d0:	d964      	bls.n	2f59c <download_thread+0x1b4>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   2f4d2:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   2f4d6:	2b00      	cmp	r3, #0
   2f4d8:	d0af      	beq.n	2f43a <download_thread+0x52>
   2f4da:	f894 382c 	ldrb.w	r3, [r4, #2092]	; 0x82c
   2f4de:	2b00      	cmp	r3, #0
   2f4e0:	d0ab      	beq.n	2f43a <download_thread+0x52>
				rc = fragment_evt_send(dl);
   2f4e2:	4620      	mov	r0, r4
   2f4e4:	f7ff fb12 	bl	2eb0c <fragment_evt_send>
				if (rc) {
   2f4e8:	4605      	mov	r5, r0
   2f4ea:	2800      	cmp	r0, #0
   2f4ec:	d0a5      	beq.n	2f43a <download_thread+0x52>
   2f4ee:	4b74      	ldr	r3, [pc, #464]	; (2f6c0 <download_thread+0x2d8>)
   2f4f0:	4a74      	ldr	r2, [pc, #464]	; (2f6c4 <download_thread+0x2dc>)
   2f4f2:	1a9b      	subs	r3, r3, r2
   2f4f4:	08db      	lsrs	r3, r3, #3
					LOG_INF("Fragment refused, download stopped.");
   2f4f6:	2203      	movs	r2, #3
   2f4f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2f4fc:	f362 0102 	bfi	r1, r2, #0, #3
   2f500:	460a      	mov	r2, r1
   2f502:	f36f 02c5 	bfc	r2, #3, #3
   2f506:	f363 128f 	bfi	r2, r3, #6, #10
   2f50a:	4610      	mov	r0, r2
   2f50c:	f8ad 200c 	strh.w	r2, [sp, #12]
   2f510:	496e      	ldr	r1, [pc, #440]	; (2f6cc <download_thread+0x2e4>)
   2f512:	f00c fd99 	bl	3c048 <log_string_sync>
   2f516:	e7be      	b.n	2f496 <download_thread+0xae>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   2f518:	f00d f9ae 	bl	3c878 <__errno>
   2f51c:	6803      	ldr	r3, [r0, #0]
   2f51e:	2b74      	cmp	r3, #116	; 0x74
   2f520:	d11b      	bne.n	2f55a <download_thread+0x172>
					if (dl->proto == IPPROTO_UDP ||
   2f522:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   2f526:	2b11      	cmp	r3, #17
   2f528:	d09b      	beq.n	2f462 <download_thread+0x7a>
   2f52a:	f240 1211 	movw	r2, #273	; 0x111
   2f52e:	4293      	cmp	r3, r2
   2f530:	d097      	beq.n	2f462 <download_thread+0x7a>
					error_cause = ETIMEDOUT;
   2f532:	2574      	movs	r5, #116	; 0x74
   2f534:	4b62      	ldr	r3, [pc, #392]	; (2f6c0 <download_thread+0x2d8>)
   2f536:	4a63      	ldr	r2, [pc, #396]	; (2f6c4 <download_thread+0x2dc>)
   2f538:	1a9b      	subs	r3, r3, r2
   2f53a:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Error in recv(), errno %d", errno);
   2f53c:	2201      	movs	r2, #1
   2f53e:	f362 0702 	bfi	r7, r2, #0, #3
   2f542:	f36f 07c5 	bfc	r7, #3, #3
   2f546:	f363 178f 	bfi	r7, r3, #6, #10
   2f54a:	f00d f995 	bl	3c878 <__errno>
   2f54e:	6802      	ldr	r2, [r0, #0]
   2f550:	495f      	ldr	r1, [pc, #380]	; (2f6d0 <download_thread+0x2e8>)
   2f552:	4638      	mov	r0, r7
   2f554:	f00c fd78 	bl	3c048 <log_string_sync>
   2f558:	e773      	b.n	2f442 <download_thread+0x5a>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   2f55a:	f00d f98d 	bl	3c878 <__errno>
   2f55e:	6803      	ldr	r3, [r0, #0]
   2f560:	2b0b      	cmp	r3, #11
   2f562:	d0de      	beq.n	2f522 <download_thread+0x13a>
				    (errno == EAGAIN)) {
   2f564:	f00d f988 	bl	3c878 <__errno>
   2f568:	6803      	ldr	r3, [r0, #0]
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   2f56a:	2b0b      	cmp	r3, #11
   2f56c:	d0d9      	beq.n	2f522 <download_thread+0x13a>
			error_cause = ECONNRESET;
   2f56e:	2568      	movs	r5, #104	; 0x68
   2f570:	e7e0      	b.n	2f534 <download_thread+0x14c>
   2f572:	4b53      	ldr	r3, [pc, #332]	; (2f6c0 <download_thread+0x2d8>)
   2f574:	4a53      	ldr	r2, [pc, #332]	; (2f6c4 <download_thread+0x2dc>)
   2f576:	1a9b      	subs	r3, r3, r2
   2f578:	08db      	lsrs	r3, r3, #3
				LOG_WRN("Peer closed connection!");
   2f57a:	2202      	movs	r2, #2
   2f57c:	f362 0802 	bfi	r8, r2, #0, #3
   2f580:	f36f 08c5 	bfc	r8, #3, #3
   2f584:	f363 188f 	bfi	r8, r3, #6, #10
   2f588:	4952      	ldr	r1, [pc, #328]	; (2f6d4 <download_thread+0x2ec>)
   2f58a:	4640      	mov	r0, r8
   2f58c:	f00c fd5c 	bl	3c048 <log_string_sync>
   2f590:	e75a      	b.n	2f448 <download_thread+0x60>
				error_evt_send(dl, EHOSTDOWN);
   2f592:	2175      	movs	r1, #117	; 0x75
   2f594:	4620      	mov	r0, r4
   2f596:	f7ff fae1 	bl	2eb5c <error_evt_send>
				break;
   2f59a:	e77c      	b.n	2f496 <download_thread+0xae>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   2f59c:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   2f5a0:	2b06      	cmp	r3, #6
   2f5a2:	d002      	beq.n	2f5aa <download_thread+0x1c2>
   2f5a4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   2f5a8:	d106      	bne.n	2f5b8 <download_thread+0x1d0>
			rc = http_parse(client, len);
   2f5aa:	4631      	mov	r1, r6
   2f5ac:	4620      	mov	r0, r4
   2f5ae:	f00f f928 	bl	3e802 <http_parse>
			if (rc > 0) {
   2f5b2:	1e05      	subs	r5, r0, #0
   2f5b4:	f73f af73 	bgt.w	2f49e <download_thread+0xb6>
		if (rc < 0) {
   2f5b8:	2d00      	cmp	r5, #0
   2f5ba:	db30      	blt.n	2f61e <download_thread+0x236>
		if (dl->file_size) {
   2f5bc:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   2f5c0:	b393      	cbz	r3, 2f628 <download_thread+0x240>
   2f5c2:	4a3f      	ldr	r2, [pc, #252]	; (2f6c0 <download_thread+0x2d8>)
   2f5c4:	493f      	ldr	r1, [pc, #252]	; (2f6c4 <download_thread+0x2dc>)
   2f5c6:	1a52      	subs	r2, r2, r1
   2f5c8:	08d2      	lsrs	r2, r2, #3
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   2f5ca:	2103      	movs	r1, #3
   2f5cc:	f361 0902 	bfi	r9, r1, #0, #3
   2f5d0:	f36f 09c5 	bfc	r9, #3, #3
   2f5d4:	f362 198f 	bfi	r9, r2, #6, #10
   2f5d8:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   2f5dc:	2164      	movs	r1, #100	; 0x64
   2f5de:	fb01 f102 	mul.w	r1, r1, r2
   2f5e2:	fbb1 f1f3 	udiv	r1, r1, r3
   2f5e6:	9100      	str	r1, [sp, #0]
   2f5e8:	493b      	ldr	r1, [pc, #236]	; (2f6d8 <download_thread+0x2f0>)
   2f5ea:	4648      	mov	r0, r9
   2f5ec:	f00c fd2c 	bl	3c048 <log_string_sync>
		rc = fragment_evt_send(dl);
   2f5f0:	4620      	mov	r0, r4
   2f5f2:	f7ff fa8b 	bl	2eb0c <fragment_evt_send>
		if (rc) {
   2f5f6:	4605      	mov	r5, r0
   2f5f8:	bb40      	cbnz	r0, 2f64c <download_thread+0x264>
		if (dl->progress == dl->file_size) {
   2f5fa:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   2f5fe:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   2f602:	429a      	cmp	r2, r3
   2f604:	d037      	beq.n	2f676 <download_thread+0x28e>
		if (dl->http.connection_close) {
   2f606:	f894 382d 	ldrb.w	r3, [r4, #2093]	; 0x82d
   2f60a:	2b00      	cmp	r3, #0
   2f60c:	f43f af29 	beq.w	2f462 <download_thread+0x7a>
			dl->http.connection_close = false;
   2f610:	2300      	movs	r3, #0
   2f612:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
			reconnect(dl);
   2f616:	4620      	mov	r0, r4
   2f618:	f7ff fec0 	bl	2f39c <reconnect>
   2f61c:	e721      	b.n	2f462 <download_thread+0x7a>
			error_evt_send(dl, EBADMSG);
   2f61e:	214d      	movs	r1, #77	; 0x4d
   2f620:	4620      	mov	r0, r4
   2f622:	f7ff fa9b 	bl	2eb5c <error_evt_send>
			break;
   2f626:	e736      	b.n	2f496 <download_thread+0xae>
   2f628:	4b25      	ldr	r3, [pc, #148]	; (2f6c0 <download_thread+0x2d8>)
   2f62a:	4a26      	ldr	r2, [pc, #152]	; (2f6c4 <download_thread+0x2dc>)
   2f62c:	1a9b      	subs	r3, r3, r2
   2f62e:	08db      	lsrs	r3, r3, #3
			LOG_INF("Downloaded %u bytes", dl->progress);
   2f630:	2203      	movs	r2, #3
   2f632:	f362 0a02 	bfi	sl, r2, #0, #3
   2f636:	f36f 0ac5 	bfc	sl, #3, #3
   2f63a:	f363 1a8f 	bfi	sl, r3, #6, #10
   2f63e:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   2f642:	4926      	ldr	r1, [pc, #152]	; (2f6dc <download_thread+0x2f4>)
   2f644:	4650      	mov	r0, sl
   2f646:	f00c fcff 	bl	3c048 <log_string_sync>
   2f64a:	e7d1      	b.n	2f5f0 <download_thread+0x208>
   2f64c:	4b1c      	ldr	r3, [pc, #112]	; (2f6c0 <download_thread+0x2d8>)
   2f64e:	4a1d      	ldr	r2, [pc, #116]	; (2f6c4 <download_thread+0x2dc>)
   2f650:	1a9b      	subs	r3, r3, r2
   2f652:	08db      	lsrs	r3, r3, #3
			LOG_INF("Fragment refused, download stopped.");
   2f654:	2203      	movs	r2, #3
   2f656:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2f65a:	f362 0102 	bfi	r1, r2, #0, #3
   2f65e:	460a      	mov	r2, r1
   2f660:	f36f 02c5 	bfc	r2, #3, #3
   2f664:	f363 128f 	bfi	r2, r3, #6, #10
   2f668:	4610      	mov	r0, r2
   2f66a:	f8ad 2010 	strh.w	r2, [sp, #16]
   2f66e:	4917      	ldr	r1, [pc, #92]	; (2f6cc <download_thread+0x2e4>)
   2f670:	f00c fcea 	bl	3c048 <log_string_sync>
   2f674:	e70f      	b.n	2f496 <download_thread+0xae>
   2f676:	4b12      	ldr	r3, [pc, #72]	; (2f6c0 <download_thread+0x2d8>)
   2f678:	4a12      	ldr	r2, [pc, #72]	; (2f6c4 <download_thread+0x2dc>)
   2f67a:	1a9b      	subs	r3, r3, r2
   2f67c:	08db      	lsrs	r3, r3, #3
			LOG_INF("Download complete");
   2f67e:	2203      	movs	r2, #3
   2f680:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   2f684:	f362 0102 	bfi	r1, r2, #0, #3
   2f688:	460a      	mov	r2, r1
   2f68a:	f36f 02c5 	bfc	r2, #3, #3
   2f68e:	f363 128f 	bfi	r2, r3, #6, #10
   2f692:	4610      	mov	r0, r2
   2f694:	f8ad 2014 	strh.w	r2, [sp, #20]
   2f698:	4911      	ldr	r1, [pc, #68]	; (2f6e0 <download_thread+0x2f8>)
   2f69a:	f00c fcd5 	bl	3c048 <log_string_sync>
			const struct download_client_evt evt = {
   2f69e:	2300      	movs	r3, #0
   2f6a0:	9307      	str	r3, [sp, #28]
   2f6a2:	9308      	str	r3, [sp, #32]
   2f6a4:	9309      	str	r3, [sp, #36]	; 0x24
   2f6a6:	2302      	movs	r3, #2
   2f6a8:	f88d 301c 	strb.w	r3, [sp, #28]
			dl->callback(&evt);
   2f6ac:	f504 53c6 	add.w	r3, r4, #6336	; 0x18c0
   2f6b0:	681b      	ldr	r3, [r3, #0]
   2f6b2:	a807      	add	r0, sp, #28
   2f6b4:	4798      	blx	r3
			break;
   2f6b6:	e6ee      	b.n	2f496 <download_thread+0xae>
   2f6b8:	000447fc 	.word	0x000447fc
   2f6bc:	00041c84 	.word	0x00041c84
   2f6c0:	00041270 	.word	0x00041270
   2f6c4:	00041200 	.word	0x00041200
   2f6c8:	00044b00 	.word	0x00044b00
   2f6cc:	00044b30 	.word	0x00044b30
   2f6d0:	00044b54 	.word	0x00044b54
   2f6d4:	00044b70 	.word	0x00044b70
   2f6d8:	00044b88 	.word	0x00044b88
   2f6dc:	00044ba8 	.word	0x00044ba8
   2f6e0:	00044bbc 	.word	0x00044bbc

0002f6e4 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   2f6e4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   2f6e6:	b388      	cbz	r0, 2f74c <download_client_start+0x68>
   2f6e8:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (client->fd < 0) {
   2f6ea:	6803      	ldr	r3, [r0, #0]
   2f6ec:	2b00      	cmp	r3, #0
   2f6ee:	db30      	blt.n	2f752 <download_client_start+0x6e>
		return -ENOTCONN;
	}

	client->file = file;
   2f6f0:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   2f6f4:	2300      	movs	r3, #0
   2f6f6:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   2f6fa:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   2f6fe:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   2f702:	f880 382c 	strb.w	r3, [r0, #2092]	; 0x82c
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   2f706:	f00f f834 	bl	3e772 <request_send>
	if (err) {
   2f70a:	4606      	mov	r6, r0
   2f70c:	b108      	cbz	r0, 2f712 <download_client_start+0x2e>

	/* Let the thread run */
	k_thread_resume(client->tid);

	return 0;
}
   2f70e:	4630      	mov	r0, r6
   2f710:	bd70      	pop	{r4, r5, r6, pc}
   2f712:	4b11      	ldr	r3, [pc, #68]	; (2f758 <download_client_start+0x74>)
   2f714:	4a11      	ldr	r2, [pc, #68]	; (2f75c <download_client_start+0x78>)
   2f716:	1a9b      	subs	r3, r3, r2
   2f718:	08db      	lsrs	r3, r3, #3
	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   2f71a:	f04f 0500 	mov.w	r5, #0
   2f71e:	2203      	movs	r2, #3
   2f720:	f362 0502 	bfi	r5, r2, #0, #3
   2f724:	f36f 05c5 	bfc	r5, #3, #3
   2f728:	f363 158f 	bfi	r5, r3, #6, #10
   2f72c:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   2f730:	f00c fc9e 	bl	3c070 <z_log_strdup>
   2f734:	4602      	mov	r2, r0
   2f736:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   2f73a:	4909      	ldr	r1, [pc, #36]	; (2f760 <download_client_start+0x7c>)
   2f73c:	4628      	mov	r0, r5
   2f73e:	f00c fc83 	bl	3c048 <log_string_sync>
	k_thread_resume(client->tid);
   2f742:	f8d4 083c 	ldr.w	r0, [r4, #2108]	; 0x83c
	z_impl_k_thread_resume(thread);
   2f746:	f007 ffbf 	bl	376c8 <z_impl_k_thread_resume>
	return 0;
   2f74a:	e7e0      	b.n	2f70e <download_client_start+0x2a>
		return -EINVAL;
   2f74c:	f06f 0615 	mvn.w	r6, #21
   2f750:	e7dd      	b.n	2f70e <download_client_start+0x2a>
		return -ENOTCONN;
   2f752:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   2f756:	e7da      	b.n	2f70e <download_client_start+0x2a>
   2f758:	00041270 	.word	0x00041270
   2f75c:	00041200 	.word	0x00041200
   2f760:	00044bd0 	.word	0x00044bd0

0002f764 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   2f764:	b570      	push	{r4, r5, r6, lr}
   2f766:	4606      	mov	r6, r0
   2f768:	460d      	mov	r5, r1
   2f76a:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   2f76c:	2205      	movs	r2, #5
   2f76e:	4917      	ldr	r1, [pc, #92]	; (2f7cc <url_parse_proto+0x68>)
   2f770:	f010 fd7d 	bl	4026e <strncmp>
   2f774:	b928      	cbnz	r0, 2f782 <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   2f776:	f44f 7381 	mov.w	r3, #258	; 0x102
   2f77a:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   2f77c:	2301      	movs	r3, #1
   2f77e:	6023      	str	r3, [r4, #0]
		*type = SOCK_DGRAM;
	} else {
		return -EINVAL;
	}
	return 0;
}
   2f780:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   2f782:	2204      	movs	r2, #4
   2f784:	4912      	ldr	r1, [pc, #72]	; (2f7d0 <url_parse_proto+0x6c>)
   2f786:	4630      	mov	r0, r6
   2f788:	f010 fd71 	bl	4026e <strncmp>
   2f78c:	b920      	cbnz	r0, 2f798 <url_parse_proto+0x34>
		*proto = IPPROTO_TCP;
   2f78e:	2306      	movs	r3, #6
   2f790:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   2f792:	2301      	movs	r3, #1
   2f794:	6023      	str	r3, [r4, #0]
   2f796:	e7f3      	b.n	2f780 <url_parse_proto+0x1c>
	} else if (strncmp(url, "coaps", 5) == 0) {
   2f798:	2205      	movs	r2, #5
   2f79a:	490e      	ldr	r1, [pc, #56]	; (2f7d4 <url_parse_proto+0x70>)
   2f79c:	4630      	mov	r0, r6
   2f79e:	f010 fd66 	bl	4026e <strncmp>
   2f7a2:	b928      	cbnz	r0, 2f7b0 <url_parse_proto+0x4c>
		*proto = IPPROTO_DTLS_1_2;
   2f7a4:	f240 1311 	movw	r3, #273	; 0x111
   2f7a8:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   2f7aa:	2302      	movs	r3, #2
   2f7ac:	6023      	str	r3, [r4, #0]
   2f7ae:	e7e7      	b.n	2f780 <url_parse_proto+0x1c>
	} else if (strncmp(url, "coap", 4) == 0) {
   2f7b0:	2204      	movs	r2, #4
   2f7b2:	4909      	ldr	r1, [pc, #36]	; (2f7d8 <url_parse_proto+0x74>)
   2f7b4:	4630      	mov	r0, r6
   2f7b6:	f010 fd5a 	bl	4026e <strncmp>
   2f7ba:	b920      	cbnz	r0, 2f7c6 <url_parse_proto+0x62>
		*proto = IPPROTO_UDP;
   2f7bc:	2311      	movs	r3, #17
   2f7be:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   2f7c0:	2302      	movs	r3, #2
   2f7c2:	6023      	str	r3, [r4, #0]
   2f7c4:	e7dc      	b.n	2f780 <url_parse_proto+0x1c>
		return -EINVAL;
   2f7c6:	f06f 0015 	mvn.w	r0, #21
   2f7ca:	e7d9      	b.n	2f780 <url_parse_proto+0x1c>
   2f7cc:	00044be8 	.word	0x00044be8
   2f7d0:	00044bf0 	.word	0x00044bf0
   2f7d4:	00044bf8 	.word	0x00044bf8
   2f7d8:	00044c00 	.word	0x00044c00

0002f7dc <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   2f7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f7de:	b083      	sub	sp, #12
   2f7e0:	4606      	mov	r6, r0
   2f7e2:	460d      	mov	r5, r1
   2f7e4:	4617      	mov	r7, r2
	const char *cur;
	const char *end;

	cur = url;
   2f7e6:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   2f7e8:	4919      	ldr	r1, [pc, #100]	; (2f850 <url_parse_host+0x74>)
   2f7ea:	a801      	add	r0, sp, #4
   2f7ec:	f00e fff8 	bl	3e7e0 <swallow>

	if (cur[0] == '[') {
   2f7f0:	9801      	ldr	r0, [sp, #4]
   2f7f2:	7803      	ldrb	r3, [r0, #0]
   2f7f4:	2b5b      	cmp	r3, #91	; 0x5b
   2f7f6:	d011      	beq.n	2f81c <url_parse_host+0x40>
		if (!end) {
			return -EINVAL;
		}
		++end;
	} else {
		end = strchr(cur, ':');
   2f7f8:	213a      	movs	r1, #58	; 0x3a
   2f7fa:	f010 fd23 	bl	40244 <strchr>
		if (!end) {
   2f7fe:	4604      	mov	r4, r0
   2f800:	b198      	cbz	r0, 2f82a <url_parse_host+0x4e>
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   2f802:	9901      	ldr	r1, [sp, #4]
   2f804:	1a64      	subs	r4, r4, r1
   2f806:	1c63      	adds	r3, r4, #1
   2f808:	42bb      	cmp	r3, r7
   2f80a:	d81e      	bhi.n	2f84a <url_parse_host+0x6e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f80c:	4622      	mov	r2, r4
   2f80e:	4628      	mov	r0, r5
   2f810:	f010 fb76 	bl	3ff00 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   2f814:	2000      	movs	r0, #0
   2f816:	5528      	strb	r0, [r5, r4]

	return 0;
}
   2f818:	b003      	add	sp, #12
   2f81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		end = strchr(cur, ']');
   2f81c:	215d      	movs	r1, #93	; 0x5d
   2f81e:	f010 fd11 	bl	40244 <strchr>
		if (!end) {
   2f822:	4604      	mov	r4, r0
   2f824:	b170      	cbz	r0, 2f844 <url_parse_host+0x68>
		++end;
   2f826:	3401      	adds	r4, #1
   2f828:	e7eb      	b.n	2f802 <url_parse_host+0x26>
			end = strchr(cur, '/');
   2f82a:	212f      	movs	r1, #47	; 0x2f
   2f82c:	9801      	ldr	r0, [sp, #4]
   2f82e:	f010 fd09 	bl	40244 <strchr>
			if (!end) {
   2f832:	4604      	mov	r4, r0
   2f834:	2800      	cmp	r0, #0
   2f836:	d1e4      	bne.n	2f802 <url_parse_host+0x26>
				end = url + strlen(url) + 1;
   2f838:	4630      	mov	r0, r6
   2f83a:	f7f1 fe7f 	bl	2153c <strlen>
   2f83e:	1c44      	adds	r4, r0, #1
   2f840:	4434      	add	r4, r6
   2f842:	e7de      	b.n	2f802 <url_parse_host+0x26>
			return -EINVAL;
   2f844:	f06f 0015 	mvn.w	r0, #21
   2f848:	e7e6      	b.n	2f818 <url_parse_host+0x3c>
		return -E2BIG;
   2f84a:	f06f 0006 	mvn.w	r0, #6
   2f84e:	e7e3      	b.n	2f818 <url_parse_host+0x3c>
   2f850:	00044c08 	.word	0x00044c08

0002f854 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   2f854:	b570      	push	{r4, r5, r6, lr}
   2f856:	b084      	sub	sp, #16
   2f858:	460d      	mov	r5, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   2f85a:	9003      	str	r0, [sp, #12]

	(void)swallow(&cur, "://");
   2f85c:	491b      	ldr	r1, [pc, #108]	; (2f8cc <url_parse_port+0x78>)
   2f85e:	a803      	add	r0, sp, #12
   2f860:	f00e ffbe 	bl	3e7e0 <swallow>

	if (cur[0] == '[') {
   2f864:	9b03      	ldr	r3, [sp, #12]
   2f866:	781b      	ldrb	r3, [r3, #0]
   2f868:	2b5b      	cmp	r3, #91	; 0x5b
   2f86a:	d022      	beq.n	2f8b2 <url_parse_port+0x5e>
		/* literal IPv6 address */
		swallow(&cur, "]");
	}

	err = swallow(&cur, ":");
   2f86c:	4918      	ldr	r1, [pc, #96]	; (2f8d0 <url_parse_port+0x7c>)
   2f86e:	a803      	add	r0, sp, #12
   2f870:	f00e ffb6 	bl	3e7e0 <swallow>
	if (err) {
   2f874:	4606      	mov	r6, r0
   2f876:	bb30      	cbnz	r0, 2f8c6 <url_parse_port+0x72>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   2f878:	212f      	movs	r1, #47	; 0x2f
   2f87a:	9803      	ldr	r0, [sp, #12]
   2f87c:	f010 fce2 	bl	40244 <strchr>
	if (!end) {
   2f880:	4604      	mov	r4, r0
   2f882:	b1d8      	cbz	r0, 2f8bc <url_parse_port+0x68>
		len = strlen(cur);
	} else {
		len = end - cur;
   2f884:	9803      	ldr	r0, [sp, #12]
   2f886:	1a24      	subs	r4, r4, r0
	}

	len = MIN(len, sizeof(aport) - 1);
   2f888:	2c07      	cmp	r4, #7
   2f88a:	bf28      	it	cs
   2f88c:	2407      	movcs	r4, #7

	memcpy(aport, cur, len);
   2f88e:	2308      	movs	r3, #8
   2f890:	4622      	mov	r2, r4
   2f892:	9903      	ldr	r1, [sp, #12]
   2f894:	a801      	add	r0, sp, #4
   2f896:	f010 fb40 	bl	3ff1a <__memcpy_chk>
	aport[len] = '\0';
   2f89a:	ab04      	add	r3, sp, #16
   2f89c:	441c      	add	r4, r3
   2f89e:	2300      	movs	r3, #0
   2f8a0:	f804 3c0c 	strb.w	r3, [r4, #-12]

	*port = atoi(aport);
   2f8a4:	a801      	add	r0, sp, #4
   2f8a6:	f010 fb0b 	bl	3fec0 <atoi>
   2f8aa:	8028      	strh	r0, [r5, #0]

	return 0;
}
   2f8ac:	4630      	mov	r0, r6
   2f8ae:	b004      	add	sp, #16
   2f8b0:	bd70      	pop	{r4, r5, r6, pc}
		swallow(&cur, "]");
   2f8b2:	4908      	ldr	r1, [pc, #32]	; (2f8d4 <url_parse_port+0x80>)
   2f8b4:	a803      	add	r0, sp, #12
   2f8b6:	f00e ff93 	bl	3e7e0 <swallow>
   2f8ba:	e7d7      	b.n	2f86c <url_parse_port+0x18>
		len = strlen(cur);
   2f8bc:	9803      	ldr	r0, [sp, #12]
   2f8be:	f7f1 fe3d 	bl	2153c <strlen>
   2f8c2:	4604      	mov	r4, r0
   2f8c4:	e7e0      	b.n	2f888 <url_parse_port+0x34>
		return -EINVAL;
   2f8c6:	f06f 0615 	mvn.w	r6, #21
   2f8ca:	e7ef      	b.n	2f8ac <url_parse_port+0x58>
   2f8cc:	00044c08 	.word	0x00044c08
   2f8d0:	00041e2c 	.word	0x00041e2c
   2f8d4:	00044c0c 	.word	0x00044c0c

0002f8d8 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   2f8d8:	b530      	push	{r4, r5, lr}
   2f8da:	b083      	sub	sp, #12
   2f8dc:	460c      	mov	r4, r1
   2f8de:	4615      	mov	r5, r2
	int err;
	const char *cur;

	cur = url;
   2f8e0:	9001      	str	r0, [sp, #4]

	if (strstr(url, "//")) {
   2f8e2:	4915      	ldr	r1, [pc, #84]	; (2f938 <url_parse_file+0x60>)
   2f8e4:	f010 fd09 	bl	402fa <strstr>
   2f8e8:	b148      	cbz	r0, 2f8fe <url_parse_file+0x26>
		err = swallow(&cur, "://");
   2f8ea:	4914      	ldr	r1, [pc, #80]	; (2f93c <url_parse_file+0x64>)
   2f8ec:	a801      	add	r0, sp, #4
   2f8ee:	f00e ff77 	bl	3e7e0 <swallow>
		if (err) {
   2f8f2:	b9b8      	cbnz	r0, 2f924 <url_parse_file+0x4c>
			return -EINVAL;
		}
		err = swallow(&cur, "/");
   2f8f4:	4912      	ldr	r1, [pc, #72]	; (2f940 <url_parse_file+0x68>)
   2f8f6:	a801      	add	r0, sp, #4
   2f8f8:	f00e ff72 	bl	3e7e0 <swallow>
		if (err) {
   2f8fc:	b9a8      	cbnz	r0, 2f92a <url_parse_file+0x52>
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   2f8fe:	9801      	ldr	r0, [sp, #4]
   2f900:	f7f1 fe1c 	bl	2153c <strlen>
   2f904:	3001      	adds	r0, #1
   2f906:	42a8      	cmp	r0, r5
   2f908:	d812      	bhi.n	2f930 <url_parse_file+0x58>
		return -E2BIG;
	}

	len = strlen(cur);
   2f90a:	9801      	ldr	r0, [sp, #4]
   2f90c:	f7f1 fe16 	bl	2153c <strlen>
   2f910:	4605      	mov	r5, r0
   2f912:	4602      	mov	r2, r0
   2f914:	9901      	ldr	r1, [sp, #4]
   2f916:	4620      	mov	r0, r4
   2f918:	f010 faf2 	bl	3ff00 <memcpy>

	memcpy(file, cur, len);
	file[len] = '\0';
   2f91c:	2000      	movs	r0, #0
   2f91e:	5560      	strb	r0, [r4, r5]

	return 0;
}
   2f920:	b003      	add	sp, #12
   2f922:	bd30      	pop	{r4, r5, pc}
			return -EINVAL;
   2f924:	f06f 0015 	mvn.w	r0, #21
   2f928:	e7fa      	b.n	2f920 <url_parse_file+0x48>
			return -EINVAL;
   2f92a:	f06f 0015 	mvn.w	r0, #21
   2f92e:	e7f7      	b.n	2f920 <url_parse_file+0x48>
		return -E2BIG;
   2f930:	f06f 0006 	mvn.w	r0, #6
   2f934:	e7f4      	b.n	2f920 <url_parse_file+0x48>
   2f936:	bf00      	nop
   2f938:	00044c10 	.word	0x00044c10
   2f93c:	00044c08 	.word	0x00044c08
   2f940:	00044c14 	.word	0x00044c14

0002f944 <http_header_parse>:
 *  1 while the header is being received
 *  0 if the header has been fully received
 * -1 on error
 */
static int http_header_parse(struct download_client *client, size_t *hdr_len)
{
   2f944:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f946:	b083      	sub	sp, #12
   2f948:	4605      	mov	r5, r0
   2f94a:	460e      	mov	r6, r1
		 IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS) ||
		 client->progress);

	const unsigned int expected_status = using_range_requests ? 206 : 200;

	p = strstr(client->buf, "\r\n\r\n");
   2f94c:	1d07      	adds	r7, r0, #4
   2f94e:	496d      	ldr	r1, [pc, #436]	; (2fb04 <http_header_parse+0x1c0>)
   2f950:	4638      	mov	r0, r7
   2f952:	f010 fcd2 	bl	402fa <strstr>
	if (!p || p > client->buf + client->offset) {
   2f956:	2800      	cmp	r0, #0
   2f958:	f000 80d2 	beq.w	2fb00 <http_header_parse+0x1bc>
   2f95c:	4604      	mov	r4, r0
   2f95e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   2f962:	443b      	add	r3, r7
   2f964:	4283      	cmp	r3, r0
   2f966:	d202      	bcs.n	2f96e <http_header_parse+0x2a>
		/* Waiting full HTTP header */
		LOG_DBG("Waiting full header in response");
		return 1;
   2f968:	2001      	movs	r0, #1
	}

	client->http.has_header = true;

	return 0;
}
   2f96a:	b003      	add	sp, #12
   2f96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   2f96e:	4865      	ldr	r0, [pc, #404]	; (2fb04 <http_header_parse+0x1c0>)
   2f970:	f7f1 fde4 	bl	2153c <strlen>
   2f974:	4404      	add	r4, r0
   2f976:	1be4      	subs	r4, r4, r7
   2f978:	6034      	str	r4, [r6, #0]
	for (size_t i = 0; i < *hdr_len; i++) {
   2f97a:	2300      	movs	r3, #0
   2f97c:	e002      	b.n	2f984 <http_header_parse+0x40>
		client->buf[i] = tolower(client->buf[i]);
   2f97e:	18e9      	adds	r1, r5, r3
   2f980:	710a      	strb	r2, [r1, #4]
	for (size_t i = 0; i < *hdr_len; i++) {
   2f982:	3301      	adds	r3, #1
   2f984:	6832      	ldr	r2, [r6, #0]
   2f986:	429a      	cmp	r2, r3
   2f988:	d909      	bls.n	2f99e <http_header_parse+0x5a>
		client->buf[i] = tolower(client->buf[i]);
   2f98a:	18ea      	adds	r2, r5, r3
   2f98c:	7912      	ldrb	r2, [r2, #4]
   2f98e:	495e      	ldr	r1, [pc, #376]	; (2fb08 <http_header_parse+0x1c4>)
   2f990:	5c54      	ldrb	r4, [r2, r1]
   2f992:	f004 0403 	and.w	r4, r4, #3
   2f996:	2c01      	cmp	r4, #1
   2f998:	d1f1      	bne.n	2f97e <http_header_parse+0x3a>
   2f99a:	3220      	adds	r2, #32
   2f99c:	e7ef      	b.n	2f97e <http_header_parse+0x3a>
	p = strstr(client->buf, "http/1.1 ");
   2f99e:	495b      	ldr	r1, [pc, #364]	; (2fb0c <http_header_parse+0x1c8>)
   2f9a0:	4638      	mov	r0, r7
   2f9a2:	f010 fcaa 	bl	402fa <strstr>
	if (!p) {
   2f9a6:	4604      	mov	r4, r0
   2f9a8:	2800      	cmp	r0, #0
   2f9aa:	d040      	beq.n	2fa2e <http_header_parse+0xea>
	p += strlen("http/1.1 ");
   2f9ac:	4857      	ldr	r0, [pc, #348]	; (2fb0c <http_header_parse+0x1c8>)
   2f9ae:	f7f1 fdc5 	bl	2153c <strlen>
   2f9b2:	4404      	add	r4, r0
	http_status = strtoul(p, &q, 10);
   2f9b4:	220a      	movs	r2, #10
   2f9b6:	a901      	add	r1, sp, #4
   2f9b8:	4620      	mov	r0, r4
   2f9ba:	f00a fed3 	bl	3a764 <strtoul>
	if (!q) {
   2f9be:	9b01      	ldr	r3, [sp, #4]
   2f9c0:	2b00      	cmp	r3, #0
   2f9c2:	d045      	beq.n	2fa50 <http_header_parse+0x10c>
	if (http_status != expected_status) {
   2f9c4:	28ce      	cmp	r0, #206	; 0xce
   2f9c6:	d158      	bne.n	2fa7a <http_header_parse+0x136>
	if (client->file_size == 0) {
   2f9c8:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2f9cc:	b993      	cbnz	r3, 2f9f4 <http_header_parse+0xb0>
			p = strstr(client->buf, "content-range");
   2f9ce:	4950      	ldr	r1, [pc, #320]	; (2fb10 <http_header_parse+0x1cc>)
   2f9d0:	4638      	mov	r0, r7
   2f9d2:	f010 fc92 	bl	402fa <strstr>
			if (!p) {
   2f9d6:	2800      	cmp	r0, #0
   2f9d8:	d070      	beq.n	2fabc <http_header_parse+0x178>
			p = strstr(p, "/");
   2f9da:	494e      	ldr	r1, [pc, #312]	; (2fb14 <http_header_parse+0x1d0>)
   2f9dc:	f010 fc8d 	bl	402fa <strstr>
			if (!p) {
   2f9e0:	2800      	cmp	r0, #0
   2f9e2:	d07c      	beq.n	2fade <http_header_parse+0x19a>
		client->file_size += atoi(p + 1);
   2f9e4:	3001      	adds	r0, #1
   2f9e6:	f010 fa6b 	bl	3fec0 <atoi>
   2f9ea:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   2f9ee:	4403      	add	r3, r0
   2f9f0:	f8c5 3808 	str.w	r3, [r5, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   2f9f4:	4948      	ldr	r1, [pc, #288]	; (2fb18 <http_header_parse+0x1d4>)
   2f9f6:	4638      	mov	r0, r7
   2f9f8:	f010 fc7f 	bl	402fa <strstr>
	if (p) {
   2f9fc:	b190      	cbz	r0, 2fa24 <http_header_parse+0xe0>
   2f9fe:	4b47      	ldr	r3, [pc, #284]	; (2fb1c <http_header_parse+0x1d8>)
   2fa00:	4a47      	ldr	r2, [pc, #284]	; (2fb20 <http_header_parse+0x1dc>)
   2fa02:	1a9b      	subs	r3, r3, r2
   2fa04:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Peer closed connection, will re-connect");
   2fa06:	f04f 0000 	mov.w	r0, #0
   2fa0a:	2202      	movs	r2, #2
   2fa0c:	f362 0002 	bfi	r0, r2, #0, #3
   2fa10:	f36f 00c5 	bfc	r0, #3, #3
   2fa14:	f363 108f 	bfi	r0, r3, #6, #10
   2fa18:	4942      	ldr	r1, [pc, #264]	; (2fb24 <http_header_parse+0x1e0>)
   2fa1a:	f00c fb15 	bl	3c048 <log_string_sync>
		client->http.connection_close = true;
   2fa1e:	2301      	movs	r3, #1
   2fa20:	f885 382d 	strb.w	r3, [r5, #2093]	; 0x82d
	client->http.has_header = true;
   2fa24:	2301      	movs	r3, #1
   2fa26:	f885 382c 	strb.w	r3, [r5, #2092]	; 0x82c
	return 0;
   2fa2a:	2000      	movs	r0, #0
   2fa2c:	e79d      	b.n	2f96a <http_header_parse+0x26>
   2fa2e:	4b3b      	ldr	r3, [pc, #236]	; (2fb1c <http_header_parse+0x1d8>)
   2fa30:	4a3b      	ldr	r2, [pc, #236]	; (2fb20 <http_header_parse+0x1dc>)
   2fa32:	1a9b      	subs	r3, r3, r2
   2fa34:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Server response missing HTTP/1.1");
   2fa36:	2201      	movs	r2, #1
   2fa38:	f362 0002 	bfi	r0, r2, #0, #3
   2fa3c:	f36f 00c5 	bfc	r0, #3, #3
   2fa40:	f363 108f 	bfi	r0, r3, #6, #10
   2fa44:	4938      	ldr	r1, [pc, #224]	; (2fb28 <http_header_parse+0x1e4>)
   2fa46:	f00c faff 	bl	3c048 <log_string_sync>
		return -1;
   2fa4a:	f04f 30ff 	mov.w	r0, #4294967295
   2fa4e:	e78c      	b.n	2f96a <http_header_parse+0x26>
   2fa50:	4b32      	ldr	r3, [pc, #200]	; (2fb1c <http_header_parse+0x1d8>)
   2fa52:	4a33      	ldr	r2, [pc, #204]	; (2fb20 <http_header_parse+0x1dc>)
   2fa54:	1a9b      	subs	r3, r3, r2
   2fa56:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Server response malformed: status code not found");
   2fa58:	f04f 0000 	mov.w	r0, #0
   2fa5c:	2201      	movs	r2, #1
   2fa5e:	f362 0002 	bfi	r0, r2, #0, #3
   2fa62:	f36f 00c5 	bfc	r0, #3, #3
   2fa66:	f363 108f 	bfi	r0, r3, #6, #10
   2fa6a:	4930      	ldr	r1, [pc, #192]	; (2fb2c <http_header_parse+0x1e8>)
   2fa6c:	f00c faec 	bl	3c048 <log_string_sync>
		return -1;
   2fa70:	f04f 30ff 	mov.w	r0, #4294967295
   2fa74:	e779      	b.n	2f96a <http_header_parse+0x26>
			q++;
   2fa76:	3301      	adds	r3, #1
   2fa78:	9301      	str	r3, [sp, #4]
		while ((*q != '\0') && (*q != '\r') && (*q != '\n')) {
   2fa7a:	9b01      	ldr	r3, [sp, #4]
   2fa7c:	781a      	ldrb	r2, [r3, #0]
   2fa7e:	b11a      	cbz	r2, 2fa88 <http_header_parse+0x144>
   2fa80:	2a0d      	cmp	r2, #13
   2fa82:	d001      	beq.n	2fa88 <http_header_parse+0x144>
   2fa84:	2a0a      	cmp	r2, #10
   2fa86:	d1f6      	bne.n	2fa76 <http_header_parse+0x132>
		*q = '\0';
   2fa88:	2200      	movs	r2, #0
   2fa8a:	701a      	strb	r2, [r3, #0]
   2fa8c:	4b23      	ldr	r3, [pc, #140]	; (2fb1c <http_header_parse+0x1d8>)
   2fa8e:	4924      	ldr	r1, [pc, #144]	; (2fb20 <http_header_parse+0x1dc>)
   2fa90:	1a5b      	subs	r3, r3, r1
   2fa92:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unexpected HTTP response: %s", log_strdup(p));
   2fa94:	f04f 0500 	mov.w	r5, #0
   2fa98:	2101      	movs	r1, #1
   2fa9a:	f361 0502 	bfi	r5, r1, #0, #3
   2fa9e:	f362 05c5 	bfi	r5, r2, #3, #3
   2faa2:	f363 158f 	bfi	r5, r3, #6, #10
   2faa6:	4620      	mov	r0, r4
   2faa8:	f00c fae2 	bl	3c070 <z_log_strdup>
   2faac:	4602      	mov	r2, r0
   2faae:	4920      	ldr	r1, [pc, #128]	; (2fb30 <http_header_parse+0x1ec>)
   2fab0:	4628      	mov	r0, r5
   2fab2:	f00c fac9 	bl	3c048 <log_string_sync>
		return -1;
   2fab6:	f04f 30ff 	mov.w	r0, #4294967295
   2faba:	e756      	b.n	2f96a <http_header_parse+0x26>
   2fabc:	4b17      	ldr	r3, [pc, #92]	; (2fb1c <http_header_parse+0x1d8>)
   2fabe:	4a18      	ldr	r2, [pc, #96]	; (2fb20 <http_header_parse+0x1dc>)
   2fac0:	1a9b      	subs	r3, r3, r2
   2fac2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Server did not send "
   2fac4:	2201      	movs	r2, #1
   2fac6:	f362 0002 	bfi	r0, r2, #0, #3
   2faca:	f36f 00c5 	bfc	r0, #3, #3
   2face:	f363 108f 	bfi	r0, r3, #6, #10
   2fad2:	4918      	ldr	r1, [pc, #96]	; (2fb34 <http_header_parse+0x1f0>)
   2fad4:	f00c fab8 	bl	3c048 <log_string_sync>
				return -1;
   2fad8:	f04f 30ff 	mov.w	r0, #4294967295
   2fadc:	e745      	b.n	2f96a <http_header_parse+0x26>
   2fade:	4b0f      	ldr	r3, [pc, #60]	; (2fb1c <http_header_parse+0x1d8>)
   2fae0:	4a0f      	ldr	r2, [pc, #60]	; (2fb20 <http_header_parse+0x1dc>)
   2fae2:	1a9b      	subs	r3, r3, r2
   2fae4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("No file size in response");
   2fae6:	2201      	movs	r2, #1
   2fae8:	f362 0002 	bfi	r0, r2, #0, #3
   2faec:	f36f 00c5 	bfc	r0, #3, #3
   2faf0:	f363 108f 	bfi	r0, r3, #6, #10
   2faf4:	4910      	ldr	r1, [pc, #64]	; (2fb38 <http_header_parse+0x1f4>)
   2faf6:	f00c faa7 	bl	3c048 <log_string_sync>
				return -1;
   2fafa:	f04f 30ff 	mov.w	r0, #4294967295
   2fafe:	e734      	b.n	2f96a <http_header_parse+0x26>
		return 1;
   2fb00:	2001      	movs	r0, #1
   2fb02:	e732      	b.n	2f96a <http_header_parse+0x26>
   2fb04:	00044c18 	.word	0x00044c18
   2fb08:	00045e47 	.word	0x00045e47
   2fb0c:	00044c20 	.word	0x00044c20
   2fb10:	00044ca4 	.word	0x00044ca4
   2fb14:	00044c14 	.word	0x00044c14
   2fb18:	00044d00 	.word	0x00044d00
   2fb1c:	00041270 	.word	0x00041270
   2fb20:	00041200 	.word	0x00041200
   2fb24:	00044d14 	.word	0x00044d14
   2fb28:	00044c2c 	.word	0x00044c2c
   2fb2c:	00044c50 	.word	0x00044c50
   2fb30:	00044c84 	.word	0x00044c84
   2fb34:	00044cb4 	.word	0x00044cb4
   2fb38:	00044ce4 	.word	0x00044ce4

0002fb3c <http_get_request_send>:
{
   2fb3c:	b530      	push	{r4, r5, lr}
   2fb3e:	b0c5      	sub	sp, #276	; 0x114
   2fb40:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(client->host);
   2fb42:	f8d0 3810 	ldr.w	r3, [r0, #2064]	; 0x810
   2fb46:	b16b      	cbz	r3, 2fb64 <http_get_request_send+0x28>
	__ASSERT_NO_MSG(client->file);
   2fb48:	f8d4 3814 	ldr.w	r3, [r4, #2068]	; 0x814
   2fb4c:	b1ab      	cbz	r3, 2fb7a <http_get_request_send+0x3e>
	err = url_parse_host(client->host, host, sizeof(host));
   2fb4e:	2240      	movs	r2, #64	; 0x40
   2fb50:	a934      	add	r1, sp, #208	; 0xd0
   2fb52:	f8d4 0810 	ldr.w	r0, [r4, #2064]	; 0x810
   2fb56:	f7ff fe41 	bl	2f7dc <url_parse_host>
	if (err) {
   2fb5a:	4605      	mov	r5, r0
   2fb5c:	b1c0      	cbz	r0, 2fb90 <http_get_request_send+0x54>
}
   2fb5e:	4628      	mov	r0, r5
   2fb60:	b045      	add	sp, #276	; 0x114
   2fb62:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(client->host);
   2fb64:	4d38      	ldr	r5, [pc, #224]	; (2fc48 <http_get_request_send+0x10c>)
   2fb66:	2237      	movs	r2, #55	; 0x37
   2fb68:	4629      	mov	r1, r5
   2fb6a:	4838      	ldr	r0, [pc, #224]	; (2fc4c <http_get_request_send+0x110>)
   2fb6c:	f00b ffe4 	bl	3bb38 <printk>
   2fb70:	2137      	movs	r1, #55	; 0x37
   2fb72:	4628      	mov	r0, r5
   2fb74:	f00c fa34 	bl	3bfe0 <assert_post_action>
   2fb78:	e7e6      	b.n	2fb48 <http_get_request_send+0xc>
	__ASSERT_NO_MSG(client->file);
   2fb7a:	4d33      	ldr	r5, [pc, #204]	; (2fc48 <http_get_request_send+0x10c>)
   2fb7c:	2238      	movs	r2, #56	; 0x38
   2fb7e:	4629      	mov	r1, r5
   2fb80:	4832      	ldr	r0, [pc, #200]	; (2fc4c <http_get_request_send+0x110>)
   2fb82:	f00b ffd9 	bl	3bb38 <printk>
   2fb86:	2138      	movs	r1, #56	; 0x38
   2fb88:	4628      	mov	r0, r5
   2fb8a:	f00c fa29 	bl	3bfe0 <assert_post_action>
   2fb8e:	e7de      	b.n	2fb4e <http_get_request_send+0x12>
	err = url_parse_file(client->file, file, sizeof(file));
   2fb90:	22c0      	movs	r2, #192	; 0xc0
   2fb92:	a904      	add	r1, sp, #16
   2fb94:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   2fb98:	f7ff fe9e 	bl	2f8d8 <url_parse_file>
	if (err) {
   2fb9c:	4605      	mov	r5, r0
   2fb9e:	2800      	cmp	r0, #0
   2fba0:	d1dd      	bne.n	2fb5e <http_get_request_send+0x22>
	if (client->config.frag_size_override) {
   2fba2:	f8d4 3820 	ldr.w	r3, [r4, #2080]	; 0x820
   2fba6:	2b00      	cmp	r3, #0
   2fba8:	d036      	beq.n	2fc18 <http_get_request_send+0xdc>
		off = client->progress + client->config.frag_size_override - 1;
   2fbaa:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   2fbae:	4413      	add	r3, r2
   2fbb0:	3b01      	subs	r3, #1
	if (client->file_size != 0) {
   2fbb2:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
   2fbb6:	b11a      	cbz	r2, 2fbc0 <http_get_request_send+0x84>
		off = MIN(off, client->file_size - 1);
   2fbb8:	3a01      	subs	r2, #1
   2fbba:	4293      	cmp	r3, r2
   2fbbc:	bf28      	it	cs
   2fbbe:	4613      	movcs	r3, r2
		len = snprintf(client->buf,
   2fbc0:	9302      	str	r3, [sp, #8]
   2fbc2:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   2fbc6:	9301      	str	r3, [sp, #4]
   2fbc8:	ab34      	add	r3, sp, #208	; 0xd0
   2fbca:	9300      	str	r3, [sp, #0]
   2fbcc:	ab04      	add	r3, sp, #16
   2fbce:	4a20      	ldr	r2, [pc, #128]	; (2fc50 <http_get_request_send+0x114>)
   2fbd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2fbd4:	1d20      	adds	r0, r4, #4
   2fbd6:	f00a fbf5 	bl	3a3c4 <sniprintf>
   2fbda:	4601      	mov	r1, r0
	if (len < 0 || len > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   2fbdc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   2fbe0:	d81f      	bhi.n	2fc22 <http_get_request_send+0xe6>
	err = socket_send(client, len);
   2fbe2:	4620      	mov	r0, r4
   2fbe4:	f00e fdd2 	bl	3e78c <socket_send>
	if (err) {
   2fbe8:	4605      	mov	r5, r0
   2fbea:	2800      	cmp	r0, #0
   2fbec:	d0b7      	beq.n	2fb5e <http_get_request_send+0x22>
   2fbee:	4b19      	ldr	r3, [pc, #100]	; (2fc54 <http_get_request_send+0x118>)
   2fbf0:	4a19      	ldr	r2, [pc, #100]	; (2fc58 <http_get_request_send+0x11c>)
   2fbf2:	1a9b      	subs	r3, r3, r2
   2fbf4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   2fbf6:	f04f 0400 	mov.w	r4, #0
   2fbfa:	2201      	movs	r2, #1
   2fbfc:	f362 0402 	bfi	r4, r2, #0, #3
   2fc00:	f36f 04c5 	bfc	r4, #3, #3
   2fc04:	f363 148f 	bfi	r4, r3, #6, #10
   2fc08:	f00c fe36 	bl	3c878 <__errno>
   2fc0c:	6802      	ldr	r2, [r0, #0]
   2fc0e:	4913      	ldr	r1, [pc, #76]	; (2fc5c <http_get_request_send+0x120>)
   2fc10:	4620      	mov	r0, r4
   2fc12:	f00c fa19 	bl	3c048 <log_string_sync>
		return err;
   2fc16:	e7a2      	b.n	2fb5e <http_get_request_send+0x22>
		off = client->progress +
   2fc18:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   2fc1c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
   2fc20:	e7c7      	b.n	2fbb2 <http_get_request_send+0x76>
   2fc22:	4b0c      	ldr	r3, [pc, #48]	; (2fc54 <http_get_request_send+0x118>)
   2fc24:	4a0c      	ldr	r2, [pc, #48]	; (2fc58 <http_get_request_send+0x11c>)
   2fc26:	1a9b      	subs	r3, r3, r2
   2fc28:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Cannot create GET request, buffer too small");
   2fc2a:	f04f 0000 	mov.w	r0, #0
   2fc2e:	2201      	movs	r2, #1
   2fc30:	f362 0002 	bfi	r0, r2, #0, #3
   2fc34:	f36f 00c5 	bfc	r0, #3, #3
   2fc38:	f363 108f 	bfi	r0, r3, #6, #10
   2fc3c:	4908      	ldr	r1, [pc, #32]	; (2fc60 <http_get_request_send+0x124>)
   2fc3e:	f00c fa03 	bl	3c048 <log_string_sync>
		return -ENOMEM;
   2fc42:	f06f 050b 	mvn.w	r5, #11
   2fc46:	e78a      	b.n	2fb5e <http_get_request_send+0x22>
   2fc48:	00044d3c 	.word	0x00044d3c
   2fc4c:	00041c84 	.word	0x00041c84
   2fc50:	00044d78 	.word	0x00044d78
   2fc54:	00041270 	.word	0x00041270
   2fc58:	00041200 	.word	0x00041200
   2fc5c:	00044df0 	.word	0x00044df0
   2fc60:	00044dc4 	.word	0x00044dc4

0002fc64 <send_evt>:
static enum dfu_target_image_type img_type_expected = DFU_TARGET_IMAGE_TYPE_ANY;
static bool first_fragment;
static bool downloading;

static void send_evt(enum fota_download_evt_id id)
{
   2fc64:	b530      	push	{r4, r5, lr}
   2fc66:	b083      	sub	sp, #12
	__ASSERT(id != FOTA_DOWNLOAD_EVT_PROGRESS, "use send_progress");
   2fc68:	4604      	mov	r4, r0
   2fc6a:	b160      	cbz	r0, 2fc86 <send_evt+0x22>
	__ASSERT(id != FOTA_DOWNLOAD_EVT_ERROR, "use send_error_evt");
   2fc6c:	2c04      	cmp	r4, #4
   2fc6e:	d015      	beq.n	2fc9c <send_evt+0x38>
	const struct fota_download_evt evt = {
   2fc70:	2300      	movs	r3, #0
   2fc72:	9300      	str	r3, [sp, #0]
   2fc74:	9301      	str	r3, [sp, #4]
   2fc76:	f88d 4000 	strb.w	r4, [sp]
		.id = id
	};
	callback(&evt);
   2fc7a:	4b0e      	ldr	r3, [pc, #56]	; (2fcb4 <send_evt+0x50>)
   2fc7c:	681b      	ldr	r3, [r3, #0]
   2fc7e:	4668      	mov	r0, sp
   2fc80:	4798      	blx	r3
}
   2fc82:	b003      	add	sp, #12
   2fc84:	bd30      	pop	{r4, r5, pc}
	__ASSERT(id != FOTA_DOWNLOAD_EVT_PROGRESS, "use send_progress");
   2fc86:	4d0c      	ldr	r5, [pc, #48]	; (2fcb8 <send_evt+0x54>)
   2fc88:	222f      	movs	r2, #47	; 0x2f
   2fc8a:	4629      	mov	r1, r5
   2fc8c:	480b      	ldr	r0, [pc, #44]	; (2fcbc <send_evt+0x58>)
   2fc8e:	f00b ff53 	bl	3bb38 <printk>
   2fc92:	212f      	movs	r1, #47	; 0x2f
   2fc94:	4628      	mov	r0, r5
   2fc96:	f00c f9a3 	bl	3bfe0 <assert_post_action>
   2fc9a:	e7e7      	b.n	2fc6c <send_evt+0x8>
	__ASSERT(id != FOTA_DOWNLOAD_EVT_ERROR, "use send_error_evt");
   2fc9c:	4d06      	ldr	r5, [pc, #24]	; (2fcb8 <send_evt+0x54>)
   2fc9e:	2230      	movs	r2, #48	; 0x30
   2fca0:	4629      	mov	r1, r5
   2fca2:	4806      	ldr	r0, [pc, #24]	; (2fcbc <send_evt+0x58>)
   2fca4:	f00b ff48 	bl	3bb38 <printk>
   2fca8:	2130      	movs	r1, #48	; 0x30
   2fcaa:	4628      	mov	r0, r5
   2fcac:	f00c f998 	bl	3bfe0 <assert_post_action>
   2fcb0:	e7de      	b.n	2fc70 <send_evt+0xc>
   2fcb2:	bf00      	nop
   2fcb4:	20010350 	.word	0x20010350
   2fcb8:	00044e18 	.word	0x00044e18
   2fcbc:	00041c84 	.word	0x00041c84

0002fcc0 <send_error_evt>:

static void send_error_evt(enum fota_download_error_cause cause)
{
   2fcc0:	b530      	push	{r4, r5, lr}
   2fcc2:	b083      	sub	sp, #12
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
   2fcc4:	4604      	mov	r4, r0
   2fcc6:	b178      	cbz	r0, 2fce8 <send_error_evt+0x28>
	const struct fota_download_evt evt = {
   2fcc8:	2300      	movs	r3, #0
   2fcca:	9300      	str	r3, [sp, #0]
   2fccc:	9301      	str	r3, [sp, #4]
   2fcce:	2204      	movs	r2, #4
   2fcd0:	f88d 2000 	strb.w	r2, [sp]
   2fcd4:	f88d 4004 	strb.w	r4, [sp, #4]
		.id = FOTA_DOWNLOAD_EVT_ERROR,
		.cause = cause
	};
	downloading = false;
   2fcd8:	4a09      	ldr	r2, [pc, #36]	; (2fd00 <send_error_evt+0x40>)
   2fcda:	7013      	strb	r3, [r2, #0]
	callback(&evt);
   2fcdc:	4b09      	ldr	r3, [pc, #36]	; (2fd04 <send_error_evt+0x44>)
   2fcde:	681b      	ldr	r3, [r3, #0]
   2fce0:	4668      	mov	r0, sp
   2fce2:	4798      	blx	r3
}
   2fce4:	b003      	add	sp, #12
   2fce6:	bd30      	pop	{r4, r5, pc}
	__ASSERT(cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR, "use a valid error cause");
   2fce8:	4d07      	ldr	r5, [pc, #28]	; (2fd08 <send_error_evt+0x48>)
   2fcea:	2239      	movs	r2, #57	; 0x39
   2fcec:	4629      	mov	r1, r5
   2fcee:	4807      	ldr	r0, [pc, #28]	; (2fd0c <send_error_evt+0x4c>)
   2fcf0:	f00b ff22 	bl	3bb38 <printk>
   2fcf4:	2139      	movs	r1, #57	; 0x39
   2fcf6:	4628      	mov	r0, r5
   2fcf8:	f00c f972 	bl	3bfe0 <assert_post_action>
   2fcfc:	e7e4      	b.n	2fcc8 <send_error_evt+0x8>
   2fcfe:	bf00      	nop
   2fd00:	20010e0a 	.word	0x20010e0a
   2fd04:	20010350 	.word	0x20010350
   2fd08:	00044e18 	.word	0x00044e18
   2fd0c:	00041c84 	.word	0x00041c84

0002fd10 <download_client_callback>:
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
	}
}

static int download_client_callback(const struct download_client_evt *event)
{
   2fd10:	b530      	push	{r4, r5, lr}
   2fd12:	b083      	sub	sp, #12
	static size_t file_size;
	size_t offset;
	int err;

	if (event == NULL) {
   2fd14:	2800      	cmp	r0, #0
   2fd16:	f000 8159 	beq.w	2ffcc <download_client_callback+0x2bc>
   2fd1a:	4605      	mov	r5, r0
		return -EINVAL;
	}

	switch (event->id) {
   2fd1c:	7803      	ldrb	r3, [r0, #0]
   2fd1e:	2b01      	cmp	r3, #1
   2fd20:	f000 8102 	beq.w	2ff28 <download_client_callback+0x218>
   2fd24:	2b02      	cmp	r3, #2
   2fd26:	f000 80d2 	beq.w	2fece <download_client_callback+0x1be>
   2fd2a:	b11b      	cbz	r3, 2fd34 <download_client_callback+0x24>
   2fd2c:	2400      	movs	r4, #0
	default:
		break;
	}

	return 0;
}
   2fd2e:	4620      	mov	r0, r4
   2fd30:	b003      	add	sp, #12
   2fd32:	bd30      	pop	{r4, r5, pc}
		if (first_fragment) {
   2fd34:	4ba7      	ldr	r3, [pc, #668]	; (2ffd4 <download_client_callback+0x2c4>)
   2fd36:	781b      	ldrb	r3, [r3, #0]
   2fd38:	b33b      	cbz	r3, 2fd8a <download_client_callback+0x7a>
			err = download_client_file_size_get(&dlc, &file_size);
   2fd3a:	49a7      	ldr	r1, [pc, #668]	; (2ffd8 <download_client_callback+0x2c8>)
   2fd3c:	48a7      	ldr	r0, [pc, #668]	; (2ffdc <download_client_callback+0x2cc>)
   2fd3e:	f00e fd42 	bl	3e7c6 <download_client_file_size_get>
			if (err != 0) {
   2fd42:	4604      	mov	r4, r0
   2fd44:	2800      	cmp	r0, #0
   2fd46:	d147      	bne.n	2fdd8 <download_client_callback+0xc8>
			first_fragment = false;
   2fd48:	4ba2      	ldr	r3, [pc, #648]	; (2ffd4 <download_client_callback+0x2c4>)
   2fd4a:	2200      	movs	r2, #0
   2fd4c:	701a      	strb	r2, [r3, #0]
			img_type = dfu_target_img_type(event->fragment.buf,
   2fd4e:	68a9      	ldr	r1, [r5, #8]
   2fd50:	6868      	ldr	r0, [r5, #4]
   2fd52:	f000 fa9f 	bl	30294 <dfu_target_img_type>
   2fd56:	b2c0      	uxtb	r0, r0
   2fd58:	4ba1      	ldr	r3, [pc, #644]	; (2ffe0 <download_client_callback+0x2d0>)
   2fd5a:	7018      	strb	r0, [r3, #0]
			if ((img_type_expected != DFU_TARGET_IMAGE_TYPE_ANY) &&
   2fd5c:	4ba1      	ldr	r3, [pc, #644]	; (2ffe4 <download_client_callback+0x2d4>)
   2fd5e:	781b      	ldrb	r3, [r3, #0]
   2fd60:	b10b      	cbz	r3, 2fd66 <download_client_callback+0x56>
   2fd62:	4298      	cmp	r0, r3
   2fd64:	d13c      	bne.n	2fde0 <download_client_callback+0xd0>
				err = dfu_target_init(img_type, file_size,
   2fd66:	4aa0      	ldr	r2, [pc, #640]	; (2ffe8 <download_client_callback+0x2d8>)
   2fd68:	4b9b      	ldr	r3, [pc, #620]	; (2ffd8 <download_client_callback+0x2c8>)
   2fd6a:	6819      	ldr	r1, [r3, #0]
   2fd6c:	f000 fabc 	bl	302e8 <dfu_target_init>
				if ((err < 0) && (err != -EBUSY)) {
   2fd70:	1e04      	subs	r4, r0, #0
   2fd72:	da02      	bge.n	2fd7a <download_client_callback+0x6a>
   2fd74:	f114 0f10 	cmn.w	r4, #16
   2fd78:	d155      	bne.n	2fe26 <download_client_callback+0x116>
			err = dfu_target_offset_get(&offset);
   2fd7a:	a801      	add	r0, sp, #4
   2fd7c:	f000 faee 	bl	3035c <dfu_target_offset_get>
			if (err != 0) {
   2fd80:	2800      	cmp	r0, #0
   2fd82:	d173      	bne.n	2fe6c <download_client_callback+0x15c>
			if (offset != 0) {
   2fd84:	9b01      	ldr	r3, [sp, #4]
   2fd86:	2b00      	cmp	r3, #0
   2fd88:	d174      	bne.n	2fe74 <download_client_callback+0x164>
		err = dfu_target_write(event->fragment.buf,
   2fd8a:	68a9      	ldr	r1, [r5, #8]
   2fd8c:	6868      	ldr	r0, [r5, #4]
   2fd8e:	f000 faf1 	bl	30374 <dfu_target_write>
		if (err != 0) {
   2fd92:	4604      	mov	r4, r0
   2fd94:	2800      	cmp	r0, #0
   2fd96:	d0ca      	beq.n	2fd2e <download_client_callback+0x1e>
   2fd98:	4b94      	ldr	r3, [pc, #592]	; (2ffec <download_client_callback+0x2dc>)
   2fd9a:	4a95      	ldr	r2, [pc, #596]	; (2fff0 <download_client_callback+0x2e0>)
   2fd9c:	1a9b      	subs	r3, r3, r2
   2fd9e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("dfu_target_write error %d", err);
   2fda0:	f04f 0000 	mov.w	r0, #0
   2fda4:	2201      	movs	r2, #1
   2fda6:	f362 0002 	bfi	r0, r2, #0, #3
   2fdaa:	f36f 00c5 	bfc	r0, #3, #3
   2fdae:	f363 108f 	bfi	r0, r3, #6, #10
   2fdb2:	4622      	mov	r2, r4
   2fdb4:	498f      	ldr	r1, [pc, #572]	; (2fff4 <download_client_callback+0x2e4>)
   2fdb6:	f00c f947 	bl	3c048 <log_string_sync>
			int res = dfu_target_done(false);
   2fdba:	2000      	movs	r0, #0
   2fdbc:	f000 faea 	bl	30394 <dfu_target_done>
			if (res != 0) {
   2fdc0:	2800      	cmp	r0, #0
   2fdc2:	d173      	bne.n	2feac <download_client_callback+0x19c>
			first_fragment = true;
   2fdc4:	4b83      	ldr	r3, [pc, #524]	; (2ffd4 <download_client_callback+0x2c4>)
   2fdc6:	2201      	movs	r2, #1
   2fdc8:	701a      	strb	r2, [r3, #0]
			(void) download_client_disconnect(&dlc);
   2fdca:	4884      	ldr	r0, [pc, #528]	; (2ffdc <download_client_callback+0x2cc>)
   2fdcc:	f7ff fab4 	bl	2f338 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   2fdd0:	2002      	movs	r0, #2
   2fdd2:	f7ff ff75 	bl	2fcc0 <send_error_evt>
			return err;
   2fdd6:	e7aa      	b.n	2fd2e <download_client_callback+0x1e>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2fdd8:	2001      	movs	r0, #1
   2fdda:	f7ff ff71 	bl	2fcc0 <send_error_evt>
				return err;
   2fdde:	e7a6      	b.n	2fd2e <download_client_callback+0x1e>
   2fde0:	4a82      	ldr	r2, [pc, #520]	; (2ffec <download_client_callback+0x2dc>)
   2fde2:	4983      	ldr	r1, [pc, #524]	; (2fff0 <download_client_callback+0x2e0>)
   2fde4:	1a52      	subs	r2, r2, r1
   2fde6:	08d2      	lsrs	r2, r2, #3
				LOG_ERR("FOTA image type %d does not match expected type %d",
   2fde8:	f04f 0400 	mov.w	r4, #0
   2fdec:	2101      	movs	r1, #1
   2fdee:	f361 0402 	bfi	r4, r1, #0, #3
   2fdf2:	f36f 04c5 	bfc	r4, #3, #3
   2fdf6:	f362 148f 	bfi	r4, r2, #6, #10
   2fdfa:	4602      	mov	r2, r0
   2fdfc:	497e      	ldr	r1, [pc, #504]	; (2fff8 <download_client_callback+0x2e8>)
   2fdfe:	4620      	mov	r0, r4
   2fe00:	f00c f922 	bl	3c048 <log_string_sync>
				err_cause = FOTA_DOWNLOAD_ERROR_CAUSE_TYPE_MISMATCH;
   2fe04:	2503      	movs	r5, #3
				err = -EPROTOTYPE;
   2fe06:	f06f 046a 	mvn.w	r4, #106	; 0x6a
				(void)download_client_disconnect(&dlc);
   2fe0a:	4874      	ldr	r0, [pc, #464]	; (2ffdc <download_client_callback+0x2cc>)
   2fe0c:	f7ff fa94 	bl	2f338 <download_client_disconnect>
				send_error_evt(err_cause);
   2fe10:	4628      	mov	r0, r5
   2fe12:	f7ff ff55 	bl	2fcc0 <send_error_evt>
				int res = dfu_target_reset();
   2fe16:	f000 fae9 	bl	303ec <dfu_target_reset>
				if (res != 0) {
   2fe1a:	4602      	mov	r2, r0
   2fe1c:	b9a8      	cbnz	r0, 2fe4a <download_client_callback+0x13a>
				first_fragment = true;
   2fe1e:	4b6d      	ldr	r3, [pc, #436]	; (2ffd4 <download_client_callback+0x2c4>)
   2fe20:	2201      	movs	r2, #1
   2fe22:	701a      	strb	r2, [r3, #0]
				return err;
   2fe24:	e783      	b.n	2fd2e <download_client_callback+0x1e>
   2fe26:	4b71      	ldr	r3, [pc, #452]	; (2ffec <download_client_callback+0x2dc>)
   2fe28:	4a71      	ldr	r2, [pc, #452]	; (2fff0 <download_client_callback+0x2e0>)
   2fe2a:	1a9b      	subs	r3, r3, r2
   2fe2c:	08db      	lsrs	r3, r3, #3
					LOG_ERR("dfu_target_init error %d", err);
   2fe2e:	2501      	movs	r5, #1
   2fe30:	f04f 0000 	mov.w	r0, #0
   2fe34:	f365 0002 	bfi	r0, r5, #0, #3
   2fe38:	f36f 00c5 	bfc	r0, #3, #3
   2fe3c:	f363 108f 	bfi	r0, r3, #6, #10
   2fe40:	4622      	mov	r2, r4
   2fe42:	496e      	ldr	r1, [pc, #440]	; (2fffc <download_client_callback+0x2ec>)
   2fe44:	f00c f900 	bl	3c048 <log_string_sync>
			if (err_cause != FOTA_DOWNLOAD_ERROR_CAUSE_NO_ERROR) {
   2fe48:	e7df      	b.n	2fe0a <download_client_callback+0xfa>
   2fe4a:	4b68      	ldr	r3, [pc, #416]	; (2ffec <download_client_callback+0x2dc>)
   2fe4c:	4968      	ldr	r1, [pc, #416]	; (2fff0 <download_client_callback+0x2e0>)
   2fe4e:	1a5b      	subs	r3, r3, r1
   2fe50:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Unable to reset DFU target, err: %d",
   2fe52:	f04f 0000 	mov.w	r0, #0
   2fe56:	2101      	movs	r1, #1
   2fe58:	f361 0002 	bfi	r0, r1, #0, #3
   2fe5c:	f36f 00c5 	bfc	r0, #3, #3
   2fe60:	f363 108f 	bfi	r0, r3, #6, #10
   2fe64:	4966      	ldr	r1, [pc, #408]	; (30000 <CONFIG_FLASH_LOAD_SIZE>)
   2fe66:	f00c f8ef 	bl	3c048 <log_string_sync>
   2fe6a:	e7d8      	b.n	2fe1e <download_client_callback+0x10e>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2fe6c:	2001      	movs	r0, #1
   2fe6e:	f7ff ff27 	bl	2fcc0 <send_error_evt>
   2fe72:	e787      	b.n	2fd84 <download_client_callback+0x74>
				(void)download_client_disconnect(&dlc);
   2fe74:	4859      	ldr	r0, [pc, #356]	; (2ffdc <download_client_callback+0x2cc>)
   2fe76:	f7ff fa5f 	bl	2f338 <download_client_disconnect>
				k_work_schedule(&dlc_with_offset_work,
   2fe7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2fe7e:	2300      	movs	r3, #0
   2fe80:	4860      	ldr	r0, [pc, #384]	; (30004 <CONFIG_FLASH_LOAD_SIZE+0x4>)
   2fe82:	f006 ffcb 	bl	36e1c <k_work_schedule>
   2fe86:	4b59      	ldr	r3, [pc, #356]	; (2ffec <download_client_callback+0x2dc>)
   2fe88:	4a59      	ldr	r2, [pc, #356]	; (2fff0 <download_client_callback+0x2e0>)
   2fe8a:	1a9b      	subs	r3, r3, r2
   2fe8c:	08db      	lsrs	r3, r3, #3
				LOG_INF("Refuse fragment, restart with offset");
   2fe8e:	f04f 0000 	mov.w	r0, #0
   2fe92:	2203      	movs	r2, #3
   2fe94:	f362 0002 	bfi	r0, r2, #0, #3
   2fe98:	f36f 00c5 	bfc	r0, #3, #3
   2fe9c:	f363 108f 	bfi	r0, r3, #6, #10
   2fea0:	4959      	ldr	r1, [pc, #356]	; (30008 <CONFIG_FLASH_LOAD_SIZE+0x8>)
   2fea2:	f00c f8d1 	bl	3c048 <log_string_sync>
				return -1;
   2fea6:	f04f 34ff 	mov.w	r4, #4294967295
   2feaa:	e740      	b.n	2fd2e <download_client_callback+0x1e>
   2feac:	4b4f      	ldr	r3, [pc, #316]	; (2ffec <download_client_callback+0x2dc>)
   2feae:	4a50      	ldr	r2, [pc, #320]	; (2fff0 <download_client_callback+0x2e0>)
   2feb0:	1a9b      	subs	r3, r3, r2
   2feb2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Unable to free DFU target resources");
   2feb4:	f04f 0000 	mov.w	r0, #0
   2feb8:	2201      	movs	r2, #1
   2feba:	f362 0002 	bfi	r0, r2, #0, #3
   2febe:	f36f 00c5 	bfc	r0, #3, #3
   2fec2:	f363 108f 	bfi	r0, r3, #6, #10
   2fec6:	4951      	ldr	r1, [pc, #324]	; (3000c <CONFIG_FLASH_LOAD_SIZE+0xc>)
   2fec8:	f00c f8be 	bl	3c048 <log_string_sync>
   2fecc:	e77a      	b.n	2fdc4 <download_client_callback+0xb4>
		err = dfu_target_done(true);
   2fece:	2001      	movs	r0, #1
   2fed0:	f000 fa60 	bl	30394 <dfu_target_done>
		if (err != 0) {
   2fed4:	4604      	mov	r4, r0
   2fed6:	b970      	cbnz	r0, 2fef6 <download_client_callback+0x1e6>
		err = download_client_disconnect(&dlc);
   2fed8:	4840      	ldr	r0, [pc, #256]	; (2ffdc <download_client_callback+0x2cc>)
   2feda:	f7ff fa2d 	bl	2f338 <download_client_disconnect>
		if (err != 0) {
   2fede:	4604      	mov	r4, r0
   2fee0:	b9f0      	cbnz	r0, 2ff20 <download_client_callback+0x210>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   2fee2:	2001      	movs	r0, #1
   2fee4:	f7ff febe 	bl	2fc64 <send_evt>
		first_fragment = true;
   2fee8:	4b3a      	ldr	r3, [pc, #232]	; (2ffd4 <download_client_callback+0x2c4>)
   2feea:	2201      	movs	r2, #1
   2feec:	701a      	strb	r2, [r3, #0]
		downloading = false;
   2feee:	4b48      	ldr	r3, [pc, #288]	; (30010 <CONFIG_FLASH_LOAD_SIZE+0x10>)
   2fef0:	2200      	movs	r2, #0
   2fef2:	701a      	strb	r2, [r3, #0]
		break;
   2fef4:	e71b      	b.n	2fd2e <download_client_callback+0x1e>
   2fef6:	4b3d      	ldr	r3, [pc, #244]	; (2ffec <download_client_callback+0x2dc>)
   2fef8:	4a3d      	ldr	r2, [pc, #244]	; (2fff0 <download_client_callback+0x2e0>)
   2fefa:	1a9b      	subs	r3, r3, r2
   2fefc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("dfu_target_done error: %d", err);
   2fefe:	2501      	movs	r5, #1
   2ff00:	f04f 0000 	mov.w	r0, #0
   2ff04:	f365 0002 	bfi	r0, r5, #0, #3
   2ff08:	f36f 00c5 	bfc	r0, #3, #3
   2ff0c:	f363 108f 	bfi	r0, r3, #6, #10
   2ff10:	4622      	mov	r2, r4
   2ff12:	4940      	ldr	r1, [pc, #256]	; (30014 <CONFIG_FLASH_LOAD_SIZE+0x14>)
   2ff14:	f00c f898 	bl	3c048 <log_string_sync>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2ff18:	4628      	mov	r0, r5
   2ff1a:	f7ff fed1 	bl	2fcc0 <send_error_evt>
			return err;
   2ff1e:	e706      	b.n	2fd2e <download_client_callback+0x1e>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2ff20:	2001      	movs	r0, #1
   2ff22:	f7ff fecd 	bl	2fcc0 <send_error_evt>
			return err;
   2ff26:	e702      	b.n	2fd2e <download_client_callback+0x1e>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   2ff28:	4b3b      	ldr	r3, [pc, #236]	; (30018 <CONFIG_FLASH_LOAD_SIZE+0x18>)
   2ff2a:	681a      	ldr	r2, [r3, #0]
   2ff2c:	b1e2      	cbz	r2, 2ff68 <download_client_callback+0x258>
   2ff2e:	6843      	ldr	r3, [r0, #4]
   2ff30:	f113 0f80 	cmn.w	r3, #128	; 0x80
   2ff34:	d002      	beq.n	2ff3c <download_client_callback+0x22c>
   2ff36:	f113 0f68 	cmn.w	r3, #104	; 0x68
   2ff3a:	d115      	bne.n	2ff68 <download_client_callback+0x258>
   2ff3c:	4b2b      	ldr	r3, [pc, #172]	; (2ffec <download_client_callback+0x2dc>)
   2ff3e:	492c      	ldr	r1, [pc, #176]	; (2fff0 <download_client_callback+0x2e0>)
   2ff40:	1a5b      	subs	r3, r3, r1
   2ff42:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Download socket error. %d retries left...",
   2ff44:	f04f 0000 	mov.w	r0, #0
   2ff48:	2102      	movs	r1, #2
   2ff4a:	f361 0002 	bfi	r0, r1, #0, #3
   2ff4e:	f36f 00c5 	bfc	r0, #3, #3
   2ff52:	f363 108f 	bfi	r0, r3, #6, #10
   2ff56:	4931      	ldr	r1, [pc, #196]	; (3001c <CONFIG_FLASH_LOAD_SIZE+0x1c>)
   2ff58:	f00c f876 	bl	3c048 <log_string_sync>
			socket_retries_left--;
   2ff5c:	4a2e      	ldr	r2, [pc, #184]	; (30018 <CONFIG_FLASH_LOAD_SIZE+0x18>)
   2ff5e:	6813      	ldr	r3, [r2, #0]
   2ff60:	3b01      	subs	r3, #1
   2ff62:	6013      	str	r3, [r2, #0]
	return 0;
   2ff64:	2400      	movs	r4, #0
			socket_retries_left--;
   2ff66:	e6e2      	b.n	2fd2e <download_client_callback+0x1e>
			download_client_disconnect(&dlc);
   2ff68:	481c      	ldr	r0, [pc, #112]	; (2ffdc <download_client_callback+0x2cc>)
   2ff6a:	f7ff f9e5 	bl	2f338 <download_client_disconnect>
   2ff6e:	4b1f      	ldr	r3, [pc, #124]	; (2ffec <download_client_callback+0x2dc>)
   2ff70:	4a1f      	ldr	r2, [pc, #124]	; (2fff0 <download_client_callback+0x2e0>)
   2ff72:	1a9b      	subs	r3, r3, r2
   2ff74:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Download client error");
   2ff76:	f04f 0000 	mov.w	r0, #0
   2ff7a:	2201      	movs	r2, #1
   2ff7c:	f362 0002 	bfi	r0, r2, #0, #3
   2ff80:	f36f 00c5 	bfc	r0, #3, #3
   2ff84:	f363 108f 	bfi	r0, r3, #6, #10
   2ff88:	4925      	ldr	r1, [pc, #148]	; (30020 <CONFIG_FLASH_LOAD_SIZE+0x20>)
   2ff8a:	f00c f85d 	bl	3c048 <log_string_sync>
			err = dfu_target_done(false);
   2ff8e:	2000      	movs	r0, #0
   2ff90:	f000 fa00 	bl	30394 <dfu_target_done>
			if (err == -EACCES) {
   2ff94:	f110 0f0d 	cmn.w	r0, #13
   2ff98:	d000      	beq.n	2ff9c <download_client_callback+0x28c>
			} else if (err != 0) {
   2ff9a:	b930      	cbnz	r0, 2ffaa <download_client_callback+0x29a>
			first_fragment = true;
   2ff9c:	2001      	movs	r0, #1
   2ff9e:	4b0d      	ldr	r3, [pc, #52]	; (2ffd4 <download_client_callback+0x2c4>)
   2ffa0:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   2ffa2:	f7ff fe8d 	bl	2fcc0 <send_error_evt>
			return event->error;
   2ffa6:	686c      	ldr	r4, [r5, #4]
   2ffa8:	e6c1      	b.n	2fd2e <download_client_callback+0x1e>
   2ffaa:	4b10      	ldr	r3, [pc, #64]	; (2ffec <download_client_callback+0x2dc>)
   2ffac:	4a10      	ldr	r2, [pc, #64]	; (2fff0 <download_client_callback+0x2e0>)
   2ffae:	1a9b      	subs	r3, r3, r2
   2ffb0:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Unable to deinitialze resources "
   2ffb2:	f04f 0000 	mov.w	r0, #0
   2ffb6:	2201      	movs	r2, #1
   2ffb8:	f362 0002 	bfi	r0, r2, #0, #3
   2ffbc:	f36f 00c5 	bfc	r0, #3, #3
   2ffc0:	f363 108f 	bfi	r0, r3, #6, #10
   2ffc4:	4917      	ldr	r1, [pc, #92]	; (30024 <CONFIG_FLASH_LOAD_SIZE+0x24>)
   2ffc6:	f00c f83f 	bl	3c048 <log_string_sync>
   2ffca:	e7e7      	b.n	2ff9c <download_client_callback+0x28c>
		return -EINVAL;
   2ffcc:	f06f 0415 	mvn.w	r4, #21
   2ffd0:	e6ad      	b.n	2fd2e <download_client_callback+0x1e>
   2ffd2:	bf00      	nop
   2ffd4:	20010e0b 	.word	0x20010e0b
   2ffd8:	20010414 	.word	0x20010414
   2ffdc:	2000cd28 	.word	0x2000cd28
   2ffe0:	20010e0c 	.word	0x20010e0c
   2ffe4:	20010e0d 	.word	0x20010e0d
   2ffe8:	0003e8c5 	.word	0x0003e8c5
   2ffec:	00041288 	.word	0x00041288
   2fff0:	00041200 	.word	0x00041200
   2fff4:	00044ef8 	.word	0x00044ef8
   2fff8:	00044e5c 	.word	0x00044e5c
   2fffc:	00044e90 	.word	0x00044e90
   30000:	00044eac 	.word	0x00044eac
   30004:	2000e5f0 	.word	0x2000e5f0
   30008:	00044ed0 	.word	0x00044ed0
   3000c:	00044f14 	.word	0x00044f14
   30010:	20010e0a 	.word	0x20010e0a
   30014:	00044f38 	.word	0x00044f38
   30018:	20010618 	.word	0x20010618
   3001c:	00044f54 	.word	0x00044f54
   30020:	00044f80 	.word	0x00044f80
   30024:	00044f98 	.word	0x00044f98

00030028 <download_with_offset>:

static void download_with_offset(struct k_work *unused)
{
   30028:	b510      	push	{r4, lr}
   3002a:	b082      	sub	sp, #8
	int offset;
	int err = dfu_target_offset_get(&offset);
   3002c:	a801      	add	r0, sp, #4
   3002e:	f000 f995 	bl	3035c <dfu_target_offset_get>
	if (err != 0) {
   30032:	bb38      	cbnz	r0, 30084 <download_with_offset+0x5c>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
		return;
	}

	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   30034:	4a34      	ldr	r2, [pc, #208]	; (30108 <download_with_offset+0xe0>)
   30036:	f6a2 0018 	subw	r0, r2, #2072	; 0x818
   3003a:	f8d0 1810 	ldr.w	r1, [r0, #2064]	; 0x810
   3003e:	f7ff f927 	bl	2f290 <download_client_connect>
	if (err != 0) {
   30042:	4603      	mov	r3, r0
   30044:	2800      	cmp	r0, #0
   30046:	d134      	bne.n	300b2 <download_with_offset+0x8a>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
   30048:	4830      	ldr	r0, [pc, #192]	; (3010c <download_with_offset+0xe4>)
   3004a:	9a01      	ldr	r2, [sp, #4]
   3004c:	f8d0 1814 	ldr.w	r1, [r0, #2068]	; 0x814
   30050:	f7ff fb48 	bl	2f6e4 <download_client_start>
	if (err != 0) {
   30054:	4603      	mov	r3, r0
   30056:	2800      	cmp	r0, #0
   30058:	d140      	bne.n	300dc <download_with_offset+0xb4>
   3005a:	4b2d      	ldr	r3, [pc, #180]	; (30110 <download_with_offset+0xe8>)
   3005c:	4a2d      	ldr	r2, [pc, #180]	; (30114 <download_with_offset+0xec>)
   3005e:	1a9b      	subs	r3, r3, r2
   30060:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%s failed to start download  with error %d", __func__,
			err);
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
   30062:	f04f 0000 	mov.w	r0, #0
   30066:	2203      	movs	r2, #3
   30068:	f362 0002 	bfi	r0, r2, #0, #3
   3006c:	f36f 00c5 	bfc	r0, #3, #3
   30070:	f363 108f 	bfi	r0, r3, #6, #10
   30074:	9a01      	ldr	r2, [sp, #4]
   30076:	4928      	ldr	r1, [pc, #160]	; (30118 <download_with_offset+0xf0>)
   30078:	f00b ffe6 	bl	3c048 <log_string_sync>
	downloading = true;
   3007c:	4b27      	ldr	r3, [pc, #156]	; (3011c <download_with_offset+0xf4>)
   3007e:	2201      	movs	r2, #1
   30080:	701a      	strb	r2, [r3, #0]
	return;
   30082:	e014      	b.n	300ae <download_with_offset+0x86>
   30084:	4603      	mov	r3, r0
   30086:	4a22      	ldr	r2, [pc, #136]	; (30110 <download_with_offset+0xe8>)
   30088:	4922      	ldr	r1, [pc, #136]	; (30114 <download_with_offset+0xec>)
   3008a:	1a52      	subs	r2, r2, r1
   3008c:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   3008e:	2401      	movs	r4, #1
   30090:	f04f 0000 	mov.w	r0, #0
   30094:	f364 0002 	bfi	r0, r4, #0, #3
   30098:	f36f 00c5 	bfc	r0, #3, #3
   3009c:	f362 108f 	bfi	r0, r2, #6, #10
   300a0:	4a1f      	ldr	r2, [pc, #124]	; (30120 <download_with_offset+0xf8>)
   300a2:	4920      	ldr	r1, [pc, #128]	; (30124 <download_with_offset+0xfc>)
   300a4:	f00b ffd0 	bl	3c048 <log_string_sync>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   300a8:	4620      	mov	r0, r4
   300aa:	f7ff fe09 	bl	2fcc0 <send_error_evt>
}
   300ae:	b002      	add	sp, #8
   300b0:	bd10      	pop	{r4, pc}
   300b2:	4a17      	ldr	r2, [pc, #92]	; (30110 <download_with_offset+0xe8>)
   300b4:	4917      	ldr	r1, [pc, #92]	; (30114 <download_with_offset+0xec>)
   300b6:	1a52      	subs	r2, r2, r1
   300b8:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   300ba:	2401      	movs	r4, #1
   300bc:	f04f 0000 	mov.w	r0, #0
   300c0:	f364 0002 	bfi	r0, r4, #0, #3
   300c4:	f36f 00c5 	bfc	r0, #3, #3
   300c8:	f362 108f 	bfi	r0, r2, #6, #10
   300cc:	4a14      	ldr	r2, [pc, #80]	; (30120 <download_with_offset+0xf8>)
   300ce:	4916      	ldr	r1, [pc, #88]	; (30128 <download_with_offset+0x100>)
   300d0:	f00b ffba 	bl	3c048 <log_string_sync>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   300d4:	4620      	mov	r0, r4
   300d6:	f7ff fdf3 	bl	2fcc0 <send_error_evt>
		return;
   300da:	e7e8      	b.n	300ae <download_with_offset+0x86>
   300dc:	4a0c      	ldr	r2, [pc, #48]	; (30110 <download_with_offset+0xe8>)
   300de:	490d      	ldr	r1, [pc, #52]	; (30114 <download_with_offset+0xec>)
   300e0:	1a52      	subs	r2, r2, r1
   300e2:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("%s failed to start download  with error %d", __func__,
   300e4:	2401      	movs	r4, #1
   300e6:	f04f 0000 	mov.w	r0, #0
   300ea:	f364 0002 	bfi	r0, r4, #0, #3
   300ee:	f36f 00c5 	bfc	r0, #3, #3
   300f2:	f362 108f 	bfi	r0, r2, #6, #10
   300f6:	4a0a      	ldr	r2, [pc, #40]	; (30120 <download_with_offset+0xf8>)
   300f8:	490c      	ldr	r1, [pc, #48]	; (3012c <download_with_offset+0x104>)
   300fa:	f00b ffa5 	bl	3c048 <log_string_sync>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   300fe:	4620      	mov	r0, r4
   30100:	f7ff fdde 	bl	2fcc0 <send_error_evt>
		return;
   30104:	e7d3      	b.n	300ae <download_with_offset+0x86>
   30106:	bf00      	nop
   30108:	2000d540 	.word	0x2000d540
   3010c:	2000cd28 	.word	0x2000cd28
   30110:	00041288 	.word	0x00041288
   30114:	00041200 	.word	0x00041200
   30118:	00045044 	.word	0x00045044
   3011c:	20010e0a 	.word	0x20010e0a
   30120:	000450a0 	.word	0x000450a0
   30124:	00044fcc 	.word	0x00044fcc
   30128:	00044ff4 	.word	0x00044ff4
   3012c:	00045018 	.word	0x00045018

00030130 <fota_download_start_with_image_type>:
}

int fota_download_start_with_image_type(const char *host, const char *file,
	int sec_tag, uint8_t pdn_id, size_t fragment_size,
	const enum dfu_target_image_type expected_type)
{
   30130:	b530      	push	{r4, r5, lr}
   30132:	b085      	sub	sp, #20
   30134:	460c      	mov	r4, r1
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   30136:	2100      	movs	r1, #0
   30138:	9101      	str	r1, [sp, #4]
   3013a:	9103      	str	r1, [sp, #12]
   3013c:	9200      	str	r2, [sp, #0]
   3013e:	f88d 3004 	strb.w	r3, [sp, #4]
   30142:	9b08      	ldr	r3, [sp, #32]
   30144:	9302      	str	r3, [sp, #8]
		.sec_tag = sec_tag,
		.pdn_id = pdn_id,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   30146:	2800      	cmp	r0, #0
   30148:	d03a      	beq.n	301c0 <fota_download_start_with_image_type+0x90>
   3014a:	4605      	mov	r5, r0
   3014c:	2c00      	cmp	r4, #0
   3014e:	d03a      	beq.n	301c6 <fota_download_start_with_image_type+0x96>
   30150:	4b21      	ldr	r3, [pc, #132]	; (301d8 <fota_download_start_with_image_type+0xa8>)
   30152:	681b      	ldr	r3, [r3, #0]
   30154:	2b00      	cmp	r3, #0
   30156:	d039      	beq.n	301cc <fota_download_start_with_image_type+0x9c>
		return -EINVAL;
	}

	if (downloading) {
   30158:	4b20      	ldr	r3, [pc, #128]	; (301dc <fota_download_start_with_image_type+0xac>)
   3015a:	781b      	ldrb	r3, [r3, #0]
   3015c:	2b00      	cmp	r3, #0
   3015e:	d138      	bne.n	301d2 <fota_download_start_with_image_type+0xa2>
		return -EALREADY;
	}

	if (sec_tag != -1 && !is_ip_address(host)) {
   30160:	f1b2 3fff 	cmp.w	r2, #4294967295
   30164:	d111      	bne.n	3018a <fota_download_start_with_image_type+0x5a>
		config.set_tls_hostname = true;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   30166:	4b1e      	ldr	r3, [pc, #120]	; (301e0 <fota_download_start_with_image_type+0xb0>)
   30168:	2202      	movs	r2, #2
   3016a:	601a      	str	r2, [r3, #0]

	strncpy(file_buf, file, sizeof(file_buf));
   3016c:	22c0      	movs	r2, #192	; 0xc0
   3016e:	4621      	mov	r1, r4
   30170:	481c      	ldr	r0, [pc, #112]	; (301e4 <fota_download_start_with_image_type+0xb4>)
   30172:	f010 f88e 	bl	40292 <strncpy>
		LOG_INF("B1 update, selected file:\n%s", log_strdup(update));
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   30176:	466a      	mov	r2, sp
   30178:	4629      	mov	r1, r5
   3017a:	481b      	ldr	r0, [pc, #108]	; (301e8 <fota_download_start_with_image_type+0xb8>)
   3017c:	f7ff f888 	bl	2f290 <download_client_connect>
	if (err != 0) {
   30180:	4604      	mov	r4, r0
   30182:	b150      	cbz	r0, 3019a <fota_download_start_with_image_type+0x6a>
	}

	downloading = true;

	return 0;
}
   30184:	4620      	mov	r0, r4
   30186:	b005      	add	sp, #20
   30188:	bd30      	pop	{r4, r5, pc}
	if (sec_tag != -1 && !is_ip_address(host)) {
   3018a:	f00e fb81 	bl	3e890 <is_ip_address>
   3018e:	2800      	cmp	r0, #0
   30190:	d1e9      	bne.n	30166 <fota_download_start_with_image_type+0x36>
		config.set_tls_hostname = true;
   30192:	2301      	movs	r3, #1
   30194:	f88d 300c 	strb.w	r3, [sp, #12]
   30198:	e7e5      	b.n	30166 <fota_download_start_with_image_type+0x36>
	img_type_expected = expected_type;
   3019a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   3019e:	4b13      	ldr	r3, [pc, #76]	; (301ec <fota_download_start_with_image_type+0xbc>)
   301a0:	701a      	strb	r2, [r3, #0]
	err = download_client_start(&dlc, file_buf_ptr, 0);
   301a2:	2200      	movs	r2, #0
   301a4:	490f      	ldr	r1, [pc, #60]	; (301e4 <fota_download_start_with_image_type+0xb4>)
   301a6:	4810      	ldr	r0, [pc, #64]	; (301e8 <fota_download_start_with_image_type+0xb8>)
   301a8:	f7ff fa9c 	bl	2f6e4 <download_client_start>
	if (err != 0) {
   301ac:	4604      	mov	r4, r0
   301ae:	b918      	cbnz	r0, 301b8 <fota_download_start_with_image_type+0x88>
	downloading = true;
   301b0:	4b0a      	ldr	r3, [pc, #40]	; (301dc <fota_download_start_with_image_type+0xac>)
   301b2:	2201      	movs	r2, #1
   301b4:	701a      	strb	r2, [r3, #0]
	return 0;
   301b6:	e7e5      	b.n	30184 <fota_download_start_with_image_type+0x54>
		download_client_disconnect(&dlc);
   301b8:	480b      	ldr	r0, [pc, #44]	; (301e8 <fota_download_start_with_image_type+0xb8>)
   301ba:	f7ff f8bd 	bl	2f338 <download_client_disconnect>
		return err;
   301be:	e7e1      	b.n	30184 <fota_download_start_with_image_type+0x54>
		return -EINVAL;
   301c0:	f06f 0415 	mvn.w	r4, #21
   301c4:	e7de      	b.n	30184 <fota_download_start_with_image_type+0x54>
   301c6:	f06f 0415 	mvn.w	r4, #21
   301ca:	e7db      	b.n	30184 <fota_download_start_with_image_type+0x54>
   301cc:	f06f 0415 	mvn.w	r4, #21
   301d0:	e7d8      	b.n	30184 <fota_download_start_with_image_type+0x54>
		return -EALREADY;
   301d2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   301d6:	e7d5      	b.n	30184 <fota_download_start_with_image_type+0x54>
   301d8:	20010350 	.word	0x20010350
   301dc:	20010e0a 	.word	0x20010e0a
   301e0:	20010618 	.word	0x20010618
   301e4:	20010354 	.word	0x20010354
   301e8:	2000cd28 	.word	0x2000cd28
   301ec:	20010e0d 	.word	0x20010e0d

000301f0 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   301f0:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   301f2:	b350      	cbz	r0, 3024a <fota_download_init+0x5a>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   301f4:	4a16      	ldr	r2, [pc, #88]	; (30250 <fota_download_init+0x60>)
   301f6:	6010      	str	r0, [r2, #0]

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   301f8:	f44f 7100 	mov.w	r1, #512	; 0x200
   301fc:	4815      	ldr	r0, [pc, #84]	; (30254 <fota_download_init+0x64>)
   301fe:	f000 fbe3 	bl	309c8 <dfu_target_mcuboot_set_buf>
	if (err) {
   30202:	4604      	mov	r4, r0
   30204:	b970      	cbnz	r0, 30224 <fota_download_init+0x34>
			__func__, err);
		return err;
	}
#endif

	k_work_init_delayable(&dlc_with_offset_work, download_with_offset);
   30206:	4914      	ldr	r1, [pc, #80]	; (30258 <fota_download_init+0x68>)
   30208:	4814      	ldr	r0, [pc, #80]	; (3025c <fota_download_init+0x6c>)
   3020a:	f006 fd41 	bl	36c90 <k_work_init_delayable>

	err = download_client_init(&dlc, download_client_callback);
   3020e:	4914      	ldr	r1, [pc, #80]	; (30260 <fota_download_init+0x70>)
   30210:	4814      	ldr	r0, [pc, #80]	; (30264 <fota_download_init+0x74>)
   30212:	f7ff f80b 	bl	2f22c <download_client_init>
	if (err != 0) {
   30216:	4604      	mov	r4, r0
   30218:	b910      	cbnz	r0, 30220 <fota_download_init+0x30>
		return err;
	}

	first_fragment = true;
   3021a:	4b13      	ldr	r3, [pc, #76]	; (30268 <fota_download_init+0x78>)
   3021c:	2201      	movs	r2, #1
   3021e:	701a      	strb	r2, [r3, #0]
	return 0;
}
   30220:	4620      	mov	r0, r4
   30222:	bd10      	pop	{r4, pc}
   30224:	4b11      	ldr	r3, [pc, #68]	; (3026c <fota_download_init+0x7c>)
   30226:	4a12      	ldr	r2, [pc, #72]	; (30270 <fota_download_init+0x80>)
   30228:	1a9b      	subs	r3, r3, r2
   3022a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   3022c:	f04f 0000 	mov.w	r0, #0
   30230:	2201      	movs	r2, #1
   30232:	f362 0002 	bfi	r0, r2, #0, #3
   30236:	f36f 00c5 	bfc	r0, #3, #3
   3023a:	f363 108f 	bfi	r0, r3, #6, #10
   3023e:	4623      	mov	r3, r4
   30240:	4a0c      	ldr	r2, [pc, #48]	; (30274 <fota_download_init+0x84>)
   30242:	490d      	ldr	r1, [pc, #52]	; (30278 <fota_download_init+0x88>)
   30244:	f00b ff00 	bl	3c048 <log_string_sync>
		return err;
   30248:	e7ea      	b.n	30220 <fota_download_init+0x30>
		return -EINVAL;
   3024a:	f06f 0415 	mvn.w	r4, #21
   3024e:	e7e7      	b.n	30220 <fota_download_init+0x30>
   30250:	20010350 	.word	0x20010350
   30254:	20010418 	.word	0x20010418
   30258:	00030029 	.word	0x00030029
   3025c:	2000e5f0 	.word	0x2000e5f0
   30260:	0002fd11 	.word	0x0002fd11
   30264:	2000cd28 	.word	0x2000cd28
   30268:	20010e0b 	.word	0x20010e0b
   3026c:	00041288 	.word	0x00041288
   30270:	00041200 	.word	0x00041200
   30274:	000450b8 	.word	0x000450b8
   30278:	00045064 	.word	0x00045064

0003027c <fota_download_file_size>:
int fota_download_target(void)
{
	return img_type;
}

uint32_t fota_download_file_size(void){
   3027c:	b500      	push	{lr}
   3027e:	b083      	sub	sp, #12
	uint32_t size;
	int err;
	err = download_client_file_size_get(&dlc, &size);
   30280:	a901      	add	r1, sp, #4
   30282:	4803      	ldr	r0, [pc, #12]	; (30290 <fota_download_file_size+0x14>)
   30284:	f00e fa9f 	bl	3e7c6 <download_client_file_size_get>
	return size;
   30288:	9801      	ldr	r0, [sp, #4]
   3028a:	b003      	add	sp, #12
   3028c:	f85d fb04 	ldr.w	pc, [sp], #4
   30290:	2000cd28 	.word	0x2000cd28

00030294 <dfu_target_img_type>:

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   30294:	291f      	cmp	r1, #31
   30296:	d91d      	bls.n	302d4 <dfu_target_img_type+0x40>
{
   30298:	b510      	push	{r4, lr}
   3029a:	4604      	mov	r4, r0
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   3029c:	f000 fb8a 	bl	309b4 <dfu_target_mcuboot_identify>
   302a0:	b108      	cbz	r0, 302a6 <dfu_target_img_type+0x12>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   302a2:	2001      	movs	r0, #1
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
	return -ENOTSUP;
}
   302a4:	bd10      	pop	{r4, pc}
	if (dfu_target_modem_delta_identify(buf)) {
   302a6:	4620      	mov	r0, r4
   302a8:	f000 f9ea 	bl	30680 <dfu_target_modem_delta_identify>
   302ac:	b108      	cbz	r0, 302b2 <dfu_target_img_type+0x1e>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   302ae:	2002      	movs	r0, #2
   302b0:	e7f8      	b.n	302a4 <dfu_target_img_type+0x10>
   302b2:	4b0a      	ldr	r3, [pc, #40]	; (302dc <dfu_target_img_type+0x48>)
   302b4:	4a0a      	ldr	r2, [pc, #40]	; (302e0 <dfu_target_img_type+0x4c>)
   302b6:	1a9b      	subs	r3, r3, r2
   302b8:	08db      	lsrs	r3, r3, #3
	LOG_ERR("No supported image type found");
   302ba:	2201      	movs	r2, #1
   302bc:	f362 0002 	bfi	r0, r2, #0, #3
   302c0:	f36f 00c5 	bfc	r0, #3, #3
   302c4:	f363 108f 	bfi	r0, r3, #6, #10
   302c8:	4906      	ldr	r1, [pc, #24]	; (302e4 <dfu_target_img_type+0x50>)
   302ca:	f00b febd 	bl	3c048 <log_string_sync>
	return -ENOTSUP;
   302ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   302d2:	e7e7      	b.n	302a4 <dfu_target_img_type+0x10>
		return -EAGAIN;
   302d4:	f06f 000a 	mvn.w	r0, #10
}
   302d8:	4770      	bx	lr
   302da:	bf00      	nop
   302dc:	00041248 	.word	0x00041248
   302e0:	00041200 	.word	0x00041200
   302e4:	000450cc 	.word	0x000450cc

000302e8 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   302e8:	b510      	push	{r4, lr}
   302ea:	4603      	mov	r3, r0
   302ec:	4608      	mov	r0, r1
   302ee:	4611      	mov	r1, r2
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   302f0:	2b01      	cmp	r3, #1
   302f2:	d00c      	beq.n	3030e <dfu_target_init+0x26>
	const struct dfu_target *new_target = NULL;
   302f4:	2400      	movs	r4, #0
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   302f6:	2b02      	cmp	r3, #2
   302f8:	d00b      	beq.n	30312 <dfu_target_init+0x2a>
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
   302fa:	b164      	cbz	r4, 30316 <dfu_target_init+0x2e>
	 * Avoid re-initializing generally to ensure that the download can
	 * continue where it left off. Re-initializing is required for
	 * modem_delta upgrades to re-open the DFU socket that is closed on
	 * abort.
	 */
	if (new_target == current_target
   302fc:	4a11      	ldr	r2, [pc, #68]	; (30344 <dfu_target_init+0x5c>)
   302fe:	6812      	ldr	r2, [r2, #0]
   30300:	4294      	cmp	r4, r2
   30302:	d01b      	beq.n	3033c <dfu_target_init+0x54>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		return 0;
	}

	current_target = new_target;
   30304:	4b0f      	ldr	r3, [pc, #60]	; (30344 <dfu_target_init+0x5c>)
   30306:	601c      	str	r4, [r3, #0]

	return current_target->init(file_size, cb);
   30308:	6823      	ldr	r3, [r4, #0]
   3030a:	4798      	blx	r3
}
   3030c:	bd10      	pop	{r4, pc}
		new_target = &dfu_target_mcuboot;
   3030e:	4c0e      	ldr	r4, [pc, #56]	; (30348 <dfu_target_init+0x60>)
   30310:	e7f1      	b.n	302f6 <dfu_target_init+0xe>
		new_target = &dfu_target_modem_delta;
   30312:	4c0e      	ldr	r4, [pc, #56]	; (3034c <dfu_target_init+0x64>)
   30314:	e7f1      	b.n	302fa <dfu_target_init+0x12>
   30316:	4b0e      	ldr	r3, [pc, #56]	; (30350 <dfu_target_init+0x68>)
   30318:	4a0e      	ldr	r2, [pc, #56]	; (30354 <dfu_target_init+0x6c>)
   3031a:	1a9b      	subs	r3, r3, r2
   3031c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown image type");
   3031e:	f04f 0000 	mov.w	r0, #0
   30322:	2201      	movs	r2, #1
   30324:	f362 0002 	bfi	r0, r2, #0, #3
   30328:	f36f 00c5 	bfc	r0, #3, #3
   3032c:	f363 108f 	bfi	r0, r3, #6, #10
   30330:	4909      	ldr	r1, [pc, #36]	; (30358 <dfu_target_init+0x70>)
   30332:	f00b fe89 	bl	3c048 <log_string_sync>
		return -ENOTSUP;
   30336:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3033a:	e7e7      	b.n	3030c <dfu_target_init+0x24>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   3033c:	2b02      	cmp	r3, #2
   3033e:	d0e1      	beq.n	30304 <dfu_target_init+0x1c>
		return 0;
   30340:	2000      	movs	r0, #0
   30342:	e7e3      	b.n	3030c <dfu_target_init+0x24>
   30344:	2001061c 	.word	0x2001061c
   30348:	0004512c 	.word	0x0004512c
   3034c:	0004513c 	.word	0x0004513c
   30350:	00041248 	.word	0x00041248
   30354:	00041200 	.word	0x00041200
   30358:	000450ec 	.word	0x000450ec

0003035c <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
   3035c:	b508      	push	{r3, lr}
	if (current_target == NULL) {
   3035e:	4b04      	ldr	r3, [pc, #16]	; (30370 <dfu_target_offset_get+0x14>)
   30360:	681b      	ldr	r3, [r3, #0]
   30362:	b113      	cbz	r3, 3036a <dfu_target_offset_get+0xe>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   30364:	685b      	ldr	r3, [r3, #4]
   30366:	4798      	blx	r3
}
   30368:	bd08      	pop	{r3, pc}
		return -EACCES;
   3036a:	f06f 000c 	mvn.w	r0, #12
   3036e:	e7fb      	b.n	30368 <dfu_target_offset_get+0xc>
   30370:	2001061c 	.word	0x2001061c

00030374 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
   30374:	b508      	push	{r3, lr}
	if (current_target == NULL || buf == NULL) {
   30376:	4b06      	ldr	r3, [pc, #24]	; (30390 <dfu_target_write+0x1c>)
   30378:	681b      	ldr	r3, [r3, #0]
   3037a:	b11b      	cbz	r3, 30384 <dfu_target_write+0x10>
   3037c:	b128      	cbz	r0, 3038a <dfu_target_write+0x16>
		return -EACCES;
	}

	return current_target->write(buf, len);
   3037e:	689b      	ldr	r3, [r3, #8]
   30380:	4798      	blx	r3
}
   30382:	bd08      	pop	{r3, pc}
		return -EACCES;
   30384:	f06f 000c 	mvn.w	r0, #12
   30388:	e7fb      	b.n	30382 <dfu_target_write+0xe>
   3038a:	f06f 000c 	mvn.w	r0, #12
   3038e:	e7f8      	b.n	30382 <dfu_target_write+0xe>
   30390:	2001061c 	.word	0x2001061c

00030394 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   30394:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (current_target == NULL) {
   30396:	4b11      	ldr	r3, [pc, #68]	; (303dc <dfu_target_done+0x48>)
   30398:	681b      	ldr	r3, [r3, #0]
   3039a:	b1db      	cbz	r3, 303d4 <dfu_target_done+0x40>
   3039c:	4604      	mov	r4, r0
		return -EACCES;
	}

	err = current_target->done(successful);
   3039e:	68db      	ldr	r3, [r3, #12]
   303a0:	4798      	blx	r3
	if (err != 0) {
   303a2:	4605      	mov	r5, r0
   303a4:	b928      	cbnz	r0, 303b2 <dfu_target_done+0x1e>
		LOG_ERR("Unable to clean up dfu_target");
		return err;
	}

	if (successful) {
   303a6:	b114      	cbz	r4, 303ae <dfu_target_done+0x1a>
		current_target = NULL;
   303a8:	4b0c      	ldr	r3, [pc, #48]	; (303dc <dfu_target_done+0x48>)
   303aa:	2200      	movs	r2, #0
   303ac:	601a      	str	r2, [r3, #0]
	}

	return 0;
}
   303ae:	4628      	mov	r0, r5
   303b0:	bd38      	pop	{r3, r4, r5, pc}
   303b2:	4b0b      	ldr	r3, [pc, #44]	; (303e0 <dfu_target_done+0x4c>)
   303b4:	4a0b      	ldr	r2, [pc, #44]	; (303e4 <dfu_target_done+0x50>)
   303b6:	1a9b      	subs	r3, r3, r2
   303b8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unable to clean up dfu_target");
   303ba:	f04f 0000 	mov.w	r0, #0
   303be:	2201      	movs	r2, #1
   303c0:	f362 0002 	bfi	r0, r2, #0, #3
   303c4:	f36f 00c5 	bfc	r0, #3, #3
   303c8:	f363 108f 	bfi	r0, r3, #6, #10
   303cc:	4906      	ldr	r1, [pc, #24]	; (303e8 <dfu_target_done+0x54>)
   303ce:	f00b fe3b 	bl	3c048 <log_string_sync>
		return err;
   303d2:	e7ec      	b.n	303ae <dfu_target_done+0x1a>
		return -EACCES;
   303d4:	f06f 050c 	mvn.w	r5, #12
   303d8:	e7e9      	b.n	303ae <dfu_target_done+0x1a>
   303da:	bf00      	nop
   303dc:	2001061c 	.word	0x2001061c
   303e0:	00041248 	.word	0x00041248
   303e4:	00041200 	.word	0x00041200
   303e8:	00045100 	.word	0x00045100

000303ec <dfu_target_reset>:

int dfu_target_reset(void)
{
   303ec:	b510      	push	{r4, lr}
	if (current_target != NULL) {
   303ee:	4b0f      	ldr	r3, [pc, #60]	; (3042c <dfu_target_reset+0x40>)
   303f0:	681b      	ldr	r3, [r3, #0]
   303f2:	b123      	cbz	r3, 303fe <dfu_target_reset+0x12>
		int err = current_target->done(false);
   303f4:	68db      	ldr	r3, [r3, #12]
   303f6:	2000      	movs	r0, #0
   303f8:	4798      	blx	r3

		if (err != 0) {
   303fa:	4604      	mov	r4, r0
   303fc:	b920      	cbnz	r0, 30408 <dfu_target_reset+0x1c>
			LOG_ERR("Unable to clean up dfu_target");
			return err;
		}
	}
	current_target = NULL;
   303fe:	2400      	movs	r4, #0
   30400:	4b0a      	ldr	r3, [pc, #40]	; (3042c <dfu_target_reset+0x40>)
   30402:	601c      	str	r4, [r3, #0]
	return 0;
}
   30404:	4620      	mov	r0, r4
   30406:	bd10      	pop	{r4, pc}
   30408:	4b09      	ldr	r3, [pc, #36]	; (30430 <dfu_target_reset+0x44>)
   3040a:	4a0a      	ldr	r2, [pc, #40]	; (30434 <dfu_target_reset+0x48>)
   3040c:	1a9b      	subs	r3, r3, r2
   3040e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to clean up dfu_target");
   30410:	f04f 0000 	mov.w	r0, #0
   30414:	2201      	movs	r2, #1
   30416:	f362 0002 	bfi	r0, r2, #0, #3
   3041a:	f36f 00c5 	bfc	r0, #3, #3
   3041e:	f363 108f 	bfi	r0, r3, #6, #10
   30422:	4905      	ldr	r1, [pc, #20]	; (30438 <dfu_target_reset+0x4c>)
   30424:	f00b fe10 	bl	3c048 <log_string_sync>
			return err;
   30428:	e7ec      	b.n	30404 <dfu_target_reset+0x18>
   3042a:	bf00      	nop
   3042c:	2001061c 	.word	0x2001061c
   30430:	00041248 	.word	0x00041248
   30434:	00041200 	.word	0x00041200
   30438:	00045100 	.word	0x00045100

0003043c <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   3043c:	4800      	ldr	r0, [pc, #0]	; (30440 <dfu_target_stream_get_stream+0x4>)
   3043e:	4770      	bx	lr
   30440:	20010624 	.word	0x20010624

00030444 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   30444:	b510      	push	{r4, lr}
   30446:	b084      	sub	sp, #16
	int err;

	if (current_id != NULL) {
   30448:	4b1d      	ldr	r3, [pc, #116]	; (304c0 <dfu_target_stream_init+0x7c>)
   3044a:	681b      	ldr	r3, [r3, #0]
   3044c:	bb4b      	cbnz	r3, 304a2 <dfu_target_stream_init+0x5e>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   3044e:	b358      	cbz	r0, 304a8 <dfu_target_stream_init+0x64>
   30450:	6803      	ldr	r3, [r0, #0]
   30452:	b363      	cbz	r3, 304ae <dfu_target_stream_init+0x6a>
   30454:	6841      	ldr	r1, [r0, #4]
   30456:	b369      	cbz	r1, 304b4 <dfu_target_stream_init+0x70>
	    init->buf == NULL) {
   30458:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   3045a:	b372      	cbz	r2, 304ba <dfu_target_stream_init+0x76>
		return -EINVAL;
	}

	current_id = init->id;
   3045c:	4c18      	ldr	r4, [pc, #96]	; (304c0 <dfu_target_stream_init+0x7c>)
   3045e:	6023      	str	r3, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   30460:	2300      	movs	r3, #0
   30462:	9302      	str	r3, [sp, #8]
   30464:	6943      	ldr	r3, [r0, #20]
   30466:	9301      	str	r3, [sp, #4]
   30468:	6903      	ldr	r3, [r0, #16]
   3046a:	9300      	str	r3, [sp, #0]
   3046c:	68c3      	ldr	r3, [r0, #12]
   3046e:	4815      	ldr	r0, [pc, #84]	; (304c4 <dfu_target_stream_init+0x80>)
   30470:	f7f6 fe92 	bl	27198 <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   30474:	4604      	mov	r4, r0
   30476:	b910      	cbnz	r0, 3047e <dfu_target_stream_init+0x3a>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   30478:	4620      	mov	r0, r4
   3047a:	b004      	add	sp, #16
   3047c:	bd10      	pop	{r4, pc}
   3047e:	4b12      	ldr	r3, [pc, #72]	; (304c8 <dfu_target_stream_init+0x84>)
   30480:	4a12      	ldr	r2, [pc, #72]	; (304cc <dfu_target_stream_init+0x88>)
   30482:	1a9b      	subs	r3, r3, r2
   30484:	08db      	lsrs	r3, r3, #3
		LOG_ERR("stream_flash_init failed (err %d)", err);
   30486:	f04f 0000 	mov.w	r0, #0
   3048a:	2201      	movs	r2, #1
   3048c:	f362 0002 	bfi	r0, r2, #0, #3
   30490:	f36f 00c5 	bfc	r0, #3, #3
   30494:	f363 108f 	bfi	r0, r3, #6, #10
   30498:	4622      	mov	r2, r4
   3049a:	490d      	ldr	r1, [pc, #52]	; (304d0 <dfu_target_stream_init+0x8c>)
   3049c:	f00b fdd4 	bl	3c048 <log_string_sync>
		return err;
   304a0:	e7ea      	b.n	30478 <dfu_target_stream_init+0x34>
		return -EFAULT;
   304a2:	f06f 040d 	mvn.w	r4, #13
   304a6:	e7e7      	b.n	30478 <dfu_target_stream_init+0x34>
		return -EINVAL;
   304a8:	f06f 0415 	mvn.w	r4, #21
   304ac:	e7e4      	b.n	30478 <dfu_target_stream_init+0x34>
   304ae:	f06f 0415 	mvn.w	r4, #21
   304b2:	e7e1      	b.n	30478 <dfu_target_stream_init+0x34>
   304b4:	f06f 0415 	mvn.w	r4, #21
   304b8:	e7de      	b.n	30478 <dfu_target_stream_init+0x34>
   304ba:	f06f 0415 	mvn.w	r4, #21
   304be:	e7db      	b.n	30478 <dfu_target_stream_init+0x34>
   304c0:	20010620 	.word	0x20010620
   304c4:	20010624 	.word	0x20010624
   304c8:	00041260 	.word	0x00041260
   304cc:	00041200 	.word	0x00041200
   304d0:	0004514c 	.word	0x0004514c

000304d4 <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   304d4:	b510      	push	{r4, lr}
   304d6:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   304d8:	4802      	ldr	r0, [pc, #8]	; (304e4 <dfu_target_stream_offset_get+0x10>)
   304da:	f00c f8a9 	bl	3c630 <stream_flash_bytes_written>
   304de:	6020      	str	r0, [r4, #0]

	return 0;
}
   304e0:	2000      	movs	r0, #0
   304e2:	bd10      	pop	{r4, pc}
   304e4:	20010624 	.word	0x20010624

000304e8 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   304e8:	b510      	push	{r4, lr}
   304ea:	460a      	mov	r2, r1
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   304ec:	2300      	movs	r3, #0
   304ee:	4601      	mov	r1, r0
   304f0:	480c      	ldr	r0, [pc, #48]	; (30524 <dfu_target_stream_write+0x3c>)
   304f2:	f00c f855 	bl	3c5a0 <stream_flash_buffered_write>

	if (err != 0) {
   304f6:	4604      	mov	r4, r0
   304f8:	b908      	cbnz	r0, 304fe <dfu_target_stream_write+0x16>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   304fa:	4620      	mov	r0, r4
   304fc:	bd10      	pop	{r4, pc}
   304fe:	4b0a      	ldr	r3, [pc, #40]	; (30528 <dfu_target_stream_write+0x40>)
   30500:	4a0a      	ldr	r2, [pc, #40]	; (3052c <dfu_target_stream_write+0x44>)
   30502:	1a9b      	subs	r3, r3, r2
   30504:	08db      	lsrs	r3, r3, #3
		LOG_ERR("stream_flash_buffered_write error %d", err);
   30506:	f04f 0000 	mov.w	r0, #0
   3050a:	2201      	movs	r2, #1
   3050c:	f362 0002 	bfi	r0, r2, #0, #3
   30510:	f36f 00c5 	bfc	r0, #3, #3
   30514:	f363 108f 	bfi	r0, r3, #6, #10
   30518:	4622      	mov	r2, r4
   3051a:	4905      	ldr	r1, [pc, #20]	; (30530 <dfu_target_stream_write+0x48>)
   3051c:	f00b fd94 	bl	3c048 <log_string_sync>
		return err;
   30520:	e7eb      	b.n	304fa <dfu_target_stream_write+0x12>
   30522:	bf00      	nop
   30524:	20010624 	.word	0x20010624
   30528:	00041260 	.word	0x00041260
   3052c:	00041200 	.word	0x00041200
   30530:	00045170 	.word	0x00045170

00030534 <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   30534:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   30536:	b928      	cbnz	r0, 30544 <dfu_target_stream_done+0x10>
	int err = 0;
   30538:	2400      	movs	r4, #0
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   3053a:	4b10      	ldr	r3, [pc, #64]	; (3057c <dfu_target_stream_done+0x48>)
   3053c:	2200      	movs	r2, #0
   3053e:	601a      	str	r2, [r3, #0]

	return err;
}
   30540:	4620      	mov	r0, r4
   30542:	bd10      	pop	{r4, pc}
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   30544:	2301      	movs	r3, #1
   30546:	2200      	movs	r2, #0
   30548:	4611      	mov	r1, r2
   3054a:	480d      	ldr	r0, [pc, #52]	; (30580 <dfu_target_stream_done+0x4c>)
   3054c:	f00c f828 	bl	3c5a0 <stream_flash_buffered_write>
		if (err != 0) {
   30550:	4604      	mov	r4, r0
   30552:	2800      	cmp	r0, #0
   30554:	d0f1      	beq.n	3053a <dfu_target_stream_done+0x6>
   30556:	4b0b      	ldr	r3, [pc, #44]	; (30584 <dfu_target_stream_done+0x50>)
   30558:	4a0b      	ldr	r2, [pc, #44]	; (30588 <dfu_target_stream_done+0x54>)
   3055a:	1a9b      	subs	r3, r3, r2
   3055c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("stream_flash_buffered_write error %d", err);
   3055e:	f04f 0000 	mov.w	r0, #0
   30562:	2201      	movs	r2, #1
   30564:	f362 0002 	bfi	r0, r2, #0, #3
   30568:	f36f 00c5 	bfc	r0, #3, #3
   3056c:	f363 108f 	bfi	r0, r3, #6, #10
   30570:	4622      	mov	r2, r4
   30572:	4906      	ldr	r1, [pc, #24]	; (3058c <dfu_target_stream_done+0x58>)
   30574:	f00b fd68 	bl	3c048 <log_string_sync>
   30578:	e7df      	b.n	3053a <dfu_target_stream_done+0x6>
   3057a:	bf00      	nop
   3057c:	20010620 	.word	0x20010620
   30580:	20010624 	.word	0x20010624
   30584:	00041260 	.word	0x00041260
   30588:	00041200 	.word	0x00041200
   3058c:	00045170 	.word	0x00045170

00030590 <delete_banked_modem_delta_fw>:

static dfu_target_callback_t callback;

#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
   30590:	b570      	push	{r4, r5, r6, lr}
   30592:	b082      	sub	sp, #8
   30594:	4b33      	ldr	r3, [pc, #204]	; (30664 <delete_banked_modem_delta_fw+0xd4>)
   30596:	4a34      	ldr	r2, [pc, #208]	; (30668 <delete_banked_modem_delta_fw+0xd8>)
   30598:	1a9b      	subs	r3, r3, r2
   3059a:	08db      	lsrs	r3, r3, #3
	int err;
	int offset;
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   3059c:	f04f 0000 	mov.w	r0, #0
   305a0:	2203      	movs	r2, #3
   305a2:	f362 0002 	bfi	r0, r2, #0, #3
   305a6:	f36f 00c5 	bfc	r0, #3, #3
   305aa:	f363 108f 	bfi	r0, r3, #6, #10
   305ae:	492f      	ldr	r1, [pc, #188]	; (3066c <delete_banked_modem_delta_fw+0xdc>)
   305b0:	f00b fd4a 	bl	3c048 <log_string_sync>
	err = nrf_modem_delta_dfu_erase();
   305b4:	f004 fe2a 	bl	3520c <nrf_modem_delta_dfu_erase>
	if (err != 0) {
   305b8:	b908      	cbnz	r0, 305be <delete_banked_modem_delta_fw+0x2e>
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   305ba:	243c      	movs	r4, #60	; 0x3c
   305bc:	e02f      	b.n	3061e <delete_banked_modem_delta_fw+0x8e>
   305be:	4602      	mov	r2, r0
   305c0:	4b28      	ldr	r3, [pc, #160]	; (30664 <delete_banked_modem_delta_fw+0xd4>)
   305c2:	4929      	ldr	r1, [pc, #164]	; (30668 <delete_banked_modem_delta_fw+0xd8>)
   305c4:	1a5b      	subs	r3, r3, r1
   305c6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to delete backup, error %d", err);
   305c8:	f04f 0000 	mov.w	r0, #0
   305cc:	2101      	movs	r1, #1
   305ce:	f361 0002 	bfi	r0, r1, #0, #3
   305d2:	f36f 00c5 	bfc	r0, #3, #3
   305d6:	f363 108f 	bfi	r0, r3, #6, #10
   305da:	4925      	ldr	r1, [pc, #148]	; (30670 <delete_banked_modem_delta_fw+0xe0>)
   305dc:	f00b fd34 	bl	3c048 <log_string_sync>
		return -EFAULT;
   305e0:	f06f 050d 	mvn.w	r5, #13
   305e4:	e03b      	b.n	3065e <delete_banked_modem_delta_fw+0xce>

	while (true) {
		err = nrf_modem_delta_dfu_offset(&offset);
		if (err != 0) {
			if (timeout < 0) {
				callback(DFU_TARGET_EVT_TIMEOUT);
   305e6:	4b23      	ldr	r3, [pc, #140]	; (30674 <delete_banked_modem_delta_fw+0xe4>)
   305e8:	681b      	ldr	r3, [r3, #0]
   305ea:	2000      	movs	r0, #0
   305ec:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   305ee:	243c      	movs	r4, #60	; 0x3c
   305f0:	e01c      	b.n	3062c <delete_banked_modem_delta_fw+0x9c>
   305f2:	4b1c      	ldr	r3, [pc, #112]	; (30664 <delete_banked_modem_delta_fw+0xd4>)
   305f4:	4a1c      	ldr	r2, [pc, #112]	; (30668 <delete_banked_modem_delta_fw+0xd8>)
   305f6:	1a9b      	subs	r3, r3, r2
   305f8:	08db      	lsrs	r3, r3, #3
			}
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
			    err != NRF_MODEM_DELTA_DFU_INVALID_DATA) {
				LOG_ERR("Error during erase, error %d", err);
   305fa:	2201      	movs	r2, #1
   305fc:	f362 0602 	bfi	r6, r2, #0, #3
   30600:	f36f 06c5 	bfc	r6, #3, #3
   30604:	f363 168f 	bfi	r6, r3, #6, #10
   30608:	462a      	mov	r2, r5
   3060a:	491b      	ldr	r1, [pc, #108]	; (30678 <delete_banked_modem_delta_fw+0xe8>)
   3060c:	4630      	mov	r0, r6
   3060e:	f00b fd1b 	bl	3c048 <log_string_sync>
	return z_impl_k_sleep(timeout);
   30612:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   30616:	2100      	movs	r1, #0
   30618:	f007 fd66 	bl	380e8 <z_impl_k_sleep>
			}
			k_sleep(K_SECONDS(SLEEP_TIME));
			timeout -= SLEEP_TIME;
   3061c:	3c01      	subs	r4, #1
		err = nrf_modem_delta_dfu_offset(&offset);
   3061e:	a801      	add	r0, sp, #4
   30620:	f004 fce2 	bl	34fe8 <nrf_modem_delta_dfu_offset>
		if (err != 0) {
   30624:	4605      	mov	r5, r0
   30626:	b130      	cbz	r0, 30636 <delete_banked_modem_delta_fw+0xa6>
			if (timeout < 0) {
   30628:	2c00      	cmp	r4, #0
   3062a:	dbdc      	blt.n	305e6 <delete_banked_modem_delta_fw+0x56>
			if (err != NRF_MODEM_DELTA_DFU_ERASE_PENDING &&
   3062c:	2d11      	cmp	r5, #17
   3062e:	d0f0      	beq.n	30612 <delete_banked_modem_delta_fw+0x82>
   30630:	2d05      	cmp	r5, #5
   30632:	d0ee      	beq.n	30612 <delete_banked_modem_delta_fw+0x82>
   30634:	e7dd      	b.n	305f2 <delete_banked_modem_delta_fw+0x62>
		} else {
			callback(DFU_TARGET_EVT_ERASE_DONE);
   30636:	4b0f      	ldr	r3, [pc, #60]	; (30674 <delete_banked_modem_delta_fw+0xe4>)
   30638:	681b      	ldr	r3, [r3, #0]
   3063a:	2001      	movs	r0, #1
   3063c:	4798      	blx	r3
   3063e:	4b09      	ldr	r3, [pc, #36]	; (30664 <delete_banked_modem_delta_fw+0xd4>)
   30640:	4a09      	ldr	r2, [pc, #36]	; (30668 <delete_banked_modem_delta_fw+0xd8>)
   30642:	1a9b      	subs	r3, r3, r2
   30644:	08db      	lsrs	r3, r3, #3
			LOG_INF("Modem FW delete complete");
   30646:	f04f 0000 	mov.w	r0, #0
   3064a:	2203      	movs	r2, #3
   3064c:	f362 0002 	bfi	r0, r2, #0, #3
   30650:	f36f 00c5 	bfc	r0, #3, #3
   30654:	f363 108f 	bfi	r0, r3, #6, #10
   30658:	4908      	ldr	r1, [pc, #32]	; (3067c <delete_banked_modem_delta_fw+0xec>)
   3065a:	f00b fcf5 	bl	3c048 <log_string_sync>
			break;
		}
	}

	return 0;
}
   3065e:	4628      	mov	r0, r5
   30660:	b002      	add	sp, #8
   30662:	bd70      	pop	{r4, r5, r6, pc}
   30664:	00041258 	.word	0x00041258
   30668:	00041200 	.word	0x00041200
   3066c:	000451ac 	.word	0x000451ac
   30670:	000451e4 	.word	0x000451e4
   30674:	20010648 	.word	0x20010648
   30678:	00045208 	.word	0x00045208
   3067c:	00045228 	.word	0x00045228

00030680 <dfu_target_modem_delta_identify>:

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   30680:	6840      	ldr	r0, [r0, #4]
}
   30682:	4b03      	ldr	r3, [pc, #12]	; (30690 <dfu_target_modem_delta_identify+0x10>)
   30684:	4298      	cmp	r0, r3
   30686:	bf14      	ite	ne
   30688:	2000      	movne	r0, #0
   3068a:	2001      	moveq	r0, #1
   3068c:	4770      	bx	lr
   3068e:	bf00      	nop
   30690:	7544656d 	.word	0x7544656d

00030694 <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, dfu_target_callback_t cb)
{
   30694:	b530      	push	{r4, r5, lr}
   30696:	b099      	sub	sp, #100	; 0x64
   30698:	4605      	mov	r5, r0
	int offset;
	size_t scratch_space;
	struct nrf_modem_delta_dfu_uuid version;
	char version_string[NRF_MODEM_DELTA_DFU_UUID_LEN+1];

	callback = cb;
   3069a:	4b44      	ldr	r3, [pc, #272]	; (307ac <dfu_target_modem_delta_init+0x118>)
   3069c:	6019      	str	r1, [r3, #0]

	/* Retrieve and print modem firmware UUID */
	err = nrf_modem_delta_dfu_uuid(&version);
   3069e:	a80d      	add	r0, sp, #52	; 0x34
   306a0:	f004 fcee 	bl	35080 <nrf_modem_delta_dfu_uuid>
	if (err != 0) {
   306a4:	bb78      	cbnz	r0, 30706 <dfu_target_modem_delta_init+0x72>
		LOG_ERR("Firmware version request failed, error %d", err);
		return -EFAULT;
	}

	snprintf(version_string, sizeof(version_string), "%.*s",
   306a6:	ab0d      	add	r3, sp, #52	; 0x34
   306a8:	9300      	str	r3, [sp, #0]
   306aa:	2324      	movs	r3, #36	; 0x24
   306ac:	4a40      	ldr	r2, [pc, #256]	; (307b0 <dfu_target_modem_delta_init+0x11c>)
   306ae:	2125      	movs	r1, #37	; 0x25
   306b0:	a803      	add	r0, sp, #12
   306b2:	f009 fe87 	bl	3a3c4 <sniprintf>
   306b6:	4b3f      	ldr	r3, [pc, #252]	; (307b4 <dfu_target_modem_delta_init+0x120>)
   306b8:	4a3f      	ldr	r2, [pc, #252]	; (307b8 <dfu_target_modem_delta_init+0x124>)
   306ba:	1a9b      	subs	r3, r3, r2
   306bc:	08db      	lsrs	r3, r3, #3
		 sizeof(version.data), version.data);

	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   306be:	f04f 0400 	mov.w	r4, #0
   306c2:	2203      	movs	r2, #3
   306c4:	f362 0402 	bfi	r4, r2, #0, #3
   306c8:	f36f 04c5 	bfc	r4, #3, #3
   306cc:	f363 148f 	bfi	r4, r3, #6, #10
   306d0:	a803      	add	r0, sp, #12
   306d2:	f00b fccd 	bl	3c070 <z_log_strdup>
   306d6:	4602      	mov	r2, r0
   306d8:	4938      	ldr	r1, [pc, #224]	; (307bc <dfu_target_modem_delta_init+0x128>)
   306da:	4620      	mov	r0, r4
   306dc:	f00b fcb4 	bl	3c048 <log_string_sync>

	/* Check if scratch area is big enough for downloaded image */
	err = nrf_modem_delta_dfu_area(&scratch_space);
   306e0:	a816      	add	r0, sp, #88	; 0x58
   306e2:	f004 fca7 	bl	35034 <nrf_modem_delta_dfu_area>
	if (err != 0) {
   306e6:	4602      	mov	r2, r0
   306e8:	bb08      	cbnz	r0, 3072e <dfu_target_modem_delta_init+0x9a>
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
		return -EFAULT;
	}

	if (file_size > scratch_space) {
   306ea:	9b16      	ldr	r3, [sp, #88]	; 0x58
   306ec:	42ab      	cmp	r3, r5
   306ee:	d331      	bcc.n	30754 <dfu_target_modem_delta_init+0xc0>
			file_size, scratch_space);
		return -EFBIG;
	}

	/* Check offset and erase firmware if necessary */
	err = nrf_modem_delta_dfu_offset(&offset);
   306f0:	a817      	add	r0, sp, #92	; 0x5c
   306f2:	f004 fc79 	bl	34fe8 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   306f6:	2800      	cmp	r0, #0
   306f8:	d140      	bne.n	3077c <dfu_target_modem_delta_init+0xe8>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
		return -EFAULT;
	}

	if (offset == NRF_MODEM_DELTA_DFU_OFFSET_DIRTY) {
   306fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   306fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
   30700:	d051      	beq.n	307a6 <dfu_target_modem_delta_init+0x112>
		err = delete_banked_modem_delta_fw();
		return err;
	}

	return 0;
}
   30702:	b019      	add	sp, #100	; 0x64
   30704:	bd30      	pop	{r4, r5, pc}
   30706:	4602      	mov	r2, r0
   30708:	4b2a      	ldr	r3, [pc, #168]	; (307b4 <dfu_target_modem_delta_init+0x120>)
   3070a:	492b      	ldr	r1, [pc, #172]	; (307b8 <dfu_target_modem_delta_init+0x124>)
   3070c:	1a5b      	subs	r3, r3, r1
   3070e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Firmware version request failed, error %d", err);
   30710:	f04f 0000 	mov.w	r0, #0
   30714:	2101      	movs	r1, #1
   30716:	f361 0002 	bfi	r0, r1, #0, #3
   3071a:	f36f 00c5 	bfc	r0, #3, #3
   3071e:	f363 108f 	bfi	r0, r3, #6, #10
   30722:	4927      	ldr	r1, [pc, #156]	; (307c0 <dfu_target_modem_delta_init+0x12c>)
   30724:	f00b fc90 	bl	3c048 <log_string_sync>
		return -EFAULT;
   30728:	f06f 000d 	mvn.w	r0, #13
   3072c:	e7e9      	b.n	30702 <dfu_target_modem_delta_init+0x6e>
   3072e:	4b21      	ldr	r3, [pc, #132]	; (307b4 <dfu_target_modem_delta_init+0x120>)
   30730:	4921      	ldr	r1, [pc, #132]	; (307b8 <dfu_target_modem_delta_init+0x124>)
   30732:	1a5b      	subs	r3, r3, r1
   30734:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to retrieve size of modem DFU area, error %d", err);
   30736:	f04f 0000 	mov.w	r0, #0
   3073a:	2101      	movs	r1, #1
   3073c:	f361 0002 	bfi	r0, r1, #0, #3
   30740:	f36f 00c5 	bfc	r0, #3, #3
   30744:	f363 108f 	bfi	r0, r3, #6, #10
   30748:	491e      	ldr	r1, [pc, #120]	; (307c4 <dfu_target_modem_delta_init+0x130>)
   3074a:	f00b fc7d 	bl	3c048 <log_string_sync>
		return -EFAULT;
   3074e:	f06f 000d 	mvn.w	r0, #13
   30752:	e7d6      	b.n	30702 <dfu_target_modem_delta_init+0x6e>
   30754:	4a17      	ldr	r2, [pc, #92]	; (307b4 <dfu_target_modem_delta_init+0x120>)
   30756:	4918      	ldr	r1, [pc, #96]	; (307b8 <dfu_target_modem_delta_init+0x124>)
   30758:	1a52      	subs	r2, r2, r1
   3075a:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   3075c:	f04f 0000 	mov.w	r0, #0
   30760:	2101      	movs	r1, #1
   30762:	f361 0002 	bfi	r0, r1, #0, #3
   30766:	f36f 00c5 	bfc	r0, #3, #3
   3076a:	f362 108f 	bfi	r0, r2, #6, #10
   3076e:	462a      	mov	r2, r5
   30770:	4915      	ldr	r1, [pc, #84]	; (307c8 <dfu_target_modem_delta_init+0x134>)
   30772:	f00b fc69 	bl	3c048 <log_string_sync>
		return -EFBIG;
   30776:	f06f 001a 	mvn.w	r0, #26
   3077a:	e7c2      	b.n	30702 <dfu_target_modem_delta_init+0x6e>
   3077c:	4b0d      	ldr	r3, [pc, #52]	; (307b4 <dfu_target_modem_delta_init+0x120>)
   3077e:	4a0e      	ldr	r2, [pc, #56]	; (307b8 <dfu_target_modem_delta_init+0x124>)
   30780:	1a9b      	subs	r3, r3, r2
   30782:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   30784:	f04f 0400 	mov.w	r4, #0
   30788:	2201      	movs	r2, #1
   3078a:	f362 0402 	bfi	r4, r2, #0, #3
   3078e:	f36f 04c5 	bfc	r4, #3, #3
   30792:	f363 148f 	bfi	r4, r3, #6, #10
   30796:	4602      	mov	r2, r0
   30798:	490c      	ldr	r1, [pc, #48]	; (307cc <dfu_target_modem_delta_init+0x138>)
   3079a:	4620      	mov	r0, r4
   3079c:	f00b fc54 	bl	3c048 <log_string_sync>
		return -EFAULT;
   307a0:	f06f 000d 	mvn.w	r0, #13
   307a4:	e7ad      	b.n	30702 <dfu_target_modem_delta_init+0x6e>
		err = delete_banked_modem_delta_fw();
   307a6:	f7ff fef3 	bl	30590 <delete_banked_modem_delta_fw>
		return err;
   307aa:	e7aa      	b.n	30702 <dfu_target_modem_delta_init+0x6e>
   307ac:	20010648 	.word	0x20010648
   307b0:	00045270 	.word	0x00045270
   307b4:	00041258 	.word	0x00041258
   307b8:	00041200 	.word	0x00041200
   307bc:	00045278 	.word	0x00045278
   307c0:	00045244 	.word	0x00045244
   307c4:	00045294 	.word	0x00045294
   307c8:	000452c8 	.word	0x000452c8
   307cc:	000452f8 	.word	0x000452f8

000307d0 <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
   307d0:	b510      	push	{r4, lr}
	int err;

	err = nrf_modem_delta_dfu_offset(out);
   307d2:	f004 fc09 	bl	34fe8 <nrf_modem_delta_dfu_offset>
	if (err != 0) {
   307d6:	b900      	cbnz	r0, 307da <dfu_target_modem_delta_offset_get+0xa>
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
		return -EFAULT;
	}

	return 0;
}
   307d8:	bd10      	pop	{r4, pc}
   307da:	4b0a      	ldr	r3, [pc, #40]	; (30804 <dfu_target_modem_delta_offset_get+0x34>)
   307dc:	4a0a      	ldr	r2, [pc, #40]	; (30808 <dfu_target_modem_delta_offset_get+0x38>)
   307de:	1a9b      	subs	r3, r3, r2
   307e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to retrieve offset in scratch area, error %d", err);
   307e2:	f04f 0400 	mov.w	r4, #0
   307e6:	2201      	movs	r2, #1
   307e8:	f362 0402 	bfi	r4, r2, #0, #3
   307ec:	f36f 04c5 	bfc	r4, #3, #3
   307f0:	f363 148f 	bfi	r4, r3, #6, #10
   307f4:	4602      	mov	r2, r0
   307f6:	4905      	ldr	r1, [pc, #20]	; (3080c <dfu_target_modem_delta_offset_get+0x3c>)
   307f8:	4620      	mov	r0, r4
   307fa:	f00b fc25 	bl	3c048 <log_string_sync>
		return -EFAULT;
   307fe:	f06f 000d 	mvn.w	r0, #13
   30802:	e7e9      	b.n	307d8 <dfu_target_modem_delta_offset_get+0x8>
   30804:	00041258 	.word	0x00041258
   30808:	00041200 	.word	0x00041200
   3080c:	000452f8 	.word	0x000452f8

00030810 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   30810:	b570      	push	{r4, r5, r6, lr}
   30812:	4605      	mov	r5, r0
   30814:	460e      	mov	r6, r1
	int err;

	err = nrf_modem_delta_dfu_write_init();
   30816:	f004 fc5f 	bl	350d8 <nrf_modem_delta_dfu_write_init>
	if (err != 0 && err != -NRF_EALREADY) {
   3081a:	b118      	cbz	r0, 30824 <dfu_target_modem_delta_write+0x14>
   3081c:	4602      	mov	r2, r0
   3081e:	f110 0f78 	cmn.w	r0, #120	; 0x78
   30822:	d109      	bne.n	30838 <dfu_target_modem_delta_write+0x28>
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
		return -EFAULT;
	}

	err = nrf_modem_delta_dfu_write(buf, len);
   30824:	4631      	mov	r1, r6
   30826:	4628      	mov	r0, r5
   30828:	f004 fc84 	bl	35134 <nrf_modem_delta_dfu_write>
	if (err < 0) {
   3082c:	1e04      	subs	r4, r0, #0
   3082e:	db16      	blt.n	3085e <dfu_target_modem_delta_write+0x4e>
		LOG_ERR("Write failed, modem library error %d", err);
		return -EFAULT;
	} else if (err > 0) {
   30830:	2c00      	cmp	r4, #0
   30832:	dc28      	bgt.n	30886 <dfu_target_modem_delta_write+0x76>
		default:
			return -EFAULT;
		}
	}

	return 0;
   30834:	2000      	movs	r0, #0
}
   30836:	bd70      	pop	{r4, r5, r6, pc}
   30838:	4b27      	ldr	r3, [pc, #156]	; (308d8 <dfu_target_modem_delta_write+0xc8>)
   3083a:	4928      	ldr	r1, [pc, #160]	; (308dc <dfu_target_modem_delta_write+0xcc>)
   3083c:	1a5b      	subs	r3, r3, r1
   3083e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to ready modem for firmware update receival, error %d", err);
   30840:	f04f 0000 	mov.w	r0, #0
   30844:	2101      	movs	r1, #1
   30846:	f361 0002 	bfi	r0, r1, #0, #3
   3084a:	f36f 00c5 	bfc	r0, #3, #3
   3084e:	f363 108f 	bfi	r0, r3, #6, #10
   30852:	4923      	ldr	r1, [pc, #140]	; (308e0 <dfu_target_modem_delta_write+0xd0>)
   30854:	f00b fbf8 	bl	3c048 <log_string_sync>
		return -EFAULT;
   30858:	f06f 000d 	mvn.w	r0, #13
   3085c:	e7eb      	b.n	30836 <dfu_target_modem_delta_write+0x26>
   3085e:	4b1e      	ldr	r3, [pc, #120]	; (308d8 <dfu_target_modem_delta_write+0xc8>)
   30860:	4a1e      	ldr	r2, [pc, #120]	; (308dc <dfu_target_modem_delta_write+0xcc>)
   30862:	1a9b      	subs	r3, r3, r2
   30864:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Write failed, modem library error %d", err);
   30866:	f04f 0000 	mov.w	r0, #0
   3086a:	2201      	movs	r2, #1
   3086c:	f362 0002 	bfi	r0, r2, #0, #3
   30870:	f36f 00c5 	bfc	r0, #3, #3
   30874:	f363 108f 	bfi	r0, r3, #6, #10
   30878:	4622      	mov	r2, r4
   3087a:	491a      	ldr	r1, [pc, #104]	; (308e4 <dfu_target_modem_delta_write+0xd4>)
   3087c:	f00b fbe4 	bl	3c048 <log_string_sync>
		return -EFAULT;
   30880:	f06f 000d 	mvn.w	r0, #13
   30884:	e7d7      	b.n	30836 <dfu_target_modem_delta_write+0x26>
   30886:	4b14      	ldr	r3, [pc, #80]	; (308d8 <dfu_target_modem_delta_write+0xc8>)
   30888:	4a14      	ldr	r2, [pc, #80]	; (308dc <dfu_target_modem_delta_write+0xcc>)
   3088a:	1a9b      	subs	r3, r3, r2
   3088c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Write failed, modem error %d", err);
   3088e:	f04f 0000 	mov.w	r0, #0
   30892:	2201      	movs	r2, #1
   30894:	f362 0002 	bfi	r0, r2, #0, #3
   30898:	f36f 00c5 	bfc	r0, #3, #3
   3089c:	f363 108f 	bfi	r0, r3, #6, #10
   308a0:	4622      	mov	r2, r4
   308a2:	4911      	ldr	r1, [pc, #68]	; (308e8 <dfu_target_modem_delta_write+0xd8>)
   308a4:	f00b fbd0 	bl	3c048 <log_string_sync>
		switch (err) {
   308a8:	2c0b      	cmp	r4, #11
   308aa:	d009      	beq.n	308c0 <dfu_target_modem_delta_write+0xb0>
   308ac:	2c0e      	cmp	r4, #14
   308ae:	d007      	beq.n	308c0 <dfu_target_modem_delta_write+0xb0>
   308b0:	2c09      	cmp	r4, #9
   308b2:	d002      	beq.n	308ba <dfu_target_modem_delta_write+0xaa>
			return -EFAULT;
   308b4:	f06f 000d 	mvn.w	r0, #13
   308b8:	e7bd      	b.n	30836 <dfu_target_modem_delta_write+0x26>
		switch (err) {
   308ba:	f06f 0015 	mvn.w	r0, #21
   308be:	e7ba      	b.n	30836 <dfu_target_modem_delta_write+0x26>
			delete_banked_modem_delta_fw();
   308c0:	f7ff fe66 	bl	30590 <delete_banked_modem_delta_fw>
			err = dfu_target_modem_delta_write(buf, len);
   308c4:	4631      	mov	r1, r6
   308c6:	4628      	mov	r0, r5
   308c8:	f7ff ffa2 	bl	30810 <dfu_target_modem_delta_write>
			if (err != 0) {
   308cc:	2800      	cmp	r0, #0
   308ce:	d0b2      	beq.n	30836 <dfu_target_modem_delta_write+0x26>
				return -EINVAL;
   308d0:	f06f 0015 	mvn.w	r0, #21
   308d4:	e7af      	b.n	30836 <dfu_target_modem_delta_write+0x26>
   308d6:	bf00      	nop
   308d8:	00041258 	.word	0x00041258
   308dc:	00041200 	.word	0x00041200
   308e0:	0004532c 	.word	0x0004532c
   308e4:	0004536c 	.word	0x0004536c
   308e8:	00045394 	.word	0x00045394

000308ec <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   308ec:	b538      	push	{r3, r4, r5, lr}
   308ee:	4604      	mov	r4, r0
	int err;

	err = nrf_modem_delta_dfu_write_done();
   308f0:	f004 fc4e 	bl	35190 <nrf_modem_delta_dfu_write_done>
	if (err != 0) {
   308f4:	4605      	mov	r5, r0
   308f6:	b9b0      	cbnz	r0, 30926 <dfu_target_modem_delta_done+0x3a>
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
		return -EFAULT;
	}

	if (successful) {
   308f8:	2c00      	cmp	r4, #0
   308fa:	d03c      	beq.n	30976 <dfu_target_modem_delta_done+0x8a>
		err = nrf_modem_delta_dfu_update();
   308fc:	f004 fc6a 	bl	351d4 <nrf_modem_delta_dfu_update>
		if (err != 0) {
   30900:	4605      	mov	r5, r0
   30902:	bb20      	cbnz	r0, 3094e <dfu_target_modem_delta_done+0x62>
   30904:	4b25      	ldr	r3, [pc, #148]	; (3099c <dfu_target_modem_delta_done+0xb0>)
   30906:	4a26      	ldr	r2, [pc, #152]	; (309a0 <dfu_target_modem_delta_done+0xb4>)
   30908:	1a9b      	subs	r3, r3, r2
   3090a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
			return -EFAULT;
		}
		LOG_INF("Scheduling modem firmware upgrade at next boot");
   3090c:	f04f 0000 	mov.w	r0, #0
   30910:	2203      	movs	r2, #3
   30912:	f362 0002 	bfi	r0, r2, #0, #3
   30916:	f36f 00c5 	bfc	r0, #3, #3
   3091a:	f363 108f 	bfi	r0, r3, #6, #10
   3091e:	4921      	ldr	r1, [pc, #132]	; (309a4 <dfu_target_modem_delta_done+0xb8>)
   30920:	f00b fb92 	bl	3c048 <log_string_sync>
   30924:	e037      	b.n	30996 <dfu_target_modem_delta_done+0xaa>
   30926:	4b1d      	ldr	r3, [pc, #116]	; (3099c <dfu_target_modem_delta_done+0xb0>)
   30928:	4a1d      	ldr	r2, [pc, #116]	; (309a0 <dfu_target_modem_delta_done+0xb4>)
   3092a:	1a9b      	subs	r3, r3, r2
   3092c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to stop MFU and release resources, error %d", err);
   3092e:	f04f 0000 	mov.w	r0, #0
   30932:	2201      	movs	r2, #1
   30934:	f362 0002 	bfi	r0, r2, #0, #3
   30938:	f36f 00c5 	bfc	r0, #3, #3
   3093c:	f363 108f 	bfi	r0, r3, #6, #10
   30940:	462a      	mov	r2, r5
   30942:	4919      	ldr	r1, [pc, #100]	; (309a8 <dfu_target_modem_delta_done+0xbc>)
   30944:	f00b fb80 	bl	3c048 <log_string_sync>
		return -EFAULT;
   30948:	f06f 050d 	mvn.w	r5, #13
   3094c:	e023      	b.n	30996 <dfu_target_modem_delta_done+0xaa>
   3094e:	4b13      	ldr	r3, [pc, #76]	; (3099c <dfu_target_modem_delta_done+0xb0>)
   30950:	4a13      	ldr	r2, [pc, #76]	; (309a0 <dfu_target_modem_delta_done+0xb4>)
   30952:	1a9b      	subs	r3, r3, r2
   30954:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Modem firmware upgrade scheduling failed, error %d", err);
   30956:	f04f 0000 	mov.w	r0, #0
   3095a:	2201      	movs	r2, #1
   3095c:	f362 0002 	bfi	r0, r2, #0, #3
   30960:	f36f 00c5 	bfc	r0, #3, #3
   30964:	f363 108f 	bfi	r0, r3, #6, #10
   30968:	462a      	mov	r2, r5
   3096a:	4910      	ldr	r1, [pc, #64]	; (309ac <dfu_target_modem_delta_done+0xc0>)
   3096c:	f00b fb6c 	bl	3c048 <log_string_sync>
			return -EFAULT;
   30970:	f06f 050d 	mvn.w	r5, #13
   30974:	e00f      	b.n	30996 <dfu_target_modem_delta_done+0xaa>
   30976:	4b09      	ldr	r3, [pc, #36]	; (3099c <dfu_target_modem_delta_done+0xb0>)
   30978:	4a09      	ldr	r2, [pc, #36]	; (309a0 <dfu_target_modem_delta_done+0xb4>)
   3097a:	1a9b      	subs	r3, r3, r2
   3097c:	08db      	lsrs	r3, r3, #3
	} else {
		LOG_INF("Modem upgrade stopped.");
   3097e:	f04f 0000 	mov.w	r0, #0
   30982:	2203      	movs	r2, #3
   30984:	f362 0002 	bfi	r0, r2, #0, #3
   30988:	f36f 00c5 	bfc	r0, #3, #3
   3098c:	f363 108f 	bfi	r0, r3, #6, #10
   30990:	4907      	ldr	r1, [pc, #28]	; (309b0 <dfu_target_modem_delta_done+0xc4>)
   30992:	f00b fb59 	bl	3c048 <log_string_sync>
	}

	return 0;
}
   30996:	4628      	mov	r0, r5
   30998:	bd38      	pop	{r3, r4, r5, pc}
   3099a:	bf00      	nop
   3099c:	00041258 	.word	0x00041258
   309a0:	00041200 	.word	0x00041200
   309a4:	0004541c 	.word	0x0004541c
   309a8:	000453b4 	.word	0x000453b4
   309ac:	000453e8 	.word	0x000453e8
   309b0:	0004544c 	.word	0x0004544c

000309b4 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   309b4:	6800      	ldr	r0, [r0, #0]
}
   309b6:	4b03      	ldr	r3, [pc, #12]	; (309c4 <dfu_target_mcuboot_identify+0x10>)
   309b8:	4298      	cmp	r0, r3
   309ba:	bf14      	ite	ne
   309bc:	2000      	movne	r0, #0
   309be:	2001      	moveq	r0, #1
   309c0:	4770      	bx	lr
   309c2:	bf00      	nop
   309c4:	96f3b83d 	.word	0x96f3b83d

000309c8 <dfu_target_mcuboot_set_buf>:

int dfu_target_mcuboot_set_buf(uint8_t *buf, size_t len)
{
	if (buf == NULL) {
   309c8:	b140      	cbz	r0, 309dc <dfu_target_mcuboot_set_buf+0x14>
		return -EINVAL;
	}

	if (!IS_ALIGNED_32(buf)) {
   309ca:	f010 0f03 	tst.w	r0, #3
   309ce:	d108      	bne.n	309e2 <dfu_target_mcuboot_set_buf+0x1a>
		return -EINVAL;
	}

	stream_buf = buf;
   309d0:	4a05      	ldr	r2, [pc, #20]	; (309e8 <dfu_target_mcuboot_set_buf+0x20>)
   309d2:	6010      	str	r0, [r2, #0]
	stream_buf_len = len;
   309d4:	4b05      	ldr	r3, [pc, #20]	; (309ec <dfu_target_mcuboot_set_buf+0x24>)
   309d6:	6019      	str	r1, [r3, #0]

	return 0;
   309d8:	2000      	movs	r0, #0
   309da:	4770      	bx	lr
		return -EINVAL;
   309dc:	f06f 0015 	mvn.w	r0, #21
   309e0:	4770      	bx	lr
		return -EINVAL;
   309e2:	f06f 0015 	mvn.w	r0, #21
}
   309e6:	4770      	bx	lr
   309e8:	2001064c 	.word	0x2001064c
   309ec:	20010654 	.word	0x20010654

000309f0 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size, dfu_target_callback_t cb)
{
   309f0:	b510      	push	{r4, lr}
   309f2:	b088      	sub	sp, #32
	ARG_UNUSED(cb);
	const struct device *flash_dev;
	int err;

	stream_buf_bytes = 0;
   309f4:	4b3a      	ldr	r3, [pc, #232]	; (30ae0 <dfu_target_mcuboot_init+0xf0>)
   309f6:	2200      	movs	r2, #0
   309f8:	601a      	str	r2, [r3, #0]

	if (stream_buf == NULL) {
   309fa:	4b3a      	ldr	r3, [pc, #232]	; (30ae4 <dfu_target_mcuboot_init+0xf4>)
   309fc:	681b      	ldr	r3, [r3, #0]
   309fe:	b30b      	cbz	r3, 30a44 <dfu_target_mcuboot_init+0x54>
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
		return -ENODEV;
	}

	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   30a00:	f5b0 2ff0 	cmp.w	r0, #491520	; 0x78000
   30a04:	d831      	bhi.n	30a6a <dfu_target_mcuboot_init+0x7a>
   30a06:	4838      	ldr	r0, [pc, #224]	; (30ae8 <dfu_target_mcuboot_init+0xf8>)
   30a08:	f004 fe7e 	bl	35708 <z_impl_device_get_binding>
			file_size, PM_MCUBOOT_SECONDARY_SIZE);
		return -EFBIG;
	}

	flash_dev = device_get_binding(PM_MCUBOOT_SECONDARY_DEV_NAME);
	if (flash_dev == NULL) {
   30a0c:	2800      	cmp	r0, #0
   30a0e:	d043      	beq.n	30a98 <dfu_target_mcuboot_init+0xa8>
		LOG_ERR("Failed to get device '%s'",
			PM_MCUBOOT_SECONDARY_DEV_NAME);
		return -EFAULT;
	}

	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   30a10:	4a36      	ldr	r2, [pc, #216]	; (30aec <dfu_target_mcuboot_init+0xfc>)
   30a12:	9201      	str	r2, [sp, #4]
   30a14:	9002      	str	r0, [sp, #8]
   30a16:	4b33      	ldr	r3, [pc, #204]	; (30ae4 <dfu_target_mcuboot_init+0xf4>)
   30a18:	681b      	ldr	r3, [r3, #0]
   30a1a:	9303      	str	r3, [sp, #12]
   30a1c:	4b34      	ldr	r3, [pc, #208]	; (30af0 <dfu_target_mcuboot_init+0x100>)
   30a1e:	681b      	ldr	r3, [r3, #0]
   30a20:	9304      	str	r3, [sp, #16]
   30a22:	f44f 2308 	mov.w	r3, #557056	; 0x88000
   30a26:	9305      	str	r3, [sp, #20]
   30a28:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
   30a2c:	9306      	str	r3, [sp, #24]
   30a2e:	2300      	movs	r3, #0
   30a30:	9307      	str	r3, [sp, #28]
   30a32:	a801      	add	r0, sp, #4
   30a34:	f7ff fd06 	bl	30444 <dfu_target_stream_init>
		.buf = stream_buf,
		.len = stream_buf_len,
		.offset = PM_MCUBOOT_SECONDARY_ADDRESS,
		.size = PM_MCUBOOT_SECONDARY_SIZE,
		.cb = NULL });
	if (err < 0) {
   30a38:	1e04      	subs	r4, r0, #0
   30a3a:	db3f      	blt.n	30abc <dfu_target_mcuboot_init+0xcc>
		LOG_ERR("dfu_target_stream_init failed %d", err);
		return err;
	}

	return 0;
   30a3c:	2400      	movs	r4, #0
}
   30a3e:	4620      	mov	r0, r4
   30a40:	b008      	add	sp, #32
   30a42:	bd10      	pop	{r4, pc}
   30a44:	4b2b      	ldr	r3, [pc, #172]	; (30af4 <dfu_target_mcuboot_init+0x104>)
   30a46:	4a2c      	ldr	r2, [pc, #176]	; (30af8 <dfu_target_mcuboot_init+0x108>)
   30a48:	1a9b      	subs	r3, r3, r2
   30a4a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   30a4c:	f04f 0000 	mov.w	r0, #0
   30a50:	2201      	movs	r2, #1
   30a52:	f362 0002 	bfi	r0, r2, #0, #3
   30a56:	f36f 00c5 	bfc	r0, #3, #3
   30a5a:	f363 108f 	bfi	r0, r3, #6, #10
   30a5e:	4927      	ldr	r1, [pc, #156]	; (30afc <dfu_target_mcuboot_init+0x10c>)
   30a60:	f00b faf2 	bl	3c048 <log_string_sync>
		return -ENODEV;
   30a64:	f06f 0412 	mvn.w	r4, #18
   30a68:	e7e9      	b.n	30a3e <dfu_target_mcuboot_init+0x4e>
   30a6a:	4b22      	ldr	r3, [pc, #136]	; (30af4 <dfu_target_mcuboot_init+0x104>)
   30a6c:	4a22      	ldr	r2, [pc, #136]	; (30af8 <dfu_target_mcuboot_init+0x108>)
   30a6e:	1a9b      	subs	r3, r3, r2
   30a70:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   30a72:	f04f 0400 	mov.w	r4, #0
   30a76:	2201      	movs	r2, #1
   30a78:	f362 0402 	bfi	r4, r2, #0, #3
   30a7c:	f36f 04c5 	bfc	r4, #3, #3
   30a80:	f363 148f 	bfi	r4, r3, #6, #10
   30a84:	f44f 23f0 	mov.w	r3, #491520	; 0x78000
   30a88:	4602      	mov	r2, r0
   30a8a:	491d      	ldr	r1, [pc, #116]	; (30b00 <dfu_target_mcuboot_init+0x110>)
   30a8c:	4620      	mov	r0, r4
   30a8e:	f00b fadb 	bl	3c048 <log_string_sync>
		return -EFBIG;
   30a92:	f06f 041a 	mvn.w	r4, #26
   30a96:	e7d2      	b.n	30a3e <dfu_target_mcuboot_init+0x4e>
   30a98:	4b16      	ldr	r3, [pc, #88]	; (30af4 <dfu_target_mcuboot_init+0x104>)
   30a9a:	4a17      	ldr	r2, [pc, #92]	; (30af8 <dfu_target_mcuboot_init+0x108>)
   30a9c:	1a9b      	subs	r3, r3, r2
   30a9e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to get device '%s'",
   30aa0:	2201      	movs	r2, #1
   30aa2:	f362 0002 	bfi	r0, r2, #0, #3
   30aa6:	f36f 00c5 	bfc	r0, #3, #3
   30aaa:	f363 108f 	bfi	r0, r3, #6, #10
   30aae:	4a0e      	ldr	r2, [pc, #56]	; (30ae8 <dfu_target_mcuboot_init+0xf8>)
   30ab0:	4914      	ldr	r1, [pc, #80]	; (30b04 <dfu_target_mcuboot_init+0x114>)
   30ab2:	f00b fac9 	bl	3c048 <log_string_sync>
		return -EFAULT;
   30ab6:	f06f 040d 	mvn.w	r4, #13
   30aba:	e7c0      	b.n	30a3e <dfu_target_mcuboot_init+0x4e>
   30abc:	4b0d      	ldr	r3, [pc, #52]	; (30af4 <dfu_target_mcuboot_init+0x104>)
   30abe:	4a0e      	ldr	r2, [pc, #56]	; (30af8 <dfu_target_mcuboot_init+0x108>)
   30ac0:	1a9b      	subs	r3, r3, r2
   30ac2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("dfu_target_stream_init failed %d", err);
   30ac4:	f04f 0000 	mov.w	r0, #0
   30ac8:	2201      	movs	r2, #1
   30aca:	f362 0002 	bfi	r0, r2, #0, #3
   30ace:	f36f 00c5 	bfc	r0, #3, #3
   30ad2:	f363 108f 	bfi	r0, r3, #6, #10
   30ad6:	4622      	mov	r2, r4
   30ad8:	490b      	ldr	r1, [pc, #44]	; (30b08 <dfu_target_mcuboot_init+0x118>)
   30ada:	f00b fab5 	bl	3c048 <log_string_sync>
		return err;
   30ade:	e7ae      	b.n	30a3e <dfu_target_mcuboot_init+0x4e>
   30ae0:	20010650 	.word	0x20010650
   30ae4:	2001064c 	.word	0x2001064c
   30ae8:	0004266c 	.word	0x0004266c
   30aec:	00045500 	.word	0x00045500
   30af0:	20010654 	.word	0x20010654
   30af4:	00041250 	.word	0x00041250
   30af8:	00041200 	.word	0x00041200
   30afc:	0004547c 	.word	0x0004547c
   30b00:	000454b0 	.word	0x000454b0
   30b04:	000454e4 	.word	0x000454e4
   30b08:	00045508 	.word	0x00045508

00030b0c <dfu_target_mcuboot_offset_get>:

int dfu_target_mcuboot_offset_get(size_t *out)
{
   30b0c:	b510      	push	{r4, lr}
   30b0e:	4604      	mov	r4, r0
	int err = 0;

	err = dfu_target_stream_offset_get(out);
   30b10:	f7ff fce0 	bl	304d4 <dfu_target_stream_offset_get>
	if (err == 0) {
   30b14:	b920      	cbnz	r0, 30b20 <dfu_target_mcuboot_offset_get+0x14>
		*out += stream_buf_bytes;
   30b16:	6823      	ldr	r3, [r4, #0]
   30b18:	4a02      	ldr	r2, [pc, #8]	; (30b24 <dfu_target_mcuboot_offset_get+0x18>)
   30b1a:	6812      	ldr	r2, [r2, #0]
   30b1c:	4413      	add	r3, r2
   30b1e:	6023      	str	r3, [r4, #0]
	}

	return err;
}
   30b20:	bd10      	pop	{r4, pc}
   30b22:	bf00      	nop
   30b24:	20010650 	.word	0x20010650

00030b28 <dfu_target_mcuboot_write>:

int dfu_target_mcuboot_write(const void *const buf, size_t len)
{
   30b28:	b538      	push	{r3, r4, r5, lr}
	stream_buf_bytes = (stream_buf_bytes + len) % stream_buf_len;
   30b2a:	4c06      	ldr	r4, [pc, #24]	; (30b44 <dfu_target_mcuboot_write+0x1c>)
   30b2c:	6823      	ldr	r3, [r4, #0]
   30b2e:	440b      	add	r3, r1
   30b30:	4a05      	ldr	r2, [pc, #20]	; (30b48 <dfu_target_mcuboot_write+0x20>)
   30b32:	6815      	ldr	r5, [r2, #0]
   30b34:	fbb3 f2f5 	udiv	r2, r3, r5
   30b38:	fb05 3312 	mls	r3, r5, r2, r3
   30b3c:	6023      	str	r3, [r4, #0]

	return dfu_target_stream_write(buf, len);
   30b3e:	f7ff fcd3 	bl	304e8 <dfu_target_stream_write>
}
   30b42:	bd38      	pop	{r3, r4, r5, pc}
   30b44:	20010650 	.word	0x20010650
   30b48:	20010654 	.word	0x20010654

00030b4c <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   30b4c:	b538      	push	{r3, r4, r5, lr}
   30b4e:	4604      	mov	r4, r0
	int err = 0;

	err = dfu_target_stream_done(successful);
   30b50:	f7ff fcf0 	bl	30534 <dfu_target_stream_done>
	if (err != 0) {
   30b54:	4605      	mov	r5, r0
   30b56:	bb08      	cbnz	r0, 30b9c <dfu_target_mcuboot_done+0x50>
		LOG_ERR("dfu_target_stream_done error %d", err);
		return err;
	}

	if (successful) {
   30b58:	2c00      	cmp	r4, #0
   30b5a:	d055      	beq.n	30c08 <dfu_target_mcuboot_done+0xbc>
		stream_buf_bytes = 0;
   30b5c:	4b33      	ldr	r3, [pc, #204]	; (30c2c <dfu_target_mcuboot_done+0xe0>)
   30b5e:	2200      	movs	r2, #0
   30b60:	601a      	str	r2, [r3, #0]

		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   30b62:	f7ff fc6b 	bl	3043c <dfu_target_stream_get_stream>
   30b66:	4932      	ldr	r1, [pc, #200]	; (30c30 <dfu_target_mcuboot_done+0xe4>)
   30b68:	f7f6 f9fa 	bl	26f60 <stream_flash_erase_page>
					      MCUBOOT_SECONDARY_LAST_PAGE_ADDR);
		if (err != 0) {
   30b6c:	4605      	mov	r5, r0
   30b6e:	bb38      	cbnz	r0, 30bc0 <dfu_target_mcuboot_done+0x74>
			LOG_ERR("Unable to delete last page: %d", err);
			return err;
		}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   30b70:	2000      	movs	r0, #0
   30b72:	f00b fe85 	bl	3c880 <boot_request_upgrade>
		if (err != 0) {
   30b76:	4605      	mov	r5, r0
   30b78:	bba0      	cbnz	r0, 30be4 <dfu_target_mcuboot_done+0x98>
   30b7a:	4b2e      	ldr	r3, [pc, #184]	; (30c34 <dfu_target_mcuboot_done+0xe8>)
   30b7c:	4a2e      	ldr	r2, [pc, #184]	; (30c38 <dfu_target_mcuboot_done+0xec>)
   30b7e:	1a9b      	subs	r3, r3, r2
   30b80:	08db      	lsrs	r3, r3, #3
			LOG_ERR("boot_request_upgrade error %d", err);
			return err;
		}

		LOG_INF("MCUBoot image upgrade scheduled. "
   30b82:	f04f 0000 	mov.w	r0, #0
   30b86:	2203      	movs	r2, #3
   30b88:	f362 0002 	bfi	r0, r2, #0, #3
   30b8c:	f36f 00c5 	bfc	r0, #3, #3
   30b90:	f363 108f 	bfi	r0, r3, #6, #10
   30b94:	4929      	ldr	r1, [pc, #164]	; (30c3c <dfu_target_mcuboot_done+0xf0>)
   30b96:	f00b fa57 	bl	3c048 <log_string_sync>
   30b9a:	e045      	b.n	30c28 <dfu_target_mcuboot_done+0xdc>
   30b9c:	4b25      	ldr	r3, [pc, #148]	; (30c34 <dfu_target_mcuboot_done+0xe8>)
   30b9e:	4a26      	ldr	r2, [pc, #152]	; (30c38 <dfu_target_mcuboot_done+0xec>)
   30ba0:	1a9b      	subs	r3, r3, r2
   30ba2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("dfu_target_stream_done error %d", err);
   30ba4:	f04f 0000 	mov.w	r0, #0
   30ba8:	2201      	movs	r2, #1
   30baa:	f362 0002 	bfi	r0, r2, #0, #3
   30bae:	f36f 00c5 	bfc	r0, #3, #3
   30bb2:	f363 108f 	bfi	r0, r3, #6, #10
   30bb6:	462a      	mov	r2, r5
   30bb8:	4921      	ldr	r1, [pc, #132]	; (30c40 <dfu_target_mcuboot_done+0xf4>)
   30bba:	f00b fa45 	bl	3c048 <log_string_sync>
		return err;
   30bbe:	e033      	b.n	30c28 <dfu_target_mcuboot_done+0xdc>
   30bc0:	4b1c      	ldr	r3, [pc, #112]	; (30c34 <dfu_target_mcuboot_done+0xe8>)
   30bc2:	4a1d      	ldr	r2, [pc, #116]	; (30c38 <dfu_target_mcuboot_done+0xec>)
   30bc4:	1a9b      	subs	r3, r3, r2
   30bc6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unable to delete last page: %d", err);
   30bc8:	f04f 0000 	mov.w	r0, #0
   30bcc:	2201      	movs	r2, #1
   30bce:	f362 0002 	bfi	r0, r2, #0, #3
   30bd2:	f36f 00c5 	bfc	r0, #3, #3
   30bd6:	f363 108f 	bfi	r0, r3, #6, #10
   30bda:	462a      	mov	r2, r5
   30bdc:	4919      	ldr	r1, [pc, #100]	; (30c44 <dfu_target_mcuboot_done+0xf8>)
   30bde:	f00b fa33 	bl	3c048 <log_string_sync>
			return err;
   30be2:	e021      	b.n	30c28 <dfu_target_mcuboot_done+0xdc>
   30be4:	4b13      	ldr	r3, [pc, #76]	; (30c34 <dfu_target_mcuboot_done+0xe8>)
   30be6:	4a14      	ldr	r2, [pc, #80]	; (30c38 <dfu_target_mcuboot_done+0xec>)
   30be8:	1a9b      	subs	r3, r3, r2
   30bea:	08db      	lsrs	r3, r3, #3
			LOG_ERR("boot_request_upgrade error %d", err);
   30bec:	f04f 0000 	mov.w	r0, #0
   30bf0:	2201      	movs	r2, #1
   30bf2:	f362 0002 	bfi	r0, r2, #0, #3
   30bf6:	f36f 00c5 	bfc	r0, #3, #3
   30bfa:	f363 108f 	bfi	r0, r3, #6, #10
   30bfe:	462a      	mov	r2, r5
   30c00:	4911      	ldr	r1, [pc, #68]	; (30c48 <dfu_target_mcuboot_done+0xfc>)
   30c02:	f00b fa21 	bl	3c048 <log_string_sync>
			return err;
   30c06:	e00f      	b.n	30c28 <dfu_target_mcuboot_done+0xdc>
   30c08:	4b0a      	ldr	r3, [pc, #40]	; (30c34 <dfu_target_mcuboot_done+0xe8>)
   30c0a:	4a0b      	ldr	r2, [pc, #44]	; (30c38 <dfu_target_mcuboot_done+0xec>)
   30c0c:	1a9b      	subs	r3, r3, r2
   30c0e:	08db      	lsrs	r3, r3, #3
			"Reset device to apply");
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
   30c10:	f04f 0000 	mov.w	r0, #0
   30c14:	2203      	movs	r2, #3
   30c16:	f362 0002 	bfi	r0, r2, #0, #3
   30c1a:	f36f 00c5 	bfc	r0, #3, #3
   30c1e:	f363 108f 	bfi	r0, r3, #6, #10
   30c22:	490a      	ldr	r1, [pc, #40]	; (30c4c <dfu_target_mcuboot_done+0x100>)
   30c24:	f00b fa10 	bl	3c048 <log_string_sync>
	}

	return err;
}
   30c28:	4628      	mov	r0, r5
   30c2a:	bd38      	pop	{r3, r4, r5, pc}
   30c2c:	20010650 	.word	0x20010650
   30c30:	000fffff 	.word	0x000fffff
   30c34:	00041250 	.word	0x00041250
   30c38:	00041200 	.word	0x00041200
   30c3c:	0004558c 	.word	0x0004558c
   30c40:	0004552c 	.word	0x0004552c
   30c44:	0004554c 	.word	0x0004554c
   30c48:	0004556c 	.word	0x0004556c
   30c4c:	000455c4 	.word	0x000455c4

00030c50 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   30c50:	b570      	push	{r4, r5, r6, lr}
   30c52:	b084      	sub	sp, #16
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   30c54:	481d      	ldr	r0, [pc, #116]	; (30ccc <check_ext_api_requests+0x7c>)
   30c56:	f00d fe6b 	bl	3e930 <skip_ext_apis>
   30c5a:	4604      	mov	r4, r0

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   30c5c:	2600      	movs	r6, #0
   30c5e:	e00a      	b.n	30c76 <check_ext_api_requests+0x26>
	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
		== 0) {
		return ext_api;
	}
	return NULL;
   30c60:	2500      	movs	r5, #0
   30c62:	e01a      	b.n	30c9a <check_ext_api_requests+0x4a>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   30c64:	481a      	ldr	r0, [pc, #104]	; (30cd0 <check_ext_api_requests+0x80>)
   30c66:	f00a ff67 	bl	3bb38 <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   30c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30c6c:	2200      	movs	r2, #0
   30c6e:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   30c70:	68e3      	ldr	r3, [r4, #12]
   30c72:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   30c74:	3601      	adds	r6, #1
   30c76:	4b15      	ldr	r3, [pc, #84]	; (30ccc <check_ext_api_requests+0x7c>)
   30c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30c7a:	42b3      	cmp	r3, r6
   30c7c:	d922      	bls.n	30cc4 <check_ext_api_requests+0x74>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   30c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30c80:	681d      	ldr	r5, [r3, #0]
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   30c82:	ab01      	add	r3, sp, #4
   30c84:	4a13      	ldr	r2, [pc, #76]	; (30cd4 <check_ext_api_requests+0x84>)
   30c86:	ca07      	ldmia	r2, {r0, r1, r2}
   30c88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   30c8c:	220c      	movs	r2, #12
   30c8e:	4619      	mov	r1, r3
   30c90:	4628      	mov	r0, r5
   30c92:	f00f f927 	bl	3fee4 <memcmp>
   30c96:	2800      	cmp	r0, #0
   30c98:	d1e2      	bne.n	30c60 <check_ext_api_requests+0x10>
   30c9a:	b135      	cbz	r5, 30caa <check_ext_api_requests+0x5a>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   30c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30c9e:	4621      	mov	r1, r4
   30ca0:	6818      	ldr	r0, [r3, #0]
   30ca2:	f00d fe29 	bl	3e8f8 <ext_api_satisfies_req>
   30ca6:	2800      	cmp	r0, #0
   30ca8:	d1e2      	bne.n	30c70 <check_ext_api_requests+0x20>
		} else if (ext_api_req->required) {
   30caa:	6a23      	ldr	r3, [r4, #32]
   30cac:	2b00      	cmp	r3, #0
   30cae:	d0d9      	beq.n	30c64 <check_ext_api_requests+0x14>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   30cb0:	4809      	ldr	r0, [pc, #36]	; (30cd8 <check_ext_api_requests+0x88>)
   30cb2:	f00a ff41 	bl	3bb38 <printk>
			k_panic();
   30cb6:	4040      	eors	r0, r0
   30cb8:	f380 8811 	msr	BASEPRI, r0
   30cbc:	f04f 0004 	mov.w	r0, #4
   30cc0:	df02      	svc	2
   30cc2:	e7d5      	b.n	30c70 <check_ext_api_requests+0x20>
	}

	return 0;
}
   30cc4:	2000      	movs	r0, #0
   30cc6:	b004      	add	sp, #16
   30cc8:	bd70      	pop	{r4, r5, r6, pc}
   30cca:	bf00      	nop
   30ccc:	00020400 	.word	0x00020400
   30cd0:	00045624 	.word	0x00045624
   30cd4:	00041368 	.word	0x00041368
   30cd8:	000455f8 	.word	0x000455f8

00030cdc <boot_magic_decode>:
#define BOOT_SWAP_TABLES_COUNT \
    (sizeof boot_swap_tables / sizeof boot_swap_tables[0])

static int
boot_magic_decode(const uint32_t *magic)
{
   30cdc:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   30cde:	2210      	movs	r2, #16
   30ce0:	4903      	ldr	r1, [pc, #12]	; (30cf0 <boot_magic_decode+0x14>)
   30ce2:	f00f f8ff 	bl	3fee4 <memcmp>
   30ce6:	b108      	cbz	r0, 30cec <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    }
    return BOOT_MAGIC_BAD;
   30ce8:	2002      	movs	r0, #2
}
   30cea:	bd08      	pop	{r3, pc}
        return BOOT_MAGIC_GOOD;
   30cec:	2001      	movs	r0, #1
   30cee:	e7fc      	b.n	30cea <boot_magic_decode+0xe>
   30cf0:	00045704 	.word	0x00045704

00030cf4 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   30cf4:	b508      	push	{r3, lr}
	return (uint32_t)fa->fa_off;
}

static inline uint32_t flash_area_get_size(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_size;
   30cf6:	6881      	ldr	r1, [r0, #8]
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   30cf8:	2310      	movs	r3, #16
   30cfa:	4a04      	ldr	r2, [pc, #16]	; (30d0c <boot_write_magic+0x18>)
   30cfc:	3910      	subs	r1, #16
   30cfe:	f00b fbde 	bl	3c4be <flash_area_write>
    if (rc != 0) {
   30d02:	b900      	cbnz	r0, 30d06 <boot_write_magic+0x12>
        return BOOT_EFLASH;
    }

    return 0;
}
   30d04:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   30d06:	2001      	movs	r0, #1
   30d08:	e7fc      	b.n	30d04 <boot_write_magic+0x10>
   30d0a:	bf00      	nop
   30d0c:	00045704 	.word	0x00045704

00030d10 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   30d10:	b510      	push	{r4, lr}
   30d12:	b082      	sub	sp, #8
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   30d14:	2a0e      	cmp	r2, #14
   30d16:	d811      	bhi.n	30d3c <boot_write_swap_info+0x2c>
   30d18:	4604      	mov	r4, r0
   30d1a:	290e      	cmp	r1, #14
   30d1c:	d815      	bhi.n	30d4a <boot_write_swap_info+0x3a>
   30d1e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   30d22:	f88d 1007 	strb.w	r1, [sp, #7]
    off = boot_swap_info_off(fap);
   30d26:	f00d fe13 	bl	3e950 <boot_swap_info_off>
   30d2a:	4601      	mov	r1, r0
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off),
                 swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   30d2c:	2301      	movs	r3, #1
   30d2e:	f10d 0207 	add.w	r2, sp, #7
   30d32:	4620      	mov	r0, r4
   30d34:	f00d fe42 	bl	3e9bc <boot_write_trailer>
}
   30d38:	b002      	add	sp, #8
   30d3a:	bd10      	pop	{r4, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   30d3c:	4b06      	ldr	r3, [pc, #24]	; (30d58 <boot_write_swap_info+0x48>)
   30d3e:	4a07      	ldr	r2, [pc, #28]	; (30d5c <boot_write_swap_info+0x4c>)
   30d40:	f44f 71ca 	mov.w	r1, #404	; 0x194
   30d44:	4806      	ldr	r0, [pc, #24]	; (30d60 <boot_write_swap_info+0x50>)
   30d46:	f008 fd1f 	bl	39788 <__assert_func>
   30d4a:	4b06      	ldr	r3, [pc, #24]	; (30d64 <boot_write_swap_info+0x54>)
   30d4c:	4a03      	ldr	r2, [pc, #12]	; (30d5c <boot_write_swap_info+0x4c>)
   30d4e:	f44f 71ca 	mov.w	r1, #404	; 0x194
   30d52:	4803      	ldr	r0, [pc, #12]	; (30d60 <boot_write_swap_info+0x50>)
   30d54:	f008 fd18 	bl	39788 <__assert_func>
   30d58:	00045658 	.word	0x00045658
   30d5c:	000456d4 	.word	0x000456d4
   30d60:	0004566c 	.word	0x0004566c
   30d64:	000456b0 	.word	0x000456b0

00030d68 <boot_set_pending_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending_multi(int image_index, int permanent)
{
   30d68:	b570      	push	{r4, r5, r6, lr}
   30d6a:	b084      	sub	sp, #16
   30d6c:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap);
   30d6e:	a903      	add	r1, sp, #12
   30d70:	2007      	movs	r0, #7
   30d72:	f7f6 f8af 	bl	26ed4 <flash_area_open>
    if (rc != 0) {
   30d76:	b118      	cbz	r0, 30d80 <boot_set_pending_multi+0x18>
        return BOOT_EFLASH;
   30d78:	2501      	movs	r5, #1
    }

done:
    flash_area_close(fap);
    return rc;
}
   30d7a:	4628      	mov	r0, r5
   30d7c:	b004      	add	sp, #16
   30d7e:	bd70      	pop	{r4, r5, r6, pc}
    rc = boot_read_swap_state(fap, &state_secondary_slot);
   30d80:	a901      	add	r1, sp, #4
   30d82:	9803      	ldr	r0, [sp, #12]
   30d84:	f00d fe64 	bl	3ea50 <boot_read_swap_state>
    if (rc != 0) {
   30d88:	4605      	mov	r5, r0
   30d8a:	bb48      	cbnz	r0, 30de0 <boot_set_pending_multi+0x78>
    switch (state_secondary_slot.magic) {
   30d8c:	f89d 6004 	ldrb.w	r6, [sp, #4]
   30d90:	2e02      	cmp	r6, #2
   30d92:	d01f      	beq.n	30dd4 <boot_set_pending_multi+0x6c>
   30d94:	2e03      	cmp	r6, #3
   30d96:	d008      	beq.n	30daa <boot_set_pending_multi+0x42>
   30d98:	2e01      	cmp	r6, #1
   30d9a:	d021      	beq.n	30de0 <boot_set_pending_multi+0x78>
        assert(0);
   30d9c:	4b12      	ldr	r3, [pc, #72]	; (30de8 <boot_set_pending_multi+0x80>)
   30d9e:	4a13      	ldr	r2, [pc, #76]	; (30dec <boot_set_pending_multi+0x84>)
   30da0:	f240 2129 	movw	r1, #553	; 0x229
   30da4:	4812      	ldr	r0, [pc, #72]	; (30df0 <boot_set_pending_multi+0x88>)
   30da6:	f008 fcef 	bl	39788 <__assert_func>
        rc = boot_write_magic(fap);
   30daa:	9803      	ldr	r0, [sp, #12]
   30dac:	f7ff ffa2 	bl	30cf4 <boot_write_magic>
        if (rc == 0 && permanent) {
   30db0:	4605      	mov	r5, r0
   30db2:	b900      	cbnz	r0, 30db6 <boot_set_pending_multi+0x4e>
   30db4:	b94c      	cbnz	r4, 30dca <boot_set_pending_multi+0x62>
        if (rc == 0) {
   30db6:	b99d      	cbnz	r5, 30de0 <boot_set_pending_multi+0x78>
            if (permanent) {
   30db8:	b904      	cbnz	r4, 30dbc <boot_set_pending_multi+0x54>
                swap_type = BOOT_SWAP_TYPE_TEST;
   30dba:	2602      	movs	r6, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   30dbc:	2200      	movs	r2, #0
   30dbe:	4631      	mov	r1, r6
   30dc0:	9803      	ldr	r0, [sp, #12]
   30dc2:	f7ff ffa5 	bl	30d10 <boot_write_swap_info>
   30dc6:	4605      	mov	r5, r0
   30dc8:	e00a      	b.n	30de0 <boot_set_pending_multi+0x78>
            rc = boot_write_image_ok(fap);
   30dca:	9803      	ldr	r0, [sp, #12]
   30dcc:	f00d fe33 	bl	3ea36 <boot_write_image_ok>
   30dd0:	4605      	mov	r5, r0
   30dd2:	e7f0      	b.n	30db6 <boot_set_pending_multi+0x4e>
        flash_area_erase(fap, 0, flash_area_get_size(fap));
   30dd4:	9803      	ldr	r0, [sp, #12]
   30dd6:	6882      	ldr	r2, [r0, #8]
   30dd8:	2100      	movs	r1, #0
   30dda:	f00b fba1 	bl	3c520 <flash_area_erase>
        rc = BOOT_EBADIMAGE;
   30dde:	2503      	movs	r5, #3
    flash_area_close(fap);
   30de0:	9803      	ldr	r0, [sp, #12]
   30de2:	f00b fb49 	bl	3c478 <flash_area_close>
    return rc;
   30de6:	e7c8      	b.n	30d7a <boot_set_pending_multi+0x12>
   30de8:	00043c44 	.word	0x00043c44
   30dec:	000456ec 	.word	0x000456ec
   30df0:	0004566c 	.word	0x0004566c

00030df4 <SystemCoreClockUpdate>:
    static bool is_empty_word(uint32_t const volatile * word);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   30df4:	4b01      	ldr	r3, [pc, #4]	; (30dfc <SystemCoreClockUpdate+0x8>)
   30df6:	4a02      	ldr	r2, [pc, #8]	; (30e00 <SystemCoreClockUpdate+0xc>)
   30df8:	601a      	str	r2, [r3, #0]
}
   30dfa:	4770      	bx	lr
   30dfc:	2000c680 	.word	0x2000c680
   30e00:	03d09000 	.word	0x03d09000

00030e04 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   30e04:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   30e06:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   30e08:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   30e0c:	f1d3 031f 	rsbs	r3, r3, #31
   30e10:	d411      	bmi.n	30e36 <nrfx_flag32_alloc+0x32>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   30e12:	2201      	movs	r2, #1
   30e14:	409a      	lsls	r2, r3
   30e16:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   30e1a:	e8d0 5fef 	ldaex	r5, [r0]
   30e1e:	42a5      	cmp	r5, r4
   30e20:	d104      	bne.n	30e2c <nrfx_flag32_alloc+0x28>
   30e22:	e8c0 2fec 	stlex	ip, r2, [r0]
   30e26:	f1bc 0f00 	cmp.w	ip, #0
   30e2a:	d1f6      	bne.n	30e1a <nrfx_flag32_alloc+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   30e2c:	d1eb      	bne.n	30e06 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   30e2e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   30e30:	4802      	ldr	r0, [pc, #8]	; (30e3c <nrfx_flag32_alloc+0x38>)
}
   30e32:	bc30      	pop	{r4, r5}
   30e34:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   30e36:	4802      	ldr	r0, [pc, #8]	; (30e40 <nrfx_flag32_alloc+0x3c>)
   30e38:	e7fb      	b.n	30e32 <nrfx_flag32_alloc+0x2e>
   30e3a:	bf00      	nop
   30e3c:	0bad0000 	.word	0x0bad0000
   30e40:	0bad0002 	.word	0x0bad0002

00030e44 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   30e44:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   30e46:	6803      	ldr	r3, [r0, #0]
   30e48:	460c      	mov	r4, r1
   30e4a:	fa23 f101 	lsr.w	r1, r3, r1
   30e4e:	f011 0f01 	tst.w	r1, #1
   30e52:	d110      	bne.n	30e76 <nrfx_flag32_free+0x32>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   30e54:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   30e56:	2301      	movs	r3, #1
   30e58:	40a3      	lsls	r3, r4
   30e5a:	4313      	orrs	r3, r2
   30e5c:	e8d0 1fef 	ldaex	r1, [r0]
   30e60:	4291      	cmp	r1, r2
   30e62:	d104      	bne.n	30e6e <nrfx_flag32_free+0x2a>
   30e64:	e8c0 3fec 	stlex	ip, r3, [r0]
   30e68:	f1bc 0f00 	cmp.w	ip, #0
   30e6c:	d1f6      	bne.n	30e5c <nrfx_flag32_free+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   30e6e:	d1f1      	bne.n	30e54 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   30e70:	4802      	ldr	r0, [pc, #8]	; (30e7c <nrfx_flag32_free+0x38>)
}
   30e72:	bc10      	pop	{r4}
   30e74:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   30e76:	4802      	ldr	r0, [pc, #8]	; (30e80 <nrfx_flag32_free+0x3c>)
   30e78:	e7fb      	b.n	30e72 <nrfx_flag32_free+0x2e>
   30e7a:	bf00      	nop
   30e7c:	0bad0000 	.word	0x0bad0000
   30e80:	0bad0004 	.word	0x0bad0004

00030e84 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   30e84:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(event_handler);
   30e86:	4604      	mov	r4, r0
   30e88:	b140      	cbz	r0, 30e9c <nrfx_clock_init+0x18>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   30e8a:	4b0b      	ldr	r3, [pc, #44]	; (30eb8 <nrfx_clock_init+0x34>)
   30e8c:	791b      	ldrb	r3, [r3, #4]
   30e8e:	b983      	cbnz	r3, 30eb2 <nrfx_clock_init+0x2e>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   30e90:	4b09      	ldr	r3, [pc, #36]	; (30eb8 <nrfx_clock_init+0x34>)
   30e92:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   30e94:	2201      	movs	r2, #1
   30e96:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   30e98:	4808      	ldr	r0, [pc, #32]	; (30ebc <nrfx_clock_init+0x38>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   30e9a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(event_handler);
   30e9c:	4d08      	ldr	r5, [pc, #32]	; (30ec0 <nrfx_clock_init+0x3c>)
   30e9e:	22bd      	movs	r2, #189	; 0xbd
   30ea0:	4629      	mov	r1, r5
   30ea2:	4808      	ldr	r0, [pc, #32]	; (30ec4 <nrfx_clock_init+0x40>)
   30ea4:	f00a fe48 	bl	3bb38 <printk>
   30ea8:	21bd      	movs	r1, #189	; 0xbd
   30eaa:	4628      	mov	r0, r5
   30eac:	f00b f898 	bl	3bfe0 <assert_post_action>
   30eb0:	e7eb      	b.n	30e8a <nrfx_clock_init+0x6>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   30eb2:	4805      	ldr	r0, [pc, #20]	; (30ec8 <nrfx_clock_init+0x44>)
    return err_code;
   30eb4:	e7f1      	b.n	30e9a <nrfx_clock_init+0x16>
   30eb6:	bf00      	nop
   30eb8:	20010658 	.word	0x20010658
   30ebc:	0bad0000 	.word	0x0bad0000
   30ec0:	00045714 	.word	0x00045714
   30ec4:	00041c84 	.word	0x00041c84
   30ec8:	0bad000c 	.word	0x0bad000c

00030ecc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   30ecc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   30ece:	4b0b      	ldr	r3, [pc, #44]	; (30efc <nrfx_clock_enable+0x30>)
   30ed0:	791b      	ldrb	r3, [r3, #4]
   30ed2:	b123      	cbz	r3, 30ede <nrfx_clock_enable+0x12>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   30ed4:	2005      	movs	r0, #5
   30ed6:	f7f6 fcb3 	bl	27840 <arch_irq_is_enabled>
   30eda:	b158      	cbz	r0, 30ef4 <nrfx_clock_enable+0x28>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   30edc:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   30ede:	4c08      	ldr	r4, [pc, #32]	; (30f00 <nrfx_clock_enable+0x34>)
   30ee0:	22d6      	movs	r2, #214	; 0xd6
   30ee2:	4621      	mov	r1, r4
   30ee4:	4807      	ldr	r0, [pc, #28]	; (30f04 <nrfx_clock_enable+0x38>)
   30ee6:	f00a fe27 	bl	3bb38 <printk>
   30eea:	21d6      	movs	r1, #214	; 0xd6
   30eec:	4620      	mov	r0, r4
   30eee:	f00b f877 	bl	3bfe0 <assert_post_action>
   30ef2:	e7ef      	b.n	30ed4 <nrfx_clock_enable+0x8>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   30ef4:	2005      	movs	r0, #5
   30ef6:	f7f6 fc7f 	bl	277f8 <arch_irq_enable>
}
   30efa:	e7ef      	b.n	30edc <nrfx_clock_enable+0x10>
   30efc:	20010658 	.word	0x20010658
   30f00:	00045714 	.word	0x00045714
   30f04:	00041c84 	.word	0x00041c84

00030f08 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   30f08:	b538      	push	{r3, r4, r5, lr}
   30f0a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   30f0c:	4b27      	ldr	r3, [pc, #156]	; (30fac <nrfx_clock_start+0xa4>)
   30f0e:	791b      	ldrb	r3, [r3, #4]
   30f10:	b17b      	cbz	r3, 30f32 <nrfx_clock_start+0x2a>
    switch (domain)
   30f12:	b1dc      	cbz	r4, 30f4c <nrfx_clock_start+0x44>
   30f14:	2c01      	cmp	r4, #1
   30f16:	d03e      	beq.n	30f96 <nrfx_clock_start+0x8e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   30f18:	4c25      	ldr	r4, [pc, #148]	; (30fb0 <nrfx_clock_start+0xa8>)
   30f1a:	f44f 72a2 	mov.w	r2, #324	; 0x144
   30f1e:	4621      	mov	r1, r4
   30f20:	4824      	ldr	r0, [pc, #144]	; (30fb4 <nrfx_clock_start+0xac>)
   30f22:	f00a fe09 	bl	3bb38 <printk>
   30f26:	f44f 71a2 	mov.w	r1, #324	; 0x144
   30f2a:	4620      	mov	r0, r4
   30f2c:	f00b f858 	bl	3bfe0 <assert_post_action>
            break;
    }
}
   30f30:	e029      	b.n	30f86 <nrfx_clock_start+0x7e>
    NRFX_ASSERT(m_clock_cb.module_initialized);
   30f32:	4d1f      	ldr	r5, [pc, #124]	; (30fb0 <nrfx_clock_start+0xa8>)
   30f34:	f44f 7289 	mov.w	r2, #274	; 0x112
   30f38:	4629      	mov	r1, r5
   30f3a:	481e      	ldr	r0, [pc, #120]	; (30fb4 <nrfx_clock_start+0xac>)
   30f3c:	f00a fdfc 	bl	3bb38 <printk>
   30f40:	f44f 7189 	mov.w	r1, #274	; 0x112
   30f44:	4628      	mov	r0, r5
   30f46:	f00b f84b 	bl	3bfe0 <assert_post_action>
   30f4a:	e7e2      	b.n	30f12 <nrfx_clock_start+0xa>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   30f4c:	4a1a      	ldr	r2, [pc, #104]	; (30fb8 <nrfx_clock_start+0xb0>)
   30f4e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   30f52:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   30f56:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   30f5a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   30f5e:	d113      	bne.n	30f88 <nrfx_clock_start+0x80>
    return false;
   30f60:	2200      	movs	r2, #0
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   30f62:	b10a      	cbz	r2, 30f68 <nrfx_clock_start+0x60>
   30f64:	2b02      	cmp	r3, #2
   30f66:	d011      	beq.n	30f8c <nrfx_clock_start+0x84>
    p_reg->LFCLKSRC = (uint32_t)(source);
   30f68:	4b13      	ldr	r3, [pc, #76]	; (30fb8 <nrfx_clock_start+0xb0>)
   30f6a:	2201      	movs	r2, #1
   30f6c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30f70:	4b12      	ldr	r3, [pc, #72]	; (30fbc <nrfx_clock_start+0xb4>)
   30f72:	2200      	movs	r2, #0
   30f74:	601a      	str	r2, [r3, #0]
   30f76:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   30f78:	4b0f      	ldr	r3, [pc, #60]	; (30fb8 <nrfx_clock_start+0xb0>)
   30f7a:	2202      	movs	r2, #2
   30f7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30f80:	3308      	adds	r3, #8
   30f82:	2201      	movs	r2, #1
   30f84:	601a      	str	r2, [r3, #0]
}
   30f86:	bd38      	pop	{r3, r4, r5, pc}
                return true;
   30f88:	2201      	movs	r2, #1
   30f8a:	e7ea      	b.n	30f62 <nrfx_clock_start+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   30f8c:	4b0a      	ldr	r3, [pc, #40]	; (30fb8 <nrfx_clock_start+0xb0>)
   30f8e:	2202      	movs	r2, #2
   30f90:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   30f94:	e7ec      	b.n	30f70 <nrfx_clock_start+0x68>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   30f96:	4b0a      	ldr	r3, [pc, #40]	; (30fc0 <nrfx_clock_start+0xb8>)
   30f98:	2200      	movs	r2, #0
   30f9a:	601a      	str	r2, [r3, #0]
   30f9c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   30f9e:	4b06      	ldr	r3, [pc, #24]	; (30fb8 <nrfx_clock_start+0xb0>)
   30fa0:	2201      	movs	r2, #1
   30fa2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   30fa6:	601a      	str	r2, [r3, #0]
}
   30fa8:	e7ed      	b.n	30f86 <nrfx_clock_start+0x7e>
   30faa:	bf00      	nop
   30fac:	20010658 	.word	0x20010658
   30fb0:	00045714 	.word	0x00045714
   30fb4:	00041c84 	.word	0x00041c84
   30fb8:	40005000 	.word	0x40005000
   30fbc:	40005104 	.word	0x40005104
   30fc0:	40005100 	.word	0x40005100

00030fc4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   30fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30fc6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   30fc8:	4b51      	ldr	r3, [pc, #324]	; (31110 <nrfx_clock_stop+0x14c>)
   30fca:	791b      	ldrb	r3, [r3, #4]
   30fcc:	b17b      	cbz	r3, 30fee <nrfx_clock_stop+0x2a>
    switch (domain)
   30fce:	b1dc      	cbz	r4, 31008 <nrfx_clock_stop+0x44>
   30fd0:	2c01      	cmp	r4, #1
   30fd2:	d02a      	beq.n	3102a <nrfx_clock_stop+0x66>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   30fd4:	4c4f      	ldr	r4, [pc, #316]	; (31114 <nrfx_clock_stop+0x150>)
   30fd6:	f240 1267 	movw	r2, #359	; 0x167
   30fda:	4621      	mov	r1, r4
   30fdc:	484e      	ldr	r0, [pc, #312]	; (31118 <nrfx_clock_stop+0x154>)
   30fde:	f00a fdab 	bl	3bb38 <printk>
   30fe2:	f240 1167 	movw	r1, #359	; 0x167
   30fe6:	4620      	mov	r0, r4
   30fe8:	f00a fffa 	bl	3bfe0 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   30fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   30fee:	4d49      	ldr	r5, [pc, #292]	; (31114 <nrfx_clock_stop+0x150>)
   30ff0:	f240 124b 	movw	r2, #331	; 0x14b
   30ff4:	4629      	mov	r1, r5
   30ff6:	4848      	ldr	r0, [pc, #288]	; (31118 <nrfx_clock_stop+0x154>)
   30ff8:	f00a fd9e 	bl	3bb38 <printk>
   30ffc:	f240 114b 	movw	r1, #331	; 0x14b
   31000:	4628      	mov	r0, r5
   31002:	f00a ffed 	bl	3bfe0 <assert_post_action>
   31006:	e7e2      	b.n	30fce <nrfx_clock_stop+0xa>
    p_reg->INTENCLR = mask;
   31008:	4b44      	ldr	r3, [pc, #272]	; (3111c <nrfx_clock_stop+0x158>)
   3100a:	2202      	movs	r2, #2
   3100c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31010:	f503 7382 	add.w	r3, r3, #260	; 0x104
   31014:	2200      	movs	r2, #0
   31016:	601a      	str	r2, [r3, #0]
   31018:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3101a:	4b41      	ldr	r3, [pc, #260]	; (31120 <nrfx_clock_stop+0x15c>)
   3101c:	2201      	movs	r2, #1
   3101e:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   31020:	2c01      	cmp	r4, #1
   31022:	d00e      	beq.n	31042 <nrfx_clock_stop+0x7e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   31024:	f242 7510 	movw	r5, #10000	; 0x2710
   31028:	e053      	b.n	310d2 <nrfx_clock_stop+0x10e>
    p_reg->INTENCLR = mask;
   3102a:	2301      	movs	r3, #1
   3102c:	4a3b      	ldr	r2, [pc, #236]	; (3111c <nrfx_clock_stop+0x158>)
   3102e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31032:	f502 7280 	add.w	r2, r2, #256	; 0x100
   31036:	2100      	movs	r1, #0
   31038:	6011      	str	r1, [r2, #0]
   3103a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3103c:	4a39      	ldr	r2, [pc, #228]	; (31124 <nrfx_clock_stop+0x160>)
   3103e:	6013      	str	r3, [r2, #0]
}
   31040:	e7ee      	b.n	31020 <nrfx_clock_stop+0x5c>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   31042:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   31044:	f242 7610 	movw	r6, #10000	; 0x2710
   31048:	e013      	b.n	31072 <nrfx_clock_stop+0xae>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3104a:	4b34      	ldr	r3, [pc, #208]	; (3111c <nrfx_clock_stop+0x158>)
   3104c:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
   31050:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   31054:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   31058:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   3105c:	d127      	bne.n	310ae <nrfx_clock_stop+0xea>
    return false;
   3105e:	2300      	movs	r3, #0
   31060:	2b00      	cmp	r3, #0
   31062:	d0c3      	beq.n	30fec <nrfx_clock_stop+0x28>
   31064:	2d01      	cmp	r5, #1
   31066:	d1c1      	bne.n	30fec <nrfx_clock_stop+0x28>
   31068:	2001      	movs	r0, #1
   3106a:	f00d fd77 	bl	3eb5c <nrfx_busy_wait>
   3106e:	3e01      	subs	r6, #1
   31070:	d0bc      	beq.n	30fec <nrfx_clock_stop+0x28>
    switch (domain)
   31072:	2c00      	cmp	r4, #0
   31074:	d0e9      	beq.n	3104a <nrfx_clock_stop+0x86>
   31076:	2c01      	cmp	r4, #1
   31078:	d00d      	beq.n	31096 <nrfx_clock_stop+0xd2>
            NRFX_ASSERT(0);
   3107a:	4f2b      	ldr	r7, [pc, #172]	; (31128 <nrfx_clock_stop+0x164>)
   3107c:	f44f 724f 	mov.w	r2, #828	; 0x33c
   31080:	4639      	mov	r1, r7
   31082:	4825      	ldr	r0, [pc, #148]	; (31118 <nrfx_clock_stop+0x154>)
   31084:	f00a fd58 	bl	3bb38 <printk>
   31088:	f44f 714f 	mov.w	r1, #828	; 0x33c
   3108c:	4638      	mov	r0, r7
   3108e:	f00a ffa7 	bl	3bfe0 <assert_post_action>
            return false;
   31092:	2300      	movs	r3, #0
   31094:	e7e4      	b.n	31060 <nrfx_clock_stop+0x9c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   31096:	4b21      	ldr	r3, [pc, #132]	; (3111c <nrfx_clock_stop+0x158>)
   31098:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
   3109c:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   310a0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   310a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   310a8:	d103      	bne.n	310b2 <nrfx_clock_stop+0xee>
    return false;
   310aa:	2300      	movs	r3, #0
   310ac:	e7d8      	b.n	31060 <nrfx_clock_stop+0x9c>
                return true;
   310ae:	2301      	movs	r3, #1
   310b0:	e7d6      	b.n	31060 <nrfx_clock_stop+0x9c>
                return true;
   310b2:	2301      	movs	r3, #1
   310b4:	e7d4      	b.n	31060 <nrfx_clock_stop+0x9c>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   310b6:	4b19      	ldr	r3, [pc, #100]	; (3111c <nrfx_clock_stop+0x158>)
   310b8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   310bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   310c0:	d121      	bne.n	31106 <nrfx_clock_stop+0x142>
    return false;
   310c2:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   310c4:	2b00      	cmp	r3, #0
   310c6:	d091      	beq.n	30fec <nrfx_clock_stop+0x28>
   310c8:	2001      	movs	r0, #1
   310ca:	f00d fd47 	bl	3eb5c <nrfx_busy_wait>
   310ce:	3d01      	subs	r5, #1
   310d0:	d08c      	beq.n	30fec <nrfx_clock_stop+0x28>
    switch (domain)
   310d2:	2c00      	cmp	r4, #0
   310d4:	d0ef      	beq.n	310b6 <nrfx_clock_stop+0xf2>
   310d6:	2c01      	cmp	r4, #1
   310d8:	d00d      	beq.n	310f6 <nrfx_clock_stop+0x132>
            NRFX_ASSERT(0);
   310da:	4e13      	ldr	r6, [pc, #76]	; (31128 <nrfx_clock_stop+0x164>)
   310dc:	f44f 724f 	mov.w	r2, #828	; 0x33c
   310e0:	4631      	mov	r1, r6
   310e2:	480d      	ldr	r0, [pc, #52]	; (31118 <nrfx_clock_stop+0x154>)
   310e4:	f00a fd28 	bl	3bb38 <printk>
   310e8:	f44f 714f 	mov.w	r1, #828	; 0x33c
   310ec:	4630      	mov	r0, r6
   310ee:	f00a ff77 	bl	3bfe0 <assert_post_action>
            return false;
   310f2:	2300      	movs	r3, #0
   310f4:	e7e6      	b.n	310c4 <nrfx_clock_stop+0x100>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   310f6:	4b09      	ldr	r3, [pc, #36]	; (3111c <nrfx_clock_stop+0x158>)
   310f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   310fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   31100:	d103      	bne.n	3110a <nrfx_clock_stop+0x146>
    return false;
   31102:	2300      	movs	r3, #0
   31104:	e7de      	b.n	310c4 <nrfx_clock_stop+0x100>
                return true;
   31106:	2301      	movs	r3, #1
   31108:	e7dc      	b.n	310c4 <nrfx_clock_stop+0x100>
                return true;
   3110a:	2301      	movs	r3, #1
   3110c:	e7da      	b.n	310c4 <nrfx_clock_stop+0x100>
   3110e:	bf00      	nop
   31110:	20010658 	.word	0x20010658
   31114:	00045714 	.word	0x00045714
   31118:	00041c84 	.word	0x00041c84
   3111c:	40005000 	.word	0x40005000
   31120:	4000500c 	.word	0x4000500c
   31124:	40005004 	.word	0x40005004
   31128:	00045754 	.word	0x00045754

0003112c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3112c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3112e:	4b18      	ldr	r3, [pc, #96]	; (31190 <nrfx_power_clock_irq_handler+0x64>)
   31130:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   31132:	b153      	cbz	r3, 3114a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31134:	4b16      	ldr	r3, [pc, #88]	; (31190 <nrfx_power_clock_irq_handler+0x64>)
   31136:	2000      	movs	r0, #0
   31138:	6018      	str	r0, [r3, #0]
   3113a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3113c:	4b15      	ldr	r3, [pc, #84]	; (31194 <nrfx_power_clock_irq_handler+0x68>)
   3113e:	2201      	movs	r2, #1
   31140:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   31144:	4b14      	ldr	r3, [pc, #80]	; (31198 <nrfx_power_clock_irq_handler+0x6c>)
   31146:	681b      	ldr	r3, [r3, #0]
   31148:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3114a:	4b14      	ldr	r3, [pc, #80]	; (3119c <nrfx_power_clock_irq_handler+0x70>)
   3114c:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3114e:	b903      	cbnz	r3, 31152 <nrfx_power_clock_irq_handler+0x26>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   31150:	bd08      	pop	{r3, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31152:	4b12      	ldr	r3, [pc, #72]	; (3119c <nrfx_power_clock_irq_handler+0x70>)
   31154:	2200      	movs	r2, #0
   31156:	601a      	str	r2, [r3, #0]
   31158:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3115a:	4a0e      	ldr	r2, [pc, #56]	; (31194 <nrfx_power_clock_irq_handler+0x68>)
   3115c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   31160:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   31164:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   31168:	2b01      	cmp	r3, #1
   3116a:	d008      	beq.n	3117e <nrfx_power_clock_irq_handler+0x52>
    p_reg->INTENCLR = mask;
   3116c:	4b09      	ldr	r3, [pc, #36]	; (31194 <nrfx_power_clock_irq_handler+0x68>)
   3116e:	2202      	movs	r2, #2
   31170:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   31174:	4b08      	ldr	r3, [pc, #32]	; (31198 <nrfx_power_clock_irq_handler+0x6c>)
   31176:	681b      	ldr	r3, [r3, #0]
   31178:	2001      	movs	r0, #1
   3117a:	4798      	blx	r3
}
   3117c:	e7e8      	b.n	31150 <nrfx_power_clock_irq_handler+0x24>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3117e:	4b05      	ldr	r3, [pc, #20]	; (31194 <nrfx_power_clock_irq_handler+0x68>)
   31180:	2202      	movs	r2, #2
   31182:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31186:	3308      	adds	r3, #8
   31188:	2201      	movs	r2, #1
   3118a:	601a      	str	r2, [r3, #0]
}
   3118c:	e7e0      	b.n	31150 <nrfx_power_clock_irq_handler+0x24>
   3118e:	bf00      	nop
   31190:	40005100 	.word	0x40005100
   31194:	40005000 	.word	0x40005000
   31198:	20010658 	.word	0x20010658
   3119c:	40005104 	.word	0x40005104

000311a0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   311a0:	b508      	push	{r3, lr}
   311a2:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   311a4:	4801      	ldr	r0, [pc, #4]	; (311ac <nrfx_dppi_channel_alloc+0xc>)
   311a6:	f7ff fe2d 	bl	30e04 <nrfx_flag32_alloc>
}
   311aa:	bd08      	pop	{r3, pc}
   311ac:	2000c684 	.word	0x2000c684

000311b0 <nrfx_dppi_channel_enable>:
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    return nrfx_flag32_free(&m_allocated_channels, channel);
}

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
   311b0:	b510      	push	{r4, lr}
   311b2:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!nrfx_flag32_is_allocated(m_allocated_channels, channel))
   311b4:	4601      	mov	r1, r0
   311b6:	4b07      	ldr	r3, [pc, #28]	; (311d4 <nrfx_dppi_channel_enable+0x24>)
   311b8:	6818      	ldr	r0, [r3, #0]
   311ba:	f00d fcd3 	bl	3eb64 <nrfx_flag32_is_allocated>
   311be:	b138      	cbz	r0, 311d0 <nrfx_dppi_channel_enable+0x20>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
   311c0:	2001      	movs	r0, #1
   311c2:	fa00 f404 	lsl.w	r4, r0, r4
   311c6:	4b04      	ldr	r3, [pc, #16]	; (311d8 <nrfx_dppi_channel_enable+0x28>)
   311c8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    nrfx_err_t err_code = NRFX_SUCCESS;
   311cc:	4803      	ldr	r0, [pc, #12]	; (311dc <nrfx_dppi_channel_enable+0x2c>)
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   311ce:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_INVALID_PARAM;
   311d0:	4803      	ldr	r0, [pc, #12]	; (311e0 <nrfx_dppi_channel_enable+0x30>)
    return err_code;
   311d2:	e7fc      	b.n	311ce <nrfx_dppi_channel_enable+0x1e>
   311d4:	2000c684 	.word	0x2000c684
   311d8:	40017000 	.word	0x40017000
   311dc:	0bad0000 	.word	0x0bad0000
   311e0:	0bad0004 	.word	0x0bad0004

000311e4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   311e4:	3008      	adds	r0, #8
   311e6:	4b03      	ldr	r3, [pc, #12]	; (311f4 <pin_in_use+0x10>)
   311e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   311ec:	f000 0001 	and.w	r0, r0, #1
   311f0:	4770      	bx	lr
   311f2:	bf00      	nop
   311f4:	2000c688 	.word	0x2000c688

000311f8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   311f8:	3008      	adds	r0, #8
   311fa:	4b03      	ldr	r3, [pc, #12]	; (31208 <pin_in_use_by_te+0x10>)
   311fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   31200:	f3c0 1040 	ubfx	r0, r0, #5, #1
   31204:	4770      	bx	lr
   31206:	bf00      	nop
   31208:	2000c688 	.word	0x2000c688

0003120c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   3120c:	3008      	adds	r0, #8
   3120e:	4b04      	ldr	r3, [pc, #16]	; (31220 <pin_has_trigger+0x14>)
   31210:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   31214:	f010 001c 	ands.w	r0, r0, #28
   31218:	bf18      	it	ne
   3121a:	2001      	movne	r0, #1
   3121c:	4770      	bx	lr
   3121e:	bf00      	nop
   31220:	2000c688 	.word	0x2000c688

00031224 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   31224:	3008      	adds	r0, #8
   31226:	4b03      	ldr	r3, [pc, #12]	; (31234 <pin_is_output+0x10>)
   31228:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   3122c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   31230:	4770      	bx	lr
   31232:	bf00      	nop
   31234:	2000c688 	.word	0x2000c688

00031238 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   31238:	3008      	adds	r0, #8
   3123a:	4b02      	ldr	r3, [pc, #8]	; (31244 <pin_te_get+0xc>)
   3123c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   31240:	0b40      	lsrs	r0, r0, #13
   31242:	4770      	bx	lr
   31244:	2000c688 	.word	0x2000c688

00031248 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   31248:	2200      	movs	r2, #0
   3124a:	e004      	b.n	31256 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3124c:	f04f 33ff 	mov.w	r3, #4294967295
   31250:	4283      	cmp	r3, r0
   31252:	d00f      	beq.n	31274 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   31254:	3201      	adds	r2, #1
   31256:	2a1f      	cmp	r2, #31
   31258:	d80a      	bhi.n	31270 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   3125a:	f102 0308 	add.w	r3, r2, #8
   3125e:	4906      	ldr	r1, [pc, #24]	; (31278 <handler_in_use+0x30>)
   31260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   31264:	f413 7f80 	tst.w	r3, #256	; 0x100
   31268:	d0f0      	beq.n	3124c <handler_in_use+0x4>
   3126a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   3126e:	e7ef      	b.n	31250 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   31270:	2000      	movs	r0, #0
   31272:	4770      	bx	lr
            return true;
   31274:	2001      	movs	r0, #1
}
   31276:	4770      	bx	lr
   31278:	2000c688 	.word	0x2000c688

0003127c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   3127c:	2300      	movs	r3, #0
   3127e:	b113      	cbz	r3, 31286 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   31280:	f04f 30ff 	mov.w	r0, #4294967295
}
   31284:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   31286:	4a07      	ldr	r2, [pc, #28]	; (312a4 <find_handler+0x28>)
   31288:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   3128c:	4282      	cmp	r2, r0
   3128e:	d001      	beq.n	31294 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   31290:	3301      	adds	r3, #1
   31292:	e7f4      	b.n	3127e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   31294:	4a03      	ldr	r2, [pc, #12]	; (312a4 <find_handler+0x28>)
   31296:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   3129a:	6852      	ldr	r2, [r2, #4]
   3129c:	428a      	cmp	r2, r1
   3129e:	d1f7      	bne.n	31290 <find_handler+0x14>
            return i;
   312a0:	4618      	mov	r0, r3
   312a2:	4770      	bx	lr
   312a4:	2000c688 	.word	0x2000c688

000312a8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   312a8:	3008      	adds	r0, #8
   312aa:	4b06      	ldr	r3, [pc, #24]	; (312c4 <channel_handler_get+0x1c>)
   312ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   312b0:	f410 7f80 	tst.w	r0, #256	; 0x100
   312b4:	d004      	beq.n	312c0 <channel_handler_get+0x18>
   312b6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   312ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   312be:	4770      	bx	lr
        return NULL;
   312c0:	2000      	movs	r0, #0
}
   312c2:	4770      	bx	lr
   312c4:	2000c688 	.word	0x2000c688

000312c8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   312c8:	b570      	push	{r4, r5, r6, lr}
   312ca:	4604      	mov	r4, r0
   312cc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   312ce:	f7ff ffeb 	bl	312a8 <channel_handler_get>

    if (handler)
   312d2:	b120      	cbz	r0, 312de <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   312d4:	6806      	ldr	r6, [r0, #0]
   312d6:	6842      	ldr	r2, [r0, #4]
   312d8:	4629      	mov	r1, r5
   312da:	4620      	mov	r0, r4
   312dc:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   312de:	4b04      	ldr	r3, [pc, #16]	; (312f0 <call_handler+0x28>)
   312e0:	689b      	ldr	r3, [r3, #8]
   312e2:	b123      	cbz	r3, 312ee <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   312e4:	4a02      	ldr	r2, [pc, #8]	; (312f0 <call_handler+0x28>)
   312e6:	68d2      	ldr	r2, [r2, #12]
   312e8:	4629      	mov	r1, r5
   312ea:	4620      	mov	r0, r4
   312ec:	4798      	blx	r3
    }
}
   312ee:	bd70      	pop	{r4, r5, r6, pc}
   312f0:	2000c688 	.word	0x2000c688

000312f4 <latch_pending_read_and_check>:
    }
}

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   312f4:	b410      	push	{r4}
    for (i = start_port; i < (start_port + length); i++)
   312f6:	4604      	mov	r4, r0
   312f8:	2300      	movs	r3, #0
   312fa:	b933      	cbnz	r3, 3130a <latch_pending_read_and_check+0x16>
        *p_masks = gpio_regs[i]->LATCH;
   312fc:	4a09      	ldr	r2, [pc, #36]	; (31324 <latch_pending_read_and_check+0x30>)
   312fe:	6a11      	ldr	r1, [r2, #32]
   31300:	f844 1b04 	str.w	r1, [r4], #4
        gpio_regs[i]->LATCH = *p_masks;
   31304:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   31306:	3301      	adds	r3, #1
   31308:	e7f7      	b.n	312fa <latch_pending_read_and_check+0x6>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   3130a:	2300      	movs	r3, #0
   3130c:	b113      	cbz	r3, 31314 <latch_pending_read_and_check+0x20>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   3130e:	2000      	movs	r0, #0
}
   31310:	bc10      	pop	{r4}
   31312:	4770      	bx	lr
        if (latch[port_idx])
   31314:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
   31318:	b90a      	cbnz	r2, 3131e <latch_pending_read_and_check+0x2a>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   3131a:	3301      	adds	r3, #1
   3131c:	e7f6      	b.n	3130c <latch_pending_read_and_check+0x18>
            return true;
   3131e:	2001      	movs	r0, #1
   31320:	e7f6      	b.n	31310 <latch_pending_read_and_check+0x1c>
   31322:	bf00      	nop
   31324:	40842500 	.word	0x40842500

00031328 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   31328:	f100 0208 	add.w	r2, r0, #8
   3132c:	4b16      	ldr	r3, [pc, #88]	; (31388 <release_handler+0x60>)
   3132e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   31332:	f413 7f80 	tst.w	r3, #256	; 0x100
   31336:	d025      	beq.n	31384 <release_handler+0x5c>
{
   31338:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   3133a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   3133e:	4610      	mov	r0, r2
   31340:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   31344:	4a10      	ldr	r2, [pc, #64]	; (31388 <release_handler+0x60>)
   31346:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   3134a:	4620      	mov	r0, r4
   3134c:	f7ff ff7c 	bl	31248 <handler_in_use>
   31350:	b100      	cbz	r0, 31354 <release_handler+0x2c>
}
   31352:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   31354:	480c      	ldr	r0, [pc, #48]	; (31388 <release_handler+0x60>)
   31356:	2300      	movs	r3, #0
   31358:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   3135c:	4621      	mov	r1, r4
   3135e:	3054      	adds	r0, #84	; 0x54
   31360:	f7ff fd70 	bl	30e44 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   31364:	4b09      	ldr	r3, [pc, #36]	; (3138c <release_handler+0x64>)
   31366:	4298      	cmp	r0, r3
   31368:	d0f3      	beq.n	31352 <release_handler+0x2a>
   3136a:	4c09      	ldr	r4, [pc, #36]	; (31390 <release_handler+0x68>)
   3136c:	f44f 7299 	mov.w	r2, #306	; 0x132
   31370:	4621      	mov	r1, r4
   31372:	4808      	ldr	r0, [pc, #32]	; (31394 <release_handler+0x6c>)
   31374:	f00a fbe0 	bl	3bb38 <printk>
   31378:	f44f 7199 	mov.w	r1, #306	; 0x132
   3137c:	4620      	mov	r0, r4
   3137e:	f00a fe2f 	bl	3bfe0 <assert_post_action>
   31382:	e7e6      	b.n	31352 <release_handler+0x2a>
   31384:	4770      	bx	lr
   31386:	bf00      	nop
   31388:	2000c688 	.word	0x2000c688
   3138c:	0bad0000 	.word	0x0bad0000
   31390:	00045788 	.word	0x00045788
   31394:	00041c84 	.word	0x00041c84

00031398 <pin_handler_trigger_uninit>:
{
   31398:	b510      	push	{r4, lr}
   3139a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   3139c:	f7ff ff2c 	bl	311f8 <pin_in_use_by_te>
   313a0:	b150      	cbz	r0, 313b8 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   313a2:	4620      	mov	r0, r4
   313a4:	f7ff ff48 	bl	31238 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   313a8:	4b08      	ldr	r3, [pc, #32]	; (313cc <pin_handler_trigger_uninit+0x34>)
   313aa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   313ae:	2200      	movs	r2, #0
   313b0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   313b4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   313b8:	4620      	mov	r0, r4
   313ba:	f7ff ffb5 	bl	31328 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   313be:	3408      	adds	r4, #8
   313c0:	4b03      	ldr	r3, [pc, #12]	; (313d0 <pin_handler_trigger_uninit+0x38>)
   313c2:	2200      	movs	r2, #0
   313c4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   313c8:	bd10      	pop	{r4, pc}
   313ca:	bf00      	nop
   313cc:	40031000 	.word	0x40031000
   313d0:	2000c688 	.word	0x2000c688

000313d4 <pin_handler_set>:
{
   313d4:	b570      	push	{r4, r5, r6, lr}
   313d6:	b082      	sub	sp, #8
   313d8:	4606      	mov	r6, r0
   313da:	460c      	mov	r4, r1
   313dc:	4615      	mov	r5, r2
    release_handler(pin);
   313de:	f7ff ffa3 	bl	31328 <release_handler>
    if (!handler)
   313e2:	b324      	cbz	r4, 3142e <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   313e4:	4629      	mov	r1, r5
   313e6:	4620      	mov	r0, r4
   313e8:	f7ff ff48 	bl	3127c <find_handler>
    if (handler_id < 0)
   313ec:	1e03      	subs	r3, r0, #0
   313ee:	db13      	blt.n	31418 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   313f0:	4a10      	ldr	r2, [pc, #64]	; (31434 <pin_handler_set+0x60>)
   313f2:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   313f6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   313fa:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   313fc:	025b      	lsls	r3, r3, #9
   313fe:	b29b      	uxth	r3, r3
   31400:	f106 0008 	add.w	r0, r6, #8
   31404:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   31408:	430b      	orrs	r3, r1
   3140a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   3140e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   31412:	4809      	ldr	r0, [pc, #36]	; (31438 <pin_handler_set+0x64>)
}
   31414:	b002      	add	sp, #8
   31416:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   31418:	f10d 0107 	add.w	r1, sp, #7
   3141c:	4807      	ldr	r0, [pc, #28]	; (3143c <pin_handler_set+0x68>)
   3141e:	f7ff fcf1 	bl	30e04 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   31422:	4b05      	ldr	r3, [pc, #20]	; (31438 <pin_handler_set+0x64>)
   31424:	4298      	cmp	r0, r3
   31426:	d1f5      	bne.n	31414 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   31428:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3142c:	e7e0      	b.n	313f0 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   3142e:	4802      	ldr	r0, [pc, #8]	; (31438 <pin_handler_set+0x64>)
   31430:	e7f0      	b.n	31414 <pin_handler_set+0x40>
   31432:	bf00      	nop
   31434:	2000c688 	.word	0x2000c688
   31438:	0bad0000 	.word	0x0bad0000
   3143c:	2000c6dc 	.word	0x2000c6dc

00031440 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   31440:	b538      	push	{r3, r4, r5, lr}
   31442:	4604      	mov	r4, r0
    while (mask)
   31444:	b1cc      	cbz	r4, 3147a <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   31446:	fa94 f3a4 	rbit	r3, r4
   3144a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   3144e:	2201      	movs	r2, #1
   31450:	409a      	lsls	r2, r3
   31452:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   31456:	4a09      	ldr	r2, [pc, #36]	; (3147c <gpiote_evt_handle+0x3c>)
   31458:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   3145c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   31460:	f3c5 2504 	ubfx	r5, r5, #8, #5
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   31464:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   31468:	f3c0 4001 	ubfx	r0, r0, #16, #2
   3146c:	f00d fb97 	bl	3eb9e <gpiote_polarity_to_trigger>
   31470:	4601      	mov	r1, r0
   31472:	4628      	mov	r0, r5
   31474:	f7ff ff28 	bl	312c8 <call_handler>
   31478:	e7e4      	b.n	31444 <gpiote_evt_handle+0x4>
    }
}
   3147a:	bd38      	pop	{r3, r4, r5, pc}
   3147c:	40031000 	.word	0x40031000

00031480 <next_sense_cond_call_handler>:
{
   31480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31484:	4604      	mov	r4, r0
   31486:	460d      	mov	r5, r1
   31488:	4616      	mov	r6, r2
    if (is_level(trigger))
   3148a:	4608      	mov	r0, r1
   3148c:	f00d fb89 	bl	3eba2 <is_level>
   31490:	bb50      	cbnz	r0, 314e8 <next_sense_cond_call_handler+0x68>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   31492:	2e02      	cmp	r6, #2
   31494:	f000 80c7 	beq.w	31626 <next_sense_cond_call_handler+0x1a6>
   31498:	f04f 0802 	mov.w	r8, #2
    switch (port)
   3149c:	0963      	lsrs	r3, r4, #5
   3149e:	f000 80c5 	beq.w	3162c <next_sense_cond_call_handler+0x1ac>
    uint32_t mask = 0;
   314a2:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   314a4:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   314a8:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   314aa:	f013 0f01 	tst.w	r3, #1
   314ae:	f000 80c0 	beq.w	31632 <next_sense_cond_call_handler+0x1b2>
    *p_pin = pin_number & 0x1F;
   314b2:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   314b6:	0963      	lsrs	r3, r4, #5
   314b8:	f040 80c8 	bne.w	3164c <next_sense_cond_call_handler+0x1cc>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   314bc:	4970      	ldr	r1, [pc, #448]	; (31680 <next_sense_cond_call_handler+0x200>)
   314be:	f107 0280 	add.w	r2, r7, #128	; 0x80
   314c2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   314c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   314ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   314ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   314d2:	2d03      	cmp	r5, #3
   314d4:	f000 80cb 	beq.w	3166e <next_sense_cond_call_handler+0x1ee>
   314d8:	2e02      	cmp	r6, #2
   314da:	f000 80c5 	beq.w	31668 <next_sense_cond_call_handler+0x1e8>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   314de:	2e03      	cmp	r6, #3
   314e0:	f000 80ca 	beq.w	31678 <next_sense_cond_call_handler+0x1f8>
}
   314e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        call_handler(pin, trigger);
   314e8:	4629      	mov	r1, r5
   314ea:	4620      	mov	r0, r4
   314ec:	f7ff feec 	bl	312c8 <call_handler>
    switch (port)
   314f0:	0963      	lsrs	r3, r4, #5
   314f2:	d041      	beq.n	31578 <next_sense_cond_call_handler+0xf8>
    uint32_t mask = 0;
   314f4:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   314f6:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   314fa:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   314fc:	f013 0f01 	tst.w	r3, #1
   31500:	d03d      	beq.n	3157e <next_sense_cond_call_handler+0xfe>
    *p_pin = pin_number & 0x1F;
   31502:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31506:	0963      	lsrs	r3, r4, #5
   31508:	d146      	bne.n	31598 <next_sense_cond_call_handler+0x118>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3150a:	3580      	adds	r5, #128	; 0x80
   3150c:	4b5c      	ldr	r3, [pc, #368]	; (31680 <next_sense_cond_call_handler+0x200>)
   3150e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   31512:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   31516:	429e      	cmp	r6, r3
   31518:	d1e4      	bne.n	314e4 <next_sense_cond_call_handler+0x64>
    switch (port)
   3151a:	0963      	lsrs	r3, r4, #5
   3151c:	d049      	beq.n	315b2 <next_sense_cond_call_handler+0x132>
    uint32_t mask = 0;
   3151e:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   31520:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31524:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31526:	f013 0f01 	tst.w	r3, #1
   3152a:	d045      	beq.n	315b8 <next_sense_cond_call_handler+0x138>
    *p_pin = pin_number & 0x1F;
   3152c:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31530:	0963      	lsrs	r3, r4, #5
   31532:	d14e      	bne.n	315d2 <next_sense_cond_call_handler+0x152>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31534:	4952      	ldr	r1, [pc, #328]	; (31680 <next_sense_cond_call_handler+0x200>)
   31536:	f105 0380 	add.w	r3, r5, #128	; 0x80
   3153a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   3153e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   31542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    switch (port)
   31546:	0963      	lsrs	r3, r4, #5
   31548:	d050      	beq.n	315ec <next_sense_cond_call_handler+0x16c>
    uint32_t mask = 0;
   3154a:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   3154c:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31550:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31552:	f013 0f01 	tst.w	r3, #1
   31556:	d04c      	beq.n	315f2 <next_sense_cond_call_handler+0x172>
    *p_pin = pin_number & 0x1F;
   31558:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   3155c:	0963      	lsrs	r3, r4, #5
   3155e:	d155      	bne.n	3160c <next_sense_cond_call_handler+0x18c>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31560:	4947      	ldr	r1, [pc, #284]	; (31680 <next_sense_cond_call_handler+0x200>)
   31562:	f105 0380 	add.w	r3, r5, #128	; 0x80
   31566:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   3156a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3156e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   31572:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   31576:	e7b5      	b.n	314e4 <next_sense_cond_call_handler+0x64>
            mask = P0_FEATURE_PINS_PRESENT;
   31578:	f04f 33ff 	mov.w	r3, #4294967295
   3157c:	e7bb      	b.n	314f6 <next_sense_cond_call_handler+0x76>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3157e:	4d41      	ldr	r5, [pc, #260]	; (31684 <next_sense_cond_call_handler+0x204>)
   31580:	f240 2229 	movw	r2, #553	; 0x229
   31584:	4629      	mov	r1, r5
   31586:	4840      	ldr	r0, [pc, #256]	; (31688 <next_sense_cond_call_handler+0x208>)
   31588:	f00a fad6 	bl	3bb38 <printk>
   3158c:	f240 2129 	movw	r1, #553	; 0x229
   31590:	4628      	mov	r0, r5
   31592:	f00a fd25 	bl	3bfe0 <assert_post_action>
   31596:	e7b4      	b.n	31502 <next_sense_cond_call_handler+0x82>
            NRFX_ASSERT(0);
   31598:	4f3a      	ldr	r7, [pc, #232]	; (31684 <next_sense_cond_call_handler+0x204>)
   3159a:	f240 222e 	movw	r2, #558	; 0x22e
   3159e:	4639      	mov	r1, r7
   315a0:	4839      	ldr	r0, [pc, #228]	; (31688 <next_sense_cond_call_handler+0x208>)
   315a2:	f00a fac9 	bl	3bb38 <printk>
   315a6:	f240 212e 	movw	r1, #558	; 0x22e
   315aa:	4638      	mov	r0, r7
   315ac:	f00a fd18 	bl	3bfe0 <assert_post_action>
   315b0:	e7ab      	b.n	3150a <next_sense_cond_call_handler+0x8a>
            mask = P0_FEATURE_PINS_PRESENT;
   315b2:	f04f 33ff 	mov.w	r3, #4294967295
   315b6:	e7b3      	b.n	31520 <next_sense_cond_call_handler+0xa0>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   315b8:	4d32      	ldr	r5, [pc, #200]	; (31684 <next_sense_cond_call_handler+0x204>)
   315ba:	f240 2229 	movw	r2, #553	; 0x229
   315be:	4629      	mov	r1, r5
   315c0:	4831      	ldr	r0, [pc, #196]	; (31688 <next_sense_cond_call_handler+0x208>)
   315c2:	f00a fab9 	bl	3bb38 <printk>
   315c6:	f240 2129 	movw	r1, #553	; 0x229
   315ca:	4628      	mov	r0, r5
   315cc:	f00a fd08 	bl	3bfe0 <assert_post_action>
   315d0:	e7ac      	b.n	3152c <next_sense_cond_call_handler+0xac>
            NRFX_ASSERT(0);
   315d2:	4f2c      	ldr	r7, [pc, #176]	; (31684 <next_sense_cond_call_handler+0x204>)
   315d4:	f240 222e 	movw	r2, #558	; 0x22e
   315d8:	4639      	mov	r1, r7
   315da:	482b      	ldr	r0, [pc, #172]	; (31688 <next_sense_cond_call_handler+0x208>)
   315dc:	f00a faac 	bl	3bb38 <printk>
   315e0:	f240 212e 	movw	r1, #558	; 0x22e
   315e4:	4638      	mov	r0, r7
   315e6:	f00a fcfb 	bl	3bfe0 <assert_post_action>
   315ea:	e7a3      	b.n	31534 <next_sense_cond_call_handler+0xb4>
            mask = P0_FEATURE_PINS_PRESENT;
   315ec:	f04f 33ff 	mov.w	r3, #4294967295
   315f0:	e7ac      	b.n	3154c <next_sense_cond_call_handler+0xcc>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   315f2:	4d24      	ldr	r5, [pc, #144]	; (31684 <next_sense_cond_call_handler+0x204>)
   315f4:	f240 2229 	movw	r2, #553	; 0x229
   315f8:	4629      	mov	r1, r5
   315fa:	4823      	ldr	r0, [pc, #140]	; (31688 <next_sense_cond_call_handler+0x208>)
   315fc:	f00a fa9c 	bl	3bb38 <printk>
   31600:	f240 2129 	movw	r1, #553	; 0x229
   31604:	4628      	mov	r0, r5
   31606:	f00a fceb 	bl	3bfe0 <assert_post_action>
   3160a:	e7a5      	b.n	31558 <next_sense_cond_call_handler+0xd8>
            NRFX_ASSERT(0);
   3160c:	4c1d      	ldr	r4, [pc, #116]	; (31684 <next_sense_cond_call_handler+0x204>)
   3160e:	f240 222e 	movw	r2, #558	; 0x22e
   31612:	4621      	mov	r1, r4
   31614:	481c      	ldr	r0, [pc, #112]	; (31688 <next_sense_cond_call_handler+0x208>)
   31616:	f00a fa8f 	bl	3bb38 <printk>
   3161a:	f240 212e 	movw	r1, #558	; 0x22e
   3161e:	4620      	mov	r0, r4
   31620:	f00a fcde 	bl	3bfe0 <assert_post_action>
   31624:	e79c      	b.n	31560 <next_sense_cond_call_handler+0xe0>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   31626:	f04f 0803 	mov.w	r8, #3
   3162a:	e737      	b.n	3149c <next_sense_cond_call_handler+0x1c>
            mask = P0_FEATURE_PINS_PRESENT;
   3162c:	f04f 33ff 	mov.w	r3, #4294967295
   31630:	e738      	b.n	314a4 <next_sense_cond_call_handler+0x24>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31632:	4f14      	ldr	r7, [pc, #80]	; (31684 <next_sense_cond_call_handler+0x204>)
   31634:	f240 2229 	movw	r2, #553	; 0x229
   31638:	4639      	mov	r1, r7
   3163a:	4813      	ldr	r0, [pc, #76]	; (31688 <next_sense_cond_call_handler+0x208>)
   3163c:	f00a fa7c 	bl	3bb38 <printk>
   31640:	f240 2129 	movw	r1, #553	; 0x229
   31644:	4638      	mov	r0, r7
   31646:	f00a fccb 	bl	3bfe0 <assert_post_action>
   3164a:	e732      	b.n	314b2 <next_sense_cond_call_handler+0x32>
            NRFX_ASSERT(0);
   3164c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 31684 <next_sense_cond_call_handler+0x204>
   31650:	f240 222e 	movw	r2, #558	; 0x22e
   31654:	4649      	mov	r1, r9
   31656:	480c      	ldr	r0, [pc, #48]	; (31688 <next_sense_cond_call_handler+0x208>)
   31658:	f00a fa6e 	bl	3bb38 <printk>
   3165c:	f240 212e 	movw	r1, #558	; 0x22e
   31660:	4648      	mov	r0, r9
   31662:	f00a fcbd 	bl	3bfe0 <assert_post_action>
   31666:	e729      	b.n	314bc <next_sense_cond_call_handler+0x3c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   31668:	2d01      	cmp	r5, #1
   3166a:	f47f af38 	bne.w	314de <next_sense_cond_call_handler+0x5e>
            call_handler(pin, trigger);
   3166e:	4629      	mov	r1, r5
   31670:	4620      	mov	r0, r4
   31672:	f7ff fe29 	bl	312c8 <call_handler>
}
   31676:	e735      	b.n	314e4 <next_sense_cond_call_handler+0x64>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   31678:	2d02      	cmp	r5, #2
   3167a:	f47f af33 	bne.w	314e4 <next_sense_cond_call_handler+0x64>
   3167e:	e7f6      	b.n	3166e <next_sense_cond_call_handler+0x1ee>
   31680:	40842500 	.word	0x40842500
   31684:	00042e20 	.word	0x00042e20
   31688:	00041c84 	.word	0x00041c84

0003168c <port_event_handle>:
{
   3168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31690:	b082      	sub	sp, #8
    for (i = start_port; i < (start_port + length); i++)
   31692:	2300      	movs	r3, #0
   31694:	a801      	add	r0, sp, #4
   31696:	e005      	b.n	316a4 <port_event_handle+0x18>
        *p_masks = gpio_regs[i]->LATCH;
   31698:	4a4d      	ldr	r2, [pc, #308]	; (317d0 <port_event_handle+0x144>)
   3169a:	6a11      	ldr	r1, [r2, #32]
   3169c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   316a0:	6211      	str	r1, [r2, #32]
    for (i = start_port; i < (start_port + length); i++)
   316a2:	3301      	adds	r3, #1
   316a4:	2b00      	cmp	r3, #0
   316a6:	d0f7      	beq.n	31698 <port_event_handle+0xc>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   316a8:	2500      	movs	r5, #0
   316aa:	2d00      	cmp	r5, #0
   316ac:	d039      	beq.n	31722 <port_event_handle+0x96>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   316ae:	4b49      	ldr	r3, [pc, #292]	; (317d4 <port_event_handle+0x148>)
   316b0:	2200      	movs	r2, #0
   316b2:	601a      	str	r2, [r3, #0]
   316b4:	681b      	ldr	r3, [r3, #0]
    } while (latch_pending_read_and_check(latch));
   316b6:	a801      	add	r0, sp, #4
   316b8:	f7ff fe1c 	bl	312f4 <latch_pending_read_and_check>
   316bc:	2800      	cmp	r0, #0
   316be:	d1f3      	bne.n	316a8 <port_event_handle+0x1c>
}
   316c0:	b002      	add	sp, #8
   316c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   316c6:	f04f 33ff 	mov.w	r3, #4294967295
   316ca:	e04c      	b.n	31766 <port_event_handle+0xda>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   316cc:	4f42      	ldr	r7, [pc, #264]	; (317d8 <port_event_handle+0x14c>)
   316ce:	f240 2229 	movw	r2, #553	; 0x229
   316d2:	4639      	mov	r1, r7
   316d4:	4841      	ldr	r0, [pc, #260]	; (317dc <port_event_handle+0x150>)
   316d6:	f00a fa2f 	bl	3bb38 <printk>
   316da:	f240 2129 	movw	r1, #553	; 0x229
   316de:	4638      	mov	r0, r7
   316e0:	f00a fc7e 	bl	3bfe0 <assert_post_action>
   316e4:	e045      	b.n	31772 <port_event_handle+0xe6>
            NRFX_ASSERT(0);
   316e6:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 317d8 <port_event_handle+0x14c>
   316ea:	f240 222e 	movw	r2, #558	; 0x22e
   316ee:	4641      	mov	r1, r8
   316f0:	483a      	ldr	r0, [pc, #232]	; (317dc <port_event_handle+0x150>)
   316f2:	f00a fa21 	bl	3bb38 <printk>
   316f6:	f240 212e 	movw	r1, #558	; 0x22e
   316fa:	4640      	mov	r0, r8
   316fc:	f00a fc70 	bl	3bfe0 <assert_post_action>
   31700:	e03b      	b.n	3177a <port_event_handle+0xee>
            mask = P0_FEATURE_PINS_PRESENT;
   31702:	f04f 33ff 	mov.w	r3, #4294967295
    pin_number &= 0x1F;
   31706:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3170a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3170c:	f013 0f01 	tst.w	r3, #1
   31710:	d041      	beq.n	31796 <port_event_handle+0x10a>
    *p_pin = pin_number & 0x1F;
   31712:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31716:	0963      	lsrs	r3, r4, #5
   31718:	d14a      	bne.n	317b0 <port_event_handle+0x124>
    reg->LATCH = (1 << pin_number);
   3171a:	2301      	movs	r3, #1
   3171c:	40b3      	lsls	r3, r6
   3171e:	4a2c      	ldr	r2, [pc, #176]	; (317d0 <port_event_handle+0x144>)
   31720:	6213      	str	r3, [r2, #32]
            while (latch[i])
   31722:	ab02      	add	r3, sp, #8
   31724:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   31728:	f853 4c04 	ldr.w	r4, [r3, #-4]
   3172c:	2c00      	cmp	r4, #0
   3172e:	d04c      	beq.n	317ca <port_event_handle+0x13e>
                uint32_t pin = NRF_CTZ(latch[i]);
   31730:	fa94 f4a4 	rbit	r4, r4
   31734:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   31738:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   3173c:	f104 0208 	add.w	r2, r4, #8
   31740:	4b27      	ldr	r3, [pc, #156]	; (317e0 <port_event_handle+0x154>)
   31742:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   31746:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   3174a:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   3174c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   31750:	a801      	add	r0, sp, #4
   31752:	2301      	movs	r3, #1
   31754:	fa03 f202 	lsl.w	r2, r3, r2
   31758:	5c43      	ldrb	r3, [r0, r1]
   3175a:	ea23 0302 	bic.w	r3, r3, r2
   3175e:	5443      	strb	r3, [r0, r1]
    switch (port)
   31760:	0963      	lsrs	r3, r4, #5
   31762:	d0b0      	beq.n	316c6 <port_event_handle+0x3a>
    uint32_t mask = 0;
   31764:	462b      	mov	r3, r5
    pin_number &= 0x1F;
   31766:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3176a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   3176c:	f013 0f01 	tst.w	r3, #1
   31770:	d0ac      	beq.n	316cc <port_event_handle+0x40>
    *p_pin = pin_number & 0x1F;
   31772:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31776:	0963      	lsrs	r3, r4, #5
   31778:	d1b5      	bne.n	316e6 <port_event_handle+0x5a>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3177a:	3780      	adds	r7, #128	; 0x80
   3177c:	4b14      	ldr	r3, [pc, #80]	; (317d0 <port_event_handle+0x144>)
   3177e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   31782:	f3c2 4201 	ubfx	r2, r2, #16, #2
   31786:	4631      	mov	r1, r6
   31788:	4620      	mov	r0, r4
   3178a:	f7ff fe79 	bl	31480 <next_sense_cond_call_handler>
    switch (port)
   3178e:	0963      	lsrs	r3, r4, #5
   31790:	d0b7      	beq.n	31702 <port_event_handle+0x76>
    uint32_t mask = 0;
   31792:	462b      	mov	r3, r5
   31794:	e7b7      	b.n	31706 <port_event_handle+0x7a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31796:	4e10      	ldr	r6, [pc, #64]	; (317d8 <port_event_handle+0x14c>)
   31798:	f240 2229 	movw	r2, #553	; 0x229
   3179c:	4631      	mov	r1, r6
   3179e:	480f      	ldr	r0, [pc, #60]	; (317dc <port_event_handle+0x150>)
   317a0:	f00a f9ca 	bl	3bb38 <printk>
   317a4:	f240 2129 	movw	r1, #553	; 0x229
   317a8:	4630      	mov	r0, r6
   317aa:	f00a fc19 	bl	3bfe0 <assert_post_action>
   317ae:	e7b0      	b.n	31712 <port_event_handle+0x86>
            NRFX_ASSERT(0);
   317b0:	4c09      	ldr	r4, [pc, #36]	; (317d8 <port_event_handle+0x14c>)
   317b2:	f240 222e 	movw	r2, #558	; 0x22e
   317b6:	4621      	mov	r1, r4
   317b8:	4808      	ldr	r0, [pc, #32]	; (317dc <port_event_handle+0x150>)
   317ba:	f00a f9bd 	bl	3bb38 <printk>
   317be:	f240 212e 	movw	r1, #558	; 0x22e
   317c2:	4620      	mov	r0, r4
   317c4:	f00a fc0c 	bl	3bfe0 <assert_post_action>
   317c8:	e7a7      	b.n	3171a <port_event_handle+0x8e>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   317ca:	3501      	adds	r5, #1
   317cc:	e76d      	b.n	316aa <port_event_handle+0x1e>
   317ce:	bf00      	nop
   317d0:	40842500 	.word	0x40842500
   317d4:	4003117c 	.word	0x4003117c
   317d8:	00042e20 	.word	0x00042e20
   317dc:	00041c84 	.word	0x00041c84
   317e0:	2000c688 	.word	0x2000c688

000317e4 <nrfx_gpiote_input_configure>:
{
   317e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   317e8:	4604      	mov	r4, r0
   317ea:	4615      	mov	r5, r2
   317ec:	461e      	mov	r6, r3
    if (p_input_config)
   317ee:	b3b1      	cbz	r1, 3185e <nrfx_gpiote_input_configure+0x7a>
   317f0:	4688      	mov	r8, r1
        if (pin_is_task_output(pin))
   317f2:	f00d f9be 	bl	3eb72 <pin_is_task_output>
   317f6:	2800      	cmp	r0, #0
   317f8:	f040 80c1 	bne.w	3197e <nrfx_gpiote_input_configure+0x19a>
    switch (port)
   317fc:	0963      	lsrs	r3, r4, #5
   317fe:	d051      	beq.n	318a4 <nrfx_gpiote_input_configure+0xc0>
    uint32_t mask = 0;
   31800:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   31802:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31806:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31808:	f013 0f01 	tst.w	r3, #1
   3180c:	d04d      	beq.n	318aa <nrfx_gpiote_input_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   3180e:	f004 071f 	and.w	r7, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31812:	0963      	lsrs	r3, r4, #5
   31814:	d156      	bne.n	318c4 <nrfx_gpiote_input_configure+0xe0>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31816:	f107 0380 	add.w	r3, r7, #128	; 0x80
   3181a:	4a5d      	ldr	r2, [pc, #372]	; (31990 <nrfx_gpiote_input_configure+0x1ac>)
   3181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   31820:	f1b8 0f00 	cmp.w	r8, #0
   31824:	d05c      	beq.n	318e0 <nrfx_gpiote_input_configure+0xfc>
   31826:	220c      	movs	r2, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   31828:	f042 0203 	orr.w	r2, r2, #3
    cnf &= ~to_update;
   3182c:	ea23 0302 	bic.w	r3, r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   31830:	f1b8 0f00 	cmp.w	r8, #0
   31834:	d056      	beq.n	318e4 <nrfx_gpiote_input_configure+0x100>
   31836:	f898 2000 	ldrb.w	r2, [r8]
   3183a:	0092      	lsls	r2, r2, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3183c:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   3183e:	3780      	adds	r7, #128	; 0x80
   31840:	4a53      	ldr	r2, [pc, #332]	; (31990 <nrfx_gpiote_input_configure+0x1ac>)
   31842:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   31846:	4a53      	ldr	r2, [pc, #332]	; (31994 <nrfx_gpiote_input_configure+0x1b0>)
   31848:	f104 0108 	add.w	r1, r4, #8
   3184c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   31850:	f023 0302 	bic.w	r3, r3, #2
   31854:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   31856:	f043 0301 	orr.w	r3, r3, #1
   3185a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   3185e:	b1c5      	cbz	r5, 31892 <nrfx_gpiote_input_configure+0xae>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   31860:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   31864:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   31868:	4620      	mov	r0, r4
   3186a:	f7ff fcdb 	bl	31224 <pin_is_output>
   3186e:	2800      	cmp	r0, #0
   31870:	d03a      	beq.n	318e8 <nrfx_gpiote_input_configure+0x104>
            if (use_evt)
   31872:	f1b9 0f00 	cmp.w	r9, #0
   31876:	f040 8084 	bne.w	31982 <nrfx_gpiote_input_configure+0x19e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   3187a:	4b46      	ldr	r3, [pc, #280]	; (31994 <nrfx_gpiote_input_configure+0x1b0>)
   3187c:	f104 0208 	add.w	r2, r4, #8
   31880:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   31884:	f020 001c 	bic.w	r0, r0, #28
   31888:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   3188a:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   3188e:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   31892:	2e00      	cmp	r6, #0
   31894:	d079      	beq.n	3198a <nrfx_gpiote_input_configure+0x1a6>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   31896:	6872      	ldr	r2, [r6, #4]
   31898:	6831      	ldr	r1, [r6, #0]
   3189a:	4620      	mov	r0, r4
   3189c:	f7ff fd9a 	bl	313d4 <pin_handler_set>
}
   318a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   318a4:	f04f 33ff 	mov.w	r3, #4294967295
   318a8:	e7ab      	b.n	31802 <nrfx_gpiote_input_configure+0x1e>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   318aa:	4f3b      	ldr	r7, [pc, #236]	; (31998 <nrfx_gpiote_input_configure+0x1b4>)
   318ac:	f240 2229 	movw	r2, #553	; 0x229
   318b0:	4639      	mov	r1, r7
   318b2:	483a      	ldr	r0, [pc, #232]	; (3199c <nrfx_gpiote_input_configure+0x1b8>)
   318b4:	f00a f940 	bl	3bb38 <printk>
   318b8:	f240 2129 	movw	r1, #553	; 0x229
   318bc:	4638      	mov	r0, r7
   318be:	f00a fb8f 	bl	3bfe0 <assert_post_action>
   318c2:	e7a4      	b.n	3180e <nrfx_gpiote_input_configure+0x2a>
            NRFX_ASSERT(0);
   318c4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 31998 <nrfx_gpiote_input_configure+0x1b4>
   318c8:	f240 222e 	movw	r2, #558	; 0x22e
   318cc:	4649      	mov	r1, r9
   318ce:	4833      	ldr	r0, [pc, #204]	; (3199c <nrfx_gpiote_input_configure+0x1b8>)
   318d0:	f00a f932 	bl	3bb38 <printk>
   318d4:	f240 212e 	movw	r1, #558	; 0x22e
   318d8:	4648      	mov	r0, r9
   318da:	f00a fb81 	bl	3bfe0 <assert_post_action>
   318de:	e79a      	b.n	31816 <nrfx_gpiote_input_configure+0x32>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   318e0:	2200      	movs	r2, #0
   318e2:	e7a1      	b.n	31828 <nrfx_gpiote_input_configure+0x44>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   318e4:	2200      	movs	r2, #0
   318e6:	e7a9      	b.n	3183c <nrfx_gpiote_input_configure+0x58>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   318e8:	4b2a      	ldr	r3, [pc, #168]	; (31994 <nrfx_gpiote_input_configure+0x1b0>)
   318ea:	f104 0208 	add.w	r2, r4, #8
   318ee:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   318f2:	f027 0720 	bic.w	r7, r7, #32
   318f6:	04ff      	lsls	r7, r7, #19
   318f8:	0cff      	lsrs	r7, r7, #19
   318fa:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   318fe:	f1b9 0f00 	cmp.w	r9, #0
   31902:	d0ba      	beq.n	3187a <nrfx_gpiote_input_configure+0x96>
                if (!edge)
   31904:	f1b8 0f03 	cmp.w	r8, #3
   31908:	d83d      	bhi.n	31986 <nrfx_gpiote_input_configure+0x1a2>
                uint8_t ch = *p_trigger_config->p_in_channel;
   3190a:	686b      	ldr	r3, [r5, #4]
   3190c:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   3190e:	f1b8 0f00 	cmp.w	r8, #0
   31912:	d108      	bne.n	31926 <nrfx_gpiote_input_configure+0x142>
    p_reg->CONFIG[idx] = 0;
   31914:	4b22      	ldr	r3, [pc, #136]	; (319a0 <nrfx_gpiote_input_configure+0x1bc>)
   31916:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   3191a:	2200      	movs	r2, #0
   3191c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   31920:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
   31924:	e7a9      	b.n	3187a <nrfx_gpiote_input_configure+0x96>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   31926:	4640      	mov	r0, r8
   31928:	f00d f93a 	bl	3eba0 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   3192c:	4b1c      	ldr	r3, [pc, #112]	; (319a0 <nrfx_gpiote_input_configure+0x1bc>)
   3192e:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   31932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   31936:	f021 0103 	bic.w	r1, r1, #3
   3193a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3193e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   31942:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   31946:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   3194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3194e:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   31952:	0221      	lsls	r1, r4, #8
   31954:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   31958:	0400      	lsls	r0, r0, #16
   3195a:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3195e:	4301      	orrs	r1, r0
   31960:	ea4c 0101 	orr.w	r1, ip, r1
   31964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   31968:	036d      	lsls	r5, r5, #13
   3196a:	b2ad      	uxth	r5, r5
   3196c:	f104 0308 	add.w	r3, r4, #8
   31970:	432f      	orrs	r7, r5
   31972:	f047 0720 	orr.w	r7, r7, #32
   31976:	4a07      	ldr	r2, [pc, #28]	; (31994 <nrfx_gpiote_input_configure+0x1b0>)
   31978:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   3197c:	e77d      	b.n	3187a <nrfx_gpiote_input_configure+0x96>
            return NRFX_ERROR_INVALID_PARAM;
   3197e:	4809      	ldr	r0, [pc, #36]	; (319a4 <nrfx_gpiote_input_configure+0x1c0>)
   31980:	e78e      	b.n	318a0 <nrfx_gpiote_input_configure+0xbc>
                return NRFX_ERROR_INVALID_PARAM;
   31982:	4808      	ldr	r0, [pc, #32]	; (319a4 <nrfx_gpiote_input_configure+0x1c0>)
   31984:	e78c      	b.n	318a0 <nrfx_gpiote_input_configure+0xbc>
                    return NRFX_ERROR_INVALID_PARAM;
   31986:	4807      	ldr	r0, [pc, #28]	; (319a4 <nrfx_gpiote_input_configure+0x1c0>)
   31988:	e78a      	b.n	318a0 <nrfx_gpiote_input_configure+0xbc>
        err = NRFX_SUCCESS;
   3198a:	4807      	ldr	r0, [pc, #28]	; (319a8 <nrfx_gpiote_input_configure+0x1c4>)
   3198c:	e788      	b.n	318a0 <nrfx_gpiote_input_configure+0xbc>
   3198e:	bf00      	nop
   31990:	40842500 	.word	0x40842500
   31994:	2000c688 	.word	0x2000c688
   31998:	00042e20 	.word	0x00042e20
   3199c:	00041c84 	.word	0x00041c84
   319a0:	40031000 	.word	0x40031000
   319a4:	0bad0004 	.word	0x0bad0004
   319a8:	0bad0000 	.word	0x0bad0000

000319ac <nrfx_gpiote_output_configure>:
{
   319ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   319b0:	4604      	mov	r4, r0
   319b2:	4615      	mov	r5, r2
    if (p_config)
   319b4:	2900      	cmp	r1, #0
   319b6:	d061      	beq.n	31a7c <nrfx_gpiote_output_configure+0xd0>
   319b8:	460f      	mov	r7, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   319ba:	f00d f8e9 	bl	3eb90 <pin_is_input>
   319be:	b128      	cbz	r0, 319cc <nrfx_gpiote_output_configure+0x20>
   319c0:	4620      	mov	r0, r4
   319c2:	f7ff fc19 	bl	311f8 <pin_in_use_by_te>
   319c6:	2800      	cmp	r0, #0
   319c8:	f040 80c8 	bne.w	31b5c <nrfx_gpiote_output_configure+0x1b0>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   319cc:	4620      	mov	r0, r4
   319ce:	f7ff fc1d 	bl	3120c <pin_has_trigger>
   319d2:	b118      	cbz	r0, 319dc <nrfx_gpiote_output_configure+0x30>
   319d4:	787b      	ldrb	r3, [r7, #1]
   319d6:	2b01      	cmp	r3, #1
   319d8:	f000 80c2 	beq.w	31b60 <nrfx_gpiote_output_configure+0x1b4>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   319dc:	f107 0901 	add.w	r9, r7, #1
   319e0:	f107 0802 	add.w	r8, r7, #2
    switch (port)
   319e4:	0963      	lsrs	r3, r4, #5
   319e6:	f000 808f 	beq.w	31b08 <nrfx_gpiote_output_configure+0x15c>
    uint32_t mask = 0;
   319ea:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   319ec:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   319f0:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   319f2:	f013 0f01 	tst.w	r3, #1
   319f6:	f000 808a 	beq.w	31b0e <nrfx_gpiote_output_configure+0x162>
    *p_pin = pin_number & 0x1F;
   319fa:	f004 061f 	and.w	r6, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   319fe:	0963      	lsrs	r3, r4, #5
   31a00:	f040 8092 	bne.w	31b28 <nrfx_gpiote_output_configure+0x17c>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31a04:	f106 0380 	add.w	r3, r6, #128	; 0x80
   31a08:	4a5a      	ldr	r2, [pc, #360]	; (31b74 <nrfx_gpiote_output_configure+0x1c8>)
   31a0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   31a0e:	f1b9 0f00 	cmp.w	r9, #0
   31a12:	f000 8097 	beq.w	31b44 <nrfx_gpiote_output_configure+0x198>
   31a16:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   31a18:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   31a1c:	f1b8 0f00 	cmp.w	r8, #0
   31a20:	f000 8092 	beq.w	31b48 <nrfx_gpiote_output_configure+0x19c>
   31a24:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   31a26:	430b      	orrs	r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   31a28:	2f00      	cmp	r7, #0
   31a2a:	f000 808f 	beq.w	31b4c <nrfx_gpiote_output_configure+0x1a0>
   31a2e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   31a32:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   31a34:	ea22 0203 	bic.w	r2, r2, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   31a38:	f1b9 0f00 	cmp.w	r9, #0
   31a3c:	f000 8088 	beq.w	31b50 <nrfx_gpiote_output_configure+0x1a4>
   31a40:	787b      	ldrb	r3, [r7, #1]
   31a42:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   31a44:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   31a48:	f1b8 0f00 	cmp.w	r8, #0
   31a4c:	f000 8082 	beq.w	31b54 <nrfx_gpiote_output_configure+0x1a8>
   31a50:	78b9      	ldrb	r1, [r7, #2]
   31a52:	0089      	lsls	r1, r1, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   31a54:	430b      	orrs	r3, r1
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   31a56:	2f00      	cmp	r7, #0
   31a58:	d07e      	beq.n	31b58 <nrfx_gpiote_output_configure+0x1ac>
   31a5a:	7839      	ldrb	r1, [r7, #0]
   31a5c:	0209      	lsls	r1, r1, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   31a5e:	430b      	orrs	r3, r1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   31a60:	4313      	orrs	r3, r2
    reg->PIN_CNF[pin_number] = cnf;
   31a62:	3680      	adds	r6, #128	; 0x80
   31a64:	4a43      	ldr	r2, [pc, #268]	; (31b74 <nrfx_gpiote_output_configure+0x1c8>)
   31a66:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   31a6a:	4a43      	ldr	r2, [pc, #268]	; (31b78 <nrfx_gpiote_output_configure+0x1cc>)
   31a6c:	f104 0108 	add.w	r1, r4, #8
   31a70:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   31a74:	f043 0303 	orr.w	r3, r3, #3
   31a78:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   31a7c:	2d00      	cmp	r5, #0
   31a7e:	d071      	beq.n	31b64 <nrfx_gpiote_output_configure+0x1b8>
        if (pin_is_input(pin))
   31a80:	4620      	mov	r0, r4
   31a82:	f00d f885 	bl	3eb90 <pin_is_input>
   31a86:	2800      	cmp	r0, #0
   31a88:	d16f      	bne.n	31b6a <nrfx_gpiote_output_configure+0x1be>
        uint32_t ch = p_task_config->task_ch;
   31a8a:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   31a8c:	4b3b      	ldr	r3, [pc, #236]	; (31b7c <nrfx_gpiote_output_configure+0x1d0>)
   31a8e:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   31a92:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    p_reg->CONFIG[idx] = 0;
   31a96:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   31a9a:	4937      	ldr	r1, [pc, #220]	; (31b78 <nrfx_gpiote_output_configure+0x1cc>)
   31a9c:	f104 0008 	add.w	r0, r4, #8
   31aa0:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   31aa4:	f023 0320 	bic.w	r3, r3, #32
   31aa8:	04db      	lsls	r3, r3, #19
   31aaa:	0cdb      	lsrs	r3, r3, #19
   31aac:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   31ab0:	7869      	ldrb	r1, [r5, #1]
   31ab2:	2900      	cmp	r1, #0
   31ab4:	d05b      	beq.n	31b6e <nrfx_gpiote_output_configure+0x1c2>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   31ab6:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   31aba:	4d30      	ldr	r5, [pc, #192]	; (31b7c <nrfx_gpiote_output_configure+0x1d0>)
   31abc:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   31ac0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   31ac4:	f420 1098 	bic.w	r0, r0, #1245184	; 0x130000
   31ac8:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   31acc:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   31ad0:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   31ad4:	0220      	lsls	r0, r4, #8
   31ad6:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   31ada:	0409      	lsls	r1, r1, #16
   31adc:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   31ae0:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   31ae2:	ea4f 500c 	mov.w	r0, ip, lsl #20
   31ae6:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   31aea:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   31aec:	4339      	orrs	r1, r7
   31aee:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   31af2:	0352      	lsls	r2, r2, #13
   31af4:	b292      	uxth	r2, r2
   31af6:	3408      	adds	r4, #8
   31af8:	431a      	orrs	r2, r3
   31afa:	f042 0220 	orr.w	r2, r2, #32
   31afe:	4b1e      	ldr	r3, [pc, #120]	; (31b78 <nrfx_gpiote_output_configure+0x1cc>)
   31b00:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   31b04:	481e      	ldr	r0, [pc, #120]	; (31b80 <nrfx_gpiote_output_configure+0x1d4>)
   31b06:	e02e      	b.n	31b66 <nrfx_gpiote_output_configure+0x1ba>
            mask = P0_FEATURE_PINS_PRESENT;
   31b08:	f04f 33ff 	mov.w	r3, #4294967295
   31b0c:	e76e      	b.n	319ec <nrfx_gpiote_output_configure+0x40>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31b0e:	4e1d      	ldr	r6, [pc, #116]	; (31b84 <nrfx_gpiote_output_configure+0x1d8>)
   31b10:	f240 2229 	movw	r2, #553	; 0x229
   31b14:	4631      	mov	r1, r6
   31b16:	481c      	ldr	r0, [pc, #112]	; (31b88 <nrfx_gpiote_output_configure+0x1dc>)
   31b18:	f00a f80e 	bl	3bb38 <printk>
   31b1c:	f240 2129 	movw	r1, #553	; 0x229
   31b20:	4630      	mov	r0, r6
   31b22:	f00a fa5d 	bl	3bfe0 <assert_post_action>
   31b26:	e768      	b.n	319fa <nrfx_gpiote_output_configure+0x4e>
            NRFX_ASSERT(0);
   31b28:	f8df a058 	ldr.w	sl, [pc, #88]	; 31b84 <nrfx_gpiote_output_configure+0x1d8>
   31b2c:	f240 222e 	movw	r2, #558	; 0x22e
   31b30:	4651      	mov	r1, sl
   31b32:	4815      	ldr	r0, [pc, #84]	; (31b88 <nrfx_gpiote_output_configure+0x1dc>)
   31b34:	f00a f800 	bl	3bb38 <printk>
   31b38:	f240 212e 	movw	r1, #558	; 0x22e
   31b3c:	4650      	mov	r0, sl
   31b3e:	f00a fa4f 	bl	3bfe0 <assert_post_action>
   31b42:	e75f      	b.n	31a04 <nrfx_gpiote_output_configure+0x58>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   31b44:	2300      	movs	r3, #0
   31b46:	e767      	b.n	31a18 <nrfx_gpiote_output_configure+0x6c>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   31b48:	2100      	movs	r1, #0
   31b4a:	e76c      	b.n	31a26 <nrfx_gpiote_output_configure+0x7a>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   31b4c:	2100      	movs	r1, #0
   31b4e:	e770      	b.n	31a32 <nrfx_gpiote_output_configure+0x86>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   31b50:	2300      	movs	r3, #0
   31b52:	e777      	b.n	31a44 <nrfx_gpiote_output_configure+0x98>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   31b54:	2100      	movs	r1, #0
   31b56:	e77d      	b.n	31a54 <nrfx_gpiote_output_configure+0xa8>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   31b58:	2100      	movs	r1, #0
   31b5a:	e780      	b.n	31a5e <nrfx_gpiote_output_configure+0xb2>
   31b5c:	480b      	ldr	r0, [pc, #44]	; (31b8c <nrfx_gpiote_output_configure+0x1e0>)
   31b5e:	e002      	b.n	31b66 <nrfx_gpiote_output_configure+0x1ba>
   31b60:	480a      	ldr	r0, [pc, #40]	; (31b8c <nrfx_gpiote_output_configure+0x1e0>)
   31b62:	e000      	b.n	31b66 <nrfx_gpiote_output_configure+0x1ba>
   31b64:	4806      	ldr	r0, [pc, #24]	; (31b80 <nrfx_gpiote_output_configure+0x1d4>)
}
   31b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return NRFX_ERROR_INVALID_PARAM;
   31b6a:	4808      	ldr	r0, [pc, #32]	; (31b8c <nrfx_gpiote_output_configure+0x1e0>)
   31b6c:	e7fb      	b.n	31b66 <nrfx_gpiote_output_configure+0x1ba>
    return NRFX_SUCCESS;
   31b6e:	4804      	ldr	r0, [pc, #16]	; (31b80 <nrfx_gpiote_output_configure+0x1d4>)
   31b70:	e7f9      	b.n	31b66 <nrfx_gpiote_output_configure+0x1ba>
   31b72:	bf00      	nop
   31b74:	40842500 	.word	0x40842500
   31b78:	2000c688 	.word	0x2000c688
   31b7c:	40031000 	.word	0x40031000
   31b80:	0bad0000 	.word	0x0bad0000
   31b84:	00042e20 	.word	0x00042e20
   31b88:	00041c84 	.word	0x00041c84
   31b8c:	0bad0004 	.word	0x0bad0004

00031b90 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   31b90:	4b01      	ldr	r3, [pc, #4]	; (31b98 <nrfx_gpiote_global_callback_set+0x8>)
   31b92:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   31b94:	60d9      	str	r1, [r3, #12]
}
   31b96:	4770      	bx	lr
   31b98:	2000c688 	.word	0x2000c688

00031b9c <nrfx_gpiote_channel_get>:
{
   31b9c:	b570      	push	{r4, r5, r6, lr}
   31b9e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   31ba0:	460d      	mov	r5, r1
   31ba2:	b159      	cbz	r1, 31bbc <nrfx_gpiote_channel_get+0x20>
    if (pin_in_use_by_te(pin))
   31ba4:	4620      	mov	r0, r4
   31ba6:	f7ff fb27 	bl	311f8 <pin_in_use_by_te>
   31baa:	b1a0      	cbz	r0, 31bd6 <nrfx_gpiote_channel_get+0x3a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   31bac:	3408      	adds	r4, #8
   31bae:	4b0b      	ldr	r3, [pc, #44]	; (31bdc <nrfx_gpiote_channel_get+0x40>)
   31bb0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   31bb4:	0b5b      	lsrs	r3, r3, #13
   31bb6:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   31bb8:	4809      	ldr	r0, [pc, #36]	; (31be0 <nrfx_gpiote_channel_get+0x44>)
}
   31bba:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(p_channel);
   31bbc:	4e09      	ldr	r6, [pc, #36]	; (31be4 <nrfx_gpiote_channel_get+0x48>)
   31bbe:	f240 2235 	movw	r2, #565	; 0x235
   31bc2:	4631      	mov	r1, r6
   31bc4:	4808      	ldr	r0, [pc, #32]	; (31be8 <nrfx_gpiote_channel_get+0x4c>)
   31bc6:	f009 ffb7 	bl	3bb38 <printk>
   31bca:	f240 2135 	movw	r1, #565	; 0x235
   31bce:	4630      	mov	r0, r6
   31bd0:	f00a fa06 	bl	3bfe0 <assert_post_action>
   31bd4:	e7e6      	b.n	31ba4 <nrfx_gpiote_channel_get+0x8>
        return NRFX_ERROR_INVALID_PARAM;
   31bd6:	4805      	ldr	r0, [pc, #20]	; (31bec <nrfx_gpiote_channel_get+0x50>)
   31bd8:	e7ef      	b.n	31bba <nrfx_gpiote_channel_get+0x1e>
   31bda:	bf00      	nop
   31bdc:	2000c688 	.word	0x2000c688
   31be0:	0bad0000 	.word	0x0bad0000
   31be4:	00045788 	.word	0x00045788
   31be8:	00041c84 	.word	0x00041c84
   31bec:	0bad0004 	.word	0x0bad0004

00031bf0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   31bf0:	4b0f      	ldr	r3, [pc, #60]	; (31c30 <nrfx_gpiote_init+0x40>)
   31bf2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   31bf6:	b10b      	cbz	r3, 31bfc <nrfx_gpiote_init+0xc>
        return err_code;
   31bf8:	480e      	ldr	r0, [pc, #56]	; (31c34 <nrfx_gpiote_init+0x44>)
}
   31bfa:	4770      	bx	lr
{
   31bfc:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   31bfe:	4c0c      	ldr	r4, [pc, #48]	; (31c30 <nrfx_gpiote_init+0x40>)
   31c00:	2240      	movs	r2, #64	; 0x40
   31c02:	2100      	movs	r1, #0
   31c04:	f104 0010 	add.w	r0, r4, #16
   31c08:	f00e f99a 	bl	3ff40 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   31c0c:	2031      	movs	r0, #49	; 0x31
   31c0e:	f7f5 fdf3 	bl	277f8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   31c12:	4b09      	ldr	r3, [pc, #36]	; (31c38 <nrfx_gpiote_init+0x48>)
   31c14:	2200      	movs	r2, #0
   31c16:	601a      	str	r2, [r3, #0]
   31c18:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   31c1a:	4b08      	ldr	r3, [pc, #32]	; (31c3c <nrfx_gpiote_init+0x4c>)
   31c1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   31c20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   31c24:	2301      	movs	r3, #1
   31c26:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   31c2a:	6563      	str	r3, [r4, #84]	; 0x54
    return err_code;
   31c2c:	4804      	ldr	r0, [pc, #16]	; (31c40 <nrfx_gpiote_init+0x50>)
}
   31c2e:	bd10      	pop	{r4, pc}
   31c30:	2000c688 	.word	0x2000c688
   31c34:	0bad0005 	.word	0x0bad0005
   31c38:	4003117c 	.word	0x4003117c
   31c3c:	40031000 	.word	0x40031000
   31c40:	0bad0000 	.word	0x0bad0000

00031c44 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   31c44:	4b03      	ldr	r3, [pc, #12]	; (31c54 <nrfx_gpiote_is_init+0x10>)
   31c46:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   31c4a:	3800      	subs	r0, #0
   31c4c:	bf18      	it	ne
   31c4e:	2001      	movne	r0, #1
   31c50:	4770      	bx	lr
   31c52:	bf00      	nop
   31c54:	2000c688 	.word	0x2000c688

00031c58 <nrfx_gpiote_channel_free>:
{
   31c58:	b508      	push	{r3, lr}
   31c5a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   31c5c:	4801      	ldr	r0, [pc, #4]	; (31c64 <nrfx_gpiote_channel_free+0xc>)
   31c5e:	f7ff f8f1 	bl	30e44 <nrfx_flag32_free>
}
   31c62:	bd08      	pop	{r3, pc}
   31c64:	2000c6d8 	.word	0x2000c6d8

00031c68 <nrfx_gpiote_channel_alloc>:
{
   31c68:	b508      	push	{r3, lr}
   31c6a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   31c6c:	4801      	ldr	r0, [pc, #4]	; (31c74 <nrfx_gpiote_channel_alloc+0xc>)
   31c6e:	f7ff f8c9 	bl	30e04 <nrfx_flag32_alloc>
}
   31c72:	bd08      	pop	{r3, pc}
   31c74:	2000c6d8 	.word	0x2000c6d8

00031c78 <nrfx_gpiote_trigger_enable>:
{
   31c78:	b570      	push	{r4, r5, r6, lr}
   31c7a:	4604      	mov	r4, r0
   31c7c:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   31c7e:	f7ff fac5 	bl	3120c <pin_has_trigger>
   31c82:	b1b8      	cbz	r0, 31cb4 <nrfx_gpiote_trigger_enable+0x3c>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   31c84:	4620      	mov	r0, r4
   31c86:	f7ff fab7 	bl	311f8 <pin_in_use_by_te>
   31c8a:	b118      	cbz	r0, 31c94 <nrfx_gpiote_trigger_enable+0x1c>
   31c8c:	4620      	mov	r0, r4
   31c8e:	f00c ff7f 	bl	3eb90 <pin_is_input>
   31c92:	b9e0      	cbnz	r0, 31cce <nrfx_gpiote_trigger_enable+0x56>
        NRFX_ASSERT(int_enable);
   31c94:	2d00      	cmp	r5, #0
   31c96:	d04c      	beq.n	31d32 <nrfx_gpiote_trigger_enable+0xba>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   31c98:	f104 0308 	add.w	r3, r4, #8
   31c9c:	4a61      	ldr	r2, [pc, #388]	; (31e24 <nrfx_gpiote_trigger_enable+0x1ac>)
   31c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   31ca2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   31ca6:	2b04      	cmp	r3, #4
   31ca8:	f000 8082 	beq.w	31db0 <nrfx_gpiote_trigger_enable+0x138>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   31cac:	2b05      	cmp	r3, #5
   31cae:	d14d      	bne.n	31d4c <nrfx_gpiote_trigger_enable+0xd4>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   31cb0:	2602      	movs	r6, #2
   31cb2:	e07e      	b.n	31db2 <nrfx_gpiote_trigger_enable+0x13a>
    NRFX_ASSERT(pin_has_trigger(pin));
   31cb4:	4e5c      	ldr	r6, [pc, #368]	; (31e28 <nrfx_gpiote_trigger_enable+0x1b0>)
   31cb6:	f240 32df 	movw	r2, #991	; 0x3df
   31cba:	4631      	mov	r1, r6
   31cbc:	485b      	ldr	r0, [pc, #364]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31cbe:	f009 ff3b 	bl	3bb38 <printk>
   31cc2:	f240 31df 	movw	r1, #991	; 0x3df
   31cc6:	4630      	mov	r0, r6
   31cc8:	f00a f98a 	bl	3bfe0 <assert_post_action>
   31ccc:	e7da      	b.n	31c84 <nrfx_gpiote_trigger_enable+0xc>
        uint8_t ch = pin_te_get(pin);
   31cce:	4620      	mov	r0, r4
   31cd0:	f7ff fab2 	bl	31238 <pin_te_get>
   31cd4:	4604      	mov	r4, r0
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   31cd6:	2807      	cmp	r0, #7
   31cd8:	d81e      	bhi.n	31d18 <nrfx_gpiote_trigger_enable+0xa0>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   31cda:	00a3      	lsls	r3, r4, #2
   31cdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
   31ce0:	b29b      	uxth	r3, r3
    return ((uint32_t)p_reg + event);
   31ce2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   31ce6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   31cea:	2200      	movs	r2, #0
   31cec:	601a      	str	r2, [r3, #0]
   31cee:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   31cf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   31cf4:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   31cf8:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   31cfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   31d00:	f043 0301 	orr.w	r3, r3, #1
   31d04:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   31d08:	2d00      	cmp	r5, #0
   31d0a:	d06a      	beq.n	31de2 <nrfx_gpiote_trigger_enable+0x16a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   31d0c:	2001      	movs	r0, #1
   31d0e:	fa00 f404 	lsl.w	r4, r0, r4
    p_reg->INTENSET = mask;
   31d12:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
}
   31d16:	e064      	b.n	31de2 <nrfx_gpiote_trigger_enable+0x16a>
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   31d18:	4e45      	ldr	r6, [pc, #276]	; (31e30 <nrfx_gpiote_trigger_enable+0x1b8>)
   31d1a:	f44f 7223 	mov.w	r2, #652	; 0x28c
   31d1e:	4631      	mov	r1, r6
   31d20:	4842      	ldr	r0, [pc, #264]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31d22:	f009 ff09 	bl	3bb38 <printk>
   31d26:	f44f 7123 	mov.w	r1, #652	; 0x28c
   31d2a:	4630      	mov	r0, r6
   31d2c:	f00a f958 	bl	3bfe0 <assert_post_action>
   31d30:	e7d3      	b.n	31cda <nrfx_gpiote_trigger_enable+0x62>
        NRFX_ASSERT(int_enable);
   31d32:	4d3d      	ldr	r5, [pc, #244]	; (31e28 <nrfx_gpiote_trigger_enable+0x1b0>)
   31d34:	f240 32ee 	movw	r2, #1006	; 0x3ee
   31d38:	4629      	mov	r1, r5
   31d3a:	483c      	ldr	r0, [pc, #240]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31d3c:	f009 fefc 	bl	3bb38 <printk>
   31d40:	f240 31ee 	movw	r1, #1006	; 0x3ee
   31d44:	4628      	mov	r0, r5
   31d46:	f00a f94b 	bl	3bfe0 <assert_post_action>
   31d4a:	e7a5      	b.n	31c98 <nrfx_gpiote_trigger_enable+0x20>
    switch (port)
   31d4c:	0963      	lsrs	r3, r4, #5
   31d4e:	d012      	beq.n	31d76 <nrfx_gpiote_trigger_enable+0xfe>
    uint32_t mask = 0;
   31d50:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   31d52:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31d56:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31d58:	f013 0f01 	tst.w	r3, #1
   31d5c:	d00e      	beq.n	31d7c <nrfx_gpiote_trigger_enable+0x104>
    *p_pin = pin_number & 0x1F;
   31d5e:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31d62:	0963      	lsrs	r3, r4, #5
   31d64:	d117      	bne.n	31d96 <nrfx_gpiote_trigger_enable+0x11e>
    return p_reg->IN;
   31d66:	4b33      	ldr	r3, [pc, #204]	; (31e34 <nrfx_gpiote_trigger_enable+0x1bc>)
   31d68:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   31d6a:	40eb      	lsrs	r3, r5
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   31d6c:	f013 0f01 	tst.w	r3, #1
   31d70:	d038      	beq.n	31de4 <nrfx_gpiote_trigger_enable+0x16c>
   31d72:	2603      	movs	r6, #3
   31d74:	e01d      	b.n	31db2 <nrfx_gpiote_trigger_enable+0x13a>
            mask = P0_FEATURE_PINS_PRESENT;
   31d76:	f04f 33ff 	mov.w	r3, #4294967295
   31d7a:	e7ea      	b.n	31d52 <nrfx_gpiote_trigger_enable+0xda>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31d7c:	4d2e      	ldr	r5, [pc, #184]	; (31e38 <nrfx_gpiote_trigger_enable+0x1c0>)
   31d7e:	f240 2229 	movw	r2, #553	; 0x229
   31d82:	4629      	mov	r1, r5
   31d84:	4829      	ldr	r0, [pc, #164]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31d86:	f009 fed7 	bl	3bb38 <printk>
   31d8a:	f240 2129 	movw	r1, #553	; 0x229
   31d8e:	4628      	mov	r0, r5
   31d90:	f00a f926 	bl	3bfe0 <assert_post_action>
   31d94:	e7e3      	b.n	31d5e <nrfx_gpiote_trigger_enable+0xe6>
            NRFX_ASSERT(0);
   31d96:	4e28      	ldr	r6, [pc, #160]	; (31e38 <nrfx_gpiote_trigger_enable+0x1c0>)
   31d98:	f240 222e 	movw	r2, #558	; 0x22e
   31d9c:	4631      	mov	r1, r6
   31d9e:	4823      	ldr	r0, [pc, #140]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31da0:	f009 feca 	bl	3bb38 <printk>
   31da4:	f240 212e 	movw	r1, #558	; 0x22e
   31da8:	4630      	mov	r0, r6
   31daa:	f00a f919 	bl	3bfe0 <assert_post_action>
   31dae:	e7da      	b.n	31d66 <nrfx_gpiote_trigger_enable+0xee>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   31db0:	2603      	movs	r6, #3
    switch (port)
   31db2:	0963      	lsrs	r3, r4, #5
   31db4:	d018      	beq.n	31de8 <nrfx_gpiote_trigger_enable+0x170>
    uint32_t mask = 0;
   31db6:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   31db8:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31dbc:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31dbe:	f013 0f01 	tst.w	r3, #1
   31dc2:	d014      	beq.n	31dee <nrfx_gpiote_trigger_enable+0x176>
    *p_pin = pin_number & 0x1F;
   31dc4:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31dc8:	0963      	lsrs	r3, r4, #5
   31dca:	d11d      	bne.n	31e08 <nrfx_gpiote_trigger_enable+0x190>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31dcc:	4919      	ldr	r1, [pc, #100]	; (31e34 <nrfx_gpiote_trigger_enable+0x1bc>)
   31dce:	f105 0280 	add.w	r2, r5, #128	; 0x80
   31dd2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   31dd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   31dda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   31dde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   31de2:	bd70      	pop	{r4, r5, r6, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   31de4:	2602      	movs	r6, #2
   31de6:	e7e4      	b.n	31db2 <nrfx_gpiote_trigger_enable+0x13a>
            mask = P0_FEATURE_PINS_PRESENT;
   31de8:	f04f 33ff 	mov.w	r3, #4294967295
   31dec:	e7e4      	b.n	31db8 <nrfx_gpiote_trigger_enable+0x140>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31dee:	4d12      	ldr	r5, [pc, #72]	; (31e38 <nrfx_gpiote_trigger_enable+0x1c0>)
   31df0:	f240 2229 	movw	r2, #553	; 0x229
   31df4:	4629      	mov	r1, r5
   31df6:	480d      	ldr	r0, [pc, #52]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31df8:	f009 fe9e 	bl	3bb38 <printk>
   31dfc:	f240 2129 	movw	r1, #553	; 0x229
   31e00:	4628      	mov	r0, r5
   31e02:	f00a f8ed 	bl	3bfe0 <assert_post_action>
   31e06:	e7dd      	b.n	31dc4 <nrfx_gpiote_trigger_enable+0x14c>
            NRFX_ASSERT(0);
   31e08:	4c0b      	ldr	r4, [pc, #44]	; (31e38 <nrfx_gpiote_trigger_enable+0x1c0>)
   31e0a:	f240 222e 	movw	r2, #558	; 0x22e
   31e0e:	4621      	mov	r1, r4
   31e10:	4806      	ldr	r0, [pc, #24]	; (31e2c <nrfx_gpiote_trigger_enable+0x1b4>)
   31e12:	f009 fe91 	bl	3bb38 <printk>
   31e16:	f240 212e 	movw	r1, #558	; 0x22e
   31e1a:	4620      	mov	r0, r4
   31e1c:	f00a f8e0 	bl	3bfe0 <assert_post_action>
   31e20:	e7d4      	b.n	31dcc <nrfx_gpiote_trigger_enable+0x154>
   31e22:	bf00      	nop
   31e24:	2000c688 	.word	0x2000c688
   31e28:	00045788 	.word	0x00045788
   31e2c:	00041c84 	.word	0x00041c84
   31e30:	000457c8 	.word	0x000457c8
   31e34:	40842500 	.word	0x40842500
   31e38:	00042e20 	.word	0x00042e20

00031e3c <nrfx_gpiote_trigger_disable>:
{
   31e3c:	b538      	push	{r3, r4, r5, lr}
   31e3e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   31e40:	f7ff f9da 	bl	311f8 <pin_in_use_by_te>
   31e44:	b1a0      	cbz	r0, 31e70 <nrfx_gpiote_trigger_disable+0x34>
   31e46:	4620      	mov	r0, r4
   31e48:	f00c fea2 	bl	3eb90 <pin_is_input>
   31e4c:	b180      	cbz	r0, 31e70 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   31e4e:	4620      	mov	r0, r4
   31e50:	f7ff f9f2 	bl	31238 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   31e54:	2201      	movs	r2, #1
   31e56:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   31e58:	4b1f      	ldr	r3, [pc, #124]	; (31ed8 <nrfx_gpiote_trigger_disable+0x9c>)
   31e5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   31e5e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   31e62:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   31e66:	f022 0203 	bic.w	r2, r2, #3
   31e6a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   31e6e:	e015      	b.n	31e9c <nrfx_gpiote_trigger_disable+0x60>
    switch (port)
   31e70:	0963      	lsrs	r3, r4, #5
   31e72:	d014      	beq.n	31e9e <nrfx_gpiote_trigger_disable+0x62>
    uint32_t mask = 0;
   31e74:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   31e76:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31e7a:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31e7c:	f013 0f01 	tst.w	r3, #1
   31e80:	d010      	beq.n	31ea4 <nrfx_gpiote_trigger_disable+0x68>
    *p_pin = pin_number & 0x1F;
   31e82:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31e86:	0963      	lsrs	r3, r4, #5
   31e88:	d119      	bne.n	31ebe <nrfx_gpiote_trigger_disable+0x82>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   31e8a:	4914      	ldr	r1, [pc, #80]	; (31edc <nrfx_gpiote_trigger_disable+0xa0>)
   31e8c:	f105 0380 	add.w	r3, r5, #128	; 0x80
   31e90:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   31e94:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   31e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   31e9c:	bd38      	pop	{r3, r4, r5, pc}
            mask = P0_FEATURE_PINS_PRESENT;
   31e9e:	f04f 33ff 	mov.w	r3, #4294967295
   31ea2:	e7e8      	b.n	31e76 <nrfx_gpiote_trigger_disable+0x3a>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31ea4:	4d0e      	ldr	r5, [pc, #56]	; (31ee0 <nrfx_gpiote_trigger_disable+0xa4>)
   31ea6:	f240 2229 	movw	r2, #553	; 0x229
   31eaa:	4629      	mov	r1, r5
   31eac:	480d      	ldr	r0, [pc, #52]	; (31ee4 <nrfx_gpiote_trigger_disable+0xa8>)
   31eae:	f009 fe43 	bl	3bb38 <printk>
   31eb2:	f240 2129 	movw	r1, #553	; 0x229
   31eb6:	4628      	mov	r0, r5
   31eb8:	f00a f892 	bl	3bfe0 <assert_post_action>
   31ebc:	e7e1      	b.n	31e82 <nrfx_gpiote_trigger_disable+0x46>
            NRFX_ASSERT(0);
   31ebe:	4c08      	ldr	r4, [pc, #32]	; (31ee0 <nrfx_gpiote_trigger_disable+0xa4>)
   31ec0:	f240 222e 	movw	r2, #558	; 0x22e
   31ec4:	4621      	mov	r1, r4
   31ec6:	4807      	ldr	r0, [pc, #28]	; (31ee4 <nrfx_gpiote_trigger_disable+0xa8>)
   31ec8:	f009 fe36 	bl	3bb38 <printk>
   31ecc:	f240 212e 	movw	r1, #558	; 0x22e
   31ed0:	4620      	mov	r0, r4
   31ed2:	f00a f885 	bl	3bfe0 <assert_post_action>
   31ed6:	e7d8      	b.n	31e8a <nrfx_gpiote_trigger_disable+0x4e>
   31ed8:	40031000 	.word	0x40031000
   31edc:	40842500 	.word	0x40842500
   31ee0:	00042e20 	.word	0x00042e20
   31ee4:	00041c84 	.word	0x00041c84

00031ee8 <nrfx_gpiote_pin_uninit>:
{
   31ee8:	b538      	push	{r3, r4, r5, lr}
   31eea:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   31eec:	f7ff f97a 	bl	311e4 <pin_in_use>
   31ef0:	b908      	cbnz	r0, 31ef6 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   31ef2:	481c      	ldr	r0, [pc, #112]	; (31f64 <nrfx_gpiote_pin_uninit+0x7c>)
}
   31ef4:	bd38      	pop	{r3, r4, r5, pc}
    nrfx_gpiote_trigger_disable(pin);
   31ef6:	4620      	mov	r0, r4
   31ef8:	f7ff ffa0 	bl	31e3c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   31efc:	4620      	mov	r0, r4
   31efe:	f7ff fa4b 	bl	31398 <pin_handler_trigger_uninit>
    switch (port)
   31f02:	0963      	lsrs	r3, r4, #5
   31f04:	d011      	beq.n	31f2a <nrfx_gpiote_pin_uninit+0x42>
    uint32_t mask = 0;
   31f06:	2300      	movs	r3, #0
    pin_number &= 0x1F;
   31f08:	f004 021f 	and.w	r2, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   31f0c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31f0e:	f013 0f01 	tst.w	r3, #1
   31f12:	d00d      	beq.n	31f30 <nrfx_gpiote_pin_uninit+0x48>
    *p_pin = pin_number & 0x1F;
   31f14:	f004 051f 	and.w	r5, r4, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   31f18:	0963      	lsrs	r3, r4, #5
   31f1a:	d116      	bne.n	31f4a <nrfx_gpiote_pin_uninit+0x62>
    reg->PIN_CNF[pin_number] = cnf;
   31f1c:	3580      	adds	r5, #128	; 0x80
   31f1e:	4b12      	ldr	r3, [pc, #72]	; (31f68 <nrfx_gpiote_pin_uninit+0x80>)
   31f20:	2202      	movs	r2, #2
   31f22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    return NRFX_SUCCESS;
   31f26:	4811      	ldr	r0, [pc, #68]	; (31f6c <nrfx_gpiote_pin_uninit+0x84>)
   31f28:	e7e4      	b.n	31ef4 <nrfx_gpiote_pin_uninit+0xc>
            mask = P0_FEATURE_PINS_PRESENT;
   31f2a:	f04f 33ff 	mov.w	r3, #4294967295
   31f2e:	e7eb      	b.n	31f08 <nrfx_gpiote_pin_uninit+0x20>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   31f30:	4d0f      	ldr	r5, [pc, #60]	; (31f70 <nrfx_gpiote_pin_uninit+0x88>)
   31f32:	f240 2229 	movw	r2, #553	; 0x229
   31f36:	4629      	mov	r1, r5
   31f38:	480e      	ldr	r0, [pc, #56]	; (31f74 <nrfx_gpiote_pin_uninit+0x8c>)
   31f3a:	f009 fdfd 	bl	3bb38 <printk>
   31f3e:	f240 2129 	movw	r1, #553	; 0x229
   31f42:	4628      	mov	r0, r5
   31f44:	f00a f84c 	bl	3bfe0 <assert_post_action>
   31f48:	e7e4      	b.n	31f14 <nrfx_gpiote_pin_uninit+0x2c>
            NRFX_ASSERT(0);
   31f4a:	4c09      	ldr	r4, [pc, #36]	; (31f70 <nrfx_gpiote_pin_uninit+0x88>)
   31f4c:	f240 222e 	movw	r2, #558	; 0x22e
   31f50:	4621      	mov	r1, r4
   31f52:	4808      	ldr	r0, [pc, #32]	; (31f74 <nrfx_gpiote_pin_uninit+0x8c>)
   31f54:	f009 fdf0 	bl	3bb38 <printk>
   31f58:	f240 212e 	movw	r1, #558	; 0x22e
   31f5c:	4620      	mov	r0, r4
   31f5e:	f00a f83f 	bl	3bfe0 <assert_post_action>
   31f62:	e7db      	b.n	31f1c <nrfx_gpiote_pin_uninit+0x34>
   31f64:	0bad0004 	.word	0x0bad0004
   31f68:	40842500 	.word	0x40842500
   31f6c:	0bad0000 	.word	0x0bad0000
   31f70:	00042e20 	.word	0x00042e20
   31f74:	00041c84 	.word	0x00041c84

00031f78 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   31f78:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   31f7a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   31f7c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   31f80:	2100      	movs	r1, #0
    uint32_t status = 0;
   31f82:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   31f84:	e003      	b.n	31f8e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   31f86:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   31f88:	3304      	adds	r3, #4
   31f8a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   31f8c:	3101      	adds	r1, #1
   31f8e:	2907      	cmp	r1, #7
   31f90:	d814      	bhi.n	31fbc <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31f92:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   31f96:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   31f9a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   31f9c:	2a00      	cmp	r2, #0
   31f9e:	d0f2      	beq.n	31f86 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   31fa0:	4a0b      	ldr	r2, [pc, #44]	; (31fd0 <nrfx_gpiote_irq_handler+0x58>)
   31fa2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   31fa6:	4210      	tst	r0, r2
   31fa8:	d0ed      	beq.n	31f86 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   31faa:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   31fae:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   31fb2:	2400      	movs	r4, #0
   31fb4:	6014      	str	r4, [r2, #0]
   31fb6:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   31fb8:	4305      	orrs	r5, r0
   31fba:	e7e4      	b.n	31f86 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31fbc:	4b05      	ldr	r3, [pc, #20]	; (31fd4 <nrfx_gpiote_irq_handler+0x5c>)
   31fbe:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   31fc0:	b91b      	cbnz	r3, 31fca <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   31fc2:	4628      	mov	r0, r5
   31fc4:	f7ff fa3c 	bl	31440 <gpiote_evt_handle>
}
   31fc8:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   31fca:	f7ff fb5f 	bl	3168c <port_event_handle>
   31fce:	e7f8      	b.n	31fc2 <nrfx_gpiote_irq_handler+0x4a>
   31fd0:	40031000 	.word	0x40031000
   31fd4:	4003117c 	.word	0x4003117c

00031fd8 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   31fd8:	b570      	push	{r4, r5, r6, lr}
   31fda:	4614      	mov	r4, r2
    NRFX_ASSERT(handler);
   31fdc:	460d      	mov	r5, r1
   31fde:	b121      	cbz	r1, 31fea <nrfx_ipc_init+0x12>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   31fe0:	4b0c      	ldr	r3, [pc, #48]	; (32014 <nrfx_ipc_init+0x3c>)
   31fe2:	791b      	ldrb	r3, [r3, #4]
   31fe4:	b163      	cbz	r3, 32000 <nrfx_ipc_init+0x28>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   31fe6:	480c      	ldr	r0, [pc, #48]	; (32018 <nrfx_ipc_init+0x40>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   31fe8:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(handler);
   31fea:	4e0c      	ldr	r6, [pc, #48]	; (3201c <nrfx_ipc_init+0x44>)
   31fec:	2234      	movs	r2, #52	; 0x34
   31fee:	4631      	mov	r1, r6
   31ff0:	480b      	ldr	r0, [pc, #44]	; (32020 <nrfx_ipc_init+0x48>)
   31ff2:	f009 fda1 	bl	3bb38 <printk>
   31ff6:	2134      	movs	r1, #52	; 0x34
   31ff8:	4630      	mov	r0, r6
   31ffa:	f009 fff1 	bl	3bfe0 <assert_post_action>
   31ffe:	e7ef      	b.n	31fe0 <nrfx_ipc_init+0x8>
    NRFX_IRQ_ENABLE(IPC_IRQn);
   32000:	202a      	movs	r0, #42	; 0x2a
   32002:	f7f5 fbf9 	bl	277f8 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   32006:	4b03      	ldr	r3, [pc, #12]	; (32014 <nrfx_ipc_init+0x3c>)
   32008:	2201      	movs	r2, #1
   3200a:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   3200c:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   3200e:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   32010:	4804      	ldr	r0, [pc, #16]	; (32024 <nrfx_ipc_init+0x4c>)
   32012:	e7e9      	b.n	31fe8 <nrfx_ipc_init+0x10>
   32014:	20010660 	.word	0x20010660
   32018:	0bad000c 	.word	0x0bad000c
   3201c:	00045800 	.word	0x00045800
   32020:	00041c84 	.word	0x00041c84
   32024:	0bad0000 	.word	0x0bad0000

00032028 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   32028:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   3202a:	4604      	mov	r4, r0
   3202c:	b128      	cbz	r0, 3203a <nrfx_ipc_config_load+0x12>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   3202e:	4b1d      	ldr	r3, [pc, #116]	; (320a4 <nrfx_ipc_config_load+0x7c>)
   32030:	791b      	ldrb	r3, [r3, #4]
   32032:	2b01      	cmp	r3, #1
   32034:	d10c      	bne.n	32050 <nrfx_ipc_config_load+0x28>
{
   32036:	2300      	movs	r3, #0
   32038:	e01e      	b.n	32078 <nrfx_ipc_config_load+0x50>
    NRFX_ASSERT(p_config);
   3203a:	4d1b      	ldr	r5, [pc, #108]	; (320a8 <nrfx_ipc_config_load+0x80>)
   3203c:	2246      	movs	r2, #70	; 0x46
   3203e:	4629      	mov	r1, r5
   32040:	481a      	ldr	r0, [pc, #104]	; (320ac <nrfx_ipc_config_load+0x84>)
   32042:	f009 fd79 	bl	3bb38 <printk>
   32046:	2146      	movs	r1, #70	; 0x46
   32048:	4628      	mov	r0, r5
   3204a:	f009 ffc9 	bl	3bfe0 <assert_post_action>
   3204e:	e7ee      	b.n	3202e <nrfx_ipc_config_load+0x6>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   32050:	4d15      	ldr	r5, [pc, #84]	; (320a8 <nrfx_ipc_config_load+0x80>)
   32052:	2247      	movs	r2, #71	; 0x47
   32054:	4629      	mov	r1, r5
   32056:	4815      	ldr	r0, [pc, #84]	; (320ac <nrfx_ipc_config_load+0x84>)
   32058:	f009 fd6e 	bl	3bb38 <printk>
   3205c:	2147      	movs	r1, #71	; 0x47
   3205e:	4628      	mov	r0, r5
   32060:	f009 ffbe 	bl	3bfe0 <assert_post_action>
   32064:	e7e7      	b.n	32036 <nrfx_ipc_config_load+0xe>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   32066:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   3206a:	b2da      	uxtb	r2, r3
   3206c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   32070:	490f      	ldr	r1, [pc, #60]	; (320b0 <nrfx_ipc_config_load+0x88>)
   32072:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32076:	3301      	adds	r3, #1
   32078:	2b07      	cmp	r3, #7
   3207a:	d9f4      	bls.n	32066 <nrfx_ipc_config_load+0x3e>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   3207c:	2300      	movs	r3, #0
   3207e:	e00a      	b.n	32096 <nrfx_ipc_config_load+0x6e>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   32080:	f103 0208 	add.w	r2, r3, #8
   32084:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   32088:	b2da      	uxtb	r2, r3
   3208a:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   3208e:	4908      	ldr	r1, [pc, #32]	; (320b0 <nrfx_ipc_config_load+0x88>)
   32090:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   32094:	3301      	adds	r3, #1
   32096:	2b07      	cmp	r3, #7
   32098:	d9f2      	bls.n	32080 <nrfx_ipc_config_load+0x58>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   3209a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   3209c:	4b04      	ldr	r3, [pc, #16]	; (320b0 <nrfx_ipc_config_load+0x88>)
   3209e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   320a2:	bd38      	pop	{r3, r4, r5, pc}
   320a4:	20010660 	.word	0x20010660
   320a8:	00045800 	.word	0x00045800
   320ac:	00041c84 	.word	0x00041c84
   320b0:	4002a000 	.word	0x4002a000

000320b4 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   320b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   320b6:	4b18      	ldr	r3, [pc, #96]	; (32118 <nrfx_ipc_uninit+0x64>)
   320b8:	791b      	ldrb	r3, [r3, #4]
   320ba:	2b01      	cmp	r3, #1
   320bc:	d101      	bne.n	320c2 <nrfx_ipc_uninit+0xe>
{
   320be:	2300      	movs	r3, #0
   320c0:	e012      	b.n	320e8 <nrfx_ipc_uninit+0x34>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   320c2:	4c16      	ldr	r4, [pc, #88]	; (3211c <nrfx_ipc_uninit+0x68>)
   320c4:	2259      	movs	r2, #89	; 0x59
   320c6:	4621      	mov	r1, r4
   320c8:	4815      	ldr	r0, [pc, #84]	; (32120 <nrfx_ipc_uninit+0x6c>)
   320ca:	f009 fd35 	bl	3bb38 <printk>
   320ce:	2159      	movs	r1, #89	; 0x59
   320d0:	4620      	mov	r0, r4
   320d2:	f009 ff85 	bl	3bfe0 <assert_post_action>
   320d6:	e7f2      	b.n	320be <nrfx_ipc_uninit+0xa>
    p_reg->SEND_CNF[index] = channels_mask;
   320d8:	b2da      	uxtb	r2, r3
   320da:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   320de:	4911      	ldr	r1, [pc, #68]	; (32124 <nrfx_ipc_uninit+0x70>)
   320e0:	2000      	movs	r0, #0
   320e2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   320e6:	3301      	adds	r3, #1
   320e8:	2b07      	cmp	r3, #7
   320ea:	d9f5      	bls.n	320d8 <nrfx_ipc_uninit+0x24>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   320ec:	2300      	movs	r3, #0
   320ee:	e007      	b.n	32100 <nrfx_ipc_uninit+0x4c>
    p_reg->RECEIVE_CNF[index] = channels_mask;
   320f0:	b2da      	uxtb	r2, r3
   320f2:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   320f6:	490b      	ldr	r1, [pc, #44]	; (32124 <nrfx_ipc_uninit+0x70>)
   320f8:	2000      	movs	r0, #0
   320fa:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   320fe:	3301      	adds	r3, #1
   32100:	2b07      	cmp	r3, #7
   32102:	d9f5      	bls.n	320f0 <nrfx_ipc_uninit+0x3c>
    p_reg->INTENCLR = mask;
   32104:	4b07      	ldr	r3, [pc, #28]	; (32124 <nrfx_ipc_uninit+0x70>)
   32106:	f04f 32ff 	mov.w	r2, #4294967295
   3210a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   3210e:	4b02      	ldr	r3, [pc, #8]	; (32118 <nrfx_ipc_uninit+0x64>)
   32110:	2200      	movs	r2, #0
   32112:	711a      	strb	r2, [r3, #4]
}
   32114:	bd10      	pop	{r4, pc}
   32116:	bf00      	nop
   32118:	20010660 	.word	0x20010660
   3211c:	00045800 	.word	0x00045800
   32120:	00041c84 	.word	0x00041c84
   32124:	4002a000 	.word	0x4002a000

00032128 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   32128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTPEND;
   3212a:	4b13      	ldr	r3, [pc, #76]	; (32178 <nrfx_ipc_irq_handler+0x50>)
   3212c:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   32130:	4635      	mov	r5, r6
    while (bitmask)
   32132:	e00f      	b.n	32154 <nrfx_ipc_irq_handler+0x2c>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   32134:	4f11      	ldr	r7, [pc, #68]	; (3217c <nrfx_ipc_irq_handler+0x54>)
   32136:	f240 12e7 	movw	r2, #487	; 0x1e7
   3213a:	4639      	mov	r1, r7
   3213c:	4810      	ldr	r0, [pc, #64]	; (32180 <nrfx_ipc_irq_handler+0x58>)
   3213e:	f009 fcfb 	bl	3bb38 <printk>
   32142:	f240 11e7 	movw	r1, #487	; 0x1e7
   32146:	4638      	mov	r0, r7
   32148:	f009 ff4a 	bl	3bfe0 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   3214c:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3214e:	4b0d      	ldr	r3, [pc, #52]	; (32184 <nrfx_ipc_irq_handler+0x5c>)
   32150:	2200      	movs	r2, #0
   32152:	511a      	str	r2, [r3, r4]
   32154:	b155      	cbz	r5, 3216c <nrfx_ipc_irq_handler+0x44>
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
   32156:	fa95 f4a5 	rbit	r4, r5
   3215a:	fab4 f484 	clz	r4, r4
        bitmask &= ~(1UL << event_idx);
   3215e:	2301      	movs	r3, #1
   32160:	40a3      	lsls	r3, r4
   32162:	ea25 0503 	bic.w	r5, r5, r3
    NRFX_ASSERT(index < IPC_CH_NUM);
   32166:	2c07      	cmp	r4, #7
   32168:	d9f0      	bls.n	3214c <nrfx_ipc_irq_handler+0x24>
   3216a:	e7e3      	b.n	32134 <nrfx_ipc_irq_handler+0xc>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   3216c:	4b06      	ldr	r3, [pc, #24]	; (32188 <nrfx_ipc_irq_handler+0x60>)
   3216e:	681a      	ldr	r2, [r3, #0]
   32170:	6899      	ldr	r1, [r3, #8]
   32172:	4630      	mov	r0, r6
   32174:	4790      	blx	r2
}
   32176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32178:	4002a000 	.word	0x4002a000
   3217c:	0004583c 	.word	0x0004583c
   32180:	00041c84 	.word	0x00041c84
   32184:	4002a100 	.word	0x4002a100
   32188:	20010660 	.word	0x20010660

0003218c <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3218c:	4b02      	ldr	r3, [pc, #8]	; (32198 <nvmc_readonly_mode_set+0xc>)
   3218e:	2200      	movs	r2, #0
   32190:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   32194:	4770      	bx	lr
   32196:	bf00      	nop
   32198:	40039000 	.word	0x40039000

0003219c <nvmc_write_mode_set>:
   3219c:	4b02      	ldr	r3, [pc, #8]	; (321a8 <nvmc_write_mode_set+0xc>)
   3219e:	2201      	movs	r2, #1
   321a0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   321a4:	4770      	bx	lr
   321a6:	bf00      	nop
   321a8:	40039000 	.word	0x40039000

000321ac <nvmc_erase_mode_set>:
   321ac:	4b02      	ldr	r3, [pc, #8]	; (321b8 <nvmc_erase_mode_set+0xc>)
   321ae:	2202      	movs	r2, #2
   321b0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   321b4:	4770      	bx	lr
   321b6:	bf00      	nop
   321b8:	40039000 	.word	0x40039000

000321bc <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   321bc:	4b04      	ldr	r3, [pc, #16]	; (321d0 <nvmc_word_write+0x14>)
   321be:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   321c2:	f013 0f01 	tst.w	r3, #1
   321c6:	d0f9      	beq.n	321bc <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   321c8:	6001      	str	r1, [r0, #0]
   321ca:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   321ce:	4770      	bx	lr
   321d0:	40039000 	.word	0x40039000

000321d4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   321d4:	b538      	push	{r3, r4, r5, lr}
   321d6:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   321d8:	f00c fcee 	bl	3ebb8 <flash_total_size_get>
   321dc:	4284      	cmp	r4, r0
   321de:	d30b      	bcc.n	321f8 <nrfx_nvmc_page_erase+0x24>
    NRFX_ASSERT(is_valid_address(addr, false));
   321e0:	4d10      	ldr	r5, [pc, #64]	; (32224 <nrfx_nvmc_page_erase+0x50>)
   321e2:	f44f 7283 	mov.w	r2, #262	; 0x106
   321e6:	4629      	mov	r1, r5
   321e8:	480f      	ldr	r0, [pc, #60]	; (32228 <nrfx_nvmc_page_erase+0x54>)
   321ea:	f009 fca5 	bl	3bb38 <printk>
   321ee:	f44f 7183 	mov.w	r1, #262	; 0x106
   321f2:	4628      	mov	r0, r5
   321f4:	f009 fef4 	bl	3bfe0 <assert_post_action>

    if (!is_page_aligned_check(addr))
   321f8:	4620      	mov	r0, r4
   321fa:	f00c fce6 	bl	3ebca <is_page_aligned_check>
   321fe:	b908      	cbnz	r0, 32204 <nrfx_nvmc_page_erase+0x30>
    {
        return NRFX_ERROR_INVALID_ADDR;
   32200:	480a      	ldr	r0, [pc, #40]	; (3222c <nrfx_nvmc_page_erase+0x58>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   32202:	bd38      	pop	{r3, r4, r5, pc}
    nvmc_erase_mode_set();
   32204:	f7ff ffd2 	bl	321ac <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   32208:	f04f 33ff 	mov.w	r3, #4294967295
   3220c:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3220e:	4b08      	ldr	r3, [pc, #32]	; (32230 <nrfx_nvmc_page_erase+0x5c>)
   32210:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   32214:	f013 0f01 	tst.w	r3, #1
   32218:	d0f9      	beq.n	3220e <nrfx_nvmc_page_erase+0x3a>
    nvmc_readonly_mode_set();
   3221a:	f7ff ffb7 	bl	3218c <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   3221e:	4805      	ldr	r0, [pc, #20]	; (32234 <nrfx_nvmc_page_erase+0x60>)
   32220:	e7ef      	b.n	32202 <nrfx_nvmc_page_erase+0x2e>
   32222:	bf00      	nop
   32224:	00045870 	.word	0x00045870
   32228:	00041c84 	.word	0x00041c84
   3222c:	0bad000a 	.word	0x0bad000a
   32230:	40039000 	.word	0x40039000
   32234:	0bad0000 	.word	0x0bad0000

00032238 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   32238:	b570      	push	{r4, r5, r6, lr}
   3223a:	4604      	mov	r4, r0
   3223c:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3223e:	f00c fcbb 	bl	3ebb8 <flash_total_size_get>
   32242:	4284      	cmp	r4, r0
   32244:	d30b      	bcc.n	3225e <nrfx_nvmc_word_write+0x26>
    NRFX_ASSERT(is_valid_address(addr, true));
   32246:	4e12      	ldr	r6, [pc, #72]	; (32290 <nrfx_nvmc_word_write+0x58>)
   32248:	f44f 72ca 	mov.w	r2, #404	; 0x194
   3224c:	4631      	mov	r1, r6
   3224e:	4811      	ldr	r0, [pc, #68]	; (32294 <nrfx_nvmc_word_write+0x5c>)
   32250:	f009 fc72 	bl	3bb38 <printk>
   32254:	f44f 71ca 	mov.w	r1, #404	; 0x194
   32258:	4630      	mov	r0, r6
   3225a:	f009 fec1 	bl	3bfe0 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3225e:	f014 0f03 	tst.w	r4, #3
   32262:	d108      	bne.n	32276 <nrfx_nvmc_word_write+0x3e>

    nvmc_write_mode_set();
   32264:	f7ff ff9a 	bl	3219c <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   32268:	4629      	mov	r1, r5
   3226a:	4620      	mov	r0, r4
   3226c:	f7ff ffa6 	bl	321bc <nvmc_word_write>

    nvmc_readonly_mode_set();
   32270:	f7ff ff8c 	bl	3218c <nvmc_readonly_mode_set>
}
   32274:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   32276:	4e06      	ldr	r6, [pc, #24]	; (32290 <nrfx_nvmc_word_write+0x58>)
   32278:	f240 1295 	movw	r2, #405	; 0x195
   3227c:	4631      	mov	r1, r6
   3227e:	4805      	ldr	r0, [pc, #20]	; (32294 <nrfx_nvmc_word_write+0x5c>)
   32280:	f009 fc5a 	bl	3bb38 <printk>
   32284:	f240 1195 	movw	r1, #405	; 0x195
   32288:	4630      	mov	r0, r6
   3228a:	f009 fea9 	bl	3bfe0 <assert_post_action>
   3228e:	e7e9      	b.n	32264 <nrfx_nvmc_word_write+0x2c>
   32290:	00045870 	.word	0x00045870
   32294:	00041c84 	.word	0x00041c84

00032298 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
   32298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3229c:	4605      	mov	r5, r0
   3229e:	4690      	mov	r8, r2
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
   322a0:	7906      	ldrb	r6, [r0, #4]
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
   322a2:	460f      	mov	r7, r1
   322a4:	2900      	cmp	r1, #0
   322a6:	d037      	beq.n	32318 <nrfx_timer_init+0x80>
    NRFX_ASSERT(timer_event_handler);
   322a8:	f1b8 0f00 	cmp.w	r8, #0
   322ac:	d03f      	beq.n	3232e <nrfx_timer_init+0x96>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   322ae:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   322b2:	4a3f      	ldr	r2, [pc, #252]	; (323b0 <nrfx_timer_init+0x118>)
   322b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   322b8:	7a1c      	ldrb	r4, [r3, #8]
   322ba:	2c00      	cmp	r4, #0
   322bc:	d176      	bne.n	323ac <nrfx_timer_init+0x114>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   322be:	682b      	ldr	r3, [r5, #0]
   322c0:	4a3c      	ldr	r2, [pc, #240]	; (323b4 <nrfx_timer_init+0x11c>)
   322c2:	4293      	cmp	r3, r2
   322c4:	d03e      	beq.n	32344 <nrfx_timer_init+0xac>
   322c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   322ca:	4293      	cmp	r3, r2
   322cc:	d03a      	beq.n	32344 <nrfx_timer_init+0xac>
   322ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   322d2:	4293      	cmp	r3, r2
   322d4:	d036      	beq.n	32344 <nrfx_timer_init+0xac>
   322d6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 323bc <nrfx_timer_init+0x124>
   322da:	2261      	movs	r2, #97	; 0x61
   322dc:	4649      	mov	r1, r9
   322de:	4836      	ldr	r0, [pc, #216]	; (323b8 <nrfx_timer_init+0x120>)
   322e0:	f009 fc2a 	bl	3bb38 <printk>
   322e4:	2161      	movs	r1, #97	; 0x61
   322e6:	4648      	mov	r0, r9
   322e8:	f009 fe7a 	bl	3bfe0 <assert_post_action>

    p_cb->handler = timer_event_handler;
   322ec:	4b30      	ldr	r3, [pc, #192]	; (323b0 <nrfx_timer_init+0x118>)
   322ee:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   322f2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   322f6:	f843 8022 	str.w	r8, [r3, r2, lsl #2]
    p_cb->context = p_config->p_context;
   322fa:	687b      	ldr	r3, [r7, #4]
   322fc:	604b      	str	r3, [r1, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   322fe:	796b      	ldrb	r3, [r5, #5]
   32300:	42a3      	cmp	r3, r4
   32302:	d923      	bls.n	3234c <nrfx_timer_init+0xb4>
    {
        nrf_timer_event_clear(p_instance->p_reg,
   32304:	682a      	ldr	r2, [r5, #0]
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   32306:	00a3      	lsls	r3, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   32308:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   3230c:	2100      	movs	r1, #0
   3230e:	50d1      	str	r1, [r2, r3]
   32310:	58d3      	ldr	r3, [r2, r3]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
   32312:	3401      	adds	r4, #1
   32314:	b2e4      	uxtb	r4, r4
   32316:	e7f2      	b.n	322fe <nrfx_timer_init+0x66>
    NRFX_ASSERT(p_config);
   32318:	4c28      	ldr	r4, [pc, #160]	; (323bc <nrfx_timer_init+0x124>)
   3231a:	2253      	movs	r2, #83	; 0x53
   3231c:	4621      	mov	r1, r4
   3231e:	4826      	ldr	r0, [pc, #152]	; (323b8 <nrfx_timer_init+0x120>)
   32320:	f009 fc0a 	bl	3bb38 <printk>
   32324:	2153      	movs	r1, #83	; 0x53
   32326:	4620      	mov	r0, r4
   32328:	f009 fe5a 	bl	3bfe0 <assert_post_action>
   3232c:	e7bc      	b.n	322a8 <nrfx_timer_init+0x10>
    NRFX_ASSERT(timer_event_handler);
   3232e:	4c23      	ldr	r4, [pc, #140]	; (323bc <nrfx_timer_init+0x124>)
   32330:	2254      	movs	r2, #84	; 0x54
   32332:	4621      	mov	r1, r4
   32334:	4820      	ldr	r0, [pc, #128]	; (323b8 <nrfx_timer_init+0x120>)
   32336:	f009 fbff 	bl	3bb38 <printk>
   3233a:	2154      	movs	r1, #84	; 0x54
   3233c:	4620      	mov	r0, r4
   3233e:	f009 fe4f 	bl	3bfe0 <assert_post_action>
   32342:	e7b4      	b.n	322ae <nrfx_timer_init+0x16>
    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
   32344:	78bb      	ldrb	r3, [r7, #2]
   32346:	2b03      	cmp	r3, #3
   32348:	d9d0      	bls.n	322ec <nrfx_timer_init+0x54>
   3234a:	e7c4      	b.n	322d6 <nrfx_timer_init+0x3e>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   3234c:	6828      	ldr	r0, [r5, #0]
   3234e:	f340 3007 	sbfx	r0, r0, #12, #8
   32352:	f7f5 fa51 	bl	277f8 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
   32356:	6829      	ldr	r1, [r5, #0]
   32358:	787b      	ldrb	r3, [r7, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   3235a:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504
   3235e:	f022 0203 	bic.w	r2, r2, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   32362:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   32366:	4313      	orrs	r3, r2
   32368:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
   3236c:	6829      	ldr	r1, [r5, #0]
   3236e:	78bb      	ldrb	r3, [r7, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   32370:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
   32374:	f022 0203 	bic.w	r2, r2, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   32378:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   3237c:	4313      	orrs	r3, r2
   3237e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
   32382:	6829      	ldr	r1, [r5, #0]
   32384:	783b      	ldrb	r3, [r7, #0]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   32386:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   3238a:	f022 020f 	bic.w	r2, r2, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   3238e:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   32392:	4313      	orrs	r3, r2
   32394:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   32398:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   3239c:	4b04      	ldr	r3, [pc, #16]	; (323b0 <nrfx_timer_init+0x118>)
   3239e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   323a2:	2301      	movs	r3, #1
   323a4:	7233      	strb	r3, [r6, #8]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   323a6:	4806      	ldr	r0, [pc, #24]	; (323c0 <nrfx_timer_init+0x128>)
}
   323a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   323ac:	4805      	ldr	r0, [pc, #20]	; (323c4 <nrfx_timer_init+0x12c>)
   323ae:	e7fb      	b.n	323a8 <nrfx_timer_init+0x110>
   323b0:	2001066c 	.word	0x2001066c
   323b4:	4000f000 	.word	0x4000f000
   323b8:	00041c84 	.word	0x00041c84
   323bc:	000458ac 	.word	0x000458ac
   323c0:	0bad0000 	.word	0x0bad0000
   323c4:	0bad0005 	.word	0x0bad0005

000323c8 <nrfx_timer_enable>:
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
}

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
   323c8:	b538      	push	{r3, r4, r5, lr}
   323ca:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   323cc:	7903      	ldrb	r3, [r0, #4]
   323ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   323d2:	4a0e      	ldr	r2, [pc, #56]	; (3240c <nrfx_timer_enable+0x44>)
   323d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   323d8:	7a1b      	ldrb	r3, [r3, #8]
   323da:	2b01      	cmp	r3, #1
   323dc:	d10b      	bne.n	323f6 <nrfx_timer_enable+0x2e>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
   323de:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   323e0:	2201      	movs	r2, #1
   323e2:	601a      	str	r2, [r3, #0]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
   323e4:	7923      	ldrb	r3, [r4, #4]
   323e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   323ea:	4a08      	ldr	r2, [pc, #32]	; (3240c <nrfx_timer_enable+0x44>)
   323ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   323f0:	2202      	movs	r2, #2
   323f2:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
}
   323f4:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
   323f6:	4d06      	ldr	r5, [pc, #24]	; (32410 <nrfx_timer_enable+0x48>)
   323f8:	228f      	movs	r2, #143	; 0x8f
   323fa:	4629      	mov	r1, r5
   323fc:	4805      	ldr	r0, [pc, #20]	; (32414 <nrfx_timer_enable+0x4c>)
   323fe:	f009 fb9b 	bl	3bb38 <printk>
   32402:	218f      	movs	r1, #143	; 0x8f
   32404:	4628      	mov	r0, r5
   32406:	f009 fdeb 	bl	3bfe0 <assert_post_action>
   3240a:	e7e8      	b.n	323de <nrfx_timer_enable+0x16>
   3240c:	2001066c 	.word	0x2001066c
   32410:	000458ac 	.word	0x000458ac
   32414:	00041c84 	.word	0x00041c84

00032418 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
   32418:	b538      	push	{r3, r4, r5, lr}
   3241a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   3241c:	7903      	ldrb	r3, [r0, #4]
   3241e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32422:	4a0d      	ldr	r2, [pc, #52]	; (32458 <nrfx_timer_disable+0x40>)
   32424:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   32428:	7a1b      	ldrb	r3, [r3, #8]
   3242a:	b153      	cbz	r3, 32442 <nrfx_timer_disable+0x2a>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
   3242c:	6823      	ldr	r3, [r4, #0]
   3242e:	2101      	movs	r1, #1
   32430:	6119      	str	r1, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
   32432:	7923      	ldrb	r3, [r4, #4]
   32434:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32438:	4a07      	ldr	r2, [pc, #28]	; (32458 <nrfx_timer_disable+0x40>)
   3243a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3243e:	7219      	strb	r1, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
   32440:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   32442:	4d06      	ldr	r5, [pc, #24]	; (3245c <nrfx_timer_disable+0x44>)
   32444:	2297      	movs	r2, #151	; 0x97
   32446:	4629      	mov	r1, r5
   32448:	4805      	ldr	r0, [pc, #20]	; (32460 <nrfx_timer_disable+0x48>)
   3244a:	f009 fb75 	bl	3bb38 <printk>
   3244e:	2197      	movs	r1, #151	; 0x97
   32450:	4628      	mov	r0, r5
   32452:	f009 fdc5 	bl	3bfe0 <assert_post_action>
   32456:	e7e9      	b.n	3242c <nrfx_timer_disable+0x14>
   32458:	2001066c 	.word	0x2001066c
   3245c:	000458ac 	.word	0x000458ac
   32460:	00041c84 	.word	0x00041c84

00032464 <nrfx_timer_uninit>:
{
   32464:	b538      	push	{r3, r4, r5, lr}
   32466:	4604      	mov	r4, r0
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   32468:	6800      	ldr	r0, [r0, #0]
   3246a:	f340 3007 	sbfx	r0, r0, #12, #8
   3246e:	f7f5 f9d3 	bl	27818 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
   32472:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
   32474:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   32478:	2500      	movs	r5, #0
   3247a:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
   3247e:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
   32480:	f04f 32ff 	mov.w	r2, #4294967295
   32484:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
   32488:	4620      	mov	r0, r4
   3248a:	f7ff ffc5 	bl	32418 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
   3248e:	7923      	ldrb	r3, [r4, #4]
   32490:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32494:	4a02      	ldr	r2, [pc, #8]	; (324a0 <nrfx_timer_uninit+0x3c>)
   32496:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   3249a:	721d      	strb	r5, [r3, #8]
}
   3249c:	bd38      	pop	{r3, r4, r5, pc}
   3249e:	bf00      	nop
   324a0:	2001066c 	.word	0x2001066c

000324a4 <nrfx_timer_clear>:
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_STOP);
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
   324a4:	b538      	push	{r3, r4, r5, lr}
   324a6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   324a8:	7903      	ldrb	r3, [r0, #4]
   324aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   324ae:	4a0a      	ldr	r2, [pc, #40]	; (324d8 <nrfx_timer_clear+0x34>)
   324b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   324b4:	7a1b      	ldrb	r3, [r3, #8]
   324b6:	b11b      	cbz	r3, 324c0 <nrfx_timer_clear+0x1c>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
   324b8:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   324ba:	2201      	movs	r2, #1
   324bc:	60da      	str	r2, [r3, #12]
}
   324be:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   324c0:	4d06      	ldr	r5, [pc, #24]	; (324dc <nrfx_timer_clear+0x38>)
   324c2:	22b3      	movs	r2, #179	; 0xb3
   324c4:	4629      	mov	r1, r5
   324c6:	4806      	ldr	r0, [pc, #24]	; (324e0 <nrfx_timer_clear+0x3c>)
   324c8:	f009 fb36 	bl	3bb38 <printk>
   324cc:	21b3      	movs	r1, #179	; 0xb3
   324ce:	4628      	mov	r0, r5
   324d0:	f009 fd86 	bl	3bfe0 <assert_post_action>
   324d4:	e7f0      	b.n	324b8 <nrfx_timer_clear+0x14>
   324d6:	bf00      	nop
   324d8:	2001066c 	.word	0x2001066c
   324dc:	000458ac 	.word	0x000458ac
   324e0:	00041c84 	.word	0x00041c84

000324e4 <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
   324e4:	b538      	push	{r3, r4, r5, lr}
   324e6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   324e8:	7903      	ldrb	r3, [r0, #4]
   324ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   324ee:	4a12      	ldr	r2, [pc, #72]	; (32538 <nrfx_timer_increment+0x54>)
   324f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   324f4:	7a1b      	ldrb	r3, [r3, #8]
   324f6:	b14b      	cbz	r3, 3250c <nrfx_timer_increment+0x28>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   324f8:	6823      	ldr	r3, [r4, #0]
    return (nrf_timer_mode_t)(p_reg->MODE);
   324fa:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   324fe:	f013 0fff 	tst.w	r3, #255	; 0xff
   32502:	d00e      	beq.n	32522 <nrfx_timer_increment+0x3e>

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
   32504:	6823      	ldr	r3, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32506:	2201      	movs	r2, #1
   32508:	609a      	str	r2, [r3, #8]
}
   3250a:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   3250c:	4d0b      	ldr	r5, [pc, #44]	; (3253c <nrfx_timer_increment+0x58>)
   3250e:	22b9      	movs	r2, #185	; 0xb9
   32510:	4629      	mov	r1, r5
   32512:	480b      	ldr	r0, [pc, #44]	; (32540 <nrfx_timer_increment+0x5c>)
   32514:	f009 fb10 	bl	3bb38 <printk>
   32518:	21b9      	movs	r1, #185	; 0xb9
   3251a:	4628      	mov	r0, r5
   3251c:	f009 fd60 	bl	3bfe0 <assert_post_action>
   32520:	e7ea      	b.n	324f8 <nrfx_timer_increment+0x14>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
   32522:	4d06      	ldr	r5, [pc, #24]	; (3253c <nrfx_timer_increment+0x58>)
   32524:	22ba      	movs	r2, #186	; 0xba
   32526:	4629      	mov	r1, r5
   32528:	4805      	ldr	r0, [pc, #20]	; (32540 <nrfx_timer_increment+0x5c>)
   3252a:	f009 fb05 	bl	3bb38 <printk>
   3252e:	21ba      	movs	r1, #186	; 0xba
   32530:	4628      	mov	r0, r5
   32532:	f009 fd55 	bl	3bfe0 <assert_post_action>
   32536:	e7e5      	b.n	32504 <nrfx_timer_increment+0x20>
   32538:	2001066c 	.word	0x2001066c
   3253c:	000458ac 	.word	0x000458ac
   32540:	00041c84 	.word	0x00041c84

00032544 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
   32544:	b570      	push	{r4, r5, r6, lr}
   32546:	4605      	mov	r5, r0
   32548:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   3254a:	7903      	ldrb	r3, [r0, #4]
   3254c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32550:	4a14      	ldr	r2, [pc, #80]	; (325a4 <nrfx_timer_capture+0x60>)
   32552:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   32556:	7a1b      	ldrb	r3, [r3, #8]
   32558:	b173      	cbz	r3, 32578 <nrfx_timer_capture+0x34>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   3255a:	796b      	ldrb	r3, [r5, #5]
   3255c:	42a3      	cmp	r3, r4
   3255e:	d916      	bls.n	3258e <nrfx_timer_capture+0x4a>

    nrf_timer_task_trigger(p_instance->p_reg,
   32560:	682a      	ldr	r2, [r5, #0]
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   32562:	00a3      	lsls	r3, r4, #2
   32564:	3340      	adds	r3, #64	; 0x40
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   32566:	b2db      	uxtb	r3, r3
   32568:	2101      	movs	r1, #1
   3256a:	50d1      	str	r1, [r2, r3]
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
   3256c:	682b      	ldr	r3, [r5, #0]
    return (uint32_t)p_reg->CC[cc_channel];
   3256e:	f504 74a8 	add.w	r4, r4, #336	; 0x150
   32572:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
   32576:	bd70      	pop	{r4, r5, r6, pc}
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
   32578:	4e0b      	ldr	r6, [pc, #44]	; (325a8 <nrfx_timer_capture+0x64>)
   3257a:	22c2      	movs	r2, #194	; 0xc2
   3257c:	4631      	mov	r1, r6
   3257e:	480b      	ldr	r0, [pc, #44]	; (325ac <nrfx_timer_capture+0x68>)
   32580:	f009 fada 	bl	3bb38 <printk>
   32584:	21c2      	movs	r1, #194	; 0xc2
   32586:	4630      	mov	r0, r6
   32588:	f009 fd2a 	bl	3bfe0 <assert_post_action>
   3258c:	e7e5      	b.n	3255a <nrfx_timer_capture+0x16>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
   3258e:	4e06      	ldr	r6, [pc, #24]	; (325a8 <nrfx_timer_capture+0x64>)
   32590:	22c3      	movs	r2, #195	; 0xc3
   32592:	4631      	mov	r1, r6
   32594:	4805      	ldr	r0, [pc, #20]	; (325ac <nrfx_timer_capture+0x68>)
   32596:	f009 facf 	bl	3bb38 <printk>
   3259a:	21c3      	movs	r1, #195	; 0xc3
   3259c:	4630      	mov	r0, r6
   3259e:	f009 fd1f 	bl	3bfe0 <assert_post_action>
   325a2:	e7dd      	b.n	32560 <nrfx_timer_capture+0x1c>
   325a4:	2001066c 	.word	0x2001066c
   325a8:	000458ac 	.word	0x000458ac
   325ac:	00041c84 	.word	0x00041c84

000325b0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   325b0:	4b11      	ldr	r3, [pc, #68]	; (325f8 <_DoInit+0x48>)
   325b2:	2203      	movs	r2, #3
   325b4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   325b6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   325b8:	4910      	ldr	r1, [pc, #64]	; (325fc <_DoInit+0x4c>)
   325ba:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   325bc:	4a10      	ldr	r2, [pc, #64]	; (32600 <_DoInit+0x50>)
   325be:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   325c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   325c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   325c6:	2200      	movs	r2, #0
   325c8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   325ca:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   325cc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   325ce:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   325d0:	490c      	ldr	r1, [pc, #48]	; (32604 <_DoInit+0x54>)
   325d2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   325d4:	2110      	movs	r1, #16
   325d6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   325d8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   325da:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   325dc:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   325de:	4a0a      	ldr	r2, [pc, #40]	; (32608 <_DoInit+0x58>)
   325e0:	6810      	ldr	r0, [r2, #0]
   325e2:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   325e6:	4a09      	ldr	r2, [pc, #36]	; (3260c <_DoInit+0x5c>)
   325e8:	e892 0003 	ldmia.w	r2, {r0, r1}
   325ec:	6018      	str	r0, [r3, #0]
   325ee:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   325f0:	2220      	movs	r2, #32
   325f2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   325f4:	4770      	bx	lr
   325f6:	bf00      	nop
   325f8:	20010678 	.word	0x20010678
   325fc:	000458ec 	.word	0x000458ec
   32600:	20010730 	.word	0x20010730
   32604:	20010720 	.word	0x20010720
   32608:	000458f8 	.word	0x000458f8
   3260c:	000458fc 	.word	0x000458fc

00032610 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   32610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   32614:	4604      	mov	r4, r0
   32616:	460e      	mov	r6, r1
   32618:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   3261a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   3261e:	4a2d      	ldr	r2, [pc, #180]	; (326d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   32620:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   32624:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   32626:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   32628:	42bb      	cmp	r3, r7
   3262a:	d84b      	bhi.n	326c4 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   3262c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   32630:	4928      	ldr	r1, [pc, #160]	; (326d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   32632:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   32636:	f8d2 8020 	ldr.w	r8, [r2, #32]
   3263a:	eba8 0907 	sub.w	r9, r8, r7
   3263e:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   32642:	4295      	cmp	r5, r2
   32644:	d904      	bls.n	32650 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   32646:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   32648:	429d      	cmp	r5, r3
   3264a:	d917      	bls.n	3267c <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   3264c:	2000      	movs	r0, #0
   3264e:	e03e      	b.n	326ce <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   32650:	f8df 8080 	ldr.w	r8, [pc, #128]	; 326d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   32654:	1c63      	adds	r3, r4, #1
   32656:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3265a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3265e:	6858      	ldr	r0, [r3, #4]
   32660:	462a      	mov	r2, r5
   32662:	4631      	mov	r1, r6
   32664:	4438      	add	r0, r7
   32666:	f00d fc4b 	bl	3ff00 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   3266a:	443d      	add	r5, r7
   3266c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   32670:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   32674:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
   32678:	2001      	movs	r0, #1
   3267a:	e028      	b.n	326ce <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3267c:	1c43      	adds	r3, r0, #1
   3267e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   32682:	4a14      	ldr	r2, [pc, #80]	; (326d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   32684:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   32688:	6858      	ldr	r0, [r3, #4]
   3268a:	464a      	mov	r2, r9
   3268c:	4631      	mov	r1, r6
   3268e:	4438      	add	r0, r7
   32690:	f00d fc36 	bl	3ff00 <memcpy>
      NumBytes -= Rem;
   32694:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
   32698:	197f      	adds	r7, r7, r5
   3269a:	d00b      	beq.n	326b4 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   3269c:	1c63      	adds	r3, r4, #1
   3269e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   326a2:	4a0c      	ldr	r2, [pc, #48]	; (326d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   326a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   326a8:	463a      	mov	r2, r7
   326aa:	eb06 0109 	add.w	r1, r6, r9
   326ae:	6858      	ldr	r0, [r3, #4]
   326b0:	f00d fc26 	bl	3ff00 <memcpy>
      pRing->WrOff = NumBytes;
   326b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   326b8:	4b06      	ldr	r3, [pc, #24]	; (326d4 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   326ba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   326be:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   326c0:	2001      	movs	r0, #1
   326c2:	e004      	b.n	326ce <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
   326c4:	1bdb      	subs	r3, r3, r7
   326c6:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   326c8:	42ab      	cmp	r3, r5
   326ca:	d2c1      	bcs.n	32650 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   326cc:	2000      	movs	r0, #0
}
   326ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   326d2:	bf00      	nop
   326d4:	20010678 	.word	0x20010678

000326d8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   326d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   326da:	460f      	mov	r7, r1
   326dc:	4616      	mov	r6, r2
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   326de:	4b18      	ldr	r3, [pc, #96]	; (32740 <SEGGER_RTT_WriteNoLock+0x68>)
   326e0:	1c45      	adds	r5, r0, #1
   326e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   326e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   326ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   326ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   326f2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   326f4:	2c01      	cmp	r4, #1
   326f6:	d011      	beq.n	3271c <SEGGER_RTT_WriteNoLock+0x44>
   326f8:	2c02      	cmp	r4, #2
   326fa:	d01c      	beq.n	32736 <SEGGER_RTT_WriteNoLock+0x5e>
   326fc:	b114      	cbz	r4, 32704 <SEGGER_RTT_WriteNoLock+0x2c>
   326fe:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   32700:	4620      	mov	r0, r4
   32702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   32704:	4628      	mov	r0, r5
   32706:	f00c fa78 	bl	3ebfa <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   3270a:	4286      	cmp	r6, r0
   3270c:	d8f8      	bhi.n	32700 <SEGGER_RTT_WriteNoLock+0x28>
      _WriteNoCheck(pRing, pData, NumBytes);
   3270e:	4632      	mov	r2, r6
   32710:	4639      	mov	r1, r7
   32712:	4628      	mov	r0, r5
   32714:	f00c fa7d 	bl	3ec12 <_WriteNoCheck>
      Status = NumBytes;
   32718:	4634      	mov	r4, r6
   3271a:	e7f1      	b.n	32700 <SEGGER_RTT_WriteNoLock+0x28>
    Avail = _GetAvailWriteSpace(pRing);
   3271c:	4628      	mov	r0, r5
   3271e:	f00c fa6c 	bl	3ebfa <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   32722:	4634      	mov	r4, r6
   32724:	4286      	cmp	r6, r0
   32726:	bf28      	it	cs
   32728:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   3272a:	4622      	mov	r2, r4
   3272c:	4639      	mov	r1, r7
   3272e:	4628      	mov	r0, r5
   32730:	f00c fa6f 	bl	3ec12 <_WriteNoCheck>
    break;
   32734:	e7e4      	b.n	32700 <SEGGER_RTT_WriteNoLock+0x28>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   32736:	4628      	mov	r0, r5
   32738:	f00c fa8d 	bl	3ec56 <_WriteBlocking>
   3273c:	4604      	mov	r4, r0
    break;
   3273e:	e7df      	b.n	32700 <SEGGER_RTT_WriteNoLock+0x28>
   32740:	20010678 	.word	0x20010678

00032744 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   32744:	4b06      	ldr	r3, [pc, #24]	; (32760 <SEGGER_RTT_HasDataUp+0x1c>)
   32746:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   3274a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   3274e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   32750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   32754:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   32758:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   3275a:	1a80      	subs	r0, r0, r2
   3275c:	4770      	bx	lr
   3275e:	bf00      	nop
   32760:	20010678 	.word	0x20010678

00032764 <rpc_handle_data_message>:
   32764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32768:	4680      	mov	r8, r0
   3276a:	4604      	mov	r4, r0
   3276c:	2700      	movs	r7, #0
   3276e:	f858 6b08 	ldr.w	r6, [r8], #8
   32772:	4d0c      	ldr	r5, [pc, #48]	; (327a4 <rpc_handle_data_message+0x40>)
   32774:	b2f6      	uxtb	r6, r6
   32776:	782b      	ldrb	r3, [r5, #0]
   32778:	42b3      	cmp	r3, r6
   3277a:	d00a      	beq.n	32792 <rpc_handle_data_message+0x2e>
   3277c:	3701      	adds	r7, #1
   3277e:	2f04      	cmp	r7, #4
   32780:	f105 050c 	add.w	r5, r5, #12
   32784:	d1f7      	bne.n	32776 <rpc_handle_data_message+0x12>
   32786:	68a0      	ldr	r0, [r4, #8]
   32788:	b150      	cbz	r0, 327a0 <rpc_handle_data_message+0x3c>
   3278a:	f00c fae0 	bl	3ed4e <rpc_transport_peer_data_free>
   3278e:	2000      	movs	r0, #0
   32790:	e006      	b.n	327a0 <rpc_handle_data_message+0x3c>
   32792:	6821      	ldr	r1, [r4, #0]
   32794:	4640      	mov	r0, r8
   32796:	686b      	ldr	r3, [r5, #4]
   32798:	0c09      	lsrs	r1, r1, #16
   3279a:	4798      	blx	r3
   3279c:	2802      	cmp	r0, #2
   3279e:	d0ed      	beq.n	3277c <rpc_handle_data_message+0x18>
   327a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   327a4:	00045904 	.word	0x00045904

000327a8 <trace_write>:
   327a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   327ac:	4f53      	ldr	r7, [pc, #332]	; (328fc <trace_write+0x154>)
   327ae:	4605      	mov	r5, r0
   327b0:	2100      	movs	r1, #0
   327b2:	6838      	ldr	r0, [r7, #0]
   327b4:	f7f8 f9d8 	bl	2ab68 <nrf_modem_os_sem_take>
   327b8:	4604      	mov	r4, r0
   327ba:	2800      	cmp	r0, #0
   327bc:	d14c      	bne.n	32858 <trace_write+0xb0>
   327be:	782b      	ldrb	r3, [r5, #0]
   327c0:	f8d5 8008 	ldr.w	r8, [r5, #8]
   327c4:	2b62      	cmp	r3, #98	; 0x62
   327c6:	d043      	beq.n	32850 <trace_write+0xa8>
   327c8:	2b63      	cmp	r3, #99	; 0x63
   327ca:	d043      	beq.n	32854 <trace_write+0xac>
   327cc:	2b61      	cmp	r3, #97	; 0x61
   327ce:	d102      	bne.n	327d6 <trace_write+0x2e>
   327d0:	4b4b      	ldr	r3, [pc, #300]	; (32900 <trace_write+0x158>)
   327d2:	881c      	ldrh	r4, [r3, #0]
   327d4:	b2a4      	uxth	r4, r4
   327d6:	6838      	ldr	r0, [r7, #0]
   327d8:	f7f8 f9a8 	bl	2ab2c <nrf_modem_os_sem_give>
   327dc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   327e0:	6929      	ldr	r1, [r5, #16]
   327e2:	eba8 080a 	sub.w	r8, r8, sl
   327e6:	eba1 030a 	sub.w	r3, r1, sl
   327ea:	b29b      	uxth	r3, r3
   327ec:	fa14 f488 	uxtah	r4, r4, r8
   327f0:	fbb4 f2f3 	udiv	r2, r4, r3
   327f4:	fb03 4412 	mls	r4, r3, r2, r4
   327f8:	686a      	ldr	r2, [r5, #4]
   327fa:	eba2 020a 	sub.w	r2, r2, sl
   327fe:	fa13 f282 	uxtah	r2, r3, r2
   32802:	1b12      	subs	r2, r2, r4
   32804:	fb92 f0f3 	sdiv	r0, r2, r3
   32808:	fb03 2210 	mls	r2, r3, r0, r2
   3280c:	fa1f f982 	uxth.w	r9, r2
   32810:	fa14 f282 	uxtah	r2, r4, r2
   32814:	4293      	cmp	r3, r2
   32816:	44a2      	add	sl, r4
   32818:	da22      	bge.n	32860 <trace_write+0xb8>
   3281a:	eba1 030a 	sub.w	r3, r1, sl
   3281e:	b29b      	uxth	r3, r3
   32820:	eba9 0403 	sub.w	r4, r9, r3
   32824:	4699      	mov	r9, r3
   32826:	b2a4      	uxth	r4, r4
   32828:	f1b9 0f00 	cmp.w	r9, #0
   3282c:	d064      	beq.n	328f8 <trace_write+0x150>
   3282e:	2005      	movs	r0, #5
   32830:	f7f8 f9fc 	bl	2ac2c <nrf_modem_os_alloc>
   32834:	4680      	mov	r8, r0
   32836:	2800      	cmp	r0, #0
   32838:	d05e      	beq.n	328f8 <trace_write+0x150>
   3283a:	b19c      	cbz	r4, 32864 <trace_write+0xbc>
   3283c:	2005      	movs	r0, #5
   3283e:	f7f8 f9f5 	bl	2ac2c <nrf_modem_os_alloc>
   32842:	4606      	mov	r6, r0
   32844:	b970      	cbnz	r0, 32864 <trace_write+0xbc>
   32846:	4640      	mov	r0, r8
   32848:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3284c:	f7f8 b9f8 	b.w	2ac40 <nrf_modem_os_free>
   32850:	4b2c      	ldr	r3, [pc, #176]	; (32904 <trace_write+0x15c>)
   32852:	e7be      	b.n	327d2 <trace_write+0x2a>
   32854:	4b2c      	ldr	r3, [pc, #176]	; (32908 <trace_write+0x160>)
   32856:	e7bc      	b.n	327d2 <trace_write+0x2a>
   32858:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3285c:	f7f8 b9d6 	b.w	2ac0c <nrf_modem_os_trace_irq_set>
   32860:	2400      	movs	r4, #0
   32862:	e7e1      	b.n	32828 <trace_write+0x80>
   32864:	2100      	movs	r1, #0
   32866:	6838      	ldr	r0, [r7, #0]
   32868:	f7f8 f97e 	bl	2ab68 <nrf_modem_os_sem_take>
   3286c:	b140      	cbz	r0, 32880 <trace_write+0xd8>
   3286e:	f7f8 f9cd 	bl	2ac0c <nrf_modem_os_trace_irq_set>
   32872:	4640      	mov	r0, r8
   32874:	f7f8 f9e4 	bl	2ac40 <nrf_modem_os_free>
   32878:	2c00      	cmp	r4, #0
   3287a:	d03d      	beq.n	328f8 <trace_write+0x150>
   3287c:	4630      	mov	r0, r6
   3287e:	e7e3      	b.n	32848 <trace_write+0xa0>
   32880:	782b      	ldrb	r3, [r5, #0]
   32882:	2b62      	cmp	r3, #98	; 0x62
   32884:	d034      	beq.n	328f0 <trace_write+0x148>
   32886:	2b63      	cmp	r3, #99	; 0x63
   32888:	d034      	beq.n	328f4 <trace_write+0x14c>
   3288a:	2b61      	cmp	r3, #97	; 0x61
   3288c:	d107      	bne.n	3289e <trace_write+0xf6>
   3288e:	4a1c      	ldr	r2, [pc, #112]	; (32900 <trace_write+0x158>)
   32890:	8813      	ldrh	r3, [r2, #0]
   32892:	eb04 0109 	add.w	r1, r4, r9
   32896:	fa11 f383 	uxtah	r3, r1, r3
   3289a:	b29b      	uxth	r3, r3
   3289c:	8013      	strh	r3, [r2, #0]
   3289e:	6838      	ldr	r0, [r7, #0]
   328a0:	f06f 0b10 	mvn.w	fp, #16
   328a4:	f06f 0741 	mvn.w	r7, #65	; 0x41
   328a8:	f7f8 f940 	bl	2ab2c <nrf_modem_os_sem_give>
   328ac:	f888 b000 	strb.w	fp, [r8]
   328b0:	f888 7001 	strb.w	r7, [r8, #1]
   328b4:	782b      	ldrb	r3, [r5, #0]
   328b6:	2105      	movs	r1, #5
   328b8:	4640      	mov	r0, r8
   328ba:	f888 3004 	strb.w	r3, [r8, #4]
   328be:	f8a8 9002 	strh.w	r9, [r8, #2]
   328c2:	f00b f915 	bl	3daf0 <nrf_modem_os_trace_put>
   328c6:	4649      	mov	r1, r9
   328c8:	4650      	mov	r0, sl
   328ca:	f00b f911 	bl	3daf0 <nrf_modem_os_trace_put>
   328ce:	b19c      	cbz	r4, 328f8 <trace_write+0x150>
   328d0:	f886 b000 	strb.w	fp, [r6]
   328d4:	7077      	strb	r7, [r6, #1]
   328d6:	782b      	ldrb	r3, [r5, #0]
   328d8:	2105      	movs	r1, #5
   328da:	4630      	mov	r0, r6
   328dc:	7133      	strb	r3, [r6, #4]
   328de:	8074      	strh	r4, [r6, #2]
   328e0:	f00b f906 	bl	3daf0 <nrf_modem_os_trace_put>
   328e4:	4621      	mov	r1, r4
   328e6:	68e8      	ldr	r0, [r5, #12]
   328e8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   328ec:	f00b b900 	b.w	3daf0 <nrf_modem_os_trace_put>
   328f0:	4a04      	ldr	r2, [pc, #16]	; (32904 <trace_write+0x15c>)
   328f2:	e7cd      	b.n	32890 <trace_write+0xe8>
   328f4:	4a04      	ldr	r2, [pc, #16]	; (32908 <trace_write+0x160>)
   328f6:	e7cb      	b.n	32890 <trace_write+0xe8>
   328f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328fc:	20010b40 	.word	0x20010b40
   32900:	20010de6 	.word	0x20010de6
   32904:	20010de2 	.word	0x20010de2
   32908:	20010de4 	.word	0x20010de4

0003290c <ipc_trace_init>:
   3290c:	2300      	movs	r3, #0
   3290e:	4a08      	ldr	r2, [pc, #32]	; (32930 <ipc_trace_init+0x24>)
   32910:	b510      	push	{r4, lr}
   32912:	8013      	strh	r3, [r2, #0]
   32914:	4a07      	ldr	r2, [pc, #28]	; (32934 <ipc_trace_init+0x28>)
   32916:	4604      	mov	r4, r0
   32918:	8013      	strh	r3, [r2, #0]
   3291a:	4a07      	ldr	r2, [pc, #28]	; (32938 <ipc_trace_init+0x2c>)
   3291c:	4807      	ldr	r0, [pc, #28]	; (3293c <ipc_trace_init+0x30>)
   3291e:	8013      	strh	r3, [r2, #0]
   32920:	2201      	movs	r2, #1
   32922:	4611      	mov	r1, r2
   32924:	f7f8 f8ce 	bl	2aac4 <nrf_modem_os_sem_init>
   32928:	4b05      	ldr	r3, [pc, #20]	; (32940 <ipc_trace_init+0x34>)
   3292a:	601c      	str	r4, [r3, #0]
   3292c:	bd10      	pop	{r4, pc}
   3292e:	bf00      	nop
   32930:	20010de6 	.word	0x20010de6
   32934:	20010de2 	.word	0x20010de2
   32938:	20010de4 	.word	0x20010de4
   3293c:	20010b40 	.word	0x20010b40
   32940:	20010b3c 	.word	0x20010b3c

00032944 <nrf_modem_trace_irq_handler>:
   32944:	b508      	push	{r3, lr}
   32946:	4b10      	ldr	r3, [pc, #64]	; (32988 <nrf_modem_trace_irq_handler+0x44>)
   32948:	781b      	ldrb	r3, [r3, #0]
   3294a:	b90b      	cbnz	r3, 32950 <nrf_modem_trace_irq_handler+0xc>
   3294c:	f7f8 f966 	bl	2ac1c <nrf_modem_os_trace_irq_clear>
   32950:	4b0e      	ldr	r3, [pc, #56]	; (3298c <nrf_modem_trace_irq_handler+0x48>)
   32952:	6818      	ldr	r0, [r3, #0]
   32954:	6842      	ldr	r2, [r0, #4]
   32956:	6883      	ldr	r3, [r0, #8]
   32958:	429a      	cmp	r2, r3
   3295a:	d001      	beq.n	32960 <nrf_modem_trace_irq_handler+0x1c>
   3295c:	f7ff ff24 	bl	327a8 <trace_write>
   32960:	4b0b      	ldr	r3, [pc, #44]	; (32990 <nrf_modem_trace_irq_handler+0x4c>)
   32962:	6818      	ldr	r0, [r3, #0]
   32964:	6882      	ldr	r2, [r0, #8]
   32966:	6843      	ldr	r3, [r0, #4]
   32968:	429a      	cmp	r2, r3
   3296a:	d001      	beq.n	32970 <nrf_modem_trace_irq_handler+0x2c>
   3296c:	f7ff ff1c 	bl	327a8 <trace_write>
   32970:	4b08      	ldr	r3, [pc, #32]	; (32994 <nrf_modem_trace_irq_handler+0x50>)
   32972:	6818      	ldr	r0, [r3, #0]
   32974:	6882      	ldr	r2, [r0, #8]
   32976:	6843      	ldr	r3, [r0, #4]
   32978:	429a      	cmp	r2, r3
   3297a:	d003      	beq.n	32984 <nrf_modem_trace_irq_handler+0x40>
   3297c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   32980:	f7ff bf12 	b.w	327a8 <trace_write>
   32984:	bd08      	pop	{r3, pc}
   32986:	bf00      	nop
   32988:	20010e0e 	.word	0x20010e0e
   3298c:	20010b38 	.word	0x20010b38
   32990:	20010b30 	.word	0x20010b30
   32994:	20010b34 	.word	0x20010b34

00032998 <ipc_trace_handle>:
   32998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3299c:	4b43      	ldr	r3, [pc, #268]	; (32aac <ipc_trace_handle+0x114>)
   3299e:	681b      	ldr	r3, [r3, #0]
   329a0:	6919      	ldr	r1, [r3, #16]
   329a2:	f8d3 a014 	ldr.w	sl, [r3, #20]
   329a6:	7c1a      	ldrb	r2, [r3, #16]
   329a8:	2200      	movs	r2, #0
   329aa:	741a      	strb	r2, [r3, #16]
   329ac:	7c58      	ldrb	r0, [r3, #17]
   329ae:	745a      	strb	r2, [r3, #17]
   329b0:	7c98      	ldrb	r0, [r3, #18]
   329b2:	749a      	strb	r2, [r3, #18]
   329b4:	7cd8      	ldrb	r0, [r3, #19]
   329b6:	74da      	strb	r2, [r3, #19]
   329b8:	7d18      	ldrb	r0, [r3, #20]
   329ba:	751a      	strb	r2, [r3, #20]
   329bc:	7d58      	ldrb	r0, [r3, #21]
   329be:	755a      	strb	r2, [r3, #21]
   329c0:	7d98      	ldrb	r0, [r3, #22]
   329c2:	759a      	strb	r2, [r3, #22]
   329c4:	7dd8      	ldrb	r0, [r3, #23]
   329c6:	75da      	strb	r2, [r3, #23]
   329c8:	2900      	cmp	r1, #0
   329ca:	d033      	beq.n	32a34 <ipc_trace_handle+0x9c>
   329cc:	3901      	subs	r1, #1
   329ce:	2903      	cmp	r1, #3
   329d0:	d830      	bhi.n	32a34 <ipc_trace_handle+0x9c>
   329d2:	e8df f001 	tbb	[pc, r1]
   329d6:	6502      	.short	0x6502
   329d8:	534c      	.short	0x534c
   329da:	4a35      	ldr	r2, [pc, #212]	; (32ab0 <ipc_trace_handle+0x118>)
   329dc:	7811      	ldrb	r1, [r2, #0]
   329de:	b109      	cbz	r1, 329e4 <ipc_trace_handle+0x4c>
   329e0:	2100      	movs	r1, #0
   329e2:	7011      	strb	r1, [r2, #0]
   329e4:	2200      	movs	r2, #0
   329e6:	4691      	mov	r9, r2
   329e8:	4617      	mov	r7, r2
   329ea:	4614      	mov	r4, r2
   329ec:	4d31      	ldr	r5, [pc, #196]	; (32ab4 <ipc_trace_handle+0x11c>)
   329ee:	4932      	ldr	r1, [pc, #200]	; (32ab8 <ipc_trace_handle+0x120>)
   329f0:	4832      	ldr	r0, [pc, #200]	; (32abc <ipc_trace_handle+0x124>)
   329f2:	f8d5 e000 	ldr.w	lr, [r5]
   329f6:	f8d1 8000 	ldr.w	r8, [r1]
   329fa:	6806      	ldr	r6, [r0, #0]
   329fc:	f8da b008 	ldr.w	fp, [sl, #8]
   32a00:	9501      	str	r5, [sp, #4]
   32a02:	45a3      	cmp	fp, r4
   32a04:	d119      	bne.n	32a3a <ipc_trace_handle+0xa2>
   32a06:	b107      	cbz	r7, 32a0a <ipc_trace_handle+0x72>
   32a08:	6006      	str	r6, [r0, #0]
   32a0a:	f1b9 0f00 	cmp.w	r9, #0
   32a0e:	d001      	beq.n	32a14 <ipc_trace_handle+0x7c>
   32a10:	f8c1 8000 	str.w	r8, [r1]
   32a14:	b112      	cbz	r2, 32a1c <ipc_trace_handle+0x84>
   32a16:	9a01      	ldr	r2, [sp, #4]
   32a18:	f8c2 e000 	str.w	lr, [r2]
   32a1c:	7a1a      	ldrb	r2, [r3, #8]
   32a1e:	2101      	movs	r1, #1
   32a20:	2200      	movs	r2, #0
   32a22:	7219      	strb	r1, [r3, #8]
   32a24:	7a59      	ldrb	r1, [r3, #9]
   32a26:	725a      	strb	r2, [r3, #9]
   32a28:	7a99      	ldrb	r1, [r3, #10]
   32a2a:	729a      	strb	r2, [r3, #10]
   32a2c:	7ada      	ldrb	r2, [r3, #11]
   32a2e:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   32a32:	72da      	strb	r2, [r3, #11]
   32a34:	b003      	add	sp, #12
   32a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32a3a:	1ca5      	adds	r5, r4, #2
   32a3c:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   32a40:	686d      	ldr	r5, [r5, #4]
   32a42:	f895 c000 	ldrb.w	ip, [r5]
   32a46:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   32a4a:	d009      	beq.n	32a60 <ipc_trace_handle+0xc8>
   32a4c:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   32a50:	d00a      	beq.n	32a68 <ipc_trace_handle+0xd0>
   32a52:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   32a56:	bf04      	itt	eq
   32a58:	462e      	moveq	r6, r5
   32a5a:	2701      	moveq	r7, #1
   32a5c:	3401      	adds	r4, #1
   32a5e:	e7d0      	b.n	32a02 <ipc_trace_handle+0x6a>
   32a60:	46a8      	mov	r8, r5
   32a62:	f04f 0901 	mov.w	r9, #1
   32a66:	e7f9      	b.n	32a5c <ipc_trace_handle+0xc4>
   32a68:	46ae      	mov	lr, r5
   32a6a:	2201      	movs	r2, #1
   32a6c:	e7f6      	b.n	32a5c <ipc_trace_handle+0xc4>
   32a6e:	2101      	movs	r1, #1
   32a70:	4a0f      	ldr	r2, [pc, #60]	; (32ab0 <ipc_trace_handle+0x118>)
   32a72:	7011      	strb	r1, [r2, #0]
   32a74:	7a1a      	ldrb	r2, [r3, #8]
   32a76:	2103      	movs	r1, #3
   32a78:	2200      	movs	r2, #0
   32a7a:	e7d2      	b.n	32a22 <ipc_trace_handle+0x8a>
   32a7c:	7a19      	ldrb	r1, [r3, #8]
   32a7e:	2104      	movs	r1, #4
   32a80:	7219      	strb	r1, [r3, #8]
   32a82:	7a59      	ldrb	r1, [r3, #9]
   32a84:	725a      	strb	r2, [r3, #9]
   32a86:	7a99      	ldrb	r1, [r3, #10]
   32a88:	729a      	strb	r2, [r3, #10]
   32a8a:	7ad9      	ldrb	r1, [r3, #11]
   32a8c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   32a90:	72d9      	strb	r1, [r3, #11]
   32a92:	4b07      	ldr	r3, [pc, #28]	; (32ab0 <ipc_trace_handle+0x118>)
   32a94:	701a      	strb	r2, [r3, #0]
   32a96:	b003      	add	sp, #12
   32a98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32a9c:	f7ff bf52 	b.w	32944 <nrf_modem_trace_irq_handler>
   32aa0:	b003      	add	sp, #12
   32aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32aa6:	f7f8 b8b1 	b.w	2ac0c <nrf_modem_os_trace_irq_set>
   32aaa:	bf00      	nop
   32aac:	20010b3c 	.word	0x20010b3c
   32ab0:	20010e0e 	.word	0x20010e0e
   32ab4:	20010b34 	.word	0x20010b34
   32ab8:	20010b30 	.word	0x20010b30
   32abc:	20010b38 	.word	0x20010b38

00032ac0 <rpc_trace_coredump_in_progress>:
   32ac0:	4b01      	ldr	r3, [pc, #4]	; (32ac8 <rpc_trace_coredump_in_progress+0x8>)
   32ac2:	7818      	ldrb	r0, [r3, #0]
   32ac4:	4770      	bx	lr
   32ac6:	bf00      	nop
   32ac8:	20010e0e 	.word	0x20010e0e

00032acc <handle_modem_rpc_msg>:
   32acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32ad0:	4606      	mov	r6, r0
   32ad2:	460f      	mov	r7, r1
   32ad4:	2500      	movs	r5, #0
   32ad6:	f8df 8074 	ldr.w	r8, [pc, #116]	; 32b4c <handle_modem_rpc_msg+0x80>
   32ada:	6833      	ldr	r3, [r6, #0]
   32adc:	42ab      	cmp	r3, r5
   32ade:	d801      	bhi.n	32ae4 <handle_modem_rpc_msg+0x18>
   32ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32ae4:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   32ae8:	68a3      	ldr	r3, [r4, #8]
   32aea:	b1fb      	cbz	r3, 32b2c <handle_modem_rpc_msg+0x60>
   32aec:	6863      	ldr	r3, [r4, #4]
   32aee:	b2db      	uxtb	r3, r3
   32af0:	2b01      	cmp	r3, #1
   32af2:	d11b      	bne.n	32b2c <handle_modem_rpc_msg+0x60>
   32af4:	6862      	ldr	r2, [r4, #4]
   32af6:	f8b8 3000 	ldrh.w	r3, [r8]
   32afa:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   32afe:	d115      	bne.n	32b2c <handle_modem_rpc_msg+0x60>
   32b00:	2f02      	cmp	r7, #2
   32b02:	68a0      	ldr	r0, [r4, #8]
   32b04:	d114      	bne.n	32b30 <handle_modem_rpc_msg+0x64>
   32b06:	f7ff fe2d 	bl	32764 <rpc_handle_data_message>
   32b0a:	2802      	cmp	r0, #2
   32b0c:	d00e      	beq.n	32b2c <handle_modem_rpc_msg+0x60>
   32b0e:	2801      	cmp	r0, #1
   32b10:	d113      	bne.n	32b3a <handle_modem_rpc_msg+0x6e>
   32b12:	6863      	ldr	r3, [r4, #4]
   32b14:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32b18:	f043 0302 	orr.w	r3, r3, #2
   32b1c:	6063      	str	r3, [r4, #4]
   32b1e:	f8b8 3000 	ldrh.w	r3, [r8]
   32b22:	3301      	adds	r3, #1
   32b24:	f8a8 3000 	strh.w	r3, [r8]
   32b28:	f7f8 f860 	bl	2abec <nrf_modem_os_application_irq_set>
   32b2c:	3501      	adds	r5, #1
   32b2e:	e7d4      	b.n	32ada <handle_modem_rpc_msg+0xe>
   32b30:	6801      	ldr	r1, [r0, #0]
   32b32:	0c09      	lsrs	r1, r1, #16
   32b34:	f00c f8c7 	bl	3ecc6 <rpc_handle_ctrl_message>
   32b38:	e7e7      	b.n	32b0a <handle_modem_rpc_msg+0x3e>
   32b3a:	2800      	cmp	r0, #0
   32b3c:	d1ef      	bne.n	32b1e <handle_modem_rpc_msg+0x52>
   32b3e:	6863      	ldr	r3, [r4, #4]
   32b40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32b44:	f043 0303 	orr.w	r3, r3, #3
   32b48:	e7e8      	b.n	32b1c <handle_modem_rpc_msg+0x50>
   32b4a:	bf00      	nop
   32b4c:	20010de8 	.word	0x20010de8

00032b50 <rpc_transport_ipc_msg_alloc>:
   32b50:	b570      	push	{r4, r5, r6, lr}
   32b52:	4616      	mov	r6, r2
   32b54:	2400      	movs	r4, #0
   32b56:	6803      	ldr	r3, [r0, #0]
   32b58:	42a3      	cmp	r3, r4
   32b5a:	d101      	bne.n	32b60 <rpc_transport_ipc_msg_alloc+0x10>
   32b5c:	2300      	movs	r3, #0
   32b5e:	e01c      	b.n	32b9a <rpc_transport_ipc_msg_alloc+0x4a>
   32b60:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   32b64:	6855      	ldr	r5, [r2, #4]
   32b66:	b2ed      	uxtb	r5, r5
   32b68:	2d03      	cmp	r5, #3
   32b6a:	d118      	bne.n	32b9e <rpc_transport_ipc_msg_alloc+0x4e>
   32b6c:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   32b70:	6093      	str	r3, [r2, #8]
   32b72:	6851      	ldr	r1, [r2, #4]
   32b74:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   32b78:	6051      	str	r1, [r2, #4]
   32b7a:	490c      	ldr	r1, [pc, #48]	; (32bac <rpc_transport_ipc_msg_alloc+0x5c>)
   32b7c:	8808      	ldrh	r0, [r1, #0]
   32b7e:	1c44      	adds	r4, r0, #1
   32b80:	800c      	strh	r4, [r1, #0]
   32b82:	6851      	ldr	r1, [r2, #4]
   32b84:	b289      	uxth	r1, r1
   32b86:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   32b8a:	6051      	str	r1, [r2, #4]
   32b8c:	4618      	mov	r0, r3
   32b8e:	2240      	movs	r2, #64	; 0x40
   32b90:	2100      	movs	r1, #0
   32b92:	f00d f9d5 	bl	3ff40 <memset>
   32b96:	4603      	mov	r3, r0
   32b98:	6046      	str	r6, [r0, #4]
   32b9a:	4618      	mov	r0, r3
   32b9c:	bd70      	pop	{r4, r5, r6, pc}
   32b9e:	b915      	cbnz	r5, 32ba6 <rpc_transport_ipc_msg_alloc+0x56>
   32ba0:	6895      	ldr	r5, [r2, #8]
   32ba2:	2d00      	cmp	r5, #0
   32ba4:	d0e2      	beq.n	32b6c <rpc_transport_ipc_msg_alloc+0x1c>
   32ba6:	3401      	adds	r4, #1
   32ba8:	e7d6      	b.n	32b58 <rpc_transport_ipc_msg_alloc+0x8>
   32baa:	bf00      	nop
   32bac:	20010dea 	.word	0x20010dea

00032bb0 <rpc_transport_ipc_data_msg_send>:
   32bb0:	b508      	push	{r3, lr}
   32bb2:	4b0b      	ldr	r3, [pc, #44]	; (32be0 <rpc_transport_ipc_data_msg_send+0x30>)
   32bb4:	681b      	ldr	r3, [r3, #0]
   32bb6:	1ac0      	subs	r0, r0, r3
   32bb8:	4b0a      	ldr	r3, [pc, #40]	; (32be4 <rpc_transport_ipc_data_msg_send+0x34>)
   32bba:	f3c0 1089 	ubfx	r0, r0, #6, #10
   32bbe:	681b      	ldr	r3, [r3, #0]
   32bc0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   32bc4:	6843      	ldr	r3, [r0, #4]
   32bc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32bca:	f043 0301 	orr.w	r3, r3, #1
   32bce:	6043      	str	r3, [r0, #4]
   32bd0:	2003      	movs	r0, #3
   32bd2:	f00a fedd 	bl	3d990 <nrf_modem_os_busywait>
   32bd6:	2201      	movs	r2, #1
   32bd8:	4b03      	ldr	r3, [pc, #12]	; (32be8 <rpc_transport_ipc_data_msg_send+0x38>)
   32bda:	601a      	str	r2, [r3, #0]
   32bdc:	bd08      	pop	{r3, pc}
   32bde:	bf00      	nop
   32be0:	20010b5c 	.word	0x20010b5c
   32be4:	20010b60 	.word	0x20010b60
   32be8:	4002a00c 	.word	0x4002a00c

00032bec <rpc_transport_ipc_ctrl_msg_send>:
   32bec:	b508      	push	{r3, lr}
   32bee:	4b0b      	ldr	r3, [pc, #44]	; (32c1c <rpc_transport_ipc_ctrl_msg_send+0x30>)
   32bf0:	681b      	ldr	r3, [r3, #0]
   32bf2:	1ac0      	subs	r0, r0, r3
   32bf4:	4b0a      	ldr	r3, [pc, #40]	; (32c20 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   32bf6:	f3c0 1089 	ubfx	r0, r0, #6, #10
   32bfa:	681b      	ldr	r3, [r3, #0]
   32bfc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   32c00:	6843      	ldr	r3, [r0, #4]
   32c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32c06:	f043 0301 	orr.w	r3, r3, #1
   32c0a:	6043      	str	r3, [r0, #4]
   32c0c:	2003      	movs	r0, #3
   32c0e:	f00a febf 	bl	3d990 <nrf_modem_os_busywait>
   32c12:	2201      	movs	r2, #1
   32c14:	4b03      	ldr	r3, [pc, #12]	; (32c24 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   32c16:	601a      	str	r2, [r3, #0]
   32c18:	bd08      	pop	{r3, pc}
   32c1a:	bf00      	nop
   32c1c:	20010b54 	.word	0x20010b54
   32c20:	20010b58 	.word	0x20010b58
   32c24:	4002a004 	.word	0x4002a004

00032c28 <rpc_transport_ipc_data_msg_alloc>:
   32c28:	4b05      	ldr	r3, [pc, #20]	; (32c40 <rpc_transport_ipc_data_msg_alloc+0x18>)
   32c2a:	781b      	ldrb	r3, [r3, #0]
   32c2c:	b933      	cbnz	r3, 32c3c <rpc_transport_ipc_data_msg_alloc+0x14>
   32c2e:	4b05      	ldr	r3, [pc, #20]	; (32c44 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   32c30:	2202      	movs	r2, #2
   32c32:	6819      	ldr	r1, [r3, #0]
   32c34:	4b04      	ldr	r3, [pc, #16]	; (32c48 <rpc_transport_ipc_data_msg_alloc+0x20>)
   32c36:	6818      	ldr	r0, [r3, #0]
   32c38:	f7ff bf8a 	b.w	32b50 <rpc_transport_ipc_msg_alloc>
   32c3c:	2000      	movs	r0, #0
   32c3e:	4770      	bx	lr
   32c40:	20010e10 	.word	0x20010e10
   32c44:	20010b5c 	.word	0x20010b5c
   32c48:	20010b60 	.word	0x20010b60

00032c4c <rpc_transport_ipc_ctrl_msg_alloc>:
   32c4c:	230a      	movs	r3, #10
   32c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32c50:	4c0c      	ldr	r4, [pc, #48]	; (32c84 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   32c52:	4d0d      	ldr	r5, [pc, #52]	; (32c88 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   32c54:	9301      	str	r3, [sp, #4]
   32c56:	2201      	movs	r2, #1
   32c58:	6821      	ldr	r1, [r4, #0]
   32c5a:	6828      	ldr	r0, [r5, #0]
   32c5c:	f7ff ff78 	bl	32b50 <rpc_transport_ipc_msg_alloc>
   32c60:	b968      	cbnz	r0, 32c7e <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   32c62:	f00a ff37 	bl	3dad4 <nrf_modem_os_is_in_isr>
   32c66:	b918      	cbnz	r0, 32c70 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   32c68:	a901      	add	r1, sp, #4
   32c6a:	f00a fe95 	bl	3d998 <nrf_modem_os_timedwait>
   32c6e:	e7f2      	b.n	32c56 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   32c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   32c74:	9b01      	ldr	r3, [sp, #4]
   32c76:	4358      	muls	r0, r3
   32c78:	f00a fe8a 	bl	3d990 <nrf_modem_os_busywait>
   32c7c:	e7eb      	b.n	32c56 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   32c7e:	b003      	add	sp, #12
   32c80:	bd30      	pop	{r4, r5, pc}
   32c82:	bf00      	nop
   32c84:	20010b54 	.word	0x20010b54
   32c88:	20010b58 	.word	0x20010b58

00032c8c <rpc_transport_ipc_data_alloc>:
   32c8c:	4b03      	ldr	r3, [pc, #12]	; (32c9c <rpc_transport_ipc_data_alloc+0x10>)
   32c8e:	781b      	ldrb	r3, [r3, #0]
   32c90:	b90b      	cbnz	r3, 32c96 <rpc_transport_ipc_data_alloc+0xa>
   32c92:	f7f7 bfdd 	b.w	2ac50 <nrf_modem_os_shm_tx_alloc>
   32c96:	2000      	movs	r0, #0
   32c98:	4770      	bx	lr
   32c9a:	bf00      	nop
   32c9c:	20010e10 	.word	0x20010e10

00032ca0 <nrf_modem_application_irq_handler>:
   32ca0:	b510      	push	{r4, lr}
   32ca2:	4c06      	ldr	r4, [pc, #24]	; (32cbc <nrf_modem_application_irq_handler+0x1c>)
   32ca4:	f7f7 ffaa 	bl	2abfc <nrf_modem_os_application_irq_clear>
   32ca8:	6820      	ldr	r0, [r4, #0]
   32caa:	2101      	movs	r1, #1
   32cac:	f7ff ff0e 	bl	32acc <handle_modem_rpc_msg>
   32cb0:	6860      	ldr	r0, [r4, #4]
   32cb2:	2102      	movs	r1, #2
   32cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32cb8:	f7ff bf08 	b.w	32acc <handle_modem_rpc_msg>
   32cbc:	20010b48 	.word	0x20010b48

00032cc0 <rpc_transport_ipc_msg_free>:
   32cc0:	2300      	movs	r3, #0
   32cc2:	4911      	ldr	r1, [pc, #68]	; (32d08 <rpc_transport_ipc_msg_free+0x48>)
   32cc4:	b530      	push	{r4, r5, lr}
   32cc6:	680a      	ldr	r2, [r1, #0]
   32cc8:	6814      	ldr	r4, [r2, #0]
   32cca:	42a3      	cmp	r3, r4
   32ccc:	d10b      	bne.n	32ce6 <rpc_transport_ipc_msg_free+0x26>
   32cce:	2300      	movs	r3, #0
   32cd0:	684a      	ldr	r2, [r1, #4]
   32cd2:	6811      	ldr	r1, [r2, #0]
   32cd4:	428b      	cmp	r3, r1
   32cd6:	d015      	beq.n	32d04 <rpc_transport_ipc_msg_free+0x44>
   32cd8:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   32cdc:	68a4      	ldr	r4, [r4, #8]
   32cde:	42a0      	cmp	r0, r4
   32ce0:	d008      	beq.n	32cf4 <rpc_transport_ipc_msg_free+0x34>
   32ce2:	3301      	adds	r3, #1
   32ce4:	e7f6      	b.n	32cd4 <rpc_transport_ipc_msg_free+0x14>
   32ce6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   32cea:	68ad      	ldr	r5, [r5, #8]
   32cec:	42a8      	cmp	r0, r5
   32cee:	d001      	beq.n	32cf4 <rpc_transport_ipc_msg_free+0x34>
   32cf0:	3301      	adds	r3, #1
   32cf2:	e7ea      	b.n	32cca <rpc_transport_ipc_msg_free+0xa>
   32cf4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   32cf8:	685a      	ldr	r2, [r3, #4]
   32cfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   32cfe:	f042 0203 	orr.w	r2, r2, #3
   32d02:	605a      	str	r2, [r3, #4]
   32d04:	bd30      	pop	{r4, r5, pc}
   32d06:	bf00      	nop
   32d08:	20010b48 	.word	0x20010b48

00032d0c <rpc_transport_ipc_init>:
   32d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d10:	2200      	movs	r2, #0
   32d12:	b095      	sub	sp, #84	; 0x54
   32d14:	4605      	mov	r5, r0
   32d16:	494d      	ldr	r1, [pc, #308]	; (32e4c <rpc_transport_ipc_init+0x140>)
   32d18:	7900      	ldrb	r0, [r0, #4]
   32d1a:	f7ff f95d 	bl	31fd8 <nrfx_ipc_init>
   32d1e:	2238      	movs	r2, #56	; 0x38
   32d20:	2100      	movs	r1, #0
   32d22:	a803      	add	r0, sp, #12
   32d24:	f00d f90c 	bl	3ff40 <memset>
   32d28:	2302      	movs	r3, #2
   32d2a:	9304      	str	r3, [sp, #16]
   32d2c:	2308      	movs	r3, #8
   32d2e:	9306      	str	r3, [sp, #24]
   32d30:	2320      	movs	r3, #32
   32d32:	9308      	str	r3, [sp, #32]
   32d34:	2301      	movs	r3, #1
   32d36:	930b      	str	r3, [sp, #44]	; 0x2c
   32d38:	2304      	movs	r3, #4
   32d3a:	930d      	str	r3, [sp, #52]	; 0x34
   32d3c:	2310      	movs	r3, #16
   32d3e:	f04f 0c40 	mov.w	ip, #64	; 0x40
   32d42:	930f      	str	r3, [sp, #60]	; 0x3c
   32d44:	2380      	movs	r3, #128	; 0x80
   32d46:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   32d4a:	23d5      	movs	r3, #213	; 0xd5
   32d4c:	a803      	add	r0, sp, #12
   32d4e:	9313      	str	r3, [sp, #76]	; 0x4c
   32d50:	f7ff f96a 	bl	32028 <nrfx_ipc_config_load>
   32d54:	682b      	ldr	r3, [r5, #0]
   32d56:	2100      	movs	r1, #0
   32d58:	685a      	ldr	r2, [r3, #4]
   32d5a:	6818      	ldr	r0, [r3, #0]
   32d5c:	f00d f8f0 	bl	3ff40 <memset>
   32d60:	682a      	ldr	r2, [r5, #0]
   32d62:	6814      	ldr	r4, [r2, #0]
   32d64:	69d3      	ldr	r3, [r2, #28]
   32d66:	f104 0660 	add.w	r6, r4, #96	; 0x60
   32d6a:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   32d6e:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   32d72:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   32d76:	f104 0920 	add.w	r9, r4, #32
   32d7a:	2b00      	cmp	r3, #0
   32d7c:	d060      	beq.n	32e40 <rpc_transport_ipc_init+0x134>
   32d7e:	f104 0840 	add.w	r8, r4, #64	; 0x40
   32d82:	4933      	ldr	r1, [pc, #204]	; (32e50 <rpc_transport_ipc_init+0x144>)
   32d84:	f8c1 9000 	str.w	r9, [r1]
   32d88:	b13b      	cbz	r3, 32d9a <rpc_transport_ipc_init+0x8e>
   32d8a:	6992      	ldr	r2, [r2, #24]
   32d8c:	4640      	mov	r0, r8
   32d8e:	f8c8 2004 	str.w	r2, [r8, #4]
   32d92:	f8c8 3000 	str.w	r3, [r8]
   32d96:	f7ff fdb9 	bl	3290c <ipc_trace_init>
   32d9a:	6828      	ldr	r0, [r5, #0]
   32d9c:	2300      	movs	r3, #0
   32d9e:	6902      	ldr	r2, [r0, #16]
   32da0:	2101      	movs	r1, #1
   32da2:	6062      	str	r2, [r4, #4]
   32da4:	6942      	ldr	r2, [r0, #20]
   32da6:	70a1      	strb	r1, [r4, #2]
   32da8:	60a2      	str	r2, [r4, #8]
   32daa:	4a2a      	ldr	r2, [pc, #168]	; (32e54 <rpc_transport_ipc_init+0x148>)
   32dac:	7023      	strb	r3, [r4, #0]
   32dae:	6017      	str	r7, [r2, #0]
   32db0:	4a29      	ldr	r2, [pc, #164]	; (32e58 <rpc_transport_ipc_init+0x14c>)
   32db2:	7063      	strb	r3, [r4, #1]
   32db4:	6016      	str	r6, [r2, #0]
   32db6:	2208      	movs	r2, #8
   32db8:	70e3      	strb	r3, [r4, #3]
   32dba:	60e6      	str	r6, [r4, #12]
   32dbc:	6127      	str	r7, [r4, #16]
   32dbe:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   32dc2:	f8c4 9014 	str.w	r9, [r4, #20]
   32dc6:	f8c4 8018 	str.w	r8, [r4, #24]
   32dca:	707b      	strb	r3, [r7, #1]
   32dcc:	70bb      	strb	r3, [r7, #2]
   32dce:	70fb      	strb	r3, [r7, #3]
   32dd0:	2714      	movs	r7, #20
   32dd2:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   32dd6:	4a21      	ldr	r2, [pc, #132]	; (32e5c <rpc_transport_ipc_init+0x150>)
   32dd8:	4d21      	ldr	r5, [pc, #132]	; (32e60 <rpc_transport_ipc_init+0x154>)
   32dda:	f8c2 b000 	str.w	fp, [r2]
   32dde:	4a21      	ldr	r2, [pc, #132]	; (32e64 <rpc_transport_ipc_init+0x158>)
   32de0:	7073      	strb	r3, [r6, #1]
   32de2:	f8c2 a000 	str.w	sl, [r2]
   32de6:	4a20      	ldr	r2, [pc, #128]	; (32e68 <rpc_transport_ipc_init+0x15c>)
   32de8:	70b3      	strb	r3, [r6, #2]
   32dea:	70f3      	strb	r3, [r6, #3]
   32dec:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   32df0:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   32df4:	4c1d      	ldr	r4, [pc, #116]	; (32e6c <rpc_transport_ipc_init+0x160>)
   32df6:	7029      	strb	r1, [r5, #0]
   32df8:	491d      	ldr	r1, [pc, #116]	; (32e70 <rpc_transport_ipc_init+0x164>)
   32dfa:	6023      	str	r3, [r4, #0]
   32dfc:	9302      	str	r3, [sp, #8]
   32dfe:	600b      	str	r3, [r1, #0]
   32e00:	680b      	ldr	r3, [r1, #0]
   32e02:	4e1c      	ldr	r6, [pc, #112]	; (32e74 <rpc_transport_ipc_init+0x168>)
   32e04:	9302      	str	r3, [sp, #8]
   32e06:	9b02      	ldr	r3, [sp, #8]
   32e08:	2000      	movs	r0, #0
   32e0a:	a901      	add	r1, sp, #4
   32e0c:	9701      	str	r7, [sp, #4]
   32e0e:	f00a fdc3 	bl	3d998 <nrf_modem_os_timedwait>
   32e12:	9b01      	ldr	r3, [sp, #4]
   32e14:	3b14      	subs	r3, #20
   32e16:	441e      	add	r6, r3
   32e18:	782b      	ldrb	r3, [r5, #0]
   32e1a:	2b01      	cmp	r3, #1
   32e1c:	d104      	bne.n	32e28 <rpc_transport_ipc_init+0x11c>
   32e1e:	2e00      	cmp	r6, #0
   32e20:	d1f2      	bne.n	32e08 <rpc_transport_ipc_init+0xfc>
   32e22:	f06f 0373 	mvn.w	r3, #115	; 0x73
   32e26:	6023      	str	r3, [r4, #0]
   32e28:	6824      	ldr	r4, [r4, #0]
   32e2a:	b95c      	cbnz	r4, 32e44 <rpc_transport_ipc_init+0x138>
   32e2c:	4b12      	ldr	r3, [pc, #72]	; (32e78 <rpc_transport_ipc_init+0x16c>)
   32e2e:	701c      	strb	r4, [r3, #0]
   32e30:	4b12      	ldr	r3, [pc, #72]	; (32e7c <rpc_transport_ipc_init+0x170>)
   32e32:	801c      	strh	r4, [r3, #0]
   32e34:	4b12      	ldr	r3, [pc, #72]	; (32e80 <rpc_transport_ipc_init+0x174>)
   32e36:	801c      	strh	r4, [r3, #0]
   32e38:	4620      	mov	r0, r4
   32e3a:	b015      	add	sp, #84	; 0x54
   32e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32e40:	4698      	mov	r8, r3
   32e42:	e79e      	b.n	32d82 <rpc_transport_ipc_init+0x76>
   32e44:	f7ff f936 	bl	320b4 <nrfx_ipc_uninit>
   32e48:	e7f6      	b.n	32e38 <rpc_transport_ipc_init+0x12c>
   32e4a:	bf00      	nop
   32e4c:	00032e85 	.word	0x00032e85
   32e50:	20010b50 	.word	0x20010b50
   32e54:	20010b60 	.word	0x20010b60
   32e58:	20010b58 	.word	0x20010b58
   32e5c:	20010b5c 	.word	0x20010b5c
   32e60:	20010e0f 	.word	0x20010e0f
   32e64:	20010b54 	.word	0x20010b54
   32e68:	4002a000 	.word	0x4002a000
   32e6c:	20010b44 	.word	0x20010b44
   32e70:	40005610 	.word	0x40005610
   32e74:	000249f0 	.word	0x000249f0
   32e78:	20010e10 	.word	0x20010e10
   32e7c:	20010dea 	.word	0x20010dea
   32e80:	20010de8 	.word	0x20010de8

00032e84 <ipc_irq_handler>:
   32e84:	b570      	push	{r4, r5, r6, lr}
   32e86:	4604      	mov	r4, r0
   32e88:	0620      	lsls	r0, r4, #24
   32e8a:	d50c      	bpl.n	32ea6 <ipc_irq_handler+0x22>
   32e8c:	f7ff fd84 	bl	32998 <ipc_trace_handle>
   32e90:	f7ff fe16 	bl	32ac0 <rpc_trace_coredump_in_progress>
   32e94:	b138      	cbz	r0, 32ea6 <ipc_irq_handler+0x22>
   32e96:	22e0      	movs	r2, #224	; 0xe0
   32e98:	4b3e      	ldr	r3, [pc, #248]	; (32f94 <ipc_irq_handler+0x110>)
   32e9a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   32e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   32ea2:	605a      	str	r2, [r3, #4]
   32ea4:	bd70      	pop	{r4, r5, r6, pc}
   32ea6:	07e1      	lsls	r1, r4, #31
   32ea8:	d548      	bpl.n	32f3c <ipc_irq_handler+0xb8>
   32eaa:	f248 0202 	movw	r2, #32770	; 0x8002
   32eae:	4b3a      	ldr	r3, [pc, #232]	; (32f98 <ipc_irq_handler+0x114>)
   32eb0:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   32eb4:	4293      	cmp	r3, r2
   32eb6:	d035      	beq.n	32f24 <ipc_irq_handler+0xa0>
   32eb8:	d81b      	bhi.n	32ef2 <ipc_irq_handler+0x6e>
   32eba:	f243 0232 	movw	r2, #12338	; 0x3032
   32ebe:	4293      	cmp	r3, r2
   32ec0:	d036      	beq.n	32f30 <ipc_irq_handler+0xac>
   32ec2:	d80b      	bhi.n	32edc <ipc_irq_handler+0x58>
   32ec4:	3b01      	subs	r3, #1
   32ec6:	2b01      	cmp	r3, #1
   32ec8:	d8ec      	bhi.n	32ea4 <ipc_irq_handler+0x20>
   32eca:	2203      	movs	r2, #3
   32ecc:	200e      	movs	r0, #14
   32ece:	4b33      	ldr	r3, [pc, #204]	; (32f9c <ipc_irq_handler+0x118>)
   32ed0:	701a      	strb	r2, [r3, #0]
   32ed2:	4b33      	ldr	r3, [pc, #204]	; (32fa0 <ipc_irq_handler+0x11c>)
   32ed4:	6018      	str	r0, [r3, #0]
   32ed6:	f00c fc7b 	bl	3f7d0 <rpc_transport_ipc_fault_handler>
   32eda:	e7e3      	b.n	32ea4 <ipc_irq_handler+0x20>
   32edc:	f248 0201 	movw	r2, #32769	; 0x8001
   32ee0:	4293      	cmp	r3, r2
   32ee2:	d1df      	bne.n	32ea4 <ipc_irq_handler+0x20>
   32ee4:	2203      	movs	r2, #3
   32ee6:	4b2d      	ldr	r3, [pc, #180]	; (32f9c <ipc_irq_handler+0x118>)
   32ee8:	701a      	strb	r2, [r3, #0]
   32eea:	2216      	movs	r2, #22
   32eec:	4b2c      	ldr	r3, [pc, #176]	; (32fa0 <ipc_irq_handler+0x11c>)
   32eee:	601a      	str	r2, [r3, #0]
   32ef0:	e7d8      	b.n	32ea4 <ipc_irq_handler+0x20>
   32ef2:	4a2c      	ldr	r2, [pc, #176]	; (32fa4 <ipc_irq_handler+0x120>)
   32ef4:	4293      	cmp	r3, r2
   32ef6:	d80c      	bhi.n	32f12 <ipc_irq_handler+0x8e>
   32ef8:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   32efc:	d80c      	bhi.n	32f18 <ipc_irq_handler+0x94>
   32efe:	f248 0203 	movw	r2, #32771	; 0x8003
   32f02:	4293      	cmp	r3, r2
   32f04:	d1ce      	bne.n	32ea4 <ipc_irq_handler+0x20>
   32f06:	2203      	movs	r2, #3
   32f08:	4b24      	ldr	r3, [pc, #144]	; (32f9c <ipc_irq_handler+0x118>)
   32f0a:	701a      	strb	r2, [r3, #0]
   32f0c:	220c      	movs	r2, #12
   32f0e:	4b24      	ldr	r3, [pc, #144]	; (32fa0 <ipc_irq_handler+0x11c>)
   32f10:	e7ed      	b.n	32eee <ipc_irq_handler+0x6a>
   32f12:	4a25      	ldr	r2, [pc, #148]	; (32fa8 <ipc_irq_handler+0x124>)
   32f14:	4293      	cmp	r3, r2
   32f16:	d1c5      	bne.n	32ea4 <ipc_irq_handler+0x20>
   32f18:	2103      	movs	r1, #3
   32f1a:	4a20      	ldr	r2, [pc, #128]	; (32f9c <ipc_irq_handler+0x118>)
   32f1c:	7011      	strb	r1, [r2, #0]
   32f1e:	4a20      	ldr	r2, [pc, #128]	; (32fa0 <ipc_irq_handler+0x11c>)
   32f20:	6013      	str	r3, [r2, #0]
   32f22:	e7bf      	b.n	32ea4 <ipc_irq_handler+0x20>
   32f24:	2203      	movs	r2, #3
   32f26:	4b1d      	ldr	r3, [pc, #116]	; (32f9c <ipc_irq_handler+0x118>)
   32f28:	701a      	strb	r2, [r3, #0]
   32f2a:	225f      	movs	r2, #95	; 0x5f
   32f2c:	4b1c      	ldr	r3, [pc, #112]	; (32fa0 <ipc_irq_handler+0x11c>)
   32f2e:	e7de      	b.n	32eee <ipc_irq_handler+0x6a>
   32f30:	2203      	movs	r2, #3
   32f32:	4b1a      	ldr	r3, [pc, #104]	; (32f9c <ipc_irq_handler+0x118>)
   32f34:	701a      	strb	r2, [r3, #0]
   32f36:	2205      	movs	r2, #5
   32f38:	4b19      	ldr	r3, [pc, #100]	; (32fa0 <ipc_irq_handler+0x11c>)
   32f3a:	e7d8      	b.n	32eee <ipc_irq_handler+0x6a>
   32f3c:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   32f40:	d003      	beq.n	32f4a <ipc_irq_handler+0xc6>
   32f42:	2202      	movs	r2, #2
   32f44:	4b15      	ldr	r3, [pc, #84]	; (32f9c <ipc_irq_handler+0x118>)
   32f46:	701a      	strb	r2, [r3, #0]
   32f48:	e7ac      	b.n	32ea4 <ipc_irq_handler+0x20>
   32f4a:	0762      	lsls	r2, r4, #29
   32f4c:	d505      	bpl.n	32f5a <ipc_irq_handler+0xd6>
   32f4e:	4b13      	ldr	r3, [pc, #76]	; (32f9c <ipc_irq_handler+0x118>)
   32f50:	781a      	ldrb	r2, [r3, #0]
   32f52:	461e      	mov	r6, r3
   32f54:	b93a      	cbnz	r2, 32f66 <ipc_irq_handler+0xe2>
   32f56:	f7f7 fe49 	bl	2abec <nrf_modem_os_application_irq_set>
   32f5a:	06e3      	lsls	r3, r4, #27
   32f5c:	d5a2      	bpl.n	32ea4 <ipc_irq_handler+0x20>
   32f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   32f62:	f7f7 be43 	b.w	2abec <nrf_modem_os_application_irq_set>
   32f66:	2a01      	cmp	r2, #1
   32f68:	d1f7      	bne.n	32f5a <ipc_irq_handler+0xd6>
   32f6a:	4a10      	ldr	r2, [pc, #64]	; (32fac <ipc_irq_handler+0x128>)
   32f6c:	4810      	ldr	r0, [pc, #64]	; (32fb0 <ipc_irq_handler+0x12c>)
   32f6e:	6812      	ldr	r2, [r2, #0]
   32f70:	6891      	ldr	r1, [r2, #8]
   32f72:	6041      	str	r1, [r0, #4]
   32f74:	6852      	ldr	r2, [r2, #4]
   32f76:	6002      	str	r2, [r0, #0]
   32f78:	b121      	cbz	r1, 32f84 <ipc_irq_handler+0x100>
   32f7a:	b11a      	cbz	r2, 32f84 <ipc_irq_handler+0x100>
   32f7c:	6809      	ldr	r1, [r1, #0]
   32f7e:	b109      	cbz	r1, 32f84 <ipc_irq_handler+0x100>
   32f80:	6812      	ldr	r2, [r2, #0]
   32f82:	b92a      	cbnz	r2, 32f90 <ipc_irq_handler+0x10c>
   32f84:	2303      	movs	r3, #3
   32f86:	2205      	movs	r2, #5
   32f88:	7033      	strb	r3, [r6, #0]
   32f8a:	4b05      	ldr	r3, [pc, #20]	; (32fa0 <ipc_irq_handler+0x11c>)
   32f8c:	601a      	str	r2, [r3, #0]
   32f8e:	e7e4      	b.n	32f5a <ipc_irq_handler+0xd6>
   32f90:	701d      	strb	r5, [r3, #0]
   32f92:	e7e2      	b.n	32f5a <ipc_irq_handler+0xd6>
   32f94:	e000e100 	.word	0xe000e100
   32f98:	4002a000 	.word	0x4002a000
   32f9c:	20010e0f 	.word	0x20010e0f
   32fa0:	20010b44 	.word	0x20010b44
   32fa4:	04400004 	.word	0x04400004
   32fa8:	05500001 	.word	0x05500001
   32fac:	20010b50 	.word	0x20010b50
   32fb0:	20010b48 	.word	0x20010b48

00032fb4 <interface_init>:
   32fb4:	b508      	push	{r3, lr}
   32fb6:	f44f 72b0 	mov.w	r2, #352	; 0x160
   32fba:	2100      	movs	r1, #0
   32fbc:	4802      	ldr	r0, [pc, #8]	; (32fc8 <interface_init+0x14>)
   32fbe:	f00c ffbf 	bl	3ff40 <memset>
   32fc2:	2000      	movs	r0, #0
   32fc4:	bd08      	pop	{r3, pc}
   32fc6:	bf00      	nop
   32fc8:	20010b64 	.word	0x20010b64

00032fcc <interface_socket_allocate>:
   32fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32fce:	4606      	mov	r6, r0
   32fd0:	2400      	movs	r4, #0
   32fd2:	272c      	movs	r7, #44	; 0x2c
   32fd4:	4b0f      	ldr	r3, [pc, #60]	; (33014 <interface_socket_allocate+0x48>)
   32fd6:	fb07 f004 	mul.w	r0, r7, r4
   32fda:	181d      	adds	r5, r3, r0
   32fdc:	5818      	ldr	r0, [r3, r0]
   32fde:	b988      	cbnz	r0, 33004 <interface_socket_allocate+0x38>
   32fe0:	f04f 37ff 	mov.w	r7, #4294967295
   32fe4:	2301      	movs	r3, #1
   32fe6:	4628      	mov	r0, r5
   32fe8:	61af      	str	r7, [r5, #24]
   32fea:	602b      	str	r3, [r5, #0]
   32fec:	f00b fede 	bl	3edac <packet_handler_alloc_and_init>
   32ff0:	b168      	cbz	r0, 3300e <interface_socket_allocate+0x42>
   32ff2:	4628      	mov	r0, r5
   32ff4:	f00b fef1 	bl	3edda <socket_free>
   32ff8:	200c      	movs	r0, #12
   32ffa:	f00a fd65 	bl	3dac8 <nrf_modem_os_errno_set>
   32ffe:	f04f 34ff 	mov.w	r4, #4294967295
   33002:	e005      	b.n	33010 <interface_socket_allocate+0x44>
   33004:	3401      	adds	r4, #1
   33006:	2c08      	cmp	r4, #8
   33008:	d1e5      	bne.n	32fd6 <interface_socket_allocate+0xa>
   3300a:	2069      	movs	r0, #105	; 0x69
   3300c:	e7f5      	b.n	32ffa <interface_socket_allocate+0x2e>
   3300e:	6035      	str	r5, [r6, #0]
   33010:	4620      	mov	r0, r4
   33012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33014:	20010b64 	.word	0x20010b64

00033018 <interface_socket_free>:
   33018:	2807      	cmp	r0, #7
   3301a:	d805      	bhi.n	33028 <interface_socket_free+0x10>
   3301c:	222c      	movs	r2, #44	; 0x2c
   3301e:	4b03      	ldr	r3, [pc, #12]	; (3302c <interface_socket_free+0x14>)
   33020:	fb02 3000 	mla	r0, r2, r0, r3
   33024:	f00b bed9 	b.w	3edda <socket_free>
   33028:	4770      	bx	lr
   3302a:	bf00      	nop
   3302c:	20010b64 	.word	0x20010b64

00033030 <interface_socket_packet_handler_update>:
   33030:	2807      	cmp	r0, #7
   33032:	b570      	push	{r4, r5, r6, lr}
   33034:	d812      	bhi.n	3305c <interface_socket_packet_handler_update+0x2c>
   33036:	232c      	movs	r3, #44	; 0x2c
   33038:	4358      	muls	r0, r3
   3303a:	4c09      	ldr	r4, [pc, #36]	; (33060 <interface_socket_packet_handler_update+0x30>)
   3303c:	5823      	ldr	r3, [r4, r0]
   3303e:	1825      	adds	r5, r4, r0
   33040:	b163      	cbz	r3, 3305c <interface_socket_packet_handler_update+0x2c>
   33042:	4628      	mov	r0, r5
   33044:	69ee      	ldr	r6, [r5, #28]
   33046:	f00b feb1 	bl	3edac <packet_handler_alloc_and_init>
   3304a:	4604      	mov	r4, r0
   3304c:	b920      	cbnz	r0, 33058 <interface_socket_packet_handler_update+0x28>
   3304e:	4630      	mov	r0, r6
   33050:	f00c fba0 	bl	3f794 <packet_handler_delete>
   33054:	4620      	mov	r0, r4
   33056:	bd70      	pop	{r4, r5, r6, pc}
   33058:	61ee      	str	r6, [r5, #28]
   3305a:	e7fb      	b.n	33054 <interface_socket_packet_handler_update+0x24>
   3305c:	2402      	movs	r4, #2
   3305e:	e7f9      	b.n	33054 <interface_socket_packet_handler_update+0x24>
   33060:	20010b64 	.word	0x20010b64

00033064 <interface_socket_wait>:
   33064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33068:	4615      	mov	r5, r2
   3306a:	222c      	movs	r2, #44	; 0x2c
   3306c:	4350      	muls	r0, r2
   3306e:	461e      	mov	r6, r3
   33070:	4b0e      	ldr	r3, [pc, #56]	; (330ac <interface_socket_wait+0x48>)
   33072:	460c      	mov	r4, r1
   33074:	181f      	adds	r7, r3, r0
   33076:	581b      	ldr	r3, [r3, r0]
   33078:	402b      	ands	r3, r5
   3307a:	428b      	cmp	r3, r1
   3307c:	d102      	bne.n	33084 <interface_socket_wait+0x20>
   3307e:	2000      	movs	r0, #0
   33080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33084:	687b      	ldr	r3, [r7, #4]
   33086:	2b00      	cmp	r3, #0
   33088:	d1f9      	bne.n	3307e <interface_socket_wait+0x1a>
   3308a:	46b8      	mov	r8, r7
   3308c:	f8d8 3000 	ldr.w	r3, [r8]
   33090:	402b      	ands	r3, r5
   33092:	42a3      	cmp	r3, r4
   33094:	d0f3      	beq.n	3307e <interface_socket_wait+0x1a>
   33096:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3309a:	2b00      	cmp	r3, #0
   3309c:	d1ef      	bne.n	3307e <interface_socket_wait+0x1a>
   3309e:	4631      	mov	r1, r6
   330a0:	4638      	mov	r0, r7
   330a2:	f00a fc79 	bl	3d998 <nrf_modem_os_timedwait>
   330a6:	2800      	cmp	r0, #0
   330a8:	d0f0      	beq.n	3308c <interface_socket_wait+0x28>
   330aa:	e7e9      	b.n	33080 <interface_socket_wait+0x1c>
   330ac:	20010b64 	.word	0x20010b64

000330b0 <interface_sockets_aux_state_set>:
   330b0:	4a0d      	ldr	r2, [pc, #52]	; (330e8 <interface_sockets_aux_state_set+0x38>)
   330b2:	b570      	push	{r4, r5, r6, lr}
   330b4:	2300      	movs	r3, #0
   330b6:	4611      	mov	r1, r2
   330b8:	252c      	movs	r5, #44	; 0x2c
   330ba:	fb05 f403 	mul.w	r4, r5, r3
   330be:	590c      	ldr	r4, [r1, r4]
   330c0:	b15c      	cbz	r4, 330da <interface_sockets_aux_state_set+0x2a>
   330c2:	68d4      	ldr	r4, [r2, #12]
   330c4:	f024 0608 	bic.w	r6, r4, #8
   330c8:	2e02      	cmp	r6, #2
   330ca:	d001      	beq.n	330d0 <interface_sockets_aux_state_set+0x20>
   330cc:	2c05      	cmp	r4, #5
   330ce:	d104      	bne.n	330da <interface_sockets_aux_state_set+0x2a>
   330d0:	fb05 f603 	mul.w	r6, r5, r3
   330d4:	598c      	ldr	r4, [r1, r6]
   330d6:	4304      	orrs	r4, r0
   330d8:	518c      	str	r4, [r1, r6]
   330da:	3301      	adds	r3, #1
   330dc:	2b08      	cmp	r3, #8
   330de:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   330e2:	d1ea      	bne.n	330ba <interface_sockets_aux_state_set+0xa>
   330e4:	bd70      	pop	{r4, r5, r6, pc}
   330e6:	bf00      	nop
   330e8:	20010b64 	.word	0x20010b64

000330ec <interface_sockets_aux_state_clear>:
   330ec:	4a0d      	ldr	r2, [pc, #52]	; (33124 <interface_sockets_aux_state_clear+0x38>)
   330ee:	b570      	push	{r4, r5, r6, lr}
   330f0:	2300      	movs	r3, #0
   330f2:	4611      	mov	r1, r2
   330f4:	252c      	movs	r5, #44	; 0x2c
   330f6:	43c0      	mvns	r0, r0
   330f8:	fb05 f403 	mul.w	r4, r5, r3
   330fc:	590c      	ldr	r4, [r1, r4]
   330fe:	b15c      	cbz	r4, 33118 <interface_sockets_aux_state_clear+0x2c>
   33100:	68d4      	ldr	r4, [r2, #12]
   33102:	f024 0608 	bic.w	r6, r4, #8
   33106:	2e02      	cmp	r6, #2
   33108:	d001      	beq.n	3310e <interface_sockets_aux_state_clear+0x22>
   3310a:	2c05      	cmp	r4, #5
   3310c:	d104      	bne.n	33118 <interface_sockets_aux_state_clear+0x2c>
   3310e:	fb05 f603 	mul.w	r6, r5, r3
   33112:	598c      	ldr	r4, [r1, r6]
   33114:	4004      	ands	r4, r0
   33116:	518c      	str	r4, [r1, r6]
   33118:	3301      	adds	r3, #1
   3311a:	2b08      	cmp	r3, #8
   3311c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   33120:	d1ea      	bne.n	330f8 <interface_sockets_aux_state_clear+0xc>
   33122:	bd70      	pop	{r4, r5, r6, pc}
   33124:	20010b64 	.word	0x20010b64

00033128 <interface_from_internal_id_search>:
   33128:	4b0a      	ldr	r3, [pc, #40]	; (33154 <interface_from_internal_id_search+0x2c>)
   3312a:	4602      	mov	r2, r0
   3312c:	b530      	push	{r4, r5, lr}
   3312e:	2000      	movs	r0, #0
   33130:	461c      	mov	r4, r3
   33132:	212c      	movs	r1, #44	; 0x2c
   33134:	fb01 f500 	mul.w	r5, r1, r0
   33138:	5965      	ldr	r5, [r4, r5]
   3313a:	b115      	cbz	r5, 33142 <interface_from_internal_id_search+0x1a>
   3313c:	699d      	ldr	r5, [r3, #24]
   3313e:	4295      	cmp	r5, r2
   33140:	d006      	beq.n	33150 <interface_from_internal_id_search+0x28>
   33142:	3001      	adds	r0, #1
   33144:	2808      	cmp	r0, #8
   33146:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   3314a:	d1f3      	bne.n	33134 <interface_from_internal_id_search+0xc>
   3314c:	f04f 30ff 	mov.w	r0, #4294967295
   33150:	bd30      	pop	{r4, r5, pc}
   33152:	bf00      	nop
   33154:	20010b64 	.word	0x20010b64

00033158 <interface_socket_from_handle_get>:
   33158:	2807      	cmp	r0, #7
   3315a:	d808      	bhi.n	3316e <interface_socket_from_handle_get+0x16>
   3315c:	232c      	movs	r3, #44	; 0x2c
   3315e:	4343      	muls	r3, r0
   33160:	4a04      	ldr	r2, [pc, #16]	; (33174 <interface_socket_from_handle_get+0x1c>)
   33162:	18d0      	adds	r0, r2, r3
   33164:	58d3      	ldr	r3, [r2, r3]
   33166:	2b00      	cmp	r3, #0
   33168:	bf08      	it	eq
   3316a:	2000      	moveq	r0, #0
   3316c:	4770      	bx	lr
   3316e:	2000      	movs	r0, #0
   33170:	4770      	bx	lr
   33172:	bf00      	nop
   33174:	20010b64 	.word	0x20010b64

00033178 <interface_socket_setopt>:
   33178:	2807      	cmp	r0, #7
   3317a:	b538      	push	{r3, r4, r5, lr}
   3317c:	d82c      	bhi.n	331d8 <interface_socket_setopt+0x60>
   3317e:	242c      	movs	r4, #44	; 0x2c
   33180:	4360      	muls	r0, r4
   33182:	4d16      	ldr	r5, [pc, #88]	; (331dc <interface_socket_setopt+0x64>)
   33184:	182c      	adds	r4, r5, r0
   33186:	5828      	ldr	r0, [r5, r0]
   33188:	b330      	cbz	r0, 331d8 <interface_socket_setopt+0x60>
   3318a:	2901      	cmp	r1, #1
   3318c:	d005      	beq.n	3319a <interface_socket_setopt+0x22>
   3318e:	206d      	movs	r0, #109	; 0x6d
   33190:	f00a fc9a 	bl	3dac8 <nrf_modem_os_errno_set>
   33194:	f04f 30ff 	mov.w	r0, #4294967295
   33198:	e01b      	b.n	331d2 <interface_socket_setopt+0x5a>
   3319a:	f1a2 0114 	sub.w	r1, r2, #20
   3319e:	2901      	cmp	r1, #1
   331a0:	d8f5      	bhi.n	3318e <interface_socket_setopt+0x16>
   331a2:	9904      	ldr	r1, [sp, #16]
   331a4:	2908      	cmp	r1, #8
   331a6:	d115      	bne.n	331d4 <interface_socket_setopt+0x5c>
   331a8:	b1a3      	cbz	r3, 331d4 <interface_socket_setopt+0x5c>
   331aa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   331ae:	6858      	ldr	r0, [r3, #4]
   331b0:	2100      	movs	r1, #0
   331b2:	fbb0 f0f5 	udiv	r0, r0, r5
   331b6:	681b      	ldr	r3, [r3, #0]
   331b8:	fbe5 0103 	umlal	r0, r1, r5, r3
   331bc:	2901      	cmp	r1, #1
   331be:	bf08      	it	eq
   331c0:	2800      	cmpeq	r0, #0
   331c2:	d301      	bcc.n	331c8 <interface_socket_setopt+0x50>
   331c4:	2021      	movs	r0, #33	; 0x21
   331c6:	e7e3      	b.n	33190 <interface_socket_setopt+0x18>
   331c8:	2a14      	cmp	r2, #20
   331ca:	bf0c      	ite	eq
   331cc:	6220      	streq	r0, [r4, #32]
   331ce:	6260      	strne	r0, [r4, #36]	; 0x24
   331d0:	2000      	movs	r0, #0
   331d2:	bd38      	pop	{r3, r4, r5, pc}
   331d4:	2016      	movs	r0, #22
   331d6:	e7db      	b.n	33190 <interface_socket_setopt+0x18>
   331d8:	2009      	movs	r0, #9
   331da:	e7d9      	b.n	33190 <interface_socket_setopt+0x18>
   331dc:	20010b64 	.word	0x20010b64

000331e0 <interface_socket_getopt>:
   331e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   331e2:	4606      	mov	r6, r0
   331e4:	2e07      	cmp	r6, #7
   331e6:	4618      	mov	r0, r3
   331e8:	4615      	mov	r5, r2
   331ea:	9b08      	ldr	r3, [sp, #32]
   331ec:	d841      	bhi.n	33272 <interface_socket_getopt+0x92>
   331ee:	242c      	movs	r4, #44	; 0x2c
   331f0:	4374      	muls	r4, r6
   331f2:	4f21      	ldr	r7, [pc, #132]	; (33278 <interface_socket_getopt+0x98>)
   331f4:	593a      	ldr	r2, [r7, r4]
   331f6:	193e      	adds	r6, r7, r4
   331f8:	2a00      	cmp	r2, #0
   331fa:	d03a      	beq.n	33272 <interface_socket_getopt+0x92>
   331fc:	2901      	cmp	r1, #1
   331fe:	d005      	beq.n	3320c <interface_socket_getopt+0x2c>
   33200:	206d      	movs	r0, #109	; 0x6d
   33202:	f00a fc61 	bl	3dac8 <nrf_modem_os_errno_set>
   33206:	f04f 30ff 	mov.w	r0, #4294967295
   3320a:	e012      	b.n	33232 <interface_socket_getopt+0x52>
   3320c:	b100      	cbz	r0, 33210 <interface_socket_getopt+0x30>
   3320e:	b90b      	cbnz	r3, 33214 <interface_socket_getopt+0x34>
   33210:	2016      	movs	r0, #22
   33212:	e7f6      	b.n	33202 <interface_socket_getopt+0x22>
   33214:	2d04      	cmp	r5, #4
   33216:	d10e      	bne.n	33236 <interface_socket_getopt+0x56>
   33218:	681a      	ldr	r2, [r3, #0]
   3321a:	2a00      	cmp	r2, #0
   3321c:	d0f8      	beq.n	33210 <interface_socket_getopt+0x30>
   3321e:	2a04      	cmp	r2, #4
   33220:	bf28      	it	cs
   33222:	2204      	movcs	r2, #4
   33224:	3404      	adds	r4, #4
   33226:	601a      	str	r2, [r3, #0]
   33228:	1939      	adds	r1, r7, r4
   3322a:	f00c fe69 	bl	3ff00 <memcpy>
   3322e:	2000      	movs	r0, #0
   33230:	6070      	str	r0, [r6, #4]
   33232:	b003      	add	sp, #12
   33234:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33236:	f1a5 0214 	sub.w	r2, r5, #20
   3323a:	2a01      	cmp	r2, #1
   3323c:	d8e0      	bhi.n	33200 <interface_socket_getopt+0x20>
   3323e:	681a      	ldr	r2, [r3, #0]
   33240:	2a00      	cmp	r2, #0
   33242:	d0e5      	beq.n	33210 <interface_socket_getopt+0x30>
   33244:	2a08      	cmp	r2, #8
   33246:	bf28      	it	cs
   33248:	2208      	movcs	r2, #8
   3324a:	601a      	str	r2, [r3, #0]
   3324c:	e9d6 4308 	ldrd	r4, r3, [r6, #32]
   33250:	2d14      	cmp	r5, #20
   33252:	bf18      	it	ne
   33254:	461c      	movne	r4, r3
   33256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3325a:	fbb4 f1f3 	udiv	r1, r4, r3
   3325e:	9100      	str	r1, [sp, #0]
   33260:	fb03 4111 	mls	r1, r3, r1, r4
   33264:	434b      	muls	r3, r1
   33266:	4669      	mov	r1, sp
   33268:	9301      	str	r3, [sp, #4]
   3326a:	f00c fe49 	bl	3ff00 <memcpy>
   3326e:	2000      	movs	r0, #0
   33270:	e7df      	b.n	33232 <interface_socket_getopt+0x52>
   33272:	2009      	movs	r0, #9
   33274:	e7c5      	b.n	33202 <interface_socket_getopt+0x22>
   33276:	bf00      	nop
   33278:	20010b64 	.word	0x20010b64

0003327c <interface_socket_fcntl>:
   3327c:	2807      	cmp	r0, #7
   3327e:	b510      	push	{r4, lr}
   33280:	d82c      	bhi.n	332dc <interface_socket_fcntl+0x60>
   33282:	232c      	movs	r3, #44	; 0x2c
   33284:	4343      	muls	r3, r0
   33286:	4c16      	ldr	r4, [pc, #88]	; (332e0 <interface_socket_fcntl+0x64>)
   33288:	58e0      	ldr	r0, [r4, r3]
   3328a:	b338      	cbz	r0, 332dc <interface_socket_fcntl+0x60>
   3328c:	2901      	cmp	r1, #1
   3328e:	d11d      	bne.n	332cc <interface_socket_fcntl+0x50>
   33290:	f012 0001 	ands.w	r0, r2, #1
   33294:	58e2      	ldr	r2, [r4, r3]
   33296:	d004      	beq.n	332a2 <interface_socket_fcntl+0x26>
   33298:	2000      	movs	r0, #0
   3329a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   3329e:	50e2      	str	r2, [r4, r3]
   332a0:	bd10      	pop	{r4, pc}
   332a2:	0092      	lsls	r2, r2, #2
   332a4:	d407      	bmi.n	332b6 <interface_socket_fcntl+0x3a>
   332a6:	58e2      	ldr	r2, [r4, r3]
   332a8:	b292      	uxth	r2, r2
   332aa:	2a0a      	cmp	r2, #10
   332ac:	d003      	beq.n	332b6 <interface_socket_fcntl+0x3a>
   332ae:	58e2      	ldr	r2, [r4, r3]
   332b0:	b292      	uxth	r2, r2
   332b2:	2a0b      	cmp	r2, #11
   332b4:	d105      	bne.n	332c2 <interface_socket_fcntl+0x46>
   332b6:	200b      	movs	r0, #11
   332b8:	f00a fc06 	bl	3dac8 <nrf_modem_os_errno_set>
   332bc:	f04f 30ff 	mov.w	r0, #4294967295
   332c0:	e7ee      	b.n	332a0 <interface_socket_fcntl+0x24>
   332c2:	58e2      	ldr	r2, [r4, r3]
   332c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   332c8:	50e2      	str	r2, [r4, r3]
   332ca:	e7e9      	b.n	332a0 <interface_socket_fcntl+0x24>
   332cc:	2902      	cmp	r1, #2
   332ce:	d103      	bne.n	332d8 <interface_socket_fcntl+0x5c>
   332d0:	58e0      	ldr	r0, [r4, r3]
   332d2:	f3c0 7000 	ubfx	r0, r0, #28, #1
   332d6:	e7e3      	b.n	332a0 <interface_socket_fcntl+0x24>
   332d8:	2016      	movs	r0, #22
   332da:	e7ed      	b.n	332b8 <interface_socket_fcntl+0x3c>
   332dc:	2009      	movs	r0, #9
   332de:	e7eb      	b.n	332b8 <interface_socket_fcntl+0x3c>
   332e0:	20010b64 	.word	0x20010b64

000332e4 <rpc_error_to_nrf_errno>:
   332e4:	286a      	cmp	r0, #106	; 0x6a
   332e6:	bf9a      	itte	ls
   332e8:	4b01      	ldrls	r3, [pc, #4]	; (332f0 <rpc_error_to_nrf_errno+0xc>)
   332ea:	5c18      	ldrbls	r0, [r3, r0]
   332ec:	205f      	movhi	r0, #95	; 0x5f
   332ee:	4770      	bx	lr
   332f0:	00045d56 	.word	0x00045d56

000332f4 <rpc_error_to_nrf_gai_errno>:
   332f4:	2805      	cmp	r0, #5
   332f6:	d013      	beq.n	33320 <rpc_error_to_nrf_gai_errno+0x2c>
   332f8:	d807      	bhi.n	3330a <rpc_error_to_nrf_gai_errno+0x16>
   332fa:	b170      	cbz	r0, 3331a <rpc_error_to_nrf_gai_errno+0x26>
   332fc:	4b0b      	ldr	r3, [pc, #44]	; (3332c <rpc_error_to_nrf_gai_errno+0x38>)
   332fe:	5c1b      	ldrb	r3, [r3, r0]
   33300:	4a0b      	ldr	r2, [pc, #44]	; (33330 <rpc_error_to_nrf_gai_errno+0x3c>)
   33302:	f240 1015 	movw	r0, #277	; 0x115
   33306:	6013      	str	r3, [r2, #0]
   33308:	4770      	bx	lr
   3330a:	2806      	cmp	r0, #6
   3330c:	d00b      	beq.n	33326 <rpc_error_to_nrf_gai_errno+0x32>
   3330e:	280d      	cmp	r0, #13
   33310:	d009      	beq.n	33326 <rpc_error_to_nrf_gai_errno+0x32>
   33312:	286a      	cmp	r0, #106	; 0x6a
   33314:	d9f2      	bls.n	332fc <rpc_error_to_nrf_gai_errno+0x8>
   33316:	235f      	movs	r3, #95	; 0x5f
   33318:	e7f2      	b.n	33300 <rpc_error_to_nrf_gai_errno+0xc>
   3331a:	4b05      	ldr	r3, [pc, #20]	; (33330 <rpc_error_to_nrf_gai_errno+0x3c>)
   3331c:	6018      	str	r0, [r3, #0]
   3331e:	4770      	bx	lr
   33320:	f44f 708a 	mov.w	r0, #276	; 0x114
   33324:	4770      	bx	lr
   33326:	f240 1011 	movw	r0, #273	; 0x111
   3332a:	4770      	bx	lr
   3332c:	00045d56 	.word	0x00045d56
   33330:	20010ccc 	.word	0x20010ccc

00033334 <ip_interface_init>:
   33334:	b510      	push	{r4, lr}
   33336:	2400      	movs	r4, #0
   33338:	4b06      	ldr	r3, [pc, #24]	; (33354 <ip_interface_init+0x20>)
   3333a:	2220      	movs	r2, #32
   3333c:	601c      	str	r4, [r3, #0]
   3333e:	4b06      	ldr	r3, [pc, #24]	; (33358 <ip_interface_init+0x24>)
   33340:	4621      	mov	r1, r4
   33342:	4806      	ldr	r0, [pc, #24]	; (3335c <ip_interface_init+0x28>)
   33344:	601c      	str	r4, [r3, #0]
   33346:	f00c fdfb 	bl	3ff40 <memset>
   3334a:	2201      	movs	r2, #1
   3334c:	4b04      	ldr	r3, [pc, #16]	; (33360 <ip_interface_init+0x2c>)
   3334e:	4620      	mov	r0, r4
   33350:	701a      	strb	r2, [r3, #0]
   33352:	bd10      	pop	{r4, pc}
   33354:	20010cd8 	.word	0x20010cd8
   33358:	20010cd4 	.word	0x20010cd4
   3335c:	20010cdc 	.word	0x20010cdc
   33360:	20010e12 	.word	0x20010e12

00033364 <ip_interface_open>:
   33364:	b5f0      	push	{r4, r5, r6, r7, lr}
   33366:	2302      	movs	r3, #2
   33368:	460d      	mov	r5, r1
   3336a:	4611      	mov	r1, r2
   3336c:	2200      	movs	r2, #0
   3336e:	f04f 34ff 	mov.w	r4, #4294967295
   33372:	b085      	sub	sp, #20
   33374:	e9cd 2301 	strd	r2, r3, [sp, #4]
   33378:	4b35      	ldr	r3, [pc, #212]	; (33450 <ip_interface_open+0xec>)
   3337a:	4606      	mov	r6, r0
   3337c:	781b      	ldrb	r3, [r3, #0]
   3337e:	9403      	str	r4, [sp, #12]
   33380:	b92b      	cbnz	r3, 3338e <ip_interface_open+0x2a>
   33382:	2075      	movs	r0, #117	; 0x75
   33384:	f00a fba0 	bl	3dac8 <nrf_modem_os_errno_set>
   33388:	4620      	mov	r0, r4
   3338a:	b005      	add	sp, #20
   3338c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3338e:	f020 0308 	bic.w	r3, r0, #8
   33392:	2b02      	cmp	r3, #2
   33394:	d003      	beq.n	3339e <ip_interface_open+0x3a>
   33396:	2805      	cmp	r0, #5
   33398:	d001      	beq.n	3339e <ip_interface_open+0x3a>
   3339a:	206a      	movs	r0, #106	; 0x6a
   3339c:	e7f2      	b.n	33384 <ip_interface_open+0x20>
   3339e:	1e6b      	subs	r3, r5, #1
   333a0:	2b02      	cmp	r3, #2
   333a2:	d814      	bhi.n	333ce <ip_interface_open+0x6a>
   333a4:	4628      	mov	r0, r5
   333a6:	aa02      	add	r2, sp, #8
   333a8:	f00b fd48 	bl	3ee3c <protocol_verify>
   333ac:	4607      	mov	r7, r0
   333ae:	2800      	cmp	r0, #0
   333b0:	d14b      	bne.n	3344a <ip_interface_open+0xe6>
   333b2:	4629      	mov	r1, r5
   333b4:	4a27      	ldr	r2, [pc, #156]	; (33454 <ip_interface_open+0xf0>)
   333b6:	a801      	add	r0, sp, #4
   333b8:	f7ff fe08 	bl	32fcc <interface_socket_allocate>
   333bc:	9b01      	ldr	r3, [sp, #4]
   333be:	4604      	mov	r4, r0
   333c0:	b95b      	cbnz	r3, 333da <ip_interface_open+0x76>
   333c2:	2669      	movs	r6, #105	; 0x69
   333c4:	4620      	mov	r0, r4
   333c6:	f7ff fe27 	bl	33018 <interface_socket_free>
   333ca:	4630      	mov	r0, r6
   333cc:	e000      	b.n	333d0 <ip_interface_open+0x6c>
   333ce:	2016      	movs	r0, #22
   333d0:	f00a fb7a 	bl	3dac8 <nrf_modem_os_errno_set>
   333d4:	f04f 34ff 	mov.w	r4, #4294967295
   333d8:	e7d6      	b.n	33388 <ip_interface_open+0x24>
   333da:	9a02      	ldr	r2, [sp, #8]
   333dc:	e9c3 6503 	strd	r6, r5, [r3, #12]
   333e0:	615a      	str	r2, [r3, #20]
   333e2:	f04f 31ff 	mov.w	r1, #4294967295
   333e6:	f247 0201 	movw	r2, #28673	; 0x7001
   333ea:	463b      	mov	r3, r7
   333ec:	f00b fd6e 	bl	3eecc <ip_interface_request_create>
   333f0:	4602      	mov	r2, r0
   333f2:	2800      	cmp	r0, #0
   333f4:	d0e5      	beq.n	333c2 <ip_interface_open+0x5e>
   333f6:	6883      	ldr	r3, [r0, #8]
   333f8:	3e02      	subs	r6, #2
   333fa:	2e08      	cmp	r6, #8
   333fc:	f103 030c 	add.w	r3, r3, #12
   33400:	6083      	str	r3, [r0, #8]
   33402:	bf98      	it	ls
   33404:	4b14      	ldrls	r3, [pc, #80]	; (33458 <ip_interface_open+0xf4>)
   33406:	f247 0101 	movw	r1, #28673	; 0x7001
   3340a:	bf98      	it	ls
   3340c:	579f      	ldrsbls	r7, [r3, r6]
   3340e:	9b02      	ldr	r3, [sp, #8]
   33410:	6147      	str	r7, [r0, #20]
   33412:	61c3      	str	r3, [r0, #28]
   33414:	6185      	str	r5, [r0, #24]
   33416:	2004      	movs	r0, #4
   33418:	f00b fcbc 	bl	3ed94 <rpc_client_request_send>
   3341c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33420:	2102      	movs	r1, #2
   33422:	4620      	mov	r0, r4
   33424:	ab03      	add	r3, sp, #12
   33426:	f00b fd64 	bl	3eef2 <ip_interface_wait>
   3342a:	4606      	mov	r6, r0
   3342c:	2800      	cmp	r0, #0
   3342e:	d1c9      	bne.n	333c4 <ip_interface_open+0x60>
   33430:	3d02      	subs	r5, #2
   33432:	2d01      	cmp	r5, #1
   33434:	d8a8      	bhi.n	33388 <ip_interface_open+0x24>
   33436:	9b01      	ldr	r3, [sp, #4]
   33438:	681a      	ldr	r2, [r3, #0]
   3343a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3343e:	601a      	str	r2, [r3, #0]
   33440:	681a      	ldr	r2, [r3, #0]
   33442:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   33446:	601a      	str	r2, [r3, #0]
   33448:	e79e      	b.n	33388 <ip_interface_open+0x24>
   3344a:	4604      	mov	r4, r0
   3344c:	e79c      	b.n	33388 <ip_interface_open+0x24>
   3344e:	bf00      	nop
   33450:	20010e12 	.word	0x20010e12
   33454:	0003ee25 	.word	0x0003ee25
   33458:	00045d48 	.word	0x00045d48

0003345c <ip_interface_close>:
   3345c:	f04f 33ff 	mov.w	r3, #4294967295
   33460:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33462:	4605      	mov	r5, r0
   33464:	9301      	str	r3, [sp, #4]
   33466:	f7ff fe77 	bl	33158 <interface_socket_from_handle_get>
   3346a:	4604      	mov	r4, r0
   3346c:	b388      	cbz	r0, 334d2 <ip_interface_close+0x76>
   3346e:	f247 0209 	movw	r2, #28681	; 0x7009
   33472:	6981      	ldr	r1, [r0, #24]
   33474:	2300      	movs	r3, #0
   33476:	4628      	mov	r0, r5
   33478:	f00b fd28 	bl	3eecc <ip_interface_request_create>
   3347c:	4602      	mov	r2, r0
   3347e:	b370      	cbz	r0, 334de <__kernel_ram_size+0x6>
   33480:	6823      	ldr	r3, [r4, #0]
   33482:	f247 0109 	movw	r1, #28681	; 0x7009
   33486:	0c1b      	lsrs	r3, r3, #16
   33488:	041b      	lsls	r3, r3, #16
   3348a:	f043 030d 	orr.w	r3, r3, #13
   3348e:	6023      	str	r3, [r4, #0]
   33490:	6823      	ldr	r3, [r4, #0]
   33492:	2004      	movs	r0, #4
   33494:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   33498:	6023      	str	r3, [r4, #0]
   3349a:	6823      	ldr	r3, [r4, #0]
   3349c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   334a0:	6023      	str	r3, [r4, #0]
   334a2:	4c10      	ldr	r4, [pc, #64]	; (334e4 <__kernel_ram_size+0xc>)
   334a4:	f00b fc76 	bl	3ed94 <rpc_client_request_send>
   334a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   334ac:	210e      	movs	r1, #14
   334ae:	4628      	mov	r0, r5
   334b0:	ab01      	add	r3, sp, #4
   334b2:	f00b fd1e 	bl	3eef2 <ip_interface_wait>
   334b6:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   334ba:	b120      	cbz	r0, 334c6 <ip_interface_close+0x6a>
   334bc:	f00b fc71 	bl	3eda2 <rpc_client_message_free>
   334c0:	2300      	movs	r3, #0
   334c2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   334c6:	4628      	mov	r0, r5
   334c8:	f7ff fda6 	bl	33018 <interface_socket_free>
   334cc:	2000      	movs	r0, #0
   334ce:	b003      	add	sp, #12
   334d0:	bd30      	pop	{r4, r5, pc}
   334d2:	2009      	movs	r0, #9
   334d4:	f00a faf8 	bl	3dac8 <nrf_modem_os_errno_set>
   334d8:	f04f 30ff 	mov.w	r0, #4294967295
   334dc:	e7f7      	b.n	334ce <ip_interface_close+0x72>
   334de:	200c      	movs	r0, #12
   334e0:	e7f8      	b.n	334d4 <ip_interface_close+0x78>
   334e2:	bf00      	nop
   334e4:	20010cdc 	.word	0x20010cdc

000334e8 <ip_interface_sendto>:
   334e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   334ec:	2700      	movs	r7, #0
   334ee:	469a      	mov	sl, r3
   334f0:	f04f 36ff 	mov.w	r6, #4294967295
   334f4:	2364      	movs	r3, #100	; 0x64
   334f6:	b089      	sub	sp, #36	; 0x24
   334f8:	4681      	mov	r9, r0
   334fa:	4615      	mov	r5, r2
   334fc:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   33500:	9102      	str	r1, [sp, #8]
   33502:	f8ad 7010 	strh.w	r7, [sp, #16]
   33506:	f8ad 7012 	strh.w	r7, [sp, #18]
   3350a:	9605      	str	r6, [sp, #20]
   3350c:	9307      	str	r3, [sp, #28]
   3350e:	f7ff fe23 	bl	33158 <interface_socket_from_handle_get>
   33512:	4604      	mov	r4, r0
   33514:	b930      	cbnz	r0, 33524 <ip_interface_sendto+0x3c>
   33516:	2009      	movs	r0, #9
   33518:	f00a fad6 	bl	3dac8 <nrf_modem_os_errno_set>
   3351c:	4630      	mov	r0, r6
   3351e:	b009      	add	sp, #36	; 0x24
   33520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33524:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   33528:	dd01      	ble.n	3352e <ip_interface_sendto+0x46>
   3352a:	207a      	movs	r0, #122	; 0x7a
   3352c:	e7f4      	b.n	33518 <ip_interface_sendto+0x30>
   3352e:	f1ba 0f00 	cmp.w	sl, #0
   33532:	d004      	beq.n	3353e <ip_interface_sendto+0x56>
   33534:	f1ba 0f02 	cmp.w	sl, #2
   33538:	d006      	beq.n	33548 <ip_interface_sendto+0x60>
   3353a:	205f      	movs	r0, #95	; 0x5f
   3353c:	e7ec      	b.n	33518 <ip_interface_sendto+0x30>
   3353e:	6807      	ldr	r7, [r0, #0]
   33540:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   33544:	f3c7 7700 	ubfx	r7, r7, #28, #1
   33548:	2d00      	cmp	r5, #0
   3354a:	dd07      	ble.n	3355c <ip_interface_sendto+0x74>
   3354c:	9b02      	ldr	r3, [sp, #8]
   3354e:	b92b      	cbnz	r3, 3355c <ip_interface_sendto+0x74>
   33550:	200e      	movs	r0, #14
   33552:	f00a fab9 	bl	3dac8 <nrf_modem_os_errno_set>
   33556:	f04f 36ff 	mov.w	r6, #4294967295
   3355a:	e7df      	b.n	3351c <ip_interface_sendto+0x34>
   3355c:	6923      	ldr	r3, [r4, #16]
   3355e:	f1bb 0f00 	cmp.w	fp, #0
   33562:	d012      	beq.n	3358a <ip_interface_sendto+0xa2>
   33564:	2b01      	cmp	r3, #1
   33566:	d101      	bne.n	3356c <ip_interface_sendto+0x84>
   33568:	207f      	movs	r0, #127	; 0x7f
   3356a:	e7f2      	b.n	33552 <ip_interface_sendto+0x6a>
   3356c:	68e2      	ldr	r2, [r4, #12]
   3356e:	f8db 3004 	ldr.w	r3, [fp, #4]
   33572:	429a      	cmp	r2, r3
   33574:	d001      	beq.n	3357a <ip_interface_sendto+0x92>
   33576:	206a      	movs	r0, #106	; 0x6a
   33578:	e7eb      	b.n	33552 <ip_interface_sendto+0x6a>
   3357a:	f89b 3000 	ldrb.w	r3, [fp]
   3357e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   33580:	4293      	cmp	r3, r2
   33582:	f000 80c5 	beq.w	33710 <ip_interface_sendto+0x228>
   33586:	2016      	movs	r0, #22
   33588:	e7e3      	b.n	33552 <ip_interface_sendto+0x6a>
   3358a:	2b02      	cmp	r3, #2
   3358c:	d10f      	bne.n	335ae <ip_interface_sendto+0xc6>
   3358e:	6963      	ldr	r3, [r4, #20]
   33590:	2b02      	cmp	r3, #2
   33592:	d103      	bne.n	3359c <ip_interface_sendto+0xb4>
   33594:	6823      	ldr	r3, [r4, #0]
   33596:	b29b      	uxth	r3, r3
   33598:	2b05      	cmp	r3, #5
   3359a:	e005      	b.n	335a8 <ip_interface_sendto+0xc0>
   3359c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   335a0:	d10d      	bne.n	335be <ip_interface_sendto+0xd6>
   335a2:	6823      	ldr	r3, [r4, #0]
   335a4:	b29b      	uxth	r3, r3
   335a6:	2b0c      	cmp	r3, #12
   335a8:	d009      	beq.n	335be <ip_interface_sendto+0xd6>
   335aa:	2080      	movs	r0, #128	; 0x80
   335ac:	e7d1      	b.n	33552 <ip_interface_sendto+0x6a>
   335ae:	2b01      	cmp	r3, #1
   335b0:	d105      	bne.n	335be <ip_interface_sendto+0xd6>
   335b2:	6963      	ldr	r3, [r4, #20]
   335b4:	2b01      	cmp	r3, #1
   335b6:	d0ed      	beq.n	33594 <ip_interface_sendto+0xac>
   335b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   335bc:	e7f0      	b.n	335a0 <ip_interface_sendto+0xb8>
   335be:	f247 0806 	movw	r8, #28678	; 0x7006
   335c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   335c4:	2b00      	cmp	r3, #0
   335c6:	bf08      	it	eq
   335c8:	f04f 33ff 	moveq.w	r3, #4294967295
   335cc:	9306      	str	r3, [sp, #24]
   335ce:	ea48 4309 	orr.w	r3, r8, r9, lsl #16
   335d2:	9303      	str	r3, [sp, #12]
   335d4:	6823      	ldr	r3, [r4, #0]
   335d6:	0319      	lsls	r1, r3, #12
   335d8:	d501      	bpl.n	335de <ip_interface_sendto+0xf6>
   335da:	68a0      	ldr	r0, [r4, #8]
   335dc:	e7b9      	b.n	33552 <ip_interface_sendto+0x6a>
   335de:	6820      	ldr	r0, [r4, #0]
   335e0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
   335e4:	d107      	bne.n	335f6 <ip_interface_sendto+0x10e>
   335e6:	b90f      	cbnz	r7, 335ec <ip_interface_sendto+0x104>
   335e8:	200b      	movs	r0, #11
   335ea:	e7b2      	b.n	33552 <ip_interface_sendto+0x6a>
   335ec:	a906      	add	r1, sp, #24
   335ee:	f00a f9d3 	bl	3d998 <nrf_modem_os_timedwait>
   335f2:	2874      	cmp	r0, #116	; 0x74
   335f4:	d0f8      	beq.n	335e8 <ip_interface_sendto+0x100>
   335f6:	6823      	ldr	r3, [r4, #0]
   335f8:	039a      	lsls	r2, r3, #14
   335fa:	d5eb      	bpl.n	335d4 <ip_interface_sendto+0xec>
   335fc:	4628      	mov	r0, r5
   335fe:	f00b fbc3 	bl	3ed88 <rpc_client_request_alloc>
   33602:	4606      	mov	r6, r0
   33604:	2800      	cmp	r0, #0
   33606:	d133      	bne.n	33670 <ip_interface_sendto+0x188>
   33608:	b927      	cbnz	r7, 33614 <ip_interface_sendto+0x12c>
   3360a:	a907      	add	r1, sp, #28
   3360c:	2000      	movs	r0, #0
   3360e:	f00a f9c3 	bl	3d998 <nrf_modem_os_timedwait>
   33612:	e7e9      	b.n	335e8 <ip_interface_sendto+0x100>
   33614:	a906      	add	r1, sp, #24
   33616:	f00a f9bf 	bl	3d998 <nrf_modem_os_timedwait>
   3361a:	2800      	cmp	r0, #0
   3361c:	d0ee      	beq.n	335fc <ip_interface_sendto+0x114>
   3361e:	e7e3      	b.n	335e8 <ip_interface_sendto+0x100>
   33620:	a905      	add	r1, sp, #20
   33622:	f00a f9b9 	bl	3d998 <nrf_modem_os_timedwait>
   33626:	e05b      	b.n	336e0 <ip_interface_sendto+0x1f8>
   33628:	f00b fbbb 	bl	3eda2 <rpc_client_message_free>
   3362c:	2300      	movs	r3, #0
   3362e:	4a3a      	ldr	r2, [pc, #232]	; (33718 <ip_interface_sendto+0x230>)
   33630:	2e01      	cmp	r6, #1
   33632:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   33636:	d001      	beq.n	3363c <ip_interface_sendto+0x154>
   33638:	2e12      	cmp	r6, #18
   3363a:	d10e      	bne.n	3365a <ip_interface_sendto+0x172>
   3363c:	4b37      	ldr	r3, [pc, #220]	; (3371c <ip_interface_sendto+0x234>)
   3363e:	781b      	ldrb	r3, [r3, #0]
   33640:	b147      	cbz	r7, 33654 <ip_interface_sendto+0x16c>
   33642:	2b00      	cmp	r3, #0
   33644:	d1c6      	bne.n	335d4 <ip_interface_sendto+0xec>
   33646:	2000      	movs	r0, #0
   33648:	a906      	add	r1, sp, #24
   3364a:	f00a f9a5 	bl	3d998 <nrf_modem_os_timedwait>
   3364e:	2800      	cmp	r0, #0
   33650:	d0c0      	beq.n	335d4 <ip_interface_sendto+0xec>
   33652:	e7c9      	b.n	335e8 <ip_interface_sendto+0x100>
   33654:	2b00      	cmp	r3, #0
   33656:	d1c7      	bne.n	335e8 <ip_interface_sendto+0x100>
   33658:	e7d7      	b.n	3360a <ip_interface_sendto+0x122>
   3365a:	2e03      	cmp	r6, #3
   3365c:	d102      	bne.n	33664 <ip_interface_sendto+0x17c>
   3365e:	2f00      	cmp	r7, #0
   33660:	d1f1      	bne.n	33646 <ip_interface_sendto+0x15e>
   33662:	e7d2      	b.n	3360a <ip_interface_sendto+0x122>
   33664:	2e6a      	cmp	r6, #106	; 0x6a
   33666:	bf96      	itet	ls
   33668:	4b2d      	ldrls	r3, [pc, #180]	; (33720 <ip_interface_sendto+0x238>)
   3366a:	205f      	movhi	r0, #95	; 0x5f
   3366c:	5d98      	ldrbls	r0, [r3, r6]
   3366e:	e770      	b.n	33552 <ip_interface_sendto+0x6a>
   33670:	230c      	movs	r3, #12
   33672:	2200      	movs	r2, #0
   33674:	7203      	strb	r3, [r0, #8]
   33676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   33678:	7242      	strb	r2, [r0, #9]
   3367a:	7282      	strb	r2, [r0, #10]
   3367c:	72c2      	strb	r2, [r0, #11]
   3367e:	f8c0 a014 	str.w	sl, [r0, #20]
   33682:	b11b      	cbz	r3, 3368c <ip_interface_sendto+0x1a4>
   33684:	ea4a 0303 	orr.w	r3, sl, r3
   33688:	6173      	str	r3, [r6, #20]
   3368a:	62a2      	str	r2, [r4, #40]	; 0x28
   3368c:	f1bb 0f00 	cmp.w	fp, #0
   33690:	d015      	beq.n	336be <ip_interface_sendto+0x1d6>
   33692:	f106 031c 	add.w	r3, r6, #28
   33696:	9301      	str	r3, [sp, #4]
   33698:	f10d 0312 	add.w	r3, sp, #18
   3369c:	9300      	str	r3, [sp, #0]
   3369e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   336a0:	ab04      	add	r3, sp, #16
   336a2:	4659      	mov	r1, fp
   336a4:	68e0      	ldr	r0, [r4, #12]
   336a6:	f00b fbe7 	bl	3ee78 <ip_addr_parse>
   336aa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   336ae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   336b2:	8332      	strh	r2, [r6, #24]
   336b4:	68b2      	ldr	r2, [r6, #8]
   336b6:	8373      	strh	r3, [r6, #26]
   336b8:	3304      	adds	r3, #4
   336ba:	4413      	add	r3, r2
   336bc:	60b3      	str	r3, [r6, #8]
   336be:	69a3      	ldr	r3, [r4, #24]
   336c0:	6075      	str	r5, [r6, #4]
   336c2:	6133      	str	r3, [r6, #16]
   336c4:	9b03      	ldr	r3, [sp, #12]
   336c6:	60f3      	str	r3, [r6, #12]
   336c8:	9b02      	ldr	r3, [sp, #8]
   336ca:	b123      	cbz	r3, 336d6 <ip_interface_sendto+0x1ee>
   336cc:	462a      	mov	r2, r5
   336ce:	4619      	mov	r1, r3
   336d0:	6830      	ldr	r0, [r6, #0]
   336d2:	f00c fc15 	bl	3ff00 <memcpy>
   336d6:	4632      	mov	r2, r6
   336d8:	4641      	mov	r1, r8
   336da:	2004      	movs	r0, #4
   336dc:	f00b fb5a 	bl	3ed94 <rpc_client_request_send>
   336e0:	4b0d      	ldr	r3, [pc, #52]	; (33718 <ip_interface_sendto+0x230>)
   336e2:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   336e6:	2800      	cmp	r0, #0
   336e8:	d09a      	beq.n	33620 <ip_interface_sendto+0x138>
   336ea:	6946      	ldr	r6, [r0, #20]
   336ec:	2e00      	cmp	r6, #0
   336ee:	d19b      	bne.n	33628 <ip_interface_sendto+0x140>
   336f0:	6823      	ldr	r3, [r4, #0]
   336f2:	011b      	lsls	r3, r3, #4
   336f4:	bf49      	itett	mi
   336f6:	6823      	ldrmi	r3, [r4, #0]
   336f8:	6985      	ldrpl	r5, [r0, #24]
   336fa:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   336fe:	6023      	strmi	r3, [r4, #0]
   33700:	f00b fb4f 	bl	3eda2 <rpc_client_message_free>
   33704:	2300      	movs	r3, #0
   33706:	4a04      	ldr	r2, [pc, #16]	; (33718 <ip_interface_sendto+0x230>)
   33708:	462e      	mov	r6, r5
   3370a:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
   3370e:	e705      	b.n	3351c <ip_interface_sendto+0x34>
   33710:	f247 0807 	movw	r8, #28679	; 0x7007
   33714:	e755      	b.n	335c2 <ip_interface_sendto+0xda>
   33716:	bf00      	nop
   33718:	20010cdc 	.word	0x20010cdc
   3371c:	20010e11 	.word	0x20010e11
   33720:	00045d56 	.word	0x00045d56

00033724 <ip_interface_socketoption_get>:
   33724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33728:	461f      	mov	r7, r3
   3372a:	f04f 33ff 	mov.w	r3, #4294967295
   3372e:	b085      	sub	sp, #20
   33730:	9303      	str	r3, [sp, #12]
   33732:	680b      	ldr	r3, [r1, #0]
   33734:	4606      	mov	r6, r0
   33736:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
   3373a:	025d      	lsls	r5, r3, #9
   3373c:	460c      	mov	r4, r1
   3373e:	4691      	mov	r9, r2
   33740:	d461      	bmi.n	33806 <ip_interface_socketoption_get+0xe2>
   33742:	680b      	ldr	r3, [r1, #0]
   33744:	0219      	lsls	r1, r3, #8
   33746:	d45e      	bmi.n	33806 <ip_interface_socketoption_get+0xe2>
   33748:	6823      	ldr	r3, [r4, #0]
   3374a:	01da      	lsls	r2, r3, #7
   3374c:	d45b      	bmi.n	33806 <ip_interface_socketoption_get+0xe2>
   3374e:	6823      	ldr	r3, [r4, #0]
   33750:	019b      	lsls	r3, r3, #6
   33752:	d458      	bmi.n	33806 <ip_interface_socketoption_get+0xe2>
   33754:	6823      	ldr	r3, [r4, #0]
   33756:	f247 0204 	movw	r2, #28676	; 0x7004
   3375a:	9301      	str	r3, [sp, #4]
   3375c:	6823      	ldr	r3, [r4, #0]
   3375e:	69a1      	ldr	r1, [r4, #24]
   33760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   33764:	6023      	str	r3, [r4, #0]
   33766:	f8d8 3000 	ldr.w	r3, [r8]
   3376a:	f00b fbaf 	bl	3eecc <ip_interface_request_create>
   3376e:	4605      	mov	r5, r0
   33770:	2800      	cmp	r0, #0
   33772:	d045      	beq.n	33800 <ip_interface_socketoption_get+0xdc>
   33774:	6883      	ldr	r3, [r0, #8]
   33776:	4602      	mov	r2, r0
   33778:	3308      	adds	r3, #8
   3377a:	6083      	str	r3, [r0, #8]
   3377c:	f8c0 9014 	str.w	r9, [r0, #20]
   33780:	f247 0104 	movw	r1, #28676	; 0x7004
   33784:	f8d0 9000 	ldr.w	r9, [r0]
   33788:	6187      	str	r7, [r0, #24]
   3378a:	2004      	movs	r0, #4
   3378c:	f00b fb02 	bl	3ed94 <rpc_client_request_send>
   33790:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   33794:	4630      	mov	r0, r6
   33796:	4611      	mov	r1, r2
   33798:	ab03      	add	r3, sp, #12
   3379a:	f00b fbaa 	bl	3eef2 <ip_interface_wait>
   3379e:	4683      	mov	fp, r0
   337a0:	b9b8      	cbnz	r0, 337d2 <ip_interface_socketoption_get+0xae>
   337a2:	4f1a      	ldr	r7, [pc, #104]	; (3380c <ip_interface_socketoption_get+0xe8>)
   337a4:	f8d8 0000 	ldr.w	r0, [r8]
   337a8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   337ac:	b1e9      	cbz	r1, 337ea <ip_interface_socketoption_get+0xc6>
   337ae:	684a      	ldr	r2, [r1, #4]
   337b0:	4282      	cmp	r2, r0
   337b2:	bf28      	it	cs
   337b4:	4602      	movcs	r2, r0
   337b6:	f8c8 2000 	str.w	r2, [r8]
   337ba:	6809      	ldr	r1, [r1, #0]
   337bc:	b191      	cbz	r1, 337e4 <ip_interface_socketoption_get+0xc0>
   337be:	4650      	mov	r0, sl
   337c0:	f00c fb9e 	bl	3ff00 <memcpy>
   337c4:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   337c8:	f00b faeb 	bl	3eda2 <rpc_client_message_free>
   337cc:	2200      	movs	r2, #0
   337ce:	f847 2026 	str.w	r2, [r7, r6, lsl #2]
   337d2:	4648      	mov	r0, r9
   337d4:	f00b fae8 	bl	3eda8 <rpc_client_data_free>
   337d8:	9b01      	ldr	r3, [sp, #4]
   337da:	6023      	str	r3, [r4, #0]
   337dc:	4658      	mov	r0, fp
   337de:	b005      	add	sp, #20
   337e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   337e4:	f04f 0b16 	mov.w	fp, #22
   337e8:	e7ec      	b.n	337c4 <ip_interface_socketoption_get+0xa0>
   337ea:	686a      	ldr	r2, [r5, #4]
   337ec:	4649      	mov	r1, r9
   337ee:	4282      	cmp	r2, r0
   337f0:	bf28      	it	cs
   337f2:	4602      	movcs	r2, r0
   337f4:	4650      	mov	r0, sl
   337f6:	f8c8 2000 	str.w	r2, [r8]
   337fa:	f00c fb81 	bl	3ff00 <memcpy>
   337fe:	e7e8      	b.n	337d2 <ip_interface_socketoption_get+0xae>
   33800:	f04f 0b0c 	mov.w	fp, #12
   33804:	e7e8      	b.n	337d8 <ip_interface_socketoption_get+0xb4>
   33806:	f04f 0b0b 	mov.w	fp, #11
   3380a:	e7e7      	b.n	337dc <ip_interface_socketoption_get+0xb8>
   3380c:	20010cdc 	.word	0x20010cdc

00033810 <ip_interface_bind>:
   33810:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   33814:	f04f 33ff 	mov.w	r3, #4294967295
   33818:	4607      	mov	r7, r0
   3381a:	4690      	mov	r8, r2
   3381c:	460e      	mov	r6, r1
   3381e:	9303      	str	r3, [sp, #12]
   33820:	2900      	cmp	r1, #0
   33822:	d04d      	beq.n	338c0 <ip_interface_bind+0xb0>
   33824:	2a00      	cmp	r2, #0
   33826:	d04b      	beq.n	338c0 <ip_interface_bind+0xb0>
   33828:	f7ff fc96 	bl	33158 <interface_socket_from_handle_get>
   3382c:	4605      	mov	r5, r0
   3382e:	2800      	cmp	r0, #0
   33830:	d048      	beq.n	338c4 <ip_interface_bind+0xb4>
   33832:	6803      	ldr	r3, [r0, #0]
   33834:	b29b      	uxth	r3, r3
   33836:	2b02      	cmp	r3, #2
   33838:	d144      	bne.n	338c4 <ip_interface_bind+0xb4>
   3383a:	6981      	ldr	r1, [r0, #24]
   3383c:	2300      	movs	r3, #0
   3383e:	f247 0205 	movw	r2, #28677	; 0x7005
   33842:	4638      	mov	r0, r7
   33844:	f00b fb42 	bl	3eecc <ip_interface_request_create>
   33848:	4604      	mov	r4, r0
   3384a:	2800      	cmp	r0, #0
   3384c:	d03c      	beq.n	338c8 <ip_interface_bind+0xb8>
   3384e:	6883      	ldr	r3, [r0, #8]
   33850:	4642      	mov	r2, r8
   33852:	3304      	adds	r3, #4
   33854:	6083      	str	r3, [r0, #8]
   33856:	f100 0318 	add.w	r3, r0, #24
   3385a:	9301      	str	r3, [sp, #4]
   3385c:	f10d 030a 	add.w	r3, sp, #10
   33860:	9300      	str	r3, [sp, #0]
   33862:	4631      	mov	r1, r6
   33864:	68e8      	ldr	r0, [r5, #12]
   33866:	ab02      	add	r3, sp, #8
   33868:	f00b fb06 	bl	3ee78 <ip_addr_parse>
   3386c:	bb08      	cbnz	r0, 338b2 <ip_interface_bind+0xa2>
   3386e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   33872:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   33876:	82a3      	strh	r3, [r4, #20]
   33878:	68a3      	ldr	r3, [r4, #8]
   3387a:	4e14      	ldr	r6, [pc, #80]	; (338cc <ip_interface_bind+0xbc>)
   3387c:	4413      	add	r3, r2
   3387e:	60a3      	str	r3, [r4, #8]
   33880:	682b      	ldr	r3, [r5, #0]
   33882:	82e2      	strh	r2, [r4, #22]
   33884:	4033      	ands	r3, r6
   33886:	f043 0303 	orr.w	r3, r3, #3
   3388a:	4622      	mov	r2, r4
   3388c:	f247 0105 	movw	r1, #28677	; 0x7005
   33890:	2004      	movs	r0, #4
   33892:	602b      	str	r3, [r5, #0]
   33894:	f00b fa7e 	bl	3ed94 <rpc_client_request_send>
   33898:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3389c:	2104      	movs	r1, #4
   3389e:	4638      	mov	r0, r7
   338a0:	ab03      	add	r3, sp, #12
   338a2:	f00b fb26 	bl	3eef2 <ip_interface_wait>
   338a6:	b140      	cbz	r0, 338ba <ip_interface_bind+0xaa>
   338a8:	682b      	ldr	r3, [r5, #0]
   338aa:	4033      	ands	r3, r6
   338ac:	f043 0302 	orr.w	r3, r3, #2
   338b0:	602b      	str	r3, [r5, #0]
   338b2:	f00a f909 	bl	3dac8 <nrf_modem_os_errno_set>
   338b6:	f04f 30ff 	mov.w	r0, #4294967295
   338ba:	b004      	add	sp, #16
   338bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   338c0:	2016      	movs	r0, #22
   338c2:	e7f6      	b.n	338b2 <ip_interface_bind+0xa2>
   338c4:	2009      	movs	r0, #9
   338c6:	e7f4      	b.n	338b2 <ip_interface_bind+0xa2>
   338c8:	200c      	movs	r0, #12
   338ca:	e7f2      	b.n	338b2 <ip_interface_bind+0xa2>
   338cc:	ffff0000 	.word	0xffff0000

000338d0 <ip_interface_listen>:
   338d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   338d2:	4605      	mov	r5, r0
   338d4:	f7ff fc40 	bl	33158 <interface_socket_from_handle_get>
   338d8:	4604      	mov	r4, r0
   338da:	2800      	cmp	r0, #0
   338dc:	d03a      	beq.n	33954 <ip_interface_listen+0x84>
   338de:	6803      	ldr	r3, [r0, #0]
   338e0:	b29b      	uxth	r3, r3
   338e2:	2b04      	cmp	r3, #4
   338e4:	d003      	beq.n	338ee <ip_interface_listen+0x1e>
   338e6:	6803      	ldr	r3, [r0, #0]
   338e8:	b29b      	uxth	r3, r3
   338ea:	2b0b      	cmp	r3, #11
   338ec:	d134      	bne.n	33958 <ip_interface_listen+0x88>
   338ee:	2100      	movs	r1, #0
   338f0:	4628      	mov	r0, r5
   338f2:	4a1c      	ldr	r2, [pc, #112]	; (33964 <ip_interface_listen+0x94>)
   338f4:	f7ff fb9c 	bl	33030 <interface_socket_packet_handler_update>
   338f8:	4603      	mov	r3, r0
   338fa:	bb78      	cbnz	r0, 3395c <ip_interface_listen+0x8c>
   338fc:	f247 0208 	movw	r2, #28680	; 0x7008
   33900:	4628      	mov	r0, r5
   33902:	69a1      	ldr	r1, [r4, #24]
   33904:	f00b fae2 	bl	3eecc <ip_interface_request_create>
   33908:	4602      	mov	r2, r0
   3390a:	b348      	cbz	r0, 33960 <ip_interface_listen+0x90>
   3390c:	6883      	ldr	r3, [r0, #8]
   3390e:	4e16      	ldr	r6, [pc, #88]	; (33968 <ip_interface_listen+0x98>)
   33910:	3304      	adds	r3, #4
   33912:	6083      	str	r3, [r0, #8]
   33914:	6823      	ldr	r3, [r4, #0]
   33916:	f247 0108 	movw	r1, #28680	; 0x7008
   3391a:	4033      	ands	r3, r6
   3391c:	f043 0306 	orr.w	r3, r3, #6
   33920:	2004      	movs	r0, #4
   33922:	6023      	str	r3, [r4, #0]
   33924:	f00b fa36 	bl	3ed94 <rpc_client_request_send>
   33928:	f04f 33ff 	mov.w	r3, #4294967295
   3392c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33930:	9301      	str	r3, [sp, #4]
   33932:	2107      	movs	r1, #7
   33934:	4628      	mov	r0, r5
   33936:	ab01      	add	r3, sp, #4
   33938:	f00b fadb 	bl	3eef2 <ip_interface_wait>
   3393c:	b140      	cbz	r0, 33950 <ip_interface_listen+0x80>
   3393e:	6823      	ldr	r3, [r4, #0]
   33940:	4033      	ands	r3, r6
   33942:	f043 0304 	orr.w	r3, r3, #4
   33946:	6023      	str	r3, [r4, #0]
   33948:	f00a f8be 	bl	3dac8 <nrf_modem_os_errno_set>
   3394c:	f04f 30ff 	mov.w	r0, #4294967295
   33950:	b002      	add	sp, #8
   33952:	bd70      	pop	{r4, r5, r6, pc}
   33954:	2009      	movs	r0, #9
   33956:	e7f7      	b.n	33948 <ip_interface_listen+0x78>
   33958:	2016      	movs	r0, #22
   3395a:	e7f5      	b.n	33948 <ip_interface_listen+0x78>
   3395c:	200b      	movs	r0, #11
   3395e:	e7f3      	b.n	33948 <ip_interface_listen+0x78>
   33960:	200c      	movs	r0, #12
   33962:	e7f1      	b.n	33948 <ip_interface_listen+0x78>
   33964:	0003ee25 	.word	0x0003ee25
   33968:	ffff0000 	.word	0xffff0000

0003396c <ip_interface_accept>:
   3396c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33970:	2500      	movs	r5, #0
   33972:	4680      	mov	r8, r0
   33974:	460f      	mov	r7, r1
   33976:	4691      	mov	r9, r2
   33978:	9500      	str	r5, [sp, #0]
   3397a:	f7ff fbed 	bl	33158 <interface_socket_from_handle_get>
   3397e:	4604      	mov	r4, r0
   33980:	2800      	cmp	r0, #0
   33982:	f000 80c7 	beq.w	33b14 <ip_interface_accept+0x1a8>
   33986:	6903      	ldr	r3, [r0, #16]
   33988:	2b01      	cmp	r3, #1
   3398a:	f040 80c6 	bne.w	33b1a <ip_interface_accept+0x1ae>
   3398e:	6803      	ldr	r3, [r0, #0]
   33990:	b29b      	uxth	r3, r3
   33992:	2b07      	cmp	r3, #7
   33994:	f040 80c3 	bne.w	33b1e <ip_interface_accept+0x1b2>
   33998:	f04f 33ff 	mov.w	r3, #4294967295
   3399c:	9301      	str	r3, [sp, #4]
   3399e:	6803      	ldr	r3, [r0, #0]
   339a0:	f013 5a80 	ands.w	sl, r3, #268435456	; 0x10000000
   339a4:	d15c      	bne.n	33a60 <ip_interface_accept+0xf4>
   339a6:	6803      	ldr	r3, [r0, #0]
   339a8:	03db      	lsls	r3, r3, #15
   339aa:	d45d      	bmi.n	33a68 <ip_interface_accept+0xfc>
   339ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   339b0:	4640      	mov	r0, r8
   339b2:	4611      	mov	r1, r2
   339b4:	ab01      	add	r3, sp, #4
   339b6:	f00b fa9c 	bl	3eef2 <ip_interface_wait>
   339ba:	4606      	mov	r6, r0
   339bc:	6825      	ldr	r5, [r4, #0]
   339be:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   339c2:	d053      	beq.n	33a6c <ip_interface_accept+0x100>
   339c4:	4668      	mov	r0, sp
   339c6:	4a58      	ldr	r2, [pc, #352]	; (33b28 <ip_interface_accept+0x1bc>)
   339c8:	6921      	ldr	r1, [r4, #16]
   339ca:	f7ff faff 	bl	32fcc <interface_socket_allocate>
   339ce:	9b00      	ldr	r3, [sp, #0]
   339d0:	4605      	mov	r5, r0
   339d2:	2b00      	cmp	r3, #0
   339d4:	f000 80a5 	beq.w	33b22 <ip_interface_accept+0x1b6>
   339d8:	6962      	ldr	r2, [r4, #20]
   339da:	4640      	mov	r0, r8
   339dc:	615a      	str	r2, [r3, #20]
   339de:	68e2      	ldr	r2, [r4, #12]
   339e0:	69a1      	ldr	r1, [r4, #24]
   339e2:	60da      	str	r2, [r3, #12]
   339e4:	6922      	ldr	r2, [r4, #16]
   339e6:	611a      	str	r2, [r3, #16]
   339e8:	f247 020c 	movw	r2, #28684	; 0x700c
   339ec:	2300      	movs	r3, #0
   339ee:	f00b fa6d 	bl	3eecc <ip_interface_request_create>
   339f2:	4602      	mov	r2, r0
   339f4:	2800      	cmp	r0, #0
   339f6:	f000 8094 	beq.w	33b22 <ip_interface_accept+0x1b6>
   339fa:	6823      	ldr	r3, [r4, #0]
   339fc:	f8df b130 	ldr.w	fp, [pc, #304]	; 33b30 <ip_interface_accept+0x1c4>
   33a00:	f247 010c 	movw	r1, #28684	; 0x700c
   33a04:	ea03 030b 	and.w	r3, r3, fp
   33a08:	f043 0308 	orr.w	r3, r3, #8
   33a0c:	2004      	movs	r0, #4
   33a0e:	6023      	str	r3, [r4, #0]
   33a10:	f00b f9c0 	bl	3ed94 <rpc_client_request_send>
   33a14:	6823      	ldr	r3, [r4, #0]
   33a16:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33a1a:	ea23 030a 	bic.w	r3, r3, sl
   33a1e:	6023      	str	r3, [r4, #0]
   33a20:	2109      	movs	r1, #9
   33a22:	ab01      	add	r3, sp, #4
   33a24:	4640      	mov	r0, r8
   33a26:	f00b fa64 	bl	3eef2 <ip_interface_wait>
   33a2a:	6823      	ldr	r3, [r4, #0]
   33a2c:	4606      	mov	r6, r0
   33a2e:	ea43 030a 	orr.w	r3, r3, sl
   33a32:	6023      	str	r3, [r4, #0]
   33a34:	b1e0      	cbz	r0, 33a70 <ip_interface_accept+0x104>
   33a36:	6823      	ldr	r3, [r4, #0]
   33a38:	ea03 030b 	and.w	r3, r3, fp
   33a3c:	f043 0307 	orr.w	r3, r3, #7
   33a40:	6023      	str	r3, [r4, #0]
   33a42:	6823      	ldr	r3, [r4, #0]
   33a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33a48:	6023      	str	r3, [r4, #0]
   33a4a:	9b00      	ldr	r3, [sp, #0]
   33a4c:	b113      	cbz	r3, 33a54 <ip_interface_accept+0xe8>
   33a4e:	4628      	mov	r0, r5
   33a50:	f7ff fae2 	bl	33018 <interface_socket_free>
   33a54:	4630      	mov	r0, r6
   33a56:	f00a f837 	bl	3dac8 <nrf_modem_os_errno_set>
   33a5a:	f04f 30ff 	mov.w	r0, #4294967295
   33a5e:	e046      	b.n	33aee <ip_interface_accept+0x182>
   33a60:	260b      	movs	r6, #11
   33a62:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
   33a66:	e7a9      	b.n	339bc <ip_interface_accept+0x50>
   33a68:	2616      	movs	r6, #22
   33a6a:	e7a7      	b.n	339bc <ip_interface_accept+0x50>
   33a6c:	2e00      	cmp	r6, #0
   33a6e:	d1ec      	bne.n	33a4a <ip_interface_accept+0xde>
   33a70:	4e2e      	ldr	r6, [pc, #184]	; (33b2c <ip_interface_accept+0x1c0>)
   33a72:	9800      	ldr	r0, [sp, #0]
   33a74:	f856 3028 	ldr.w	r3, [r6, r8, lsl #2]
   33a78:	699a      	ldr	r2, [r3, #24]
   33a7a:	6182      	str	r2, [r0, #24]
   33a7c:	b1c7      	cbz	r7, 33ab0 <ip_interface_accept+0x144>
   33a7e:	68c2      	ldr	r2, [r0, #12]
   33a80:	2a0a      	cmp	r2, #10
   33a82:	d137      	bne.n	33af4 <ip_interface_accept+0x188>
   33a84:	f8d9 1000 	ldr.w	r1, [r9]
   33a88:	2924      	cmp	r1, #36	; 0x24
   33a8a:	d111      	bne.n	33ab0 <ip_interface_accept+0x144>
   33a8c:	7039      	strb	r1, [r7, #0]
   33a8e:	607a      	str	r2, [r7, #4]
   33a90:	7f1a      	ldrb	r2, [r3, #28]
   33a92:	7f59      	ldrb	r1, [r3, #29]
   33a94:	3710      	adds	r7, #16
   33a96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   33a9a:	f827 2c08 	strh.w	r2, [r7, #-8]
   33a9e:	f103 0220 	add.w	r2, r3, #32
   33aa2:	3330      	adds	r3, #48	; 0x30
   33aa4:	f852 1b04 	ldr.w	r1, [r2], #4
   33aa8:	429a      	cmp	r2, r3
   33aaa:	f847 1b04 	str.w	r1, [r7], #4
   33aae:	d1f9      	bne.n	33aa4 <ip_interface_accept+0x138>
   33ab0:	6802      	ldr	r2, [r0, #0]
   33ab2:	491f      	ldr	r1, [pc, #124]	; (33b30 <ip_interface_accept+0x1c4>)
   33ab4:	400a      	ands	r2, r1
   33ab6:	f042 0205 	orr.w	r2, r2, #5
   33aba:	6002      	str	r2, [r0, #0]
   33abc:	6802      	ldr	r2, [r0, #0]
   33abe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   33ac2:	6002      	str	r2, [r0, #0]
   33ac4:	6802      	ldr	r2, [r0, #0]
   33ac6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   33aca:	6002      	str	r2, [r0, #0]
   33acc:	6823      	ldr	r3, [r4, #0]
   33ace:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   33ad2:	400b      	ands	r3, r1
   33ad4:	f043 0307 	orr.w	r3, r3, #7
   33ad8:	6023      	str	r3, [r4, #0]
   33ada:	6823      	ldr	r3, [r4, #0]
   33adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33ae0:	6023      	str	r3, [r4, #0]
   33ae2:	f00b f95e 	bl	3eda2 <rpc_client_message_free>
   33ae6:	2300      	movs	r3, #0
   33ae8:	4628      	mov	r0, r5
   33aea:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   33aee:	b003      	add	sp, #12
   33af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33af4:	2a02      	cmp	r2, #2
   33af6:	d1db      	bne.n	33ab0 <ip_interface_accept+0x144>
   33af8:	f8d9 1000 	ldr.w	r1, [r9]
   33afc:	2910      	cmp	r1, #16
   33afe:	d1d7      	bne.n	33ab0 <ip_interface_accept+0x144>
   33b00:	7039      	strb	r1, [r7, #0]
   33b02:	607a      	str	r2, [r7, #4]
   33b04:	7f1a      	ldrb	r2, [r3, #28]
   33b06:	7f59      	ldrb	r1, [r3, #29]
   33b08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   33b0c:	813a      	strh	r2, [r7, #8]
   33b0e:	6a1b      	ldr	r3, [r3, #32]
   33b10:	60fb      	str	r3, [r7, #12]
   33b12:	e7cd      	b.n	33ab0 <ip_interface_accept+0x144>
   33b14:	2609      	movs	r6, #9
   33b16:	4605      	mov	r5, r0
   33b18:	e797      	b.n	33a4a <ip_interface_accept+0xde>
   33b1a:	265f      	movs	r6, #95	; 0x5f
   33b1c:	e795      	b.n	33a4a <ip_interface_accept+0xde>
   33b1e:	2616      	movs	r6, #22
   33b20:	e793      	b.n	33a4a <ip_interface_accept+0xde>
   33b22:	260c      	movs	r6, #12
   33b24:	e791      	b.n	33a4a <ip_interface_accept+0xde>
   33b26:	bf00      	nop
   33b28:	0003ee25 	.word	0x0003ee25
   33b2c:	20010cdc 	.word	0x20010cdc
   33b30:	ffff0000 	.word	0xffff0000

00033b34 <ip_interface_setopt>:
   33b34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   33b38:	2901      	cmp	r1, #1
   33b3a:	4606      	mov	r6, r0
   33b3c:	4690      	mov	r8, r2
   33b3e:	461d      	mov	r5, r3
   33b40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   33b42:	d008      	beq.n	33b56 <ip_interface_setopt+0x22>
   33b44:	206d      	movs	r0, #109	; 0x6d
   33b46:	f009 ffbf 	bl	3dac8 <nrf_modem_os_errno_set>
   33b4a:	f04f 34ff 	mov.w	r4, #4294967295
   33b4e:	4620      	mov	r0, r4
   33b50:	b004      	add	sp, #16
   33b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33b56:	f7ff faff 	bl	33158 <interface_socket_from_handle_get>
   33b5a:	4604      	mov	r4, r0
   33b5c:	b908      	cbnz	r0, 33b62 <ip_interface_setopt+0x2e>
   33b5e:	2009      	movs	r0, #9
   33b60:	e7f1      	b.n	33b46 <ip_interface_setopt+0x12>
   33b62:	f1a8 0319 	sub.w	r3, r8, #25
   33b66:	2b1e      	cmp	r3, #30
   33b68:	f200 8086 	bhi.w	33c78 <ip_interface_setopt+0x144>
   33b6c:	e8df f003 	tbb	[pc, r3]
   33b70:	84848410 	.word	0x84848410
   33b74:	51493d84 	.word	0x51493d84
   33b78:	84848484 	.word	0x84848484
   33b7c:	59848484 	.word	0x59848484
   33b80:	84848484 	.word	0x84848484
   33b84:	84848484 	.word	0x84848484
   33b88:	73666184 	.word	0x73666184
   33b8c:	7976      	.short	0x7976
   33b8e:	7c          	.byte	0x7c
   33b8f:	00          	.byte	0x00
   33b90:	b90d      	cbnz	r5, 33b96 <ip_interface_setopt+0x62>
   33b92:	200e      	movs	r0, #14
   33b94:	e7d7      	b.n	33b46 <ip_interface_setopt+0x12>
   33b96:	4628      	mov	r0, r5
   33b98:	f7ed fcd0 	bl	2153c <strlen>
   33b9c:	42b8      	cmp	r0, r7
   33b9e:	d1f8      	bne.n	33b92 <ip_interface_setopt+0x5e>
   33ba0:	6823      	ldr	r3, [r4, #0]
   33ba2:	b29b      	uxth	r3, r3
   33ba4:	2b02      	cmp	r3, #2
   33ba6:	d1da      	bne.n	33b5e <ip_interface_setopt+0x2a>
   33ba8:	4628      	mov	r0, r5
   33baa:	4937      	ldr	r1, [pc, #220]	; (33c88 <ip_interface_setopt+0x154>)
   33bac:	f00c fba5 	bl	402fa <strstr>
   33bb0:	b108      	cbz	r0, 33bb6 <ip_interface_setopt+0x82>
   33bb2:	4285      	cmp	r5, r0
   33bb4:	d001      	beq.n	33bba <ip_interface_setopt+0x86>
   33bb6:	2016      	movs	r0, #22
   33bb8:	e7c5      	b.n	33b46 <ip_interface_setopt+0x12>
   33bba:	4833      	ldr	r0, [pc, #204]	; (33c88 <ip_interface_setopt+0x154>)
   33bbc:	f7ed fcbe 	bl	2153c <strlen>
   33bc0:	220a      	movs	r2, #10
   33bc2:	2100      	movs	r1, #0
   33bc4:	4428      	add	r0, r5
   33bc6:	f006 fdcd 	bl	3a764 <strtoul>
   33bca:	2304      	movs	r3, #4
   33bcc:	9301      	str	r3, [sp, #4]
   33bce:	ab03      	add	r3, sp, #12
   33bd0:	4621      	mov	r1, r4
   33bd2:	9003      	str	r0, [sp, #12]
   33bd4:	9300      	str	r3, [sp, #0]
   33bd6:	2208      	movs	r2, #8
   33bd8:	f243 0310 	movw	r3, #12304	; 0x3010
   33bdc:	4630      	mov	r0, r6
   33bde:	f00b fb30 	bl	3f242 <ip_interface_socketoption_send>
   33be2:	4604      	mov	r4, r0
   33be4:	2800      	cmp	r0, #0
   33be6:	d0b2      	beq.n	33b4e <ip_interface_setopt+0x1a>
   33be8:	e7ad      	b.n	33b46 <ip_interface_setopt+0x12>
   33bea:	4602      	mov	r2, r0
   33bec:	4633      	mov	r3, r6
   33bee:	f248 0101 	movw	r1, #32769	; 0x8001
   33bf2:	f44f 7000 	mov.w	r0, #512	; 0x200
   33bf6:	e9cd 5700 	strd	r5, r7, [sp]
   33bfa:	f00b fb6d 	bl	3f2d8 <setopt_check_and_send_int>
   33bfe:	4604      	mov	r4, r0
   33c00:	e7a5      	b.n	33b4e <ip_interface_setopt+0x1a>
   33c02:	4602      	mov	r2, r0
   33c04:	4633      	mov	r3, r6
   33c06:	f244 0110 	movw	r1, #16400	; 0x4010
   33c0a:	2004      	movs	r0, #4
   33c0c:	e9cd 5700 	strd	r5, r7, [sp]
   33c10:	e7f3      	b.n	33bfa <ip_interface_setopt+0xc6>
   33c12:	4602      	mov	r2, r0
   33c14:	4633      	mov	r3, r6
   33c16:	f246 0110 	movw	r1, #24592	; 0x6010
   33c1a:	2006      	movs	r0, #6
   33c1c:	e9cd 5700 	strd	r5, r7, [sp]
   33c20:	e7eb      	b.n	33bfa <ip_interface_setopt+0xc6>
   33c22:	4602      	mov	r2, r0
   33c24:	4633      	mov	r3, r6
   33c26:	f241 0104 	movw	r1, #4100	; 0x1004
   33c2a:	2008      	movs	r0, #8
   33c2c:	e9cd 5700 	strd	r5, r7, [sp]
   33c30:	e7e3      	b.n	33bfa <ip_interface_setopt+0xc6>
   33c32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   33c36:	62a3      	str	r3, [r4, #40]	; 0x28
   33c38:	2400      	movs	r4, #0
   33c3a:	e788      	b.n	33b4e <ip_interface_setopt+0x1a>
   33c3c:	2400      	movs	r4, #0
   33c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   33c42:	4622      	mov	r2, r4
   33c44:	6283      	str	r3, [r0, #40]	; 0x28
   33c46:	4621      	mov	r1, r4
   33c48:	4623      	mov	r3, r4
   33c4a:	4630      	mov	r0, r6
   33c4c:	e9cd 4400 	strd	r4, r4, [sp]
   33c50:	f7ff fc4a 	bl	334e8 <ip_interface_sendto>
   33c54:	e77b      	b.n	33b4e <ip_interface_setopt+0x1a>
   33c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   33c5a:	e7ec      	b.n	33c36 <ip_interface_setopt+0x102>
   33c5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   33c60:	e7e9      	b.n	33c36 <ip_interface_setopt+0x102>
   33c62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   33c66:	e7e6      	b.n	33c36 <ip_interface_setopt+0x102>
   33c68:	4602      	mov	r2, r0
   33c6a:	4633      	mov	r3, r6
   33c6c:	f245 0106 	movw	r1, #20486	; 0x5006
   33c70:	2001      	movs	r0, #1
   33c72:	e9cd 5700 	strd	r5, r7, [sp]
   33c76:	e7c0      	b.n	33bfa <ip_interface_setopt+0xc6>
   33c78:	462b      	mov	r3, r5
   33c7a:	4642      	mov	r2, r8
   33c7c:	2101      	movs	r1, #1
   33c7e:	4630      	mov	r0, r6
   33c80:	9700      	str	r7, [sp, #0]
   33c82:	f7ff fa79 	bl	33178 <interface_socket_setopt>
   33c86:	e7ba      	b.n	33bfe <ip_interface_setopt+0xca>
   33c88:	00045d44 	.word	0x00045d44

00033c8c <ip_interface_getaddrinfo>:
   33c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c90:	b087      	sub	sp, #28
   33c92:	9301      	str	r3, [sp, #4]
   33c94:	4b72      	ldr	r3, [pc, #456]	; (33e60 <ip_interface_getaddrinfo+0x1d4>)
   33c96:	4680      	mov	r8, r0
   33c98:	781b      	ldrb	r3, [r3, #0]
   33c9a:	460f      	mov	r7, r1
   33c9c:	4614      	mov	r4, r2
   33c9e:	b93b      	cbnz	r3, 33cb0 <ip_interface_getaddrinfo+0x24>
   33ca0:	2075      	movs	r0, #117	; 0x75
   33ca2:	f009 ff11 	bl	3dac8 <nrf_modem_os_errno_set>
   33ca6:	f240 1015 	movw	r0, #277	; 0x115
   33caa:	b007      	add	sp, #28
   33cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33cb0:	4d6c      	ldr	r5, [pc, #432]	; (33e64 <ip_interface_getaddrinfo+0x1d8>)
   33cb2:	682e      	ldr	r6, [r5, #0]
   33cb4:	2e00      	cmp	r6, #0
   33cb6:	f040 80d0 	bne.w	33e5a <ip_interface_getaddrinfo+0x1ce>
   33cba:	2301      	movs	r3, #1
   33cbc:	486a      	ldr	r0, [pc, #424]	; (33e68 <ip_interface_getaddrinfo+0x1dc>)
   33cbe:	496b      	ldr	r1, [pc, #428]	; (33e6c <ip_interface_getaddrinfo+0x1e0>)
   33cc0:	4a6b      	ldr	r2, [pc, #428]	; (33e70 <ip_interface_getaddrinfo+0x1e4>)
   33cc2:	602b      	str	r3, [r5, #0]
   33cc4:	6003      	str	r3, [r0, #0]
   33cc6:	4b6b      	ldr	r3, [pc, #428]	; (33e74 <ip_interface_getaddrinfo+0x1e8>)
   33cc8:	468a      	mov	sl, r1
   33cca:	4691      	mov	r9, r2
   33ccc:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 33e84 <ip_interface_getaddrinfo+0x1f8>
   33cd0:	600e      	str	r6, [r1, #0]
   33cd2:	6016      	str	r6, [r2, #0]
   33cd4:	801e      	strh	r6, [r3, #0]
   33cd6:	9002      	str	r0, [sp, #8]
   33cd8:	b194      	cbz	r4, 33d00 <ip_interface_getaddrinfo+0x74>
   33cda:	68e2      	ldr	r2, [r4, #12]
   33cdc:	b182      	cbz	r2, 33d00 <ip_interface_getaddrinfo+0x74>
   33cde:	f8cb 2000 	str.w	r2, [fp]
   33ce2:	b93f      	cbnz	r7, 33cf4 <ip_interface_getaddrinfo+0x68>
   33ce4:	68a0      	ldr	r0, [r4, #8]
   33ce6:	2803      	cmp	r0, #3
   33ce8:	d146      	bne.n	33d78 <ip_interface_getaddrinfo+0xec>
   33cea:	2300      	movs	r3, #0
   33cec:	f44f 7089 	mov.w	r0, #274	; 0x112
   33cf0:	602b      	str	r3, [r5, #0]
   33cf2:	e7da      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33cf4:	6822      	ldr	r2, [r4, #0]
   33cf6:	04d1      	lsls	r1, r2, #19
   33cf8:	d508      	bpl.n	33d0c <ip_interface_getaddrinfo+0x80>
   33cfa:	0552      	lsls	r2, r2, #21
   33cfc:	d406      	bmi.n	33d0c <ip_interface_getaddrinfo+0x80>
   33cfe:	e7f1      	b.n	33ce4 <ip_interface_getaddrinfo+0x58>
   33d00:	2201      	movs	r2, #1
   33d02:	f8cb 2000 	str.w	r2, [fp]
   33d06:	b187      	cbz	r7, 33d2a <ip_interface_getaddrinfo+0x9e>
   33d08:	2c00      	cmp	r4, #0
   33d0a:	d1f3      	bne.n	33cf4 <ip_interface_getaddrinfo+0x68>
   33d0c:	220a      	movs	r2, #10
   33d0e:	2100      	movs	r1, #0
   33d10:	4638      	mov	r0, r7
   33d12:	f006 fc03 	bl	3a51c <strtol>
   33d16:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   33d1a:	1e41      	subs	r1, r0, #1
   33d1c:	4291      	cmp	r1, r2
   33d1e:	4b55      	ldr	r3, [pc, #340]	; (33e74 <ip_interface_getaddrinfo+0x1e8>)
   33d20:	d8e3      	bhi.n	33cea <ip_interface_getaddrinfo+0x5e>
   33d22:	0202      	lsls	r2, r0, #8
   33d24:	ea42 2020 	orr.w	r0, r2, r0, asr #8
   33d28:	8018      	strh	r0, [r3, #0]
   33d2a:	2c00      	cmp	r4, #0
   33d2c:	d1da      	bne.n	33ce4 <ip_interface_getaddrinfo+0x58>
   33d2e:	f1b8 0f00 	cmp.w	r8, #0
   33d32:	d003      	beq.n	33d3c <ip_interface_getaddrinfo+0xb0>
   33d34:	4640      	mov	r0, r8
   33d36:	f7ed fc01 	bl	2153c <strlen>
   33d3a:	4606      	mov	r6, r0
   33d3c:	2f00      	cmp	r7, #0
   33d3e:	d03c      	beq.n	33dba <ip_interface_getaddrinfo+0x12e>
   33d40:	2c00      	cmp	r4, #0
   33d42:	d03a      	beq.n	33dba <ip_interface_getaddrinfo+0x12e>
   33d44:	6823      	ldr	r3, [r4, #0]
   33d46:	04db      	lsls	r3, r3, #19
   33d48:	d537      	bpl.n	33dba <ip_interface_getaddrinfo+0x12e>
   33d4a:	213a      	movs	r1, #58	; 0x3a
   33d4c:	4638      	mov	r0, r7
   33d4e:	f00c fa79 	bl	40244 <strchr>
   33d52:	bb48      	cbnz	r0, 33da8 <ip_interface_getaddrinfo+0x11c>
   33d54:	4601      	mov	r1, r0
   33d56:	220a      	movs	r2, #10
   33d58:	4638      	mov	r0, r7
   33d5a:	f006 fd03 	bl	3a764 <strtoul>
   33d5e:	4601      	mov	r1, r0
   33d60:	4633      	mov	r3, r6
   33d62:	f247 020d 	movw	r2, #28685	; 0x700d
   33d66:	4608      	mov	r0, r1
   33d68:	f00b f8b0 	bl	3eecc <ip_interface_request_create>
   33d6c:	4607      	mov	r7, r0
   33d6e:	bb38      	cbnz	r0, 33dc0 <ip_interface_getaddrinfo+0x134>
   33d70:	6028      	str	r0, [r5, #0]
   33d72:	f240 100f 	movw	r0, #271	; 0x10f
   33d76:	e798      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33d78:	6863      	ldr	r3, [r4, #4]
   33d7a:	2b0a      	cmp	r3, #10
   33d7c:	d007      	beq.n	33d8e <ip_interface_getaddrinfo+0x102>
   33d7e:	f033 0302 	bics.w	r3, r3, #2
   33d82:	d004      	beq.n	33d8e <ip_interface_getaddrinfo+0x102>
   33d84:	2300      	movs	r3, #0
   33d86:	f44f 7087 	mov.w	r0, #270	; 0x10e
   33d8a:	602b      	str	r3, [r5, #0]
   33d8c:	e78d      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33d8e:	2301      	movs	r3, #1
   33d90:	68e1      	ldr	r1, [r4, #12]
   33d92:	aa05      	add	r2, sp, #20
   33d94:	9305      	str	r3, [sp, #20]
   33d96:	f00b f851 	bl	3ee3c <protocol_verify>
   33d9a:	2800      	cmp	r0, #0
   33d9c:	d0c7      	beq.n	33d2e <ip_interface_getaddrinfo+0xa2>
   33d9e:	2300      	movs	r3, #0
   33da0:	f240 1013 	movw	r0, #275	; 0x113
   33da4:	602b      	str	r3, [r5, #0]
   33da6:	e780      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33da8:	9003      	str	r0, [sp, #12]
   33daa:	4833      	ldr	r0, [pc, #204]	; (33e78 <ip_interface_getaddrinfo+0x1ec>)
   33dac:	f7ed fbc6 	bl	2153c <strlen>
   33db0:	9b03      	ldr	r3, [sp, #12]
   33db2:	220a      	movs	r2, #10
   33db4:	2100      	movs	r1, #0
   33db6:	4418      	add	r0, r3
   33db8:	e7cf      	b.n	33d5a <ip_interface_getaddrinfo+0xce>
   33dba:	f04f 31ff 	mov.w	r1, #4294967295
   33dbe:	e7cf      	b.n	33d60 <ip_interface_getaddrinfo+0xd4>
   33dc0:	2c00      	cmp	r4, #0
   33dc2:	d03a      	beq.n	33e3a <ip_interface_getaddrinfo+0x1ae>
   33dc4:	68a3      	ldr	r3, [r4, #8]
   33dc6:	9a02      	ldr	r2, [sp, #8]
   33dc8:	2b02      	cmp	r3, #2
   33dca:	6013      	str	r3, [r2, #0]
   33dcc:	6862      	ldr	r2, [r4, #4]
   33dce:	bf08      	it	eq
   33dd0:	f8cb 3000 	streq.w	r3, [fp]
   33dd4:	3a02      	subs	r2, #2
   33dd6:	2a08      	cmp	r2, #8
   33dd8:	bf8e      	itee	hi
   33dda:	2200      	movhi	r2, #0
   33ddc:	4927      	ldrls	r1, [pc, #156]	; (33e7c <ip_interface_getaddrinfo+0x1f0>)
   33dde:	568a      	ldrsbls	r2, [r1, r2]
   33de0:	6182      	str	r2, [r0, #24]
   33de2:	68e2      	ldr	r2, [r4, #12]
   33de4:	61c3      	str	r3, [r0, #28]
   33de6:	2300      	movs	r3, #0
   33de8:	6202      	str	r2, [r0, #32]
   33dea:	7503      	strb	r3, [r0, #20]
   33dec:	7543      	strb	r3, [r0, #21]
   33dee:	7583      	strb	r3, [r0, #22]
   33df0:	75c3      	strb	r3, [r0, #23]
   33df2:	68bb      	ldr	r3, [r7, #8]
   33df4:	3310      	adds	r3, #16
   33df6:	60bb      	str	r3, [r7, #8]
   33df8:	f1b8 0f00 	cmp.w	r8, #0
   33dfc:	d005      	beq.n	33e0a <ip_interface_getaddrinfo+0x17e>
   33dfe:	6838      	ldr	r0, [r7, #0]
   33e00:	b118      	cbz	r0, 33e0a <ip_interface_getaddrinfo+0x17e>
   33e02:	4632      	mov	r2, r6
   33e04:	4641      	mov	r1, r8
   33e06:	f00c f87b 	bl	3ff00 <memcpy>
   33e0a:	463a      	mov	r2, r7
   33e0c:	f247 010d 	movw	r1, #28685	; 0x700d
   33e10:	2004      	movs	r0, #4
   33e12:	f00a ffbf 	bl	3ed94 <rpc_client_request_send>
   33e16:	f04f 33ff 	mov.w	r3, #4294967295
   33e1a:	9305      	str	r3, [sp, #20]
   33e1c:	4638      	mov	r0, r7
   33e1e:	a905      	add	r1, sp, #20
   33e20:	f009 fdba 	bl	3d998 <nrf_modem_os_timedwait>
   33e24:	682b      	ldr	r3, [r5, #0]
   33e26:	2b01      	cmp	r3, #1
   33e28:	d0f8      	beq.n	33e1c <ip_interface_getaddrinfo+0x190>
   33e2a:	f8d9 0000 	ldr.w	r0, [r9]
   33e2e:	b950      	cbnz	r0, 33e46 <ip_interface_getaddrinfo+0x1ba>
   33e30:	f8da 3000 	ldr.w	r3, [sl]
   33e34:	9a01      	ldr	r2, [sp, #4]
   33e36:	6013      	str	r3, [r2, #0]
   33e38:	e737      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33e3a:	2210      	movs	r2, #16
   33e3c:	4621      	mov	r1, r4
   33e3e:	3014      	adds	r0, #20
   33e40:	f00c f87e 	bl	3ff40 <memset>
   33e44:	e7d5      	b.n	33df2 <ip_interface_getaddrinfo+0x166>
   33e46:	2300      	movs	r3, #0
   33e48:	602b      	str	r3, [r5, #0]
   33e4a:	4b0d      	ldr	r3, [pc, #52]	; (33e80 <ip_interface_getaddrinfo+0x1f4>)
   33e4c:	6818      	ldr	r0, [r3, #0]
   33e4e:	b108      	cbz	r0, 33e54 <ip_interface_getaddrinfo+0x1c8>
   33e50:	f009 fe3a 	bl	3dac8 <nrf_modem_os_errno_set>
   33e54:	f8d9 0000 	ldr.w	r0, [r9]
   33e58:	e727      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33e5a:	f44f 708a 	mov.w	r0, #276	; 0x114
   33e5e:	e724      	b.n	33caa <ip_interface_getaddrinfo+0x1e>
   33e60:	20010e12 	.word	0x20010e12
   33e64:	20010cd4 	.word	0x20010cd4
   33e68:	20010cc8 	.word	0x20010cc8
   33e6c:	20010cd8 	.word	0x20010cd8
   33e70:	20010cd0 	.word	0x20010cd0
   33e74:	20010dec 	.word	0x20010dec
   33e78:	00045dfc 	.word	0x00045dfc
   33e7c:	00045d48 	.word	0x00045d48
   33e80:	20010ccc 	.word	0x20010ccc
   33e84:	20010cc4 	.word	0x20010cc4

00033e88 <ip_interface_freeaddrinfo>:
   33e88:	b538      	push	{r3, r4, r5, lr}
   33e8a:	4d0a      	ldr	r5, [pc, #40]	; (33eb4 <ip_interface_freeaddrinfo+0x2c>)
   33e8c:	4604      	mov	r4, r0
   33e8e:	682a      	ldr	r2, [r5, #0]
   33e90:	2a02      	cmp	r2, #2
   33e92:	d10e      	bne.n	33eb2 <ip_interface_freeaddrinfo+0x2a>
   33e94:	b148      	cbz	r0, 33eaa <ip_interface_freeaddrinfo+0x22>
   33e96:	6940      	ldr	r0, [r0, #20]
   33e98:	f7f6 fed2 	bl	2ac40 <nrf_modem_os_free>
   33e9c:	69a0      	ldr	r0, [r4, #24]
   33e9e:	b108      	cbz	r0, 33ea4 <ip_interface_freeaddrinfo+0x1c>
   33ea0:	f7f6 fece 	bl	2ac40 <nrf_modem_os_free>
   33ea4:	4620      	mov	r0, r4
   33ea6:	f7f6 fecb 	bl	2ac40 <nrf_modem_os_free>
   33eaa:	2300      	movs	r3, #0
   33eac:	4a02      	ldr	r2, [pc, #8]	; (33eb8 <ip_interface_freeaddrinfo+0x30>)
   33eae:	602b      	str	r3, [r5, #0]
   33eb0:	6013      	str	r3, [r2, #0]
   33eb2:	bd38      	pop	{r3, r4, r5, pc}
   33eb4:	20010cd4 	.word	0x20010cd4
   33eb8:	20010cd0 	.word	0x20010cd0

00033ebc <rpc_ip_event_handler>:
   33ebc:	f248 030f 	movw	r3, #32783	; 0x800f
   33ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ec4:	4299      	cmp	r1, r3
   33ec6:	4604      	mov	r4, r0
   33ec8:	460e      	mov	r6, r1
   33eca:	b089      	sub	sp, #36	; 0x24
   33ecc:	f000 80a4 	beq.w	34018 <rpc_ip_event_handler+0x15c>
   33ed0:	f249 0304 	movw	r3, #36868	; 0x9004
   33ed4:	4299      	cmp	r1, r3
   33ed6:	f000 80ab 	beq.w	34030 <rpc_ip_event_handler+0x174>
   33eda:	f248 030d 	movw	r3, #32781	; 0x800d
   33ede:	4299      	cmp	r1, r3
   33ee0:	f040 80b8 	bne.w	34054 <rpc_ip_event_handler+0x198>
   33ee4:	4bbc      	ldr	r3, [pc, #752]	; (341d8 <rpc_ip_event_handler+0x31c>)
   33ee6:	681a      	ldr	r2, [r3, #0]
   33ee8:	9303      	str	r3, [sp, #12]
   33eea:	2a01      	cmp	r2, #1
   33eec:	d12d      	bne.n	33f4a <rpc_ip_event_handler+0x8e>
   33eee:	6940      	ldr	r0, [r0, #20]
   33ef0:	2800      	cmp	r0, #0
   33ef2:	f040 808c 	bne.w	3400e <rpc_ip_event_handler+0x152>
   33ef6:	f8d4 a018 	ldr.w	sl, [r4, #24]
   33efa:	f8d4 8000 	ldr.w	r8, [r4]
   33efe:	ea4f 134a 	mov.w	r3, sl, lsl #5
   33f02:	4618      	mov	r0, r3
   33f04:	9301      	str	r3, [sp, #4]
   33f06:	f7f6 fe91 	bl	2ac2c <nrf_modem_os_alloc>
   33f0a:	4607      	mov	r7, r0
   33f0c:	b310      	cbz	r0, 33f54 <rpc_ip_event_handler+0x98>
   33f0e:	2024      	movs	r0, #36	; 0x24
   33f10:	fb00 f00a 	mul.w	r0, r0, sl
   33f14:	f7f6 fe8a 	bl	2ac2c <nrf_modem_os_alloc>
   33f18:	4605      	mov	r5, r0
   33f1a:	b1e8      	cbz	r0, 33f58 <rpc_ip_event_handler+0x9c>
   33f1c:	2604      	movs	r6, #4
   33f1e:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   33f22:	f107 0920 	add.w	r9, r7, #32
   33f26:	9302      	str	r3, [sp, #8]
   33f28:	9b02      	ldr	r3, [sp, #8]
   33f2a:	42ab      	cmp	r3, r5
   33f2c:	d118      	bne.n	33f60 <rpc_ip_event_handler+0xa4>
   33f2e:	f1ba 0f00 	cmp.w	sl, #0
   33f32:	d005      	beq.n	33f40 <rpc_ip_event_handler+0x84>
   33f34:	9b01      	ldr	r3, [sp, #4]
   33f36:	443b      	add	r3, r7
   33f38:	4699      	mov	r9, r3
   33f3a:	2300      	movs	r3, #0
   33f3c:	f849 3c04 	str.w	r3, [r9, #-4]
   33f40:	4ba6      	ldr	r3, [pc, #664]	; (341dc <rpc_ip_event_handler+0x320>)
   33f42:	601f      	str	r7, [r3, #0]
   33f44:	2302      	movs	r3, #2
   33f46:	9a03      	ldr	r2, [sp, #12]
   33f48:	6013      	str	r3, [r2, #0]
   33f4a:	6820      	ldr	r0, [r4, #0]
   33f4c:	2800      	cmp	r0, #0
   33f4e:	f040 81c7 	bne.w	342e0 <rpc_ip_event_handler+0x424>
   33f52:	e1c7      	b.n	342e4 <rpc_ip_event_handler+0x428>
   33f54:	f7f6 fe74 	bl	2ac40 <nrf_modem_os_free>
   33f58:	220c      	movs	r2, #12
   33f5a:	4ba1      	ldr	r3, [pc, #644]	; (341e0 <rpc_ip_event_handler+0x324>)
   33f5c:	601a      	str	r2, [r3, #0]
   33f5e:	e7ef      	b.n	33f40 <rpc_ip_event_handler+0x84>
   33f60:	f858 2006 	ldr.w	r2, [r8, r6]
   33f64:	eb08 0106 	add.w	r1, r8, r6
   33f68:	f849 2c20 	str.w	r2, [r9, #-32]
   33f6c:	eb08 0206 	add.w	r2, r8, r6
   33f70:	6852      	ldr	r2, [r2, #4]
   33f72:	f8b1 b012 	ldrh.w	fp, [r1, #18]
   33f76:	3a01      	subs	r2, #1
   33f78:	2a04      	cmp	r2, #4
   33f7a:	bf8c      	ite	hi
   33f7c:	2200      	movhi	r2, #0
   33f7e:	4b99      	ldrls	r3, [pc, #612]	; (341e4 <rpc_ip_event_handler+0x328>)
   33f80:	f106 0614 	add.w	r6, r6, #20
   33f84:	bf98      	it	ls
   33f86:	569a      	ldrsbls	r2, [r3, r2]
   33f88:	4b97      	ldr	r3, [pc, #604]	; (341e8 <rpc_ip_event_handler+0x32c>)
   33f8a:	f849 2c1c 	str.w	r2, [r9, #-28]
   33f8e:	681a      	ldr	r2, [r3, #0]
   33f90:	4b96      	ldr	r3, [pc, #600]	; (341ec <rpc_ip_event_handler+0x330>)
   33f92:	f849 2c18 	str.w	r2, [r9, #-24]
   33f96:	681a      	ldr	r2, [r3, #0]
   33f98:	f849 2c14 	str.w	r2, [r9, #-20]
   33f9c:	8a0a      	ldrh	r2, [r1, #16]
   33f9e:	4994      	ldr	r1, [pc, #592]	; (341f0 <rpc_ip_event_handler+0x334>)
   33fa0:	2a04      	cmp	r2, #4
   33fa2:	8808      	ldrh	r0, [r1, #0]
   33fa4:	f849 2c10 	str.w	r2, [r9, #-16]
   33fa8:	f849 5c0c 	str.w	r5, [r9, #-12]
   33fac:	eb08 0106 	add.w	r1, r8, r6
   33fb0:	d121      	bne.n	33ff6 <rpc_ip_event_handler+0x13a>
   33fb2:	2202      	movs	r2, #2
   33fb4:	606a      	str	r2, [r5, #4]
   33fb6:	2210      	movs	r2, #16
   33fb8:	8128      	strh	r0, [r5, #8]
   33fba:	702a      	strb	r2, [r5, #0]
   33fbc:	680a      	ldr	r2, [r1, #0]
   33fbe:	60ea      	str	r2, [r5, #12]
   33fc0:	f859 2c10 	ldr.w	r2, [r9, #-16]
   33fc4:	f10b 0001 	add.w	r0, fp, #1
   33fc8:	4416      	add	r6, r2
   33fca:	f7f6 fe2f 	bl	2ac2c <nrf_modem_os_alloc>
   33fce:	f849 0c08 	str.w	r0, [r9, #-8]
   33fd2:	b148      	cbz	r0, 33fe8 <rpc_ip_event_handler+0x12c>
   33fd4:	465a      	mov	r2, fp
   33fd6:	eb08 0106 	add.w	r1, r8, r6
   33fda:	f00b ff91 	bl	3ff00 <memcpy>
   33fde:	2100      	movs	r1, #0
   33fe0:	f859 2c08 	ldr.w	r2, [r9, #-8]
   33fe4:	f802 100b 	strb.w	r1, [r2, fp]
   33fe8:	f849 9c04 	str.w	r9, [r9, #-4]
   33fec:	445e      	add	r6, fp
   33fee:	f109 0920 	add.w	r9, r9, #32
   33ff2:	3508      	adds	r5, #8
   33ff4:	e798      	b.n	33f28 <rpc_ip_event_handler+0x6c>
   33ff6:	230a      	movs	r3, #10
   33ff8:	f04f 0c24 	mov.w	ip, #36	; 0x24
   33ffc:	8128      	strh	r0, [r5, #8]
   33ffe:	606b      	str	r3, [r5, #4]
   34000:	f885 c000 	strb.w	ip, [r5]
   34004:	f105 0010 	add.w	r0, r5, #16
   34008:	f00b ff7a 	bl	3ff00 <memcpy>
   3400c:	e7d8      	b.n	33fc0 <rpc_ip_event_handler+0x104>
   3400e:	f7ff f971 	bl	332f4 <rpc_error_to_nrf_gai_errno>
   34012:	4b73      	ldr	r3, [pc, #460]	; (341e0 <rpc_ip_event_handler+0x324>)
   34014:	6018      	str	r0, [r3, #0]
   34016:	e795      	b.n	33f44 <rpc_ip_event_handler+0x88>
   34018:	6943      	ldr	r3, [r0, #20]
   3401a:	2b6a      	cmp	r3, #106	; 0x6a
   3401c:	bf8e      	itee	hi
   3401e:	235f      	movhi	r3, #95	; 0x5f
   34020:	4a74      	ldrls	r2, [pc, #464]	; (341f4 <rpc_ip_event_handler+0x338>)
   34022:	5cd3      	ldrbls	r3, [r2, r3]
   34024:	4a74      	ldr	r2, [pc, #464]	; (341f8 <rpc_ip_event_handler+0x33c>)
   34026:	6013      	str	r3, [r2, #0]
   34028:	4b74      	ldr	r3, [pc, #464]	; (341fc <rpc_ip_event_handler+0x340>)
   3402a:	2201      	movs	r2, #1
   3402c:	701a      	strb	r2, [r3, #0]
   3402e:	e159      	b.n	342e4 <rpc_ip_event_handler+0x428>
   34030:	6903      	ldr	r3, [r0, #16]
   34032:	2b03      	cmp	r3, #3
   34034:	d807      	bhi.n	34046 <rpc_ip_event_handler+0x18a>
   34036:	e8df f003 	tbb	[pc, r3]
   3403a:	0802      	.short	0x0802
   3403c:	0802      	.short	0x0802
   3403e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   34042:	f7ff f835 	bl	330b0 <interface_sockets_aux_state_set>
   34046:	4b6e      	ldr	r3, [pc, #440]	; (34200 <rpc_ip_event_handler+0x344>)
   34048:	e7ef      	b.n	3402a <rpc_ip_event_handler+0x16e>
   3404a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   3404e:	f7ff f84d 	bl	330ec <interface_sockets_aux_state_clear>
   34052:	e7f8      	b.n	34046 <rpc_ip_event_handler+0x18a>
   34054:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   34058:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   3405c:	68c0      	ldr	r0, [r0, #12]
   3405e:	d13b      	bne.n	340d8 <rpc_ip_event_handler+0x21c>
   34060:	f7ff f862 	bl	33128 <interface_from_internal_id_search>
   34064:	4607      	mov	r7, r0
   34066:	4638      	mov	r0, r7
   34068:	f7ff f876 	bl	33158 <interface_socket_from_handle_get>
   3406c:	4605      	mov	r5, r0
   3406e:	2800      	cmp	r0, #0
   34070:	f43f af6b 	beq.w	33f4a <rpc_ip_event_handler+0x8e>
   34074:	4601      	mov	r1, r0
   34076:	4633      	mov	r3, r6
   34078:	4622      	mov	r2, r4
   3407a:	4638      	mov	r0, r7
   3407c:	f000 fd56 	bl	34b2c <tls_rpc_ip_event_handler>
   34080:	2800      	cmp	r0, #0
   34082:	f000 812f 	beq.w	342e4 <rpc_ip_event_handler+0x428>
   34086:	f248 030c 	movw	r3, #32780	; 0x800c
   3408a:	429e      	cmp	r6, r3
   3408c:	d826      	bhi.n	340dc <rpc_ip_event_handler+0x220>
   3408e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   34092:	f67f af5a 	bls.w	33f4a <rpc_ip_event_handler+0x8e>
   34096:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   3409a:	3e01      	subs	r6, #1
   3409c:	2e0b      	cmp	r6, #11
   3409e:	f63f af54 	bhi.w	33f4a <rpc_ip_event_handler+0x8e>
   340a2:	a301      	add	r3, pc, #4	; (adr r3, 340a8 <rpc_ip_event_handler+0x1ec>)
   340a4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   340a8:	0003416d 	.word	0x0003416d
   340ac:	00034221 	.word	0x00034221
   340b0:	0003433d 	.word	0x0003433d
   340b4:	0003435b 	.word	0x0003435b
   340b8:	00034205 	.word	0x00034205
   340bc:	000342ed 	.word	0x000342ed
   340c0:	000342ed 	.word	0x000342ed
   340c4:	00034265 	.word	0x00034265
   340c8:	00034187 	.word	0x00034187
   340cc:	00033f4b 	.word	0x00033f4b
   340d0:	00033f4b 	.word	0x00033f4b
   340d4:	0003428f 	.word	0x0003428f
   340d8:	0c07      	lsrs	r7, r0, #16
   340da:	e7c4      	b.n	34066 <rpc_ip_event_handler+0x1aa>
   340dc:	f249 0302 	movw	r3, #36866	; 0x9002
   340e0:	429e      	cmp	r6, r3
   340e2:	f000 80cc 	beq.w	3427e <rpc_ip_event_handler+0x3c2>
   340e6:	f249 0303 	movw	r3, #36867	; 0x9003
   340ea:	429e      	cmp	r6, r3
   340ec:	d05b      	beq.n	341a6 <rpc_ip_event_handler+0x2ea>
   340ee:	f249 0301 	movw	r3, #36865	; 0x9001
   340f2:	429e      	cmp	r6, r3
   340f4:	f47f af29 	bne.w	33f4a <rpc_ip_event_handler+0x8e>
   340f8:	682e      	ldr	r6, [r5, #0]
   340fa:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   340fe:	f000 80ee 	beq.w	342de <rpc_ip_event_handler+0x422>
   34102:	68a3      	ldr	r3, [r4, #8]
   34104:	2b04      	cmp	r3, #4
   34106:	f240 80e7 	bls.w	342d8 <rpc_ip_event_handler+0x41c>
   3410a:	8a63      	ldrh	r3, [r4, #18]
   3410c:	2b00      	cmp	r3, #0
   3410e:	f000 80e4 	beq.w	342da <rpc_ip_event_handler+0x41e>
   34112:	2b10      	cmp	r3, #16
   34114:	f040 80cc 	bne.w	342b0 <rpc_ip_event_handler+0x3f4>
   34118:	2024      	movs	r0, #36	; 0x24
   3411a:	f7f6 fd87 	bl	2ac2c <nrf_modem_os_alloc>
   3411e:	b318      	cbz	r0, 34168 <rpc_ip_event_handler+0x2ac>
   34120:	230a      	movs	r3, #10
   34122:	6043      	str	r3, [r0, #4]
   34124:	2324      	movs	r3, #36	; 0x24
   34126:	7003      	strb	r3, [r0, #0]
   34128:	7c62      	ldrb	r2, [r4, #17]
   3412a:	7c23      	ldrb	r3, [r4, #16]
   3412c:	f104 0124 	add.w	r1, r4, #36	; 0x24
   34130:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   34134:	8103      	strh	r3, [r0, #8]
   34136:	f100 0210 	add.w	r2, r0, #16
   3413a:	f104 0314 	add.w	r3, r4, #20
   3413e:	f853 6b04 	ldr.w	r6, [r3], #4
   34142:	428b      	cmp	r3, r1
   34144:	f842 6b04 	str.w	r6, [r2], #4
   34148:	d1f9      	bne.n	3413e <rpc_ip_event_handler+0x282>
   3414a:	2324      	movs	r3, #36	; 0x24
   3414c:	6822      	ldr	r2, [r4, #0]
   3414e:	9307      	str	r3, [sp, #28]
   34150:	9204      	str	r2, [sp, #16]
   34152:	6862      	ldr	r2, [r4, #4]
   34154:	a904      	add	r1, sp, #16
   34156:	e9cd 2005 	strd	r2, r0, [sp, #20]
   3415a:	69e8      	ldr	r0, [r5, #28]
   3415c:	6803      	ldr	r3, [r0, #0]
   3415e:	685b      	ldr	r3, [r3, #4]
   34160:	4798      	blx	r3
   34162:	3001      	adds	r0, #1
   34164:	f040 808f 	bne.w	34286 <rpc_ip_event_handler+0x3ca>
   34168:	2002      	movs	r0, #2
   3416a:	e0bc      	b.n	342e6 <rpc_ip_event_handler+0x42a>
   3416c:	682b      	ldr	r3, [r5, #0]
   3416e:	2b01      	cmp	r3, #1
   34170:	f040 80b8 	bne.w	342e4 <rpc_ip_event_handler+0x428>
   34174:	6960      	ldr	r0, [r4, #20]
   34176:	2800      	cmp	r0, #0
   34178:	f040 80e9 	bne.w	3434e <rpc_ip_event_handler+0x492>
   3417c:	2302      	movs	r3, #2
   3417e:	602b      	str	r3, [r5, #0]
   34180:	69a3      	ldr	r3, [r4, #24]
   34182:	61ab      	str	r3, [r5, #24]
   34184:	e0af      	b.n	342e6 <rpc_ip_event_handler+0x42a>
   34186:	682b      	ldr	r3, [r5, #0]
   34188:	b29b      	uxth	r3, r3
   3418a:	2b0d      	cmp	r3, #13
   3418c:	f040 80aa 	bne.w	342e4 <rpc_ip_event_handler+0x428>
   34190:	6960      	ldr	r0, [r4, #20]
   34192:	2800      	cmp	r0, #0
   34194:	f040 80db 	bne.w	3434e <rpc_ip_event_handler+0x492>
   34198:	682b      	ldr	r3, [r5, #0]
   3419a:	0c1b      	lsrs	r3, r3, #16
   3419c:	041b      	lsls	r3, r3, #16
   3419e:	f043 030e 	orr.w	r3, r3, #14
   341a2:	602b      	str	r3, [r5, #0]
   341a4:	e09f      	b.n	342e6 <rpc_ip_event_handler+0x42a>
   341a6:	682b      	ldr	r3, [r5, #0]
   341a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   341ac:	602b      	str	r3, [r5, #0]
   341ae:	682b      	ldr	r3, [r5, #0]
   341b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   341b4:	602b      	str	r3, [r5, #0]
   341b6:	6923      	ldr	r3, [r4, #16]
   341b8:	2b6c      	cmp	r3, #108	; 0x6c
   341ba:	d107      	bne.n	341cc <rpc_ip_event_handler+0x310>
   341bc:	682b      	ldr	r3, [r5, #0]
   341be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   341c2:	602b      	str	r3, [r5, #0]
   341c4:	2380      	movs	r3, #128	; 0x80
   341c6:	606b      	str	r3, [r5, #4]
   341c8:	60ab      	str	r3, [r5, #8]
   341ca:	e08b      	b.n	342e4 <rpc_ip_event_handler+0x428>
   341cc:	2b6a      	cmp	r3, #106	; 0x6a
   341ce:	bf96      	itet	ls
   341d0:	4a08      	ldrls	r2, [pc, #32]	; (341f4 <rpc_ip_event_handler+0x338>)
   341d2:	235f      	movhi	r3, #95	; 0x5f
   341d4:	5cd3      	ldrbls	r3, [r2, r3]
   341d6:	e7f6      	b.n	341c6 <rpc_ip_event_handler+0x30a>
   341d8:	20010cd4 	.word	0x20010cd4
   341dc:	20010cd8 	.word	0x20010cd8
   341e0:	20010cd0 	.word	0x20010cd0
   341e4:	00045d51 	.word	0x00045d51
   341e8:	20010cc8 	.word	0x20010cc8
   341ec:	20010cc4 	.word	0x20010cc4
   341f0:	20010dec 	.word	0x20010dec
   341f4:	00045d56 	.word	0x00045d56
   341f8:	20010cfc 	.word	0x20010cfc
   341fc:	20010e13 	.word	0x20010e13
   34200:	20010e11 	.word	0x20010e11
   34204:	682b      	ldr	r3, [r5, #0]
   34206:	b29b      	uxth	r3, r3
   34208:	2b03      	cmp	r3, #3
   3420a:	d16b      	bne.n	342e4 <rpc_ip_event_handler+0x428>
   3420c:	6960      	ldr	r0, [r4, #20]
   3420e:	2800      	cmp	r0, #0
   34210:	f040 809d 	bne.w	3434e <rpc_ip_event_handler+0x492>
   34214:	682b      	ldr	r3, [r5, #0]
   34216:	0c1b      	lsrs	r3, r3, #16
   34218:	041b      	lsls	r3, r3, #16
   3421a:	f043 0304 	orr.w	r3, r3, #4
   3421e:	e7c0      	b.n	341a2 <rpc_ip_event_handler+0x2e6>
   34220:	682b      	ldr	r3, [r5, #0]
   34222:	0099      	lsls	r1, r3, #2
   34224:	d55e      	bpl.n	342e4 <rpc_ip_event_handler+0x428>
   34226:	682b      	ldr	r3, [r5, #0]
   34228:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   3422c:	602b      	str	r3, [r5, #0]
   3422e:	6960      	ldr	r0, [r4, #20]
   34230:	b968      	cbnz	r0, 3424e <rpc_ip_event_handler+0x392>
   34232:	682b      	ldr	r3, [r5, #0]
   34234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34238:	602b      	str	r3, [r5, #0]
   3423a:	682b      	ldr	r3, [r5, #0]
   3423c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   34240:	602b      	str	r3, [r5, #0]
   34242:	682b      	ldr	r3, [r5, #0]
   34244:	0c1b      	lsrs	r3, r3, #16
   34246:	041b      	lsls	r3, r3, #16
   34248:	f043 0305 	orr.w	r3, r3, #5
   3424c:	e7a9      	b.n	341a2 <rpc_ip_event_handler+0x2e6>
   3424e:	286a      	cmp	r0, #106	; 0x6a
   34250:	bf8e      	itee	hi
   34252:	235f      	movhi	r3, #95	; 0x5f
   34254:	4b4c      	ldrls	r3, [pc, #304]	; (34388 <rpc_ip_event_handler+0x4cc>)
   34256:	5c1b      	ldrbls	r3, [r3, r0]
   34258:	606b      	str	r3, [r5, #4]
   3425a:	682b      	ldr	r3, [r5, #0]
   3425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34260:	602b      	str	r3, [r5, #0]
   34262:	e03f      	b.n	342e4 <rpc_ip_event_handler+0x428>
   34264:	682b      	ldr	r3, [r5, #0]
   34266:	b29b      	uxth	r3, r3
   34268:	2b06      	cmp	r3, #6
   3426a:	d13b      	bne.n	342e4 <rpc_ip_event_handler+0x428>
   3426c:	6960      	ldr	r0, [r4, #20]
   3426e:	2800      	cmp	r0, #0
   34270:	d16d      	bne.n	3434e <rpc_ip_event_handler+0x492>
   34272:	682b      	ldr	r3, [r5, #0]
   34274:	0c1b      	lsrs	r3, r3, #16
   34276:	041b      	lsls	r3, r3, #16
   34278:	f043 0307 	orr.w	r3, r3, #7
   3427c:	e791      	b.n	341a2 <rpc_ip_event_handler+0x2e6>
   3427e:	682b      	ldr	r3, [r5, #0]
   34280:	b29b      	uxth	r3, r3
   34282:	2b07      	cmp	r3, #7
   34284:	d12e      	bne.n	342e4 <rpc_ip_event_handler+0x428>
   34286:	682b      	ldr	r3, [r5, #0]
   34288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3428c:	e7e8      	b.n	34260 <rpc_ip_event_handler+0x3a4>
   3428e:	682b      	ldr	r3, [r5, #0]
   34290:	b29b      	uxth	r3, r3
   34292:	2b08      	cmp	r3, #8
   34294:	d126      	bne.n	342e4 <rpc_ip_event_handler+0x428>
   34296:	6963      	ldr	r3, [r4, #20]
   34298:	2b00      	cmp	r3, #0
   3429a:	d16d      	bne.n	34378 <rpc_ip_event_handler+0x4bc>
   3429c:	4b3b      	ldr	r3, [pc, #236]	; (3438c <rpc_ip_event_handler+0x4d0>)
   3429e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   342a2:	682b      	ldr	r3, [r5, #0]
   342a4:	0c1b      	lsrs	r3, r3, #16
   342a6:	041b      	lsls	r3, r3, #16
   342a8:	f043 0309 	orr.w	r3, r3, #9
   342ac:	602b      	str	r3, [r5, #0]
   342ae:	e032      	b.n	34316 <rpc_ip_event_handler+0x45a>
   342b0:	2b04      	cmp	r3, #4
   342b2:	d114      	bne.n	342de <rpc_ip_event_handler+0x422>
   342b4:	2010      	movs	r0, #16
   342b6:	f7f6 fcb9 	bl	2ac2c <nrf_modem_os_alloc>
   342ba:	2800      	cmp	r0, #0
   342bc:	f43f af54 	beq.w	34168 <rpc_ip_event_handler+0x2ac>
   342c0:	2302      	movs	r3, #2
   342c2:	6043      	str	r3, [r0, #4]
   342c4:	2310      	movs	r3, #16
   342c6:	7003      	strb	r3, [r0, #0]
   342c8:	7c22      	ldrb	r2, [r4, #16]
   342ca:	7c61      	ldrb	r1, [r4, #17]
   342cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   342d0:	8102      	strh	r2, [r0, #8]
   342d2:	6962      	ldr	r2, [r4, #20]
   342d4:	60c2      	str	r2, [r0, #12]
   342d6:	e739      	b.n	3414c <rpc_ip_event_handler+0x290>
   342d8:	2300      	movs	r3, #0
   342da:	4618      	mov	r0, r3
   342dc:	e736      	b.n	3414c <rpc_ip_event_handler+0x290>
   342de:	6820      	ldr	r0, [r4, #0]
   342e0:	f00a fd62 	bl	3eda8 <rpc_client_data_free>
   342e4:	2000      	movs	r0, #0
   342e6:	b009      	add	sp, #36	; 0x24
   342e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   342ec:	4b27      	ldr	r3, [pc, #156]	; (3438c <rpc_ip_event_handler+0x4d0>)
   342ee:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   342f2:	6963      	ldr	r3, [r4, #20]
   342f4:	b17b      	cbz	r3, 34316 <rpc_ip_event_handler+0x45a>
   342f6:	2b6b      	cmp	r3, #107	; 0x6b
   342f8:	d10f      	bne.n	3431a <rpc_ip_event_handler+0x45e>
   342fa:	6928      	ldr	r0, [r5, #16]
   342fc:	220c      	movs	r2, #12
   342fe:	2801      	cmp	r0, #1
   34300:	682b      	ldr	r3, [r5, #0]
   34302:	d104      	bne.n	3430e <rpc_ip_event_handler+0x452>
   34304:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   34308:	602b      	str	r3, [r5, #0]
   3430a:	606a      	str	r2, [r5, #4]
   3430c:	e7eb      	b.n	342e6 <rpc_ip_event_handler+0x42a>
   3430e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34312:	602b      	str	r3, [r5, #0]
   34314:	606a      	str	r2, [r5, #4]
   34316:	2001      	movs	r0, #1
   34318:	e7e5      	b.n	342e6 <rpc_ip_event_handler+0x42a>
   3431a:	f023 0002 	bic.w	r0, r3, #2
   3431e:	2801      	cmp	r0, #1
   34320:	d102      	bne.n	34328 <rpc_ip_event_handler+0x46c>
   34322:	230c      	movs	r3, #12
   34324:	606b      	str	r3, [r5, #4]
   34326:	e7de      	b.n	342e6 <rpc_ip_event_handler+0x42a>
   34328:	2b6a      	cmp	r3, #106	; 0x6a
   3432a:	bf8e      	itee	hi
   3432c:	235f      	movhi	r3, #95	; 0x5f
   3432e:	4a16      	ldrls	r2, [pc, #88]	; (34388 <rpc_ip_event_handler+0x4cc>)
   34330:	5cd3      	ldrbls	r3, [r2, r3]
   34332:	606b      	str	r3, [r5, #4]
   34334:	682b      	ldr	r3, [r5, #0]
   34336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   3433a:	e7b7      	b.n	342ac <rpc_ip_event_handler+0x3f0>
   3433c:	682b      	ldr	r3, [r5, #0]
   3433e:	025a      	lsls	r2, r3, #9
   34340:	d5d0      	bpl.n	342e4 <rpc_ip_event_handler+0x428>
   34342:	6960      	ldr	r0, [r4, #20]
   34344:	b918      	cbnz	r0, 3434e <rpc_ip_event_handler+0x492>
   34346:	682b      	ldr	r3, [r5, #0]
   34348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3434c:	e729      	b.n	341a2 <rpc_ip_event_handler+0x2e6>
   3434e:	286a      	cmp	r0, #106	; 0x6a
   34350:	d817      	bhi.n	34382 <rpc_ip_event_handler+0x4c6>
   34352:	4b0d      	ldr	r3, [pc, #52]	; (34388 <rpc_ip_event_handler+0x4cc>)
   34354:	5c1b      	ldrb	r3, [r3, r0]
   34356:	606b      	str	r3, [r5, #4]
   34358:	e7c4      	b.n	342e4 <rpc_ip_event_handler+0x428>
   3435a:	682b      	ldr	r3, [r5, #0]
   3435c:	01db      	lsls	r3, r3, #7
   3435e:	d5c1      	bpl.n	342e4 <rpc_ip_event_handler+0x428>
   34360:	6963      	ldr	r3, [r4, #20]
   34362:	b94b      	cbnz	r3, 34378 <rpc_ip_event_handler+0x4bc>
   34364:	6820      	ldr	r0, [r4, #0]
   34366:	b118      	cbz	r0, 34370 <rpc_ip_event_handler+0x4b4>
   34368:	2001      	movs	r0, #1
   3436a:	4b08      	ldr	r3, [pc, #32]	; (3438c <rpc_ip_event_handler+0x4d0>)
   3436c:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   34370:	682b      	ldr	r3, [r5, #0]
   34372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   34376:	e714      	b.n	341a2 <rpc_ip_event_handler+0x2e6>
   34378:	2b6a      	cmp	r3, #106	; 0x6a
   3437a:	d802      	bhi.n	34382 <rpc_ip_event_handler+0x4c6>
   3437c:	4a02      	ldr	r2, [pc, #8]	; (34388 <rpc_ip_event_handler+0x4cc>)
   3437e:	5cd3      	ldrb	r3, [r2, r3]
   34380:	e7e9      	b.n	34356 <rpc_ip_event_handler+0x49a>
   34382:	235f      	movs	r3, #95	; 0x5f
   34384:	e7e7      	b.n	34356 <rpc_ip_event_handler+0x49a>
   34386:	bf00      	nop
   34388:	00045d56 	.word	0x00045d56
   3438c:	20010cdc 	.word	0x20010cdc

00034390 <secure_socket_dtls_timeout_check>:
   34390:	281f      	cmp	r0, #31
   34392:	dc0b      	bgt.n	343ac <secure_socket_dtls_timeout_check+0x1c>
   34394:	2800      	cmp	r0, #0
   34396:	dd10      	ble.n	343ba <secure_socket_dtls_timeout_check+0x2a>
   34398:	2301      	movs	r3, #1
   3439a:	fa03 f000 	lsl.w	r0, r3, r0
   3439e:	4b09      	ldr	r3, [pc, #36]	; (343c4 <secure_socket_dtls_timeout_check+0x34>)
   343a0:	4003      	ands	r3, r0
   343a2:	2b00      	cmp	r3, #0
   343a4:	bf0c      	ite	eq
   343a6:	2016      	moveq	r0, #22
   343a8:	2000      	movne	r0, #0
   343aa:	4770      	bx	lr
   343ac:	283f      	cmp	r0, #63	; 0x3f
   343ae:	d006      	beq.n	343be <secure_socket_dtls_timeout_check+0x2e>
   343b0:	287b      	cmp	r0, #123	; 0x7b
   343b2:	bf14      	ite	ne
   343b4:	2016      	movne	r0, #22
   343b6:	2000      	moveq	r0, #0
   343b8:	4770      	bx	lr
   343ba:	2016      	movs	r0, #22
   343bc:	4770      	bx	lr
   343be:	2000      	movs	r0, #0
   343c0:	4770      	bx	lr
   343c2:	bf00      	nop
   343c4:	8000808a 	.word	0x8000808a

000343c8 <hostname_free>:
   343c8:	b538      	push	{r3, r4, r5, lr}
   343ca:	4c07      	ldr	r4, [pc, #28]	; (343e8 <hostname_free+0x20>)
   343cc:	4605      	mov	r5, r0
   343ce:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   343d2:	b138      	cbz	r0, 343e4 <hostname_free+0x1c>
   343d4:	f7f6 fc34 	bl	2ac40 <nrf_modem_os_free>
   343d8:	2300      	movs	r3, #0
   343da:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   343de:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   343e2:	6063      	str	r3, [r4, #4]
   343e4:	bd38      	pop	{r3, r4, r5, pc}
   343e6:	bf00      	nop
   343e8:	20010d00 	.word	0x20010d00

000343ec <secure_socket_attach_initiate>:
   343ec:	f04f 33ff 	mov.w	r3, #4294967295
   343f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   343f4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3448c <secure_socket_attach_initiate+0xa0>
   343f8:	9301      	str	r3, [sp, #4]
   343fa:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   343fe:	460d      	mov	r5, r1
   34400:	4616      	mov	r6, r2
   34402:	f8d9 3004 	ldr.w	r3, [r9, #4]
   34406:	f247 0281 	movw	r2, #28801	; 0x7081
   3440a:	6989      	ldr	r1, [r1, #24]
   3440c:	4607      	mov	r7, r0
   3440e:	f00a fd5d 	bl	3eecc <ip_interface_request_create>
   34412:	4604      	mov	r4, r0
   34414:	b398      	cbz	r0, 3447e <secure_socket_attach_initiate+0x92>
   34416:	f8d9 2004 	ldr.w	r2, [r9, #4]
   3441a:	b122      	cbz	r2, 34426 <secure_socket_attach_initiate+0x3a>
   3441c:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   34420:	6800      	ldr	r0, [r0, #0]
   34422:	f00b fd6d 	bl	3ff00 <memcpy>
   34426:	2324      	movs	r3, #36	; 0x24
   34428:	4a17      	ldr	r2, [pc, #92]	; (34488 <secure_socket_attach_initiate+0x9c>)
   3442a:	fb03 2307 	mla	r3, r3, r7, r2
   3442e:	f104 0214 	add.w	r2, r4, #20
   34432:	f103 0124 	add.w	r1, r3, #36	; 0x24
   34436:	f853 0b04 	ldr.w	r0, [r3], #4
   3443a:	428b      	cmp	r3, r1
   3443c:	f842 0b04 	str.w	r0, [r2], #4
   34440:	d1f9      	bne.n	34436 <secure_socket_attach_initiate+0x4a>
   34442:	68a3      	ldr	r3, [r4, #8]
   34444:	4622      	mov	r2, r4
   34446:	3324      	adds	r3, #36	; 0x24
   34448:	60a3      	str	r3, [r4, #8]
   3444a:	682b      	ldr	r3, [r5, #0]
   3444c:	f247 0181 	movw	r1, #28801	; 0x7081
   34450:	0c1b      	lsrs	r3, r3, #16
   34452:	041b      	lsls	r3, r3, #16
   34454:	f043 030a 	orr.w	r3, r3, #10
   34458:	602b      	str	r3, [r5, #0]
   3445a:	2004      	movs	r0, #4
   3445c:	f00a fc9a 	bl	3ed94 <rpc_client_request_send>
   34460:	682b      	ldr	r3, [r5, #0]
   34462:	00db      	lsls	r3, r3, #3
   34464:	d40d      	bmi.n	34482 <secure_socket_attach_initiate+0x96>
   34466:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3446a:	210b      	movs	r1, #11
   3446c:	4638      	mov	r0, r7
   3446e:	ab01      	add	r3, sp, #4
   34470:	f00a fd3f 	bl	3eef2 <ip_interface_wait>
   34474:	b100      	cbz	r0, 34478 <secure_socket_attach_initiate+0x8c>
   34476:	602e      	str	r6, [r5, #0]
   34478:	b003      	add	sp, #12
   3447a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3447e:	200c      	movs	r0, #12
   34480:	e7fa      	b.n	34478 <secure_socket_attach_initiate+0x8c>
   34482:	2077      	movs	r0, #119	; 0x77
   34484:	e7f8      	b.n	34478 <secure_socket_attach_initiate+0x8c>
   34486:	bf00      	nop
   34488:	20010e15 	.word	0x20010e15
   3448c:	20010d00 	.word	0x20010d00

00034490 <tls_interface_init>:
   34490:	2201      	movs	r2, #1
   34492:	4b02      	ldr	r3, [pc, #8]	; (3449c <tls_interface_init+0xc>)
   34494:	2000      	movs	r0, #0
   34496:	701a      	strb	r2, [r3, #0]
   34498:	4770      	bx	lr
   3449a:	bf00      	nop
   3449c:	20010e14 	.word	0x20010e14

000344a0 <tls_interface_open>:
   344a0:	b538      	push	{r3, r4, r5, lr}
   344a2:	4b21      	ldr	r3, [pc, #132]	; (34528 <tls_interface_open+0x88>)
   344a4:	4615      	mov	r5, r2
   344a6:	781b      	ldrb	r3, [r3, #0]
   344a8:	b92b      	cbnz	r3, 344b6 <tls_interface_open+0x16>
   344aa:	2075      	movs	r0, #117	; 0x75
   344ac:	f009 fb0c 	bl	3dac8 <nrf_modem_os_errno_set>
   344b0:	f04f 34ff 	mov.w	r4, #4294967295
   344b4:	e031      	b.n	3451a <tls_interface_open+0x7a>
   344b6:	1e4b      	subs	r3, r1, #1
   344b8:	2b01      	cmp	r3, #1
   344ba:	d809      	bhi.n	344d0 <tls_interface_open+0x30>
   344bc:	b952      	cbnz	r2, 344d4 <tls_interface_open+0x34>
   344be:	2901      	cmp	r1, #1
   344c0:	bf0b      	itete	eq
   344c2:	2201      	moveq	r2, #1
   344c4:	2202      	movne	r2, #2
   344c6:	f44f 7582 	moveq.w	r5, #260	; 0x104
   344ca:	f44f 7587 	movne.w	r5, #270	; 0x10e
   344ce:	e007      	b.n	344e0 <tls_interface_open+0x40>
   344d0:	206b      	movs	r0, #107	; 0x6b
   344d2:	e7eb      	b.n	344ac <tls_interface_open+0xc>
   344d4:	2901      	cmp	r1, #1
   344d6:	d122      	bne.n	3451e <tls_interface_open+0x7e>
   344d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   344dc:	d1f8      	bne.n	344d0 <tls_interface_open+0x30>
   344de:	460a      	mov	r2, r1
   344e0:	f7fe ff40 	bl	33364 <ip_interface_open>
   344e4:	1e04      	subs	r4, r0, #0
   344e6:	dbe3      	blt.n	344b0 <tls_interface_open+0x10>
   344e8:	2224      	movs	r2, #36	; 0x24
   344ea:	4910      	ldr	r1, [pc, #64]	; (3452c <tls_interface_open+0x8c>)
   344ec:	4b10      	ldr	r3, [pc, #64]	; (34530 <tls_interface_open+0x90>)
   344ee:	fb02 1204 	mla	r2, r2, r4, r1
   344f2:	f103 0124 	add.w	r1, r3, #36	; 0x24
   344f6:	f853 0b04 	ldr.w	r0, [r3], #4
   344fa:	428b      	cmp	r3, r1
   344fc:	f842 0b04 	str.w	r0, [r2], #4
   34500:	d1f9      	bne.n	344f6 <tls_interface_open+0x56>
   34502:	4620      	mov	r0, r4
   34504:	f7fe fe28 	bl	33158 <interface_socket_from_handle_get>
   34508:	6803      	ldr	r3, [r0, #0]
   3450a:	6145      	str	r5, [r0, #20]
   3450c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34510:	6003      	str	r3, [r0, #0]
   34512:	6803      	ldr	r3, [r0, #0]
   34514:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   34518:	6003      	str	r3, [r0, #0]
   3451a:	4620      	mov	r0, r4
   3451c:	bd38      	pop	{r3, r4, r5, pc}
   3451e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   34522:	d1d5      	bne.n	344d0 <tls_interface_open+0x30>
   34524:	2202      	movs	r2, #2
   34526:	e7db      	b.n	344e0 <tls_interface_open+0x40>
   34528:	20010e14 	.word	0x20010e14
   3452c:	20010e15 	.word	0x20010e15
   34530:	00045dc1 	.word	0x00045dc1

00034534 <tls_interface_sendto>:
   34534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34538:	b085      	sub	sp, #20
   3453a:	4606      	mov	r6, r0
   3453c:	4691      	mov	r9, r2
   3453e:	461f      	mov	r7, r3
   34540:	9103      	str	r1, [sp, #12]
   34542:	f7fe fe09 	bl	33158 <interface_socket_from_handle_get>
   34546:	4605      	mov	r5, r0
   34548:	2800      	cmp	r0, #0
   3454a:	d06c      	beq.n	34626 <tls_interface_sendto+0xf2>
   3454c:	f04f 0a24 	mov.w	sl, #36	; 0x24
   34550:	07bb      	lsls	r3, r7, #30
   34552:	bf48      	it	mi
   34554:	2300      	movmi	r3, #0
   34556:	f04f 0400 	mov.w	r4, #0
   3455a:	f04f 3bff 	mov.w	fp, #4294967295
   3455e:	bf58      	it	pl
   34560:	6803      	ldrpl	r3, [r0, #0]
   34562:	fb0a fa06 	mul.w	sl, sl, r6
   34566:	bf5c      	itt	pl
   34568:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   3456c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   34570:	9302      	str	r3, [sp, #8]
   34572:	6829      	ldr	r1, [r5, #0]
   34574:	eba9 0804 	sub.w	r8, r9, r4
   34578:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   3457c:	b289      	uxth	r1, r1
   3457e:	bfa8      	it	ge
   34580:	f44f 6800 	movge.w	r8, #2048	; 0x800
   34584:	290c      	cmp	r1, #12
   34586:	d110      	bne.n	345aa <tls_interface_sendto+0x76>
   34588:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3458a:	9903      	ldr	r1, [sp, #12]
   3458c:	9301      	str	r3, [sp, #4]
   3458e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   34590:	4642      	mov	r2, r8
   34592:	9300      	str	r3, [sp, #0]
   34594:	4630      	mov	r0, r6
   34596:	463b      	mov	r3, r7
   34598:	4421      	add	r1, r4
   3459a:	f7fe ffa5 	bl	334e8 <ip_interface_sendto>
   3459e:	f1b0 0b00 	subs.w	fp, r0, #0
   345a2:	da32      	bge.n	3460a <tls_interface_sendto+0xd6>
   345a4:	f04f 34ff 	mov.w	r4, #4294967295
   345a8:	e034      	b.n	34614 <tls_interface_sendto+0xe0>
   345aa:	6828      	ldr	r0, [r5, #0]
   345ac:	b280      	uxth	r0, r0
   345ae:	280b      	cmp	r0, #11
   345b0:	d109      	bne.n	345c6 <tls_interface_sendto+0x92>
   345b2:	4b21      	ldr	r3, [pc, #132]	; (34638 <tls_interface_sendto+0x104>)
   345b4:	f813 200a 	ldrb.w	r2, [r3, sl]
   345b8:	2a02      	cmp	r2, #2
   345ba:	d031      	beq.n	34620 <tls_interface_sendto+0xec>
   345bc:	692a      	ldr	r2, [r5, #16]
   345be:	2a01      	cmp	r2, #1
   345c0:	d133      	bne.n	3462a <tls_interface_sendto+0xf6>
   345c2:	206d      	movs	r0, #109	; 0x6d
   345c4:	e02c      	b.n	34620 <tls_interface_sendto+0xec>
   345c6:	4628      	mov	r0, r5
   345c8:	f00a fefc 	bl	3f3c4 <attach_trigger_condition_verify>
   345cc:	b388      	cbz	r0, 34632 <tls_interface_sendto+0xfe>
   345ce:	4b1a      	ldr	r3, [pc, #104]	; (34638 <tls_interface_sendto+0x104>)
   345d0:	f813 100a 	ldrb.w	r1, [r3, sl]
   345d4:	2902      	cmp	r1, #2
   345d6:	d110      	bne.n	345fa <tls_interface_sendto+0xc6>
   345d8:	4629      	mov	r1, r5
   345da:	4630      	mov	r0, r6
   345dc:	f00a ff09 	bl	3f3f2 <secure_client_socket>
   345e0:	b970      	cbnz	r0, 34600 <tls_interface_sendto+0xcc>
   345e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   345e4:	9903      	ldr	r1, [sp, #12]
   345e6:	9301      	str	r3, [sp, #4]
   345e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   345ea:	4642      	mov	r2, r8
   345ec:	9300      	str	r3, [sp, #0]
   345ee:	4630      	mov	r0, r6
   345f0:	463b      	mov	r3, r7
   345f2:	4421      	add	r1, r4
   345f4:	f7fe ff78 	bl	334e8 <ip_interface_sendto>
   345f8:	4683      	mov	fp, r0
   345fa:	f1bb 0f00 	cmp.w	fp, #0
   345fe:	e7d0      	b.n	345a2 <tls_interface_sendto+0x6e>
   34600:	f1bb 3fff 	cmp.w	fp, #4294967295
   34604:	d00a      	beq.n	3461c <tls_interface_sendto+0xe8>
   34606:	2800      	cmp	r0, #0
   34608:	dc0a      	bgt.n	34620 <tls_interface_sendto+0xec>
   3460a:	9b02      	ldr	r3, [sp, #8]
   3460c:	445c      	add	r4, fp
   3460e:	b10b      	cbz	r3, 34614 <tls_interface_sendto+0xe0>
   34610:	45a1      	cmp	r9, r4
   34612:	dcae      	bgt.n	34572 <tls_interface_sendto+0x3e>
   34614:	4620      	mov	r0, r4
   34616:	b005      	add	sp, #20
   34618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3461c:	2800      	cmp	r0, #0
   3461e:	ddc1      	ble.n	345a4 <tls_interface_sendto+0x70>
   34620:	f009 fa52 	bl	3dac8 <nrf_modem_os_errno_set>
   34624:	e7be      	b.n	345a4 <tls_interface_sendto+0x70>
   34626:	2009      	movs	r0, #9
   34628:	e7fa      	b.n	34620 <tls_interface_sendto+0xec>
   3462a:	f1bb 3fff 	cmp.w	fp, #4294967295
   3462e:	d1ec      	bne.n	3460a <tls_interface_sendto+0xd6>
   34630:	e7b8      	b.n	345a4 <tls_interface_sendto+0x70>
   34632:	2080      	movs	r0, #128	; 0x80
   34634:	e7f4      	b.n	34620 <tls_interface_sendto+0xec>
   34636:	bf00      	nop
   34638:	20010e15 	.word	0x20010e15

0003463c <tls_interface_recvfrom>:
   3463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34640:	460d      	mov	r5, r1
   34642:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   34646:	4604      	mov	r4, r0
   34648:	4616      	mov	r6, r2
   3464a:	461f      	mov	r7, r3
   3464c:	f7fe fd84 	bl	33158 <interface_socket_from_handle_get>
   34650:	4601      	mov	r1, r0
   34652:	b320      	cbz	r0, 3469e <tls_interface_recvfrom+0x62>
   34654:	6803      	ldr	r3, [r0, #0]
   34656:	b29b      	uxth	r3, r3
   34658:	2b0c      	cmp	r3, #12
   3465a:	d003      	beq.n	34664 <tls_interface_recvfrom+0x28>
   3465c:	6803      	ldr	r3, [r0, #0]
   3465e:	b29b      	uxth	r3, r3
   34660:	2b0d      	cmp	r3, #13
   34662:	d109      	bne.n	34678 <tls_interface_recvfrom+0x3c>
   34664:	463b      	mov	r3, r7
   34666:	4632      	mov	r2, r6
   34668:	4629      	mov	r1, r5
   3466a:	4620      	mov	r0, r4
   3466c:	e9cd 8908 	strd	r8, r9, [sp, #32]
   34670:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34674:	f00a bc4d 	b.w	3ef12 <ip_interface_recvfrom>
   34678:	f00a fea4 	bl	3f3c4 <attach_trigger_condition_verify>
   3467c:	b198      	cbz	r0, 346a6 <tls_interface_recvfrom+0x6a>
   3467e:	2324      	movs	r3, #36	; 0x24
   34680:	4363      	muls	r3, r4
   34682:	4a0a      	ldr	r2, [pc, #40]	; (346ac <tls_interface_recvfrom+0x70>)
   34684:	5cd3      	ldrb	r3, [r2, r3]
   34686:	2b02      	cmp	r3, #2
   34688:	d10d      	bne.n	346a6 <tls_interface_recvfrom+0x6a>
   3468a:	4620      	mov	r0, r4
   3468c:	f00a feb1 	bl	3f3f2 <secure_client_socket>
   34690:	2800      	cmp	r0, #0
   34692:	d0e7      	beq.n	34664 <tls_interface_recvfrom+0x28>
   34694:	dc04      	bgt.n	346a0 <tls_interface_recvfrom+0x64>
   34696:	f04f 30ff 	mov.w	r0, #4294967295
   3469a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3469e:	2009      	movs	r0, #9
   346a0:	f009 fa12 	bl	3dac8 <nrf_modem_os_errno_set>
   346a4:	e7f7      	b.n	34696 <tls_interface_recvfrom+0x5a>
   346a6:	200b      	movs	r0, #11
   346a8:	e7fa      	b.n	346a0 <tls_interface_recvfrom+0x64>
   346aa:	bf00      	nop
   346ac:	20010e15 	.word	0x20010e15

000346b0 <tls_interface_bind>:
   346b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   346b2:	4604      	mov	r4, r0
   346b4:	460e      	mov	r6, r1
   346b6:	4617      	mov	r7, r2
   346b8:	f7fe fd4e 	bl	33158 <interface_socket_from_handle_get>
   346bc:	4605      	mov	r5, r0
   346be:	b1d8      	cbz	r0, 346f8 <tls_interface_bind+0x48>
   346c0:	6803      	ldr	r3, [r0, #0]
   346c2:	b29b      	uxth	r3, r3
   346c4:	2b02      	cmp	r3, #2
   346c6:	d119      	bne.n	346fc <tls_interface_bind+0x4c>
   346c8:	463a      	mov	r2, r7
   346ca:	4631      	mov	r1, r6
   346cc:	4620      	mov	r0, r4
   346ce:	f7ff f89f 	bl	33810 <ip_interface_bind>
   346d2:	b950      	cbnz	r0, 346ea <tls_interface_bind+0x3a>
   346d4:	2324      	movs	r3, #36	; 0x24
   346d6:	4363      	muls	r3, r4
   346d8:	4a09      	ldr	r2, [pc, #36]	; (34700 <tls_interface_bind+0x50>)
   346da:	5cd3      	ldrb	r3, [r2, r3]
   346dc:	2b01      	cmp	r3, #1
   346de:	d10a      	bne.n	346f6 <tls_interface_bind+0x46>
   346e0:	2204      	movs	r2, #4
   346e2:	4629      	mov	r1, r5
   346e4:	4620      	mov	r0, r4
   346e6:	f7ff fe81 	bl	343ec <secure_socket_attach_initiate>
   346ea:	2800      	cmp	r0, #0
   346ec:	dd03      	ble.n	346f6 <tls_interface_bind+0x46>
   346ee:	f009 f9eb 	bl	3dac8 <nrf_modem_os_errno_set>
   346f2:	f04f 30ff 	mov.w	r0, #4294967295
   346f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   346f8:	2009      	movs	r0, #9
   346fa:	e7f8      	b.n	346ee <tls_interface_bind+0x3e>
   346fc:	205f      	movs	r0, #95	; 0x5f
   346fe:	e7f6      	b.n	346ee <tls_interface_bind+0x3e>
   34700:	20010e15 	.word	0x20010e15

00034704 <tls_interface_connect>:
   34704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34706:	4605      	mov	r5, r0
   34708:	460e      	mov	r6, r1
   3470a:	4617      	mov	r7, r2
   3470c:	f7fe fd24 	bl	33158 <interface_socket_from_handle_get>
   34710:	4604      	mov	r4, r0
   34712:	b1f0      	cbz	r0, 34752 <tls_interface_connect+0x4e>
   34714:	2324      	movs	r3, #36	; 0x24
   34716:	436b      	muls	r3, r5
   34718:	4a10      	ldr	r2, [pc, #64]	; (3475c <tls_interface_connect+0x58>)
   3471a:	5cd3      	ldrb	r3, [r2, r3]
   3471c:	2b02      	cmp	r3, #2
   3471e:	d11a      	bne.n	34756 <tls_interface_connect+0x52>
   34720:	6803      	ldr	r3, [r0, #0]
   34722:	b29b      	uxth	r3, r3
   34724:	2b02      	cmp	r3, #2
   34726:	d003      	beq.n	34730 <tls_interface_connect+0x2c>
   34728:	6803      	ldr	r3, [r0, #0]
   3472a:	b29b      	uxth	r3, r3
   3472c:	2b04      	cmp	r3, #4
   3472e:	d112      	bne.n	34756 <tls_interface_connect+0x52>
   34730:	463a      	mov	r2, r7
   34732:	4631      	mov	r1, r6
   34734:	4628      	mov	r0, r5
   34736:	f00a fcee 	bl	3f116 <ip_interface_connect>
   3473a:	b918      	cbnz	r0, 34744 <tls_interface_connect+0x40>
   3473c:	4621      	mov	r1, r4
   3473e:	4628      	mov	r0, r5
   34740:	f00a fe57 	bl	3f3f2 <secure_client_socket>
   34744:	2800      	cmp	r0, #0
   34746:	dd03      	ble.n	34750 <tls_interface_connect+0x4c>
   34748:	f009 f9be 	bl	3dac8 <nrf_modem_os_errno_set>
   3474c:	f04f 30ff 	mov.w	r0, #4294967295
   34750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34752:	2009      	movs	r0, #9
   34754:	e7f8      	b.n	34748 <tls_interface_connect+0x44>
   34756:	205f      	movs	r0, #95	; 0x5f
   34758:	e7f6      	b.n	34748 <tls_interface_connect+0x44>
   3475a:	bf00      	nop
   3475c:	20010e15 	.word	0x20010e15

00034760 <tls_interface_listen>:
   34760:	b538      	push	{r3, r4, r5, lr}
   34762:	460d      	mov	r5, r1
   34764:	4604      	mov	r4, r0
   34766:	f7fe fcf7 	bl	33158 <interface_socket_from_handle_get>
   3476a:	4601      	mov	r1, r0
   3476c:	2800      	cmp	r0, #0
   3476e:	d033      	beq.n	347d8 <tls_interface_listen+0x78>
   34770:	6803      	ldr	r3, [r0, #0]
   34772:	00db      	lsls	r3, r3, #3
   34774:	d432      	bmi.n	347dc <tls_interface_listen+0x7c>
   34776:	6903      	ldr	r3, [r0, #16]
   34778:	2b01      	cmp	r3, #1
   3477a:	d12f      	bne.n	347dc <tls_interface_listen+0x7c>
   3477c:	6803      	ldr	r3, [r0, #0]
   3477e:	b29b      	uxth	r3, r3
   34780:	2b04      	cmp	r3, #4
   34782:	d105      	bne.n	34790 <tls_interface_listen+0x30>
   34784:	2324      	movs	r3, #36	; 0x24
   34786:	4363      	muls	r3, r4
   34788:	4a15      	ldr	r2, [pc, #84]	; (347e0 <tls_interface_listen+0x80>)
   3478a:	5cd3      	ldrb	r3, [r2, r3]
   3478c:	2b02      	cmp	r3, #2
   3478e:	d009      	beq.n	347a4 <tls_interface_listen+0x44>
   34790:	680b      	ldr	r3, [r1, #0]
   34792:	b29b      	uxth	r3, r3
   34794:	2b0b      	cmp	r3, #11
   34796:	d121      	bne.n	347dc <tls_interface_listen+0x7c>
   34798:	2324      	movs	r3, #36	; 0x24
   3479a:	4363      	muls	r3, r4
   3479c:	4a10      	ldr	r2, [pc, #64]	; (347e0 <tls_interface_listen+0x80>)
   3479e:	5cd3      	ldrb	r3, [r2, r3]
   347a0:	2b01      	cmp	r3, #1
   347a2:	d11b      	bne.n	347dc <tls_interface_listen+0x7c>
   347a4:	2324      	movs	r3, #36	; 0x24
   347a6:	2001      	movs	r0, #1
   347a8:	4363      	muls	r3, r4
   347aa:	4a0d      	ldr	r2, [pc, #52]	; (347e0 <tls_interface_listen+0x80>)
   347ac:	54d0      	strb	r0, [r2, r3]
   347ae:	680b      	ldr	r3, [r1, #0]
   347b0:	2b0b      	cmp	r3, #11
   347b2:	d10a      	bne.n	347ca <tls_interface_listen+0x6a>
   347b4:	4629      	mov	r1, r5
   347b6:	4620      	mov	r0, r4
   347b8:	f7ff f88a 	bl	338d0 <ip_interface_listen>
   347bc:	2800      	cmp	r0, #0
   347be:	dd03      	ble.n	347c8 <tls_interface_listen+0x68>
   347c0:	f009 f982 	bl	3dac8 <nrf_modem_os_errno_set>
   347c4:	f04f 30ff 	mov.w	r0, #4294967295
   347c8:	bd38      	pop	{r3, r4, r5, pc}
   347ca:	4620      	mov	r0, r4
   347cc:	680a      	ldr	r2, [r1, #0]
   347ce:	f7ff fe0d 	bl	343ec <secure_socket_attach_initiate>
   347d2:	2800      	cmp	r0, #0
   347d4:	d0ee      	beq.n	347b4 <tls_interface_listen+0x54>
   347d6:	e7f1      	b.n	347bc <tls_interface_listen+0x5c>
   347d8:	2009      	movs	r0, #9
   347da:	e7f1      	b.n	347c0 <tls_interface_listen+0x60>
   347dc:	205f      	movs	r0, #95	; 0x5f
   347de:	e7ef      	b.n	347c0 <tls_interface_listen+0x60>
   347e0:	20010e15 	.word	0x20010e15

000347e4 <tls_interface_accept>:
   347e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   347e8:	4605      	mov	r5, r0
   347ea:	460e      	mov	r6, r1
   347ec:	4617      	mov	r7, r2
   347ee:	4698      	mov	r8, r3
   347f0:	f04f 34ff 	mov.w	r4, #4294967295
   347f4:	f7fe fcb0 	bl	33158 <interface_socket_from_handle_get>
   347f8:	9401      	str	r4, [sp, #4]
   347fa:	2800      	cmp	r0, #0
   347fc:	d04b      	beq.n	34896 <tls_interface_accept+0xb2>
   347fe:	6803      	ldr	r3, [r0, #0]
   34800:	b29b      	uxth	r3, r3
   34802:	2b07      	cmp	r3, #7
   34804:	d147      	bne.n	34896 <tls_interface_accept+0xb2>
   34806:	6803      	ldr	r3, [r0, #0]
   34808:	00db      	lsls	r3, r3, #3
   3480a:	d506      	bpl.n	3481a <tls_interface_accept+0x36>
   3480c:	205f      	movs	r0, #95	; 0x5f
   3480e:	f009 f95b 	bl	3dac8 <nrf_modem_os_errno_set>
   34812:	4620      	mov	r0, r4
   34814:	b002      	add	sp, #8
   34816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3481a:	4643      	mov	r3, r8
   3481c:	463a      	mov	r2, r7
   3481e:	4631      	mov	r1, r6
   34820:	4628      	mov	r0, r5
   34822:	f7ff f8a3 	bl	3396c <ip_interface_accept>
   34826:	1e04      	subs	r4, r0, #0
   34828:	db2f      	blt.n	3488a <tls_interface_accept+0xa6>
   3482a:	f7fe fc95 	bl	33158 <interface_socket_from_handle_get>
   3482e:	2124      	movs	r1, #36	; 0x24
   34830:	6803      	ldr	r3, [r0, #0]
   34832:	4a1a      	ldr	r2, [pc, #104]	; (3489c <tls_interface_accept+0xb8>)
   34834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   34838:	6003      	str	r3, [r0, #0]
   3483a:	6803      	ldr	r3, [r0, #0]
   3483c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34840:	6003      	str	r3, [r0, #0]
   34842:	fb01 2305 	mla	r3, r1, r5, r2
   34846:	fb01 2104 	mla	r1, r1, r4, r2
   3484a:	f103 0524 	add.w	r5, r3, #36	; 0x24
   3484e:	f853 6b04 	ldr.w	r6, [r3], #4
   34852:	42ab      	cmp	r3, r5
   34854:	f841 6b04 	str.w	r6, [r1], #4
   34858:	d1f9      	bne.n	3484e <tls_interface_accept+0x6a>
   3485a:	2324      	movs	r3, #36	; 0x24
   3485c:	2102      	movs	r1, #2
   3485e:	4363      	muls	r3, r4
   34860:	54d1      	strb	r1, [r2, r3]
   34862:	6803      	ldr	r3, [r0, #0]
   34864:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34868:	0c1b      	lsrs	r3, r3, #16
   3486a:	041b      	lsls	r3, r3, #16
   3486c:	f043 030b 	orr.w	r3, r3, #11
   34870:	6003      	str	r3, [r0, #0]
   34872:	210c      	movs	r1, #12
   34874:	4620      	mov	r0, r4
   34876:	ab01      	add	r3, sp, #4
   34878:	f00a fb3b 	bl	3eef2 <ip_interface_wait>
   3487c:	4605      	mov	r5, r0
   3487e:	2800      	cmp	r0, #0
   34880:	d0c7      	beq.n	34812 <tls_interface_accept+0x2e>
   34882:	4620      	mov	r0, r4
   34884:	f7fe fdea 	bl	3345c <ip_interface_close>
   34888:	462c      	mov	r4, r5
   3488a:	4620      	mov	r0, r4
   3488c:	f009 f91c 	bl	3dac8 <nrf_modem_os_errno_set>
   34890:	f04f 34ff 	mov.w	r4, #4294967295
   34894:	e7bd      	b.n	34812 <tls_interface_accept+0x2e>
   34896:	2409      	movs	r4, #9
   34898:	e7f7      	b.n	3488a <tls_interface_accept+0xa6>
   3489a:	bf00      	nop
   3489c:	20010e15 	.word	0x20010e15

000348a0 <tls_interface_setopt>:
   348a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   348a2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   348a6:	4606      	mov	r6, r0
   348a8:	4615      	mov	r5, r2
   348aa:	461f      	mov	r7, r3
   348ac:	9c08      	ldr	r4, [sp, #32]
   348ae:	d004      	beq.n	348ba <tls_interface_setopt+0x1a>
   348b0:	b003      	add	sp, #12
   348b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   348b6:	f7ff b93d 	b.w	33b34 <ip_interface_setopt>
   348ba:	b923      	cbnz	r3, 348c6 <tls_interface_setopt+0x26>
   348bc:	2a05      	cmp	r2, #5
   348be:	d100      	bne.n	348c2 <tls_interface_setopt+0x22>
   348c0:	b10c      	cbz	r4, 348c6 <tls_interface_setopt+0x26>
   348c2:	200e      	movs	r0, #14
   348c4:	e077      	b.n	349b6 <tls_interface_setopt+0x116>
   348c6:	4630      	mov	r0, r6
   348c8:	f7fe fc46 	bl	33158 <interface_socket_from_handle_get>
   348cc:	4601      	mov	r1, r0
   348ce:	2800      	cmp	r0, #0
   348d0:	f000 8087 	beq.w	349e2 <tls_interface_setopt+0x142>
   348d4:	6803      	ldr	r3, [r0, #0]
   348d6:	b29b      	uxth	r3, r3
   348d8:	2b02      	cmp	r3, #2
   348da:	d007      	beq.n	348ec <tls_interface_setopt+0x4c>
   348dc:	6803      	ldr	r3, [r0, #0]
   348de:	b29b      	uxth	r3, r3
   348e0:	2b04      	cmp	r3, #4
   348e2:	d003      	beq.n	348ec <tls_interface_setopt+0x4c>
   348e4:	6803      	ldr	r3, [r0, #0]
   348e6:	b29b      	uxth	r3, r3
   348e8:	2b05      	cmp	r3, #5
   348ea:	d17a      	bne.n	349e2 <tls_interface_setopt+0x142>
   348ec:	3d01      	subs	r5, #1
   348ee:	2d08      	cmp	r5, #8
   348f0:	d879      	bhi.n	349e6 <tls_interface_setopt+0x146>
   348f2:	e8df f005 	tbb	[pc, r5]
   348f6:	2605      	.short	0x2605
   348f8:	55433818 	.word	0x55433818
   348fc:	6578      	.short	0x6578
   348fe:	71          	.byte	0x71
   348ff:	00          	.byte	0x00
   34900:	2c04      	cmp	r4, #4
   34902:	d174      	bne.n	349ee <tls_interface_setopt+0x14e>
   34904:	6838      	ldr	r0, [r7, #0]
   34906:	b930      	cbnz	r0, 34916 <tls_interface_setopt+0x76>
   34908:	2324      	movs	r3, #36	; 0x24
   3490a:	2202      	movs	r2, #2
   3490c:	435e      	muls	r6, r3
   3490e:	4b39      	ldr	r3, [pc, #228]	; (349f4 <tls_interface_setopt+0x154>)
   34910:	559a      	strb	r2, [r3, r6]
   34912:	b003      	add	sp, #12
   34914:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34916:	2801      	cmp	r0, #1
   34918:	d169      	bne.n	349ee <tls_interface_setopt+0x14e>
   3491a:	2324      	movs	r3, #36	; 0x24
   3491c:	435e      	muls	r6, r3
   3491e:	4b35      	ldr	r3, [pc, #212]	; (349f4 <tls_interface_setopt+0x154>)
   34920:	5598      	strb	r0, [r3, r6]
   34922:	2000      	movs	r0, #0
   34924:	e7f5      	b.n	34912 <tls_interface_setopt+0x72>
   34926:	2c01      	cmp	r4, #1
   34928:	d161      	bne.n	349ee <tls_interface_setopt+0x14e>
   3492a:	2f00      	cmp	r7, #0
   3492c:	d0c9      	beq.n	348c2 <tls_interface_setopt+0x22>
   3492e:	2024      	movs	r0, #36	; 0x24
   34930:	783b      	ldrb	r3, [r7, #0]
   34932:	4a30      	ldr	r2, [pc, #192]	; (349f4 <tls_interface_setopt+0x154>)
   34934:	3b00      	subs	r3, #0
   34936:	bf18      	it	ne
   34938:	2301      	movne	r3, #1
   3493a:	fb00 2606 	mla	r6, r0, r6, r2
   3493e:	7073      	strb	r3, [r6, #1]
   34940:	e7ef      	b.n	34922 <tls_interface_setopt+0x82>
   34942:	2c03      	cmp	r4, #3
   34944:	d953      	bls.n	349ee <tls_interface_setopt+0x14e>
   34946:	f014 0503 	ands.w	r5, r4, #3
   3494a:	d150      	bne.n	349ee <tls_interface_setopt+0x14e>
   3494c:	2324      	movs	r3, #36	; 0x24
   3494e:	435e      	muls	r6, r3
   34950:	4828      	ldr	r0, [pc, #160]	; (349f4 <tls_interface_setopt+0x154>)
   34952:	08a2      	lsrs	r2, r4, #2
   34954:	1983      	adds	r3, r0, r6
   34956:	70da      	strb	r2, [r3, #3]
   34958:	4639      	mov	r1, r7
   3495a:	4622      	mov	r2, r4
   3495c:	3604      	adds	r6, #4
   3495e:	4430      	add	r0, r6
   34960:	f00b face 	bl	3ff00 <memcpy>
   34964:	e7dd      	b.n	34922 <tls_interface_setopt+0x82>
   34966:	2c04      	cmp	r4, #4
   34968:	d141      	bne.n	349ee <tls_interface_setopt+0x14e>
   3496a:	683b      	ldr	r3, [r7, #0]
   3496c:	2b02      	cmp	r3, #2
   3496e:	d83e      	bhi.n	349ee <tls_interface_setopt+0x14e>
   34970:	2024      	movs	r0, #36	; 0x24
   34972:	4a20      	ldr	r2, [pc, #128]	; (349f4 <tls_interface_setopt+0x154>)
   34974:	fb00 2606 	mla	r6, r0, r6, r2
   34978:	70b3      	strb	r3, [r6, #2]
   3497a:	e7d2      	b.n	34922 <tls_interface_setopt+0x82>
   3497c:	4630      	mov	r0, r6
   3497e:	f7ff fd23 	bl	343c8 <hostname_free>
   34982:	2c00      	cmp	r4, #0
   34984:	d0cd      	beq.n	34922 <tls_interface_setopt+0x82>
   34986:	4620      	mov	r0, r4
   34988:	f7f6 f950 	bl	2ac2c <nrf_modem_os_alloc>
   3498c:	4b1a      	ldr	r3, [pc, #104]	; (349f8 <tls_interface_setopt+0x158>)
   3498e:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   34992:	b350      	cbz	r0, 349ea <tls_interface_setopt+0x14a>
   34994:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   34998:	4622      	mov	r2, r4
   3499a:	4639      	mov	r1, r7
   3499c:	6074      	str	r4, [r6, #4]
   3499e:	e7df      	b.n	34960 <tls_interface_setopt+0xc0>
   349a0:	f247 0301 	movw	r3, #28673	; 0x7001
   349a4:	e9cd 7400 	strd	r7, r4, [sp]
   349a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   349ac:	4630      	mov	r0, r6
   349ae:	f00a fc48 	bl	3f242 <ip_interface_socketoption_send>
   349b2:	2800      	cmp	r0, #0
   349b4:	d0b5      	beq.n	34922 <tls_interface_setopt+0x82>
   349b6:	f009 f887 	bl	3dac8 <nrf_modem_os_errno_set>
   349ba:	f04f 30ff 	mov.w	r0, #4294967295
   349be:	e7a8      	b.n	34912 <tls_interface_setopt+0x72>
   349c0:	2c04      	cmp	r4, #4
   349c2:	d114      	bne.n	349ee <tls_interface_setopt+0x14e>
   349c4:	6838      	ldr	r0, [r7, #0]
   349c6:	f7ff fce3 	bl	34390 <secure_socket_dtls_timeout_check>
   349ca:	2800      	cmp	r0, #0
   349cc:	d1f3      	bne.n	349b6 <tls_interface_setopt+0x116>
   349ce:	f247 0302 	movw	r3, #28674	; 0x7002
   349d2:	e9cd 7400 	strd	r7, r4, [sp]
   349d6:	e7e7      	b.n	349a8 <tls_interface_setopt+0x108>
   349d8:	f247 0303 	movw	r3, #28675	; 0x7003
   349dc:	e9cd 7400 	strd	r7, r4, [sp]
   349e0:	e7e2      	b.n	349a8 <tls_interface_setopt+0x108>
   349e2:	2009      	movs	r0, #9
   349e4:	e7e7      	b.n	349b6 <tls_interface_setopt+0x116>
   349e6:	206d      	movs	r0, #109	; 0x6d
   349e8:	e7e5      	b.n	349b6 <tls_interface_setopt+0x116>
   349ea:	200c      	movs	r0, #12
   349ec:	e7e3      	b.n	349b6 <tls_interface_setopt+0x116>
   349ee:	2016      	movs	r0, #22
   349f0:	e7e1      	b.n	349b6 <tls_interface_setopt+0x116>
   349f2:	bf00      	nop
   349f4:	20010e15 	.word	0x20010e15
   349f8:	20010d00 	.word	0x20010d00

000349fc <tls_interface_getopt>:
   349fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   349fe:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   34a02:	b085      	sub	sp, #20
   34a04:	4606      	mov	r6, r0
   34a06:	4617      	mov	r7, r2
   34a08:	461d      	mov	r5, r3
   34a0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   34a0c:	d004      	beq.n	34a18 <tls_interface_getopt+0x1c>
   34a0e:	b005      	add	sp, #20
   34a10:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   34a14:	f00a bc7b 	b.w	3f30e <ip_interface_getopt>
   34a18:	b103      	cbz	r3, 34a1c <tls_interface_getopt+0x20>
   34a1a:	b92c      	cbnz	r4, 34a28 <tls_interface_getopt+0x2c>
   34a1c:	200e      	movs	r0, #14
   34a1e:	f009 f853 	bl	3dac8 <nrf_modem_os_errno_set>
   34a22:	f04f 30ff 	mov.w	r0, #4294967295
   34a26:	e051      	b.n	34acc <tls_interface_getopt+0xd0>
   34a28:	6823      	ldr	r3, [r4, #0]
   34a2a:	b90b      	cbnz	r3, 34a30 <tls_interface_getopt+0x34>
   34a2c:	2016      	movs	r0, #22
   34a2e:	e7f6      	b.n	34a1e <tls_interface_getopt+0x22>
   34a30:	f7fe fb92 	bl	33158 <interface_socket_from_handle_get>
   34a34:	4601      	mov	r1, r0
   34a36:	2800      	cmp	r0, #0
   34a38:	d068      	beq.n	34b0c <tls_interface_getopt+0x110>
   34a3a:	1e7a      	subs	r2, r7, #1
   34a3c:	2a07      	cmp	r2, #7
   34a3e:	d871      	bhi.n	34b24 <tls_interface_getopt+0x128>
   34a40:	e8df f002 	tbb	[pc, r2]
   34a44:	461a2904 	.word	0x461a2904
   34a48:	5f705370 	.word	0x5f705370
   34a4c:	6823      	ldr	r3, [r4, #0]
   34a4e:	2124      	movs	r1, #36	; 0x24
   34a50:	2b04      	cmp	r3, #4
   34a52:	bf88      	it	hi
   34a54:	2304      	movhi	r3, #4
   34a56:	fb01 f606 	mul.w	r6, r1, r6
   34a5a:	bf88      	it	hi
   34a5c:	6023      	strhi	r3, [r4, #0]
   34a5e:	4b32      	ldr	r3, [pc, #200]	; (34b28 <tls_interface_getopt+0x12c>)
   34a60:	a903      	add	r1, sp, #12
   34a62:	5d9b      	ldrb	r3, [r3, r6]
   34a64:	1e5a      	subs	r2, r3, #1
   34a66:	4253      	negs	r3, r2
   34a68:	4153      	adcs	r3, r2
   34a6a:	6822      	ldr	r2, [r4, #0]
   34a6c:	9303      	str	r3, [sp, #12]
   34a6e:	4628      	mov	r0, r5
   34a70:	f00b fa46 	bl	3ff00 <memcpy>
   34a74:	2000      	movs	r0, #0
   34a76:	e029      	b.n	34acc <tls_interface_getopt+0xd0>
   34a78:	6823      	ldr	r3, [r4, #0]
   34a7a:	2b00      	cmp	r3, #0
   34a7c:	d0d6      	beq.n	34a2c <tls_interface_getopt+0x30>
   34a7e:	2124      	movs	r1, #36	; 0x24
   34a80:	2b01      	cmp	r3, #1
   34a82:	bf88      	it	hi
   34a84:	2301      	movhi	r3, #1
   34a86:	4828      	ldr	r0, [pc, #160]	; (34b28 <tls_interface_getopt+0x12c>)
   34a88:	bf88      	it	hi
   34a8a:	6023      	strhi	r3, [r4, #0]
   34a8c:	fb01 0106 	mla	r1, r1, r6, r0
   34a90:	6822      	ldr	r2, [r4, #0]
   34a92:	3101      	adds	r1, #1
   34a94:	e7eb      	b.n	34a6e <tls_interface_getopt+0x72>
   34a96:	2324      	movs	r3, #36	; 0x24
   34a98:	4923      	ldr	r1, [pc, #140]	; (34b28 <tls_interface_getopt+0x12c>)
   34a9a:	6822      	ldr	r2, [r4, #0]
   34a9c:	fb03 1306 	mla	r3, r3, r6, r1
   34aa0:	78d8      	ldrb	r0, [r3, #3]
   34aa2:	0793      	lsls	r3, r2, #30
   34aa4:	bf14      	ite	ne
   34aa6:	2300      	movne	r3, #0
   34aa8:	0893      	lsreq	r3, r2, #2
   34aaa:	4283      	cmp	r3, r0
   34aac:	bf28      	it	cs
   34aae:	4603      	movcs	r3, r0
   34ab0:	009f      	lsls	r7, r3, #2
   34ab2:	b143      	cbz	r3, 34ac6 <tls_interface_getopt+0xca>
   34ab4:	2024      	movs	r0, #36	; 0x24
   34ab6:	fb00 1106 	mla	r1, r0, r6, r1
   34aba:	42ba      	cmp	r2, r7
   34abc:	bf88      	it	hi
   34abe:	6027      	strhi	r7, [r4, #0]
   34ac0:	6822      	ldr	r2, [r4, #0]
   34ac2:	3104      	adds	r1, #4
   34ac4:	e7d3      	b.n	34a6e <tls_interface_getopt+0x72>
   34ac6:	2800      	cmp	r0, #0
   34ac8:	d1b0      	bne.n	34a2c <tls_interface_getopt+0x30>
   34aca:	6020      	str	r0, [r4, #0]
   34acc:	b005      	add	sp, #20
   34ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34ad0:	6823      	ldr	r3, [r4, #0]
   34ad2:	2124      	movs	r1, #36	; 0x24
   34ad4:	2b04      	cmp	r3, #4
   34ad6:	bf88      	it	hi
   34ad8:	2304      	movhi	r3, #4
   34ada:	4813      	ldr	r0, [pc, #76]	; (34b28 <tls_interface_getopt+0x12c>)
   34adc:	bf88      	it	hi
   34ade:	6023      	strhi	r3, [r4, #0]
   34ae0:	fb01 0106 	mla	r1, r1, r6, r0
   34ae4:	6822      	ldr	r2, [r4, #0]
   34ae6:	3102      	adds	r1, #2
   34ae8:	e7c1      	b.n	34a6e <tls_interface_getopt+0x72>
   34aea:	f247 0301 	movw	r3, #28673	; 0x7001
   34aee:	e9cd 5400 	strd	r5, r4, [sp]
   34af2:	f44f 7280 	mov.w	r2, #256	; 0x100
   34af6:	4630      	mov	r0, r6
   34af8:	f7fe fe14 	bl	33724 <ip_interface_socketoption_get>
   34afc:	2800      	cmp	r0, #0
   34afe:	d0e5      	beq.n	34acc <tls_interface_getopt+0xd0>
   34b00:	e78d      	b.n	34a1e <tls_interface_getopt+0x22>
   34b02:	6823      	ldr	r3, [r4, #0]
   34b04:	2b04      	cmp	r3, #4
   34b06:	d903      	bls.n	34b10 <tls_interface_getopt+0x114>
   34b08:	2304      	movs	r3, #4
   34b0a:	6023      	str	r3, [r4, #0]
   34b0c:	2009      	movs	r0, #9
   34b0e:	e786      	b.n	34a1e <tls_interface_getopt+0x22>
   34b10:	6828      	ldr	r0, [r5, #0]
   34b12:	f7ff fc3d 	bl	34390 <secure_socket_dtls_timeout_check>
   34b16:	2800      	cmp	r0, #0
   34b18:	d181      	bne.n	34a1e <tls_interface_getopt+0x22>
   34b1a:	f247 0302 	movw	r3, #28674	; 0x7002
   34b1e:	e9cd 5400 	strd	r5, r4, [sp]
   34b22:	e7e6      	b.n	34af2 <tls_interface_getopt+0xf6>
   34b24:	206d      	movs	r0, #109	; 0x6d
   34b26:	e77a      	b.n	34a1e <tls_interface_getopt+0x22>
   34b28:	20010e15 	.word	0x20010e15

00034b2c <tls_rpc_ip_event_handler>:
   34b2c:	b570      	push	{r4, r5, r6, lr}
   34b2e:	460c      	mov	r4, r1
   34b30:	f248 0181 	movw	r1, #32897	; 0x8081
   34b34:	428b      	cmp	r3, r1
   34b36:	4606      	mov	r6, r0
   34b38:	d035      	beq.n	34ba6 <tls_rpc_ip_event_handler+0x7a>
   34b3a:	f249 0182 	movw	r1, #36994	; 0x9082
   34b3e:	428b      	cmp	r3, r1
   34b40:	d040      	beq.n	34bc4 <tls_rpc_ip_event_handler+0x98>
   34b42:	f248 0102 	movw	r1, #32770	; 0x8002
   34b46:	428b      	cmp	r3, r1
   34b48:	d161      	bne.n	34c0e <tls_rpc_ip_event_handler+0xe2>
   34b4a:	2c00      	cmp	r4, #0
   34b4c:	d05f      	beq.n	34c0e <tls_rpc_ip_event_handler+0xe2>
   34b4e:	6963      	ldr	r3, [r4, #20]
   34b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   34b54:	d002      	beq.n	34b5c <tls_rpc_ip_event_handler+0x30>
   34b56:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   34b5a:	d158      	bne.n	34c0e <tls_rpc_ip_event_handler+0xe2>
   34b5c:	6823      	ldr	r3, [r4, #0]
   34b5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   34b62:	6023      	str	r3, [r4, #0]
   34b64:	6955      	ldr	r5, [r2, #20]
   34b66:	2d00      	cmp	r5, #0
   34b68:	d14d      	bne.n	34c06 <tls_rpc_ip_event_handler+0xda>
   34b6a:	6823      	ldr	r3, [r4, #0]
   34b6c:	0c1b      	lsrs	r3, r3, #16
   34b6e:	041b      	lsls	r3, r3, #16
   34b70:	f043 0305 	orr.w	r3, r3, #5
   34b74:	6023      	str	r3, [r4, #0]
   34b76:	6823      	ldr	r3, [r4, #0]
   34b78:	00db      	lsls	r3, r3, #3
   34b7a:	d401      	bmi.n	34b80 <tls_rpc_ip_event_handler+0x54>
   34b7c:	2000      	movs	r0, #0
   34b7e:	e020      	b.n	34bc2 <tls_rpc_ip_event_handler+0x96>
   34b80:	2324      	movs	r3, #36	; 0x24
   34b82:	4373      	muls	r3, r6
   34b84:	4a23      	ldr	r2, [pc, #140]	; (34c14 <tls_rpc_ip_event_handler+0xe8>)
   34b86:	5cd3      	ldrb	r3, [r2, r3]
   34b88:	2b02      	cmp	r3, #2
   34b8a:	d1f7      	bne.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34b8c:	4621      	mov	r1, r4
   34b8e:	4630      	mov	r0, r6
   34b90:	f00a fc2f 	bl	3f3f2 <secure_client_socket>
   34b94:	2800      	cmp	r0, #0
   34b96:	d0f1      	beq.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34b98:	2877      	cmp	r0, #119	; 0x77
   34b9a:	d0ef      	beq.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34b9c:	6060      	str	r0, [r4, #4]
   34b9e:	6823      	ldr	r3, [r4, #0]
   34ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34ba4:	e02d      	b.n	34c02 <tls_rpc_ip_event_handler+0xd6>
   34ba6:	2c00      	cmp	r4, #0
   34ba8:	d0e8      	beq.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34baa:	6823      	ldr	r3, [r4, #0]
   34bac:	b29b      	uxth	r3, r3
   34bae:	2b0a      	cmp	r3, #10
   34bb0:	d1e4      	bne.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34bb2:	6950      	ldr	r0, [r2, #20]
   34bb4:	bb40      	cbnz	r0, 34c08 <tls_rpc_ip_event_handler+0xdc>
   34bb6:	6823      	ldr	r3, [r4, #0]
   34bb8:	0c1b      	lsrs	r3, r3, #16
   34bba:	041b      	lsls	r3, r3, #16
   34bbc:	f043 030b 	orr.w	r3, r3, #11
   34bc0:	6023      	str	r3, [r4, #0]
   34bc2:	bd70      	pop	{r4, r5, r6, pc}
   34bc4:	2c00      	cmp	r4, #0
   34bc6:	d0d9      	beq.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34bc8:	6823      	ldr	r3, [r4, #0]
   34bca:	b29b      	uxth	r3, r3
   34bcc:	2b0b      	cmp	r3, #11
   34bce:	d1d5      	bne.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34bd0:	6915      	ldr	r5, [r2, #16]
   34bd2:	b9c5      	cbnz	r5, 34c06 <tls_rpc_ip_event_handler+0xda>
   34bd4:	6823      	ldr	r3, [r4, #0]
   34bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   34bda:	6023      	str	r3, [r4, #0]
   34bdc:	f7ff fbf4 	bl	343c8 <hostname_free>
   34be0:	6823      	ldr	r3, [r4, #0]
   34be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   34be6:	6023      	str	r3, [r4, #0]
   34be8:	6823      	ldr	r3, [r4, #0]
   34bea:	0c1b      	lsrs	r3, r3, #16
   34bec:	041b      	lsls	r3, r3, #16
   34bee:	f043 030c 	orr.w	r3, r3, #12
   34bf2:	6023      	str	r3, [r4, #0]
   34bf4:	6823      	ldr	r3, [r4, #0]
   34bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34bfa:	6023      	str	r3, [r4, #0]
   34bfc:	6823      	ldr	r3, [r4, #0]
   34bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   34c02:	6023      	str	r3, [r4, #0]
   34c04:	e7ba      	b.n	34b7c <tls_rpc_ip_event_handler+0x50>
   34c06:	4628      	mov	r0, r5
   34c08:	f7fe fb6c 	bl	332e4 <rpc_error_to_nrf_errno>
   34c0c:	e7c6      	b.n	34b9c <tls_rpc_ip_event_handler+0x70>
   34c0e:	2001      	movs	r0, #1
   34c10:	e7d7      	b.n	34bc2 <tls_rpc_ip_event_handler+0x96>
   34c12:	bf00      	nop
   34c14:	20010e15 	.word	0x20010e15

00034c18 <at_cmd_send>:
   34c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34c1a:	4615      	mov	r5, r2
   34c1c:	f06f 0258 	mvn.w	r2, #88	; 0x58
   34c20:	2300      	movs	r3, #0
   34c22:	7302      	strb	r2, [r0, #12]
   34c24:	2204      	movs	r2, #4
   34c26:	4c0d      	ldr	r4, [pc, #52]	; (34c5c <at_cmd_send+0x44>)
   34c28:	7343      	strb	r3, [r0, #13]
   34c2a:	7383      	strb	r3, [r0, #14]
   34c2c:	73c3      	strb	r3, [r0, #15]
   34c2e:	7202      	strb	r2, [r0, #8]
   34c30:	7243      	strb	r3, [r0, #9]
   34c32:	7283      	strb	r3, [r0, #10]
   34c34:	72c3      	strb	r3, [r0, #11]
   34c36:	4602      	mov	r2, r0
   34c38:	b289      	uxth	r1, r1
   34c3a:	2003      	movs	r0, #3
   34c3c:	7023      	strb	r3, [r4, #0]
   34c3e:	f00a f8a9 	bl	3ed94 <rpc_client_request_send>
   34c42:	f04f 33ff 	mov.w	r3, #4294967295
   34c46:	9301      	str	r3, [sp, #4]
   34c48:	7823      	ldrb	r3, [r4, #0]
   34c4a:	42ab      	cmp	r3, r5
   34c4c:	d101      	bne.n	34c52 <at_cmd_send+0x3a>
   34c4e:	b003      	add	sp, #12
   34c50:	bd30      	pop	{r4, r5, pc}
   34c52:	a901      	add	r1, sp, #4
   34c54:	2000      	movs	r0, #0
   34c56:	f008 fe9f 	bl	3d998 <nrf_modem_os_timedwait>
   34c5a:	e7f5      	b.n	34c48 <at_cmd_send+0x30>
   34c5c:	20010f35 	.word	0x20010f35

00034c60 <at_response_match>:
   34c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34c62:	4605      	mov	r5, r0
   34c64:	2400      	movs	r4, #0
   34c66:	4f10      	ldr	r7, [pc, #64]	; (34ca8 <at_response_match+0x48>)
   34c68:	f857 6b04 	ldr.w	r6, [r7], #4
   34c6c:	4628      	mov	r0, r5
   34c6e:	4631      	mov	r1, r6
   34c70:	f00b fb43 	bl	402fa <strstr>
   34c74:	b928      	cbnz	r0, 34c82 <at_response_match+0x22>
   34c76:	3401      	adds	r4, #1
   34c78:	2c04      	cmp	r4, #4
   34c7a:	d1f5      	bne.n	34c68 <at_response_match+0x8>
   34c7c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   34c80:	e00e      	b.n	34ca0 <at_response_match+0x40>
   34c82:	2c01      	cmp	r4, #1
   34c84:	d0fa      	beq.n	34c7c <at_response_match+0x1c>
   34c86:	1ea3      	subs	r3, r4, #2
   34c88:	2b01      	cmp	r3, #1
   34c8a:	d80a      	bhi.n	34ca2 <at_response_match+0x42>
   34c8c:	4630      	mov	r0, r6
   34c8e:	f7ec fc55 	bl	2153c <strlen>
   34c92:	220a      	movs	r2, #10
   34c94:	2100      	movs	r1, #0
   34c96:	4428      	add	r0, r5
   34c98:	f005 fc40 	bl	3a51c <strtol>
   34c9c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   34ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34ca2:	2000      	movs	r0, #0
   34ca4:	e7fc      	b.n	34ca0 <at_response_match+0x40>
   34ca6:	bf00      	nop
   34ca8:	00045934 	.word	0x00045934

00034cac <at_vprintf>:
   34cac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   34cb0:	4607      	mov	r7, r0
   34cb2:	460e      	mov	r6, r1
   34cb4:	481d      	ldr	r0, [pc, #116]	; (34d2c <at_vprintf+0x80>)
   34cb6:	2100      	movs	r1, #0
   34cb8:	4690      	mov	r8, r2
   34cba:	461d      	mov	r5, r3
   34cbc:	9301      	str	r3, [sp, #4]
   34cbe:	f005 fd5b 	bl	3a778 <vsniprintf>
   34cc2:	3001      	adds	r0, #1
   34cc4:	f00a f860 	bl	3ed88 <rpc_client_request_alloc>
   34cc8:	4604      	mov	r4, r0
   34cca:	b360      	cbz	r0, 34d26 <at_vprintf+0x7a>
   34ccc:	9501      	str	r5, [sp, #4]
   34cce:	462b      	mov	r3, r5
   34cd0:	6841      	ldr	r1, [r0, #4]
   34cd2:	4642      	mov	r2, r8
   34cd4:	6800      	ldr	r0, [r0, #0]
   34cd6:	f005 fd4f 	bl	3a778 <vsniprintf>
   34cda:	2202      	movs	r2, #2
   34cdc:	2101      	movs	r1, #1
   34cde:	4620      	mov	r0, r4
   34ce0:	f7ff ff9a 	bl	34c18 <at_cmd_send>
   34ce4:	4d12      	ldr	r5, [pc, #72]	; (34d30 <at_vprintf+0x84>)
   34ce6:	b97f      	cbnz	r7, 34d08 <at_vprintf+0x5c>
   34ce8:	682b      	ldr	r3, [r5, #0]
   34cea:	6818      	ldr	r0, [r3, #0]
   34cec:	f7ff ffb8 	bl	34c60 <at_response_match>
   34cf0:	4604      	mov	r4, r0
   34cf2:	682b      	ldr	r3, [r5, #0]
   34cf4:	6818      	ldr	r0, [r3, #0]
   34cf6:	f00a f857 	bl	3eda8 <rpc_client_data_free>
   34cfa:	6828      	ldr	r0, [r5, #0]
   34cfc:	f00a f851 	bl	3eda2 <rpc_client_message_free>
   34d00:	4620      	mov	r0, r4
   34d02:	b002      	add	sp, #8
   34d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34d08:	682c      	ldr	r4, [r5, #0]
   34d0a:	4638      	mov	r0, r7
   34d0c:	6862      	ldr	r2, [r4, #4]
   34d0e:	6821      	ldr	r1, [r4, #0]
   34d10:	42b2      	cmp	r2, r6
   34d12:	bf28      	it	cs
   34d14:	4632      	movcs	r2, r6
   34d16:	f00b f8f3 	bl	3ff00 <memcpy>
   34d1a:	6863      	ldr	r3, [r4, #4]
   34d1c:	42b3      	cmp	r3, r6
   34d1e:	d9e3      	bls.n	34ce8 <at_vprintf+0x3c>
   34d20:	f06f 0406 	mvn.w	r4, #6
   34d24:	e7e5      	b.n	34cf2 <at_vprintf+0x46>
   34d26:	f06f 040b 	mvn.w	r4, #11
   34d2a:	e7e9      	b.n	34d00 <at_vprintf+0x54>
   34d2c:	00041380 	.word	0x00041380
   34d30:	20010d50 	.word	0x20010d50

00034d34 <nrf_modem_at_init>:
   34d34:	2201      	movs	r2, #1
   34d36:	b508      	push	{r3, lr}
   34d38:	4611      	mov	r1, r2
   34d3a:	4808      	ldr	r0, [pc, #32]	; (34d5c <nrf_modem_at_init+0x28>)
   34d3c:	f7f5 fec2 	bl	2aac4 <nrf_modem_os_sem_init>
   34d40:	2000      	movs	r0, #0
   34d42:	f00a f821 	bl	3ed88 <rpc_client_request_alloc>
   34d46:	b128      	cbz	r0, 34d54 <nrf_modem_at_init+0x20>
   34d48:	2201      	movs	r2, #1
   34d4a:	2105      	movs	r1, #5
   34d4c:	f7ff ff64 	bl	34c18 <at_cmd_send>
   34d50:	2000      	movs	r0, #0
   34d52:	bd08      	pop	{r3, pc}
   34d54:	f06f 000b 	mvn.w	r0, #11
   34d58:	e7fb      	b.n	34d52 <nrf_modem_at_init+0x1e>
   34d5a:	bf00      	nop
   34d5c:	20010d40 	.word	0x20010d40

00034d60 <nrf_modem_at_notif_handler_set>:
   34d60:	4b01      	ldr	r3, [pc, #4]	; (34d68 <nrf_modem_at_notif_handler_set+0x8>)
   34d62:	6018      	str	r0, [r3, #0]
   34d64:	2000      	movs	r0, #0
   34d66:	4770      	bx	lr
   34d68:	20010d4c 	.word	0x20010d4c

00034d6c <nrf_modem_at_printf>:
   34d6c:	b40f      	push	{r0, r1, r2, r3}
   34d6e:	4b11      	ldr	r3, [pc, #68]	; (34db4 <nrf_modem_at_printf+0x48>)
   34d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34d72:	781b      	ldrb	r3, [r3, #0]
   34d74:	9c06      	ldr	r4, [sp, #24]
   34d76:	b1bb      	cbz	r3, 34da8 <nrf_modem_at_printf+0x3c>
   34d78:	b1cc      	cbz	r4, 34dae <nrf_modem_at_printf+0x42>
   34d7a:	4d0f      	ldr	r5, [pc, #60]	; (34db8 <nrf_modem_at_printf+0x4c>)
   34d7c:	f04f 31ff 	mov.w	r1, #4294967295
   34d80:	6828      	ldr	r0, [r5, #0]
   34d82:	f7f5 fef1 	bl	2ab68 <nrf_modem_os_sem_take>
   34d86:	2100      	movs	r1, #0
   34d88:	4622      	mov	r2, r4
   34d8a:	ab07      	add	r3, sp, #28
   34d8c:	4608      	mov	r0, r1
   34d8e:	9301      	str	r3, [sp, #4]
   34d90:	f7ff ff8c 	bl	34cac <at_vprintf>
   34d94:	4604      	mov	r4, r0
   34d96:	6828      	ldr	r0, [r5, #0]
   34d98:	f7f5 fec8 	bl	2ab2c <nrf_modem_os_sem_give>
   34d9c:	4620      	mov	r0, r4
   34d9e:	b003      	add	sp, #12
   34da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   34da4:	b004      	add	sp, #16
   34da6:	4770      	bx	lr
   34da8:	f04f 34ff 	mov.w	r4, #4294967295
   34dac:	e7f6      	b.n	34d9c <nrf_modem_at_printf+0x30>
   34dae:	f06f 040d 	mvn.w	r4, #13
   34db2:	e7f3      	b.n	34d9c <nrf_modem_at_printf+0x30>
   34db4:	20010f3c 	.word	0x20010f3c
   34db8:	20010d40 	.word	0x20010d40

00034dbc <nrf_modem_at_cmd>:
   34dbc:	b40c      	push	{r2, r3}
   34dbe:	4b2e      	ldr	r3, [pc, #184]	; (34e78 <nrf_modem_at_cmd+0xbc>)
   34dc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   34dc4:	781b      	ldrb	r3, [r3, #0]
   34dc6:	4605      	mov	r5, r0
   34dc8:	460f      	mov	r7, r1
   34dca:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   34dce:	2b00      	cmp	r3, #0
   34dd0:	d049      	beq.n	34e66 <nrf_modem_at_cmd+0xaa>
   34dd2:	2800      	cmp	r0, #0
   34dd4:	d04a      	beq.n	34e6c <nrf_modem_at_cmd+0xb0>
   34dd6:	f1b8 0f00 	cmp.w	r8, #0
   34dda:	d047      	beq.n	34e6c <nrf_modem_at_cmd+0xb0>
   34ddc:	2900      	cmp	r1, #0
   34dde:	d048      	beq.n	34e72 <nrf_modem_at_cmd+0xb6>
   34de0:	4b26      	ldr	r3, [pc, #152]	; (34e7c <nrf_modem_at_cmd+0xc0>)
   34de2:	681a      	ldr	r2, [r3, #0]
   34de4:	4699      	mov	r9, r3
   34de6:	b1d2      	cbz	r2, 34e1e <nrf_modem_at_cmd+0x62>
   34de8:	4e25      	ldr	r6, [pc, #148]	; (34e80 <nrf_modem_at_cmd+0xc4>)
   34dea:	6833      	ldr	r3, [r6, #0]
   34dec:	b1bb      	cbz	r3, 34e1e <nrf_modem_at_cmd+0x62>
   34dee:	2400      	movs	r4, #0
   34df0:	f8d9 3000 	ldr.w	r3, [r9]
   34df4:	429c      	cmp	r4, r3
   34df6:	d212      	bcs.n	34e1e <nrf_modem_at_cmd+0x62>
   34df8:	6833      	ldr	r3, [r6, #0]
   34dfa:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
   34dfe:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   34e02:	f7ec fb9b 	bl	2153c <strlen>
   34e06:	6833      	ldr	r3, [r6, #0]
   34e08:	4602      	mov	r2, r0
   34e0a:	4641      	mov	r1, r8
   34e0c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   34e10:	f00b fa2d 	bl	4026e <strncmp>
   34e14:	b9a8      	cbnz	r0, 34e42 <nrf_modem_at_cmd+0x86>
   34e16:	6833      	ldr	r3, [r6, #0]
   34e18:	4453      	add	r3, sl
   34e1a:	685b      	ldr	r3, [r3, #4]
   34e1c:	b99b      	cbnz	r3, 34e46 <nrf_modem_at_cmd+0x8a>
   34e1e:	4e19      	ldr	r6, [pc, #100]	; (34e84 <nrf_modem_at_cmd+0xc8>)
   34e20:	f04f 31ff 	mov.w	r1, #4294967295
   34e24:	6830      	ldr	r0, [r6, #0]
   34e26:	f7f5 fe9f 	bl	2ab68 <nrf_modem_os_sem_take>
   34e2a:	ab0b      	add	r3, sp, #44	; 0x2c
   34e2c:	4642      	mov	r2, r8
   34e2e:	4639      	mov	r1, r7
   34e30:	4628      	mov	r0, r5
   34e32:	9301      	str	r3, [sp, #4]
   34e34:	f7ff ff3a 	bl	34cac <at_vprintf>
   34e38:	4604      	mov	r4, r0
   34e3a:	6830      	ldr	r0, [r6, #0]
   34e3c:	f7f5 fe76 	bl	2ab2c <nrf_modem_os_sem_give>
   34e40:	e00b      	b.n	34e5a <nrf_modem_at_cmd+0x9e>
   34e42:	3401      	adds	r4, #1
   34e44:	e7d4      	b.n	34df0 <nrf_modem_at_cmd+0x34>
   34e46:	4642      	mov	r2, r8
   34e48:	4639      	mov	r1, r7
   34e4a:	4628      	mov	r0, r5
   34e4c:	4798      	blx	r3
   34e4e:	1e04      	subs	r4, r0, #0
   34e50:	db03      	blt.n	34e5a <nrf_modem_at_cmd+0x9e>
   34e52:	4628      	mov	r0, r5
   34e54:	f7ff ff04 	bl	34c60 <at_response_match>
   34e58:	4604      	mov	r4, r0
   34e5a:	4620      	mov	r0, r4
   34e5c:	b002      	add	sp, #8
   34e5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34e62:	b002      	add	sp, #8
   34e64:	4770      	bx	lr
   34e66:	f04f 34ff 	mov.w	r4, #4294967295
   34e6a:	e7f6      	b.n	34e5a <nrf_modem_at_cmd+0x9e>
   34e6c:	f06f 040d 	mvn.w	r4, #13
   34e70:	e7f3      	b.n	34e5a <nrf_modem_at_cmd+0x9e>
   34e72:	f06f 0415 	mvn.w	r4, #21
   34e76:	e7f0      	b.n	34e5a <nrf_modem_at_cmd+0x9e>
   34e78:	20010f3c 	.word	0x20010f3c
   34e7c:	20010d48 	.word	0x20010d48
   34e80:	20010d44 	.word	0x20010d44
   34e84:	20010d40 	.word	0x20010d40

00034e88 <nrf_modem_at_scanf>:
   34e88:	b40e      	push	{r1, r2, r3}
   34e8a:	4b23      	ldr	r3, [pc, #140]	; (34f18 <nrf_modem_at_scanf+0x90>)
   34e8c:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
   34e8e:	781b      	ldrb	r3, [r3, #0]
   34e90:	4605      	mov	r5, r0
   34e92:	9f07      	ldr	r7, [sp, #28]
   34e94:	2b00      	cmp	r3, #0
   34e96:	d039      	beq.n	34f0c <nrf_modem_at_scanf+0x84>
   34e98:	2800      	cmp	r0, #0
   34e9a:	d03a      	beq.n	34f12 <nrf_modem_at_scanf+0x8a>
   34e9c:	2f00      	cmp	r7, #0
   34e9e:	d038      	beq.n	34f12 <nrf_modem_at_scanf+0x8a>
   34ea0:	4e1e      	ldr	r6, [pc, #120]	; (34f1c <nrf_modem_at_scanf+0x94>)
   34ea2:	f04f 31ff 	mov.w	r1, #4294967295
   34ea6:	6830      	ldr	r0, [r6, #0]
   34ea8:	f7f5 fe5e 	bl	2ab68 <nrf_modem_os_sem_take>
   34eac:	4628      	mov	r0, r5
   34eae:	f7ec fb45 	bl	2153c <strlen>
   34eb2:	3001      	adds	r0, #1
   34eb4:	f009 ff68 	bl	3ed88 <rpc_client_request_alloc>
   34eb8:	4604      	mov	r4, r0
   34eba:	b320      	cbz	r0, 34f06 <nrf_modem_at_scanf+0x7e>
   34ebc:	4629      	mov	r1, r5
   34ebe:	6800      	ldr	r0, [r0, #0]
   34ec0:	4d17      	ldr	r5, [pc, #92]	; (34f20 <nrf_modem_at_scanf+0x98>)
   34ec2:	f00b f9cc 	bl	4025e <strcpy>
   34ec6:	4620      	mov	r0, r4
   34ec8:	2202      	movs	r2, #2
   34eca:	2101      	movs	r1, #1
   34ecc:	f7ff fea4 	bl	34c18 <at_cmd_send>
   34ed0:	682b      	ldr	r3, [r5, #0]
   34ed2:	aa08      	add	r2, sp, #32
   34ed4:	4639      	mov	r1, r7
   34ed6:	6818      	ldr	r0, [r3, #0]
   34ed8:	9201      	str	r2, [sp, #4]
   34eda:	f005 fc7f 	bl	3a7dc <vsiscanf>
   34ede:	682b      	ldr	r3, [r5, #0]
   34ee0:	1e04      	subs	r4, r0, #0
   34ee2:	6818      	ldr	r0, [r3, #0]
   34ee4:	bf08      	it	eq
   34ee6:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   34eea:	f009 ff5d 	bl	3eda8 <rpc_client_data_free>
   34eee:	6828      	ldr	r0, [r5, #0]
   34ef0:	f009 ff57 	bl	3eda2 <rpc_client_message_free>
   34ef4:	6830      	ldr	r0, [r6, #0]
   34ef6:	f7f5 fe19 	bl	2ab2c <nrf_modem_os_sem_give>
   34efa:	4620      	mov	r0, r4
   34efc:	b002      	add	sp, #8
   34efe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   34f02:	b003      	add	sp, #12
   34f04:	4770      	bx	lr
   34f06:	f06f 040b 	mvn.w	r4, #11
   34f0a:	e7f3      	b.n	34ef4 <nrf_modem_at_scanf+0x6c>
   34f0c:	f04f 34ff 	mov.w	r4, #4294967295
   34f10:	e7f3      	b.n	34efa <nrf_modem_at_scanf+0x72>
   34f12:	f06f 040d 	mvn.w	r4, #13
   34f16:	e7f0      	b.n	34efa <nrf_modem_at_scanf+0x72>
   34f18:	20010f3c 	.word	0x20010f3c
   34f1c:	20010d40 	.word	0x20010d40
   34f20:	20010d50 	.word	0x20010d50

00034f24 <rpc_at_event_handler>:
   34f24:	b570      	push	{r4, r5, r6, lr}
   34f26:	68c3      	ldr	r3, [r0, #12]
   34f28:	4605      	mov	r5, r0
   34f2a:	2ba7      	cmp	r3, #167	; 0xa7
   34f2c:	d003      	beq.n	34f36 <rpc_at_event_handler+0x12>
   34f2e:	6828      	ldr	r0, [r5, #0]
   34f30:	f009 ff3a 	bl	3eda8 <rpc_client_data_free>
   34f34:	e008      	b.n	34f48 <rpc_at_event_handler+0x24>
   34f36:	2903      	cmp	r1, #3
   34f38:	d008      	beq.n	34f4c <rpc_at_event_handler+0x28>
   34f3a:	2904      	cmp	r1, #4
   34f3c:	d019      	beq.n	34f72 <rpc_at_event_handler+0x4e>
   34f3e:	2902      	cmp	r1, #2
   34f40:	d102      	bne.n	34f48 <rpc_at_event_handler+0x24>
   34f42:	2201      	movs	r2, #1
   34f44:	4b0e      	ldr	r3, [pc, #56]	; (34f80 <rpc_at_event_handler+0x5c>)
   34f46:	701a      	strb	r2, [r3, #0]
   34f48:	2000      	movs	r0, #0
   34f4a:	e00a      	b.n	34f62 <rpc_at_event_handler+0x3e>
   34f4c:	4e0d      	ldr	r6, [pc, #52]	; (34f84 <rpc_at_event_handler+0x60>)
   34f4e:	6833      	ldr	r3, [r6, #0]
   34f50:	b143      	cbz	r3, 34f64 <rpc_at_event_handler+0x40>
   34f52:	2400      	movs	r4, #0
   34f54:	6800      	ldr	r0, [r0, #0]
   34f56:	4798      	blx	r3
   34f58:	6828      	ldr	r0, [r5, #0]
   34f5a:	6034      	str	r4, [r6, #0]
   34f5c:	f009 ff24 	bl	3eda8 <rpc_client_data_free>
   34f60:	b2e0      	uxtb	r0, r4
   34f62:	bd70      	pop	{r4, r5, r6, pc}
   34f64:	2202      	movs	r2, #2
   34f66:	4b08      	ldr	r3, [pc, #32]	; (34f88 <rpc_at_event_handler+0x64>)
   34f68:	2401      	movs	r4, #1
   34f6a:	6018      	str	r0, [r3, #0]
   34f6c:	4b04      	ldr	r3, [pc, #16]	; (34f80 <rpc_at_event_handler+0x5c>)
   34f6e:	701a      	strb	r2, [r3, #0]
   34f70:	e7f6      	b.n	34f60 <rpc_at_event_handler+0x3c>
   34f72:	4b06      	ldr	r3, [pc, #24]	; (34f8c <rpc_at_event_handler+0x68>)
   34f74:	681b      	ldr	r3, [r3, #0]
   34f76:	2b00      	cmp	r3, #0
   34f78:	d0d9      	beq.n	34f2e <rpc_at_event_handler+0xa>
   34f7a:	6800      	ldr	r0, [r0, #0]
   34f7c:	4798      	blx	r3
   34f7e:	e7d6      	b.n	34f2e <rpc_at_event_handler+0xa>
   34f80:	20010f35 	.word	0x20010f35
   34f84:	20010d54 	.word	0x20010d54
   34f88:	20010d50 	.word	0x20010d50
   34f8c:	20010d4c 	.word	0x20010d4c

00034f90 <mfu_client_send>:
   34f90:	f04f 33ff 	mov.w	r3, #4294967295
   34f94:	b513      	push	{r0, r1, r4, lr}
   34f96:	9301      	str	r3, [sp, #4]
   34f98:	231a      	movs	r3, #26
   34f9a:	7303      	strb	r3, [r0, #12]
   34f9c:	f06f 031e 	mvn.w	r3, #30
   34fa0:	7343      	strb	r3, [r0, #13]
   34fa2:	f06f 0354 	mvn.w	r3, #84	; 0x54
   34fa6:	7383      	strb	r3, [r0, #14]
   34fa8:	2315      	movs	r3, #21
   34faa:	2903      	cmp	r1, #3
   34fac:	73c3      	strb	r3, [r0, #15]
   34fae:	bf14      	ite	ne
   34fb0:	2304      	movne	r3, #4
   34fb2:	2308      	moveq	r3, #8
   34fb4:	6083      	str	r3, [r0, #8]
   34fb6:	2300      	movs	r3, #0
   34fb8:	4c09      	ldr	r4, [pc, #36]	; (34fe0 <mfu_client_send+0x50>)
   34fba:	4602      	mov	r2, r0
   34fbc:	2006      	movs	r0, #6
   34fbe:	7023      	strb	r3, [r4, #0]
   34fc0:	f009 fee8 	bl	3ed94 <rpc_client_request_send>
   34fc4:	7823      	ldrb	r3, [r4, #0]
   34fc6:	2b01      	cmp	r3, #1
   34fc8:	d105      	bne.n	34fd6 <mfu_client_send+0x46>
   34fca:	4b06      	ldr	r3, [pc, #24]	; (34fe4 <mfu_client_send+0x54>)
   34fcc:	681b      	ldr	r3, [r3, #0]
   34fce:	6918      	ldr	r0, [r3, #16]
   34fd0:	4240      	negs	r0, r0
   34fd2:	b002      	add	sp, #8
   34fd4:	bd10      	pop	{r4, pc}
   34fd6:	a901      	add	r1, sp, #4
   34fd8:	2000      	movs	r0, #0
   34fda:	f008 fcdd 	bl	3d998 <nrf_modem_os_timedwait>
   34fde:	e7f1      	b.n	34fc4 <mfu_client_send+0x34>
   34fe0:	20010f36 	.word	0x20010f36
   34fe4:	20010d58 	.word	0x20010d58

00034fe8 <nrf_modem_delta_dfu_offset>:
   34fe8:	b538      	push	{r3, r4, r5, lr}
   34fea:	4b10      	ldr	r3, [pc, #64]	; (3502c <nrf_modem_delta_dfu_offset+0x44>)
   34fec:	4605      	mov	r5, r0
   34fee:	781b      	ldrb	r3, [r3, #0]
   34ff0:	b193      	cbz	r3, 35018 <nrf_modem_delta_dfu_offset+0x30>
   34ff2:	b1a0      	cbz	r0, 3501e <nrf_modem_delta_dfu_offset+0x36>
   34ff4:	2000      	movs	r0, #0
   34ff6:	f009 fec7 	bl	3ed88 <rpc_client_request_alloc>
   34ffa:	b198      	cbz	r0, 35024 <nrf_modem_delta_dfu_offset+0x3c>
   34ffc:	2109      	movs	r1, #9
   34ffe:	f7ff ffc7 	bl	34f90 <mfu_client_send>
   35002:	4b0b      	ldr	r3, [pc, #44]	; (35030 <nrf_modem_delta_dfu_offset+0x48>)
   35004:	4604      	mov	r4, r0
   35006:	b910      	cbnz	r0, 3500e <nrf_modem_delta_dfu_offset+0x26>
   35008:	681a      	ldr	r2, [r3, #0]
   3500a:	6952      	ldr	r2, [r2, #20]
   3500c:	602a      	str	r2, [r5, #0]
   3500e:	6818      	ldr	r0, [r3, #0]
   35010:	f009 fec7 	bl	3eda2 <rpc_client_message_free>
   35014:	4620      	mov	r0, r4
   35016:	bd38      	pop	{r3, r4, r5, pc}
   35018:	f04f 34ff 	mov.w	r4, #4294967295
   3501c:	e7fa      	b.n	35014 <nrf_modem_delta_dfu_offset+0x2c>
   3501e:	f06f 040d 	mvn.w	r4, #13
   35022:	e7f7      	b.n	35014 <nrf_modem_delta_dfu_offset+0x2c>
   35024:	f06f 040b 	mvn.w	r4, #11
   35028:	e7f4      	b.n	35014 <nrf_modem_delta_dfu_offset+0x2c>
   3502a:	bf00      	nop
   3502c:	20010f3c 	.word	0x20010f3c
   35030:	20010d58 	.word	0x20010d58

00035034 <nrf_modem_delta_dfu_area>:
   35034:	b538      	push	{r3, r4, r5, lr}
   35036:	4b10      	ldr	r3, [pc, #64]	; (35078 <nrf_modem_delta_dfu_area+0x44>)
   35038:	4605      	mov	r5, r0
   3503a:	781b      	ldrb	r3, [r3, #0]
   3503c:	b193      	cbz	r3, 35064 <nrf_modem_delta_dfu_area+0x30>
   3503e:	b1a0      	cbz	r0, 3506a <nrf_modem_delta_dfu_area+0x36>
   35040:	2000      	movs	r0, #0
   35042:	f009 fea1 	bl	3ed88 <rpc_client_request_alloc>
   35046:	b198      	cbz	r0, 35070 <nrf_modem_delta_dfu_area+0x3c>
   35048:	2102      	movs	r1, #2
   3504a:	f7ff ffa1 	bl	34f90 <mfu_client_send>
   3504e:	4b0b      	ldr	r3, [pc, #44]	; (3507c <nrf_modem_delta_dfu_area+0x48>)
   35050:	4604      	mov	r4, r0
   35052:	b910      	cbnz	r0, 3505a <nrf_modem_delta_dfu_area+0x26>
   35054:	681a      	ldr	r2, [r3, #0]
   35056:	6952      	ldr	r2, [r2, #20]
   35058:	602a      	str	r2, [r5, #0]
   3505a:	6818      	ldr	r0, [r3, #0]
   3505c:	f009 fea1 	bl	3eda2 <rpc_client_message_free>
   35060:	4620      	mov	r0, r4
   35062:	bd38      	pop	{r3, r4, r5, pc}
   35064:	f04f 34ff 	mov.w	r4, #4294967295
   35068:	e7fa      	b.n	35060 <nrf_modem_delta_dfu_area+0x2c>
   3506a:	f06f 040d 	mvn.w	r4, #13
   3506e:	e7f7      	b.n	35060 <nrf_modem_delta_dfu_area+0x2c>
   35070:	f06f 040b 	mvn.w	r4, #11
   35074:	e7f4      	b.n	35060 <nrf_modem_delta_dfu_area+0x2c>
   35076:	bf00      	nop
   35078:	20010f3c 	.word	0x20010f3c
   3507c:	20010d58 	.word	0x20010d58

00035080 <nrf_modem_delta_dfu_uuid>:
   35080:	b538      	push	{r3, r4, r5, lr}
   35082:	4b13      	ldr	r3, [pc, #76]	; (350d0 <nrf_modem_delta_dfu_uuid+0x50>)
   35084:	4605      	mov	r5, r0
   35086:	781b      	ldrb	r3, [r3, #0]
   35088:	b1cb      	cbz	r3, 350be <nrf_modem_delta_dfu_uuid+0x3e>
   3508a:	b1d8      	cbz	r0, 350c4 <nrf_modem_delta_dfu_uuid+0x44>
   3508c:	2000      	movs	r0, #0
   3508e:	f009 fe7b 	bl	3ed88 <rpc_client_request_alloc>
   35092:	b1d0      	cbz	r0, 350ca <nrf_modem_delta_dfu_uuid+0x4a>
   35094:	2101      	movs	r1, #1
   35096:	f7ff ff7b 	bl	34f90 <mfu_client_send>
   3509a:	490e      	ldr	r1, [pc, #56]	; (350d4 <nrf_modem_delta_dfu_uuid+0x54>)
   3509c:	4604      	mov	r4, r0
   3509e:	b948      	cbnz	r0, 350b4 <nrf_modem_delta_dfu_uuid+0x34>
   350a0:	680b      	ldr	r3, [r1, #0]
   350a2:	f103 0214 	add.w	r2, r3, #20
   350a6:	3338      	adds	r3, #56	; 0x38
   350a8:	f852 0b04 	ldr.w	r0, [r2], #4
   350ac:	429a      	cmp	r2, r3
   350ae:	f845 0b04 	str.w	r0, [r5], #4
   350b2:	d1f9      	bne.n	350a8 <nrf_modem_delta_dfu_uuid+0x28>
   350b4:	6808      	ldr	r0, [r1, #0]
   350b6:	f009 fe74 	bl	3eda2 <rpc_client_message_free>
   350ba:	4620      	mov	r0, r4
   350bc:	bd38      	pop	{r3, r4, r5, pc}
   350be:	f04f 34ff 	mov.w	r4, #4294967295
   350c2:	e7fa      	b.n	350ba <nrf_modem_delta_dfu_uuid+0x3a>
   350c4:	f06f 040d 	mvn.w	r4, #13
   350c8:	e7f7      	b.n	350ba <nrf_modem_delta_dfu_uuid+0x3a>
   350ca:	f06f 040b 	mvn.w	r4, #11
   350ce:	e7f4      	b.n	350ba <nrf_modem_delta_dfu_uuid+0x3a>
   350d0:	20010f3c 	.word	0x20010f3c
   350d4:	20010d58 	.word	0x20010d58

000350d8 <nrf_modem_delta_dfu_write_init>:
   350d8:	4b13      	ldr	r3, [pc, #76]	; (35128 <nrf_modem_delta_dfu_write_init+0x50>)
   350da:	b537      	push	{r0, r1, r2, r4, r5, lr}
   350dc:	781b      	ldrb	r3, [r3, #0]
   350de:	b1d3      	cbz	r3, 35116 <nrf_modem_delta_dfu_write_init+0x3e>
   350e0:	4d12      	ldr	r5, [pc, #72]	; (3512c <nrf_modem_delta_dfu_write_init+0x54>)
   350e2:	782b      	ldrb	r3, [r5, #0]
   350e4:	b9d3      	cbnz	r3, 3511c <nrf_modem_delta_dfu_write_init+0x44>
   350e6:	a801      	add	r0, sp, #4
   350e8:	f7ff ff7e 	bl	34fe8 <nrf_modem_delta_dfu_offset>
   350ec:	4604      	mov	r4, r0
   350ee:	b978      	cbnz	r0, 35110 <nrf_modem_delta_dfu_write_init+0x38>
   350f0:	f009 fe4a 	bl	3ed88 <rpc_client_request_alloc>
   350f4:	b1a8      	cbz	r0, 35122 <nrf_modem_delta_dfu_write_init+0x4a>
   350f6:	9a01      	ldr	r2, [sp, #4]
   350f8:	2103      	movs	r1, #3
   350fa:	6102      	str	r2, [r0, #16]
   350fc:	f7ff ff48 	bl	34f90 <mfu_client_send>
   35100:	4604      	mov	r4, r0
   35102:	4b0b      	ldr	r3, [pc, #44]	; (35130 <nrf_modem_delta_dfu_write_init+0x58>)
   35104:	6818      	ldr	r0, [r3, #0]
   35106:	f009 fe4c 	bl	3eda2 <rpc_client_message_free>
   3510a:	b90c      	cbnz	r4, 35110 <nrf_modem_delta_dfu_write_init+0x38>
   3510c:	2301      	movs	r3, #1
   3510e:	702b      	strb	r3, [r5, #0]
   35110:	4620      	mov	r0, r4
   35112:	b003      	add	sp, #12
   35114:	bd30      	pop	{r4, r5, pc}
   35116:	f04f 34ff 	mov.w	r4, #4294967295
   3511a:	e7f9      	b.n	35110 <nrf_modem_delta_dfu_write_init+0x38>
   3511c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   35120:	e7f6      	b.n	35110 <nrf_modem_delta_dfu_write_init+0x38>
   35122:	f06f 040b 	mvn.w	r4, #11
   35126:	e7f3      	b.n	35110 <nrf_modem_delta_dfu_write_init+0x38>
   35128:	20010f3c 	.word	0x20010f3c
   3512c:	20010f37 	.word	0x20010f37
   35130:	20010d58 	.word	0x20010d58

00035134 <nrf_modem_delta_dfu_write>:
   35134:	4b14      	ldr	r3, [pc, #80]	; (35188 <nrf_modem_delta_dfu_write+0x54>)
   35136:	b570      	push	{r4, r5, r6, lr}
   35138:	781b      	ldrb	r3, [r3, #0]
   3513a:	4606      	mov	r6, r0
   3513c:	460d      	mov	r5, r1
   3513e:	b1b3      	cbz	r3, 3516e <nrf_modem_delta_dfu_write+0x3a>
   35140:	b1c0      	cbz	r0, 35174 <nrf_modem_delta_dfu_write+0x40>
   35142:	b1d1      	cbz	r1, 3517a <nrf_modem_delta_dfu_write+0x46>
   35144:	4608      	mov	r0, r1
   35146:	f009 fe1f 	bl	3ed88 <rpc_client_request_alloc>
   3514a:	4604      	mov	r4, r0
   3514c:	b1c0      	cbz	r0, 35180 <nrf_modem_delta_dfu_write+0x4c>
   3514e:	462a      	mov	r2, r5
   35150:	4631      	mov	r1, r6
   35152:	6800      	ldr	r0, [r0, #0]
   35154:	f00a fed4 	bl	3ff00 <memcpy>
   35158:	4620      	mov	r0, r4
   3515a:	2104      	movs	r1, #4
   3515c:	f7ff ff18 	bl	34f90 <mfu_client_send>
   35160:	4b0a      	ldr	r3, [pc, #40]	; (3518c <nrf_modem_delta_dfu_write+0x58>)
   35162:	4604      	mov	r4, r0
   35164:	6818      	ldr	r0, [r3, #0]
   35166:	f009 fe1c 	bl	3eda2 <rpc_client_message_free>
   3516a:	4620      	mov	r0, r4
   3516c:	bd70      	pop	{r4, r5, r6, pc}
   3516e:	f04f 34ff 	mov.w	r4, #4294967295
   35172:	e7fa      	b.n	3516a <nrf_modem_delta_dfu_write+0x36>
   35174:	f06f 040d 	mvn.w	r4, #13
   35178:	e7f7      	b.n	3516a <nrf_modem_delta_dfu_write+0x36>
   3517a:	f06f 0415 	mvn.w	r4, #21
   3517e:	e7f4      	b.n	3516a <nrf_modem_delta_dfu_write+0x36>
   35180:	f06f 040b 	mvn.w	r4, #11
   35184:	e7f1      	b.n	3516a <nrf_modem_delta_dfu_write+0x36>
   35186:	bf00      	nop
   35188:	20010f3c 	.word	0x20010f3c
   3518c:	20010d58 	.word	0x20010d58

00035190 <nrf_modem_delta_dfu_write_done>:
   35190:	4b0d      	ldr	r3, [pc, #52]	; (351c8 <nrf_modem_delta_dfu_write_done+0x38>)
   35192:	b510      	push	{r4, lr}
   35194:	781b      	ldrb	r3, [r3, #0]
   35196:	b183      	cbz	r3, 351ba <nrf_modem_delta_dfu_write_done+0x2a>
   35198:	2000      	movs	r0, #0
   3519a:	f009 fdf5 	bl	3ed88 <rpc_client_request_alloc>
   3519e:	b178      	cbz	r0, 351c0 <nrf_modem_delta_dfu_write_done+0x30>
   351a0:	2106      	movs	r1, #6
   351a2:	f7ff fef5 	bl	34f90 <mfu_client_send>
   351a6:	4b09      	ldr	r3, [pc, #36]	; (351cc <nrf_modem_delta_dfu_write_done+0x3c>)
   351a8:	4604      	mov	r4, r0
   351aa:	6818      	ldr	r0, [r3, #0]
   351ac:	f009 fdf9 	bl	3eda2 <rpc_client_message_free>
   351b0:	2200      	movs	r2, #0
   351b2:	4b07      	ldr	r3, [pc, #28]	; (351d0 <nrf_modem_delta_dfu_write_done+0x40>)
   351b4:	701a      	strb	r2, [r3, #0]
   351b6:	4620      	mov	r0, r4
   351b8:	bd10      	pop	{r4, pc}
   351ba:	f04f 34ff 	mov.w	r4, #4294967295
   351be:	e7fa      	b.n	351b6 <nrf_modem_delta_dfu_write_done+0x26>
   351c0:	f06f 040b 	mvn.w	r4, #11
   351c4:	e7f7      	b.n	351b6 <nrf_modem_delta_dfu_write_done+0x26>
   351c6:	bf00      	nop
   351c8:	20010f3c 	.word	0x20010f3c
   351cc:	20010d58 	.word	0x20010d58
   351d0:	20010f37 	.word	0x20010f37

000351d4 <nrf_modem_delta_dfu_update>:
   351d4:	4b0b      	ldr	r3, [pc, #44]	; (35204 <nrf_modem_delta_dfu_update+0x30>)
   351d6:	b510      	push	{r4, lr}
   351d8:	781b      	ldrb	r3, [r3, #0]
   351da:	b16b      	cbz	r3, 351f8 <nrf_modem_delta_dfu_update+0x24>
   351dc:	2000      	movs	r0, #0
   351de:	f009 fdd3 	bl	3ed88 <rpc_client_request_alloc>
   351e2:	b160      	cbz	r0, 351fe <nrf_modem_delta_dfu_update+0x2a>
   351e4:	2105      	movs	r1, #5
   351e6:	f7ff fed3 	bl	34f90 <mfu_client_send>
   351ea:	4b07      	ldr	r3, [pc, #28]	; (35208 <nrf_modem_delta_dfu_update+0x34>)
   351ec:	4604      	mov	r4, r0
   351ee:	6818      	ldr	r0, [r3, #0]
   351f0:	f009 fdd7 	bl	3eda2 <rpc_client_message_free>
   351f4:	4620      	mov	r0, r4
   351f6:	bd10      	pop	{r4, pc}
   351f8:	f04f 34ff 	mov.w	r4, #4294967295
   351fc:	e7fa      	b.n	351f4 <nrf_modem_delta_dfu_update+0x20>
   351fe:	f06f 040b 	mvn.w	r4, #11
   35202:	e7f7      	b.n	351f4 <nrf_modem_delta_dfu_update+0x20>
   35204:	20010f3c 	.word	0x20010f3c
   35208:	20010d58 	.word	0x20010d58

0003520c <nrf_modem_delta_dfu_erase>:
   3520c:	4b0b      	ldr	r3, [pc, #44]	; (3523c <nrf_modem_delta_dfu_erase+0x30>)
   3520e:	b510      	push	{r4, lr}
   35210:	781b      	ldrb	r3, [r3, #0]
   35212:	b16b      	cbz	r3, 35230 <nrf_modem_delta_dfu_erase+0x24>
   35214:	2000      	movs	r0, #0
   35216:	f009 fdb7 	bl	3ed88 <rpc_client_request_alloc>
   3521a:	b160      	cbz	r0, 35236 <nrf_modem_delta_dfu_erase+0x2a>
   3521c:	2108      	movs	r1, #8
   3521e:	f7ff feb7 	bl	34f90 <mfu_client_send>
   35222:	4b07      	ldr	r3, [pc, #28]	; (35240 <nrf_modem_delta_dfu_erase+0x34>)
   35224:	4604      	mov	r4, r0
   35226:	6818      	ldr	r0, [r3, #0]
   35228:	f009 fdbb 	bl	3eda2 <rpc_client_message_free>
   3522c:	4620      	mov	r0, r4
   3522e:	bd10      	pop	{r4, pc}
   35230:	f04f 34ff 	mov.w	r4, #4294967295
   35234:	e7fa      	b.n	3522c <nrf_modem_delta_dfu_erase+0x20>
   35236:	f06f 040b 	mvn.w	r4, #11
   3523a:	e7f7      	b.n	3522c <nrf_modem_delta_dfu_erase+0x20>
   3523c:	20010f3c 	.word	0x20010f3c
   35240:	20010d58 	.word	0x20010d58

00035244 <rpc_dfu_event_handler>:
   35244:	b510      	push	{r4, lr}
   35246:	4604      	mov	r4, r0
   35248:	6800      	ldr	r0, [r0, #0]
   3524a:	b108      	cbz	r0, 35250 <rpc_dfu_event_handler+0xc>
   3524c:	f009 fdac 	bl	3eda8 <rpc_client_data_free>
   35250:	4b05      	ldr	r3, [pc, #20]	; (35268 <rpc_dfu_event_handler+0x24>)
   35252:	68e2      	ldr	r2, [r4, #12]
   35254:	429a      	cmp	r2, r3
   35256:	bf05      	ittet	eq
   35258:	2001      	moveq	r0, #1
   3525a:	4b04      	ldreq	r3, [pc, #16]	; (3526c <rpc_dfu_event_handler+0x28>)
   3525c:	2000      	movne	r0, #0
   3525e:	7018      	strbeq	r0, [r3, #0]
   35260:	bf04      	itt	eq
   35262:	4b03      	ldreq	r3, [pc, #12]	; (35270 <rpc_dfu_event_handler+0x2c>)
   35264:	601c      	streq	r4, [r3, #0]
   35266:	bd10      	pop	{r4, pc}
   35268:	15abe11a 	.word	0x15abe11a
   3526c:	20010f36 	.word	0x20010f36
   35270:	20010d58 	.word	0x20010d58

00035274 <rpc_gnss_event_handler>:
   35274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35278:	6804      	ldr	r4, [r0, #0]
   3527a:	4607      	mov	r7, r0
   3527c:	460d      	mov	r5, r1
   3527e:	2c00      	cmp	r4, #0
   35280:	f000 8086 	beq.w	35390 <rpc_gnss_event_handler+0x11c>
   35284:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   35288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   3528c:	d142      	bne.n	35314 <rpc_gnss_event_handler+0xa0>
   3528e:	4b5f      	ldr	r3, [pc, #380]	; (3540c <rpc_gnss_event_handler+0x198>)
   35290:	781a      	ldrb	r2, [r3, #0]
   35292:	4698      	mov	r8, r3
   35294:	2a01      	cmp	r2, #1
   35296:	d131      	bne.n	352fc <rpc_gnss_event_handler+0x88>
   35298:	4a5d      	ldr	r2, [pc, #372]	; (35410 <rpc_gnss_event_handler+0x19c>)
   3529a:	6821      	ldr	r1, [r4, #0]
   3529c:	8812      	ldrh	r2, [r2, #0]
   3529e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   352a2:	d12b      	bne.n	352fc <rpc_gnss_event_handler+0x88>
   352a4:	6862      	ldr	r2, [r4, #4]
   352a6:	bb6a      	cbnz	r2, 35304 <rpc_gnss_event_handler+0x90>
   352a8:	4b5a      	ldr	r3, [pc, #360]	; (35414 <rpc_gnss_event_handler+0x1a0>)
   352aa:	681e      	ldr	r6, [r3, #0]
   352ac:	b31e      	cbz	r6, 352f6 <rpc_gnss_event_handler+0x82>
   352ae:	f242 0309 	movw	r3, #8201	; 0x2009
   352b2:	429d      	cmp	r5, r3
   352b4:	d11f      	bne.n	352f6 <rpc_gnss_event_handler+0x82>
   352b6:	4630      	mov	r0, r6
   352b8:	8923      	ldrh	r3, [r4, #8]
   352ba:	2280      	movs	r2, #128	; 0x80
   352bc:	f840 3b04 	str.w	r3, [r0], #4
   352c0:	f104 010a 	add.w	r1, r4, #10
   352c4:	f00a fe1c 	bl	3ff00 <memcpy>
   352c8:	2280      	movs	r2, #128	; 0x80
   352ca:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   352ce:	f106 0084 	add.w	r0, r6, #132	; 0x84
   352d2:	f00a fe15 	bl	3ff00 <memcpy>
   352d6:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   352da:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   352de:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   352e2:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   352e6:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   352ea:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   352ee:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   352f2:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   352f6:	2300      	movs	r3, #0
   352f8:	f888 3000 	strb.w	r3, [r8]
   352fc:	6838      	ldr	r0, [r7, #0]
   352fe:	f009 fd53 	bl	3eda8 <rpc_client_data_free>
   35302:	e045      	b.n	35390 <rpc_gnss_event_handler+0x11c>
   35304:	f647 71ff 	movw	r1, #32767	; 0x7fff
   35308:	428a      	cmp	r2, r1
   3530a:	bf0c      	ite	eq
   3530c:	2203      	moveq	r2, #3
   3530e:	2202      	movne	r2, #2
   35310:	701a      	strb	r2, [r3, #0]
   35312:	e7f3      	b.n	352fc <rpc_gnss_event_handler+0x88>
   35314:	4e40      	ldr	r6, [pc, #256]	; (35418 <rpc_gnss_event_handler+0x1a4>)
   35316:	6833      	ldr	r3, [r6, #0]
   35318:	2b00      	cmp	r3, #0
   3531a:	d0ef      	beq.n	352fc <rpc_gnss_event_handler+0x88>
   3531c:	f244 0204 	movw	r2, #16388	; 0x4004
   35320:	4291      	cmp	r1, r2
   35322:	d80b      	bhi.n	3533c <rpc_gnss_event_handler+0xc8>
   35324:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   35328:	d9e8      	bls.n	352fc <rpc_gnss_event_handler+0x88>
   3532a:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   3532e:	3a02      	subs	r2, #2
   35330:	2a02      	cmp	r2, #2
   35332:	d80b      	bhi.n	3534c <rpc_gnss_event_handler+0xd8>
   35334:	e8df f002 	tbb	[pc, r2]
   35338:	4f45      	.short	0x4f45
   3533a:	59          	.byte	0x59
   3533b:	00          	.byte	0x00
   3533c:	f244 1301 	movw	r3, #16641	; 0x4101
   35340:	4299      	cmp	r1, r3
   35342:	d003      	beq.n	3534c <rpc_gnss_event_handler+0xd8>
   35344:	f244 2301 	movw	r3, #16897	; 0x4201
   35348:	4299      	cmp	r1, r3
   3534a:	d1d7      	bne.n	352fc <rpc_gnss_event_handler+0x88>
   3534c:	4f33      	ldr	r7, [pc, #204]	; (3541c <rpc_gnss_event_handler+0x1a8>)
   3534e:	6838      	ldr	r0, [r7, #0]
   35350:	b108      	cbz	r0, 35356 <rpc_gnss_event_handler+0xe2>
   35352:	f009 fd29 	bl	3eda8 <rpc_client_data_free>
   35356:	f244 2301 	movw	r3, #16897	; 0x4201
   3535a:	429d      	cmp	r5, r3
   3535c:	4b30      	ldr	r3, [pc, #192]	; (35420 <rpc_gnss_event_handler+0x1ac>)
   3535e:	d11a      	bne.n	35396 <rpc_gnss_event_handler+0x122>
   35360:	2202      	movs	r2, #2
   35362:	603c      	str	r4, [r7, #0]
   35364:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   35368:	701a      	strb	r2, [r3, #0]
   3536a:	07e3      	lsls	r3, r4, #31
   3536c:	d502      	bpl.n	35374 <rpc_gnss_event_handler+0x100>
   3536e:	2002      	movs	r0, #2
   35370:	6833      	ldr	r3, [r6, #0]
   35372:	4798      	blx	r3
   35374:	4d2b      	ldr	r5, [pc, #172]	; (35424 <rpc_gnss_event_handler+0x1b0>)
   35376:	f014 0418 	ands.w	r4, r4, #24
   3537a:	6833      	ldr	r3, [r6, #0]
   3537c:	782a      	ldrb	r2, [r5, #0]
   3537e:	d01a      	beq.n	353b6 <rpc_gnss_event_handler+0x142>
   35380:	b91a      	cbnz	r2, 3538a <rpc_gnss_event_handler+0x116>
   35382:	2005      	movs	r0, #5
   35384:	4798      	blx	r3
   35386:	2301      	movs	r3, #1
   35388:	702b      	strb	r3, [r5, #0]
   3538a:	2001      	movs	r0, #1
   3538c:	6833      	ldr	r3, [r6, #0]
   3538e:	4798      	blx	r3
   35390:	2000      	movs	r0, #0
   35392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35396:	f244 1201 	movw	r2, #16641	; 0x4101
   3539a:	4295      	cmp	r5, r2
   3539c:	bf0b      	itete	eq
   3539e:	2201      	moveq	r2, #1
   353a0:	2200      	movne	r2, #0
   353a2:	603c      	streq	r4, [r7, #0]
   353a4:	603c      	strne	r4, [r7, #0]
   353a6:	bf0b      	itete	eq
   353a8:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   353ac:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   353b0:	701a      	strbeq	r2, [r3, #0]
   353b2:	701a      	strbne	r2, [r3, #0]
   353b4:	e7d9      	b.n	3536a <rpc_gnss_event_handler+0xf6>
   353b6:	2a00      	cmp	r2, #0
   353b8:	d0e7      	beq.n	3538a <rpc_gnss_event_handler+0x116>
   353ba:	2006      	movs	r0, #6
   353bc:	4798      	blx	r3
   353be:	702c      	strb	r4, [r5, #0]
   353c0:	e7e3      	b.n	3538a <rpc_gnss_event_handler+0x116>
   353c2:	4c19      	ldr	r4, [pc, #100]	; (35428 <rpc_gnss_event_handler+0x1b4>)
   353c4:	6820      	ldr	r0, [r4, #0]
   353c6:	b108      	cbz	r0, 353cc <rpc_gnss_event_handler+0x158>
   353c8:	f009 fcee 	bl	3eda8 <rpc_client_data_free>
   353cc:	683b      	ldr	r3, [r7, #0]
   353ce:	2003      	movs	r0, #3
   353d0:	6023      	str	r3, [r4, #0]
   353d2:	6833      	ldr	r3, [r6, #0]
   353d4:	e7db      	b.n	3538e <rpc_gnss_event_handler+0x11a>
   353d6:	4c15      	ldr	r4, [pc, #84]	; (3542c <rpc_gnss_event_handler+0x1b8>)
   353d8:	6820      	ldr	r0, [r4, #0]
   353da:	b108      	cbz	r0, 353e0 <rpc_gnss_event_handler+0x16c>
   353dc:	f009 fce4 	bl	3eda8 <rpc_client_data_free>
   353e0:	683b      	ldr	r3, [r7, #0]
   353e2:	2004      	movs	r0, #4
   353e4:	6023      	str	r3, [r4, #0]
   353e6:	6833      	ldr	r3, [r6, #0]
   353e8:	e7d1      	b.n	3538e <rpc_gnss_event_handler+0x11a>
   353ea:	7822      	ldrb	r2, [r4, #0]
   353ec:	2a03      	cmp	r2, #3
   353ee:	d885      	bhi.n	352fc <rpc_gnss_event_handler+0x88>
   353f0:	e8df f002 	tbb	[pc, r2]
   353f4:	09070502 	.word	0x09070502
   353f8:	2007      	movs	r0, #7
   353fa:	4798      	blx	r3
   353fc:	e77e      	b.n	352fc <rpc_gnss_event_handler+0x88>
   353fe:	2008      	movs	r0, #8
   35400:	e7fb      	b.n	353fa <rpc_gnss_event_handler+0x186>
   35402:	2009      	movs	r0, #9
   35404:	e7f9      	b.n	353fa <rpc_gnss_event_handler+0x186>
   35406:	200a      	movs	r0, #10
   35408:	e7f7      	b.n	353fa <rpc_gnss_event_handler+0x186>
   3540a:	bf00      	nop
   3540c:	20010f3a 	.word	0x20010f3a
   35410:	20010dee 	.word	0x20010dee
   35414:	20010d6c 	.word	0x20010d6c
   35418:	20010d5c 	.word	0x20010d5c
   3541c:	20010d60 	.word	0x20010d60
   35420:	20010f39 	.word	0x20010f39
   35424:	20010f38 	.word	0x20010f38
   35428:	20010d68 	.word	0x20010d68
   3542c:	20010d64 	.word	0x20010d64

00035430 <full_dfu_ipc_irq_handler>:
   35430:	2301      	movs	r3, #1
   35432:	4a03      	ldr	r2, [pc, #12]	; (35440 <full_dfu_ipc_irq_handler+0x10>)
   35434:	6013      	str	r3, [r2, #0]
   35436:	07c2      	lsls	r2, r0, #31
   35438:	bf44      	itt	mi
   3543a:	4a02      	ldrmi	r2, [pc, #8]	; (35444 <full_dfu_ipc_irq_handler+0x14>)
   3543c:	7013      	strbmi	r3, [r2, #0]
   3543e:	4770      	bx	lr
   35440:	20010d70 	.word	0x20010d70
   35444:	20010f3b 	.word	0x20010f3b

00035448 <modem_ipc_wait_for_event>:
   35448:	b538      	push	{r3, r4, r5, lr}
   3544a:	2300      	movs	r3, #0
   3544c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   35450:	4c0b      	ldr	r4, [pc, #44]	; (35480 <modem_ipc_wait_for_event+0x38>)
   35452:	6023      	str	r3, [r4, #0]
   35454:	6823      	ldr	r3, [r4, #0]
   35456:	b92b      	cbnz	r3, 35464 <modem_ipc_wait_for_event+0x1c>
   35458:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3545c:	f008 fa98 	bl	3d990 <nrf_modem_os_busywait>
   35460:	3d01      	subs	r5, #1
   35462:	d1f7      	bne.n	35454 <modem_ipc_wait_for_event+0xc>
   35464:	6823      	ldr	r3, [r4, #0]
   35466:	b913      	cbnz	r3, 3546e <modem_ipc_wait_for_event+0x26>
   35468:	f06f 0073 	mvn.w	r0, #115	; 0x73
   3546c:	e006      	b.n	3547c <modem_ipc_wait_for_event+0x34>
   3546e:	4b05      	ldr	r3, [pc, #20]	; (35484 <modem_ipc_wait_for_event+0x3c>)
   35470:	781b      	ldrb	r3, [r3, #0]
   35472:	2b01      	cmp	r3, #1
   35474:	bf14      	ite	ne
   35476:	2000      	movne	r0, #0
   35478:	f06f 0004 	mvneq.w	r0, #4
   3547c:	bd38      	pop	{r3, r4, r5, pc}
   3547e:	bf00      	nop
   35480:	20010d70 	.word	0x20010d70
   35484:	20010f3b 	.word	0x20010f3b

00035488 <nrf_modem_full_dfu_setup>:
   35488:	2200      	movs	r2, #0
   3548a:	2300      	movs	r3, #0
   3548c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3548e:	4d2b      	ldr	r5, [pc, #172]	; (3553c <nrf_modem_full_dfu_setup+0xb4>)
   35490:	4e2b      	ldr	r6, [pc, #172]	; (35540 <nrf_modem_full_dfu_setup+0xb8>)
   35492:	e9c5 2302 	strd	r2, r3, [r5, #8]
   35496:	e9c5 2304 	strd	r2, r3, [r5, #16]
   3549a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3549e:	4b29      	ldr	r3, [pc, #164]	; (35544 <nrf_modem_full_dfu_setup+0xbc>)
   354a0:	2400      	movs	r4, #0
   354a2:	601a      	str	r2, [r3, #0]
   354a4:	f100 031c 	add.w	r3, r0, #28
   354a8:	6033      	str	r3, [r6, #0]
   354aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   354ae:	6043      	str	r3, [r0, #4]
   354b0:	231c      	movs	r3, #28
   354b2:	7203      	strb	r3, [r0, #8]
   354b4:	2320      	movs	r3, #32
   354b6:	2701      	movs	r7, #1
   354b8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   354bc:	7243      	strb	r3, [r0, #9]
   354be:	4b22      	ldr	r3, [pc, #136]	; (35548 <nrf_modem_full_dfu_setup+0xc0>)
   354c0:	7004      	strb	r4, [r0, #0]
   354c2:	7044      	strb	r4, [r0, #1]
   354c4:	70c2      	strb	r2, [r0, #3]
   354c6:	7284      	strb	r4, [r0, #10]
   354c8:	72c4      	strb	r4, [r0, #11]
   354ca:	7087      	strb	r7, [r0, #2]
   354cc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   354d0:	702c      	strb	r4, [r5, #0]
   354d2:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   354d6:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   354da:	4b1c      	ldr	r3, [pc, #112]	; (3554c <nrf_modem_full_dfu_setup+0xc4>)
   354dc:	b093      	sub	sp, #76	; 0x4c
   354de:	4622      	mov	r2, r4
   354e0:	4620      	mov	r0, r4
   354e2:	491b      	ldr	r1, [pc, #108]	; (35550 <nrf_modem_full_dfu_setup+0xc8>)
   354e4:	701c      	strb	r4, [r3, #0]
   354e6:	f7fc fd77 	bl	31fd8 <nrfx_ipc_init>
   354ea:	4621      	mov	r1, r4
   354ec:	2240      	movs	r2, #64	; 0x40
   354ee:	a801      	add	r0, sp, #4
   354f0:	f00a fd26 	bl	3ff40 <memset>
   354f4:	2302      	movs	r3, #2
   354f6:	9302      	str	r3, [sp, #8]
   354f8:	2304      	movs	r3, #4
   354fa:	930b      	str	r3, [sp, #44]	; 0x2c
   354fc:	2305      	movs	r3, #5
   354fe:	a801      	add	r0, sp, #4
   35500:	9311      	str	r3, [sp, #68]	; 0x44
   35502:	9709      	str	r7, [sp, #36]	; 0x24
   35504:	f7fc fd90 	bl	32028 <nrfx_ipc_config_load>
   35508:	4b12      	ldr	r3, [pc, #72]	; (35554 <nrf_modem_full_dfu_setup+0xcc>)
   3550a:	9400      	str	r4, [sp, #0]
   3550c:	6836      	ldr	r6, [r6, #0]
   3550e:	601c      	str	r4, [r3, #0]
   35510:	681b      	ldr	r3, [r3, #0]
   35512:	9300      	str	r3, [sp, #0]
   35514:	9b00      	ldr	r3, [sp, #0]
   35516:	f7ff ff97 	bl	35448 <modem_ipc_wait_for_event>
   3551a:	4604      	mov	r4, r0
   3551c:	b130      	cbz	r0, 3552c <nrf_modem_full_dfu_setup+0xa4>
   3551e:	2303      	movs	r3, #3
   35520:	702b      	strb	r3, [r5, #0]
   35522:	f7fc fdc7 	bl	320b4 <nrfx_ipc_uninit>
   35526:	4620      	mov	r0, r4
   35528:	b013      	add	sp, #76	; 0x4c
   3552a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3552c:	6832      	ldr	r2, [r6, #0]
   3552e:	4b0a      	ldr	r3, [pc, #40]	; (35558 <nrf_modem_full_dfu_setup+0xd0>)
   35530:	429a      	cmp	r2, r3
   35532:	d0f8      	beq.n	35526 <nrf_modem_full_dfu_setup+0x9e>
   35534:	f06f 0404 	mvn.w	r4, #4
   35538:	e7f3      	b.n	35522 <nrf_modem_full_dfu_setup+0x9a>
   3553a:	bf00      	nop
   3553c:	2000e620 	.word	0x2000e620
   35540:	20010d74 	.word	0x20010d74
   35544:	20010d78 	.word	0x20010d78
   35548:	4002a000 	.word	0x4002a000
   3554c:	20010f3b 	.word	0x20010f3b
   35550:	00035431 	.word	0x00035431
   35554:	40005610 	.word	0x40005610
   35558:	a5000001 	.word	0xa5000001

0003555c <packet_handler_create>:
   3555c:	2801      	cmp	r0, #1
   3555e:	b570      	push	{r4, r5, r6, lr}
   35560:	4604      	mov	r4, r0
   35562:	460e      	mov	r6, r1
   35564:	4615      	mov	r5, r2
   35566:	d00f      	beq.n	35588 <packet_handler_create+0x2c>
   35568:	1e84      	subs	r4, r0, #2
   3556a:	2c01      	cmp	r4, #1
   3556c:	d810      	bhi.n	35590 <packet_handler_create+0x34>
   3556e:	2010      	movs	r0, #16
   35570:	f7f5 fb5c 	bl	2ac2c <nrf_modem_os_alloc>
   35574:	2400      	movs	r4, #0
   35576:	b130      	cbz	r0, 35586 <packet_handler_create+0x2a>
   35578:	2218      	movs	r2, #24
   3557a:	4b08      	ldr	r3, [pc, #32]	; (3559c <packet_handler_create+0x40>)
   3557c:	6085      	str	r5, [r0, #8]
   3557e:	fb02 3404 	mla	r4, r2, r4, r3
   35582:	e9c0 4600 	strd	r4, r6, [r0]
   35586:	bd70      	pop	{r4, r5, r6, pc}
   35588:	2014      	movs	r0, #20
   3558a:	f7f5 fb4f 	bl	2ac2c <nrf_modem_os_alloc>
   3558e:	e7f2      	b.n	35576 <packet_handler_create+0x1a>
   35590:	200c      	movs	r0, #12
   35592:	f7f5 fb4b 	bl	2ac2c <nrf_modem_os_alloc>
   35596:	2402      	movs	r4, #2
   35598:	e7ed      	b.n	35576 <packet_handler_create+0x1a>
   3559a:	bf00      	nop
   3559c:	00045944 	.word	0x00045944

000355a0 <modem_off>:
   355a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   355a2:	2501      	movs	r5, #1
   355a4:	4c07      	ldr	r4, [pc, #28]	; (355c4 <modem_off+0x24>)
   355a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   355aa:	6065      	str	r5, [r4, #4]
   355ac:	f008 f9f0 	bl	3d990 <nrf_modem_os_busywait>
   355b0:	2300      	movs	r3, #0
   355b2:	6063      	str	r3, [r4, #4]
   355b4:	9301      	str	r3, [sp, #4]
   355b6:	6025      	str	r5, [r4, #0]
   355b8:	6823      	ldr	r3, [r4, #0]
   355ba:	9301      	str	r3, [sp, #4]
   355bc:	9b01      	ldr	r3, [sp, #4]
   355be:	b003      	add	sp, #12
   355c0:	bd30      	pop	{r4, r5, pc}
   355c2:	bf00      	nop
   355c4:	40005610 	.word	0x40005610

000355c8 <nrf_modem_init>:
   355c8:	b570      	push	{r4, r5, r6, lr}
   355ca:	460d      	mov	r5, r1
   355cc:	b300      	cbz	r0, 35610 <nrf_modem_init+0x48>
   355ce:	4e15      	ldr	r6, [pc, #84]	; (35624 <nrf_modem_init+0x5c>)
   355d0:	7832      	ldrb	r2, [r6, #0]
   355d2:	bb02      	cbnz	r2, 35616 <nrf_modem_init+0x4e>
   355d4:	2901      	cmp	r1, #1
   355d6:	d113      	bne.n	35600 <nrf_modem_init+0x38>
   355d8:	68c1      	ldr	r1, [r0, #12]
   355da:	6842      	ldr	r2, [r0, #4]
   355dc:	440a      	add	r2, r1
   355de:	6941      	ldr	r1, [r0, #20]
   355e0:	440a      	add	r2, r1
   355e2:	69c1      	ldr	r1, [r0, #28]
   355e4:	440a      	add	r2, r1
   355e6:	f242 011b 	movw	r1, #8219	; 0x201b
   355ea:	428a      	cmp	r2, r1
   355ec:	d916      	bls.n	3561c <nrf_modem_init+0x54>
   355ee:	6800      	ldr	r0, [r0, #0]
   355f0:	f7ff ff4a 	bl	35488 <nrf_modem_full_dfu_setup>
   355f4:	4604      	mov	r4, r0
   355f6:	b130      	cbz	r0, 35606 <nrf_modem_init+0x3e>
   355f8:	f7ff ffd2 	bl	355a0 <modem_off>
   355fc:	4620      	mov	r0, r4
   355fe:	bd70      	pop	{r4, r5, r6, pc}
   35600:	f00a f8e8 	bl	3f7d4 <nrf_modem_platform_init>
   35604:	e7f6      	b.n	355f4 <nrf_modem_init+0x2c>
   35606:	4b08      	ldr	r3, [pc, #32]	; (35628 <nrf_modem_init+0x60>)
   35608:	701d      	strb	r5, [r3, #0]
   3560a:	2301      	movs	r3, #1
   3560c:	7033      	strb	r3, [r6, #0]
   3560e:	e7f5      	b.n	355fc <nrf_modem_init+0x34>
   35610:	f06f 040d 	mvn.w	r4, #13
   35614:	e7f2      	b.n	355fc <nrf_modem_init+0x34>
   35616:	f04f 34ff 	mov.w	r4, #4294967295
   3561a:	e7ef      	b.n	355fc <nrf_modem_init+0x34>
   3561c:	f06f 040b 	mvn.w	r4, #11
   35620:	e7ec      	b.n	355fc <nrf_modem_init+0x34>
   35622:	bf00      	nop
   35624:	20010f3c 	.word	0x20010f3c
   35628:	20010f3d 	.word	0x20010f3d

0003562c <nrf_modem_platform_af_method_table_get>:
   3562c:	2805      	cmp	r0, #5
   3562e:	b508      	push	{r3, lr}
   35630:	d016      	beq.n	35660 <nrf_modem_platform_af_method_table_get+0x34>
   35632:	f020 0008 	bic.w	r0, r0, #8
   35636:	2802      	cmp	r0, #2
   35638:	d117      	bne.n	3566a <nrf_modem_platform_af_method_table_get+0x3e>
   3563a:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   3563e:	d207      	bcs.n	35650 <nrf_modem_platform_af_method_table_get+0x24>
   35640:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   35644:	d213      	bcs.n	3566e <nrf_modem_platform_af_method_table_get+0x42>
   35646:	3a01      	subs	r2, #1
   35648:	2a01      	cmp	r2, #1
   3564a:	d804      	bhi.n	35656 <nrf_modem_platform_af_method_table_get+0x2a>
   3564c:	4809      	ldr	r0, [pc, #36]	; (35674 <nrf_modem_platform_af_method_table_get+0x48>)
   3564e:	bd08      	pop	{r3, pc}
   35650:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   35654:	d00b      	beq.n	3566e <nrf_modem_platform_af_method_table_get+0x42>
   35656:	207b      	movs	r0, #123	; 0x7b
   35658:	f008 fa36 	bl	3dac8 <nrf_modem_os_errno_set>
   3565c:	2000      	movs	r0, #0
   3565e:	e7f6      	b.n	3564e <nrf_modem_platform_af_method_table_get+0x22>
   35660:	2903      	cmp	r1, #3
   35662:	4805      	ldr	r0, [pc, #20]	; (35678 <nrf_modem_platform_af_method_table_get+0x4c>)
   35664:	bf18      	it	ne
   35666:	2000      	movne	r0, #0
   35668:	e7f1      	b.n	3564e <nrf_modem_platform_af_method_table_get+0x22>
   3566a:	2016      	movs	r0, #22
   3566c:	e7f4      	b.n	35658 <nrf_modem_platform_af_method_table_get+0x2c>
   3566e:	4803      	ldr	r0, [pc, #12]	; (3567c <nrf_modem_platform_af_method_table_get+0x50>)
   35670:	e7ed      	b.n	3564e <nrf_modem_platform_af_method_table_get+0x22>
   35672:	bf00      	nop
   35674:	0004598c 	.word	0x0004598c
   35678:	000459dc 	.word	0x000459dc
   3567c:	000459b4 	.word	0x000459b4

00035680 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   35680:	4b03      	ldr	r3, [pc, #12]	; (35690 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   35682:	4a04      	ldr	r2, [pc, #16]	; (35694 <z_device_state_init+0x14>)
   35684:	4293      	cmp	r3, r2
   35686:	d201      	bcs.n	3568c <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   35688:	331c      	adds	r3, #28
   3568a:	e7fa      	b.n	35682 <z_device_state_init+0x2>
	}
}
   3568c:	4770      	bx	lr
   3568e:	bf00      	nop
   35690:	00040f28 	.word	0x00040f28
   35694:	00040fec 	.word	0x00040fec

00035698 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   35698:	b570      	push	{r4, r5, r6, lr}
   3569a:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3569c:	4b11      	ldr	r3, [pc, #68]	; (356e4 <z_sys_init_run_level+0x4c>)
   3569e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   356a2:	e009      	b.n	356b8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   356a4:	4240      	negs	r0, r0
   356a6:	e017      	b.n	356d8 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   356a8:	68eb      	ldr	r3, [r5, #12]
   356aa:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   356ac:	68ea      	ldr	r2, [r5, #12]
   356ae:	7853      	ldrb	r3, [r2, #1]
   356b0:	f043 0301 	orr.w	r3, r3, #1
   356b4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   356b6:	3408      	adds	r4, #8
   356b8:	1c73      	adds	r3, r6, #1
   356ba:	4a0a      	ldr	r2, [pc, #40]	; (356e4 <z_sys_init_run_level+0x4c>)
   356bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   356c0:	42a3      	cmp	r3, r4
   356c2:	d90d      	bls.n	356e0 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   356c4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   356c6:	6823      	ldr	r3, [r4, #0]
   356c8:	4628      	mov	r0, r5
   356ca:	4798      	blx	r3
		if (dev != NULL) {
   356cc:	2d00      	cmp	r5, #0
   356ce:	d0f2      	beq.n	356b6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   356d0:	2800      	cmp	r0, #0
   356d2:	d0eb      	beq.n	356ac <z_sys_init_run_level+0x14>
				if (rc < 0) {
   356d4:	2800      	cmp	r0, #0
   356d6:	dbe5      	blt.n	356a4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   356d8:	28ff      	cmp	r0, #255	; 0xff
   356da:	dde5      	ble.n	356a8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   356dc:	20ff      	movs	r0, #255	; 0xff
   356de:	e7e3      	b.n	356a8 <z_sys_init_run_level+0x10>
		}
	}
}
   356e0:	bd70      	pop	{r4, r5, r6, pc}
   356e2:	bf00      	nop
   356e4:	00045a04 	.word	0x00045a04

000356e8 <z_device_get_all_static>:
#include <syscalls/device_usable_check_mrsh.c>
#endif /* CONFIG_USERSPACE */

size_t z_device_get_all_static(struct device const **devices)
{
	*devices = __device_start;
   356e8:	4a04      	ldr	r2, [pc, #16]	; (356fc <z_device_get_all_static+0x14>)
   356ea:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   356ec:	4b04      	ldr	r3, [pc, #16]	; (35700 <z_device_get_all_static+0x18>)
   356ee:	1a9b      	subs	r3, r3, r2
   356f0:	109b      	asrs	r3, r3, #2
}
   356f2:	4804      	ldr	r0, [pc, #16]	; (35704 <z_device_get_all_static+0x1c>)
   356f4:	fb00 f003 	mul.w	r0, r0, r3
   356f8:	4770      	bx	lr
   356fa:	bf00      	nop
   356fc:	00040f28 	.word	0x00040f28
   35700:	00040fec 	.word	0x00040fec
   35704:	b6db6db7 	.word	0xb6db6db7

00035708 <z_impl_device_get_binding>:
{
   35708:	b538      	push	{r3, r4, r5, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   3570a:	4605      	mov	r5, r0
   3570c:	b328      	cbz	r0, 3575a <z_impl_device_get_binding+0x52>
   3570e:	7803      	ldrb	r3, [r0, #0]
   35710:	b32b      	cbz	r3, 3575e <z_impl_device_get_binding+0x56>
	for (dev = __device_start; dev != __device_end; dev++) {
   35712:	4c14      	ldr	r4, [pc, #80]	; (35764 <z_impl_device_get_binding+0x5c>)
   35714:	e000      	b.n	35718 <z_impl_device_get_binding+0x10>
   35716:	341c      	adds	r4, #28
   35718:	4b13      	ldr	r3, [pc, #76]	; (35768 <z_impl_device_get_binding+0x60>)
   3571a:	429c      	cmp	r4, r3
   3571c:	d008      	beq.n	35730 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   3571e:	4620      	mov	r0, r4
   35720:	f00a f9ec 	bl	3fafc <z_device_ready>
   35724:	2800      	cmp	r0, #0
   35726:	d0f6      	beq.n	35716 <z_impl_device_get_binding+0xe>
   35728:	6823      	ldr	r3, [r4, #0]
   3572a:	42ab      	cmp	r3, r5
   3572c:	d1f3      	bne.n	35716 <z_impl_device_get_binding+0xe>
   3572e:	e012      	b.n	35756 <z_impl_device_get_binding+0x4e>
	for (dev = __device_start; dev != __device_end; dev++) {
   35730:	4c0c      	ldr	r4, [pc, #48]	; (35764 <z_impl_device_get_binding+0x5c>)
   35732:	e000      	b.n	35736 <z_impl_device_get_binding+0x2e>
   35734:	341c      	adds	r4, #28
   35736:	4b0c      	ldr	r3, [pc, #48]	; (35768 <z_impl_device_get_binding+0x60>)
   35738:	429c      	cmp	r4, r3
   3573a:	d00b      	beq.n	35754 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3573c:	4620      	mov	r0, r4
   3573e:	f00a f9dd 	bl	3fafc <z_device_ready>
   35742:	2800      	cmp	r0, #0
   35744:	d0f6      	beq.n	35734 <z_impl_device_get_binding+0x2c>
   35746:	6821      	ldr	r1, [r4, #0]
   35748:	4628      	mov	r0, r5
   3574a:	f7eb feed 	bl	21528 <strcmp>
   3574e:	2800      	cmp	r0, #0
   35750:	d1f0      	bne.n	35734 <z_impl_device_get_binding+0x2c>
   35752:	e000      	b.n	35756 <z_impl_device_get_binding+0x4e>
	return NULL;
   35754:	2400      	movs	r4, #0
}
   35756:	4620      	mov	r0, r4
   35758:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3575a:	4604      	mov	r4, r0
   3575c:	e7fb      	b.n	35756 <z_impl_device_get_binding+0x4e>
   3575e:	2400      	movs	r4, #0
   35760:	e7f9      	b.n	35756 <z_impl_device_get_binding+0x4e>
   35762:	bf00      	nop
   35764:	00040f28 	.word	0x00040f28
   35768:	00040fec 	.word	0x00040fec

0003576c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3576c:	4b01      	ldr	r3, [pc, #4]	; (35774 <z_impl_z_errno+0x8>)
   3576e:	6898      	ldr	r0, [r3, #8]
}
   35770:	3064      	adds	r0, #100	; 0x64
   35772:	4770      	bx	lr
   35774:	20010d7c 	.word	0x20010d7c

00035778 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   35778:	2804      	cmp	r0, #4
   3577a:	d80c      	bhi.n	35796 <reason_to_str+0x1e>
   3577c:	e8df f000 	tbb	[pc, r0]
   35780:	07050d03 	.word	0x07050d03
   35784:	09          	.byte	0x09
   35785:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   35786:	4806      	ldr	r0, [pc, #24]	; (357a0 <reason_to_str+0x28>)
   35788:	4770      	bx	lr
		return "Stack overflow";
   3578a:	4806      	ldr	r0, [pc, #24]	; (357a4 <reason_to_str+0x2c>)
   3578c:	4770      	bx	lr
		return "Kernel oops";
   3578e:	4806      	ldr	r0, [pc, #24]	; (357a8 <reason_to_str+0x30>)
   35790:	4770      	bx	lr
		return "Kernel panic";
   35792:	4806      	ldr	r0, [pc, #24]	; (357ac <reason_to_str+0x34>)
   35794:	4770      	bx	lr
	default:
		return "Unknown error";
   35796:	4806      	ldr	r0, [pc, #24]	; (357b0 <reason_to_str+0x38>)
   35798:	4770      	bx	lr
		return "Unhandled interrupt";
   3579a:	4806      	ldr	r0, [pc, #24]	; (357b4 <reason_to_str+0x3c>)
	}
}
   3579c:	4770      	bx	lr
   3579e:	bf00      	nop
   357a0:	00045a6c 	.word	0x00045a6c
   357a4:	00045a40 	.word	0x00045a40
   357a8:	00045a50 	.word	0x00045a50
   357ac:	00045a5c 	.word	0x00045a5c
   357b0:	00045a1c 	.word	0x00045a1c
   357b4:	00045a2c 	.word	0x00045a2c

000357b8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   357b8:	b130      	cbz	r0, 357c8 <thread_name_get+0x10>
{
   357ba:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   357bc:	f00a f9e7 	bl	3fb8e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   357c0:	b120      	cbz	r0, 357cc <thread_name_get+0x14>
   357c2:	7803      	ldrb	r3, [r0, #0]
   357c4:	b123      	cbz	r3, 357d0 <thread_name_get+0x18>
}
   357c6:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   357c8:	4802      	ldr	r0, [pc, #8]	; (357d4 <thread_name_get+0x1c>)
}
   357ca:	4770      	bx	lr
		thread_name = "unknown";
   357cc:	4801      	ldr	r0, [pc, #4]	; (357d4 <thread_name_get+0x1c>)
   357ce:	e7fa      	b.n	357c6 <thread_name_get+0xe>
   357d0:	4800      	ldr	r0, [pc, #0]	; (357d4 <thread_name_get+0x1c>)
	return thread_name;
   357d2:	e7f8      	b.n	357c6 <thread_name_get+0xe>
   357d4:	00045a7c 	.word	0x00045a7c

000357d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   357d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   357dc:	b082      	sub	sp, #8
   357de:	4604      	mov	r4, r0
   357e0:	460e      	mov	r6, r1
	__asm__ volatile(
   357e2:	f04f 0320 	mov.w	r3, #32
   357e6:	f3ef 8711 	mrs	r7, BASEPRI
   357ea:	f383 8812 	msr	BASEPRI_MAX, r3
   357ee:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   357f2:	f002 fcbd 	bl	38170 <z_impl_z_current_get>
   357f6:	4605      	mov	r5, r0
   357f8:	4b30      	ldr	r3, [pc, #192]	; (358bc <z_fatal_error+0xe4>)
   357fa:	4a31      	ldr	r2, [pc, #196]	; (358c0 <z_fatal_error+0xe8>)
   357fc:	1a9b      	subs	r3, r3, r2
   357fe:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   35800:	f04f 0800 	mov.w	r8, #0
   35804:	2201      	movs	r2, #1
   35806:	f362 0802 	bfi	r8, r2, #0, #3
   3580a:	f36f 08c5 	bfc	r8, #3, #3
   3580e:	f363 188f 	bfi	r8, r3, #6, #10
   35812:	4620      	mov	r0, r4
   35814:	f7ff ffb0 	bl	35778 <reason_to_str>
   35818:	4603      	mov	r3, r0
   3581a:	2200      	movs	r2, #0
   3581c:	9200      	str	r2, [sp, #0]
   3581e:	4622      	mov	r2, r4
   35820:	4928      	ldr	r1, [pc, #160]	; (358c4 <z_fatal_error+0xec>)
   35822:	4640      	mov	r0, r8
   35824:	f006 fc10 	bl	3c048 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   35828:	b11e      	cbz	r6, 35832 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3582a:	69f3      	ldr	r3, [r6, #28]
   3582c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   35830:	bb3b      	cbnz	r3, 35882 <z_fatal_error+0xaa>
   35832:	4b22      	ldr	r3, [pc, #136]	; (358bc <z_fatal_error+0xe4>)
   35834:	4a22      	ldr	r2, [pc, #136]	; (358c0 <z_fatal_error+0xe8>)
   35836:	1a9b      	subs	r3, r3, r2
   35838:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3583a:	f04f 0800 	mov.w	r8, #0
   3583e:	2201      	movs	r2, #1
   35840:	f362 0802 	bfi	r8, r2, #0, #3
   35844:	f36f 08c5 	bfc	r8, #3, #3
   35848:	f363 188f 	bfi	r8, r3, #6, #10
   3584c:	4628      	mov	r0, r5
   3584e:	f7ff ffb3 	bl	357b8 <thread_name_get>
   35852:	f006 fc0d 	bl	3c070 <z_log_strdup>
   35856:	4603      	mov	r3, r0
   35858:	462a      	mov	r2, r5
   3585a:	491b      	ldr	r1, [pc, #108]	; (358c8 <z_fatal_error+0xf0>)
   3585c:	4640      	mov	r0, r8
   3585e:	f006 fbf3 	bl	3c048 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   35862:	4631      	mov	r1, r6
   35864:	4620      	mov	r0, r4
   35866:	f7f8 fd99 	bl	2e39c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3586a:	2c04      	cmp	r4, #4
   3586c:	d01a      	beq.n	358a4 <z_fatal_error+0xcc>
	__asm__ volatile(
   3586e:	f387 8811 	msr	BASEPRI, r7
   35872:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   35876:	4628      	mov	r0, r5
   35878:	f7f2 fdc4 	bl	28404 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   3587c:	b002      	add	sp, #8
   3587e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35882:	4b0e      	ldr	r3, [pc, #56]	; (358bc <z_fatal_error+0xe4>)
   35884:	4a0e      	ldr	r2, [pc, #56]	; (358c0 <z_fatal_error+0xe8>)
   35886:	1a9b      	subs	r3, r3, r2
   35888:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   3588a:	f04f 0000 	mov.w	r0, #0
   3588e:	2201      	movs	r2, #1
   35890:	f362 0002 	bfi	r0, r2, #0, #3
   35894:	f36f 00c5 	bfc	r0, #3, #3
   35898:	f363 108f 	bfi	r0, r3, #6, #10
   3589c:	490b      	ldr	r1, [pc, #44]	; (358cc <z_fatal_error+0xf4>)
   3589e:	f006 fbd3 	bl	3c048 <log_string_sync>
   358a2:	e7c6      	b.n	35832 <z_fatal_error+0x5a>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   358a4:	4c0a      	ldr	r4, [pc, #40]	; (358d0 <z_fatal_error+0xf8>)
   358a6:	228f      	movs	r2, #143	; 0x8f
   358a8:	4621      	mov	r1, r4
   358aa:	480a      	ldr	r0, [pc, #40]	; (358d4 <z_fatal_error+0xfc>)
   358ac:	f006 f944 	bl	3bb38 <printk>
   358b0:	218f      	movs	r1, #143	; 0x8f
   358b2:	4620      	mov	r0, r4
   358b4:	f006 fb94 	bl	3bfe0 <assert_post_action>
   358b8:	e7d9      	b.n	3586e <z_fatal_error+0x96>
   358ba:	bf00      	nop
   358bc:	000412e8 	.word	0x000412e8
   358c0:	00041200 	.word	0x00041200
   358c4:	00045a84 	.word	0x00045a84
   358c8:	00045ad0 	.word	0x00045ad0
   358cc:	00045aac 	.word	0x00045aac
   358d0:	00045ae8 	.word	0x00045ae8
   358d4:	00041c84 	.word	0x00041c84

000358d8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   358d8:	b530      	push	{r4, r5, lr}
   358da:	b087      	sub	sp, #28
	struct k_thread *thread = &z_idle_threads[i];
   358dc:	4c10      	ldr	r4, [pc, #64]	; (35920 <init_idle_thread+0x48>)
   358de:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	k_thread_stack_t *stack = z_idle_stacks[i];
   358e2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   358e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   358ea:	4b0e      	ldr	r3, [pc, #56]	; (35924 <init_idle_thread+0x4c>)
   358ec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   358f0:	2300      	movs	r3, #0
   358f2:	9305      	str	r3, [sp, #20]
   358f4:	2201      	movs	r2, #1
   358f6:	9204      	str	r2, [sp, #16]
   358f8:	220f      	movs	r2, #15
   358fa:	9203      	str	r2, [sp, #12]
   358fc:	9302      	str	r3, [sp, #8]
   358fe:	9301      	str	r3, [sp, #4]
   35900:	9000      	str	r0, [sp, #0]
   35902:	4b09      	ldr	r3, [pc, #36]	; (35928 <init_idle_thread+0x50>)
   35904:	f44f 72a0 	mov.w	r2, #320	; 0x140
   35908:	4908      	ldr	r1, [pc, #32]	; (3592c <init_idle_thread+0x54>)
   3590a:	eb01 1185 	add.w	r1, r1, r5, lsl #6
   3590e:	4620      	mov	r0, r4
   35910:	f000 fa04 	bl	35d1c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   35914:	7b63      	ldrb	r3, [r4, #13]
   35916:	f023 0304 	bic.w	r3, r3, #4
   3591a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   3591c:	b007      	add	sp, #28
   3591e:	bd30      	pop	{r4, r5, pc}
   35920:	2000e638 	.word	0x2000e638
   35924:	20010d7c 	.word	0x20010d7c
   35928:	00035f79 	.word	0x00035f79
   3592c:	200138c8 	.word	0x200138c8

00035930 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   35930:	b570      	push	{r4, r5, r6, lr}
   35932:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   35934:	f002 fa9c 	bl	37e70 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   35938:	4d1a      	ldr	r5, [pc, #104]	; (359a4 <prepare_multithreading+0x74>)
   3593a:	4b1b      	ldr	r3, [pc, #108]	; (359a8 <prepare_multithreading+0x78>)
   3593c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3593e:	4b1b      	ldr	r3, [pc, #108]	; (359ac <prepare_multithreading+0x7c>)
   35940:	9305      	str	r3, [sp, #20]
   35942:	2301      	movs	r3, #1
   35944:	9304      	str	r3, [sp, #16]
   35946:	2400      	movs	r4, #0
   35948:	9403      	str	r4, [sp, #12]
   3594a:	9402      	str	r4, [sp, #8]
   3594c:	9401      	str	r4, [sp, #4]
   3594e:	9400      	str	r4, [sp, #0]
   35950:	4b17      	ldr	r3, [pc, #92]	; (359b0 <prepare_multithreading+0x80>)
   35952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   35956:	4917      	ldr	r1, [pc, #92]	; (359b4 <prepare_multithreading+0x84>)
   35958:	4628      	mov	r0, r5
   3595a:	f000 f9df 	bl	35d1c <z_setup_new_thread>
   3595e:	4606      	mov	r6, r0
   35960:	7b6b      	ldrb	r3, [r5, #13]
   35962:	f023 0304 	bic.w	r3, r3, #4
   35966:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   35968:	4628      	mov	r0, r5
   3596a:	f001 fe23 	bl	375b4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   3596e:	2c00      	cmp	r4, #0
   35970:	dd02      	ble.n	35978 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   35972:	4630      	mov	r0, r6
   35974:	b006      	add	sp, #24
   35976:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   35978:	4620      	mov	r0, r4
   3597a:	f7ff ffad 	bl	358d8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   3597e:	4a0e      	ldr	r2, [pc, #56]	; (359b8 <prepare_multithreading+0x88>)
   35980:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
   35984:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   35988:	4b07      	ldr	r3, [pc, #28]	; (359a8 <prepare_multithreading+0x78>)
   3598a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   3598e:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   35990:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   35992:	4a0a      	ldr	r2, [pc, #40]	; (359bc <prepare_multithreading+0x8c>)
   35994:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   35998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   3599c:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   3599e:	3401      	adds	r4, #1
   359a0:	e7e5      	b.n	3596e <prepare_multithreading+0x3e>
   359a2:	bf00      	nop
   359a4:	2000e6b8 	.word	0x2000e6b8
   359a8:	20010d7c 	.word	0x20010d7c
   359ac:	000418b4 	.word	0x000418b4
   359b0:	000359c1 	.word	0x000359c1
   359b4:	200118c8 	.word	0x200118c8
   359b8:	2000e638 	.word	0x2000e638
   359bc:	20013a08 	.word	0x20013a08

000359c0 <bg_thread_main>:
{
   359c0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   359c2:	4b0a      	ldr	r3, [pc, #40]	; (359ec <bg_thread_main+0x2c>)
   359c4:	2201      	movs	r2, #1
   359c6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   359c8:	2002      	movs	r0, #2
   359ca:	f7ff fe65 	bl	35698 <z_sys_init_run_level>
	boot_banner();
   359ce:	f00a fa75 	bl	3febc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   359d2:	2003      	movs	r0, #3
   359d4:	f7ff fe60 	bl	35698 <z_sys_init_run_level>
	z_init_static_threads();
   359d8:	f000 fa34 	bl	35e44 <z_init_static_threads>
	main();
   359dc:	f7ed f89a 	bl	22b14 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   359e0:	4a03      	ldr	r2, [pc, #12]	; (359f0 <bg_thread_main+0x30>)
   359e2:	7b13      	ldrb	r3, [r2, #12]
   359e4:	f023 0301 	bic.w	r3, r3, #1
   359e8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   359ea:	bd08      	pop	{r3, pc}
   359ec:	20010f3e 	.word	0x20010f3e
   359f0:	2000e6b8 	.word	0x2000e6b8

000359f4 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   359f4:	b508      	push	{r3, lr}
   359f6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   359f8:	4a01      	ldr	r2, [pc, #4]	; (35a00 <switch_to_main_thread+0xc>)
   359fa:	4802      	ldr	r0, [pc, #8]	; (35a04 <switch_to_main_thread+0x10>)
   359fc:	f7f1 fffc 	bl	279f8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   35a00:	000359c1 	.word	0x000359c1
   35a04:	2000e6b8 	.word	0x2000e6b8

00035a08 <z_bss_zero>:
{
   35a08:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   35a0a:	4803      	ldr	r0, [pc, #12]	; (35a18 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   35a0c:	4a03      	ldr	r2, [pc, #12]	; (35a1c <z_bss_zero+0x14>)
   35a0e:	1a12      	subs	r2, r2, r0
   35a10:	2100      	movs	r1, #0
   35a12:	f00a fa95 	bl	3ff40 <memset>
}
   35a16:	bd08      	pop	{r3, pc}
   35a18:	2000cb28 	.word	0x2000cb28
   35a1c:	20010f44 	.word	0x20010f44

00035a20 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   35a20:	b500      	push	{lr}
   35a22:	b0a1      	sub	sp, #132	; 0x84
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   35a24:	f7f0 fd16 	bl	26454 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   35a28:	4b1c      	ldr	r3, [pc, #112]	; (35a9c <z_cstart+0x7c>)
	uint32_t msp =
   35a2a:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   35a2e:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   35a32:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   35a36:	4c1a      	ldr	r4, [pc, #104]	; (35aa0 <z_cstart+0x80>)
   35a38:	23e0      	movs	r3, #224	; 0xe0
   35a3a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   35a3e:	2500      	movs	r5, #0
   35a40:	77e5      	strb	r5, [r4, #31]
   35a42:	7625      	strb	r5, [r4, #24]
   35a44:	7665      	strb	r5, [r4, #25]
   35a46:	76a5      	strb	r5, [r4, #26]
   35a48:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   35a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35a4e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   35a52:	6263      	str	r3, [r4, #36]	; 0x24
   35a54:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   35a58:	f7f2 fc28 	bl	282ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
   35a5c:	f7f1 fe62 	bl	27724 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   35a60:	f04f 33ff 	mov.w	r3, #4294967295
   35a64:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   35a66:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   35a68:	f7f2 fece 	bl	28808 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   35a6c:	f7f2 fce0 	bl	28430 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   35a70:	2401      	movs	r4, #1
   35a72:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   35a76:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   35a7a:	951a      	str	r5, [sp, #104]	; 0x68
	dummy_thread->stack_info.size = 0U;
   35a7c:	951b      	str	r5, [sp, #108]	; 0x6c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   35a7e:	4b09      	ldr	r3, [pc, #36]	; (35aa4 <z_cstart+0x84>)
   35a80:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   35a84:	f7ff fdfc 	bl	35680 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   35a88:	4628      	mov	r0, r5
   35a8a:	f7ff fe05 	bl	35698 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   35a8e:	4620      	mov	r0, r4
   35a90:	f7ff fe02 	bl	35698 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   35a94:	f7ff ff4c 	bl	35930 <prepare_multithreading>
   35a98:	f7ff ffac 	bl	359f4 <switch_to_main_thread>
   35a9c:	20013a08 	.word	0x20013a08
   35aa0:	e000ed00 	.word	0xe000ed00
   35aa4:	20010d7c 	.word	0x20010d7c

00035aa8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   35aa8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   35aaa:	4c0d      	ldr	r4, [pc, #52]	; (35ae0 <statics_init+0x38>)
   35aac:	e012      	b.n	35ad4 <statics_init+0x2c>
   35aae:	4d0d      	ldr	r5, [pc, #52]	; (35ae4 <statics_init+0x3c>)
   35ab0:	2218      	movs	r2, #24
   35ab2:	4629      	mov	r1, r5
   35ab4:	480c      	ldr	r0, [pc, #48]	; (35ae8 <statics_init+0x40>)
   35ab6:	f006 f83f 	bl	3bb38 <printk>
   35aba:	2118      	movs	r1, #24
   35abc:	4628      	mov	r0, r5
   35abe:	f006 fa8f 	bl	3bfe0 <assert_post_action>
   35ac2:	4b0a      	ldr	r3, [pc, #40]	; (35aec <statics_init+0x44>)
   35ac4:	429c      	cmp	r4, r3
   35ac6:	d209      	bcs.n	35adc <statics_init+0x34>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   35ac8:	68a2      	ldr	r2, [r4, #8]
   35aca:	6861      	ldr	r1, [r4, #4]
   35acc:	4620      	mov	r0, r4
   35ace:	f00a f822 	bl	3fb16 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   35ad2:	3418      	adds	r4, #24
   35ad4:	4b05      	ldr	r3, [pc, #20]	; (35aec <statics_init+0x44>)
   35ad6:	429c      	cmp	r4, r3
   35ad8:	d9f3      	bls.n	35ac2 <statics_init+0x1a>
   35ada:	e7e8      	b.n	35aae <statics_init+0x6>
		}
	}
	return 0;
}
   35adc:	2000      	movs	r0, #0
   35ade:	bd38      	pop	{r3, r4, r5, pc}
   35ae0:	2000c9c0 	.word	0x2000c9c0
   35ae4:	00045b10 	.word	0x00045b10
   35ae8:	00041c84 	.word	0x00041c84
   35aec:	2000ca08 	.word	0x2000ca08

00035af0 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   35af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35af4:	b087      	sub	sp, #28
   35af6:	4681      	mov	r9, r0
   35af8:	9103      	str	r1, [sp, #12]
   35afa:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   35afc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   35b00:	f00a f910 	bl	3fd24 <sys_clock_timeout_end_calc>
   35b04:	4683      	mov	fp, r0
   35b06:	9105      	str	r1, [sp, #20]
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   35b08:	f109 0814 	add.w	r8, r9, #20
	__asm__ volatile(
   35b0c:	f04f 0320 	mov.w	r3, #32
   35b10:	f3ef 8511 	mrs	r5, BASEPRI
   35b14:	f383 8812 	msr	BASEPRI_MAX, r3
   35b18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35b1c:	4640      	mov	r0, r8
   35b1e:	f000 fa03 	bl	35f28 <z_spin_lock_valid>
   35b22:	b168      	cbz	r0, 35b40 <k_heap_aligned_alloc+0x50>
	z_spin_lock_set_owner(l);
   35b24:	4640      	mov	r0, r8
   35b26:	f000 fa1f 	bl	35f68 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   35b2a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   35b2e:	b11b      	cbz	r3, 35b38 <k_heap_aligned_alloc+0x48>
   35b30:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
   35b34:	4323      	orrs	r3, r4
   35b36:	d10e      	bne.n	35b56 <k_heap_aligned_alloc+0x66>

	bool blocked_alloc = false;
   35b38:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   35b3c:	4654      	mov	r4, sl

	while (ret == NULL) {
   35b3e:	e02c      	b.n	35b9a <k_heap_aligned_alloc+0xaa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35b40:	4c33      	ldr	r4, [pc, #204]	; (35c10 <k_heap_aligned_alloc+0x120>)
   35b42:	2281      	movs	r2, #129	; 0x81
   35b44:	4621      	mov	r1, r4
   35b46:	4833      	ldr	r0, [pc, #204]	; (35c14 <k_heap_aligned_alloc+0x124>)
   35b48:	f005 fff6 	bl	3bb38 <printk>
   35b4c:	2181      	movs	r1, #129	; 0x81
   35b4e:	4620      	mov	r0, r4
   35b50:	f006 fa46 	bl	3bfe0 <assert_post_action>
   35b54:	e7e6      	b.n	35b24 <k_heap_aligned_alloc+0x34>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   35b56:	4c30      	ldr	r4, [pc, #192]	; (35c18 <k_heap_aligned_alloc+0x128>)
   35b58:	2249      	movs	r2, #73	; 0x49
   35b5a:	4621      	mov	r1, r4
   35b5c:	482d      	ldr	r0, [pc, #180]	; (35c14 <k_heap_aligned_alloc+0x124>)
   35b5e:	f005 ffeb 	bl	3bb38 <printk>
   35b62:	2149      	movs	r1, #73	; 0x49
   35b64:	4620      	mov	r0, r4
   35b66:	f006 fa3b 	bl	3bfe0 <assert_post_action>
   35b6a:	e7e5      	b.n	35b38 <k_heap_aligned_alloc+0x48>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   35b6c:	e9cd 6700 	strd	r6, r7, [sp]
   35b70:	f109 020c 	add.w	r2, r9, #12
   35b74:	4629      	mov	r1, r5
   35b76:	4640      	mov	r0, r8
   35b78:	f001 feee 	bl	37958 <z_pend_curr>
   35b7c:	f04f 0320 	mov.w	r3, #32
   35b80:	f3ef 8511 	mrs	r5, BASEPRI
   35b84:	f383 8812 	msr	BASEPRI_MAX, r3
   35b88:	f3bf 8f6f 	isb	sy
   35b8c:	4640      	mov	r0, r8
   35b8e:	f000 f9cb 	bl	35f28 <z_spin_lock_valid>
   35b92:	b1d8      	cbz	r0, 35bcc <k_heap_aligned_alloc+0xdc>
	z_spin_lock_set_owner(l);
   35b94:	4640      	mov	r0, r8
   35b96:	f000 f9e7 	bl	35f68 <z_spin_lock_set_owner>
	while (ret == NULL) {
   35b9a:	bb0c      	cbnz	r4, 35be0 <k_heap_aligned_alloc+0xf0>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   35b9c:	9a04      	ldr	r2, [sp, #16]
   35b9e:	9903      	ldr	r1, [sp, #12]
   35ba0:	4648      	mov	r0, r9
   35ba2:	f7ef fca5 	bl	254f0 <sys_heap_aligned_alloc>
   35ba6:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   35ba8:	f002 feb6 	bl	38918 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   35bac:	b9c4      	cbnz	r4, 35be0 <k_heap_aligned_alloc+0xf0>
		    (ret != NULL) || ((end - now) <= 0)) {
   35bae:	ebbb 0600 	subs.w	r6, fp, r0
   35bb2:	9b05      	ldr	r3, [sp, #20]
   35bb4:	eb63 0701 	sbc.w	r7, r3, r1
   35bb8:	2e01      	cmp	r6, #1
   35bba:	f177 0300 	sbcs.w	r3, r7, #0
   35bbe:	db0f      	blt.n	35be0 <k_heap_aligned_alloc+0xf0>
		if (!blocked_alloc) {
   35bc0:	f1ba 0f00 	cmp.w	sl, #0
   35bc4:	d1d2      	bne.n	35b6c <k_heap_aligned_alloc+0x7c>
			blocked_alloc = true;
   35bc6:	f04f 0a01 	mov.w	sl, #1
   35bca:	e7cf      	b.n	35b6c <k_heap_aligned_alloc+0x7c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35bcc:	2281      	movs	r2, #129	; 0x81
   35bce:	4910      	ldr	r1, [pc, #64]	; (35c10 <k_heap_aligned_alloc+0x120>)
   35bd0:	4810      	ldr	r0, [pc, #64]	; (35c14 <k_heap_aligned_alloc+0x124>)
   35bd2:	f005 ffb1 	bl	3bb38 <printk>
   35bd6:	2181      	movs	r1, #129	; 0x81
   35bd8:	480d      	ldr	r0, [pc, #52]	; (35c10 <k_heap_aligned_alloc+0x120>)
   35bda:	f006 fa01 	bl	3bfe0 <assert_post_action>
   35bde:	e7d9      	b.n	35b94 <k_heap_aligned_alloc+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35be0:	4640      	mov	r0, r8
   35be2:	f000 f9b1 	bl	35f48 <z_spin_unlock_valid>
   35be6:	b138      	cbz	r0, 35bf8 <k_heap_aligned_alloc+0x108>
	__asm__ volatile(
   35be8:	f385 8811 	msr	BASEPRI, r5
   35bec:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   35bf0:	4620      	mov	r0, r4
   35bf2:	b007      	add	sp, #28
   35bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35bf8:	4e05      	ldr	r6, [pc, #20]	; (35c10 <k_heap_aligned_alloc+0x120>)
   35bfa:	22ac      	movs	r2, #172	; 0xac
   35bfc:	4631      	mov	r1, r6
   35bfe:	4805      	ldr	r0, [pc, #20]	; (35c14 <k_heap_aligned_alloc+0x124>)
   35c00:	f005 ff9a 	bl	3bb38 <printk>
   35c04:	21ac      	movs	r1, #172	; 0xac
   35c06:	4630      	mov	r0, r6
   35c08:	f006 f9ea 	bl	3bfe0 <assert_post_action>
   35c0c:	e7ec      	b.n	35be8 <k_heap_aligned_alloc+0xf8>
   35c0e:	bf00      	nop
   35c10:	00042210 	.word	0x00042210
   35c14:	00041c84 	.word	0x00041c84
   35c18:	00045b10 	.word	0x00045b10

00035c1c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   35c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35c20:	4604      	mov	r4, r0
   35c22:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   35c24:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   35c28:	f04f 0320 	mov.w	r3, #32
   35c2c:	f3ef 8711 	mrs	r7, BASEPRI
   35c30:	f383 8812 	msr	BASEPRI_MAX, r3
   35c34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35c38:	4628      	mov	r0, r5
   35c3a:	f000 f975 	bl	35f28 <z_spin_lock_valid>
   35c3e:	b188      	cbz	r0, 35c64 <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   35c40:	4628      	mov	r0, r5
   35c42:	f000 f991 	bl	35f68 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   35c46:	4631      	mov	r1, r6
   35c48:	4620      	mov	r0, r4
   35c4a:	f7ef fc13 	bl	25474 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   35c4e:	f104 000c 	add.w	r0, r4, #12
   35c52:	f00a f82d 	bl	3fcb0 <z_unpend_all>
   35c56:	b188      	cbz	r0, 35c7c <k_heap_free+0x60>
		z_reschedule(&h->lock, key);
   35c58:	4639      	mov	r1, r7
   35c5a:	4628      	mov	r0, r5
   35c5c:	f001 fa38 	bl	370d0 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   35c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35c64:	f8df 8040 	ldr.w	r8, [pc, #64]	; 35ca8 <k_heap_free+0x8c>
   35c68:	2281      	movs	r2, #129	; 0x81
   35c6a:	4641      	mov	r1, r8
   35c6c:	480d      	ldr	r0, [pc, #52]	; (35ca4 <k_heap_free+0x88>)
   35c6e:	f005 ff63 	bl	3bb38 <printk>
   35c72:	2181      	movs	r1, #129	; 0x81
   35c74:	4640      	mov	r0, r8
   35c76:	f006 f9b3 	bl	3bfe0 <assert_post_action>
   35c7a:	e7e1      	b.n	35c40 <k_heap_free+0x24>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35c7c:	4628      	mov	r0, r5
   35c7e:	f000 f963 	bl	35f48 <z_spin_unlock_valid>
   35c82:	b120      	cbz	r0, 35c8e <k_heap_free+0x72>
	__asm__ volatile(
   35c84:	f387 8811 	msr	BASEPRI, r7
   35c88:	f3bf 8f6f 	isb	sy
   35c8c:	e7e8      	b.n	35c60 <k_heap_free+0x44>
   35c8e:	4c06      	ldr	r4, [pc, #24]	; (35ca8 <k_heap_free+0x8c>)
   35c90:	22ac      	movs	r2, #172	; 0xac
   35c92:	4621      	mov	r1, r4
   35c94:	4803      	ldr	r0, [pc, #12]	; (35ca4 <k_heap_free+0x88>)
   35c96:	f005 ff4f 	bl	3bb38 <printk>
   35c9a:	21ac      	movs	r1, #172	; 0xac
   35c9c:	4620      	mov	r0, r4
   35c9e:	f006 f99f 	bl	3bfe0 <assert_post_action>
   35ca2:	e7ef      	b.n	35c84 <k_heap_free+0x68>
   35ca4:	00041c84 	.word	0x00041c84
   35ca8:	00042210 	.word	0x00042210

00035cac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   35cac:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   35cae:	4c0e      	ldr	r4, [pc, #56]	; (35ce8 <init_mem_slab_module+0x3c>)
	int rc = 0;
   35cb0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   35cb2:	e012      	b.n	35cda <init_mem_slab_module+0x2e>
   35cb4:	4e0d      	ldr	r6, [pc, #52]	; (35cec <init_mem_slab_module+0x40>)
   35cb6:	223c      	movs	r2, #60	; 0x3c
   35cb8:	4631      	mov	r1, r6
   35cba:	480d      	ldr	r0, [pc, #52]	; (35cf0 <init_mem_slab_module+0x44>)
   35cbc:	f005 ff3c 	bl	3bb38 <printk>
   35cc0:	213c      	movs	r1, #60	; 0x3c
   35cc2:	4630      	mov	r0, r6
   35cc4:	f006 f98c 	bl	3bfe0 <assert_post_action>
   35cc8:	4b0a      	ldr	r3, [pc, #40]	; (35cf4 <init_mem_slab_module+0x48>)
   35cca:	429c      	cmp	r4, r3
   35ccc:	d209      	bcs.n	35ce2 <init_mem_slab_module+0x36>
		rc = create_free_list(slab);
   35cce:	4620      	mov	r0, r4
   35cd0:	f009 ff34 	bl	3fb3c <create_free_list>
		if (rc < 0) {
   35cd4:	1e05      	subs	r5, r0, #0
   35cd6:	db04      	blt.n	35ce2 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   35cd8:	3420      	adds	r4, #32
   35cda:	4b06      	ldr	r3, [pc, #24]	; (35cf4 <init_mem_slab_module+0x48>)
   35cdc:	429c      	cmp	r4, r3
   35cde:	d9f3      	bls.n	35cc8 <init_mem_slab_module+0x1c>
   35ce0:	e7e8      	b.n	35cb4 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
   35ce2:	4628      	mov	r0, r5
   35ce4:	bd70      	pop	{r4, r5, r6, pc}
   35ce6:	bf00      	nop
   35ce8:	2000c9c0 	.word	0x2000c9c0
   35cec:	00045b34 	.word	0x00045b34
   35cf0:	00041c84 	.word	0x00041c84
   35cf4:	2000c9c0 	.word	0x2000c9c0

00035cf8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   35cf8:	b538      	push	{r3, r4, r5, lr}
   35cfa:	4614      	mov	r4, r2
   35cfc:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   35cfe:	ea54 0305 	orrs.w	r3, r4, r5
   35d02:	d102      	bne.n	35d0a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   35d04:	f009 ff45 	bl	3fb92 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   35d08:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   35d0a:	462b      	mov	r3, r5
   35d0c:	4902      	ldr	r1, [pc, #8]	; (35d18 <schedule_new_thread+0x20>)
   35d0e:	3018      	adds	r0, #24
   35d10:	f002 fb96 	bl	38440 <z_add_timeout>
   35d14:	e7f8      	b.n	35d08 <schedule_new_thread+0x10>
   35d16:	bf00      	nop
   35d18:	00037755 	.word	0x00037755

00035d1c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   35d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35d20:	b085      	sub	sp, #20
   35d22:	4604      	mov	r4, r0
   35d24:	460e      	mov	r6, r1
   35d26:	4615      	mov	r5, r2
   35d28:	461f      	mov	r7, r3
   35d2a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   35d2e:	f1b8 0f0f 	cmp.w	r8, #15
   35d32:	d02a      	beq.n	35d8a <z_setup_new_thread+0x6e>
   35d34:	f108 0310 	add.w	r3, r8, #16
   35d38:	2b1e      	cmp	r3, #30
   35d3a:	d82a      	bhi.n	35d92 <z_setup_new_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   35d3c:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   35d40:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   35d42:	65e3      	str	r3, [r4, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   35d44:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35d46:	2204      	movs	r2, #4
   35d48:	4641      	mov	r1, r8
   35d4a:	4620      	mov	r0, r4
   35d4c:	f009 ff25 	bl	3fb9a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   35d50:	462a      	mov	r2, r5
   35d52:	4631      	mov	r1, r6
   35d54:	4620      	mov	r0, r4
   35d56:	f009 ff08 	bl	3fb6a <setup_thread_stack>
   35d5a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   35d5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   35d5e:	9302      	str	r3, [sp, #8]
   35d60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   35d62:	9301      	str	r3, [sp, #4]
   35d64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   35d66:	9300      	str	r3, [sp, #0]
   35d68:	463b      	mov	r3, r7
   35d6a:	4602      	mov	r2, r0
   35d6c:	4631      	mov	r1, r6
   35d6e:	4620      	mov	r0, r4
   35d70:	f7f1 fe24 	bl	279bc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   35d74:	2300      	movs	r3, #0
   35d76:	6563      	str	r3, [r4, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   35d78:	4b0e      	ldr	r3, [pc, #56]	; (35db4 <z_setup_new_thread+0x98>)
   35d7a:	689b      	ldr	r3, [r3, #8]
   35d7c:	b1bb      	cbz	r3, 35dae <z_setup_new_thread+0x92>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   35d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   35d80:	6763      	str	r3, [r4, #116]	; 0x74

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   35d82:	4628      	mov	r0, r5
   35d84:	b005      	add	sp, #20
   35d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   35d8a:	4b0b      	ldr	r3, [pc, #44]	; (35db8 <z_setup_new_thread+0x9c>)
   35d8c:	429f      	cmp	r7, r3
   35d8e:	d1d1      	bne.n	35d34 <z_setup_new_thread+0x18>
   35d90:	e7d4      	b.n	35d3c <z_setup_new_thread+0x20>
   35d92:	f8df 902c 	ldr.w	r9, [pc, #44]	; 35dc0 <z_setup_new_thread+0xa4>
   35d96:	f240 12ff 	movw	r2, #511	; 0x1ff
   35d9a:	4649      	mov	r1, r9
   35d9c:	4807      	ldr	r0, [pc, #28]	; (35dbc <z_setup_new_thread+0xa0>)
   35d9e:	f005 fecb 	bl	3bb38 <printk>
   35da2:	f240 11ff 	movw	r1, #511	; 0x1ff
   35da6:	4648      	mov	r0, r9
   35da8:	f006 f91a 	bl	3bfe0 <assert_post_action>
   35dac:	e7c6      	b.n	35d3c <z_setup_new_thread+0x20>
		new_thread->resource_pool = NULL;
   35dae:	6763      	str	r3, [r4, #116]	; 0x74
		return stack_ptr;
   35db0:	e7e7      	b.n	35d82 <z_setup_new_thread+0x66>
   35db2:	bf00      	nop
   35db4:	20010d7c 	.word	0x20010d7c
   35db8:	00035f79 	.word	0x00035f79
   35dbc:	00041c84 	.word	0x00041c84
   35dc0:	00045b5c 	.word	0x00045b5c

00035dc4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, uint32_t options, k_timeout_t delay)
{
   35dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35dc8:	b086      	sub	sp, #24
   35dca:	4604      	mov	r4, r0
   35dcc:	460d      	mov	r5, r1
   35dce:	4616      	mov	r6, r2
   35dd0:	461f      	mov	r7, r3
   35dd2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   35dd6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   35dda:	b9db      	cbnz	r3, 35e14 <z_impl_k_thread_create+0x50>

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   35ddc:	2300      	movs	r3, #0
   35dde:	9305      	str	r3, [sp, #20]
   35de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   35de2:	9304      	str	r3, [sp, #16]
   35de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   35de6:	9303      	str	r3, [sp, #12]
   35de8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   35dea:	9302      	str	r3, [sp, #8]
   35dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35dee:	9301      	str	r3, [sp, #4]
   35df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   35df2:	9300      	str	r3, [sp, #0]
   35df4:	463b      	mov	r3, r7
   35df6:	4632      	mov	r2, r6
   35df8:	4629      	mov	r1, r5
   35dfa:	4620      	mov	r0, r4
   35dfc:	f7ff ff8e 	bl	35d1c <z_setup_new_thread>
			  prio, options, NULL);

	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   35e00:	f1b9 3fff 	cmp.w	r9, #4294967295
   35e04:	bf08      	it	eq
   35e06:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   35e0a:	d111      	bne.n	35e30 <z_impl_k_thread_create+0x6c>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
   35e0c:	4620      	mov	r0, r4
   35e0e:	b006      	add	sp, #24
   35e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   35e14:	f8df a028 	ldr.w	sl, [pc, #40]	; 35e40 <z_impl_k_thread_create+0x7c>
   35e18:	f44f 721a 	mov.w	r2, #616	; 0x268
   35e1c:	4651      	mov	r1, sl
   35e1e:	4807      	ldr	r0, [pc, #28]	; (35e3c <z_impl_k_thread_create+0x78>)
   35e20:	f005 fe8a 	bl	3bb38 <printk>
   35e24:	f44f 711a 	mov.w	r1, #616	; 0x268
   35e28:	4650      	mov	r0, sl
   35e2a:	f006 f8d9 	bl	3bfe0 <assert_post_action>
   35e2e:	e7d5      	b.n	35ddc <z_impl_k_thread_create+0x18>
		schedule_new_thread(new_thread, delay);
   35e30:	4642      	mov	r2, r8
   35e32:	464b      	mov	r3, r9
   35e34:	4620      	mov	r0, r4
   35e36:	f7ff ff5f 	bl	35cf8 <schedule_new_thread>
   35e3a:	e7e7      	b.n	35e0c <z_impl_k_thread_create+0x48>
   35e3c:	00041c84 	.word	0x00041c84
   35e40:	00045b5c 	.word	0x00045b5c

00035e44 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   35e44:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   35e48:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   35e4a:	4c33      	ldr	r4, [pc, #204]	; (35f18 <z_init_static_threads+0xd4>)
   35e4c:	e023      	b.n	35e96 <z_init_static_threads+0x52>
   35e4e:	4d33      	ldr	r5, [pc, #204]	; (35f1c <z_init_static_threads+0xd8>)
   35e50:	f240 22cf 	movw	r2, #719	; 0x2cf
   35e54:	4629      	mov	r1, r5
   35e56:	4832      	ldr	r0, [pc, #200]	; (35f20 <z_init_static_threads+0xdc>)
   35e58:	f005 fe6e 	bl	3bb38 <printk>
   35e5c:	f240 21cf 	movw	r1, #719	; 0x2cf
   35e60:	4628      	mov	r0, r5
   35e62:	f006 f8bd 	bl	3bfe0 <assert_post_action>
   35e66:	4b2f      	ldr	r3, [pc, #188]	; (35f24 <z_init_static_threads+0xe0>)
   35e68:	429c      	cmp	r4, r3
   35e6a:	d218      	bcs.n	35e9e <z_init_static_threads+0x5a>
		z_setup_new_thread(
   35e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   35e6e:	9305      	str	r3, [sp, #20]
   35e70:	6a23      	ldr	r3, [r4, #32]
   35e72:	9304      	str	r3, [sp, #16]
   35e74:	69e3      	ldr	r3, [r4, #28]
   35e76:	9303      	str	r3, [sp, #12]
   35e78:	69a3      	ldr	r3, [r4, #24]
   35e7a:	9302      	str	r3, [sp, #8]
   35e7c:	6963      	ldr	r3, [r4, #20]
   35e7e:	9301      	str	r3, [sp, #4]
   35e80:	6923      	ldr	r3, [r4, #16]
   35e82:	9300      	str	r3, [sp, #0]
   35e84:	68e3      	ldr	r3, [r4, #12]
   35e86:	68a2      	ldr	r2, [r4, #8]
   35e88:	6861      	ldr	r1, [r4, #4]
   35e8a:	6820      	ldr	r0, [r4, #0]
   35e8c:	f7ff ff46 	bl	35d1c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   35e90:	6823      	ldr	r3, [r4, #0]
   35e92:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   35e94:	3430      	adds	r4, #48	; 0x30
   35e96:	4b23      	ldr	r3, [pc, #140]	; (35f24 <z_init_static_threads+0xe0>)
   35e98:	429c      	cmp	r4, r3
   35e9a:	d9e4      	bls.n	35e66 <z_init_static_threads+0x22>
   35e9c:	e7d7      	b.n	35e4e <z_init_static_threads+0xa>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   35e9e:	f001 f953 	bl	37148 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   35ea2:	4c1d      	ldr	r4, [pc, #116]	; (35f18 <z_init_static_threads+0xd4>)
   35ea4:	e01b      	b.n	35ede <z_init_static_threads+0x9a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   35ea6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   35ea8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   35eac:	ea4f 79e3 	mov.w	r9, r3, asr #31
   35eb0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   35eb4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   35eb8:	03d8      	lsls	r0, r3, #15
   35eba:	f240 35e7 	movw	r5, #999	; 0x3e7
   35ebe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   35ec2:	2300      	movs	r3, #0
   35ec4:	1940      	adds	r0, r0, r5
   35ec6:	f04f 0500 	mov.w	r5, #0
   35eca:	eb45 0101 	adc.w	r1, r5, r1
   35ece:	f7eb f8e7 	bl	210a0 <__aeabi_uldivmod>
   35ed2:	4602      	mov	r2, r0
   35ed4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   35ed6:	4630      	mov	r0, r6
   35ed8:	f7ff ff0e 	bl	35cf8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   35edc:	3430      	adds	r4, #48	; 0x30
   35ede:	4b11      	ldr	r3, [pc, #68]	; (35f24 <z_init_static_threads+0xe0>)
   35ee0:	429c      	cmp	r4, r3
   35ee2:	d807      	bhi.n	35ef4 <z_init_static_threads+0xb0>
   35ee4:	4b0f      	ldr	r3, [pc, #60]	; (35f24 <z_init_static_threads+0xe0>)
   35ee6:	429c      	cmp	r4, r3
   35ee8:	d211      	bcs.n	35f0e <z_init_static_threads+0xca>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   35eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   35eec:	f1b3 3fff 	cmp.w	r3, #4294967295
   35ef0:	d0f4      	beq.n	35edc <z_init_static_threads+0x98>
   35ef2:	e7d8      	b.n	35ea6 <z_init_static_threads+0x62>
	_FOREACH_STATIC_THREAD(thread_data) {
   35ef4:	4d09      	ldr	r5, [pc, #36]	; (35f1c <z_init_static_threads+0xd8>)
   35ef6:	f240 22ee 	movw	r2, #750	; 0x2ee
   35efa:	4629      	mov	r1, r5
   35efc:	4808      	ldr	r0, [pc, #32]	; (35f20 <z_init_static_threads+0xdc>)
   35efe:	f005 fe1b 	bl	3bb38 <printk>
   35f02:	f240 21ee 	movw	r1, #750	; 0x2ee
   35f06:	4628      	mov	r0, r5
   35f08:	f006 f86a 	bl	3bfe0 <assert_post_action>
   35f0c:	e7ea      	b.n	35ee4 <z_init_static_threads+0xa0>
		}
	}
	k_sched_unlock();
   35f0e:	f001 fe51 	bl	37bb4 <k_sched_unlock>
}
   35f12:	b006      	add	sp, #24
   35f14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   35f18:	2000c958 	.word	0x2000c958
   35f1c:	00045b5c 	.word	0x00045b5c
   35f20:	00041c84 	.word	0x00041c84
   35f24:	2000c988 	.word	0x2000c988

00035f28 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   35f28:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   35f2a:	b13b      	cbz	r3, 35f3c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   35f2c:	f003 0303 	and.w	r3, r3, #3
   35f30:	4a04      	ldr	r2, [pc, #16]	; (35f44 <z_spin_lock_valid+0x1c>)
   35f32:	7d12      	ldrb	r2, [r2, #20]
   35f34:	4293      	cmp	r3, r2
   35f36:	d003      	beq.n	35f40 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   35f38:	2001      	movs	r0, #1
   35f3a:	4770      	bx	lr
   35f3c:	2001      	movs	r0, #1
   35f3e:	4770      	bx	lr
			return false;
   35f40:	2000      	movs	r0, #0
}
   35f42:	4770      	bx	lr
   35f44:	20010d7c 	.word	0x20010d7c

00035f48 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   35f48:	6801      	ldr	r1, [r0, #0]
   35f4a:	4a06      	ldr	r2, [pc, #24]	; (35f64 <z_spin_unlock_valid+0x1c>)
   35f4c:	7d13      	ldrb	r3, [r2, #20]
   35f4e:	6892      	ldr	r2, [r2, #8]
   35f50:	4313      	orrs	r3, r2
   35f52:	4299      	cmp	r1, r3
   35f54:	d103      	bne.n	35f5e <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   35f56:	2300      	movs	r3, #0
   35f58:	6003      	str	r3, [r0, #0]
	return true;
   35f5a:	2001      	movs	r0, #1
   35f5c:	4770      	bx	lr
		return false;
   35f5e:	2000      	movs	r0, #0
}
   35f60:	4770      	bx	lr
   35f62:	bf00      	nop
   35f64:	20010d7c 	.word	0x20010d7c

00035f68 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   35f68:	4a02      	ldr	r2, [pc, #8]	; (35f74 <z_spin_lock_set_owner+0xc>)
   35f6a:	7d13      	ldrb	r3, [r2, #20]
   35f6c:	6892      	ldr	r2, [r2, #8]
   35f6e:	4313      	orrs	r3, r2
   35f70:	6003      	str	r3, [r0, #0]
}
   35f72:	4770      	bx	lr
   35f74:	20010d7c 	.word	0x20010d7c

00035f78 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   35f78:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   35f7a:	4b12      	ldr	r3, [pc, #72]	; (35fc4 <idle+0x4c>)
   35f7c:	689b      	ldr	r3, [r3, #8]
   35f7e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   35f82:	2b00      	cmp	r3, #0
   35f84:	da0c      	bge.n	35fa0 <idle+0x28>
   35f86:	4c10      	ldr	r4, [pc, #64]	; (35fc8 <idle+0x50>)
   35f88:	2227      	movs	r2, #39	; 0x27
   35f8a:	4621      	mov	r1, r4
   35f8c:	480f      	ldr	r0, [pc, #60]	; (35fcc <idle+0x54>)
   35f8e:	f005 fdd3 	bl	3bb38 <printk>
   35f92:	2127      	movs	r1, #39	; 0x27
   35f94:	4620      	mov	r0, r4
   35f96:	f006 f823 	bl	3bfe0 <assert_post_action>
   35f9a:	e001      	b.n	35fa0 <idle+0x28>
	arch_cpu_idle();
   35f9c:	f7f1 fbc8 	bl	27730 <arch_cpu_idle>
	__asm__ volatile(
   35fa0:	f04f 0220 	mov.w	r2, #32
   35fa4:	f3ef 8311 	mrs	r3, BASEPRI
   35fa8:	f382 8812 	msr	BASEPRI_MAX, r2
   35fac:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   35fb0:	f002 fb72 	bl	38698 <z_get_next_timeout_expiry>
   35fb4:	4b03      	ldr	r3, [pc, #12]	; (35fc4 <idle+0x4c>)
   35fb6:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   35fb8:	f7f1 fa7a 	bl	274b0 <pm_system_suspend>
   35fbc:	2800      	cmp	r0, #0
   35fbe:	d1ef      	bne.n	35fa0 <idle+0x28>
   35fc0:	e7ec      	b.n	35f9c <idle+0x24>
   35fc2:	bf00      	nop
   35fc4:	20010d7c 	.word	0x20010d7c
   35fc8:	00045b80 	.word	0x00045b80
   35fcc:	00041c84 	.word	0x00041c84

00035fd0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   35fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35fd4:	b083      	sub	sp, #12
   35fd6:	4604      	mov	r4, r0
   35fd8:	4616      	mov	r6, r2
   35fda:	461d      	mov	r5, r3
   35fdc:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   35fe0:	2900      	cmp	r1, #0
   35fe2:	d12a      	bne.n	3603a <z_impl_k_mutex_lock+0x6a>
   35fe4:	f04f 0320 	mov.w	r3, #32
   35fe8:	f3ef 8711 	mrs	r7, BASEPRI
   35fec:	f383 8812 	msr	BASEPRI_MAX, r3
   35ff0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35ff4:	486c      	ldr	r0, [pc, #432]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   35ff6:	f7ff ff97 	bl	35f28 <z_spin_lock_valid>
   35ffa:	b348      	cbz	r0, 36050 <z_impl_k_mutex_lock+0x80>
	z_spin_lock_set_owner(l);
   35ffc:	486a      	ldr	r0, [pc, #424]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   35ffe:	f7ff ffb3 	bl	35f68 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   36002:	68e1      	ldr	r1, [r4, #12]
   36004:	2900      	cmp	r1, #0
   36006:	d12f      	bne.n	36068 <z_impl_k_mutex_lock+0x98>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   36008:	2900      	cmp	r1, #0
   3600a:	d174      	bne.n	360f6 <z_impl_k_mutex_lock+0x126>
   3600c:	4b67      	ldr	r3, [pc, #412]	; (361ac <z_impl_k_mutex_lock+0x1dc>)
   3600e:	689b      	ldr	r3, [r3, #8]
   36010:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   36014:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   36016:	3101      	adds	r1, #1
   36018:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   3601a:	4b64      	ldr	r3, [pc, #400]	; (361ac <z_impl_k_mutex_lock+0x1dc>)
   3601c:	689b      	ldr	r3, [r3, #8]
   3601e:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36020:	4861      	ldr	r0, [pc, #388]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   36022:	f7ff ff91 	bl	35f48 <z_spin_unlock_valid>
   36026:	2800      	cmp	r0, #0
   36028:	d067      	beq.n	360fa <z_impl_k_mutex_lock+0x12a>
	__asm__ volatile(
   3602a:	f387 8811 	msr	BASEPRI, r7
   3602e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   36032:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   36034:	b003      	add	sp, #12
   36036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3603a:	4f5d      	ldr	r7, [pc, #372]	; (361b0 <z_impl_k_mutex_lock+0x1e0>)
   3603c:	2265      	movs	r2, #101	; 0x65
   3603e:	4639      	mov	r1, r7
   36040:	485c      	ldr	r0, [pc, #368]	; (361b4 <z_impl_k_mutex_lock+0x1e4>)
   36042:	f005 fd79 	bl	3bb38 <printk>
   36046:	2165      	movs	r1, #101	; 0x65
   36048:	4638      	mov	r0, r7
   3604a:	f005 ffc9 	bl	3bfe0 <assert_post_action>
   3604e:	e7c9      	b.n	35fe4 <z_impl_k_mutex_lock+0x14>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36050:	f8df 8164 	ldr.w	r8, [pc, #356]	; 361b8 <z_impl_k_mutex_lock+0x1e8>
   36054:	2281      	movs	r2, #129	; 0x81
   36056:	4641      	mov	r1, r8
   36058:	4856      	ldr	r0, [pc, #344]	; (361b4 <z_impl_k_mutex_lock+0x1e4>)
   3605a:	f005 fd6d 	bl	3bb38 <printk>
   3605e:	2181      	movs	r1, #129	; 0x81
   36060:	4640      	mov	r0, r8
   36062:	f005 ffbd 	bl	3bfe0 <assert_post_action>
   36066:	e7c9      	b.n	35ffc <z_impl_k_mutex_lock+0x2c>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   36068:	68a2      	ldr	r2, [r4, #8]
   3606a:	4b50      	ldr	r3, [pc, #320]	; (361ac <z_impl_k_mutex_lock+0x1dc>)
   3606c:	689b      	ldr	r3, [r3, #8]
   3606e:	429a      	cmp	r2, r3
   36070:	d0ca      	beq.n	36008 <z_impl_k_mutex_lock+0x38>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   36072:	ea55 0106 	orrs.w	r1, r5, r6
   36076:	bf0c      	ite	eq
   36078:	f04f 0801 	moveq.w	r8, #1
   3607c:	f04f 0800 	movne.w	r8, #0
   36080:	d046      	beq.n	36110 <z_impl_k_mutex_lock+0x140>
					    mutex->owner->base.prio);
   36082:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   36086:	4649      	mov	r1, r9
   36088:	f993 000e 	ldrsb.w	r0, [r3, #14]
   3608c:	f009 fd96 	bl	3fbbc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   36090:	4581      	cmp	r9, r0
   36092:	dc53      	bgt.n	3613c <z_impl_k_mutex_lock+0x16c>
	bool resched = false;
   36094:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   36098:	9600      	str	r6, [sp, #0]
   3609a:	9501      	str	r5, [sp, #4]
   3609c:	4622      	mov	r2, r4
   3609e:	4639      	mov	r1, r7
   360a0:	4841      	ldr	r0, [pc, #260]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   360a2:	f001 fc59 	bl	37958 <z_pend_curr>
	if (got_mutex == 0) {
   360a6:	2800      	cmp	r0, #0
   360a8:	d0c4      	beq.n	36034 <z_impl_k_mutex_lock+0x64>
	__asm__ volatile(
   360aa:	f04f 0320 	mov.w	r3, #32
   360ae:	f3ef 8511 	mrs	r5, BASEPRI
   360b2:	f383 8812 	msr	BASEPRI_MAX, r3
   360b6:	f3bf 8f6f 	isb	sy
   360ba:	483b      	ldr	r0, [pc, #236]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   360bc:	f7ff ff34 	bl	35f28 <z_spin_lock_valid>
   360c0:	2800      	cmp	r0, #0
   360c2:	d041      	beq.n	36148 <z_impl_k_mutex_lock+0x178>
	z_spin_lock_set_owner(l);
   360c4:	4838      	ldr	r0, [pc, #224]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   360c6:	f7ff ff4f 	bl	35f68 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   360ca:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   360cc:	429c      	cmp	r4, r3
   360ce:	d046      	beq.n	3615e <z_impl_k_mutex_lock+0x18e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   360d0:	2b00      	cmp	r3, #0
   360d2:	d044      	beq.n	3615e <z_impl_k_mutex_lock+0x18e>
   360d4:	6921      	ldr	r1, [r4, #16]
   360d6:	f993 000e 	ldrsb.w	r0, [r3, #14]
   360da:	f009 fd6f 	bl	3fbbc <new_prio_for_inheritance>
   360de:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   360e0:	4620      	mov	r0, r4
   360e2:	f009 fd76 	bl	3fbd2 <adjust_owner_prio>
   360e6:	2800      	cmp	r0, #0
   360e8:	d13b      	bne.n	36162 <z_impl_k_mutex_lock+0x192>
   360ea:	f1b9 0f00 	cmp.w	r9, #0
   360ee:	d03a      	beq.n	36166 <z_impl_k_mutex_lock+0x196>
   360f0:	f04f 0801 	mov.w	r8, #1
   360f4:	e037      	b.n	36166 <z_impl_k_mutex_lock+0x196>
					_current->base.prio :
   360f6:	6923      	ldr	r3, [r4, #16]
   360f8:	e78c      	b.n	36014 <z_impl_k_mutex_lock+0x44>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   360fa:	4c2f      	ldr	r4, [pc, #188]	; (361b8 <z_impl_k_mutex_lock+0x1e8>)
   360fc:	22ac      	movs	r2, #172	; 0xac
   360fe:	4621      	mov	r1, r4
   36100:	482c      	ldr	r0, [pc, #176]	; (361b4 <z_impl_k_mutex_lock+0x1e4>)
   36102:	f005 fd19 	bl	3bb38 <printk>
   36106:	21ac      	movs	r1, #172	; 0xac
   36108:	4620      	mov	r0, r4
   3610a:	f005 ff69 	bl	3bfe0 <assert_post_action>
   3610e:	e78c      	b.n	3602a <z_impl_k_mutex_lock+0x5a>
   36110:	4825      	ldr	r0, [pc, #148]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   36112:	f7ff ff19 	bl	35f48 <z_spin_unlock_valid>
   36116:	b130      	cbz	r0, 36126 <z_impl_k_mutex_lock+0x156>
	__asm__ volatile(
   36118:	f387 8811 	msr	BASEPRI, r7
   3611c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   36120:	f06f 000f 	mvn.w	r0, #15
   36124:	e786      	b.n	36034 <z_impl_k_mutex_lock+0x64>
   36126:	4c24      	ldr	r4, [pc, #144]	; (361b8 <z_impl_k_mutex_lock+0x1e8>)
   36128:	22ac      	movs	r2, #172	; 0xac
   3612a:	4621      	mov	r1, r4
   3612c:	4821      	ldr	r0, [pc, #132]	; (361b4 <z_impl_k_mutex_lock+0x1e4>)
   3612e:	f005 fd03 	bl	3bb38 <printk>
   36132:	21ac      	movs	r1, #172	; 0xac
   36134:	4620      	mov	r0, r4
   36136:	f005 ff53 	bl	3bfe0 <assert_post_action>
   3613a:	e7ed      	b.n	36118 <z_impl_k_mutex_lock+0x148>
		resched = adjust_owner_prio(mutex, new_prio);
   3613c:	4601      	mov	r1, r0
   3613e:	4620      	mov	r0, r4
   36140:	f009 fd47 	bl	3fbd2 <adjust_owner_prio>
   36144:	4681      	mov	r9, r0
   36146:	e7a7      	b.n	36098 <z_impl_k_mutex_lock+0xc8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36148:	4e1b      	ldr	r6, [pc, #108]	; (361b8 <z_impl_k_mutex_lock+0x1e8>)
   3614a:	2281      	movs	r2, #129	; 0x81
   3614c:	4631      	mov	r1, r6
   3614e:	4819      	ldr	r0, [pc, #100]	; (361b4 <z_impl_k_mutex_lock+0x1e4>)
   36150:	f005 fcf2 	bl	3bb38 <printk>
   36154:	2181      	movs	r1, #129	; 0x81
   36156:	4630      	mov	r0, r6
   36158:	f005 ff42 	bl	3bfe0 <assert_post_action>
   3615c:	e7b2      	b.n	360c4 <z_impl_k_mutex_lock+0xf4>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3615e:	6921      	ldr	r1, [r4, #16]
   36160:	e7be      	b.n	360e0 <z_impl_k_mutex_lock+0x110>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   36162:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   36166:	f1b8 0f00 	cmp.w	r8, #0
   3616a:	d006      	beq.n	3617a <z_impl_k_mutex_lock+0x1aa>
		z_reschedule(&lock, key);
   3616c:	4629      	mov	r1, r5
   3616e:	480e      	ldr	r0, [pc, #56]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   36170:	f000 ffae 	bl	370d0 <z_reschedule>
	return -EAGAIN;
   36174:	f06f 000a 	mvn.w	r0, #10
   36178:	e75c      	b.n	36034 <z_impl_k_mutex_lock+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3617a:	480b      	ldr	r0, [pc, #44]	; (361a8 <z_impl_k_mutex_lock+0x1d8>)
   3617c:	f7ff fee4 	bl	35f48 <z_spin_unlock_valid>
   36180:	b130      	cbz	r0, 36190 <z_impl_k_mutex_lock+0x1c0>
   36182:	f385 8811 	msr	BASEPRI, r5
   36186:	f3bf 8f6f 	isb	sy
   3618a:	f06f 000a 	mvn.w	r0, #10
   3618e:	e751      	b.n	36034 <z_impl_k_mutex_lock+0x64>
   36190:	4c09      	ldr	r4, [pc, #36]	; (361b8 <z_impl_k_mutex_lock+0x1e8>)
   36192:	22ac      	movs	r2, #172	; 0xac
   36194:	4621      	mov	r1, r4
   36196:	4807      	ldr	r0, [pc, #28]	; (361b4 <z_impl_k_mutex_lock+0x1e4>)
   36198:	f005 fcce 	bl	3bb38 <printk>
   3619c:	21ac      	movs	r1, #172	; 0xac
   3619e:	4620      	mov	r0, r4
   361a0:	f005 ff1e 	bl	3bfe0 <assert_post_action>
   361a4:	e7ed      	b.n	36182 <z_impl_k_mutex_lock+0x1b2>
   361a6:	bf00      	nop
   361a8:	20010da4 	.word	0x20010da4
   361ac:	20010d7c 	.word	0x20010d7c
   361b0:	00045ba4 	.word	0x00045ba4
   361b4:	00041c84 	.word	0x00041c84
   361b8:	00042210 	.word	0x00042210

000361bc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   361bc:	b570      	push	{r4, r5, r6, lr}
   361be:	4604      	mov	r4, r0
   361c0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   361c4:	bb03      	cbnz	r3, 36208 <z_impl_k_mutex_unlock+0x4c>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   361c6:	68a3      	ldr	r3, [r4, #8]
   361c8:	2b00      	cmp	r3, #0
   361ca:	f000 808e 	beq.w	362ea <z_impl_k_mutex_unlock+0x12e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   361ce:	4a4a      	ldr	r2, [pc, #296]	; (362f8 <z_impl_k_mutex_unlock+0x13c>)
   361d0:	6892      	ldr	r2, [r2, #8]
   361d2:	4293      	cmp	r3, r2
   361d4:	f040 808c 	bne.w	362f0 <z_impl_k_mutex_unlock+0x134>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   361d8:	68e3      	ldr	r3, [r4, #12]
   361da:	b303      	cbz	r3, 3621e <z_impl_k_mutex_unlock+0x62>
   361dc:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   361e0:	bb43      	cbnz	r3, 36234 <z_impl_k_mutex_unlock+0x78>
	__ASSERT(_current->base.sched_locked != 1U, "");
   361e2:	4b45      	ldr	r3, [pc, #276]	; (362f8 <z_impl_k_mutex_unlock+0x13c>)
   361e4:	689b      	ldr	r3, [r3, #8]
   361e6:	7bdb      	ldrb	r3, [r3, #15]
   361e8:	2b01      	cmp	r3, #1
   361ea:	d02e      	beq.n	3624a <z_impl_k_mutex_unlock+0x8e>

	--_current->base.sched_locked;
   361ec:	4b42      	ldr	r3, [pc, #264]	; (362f8 <z_impl_k_mutex_unlock+0x13c>)
   361ee:	689a      	ldr	r2, [r3, #8]
   361f0:	7bd3      	ldrb	r3, [r2, #15]
   361f2:	3b01      	subs	r3, #1
   361f4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   361f6:	68e3      	ldr	r3, [r4, #12]
   361f8:	2b01      	cmp	r3, #1
   361fa:	d931      	bls.n	36260 <z_impl_k_mutex_unlock+0xa4>
		mutex->lock_count--;
   361fc:	3b01      	subs	r3, #1
   361fe:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   36200:	f001 fcd8 	bl	37bb4 <k_sched_unlock>

	return 0;
   36204:	2000      	movs	r0, #0
}
   36206:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   36208:	4d3c      	ldr	r5, [pc, #240]	; (362fc <z_impl_k_mutex_unlock+0x140>)
   3620a:	22c7      	movs	r2, #199	; 0xc7
   3620c:	4629      	mov	r1, r5
   3620e:	483c      	ldr	r0, [pc, #240]	; (36300 <z_impl_k_mutex_unlock+0x144>)
   36210:	f005 fc92 	bl	3bb38 <printk>
   36214:	21c7      	movs	r1, #199	; 0xc7
   36216:	4628      	mov	r0, r5
   36218:	f005 fee2 	bl	3bfe0 <assert_post_action>
   3621c:	e7d3      	b.n	361c6 <z_impl_k_mutex_unlock+0xa>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3621e:	4d37      	ldr	r5, [pc, #220]	; (362fc <z_impl_k_mutex_unlock+0x140>)
   36220:	22df      	movs	r2, #223	; 0xdf
   36222:	4629      	mov	r1, r5
   36224:	4836      	ldr	r0, [pc, #216]	; (36300 <z_impl_k_mutex_unlock+0x144>)
   36226:	f005 fc87 	bl	3bb38 <printk>
   3622a:	21df      	movs	r1, #223	; 0xdf
   3622c:	4628      	mov	r0, r5
   3622e:	f005 fed7 	bl	3bfe0 <assert_post_action>
   36232:	e7d3      	b.n	361dc <z_impl_k_mutex_unlock+0x20>
	__ASSERT(!arch_is_in_isr(), "");
   36234:	4d33      	ldr	r5, [pc, #204]	; (36304 <z_impl_k_mutex_unlock+0x148>)
   36236:	22fd      	movs	r2, #253	; 0xfd
   36238:	4629      	mov	r1, r5
   3623a:	4831      	ldr	r0, [pc, #196]	; (36300 <z_impl_k_mutex_unlock+0x144>)
   3623c:	f005 fc7c 	bl	3bb38 <printk>
   36240:	21fd      	movs	r1, #253	; 0xfd
   36242:	4628      	mov	r0, r5
   36244:	f005 fecc 	bl	3bfe0 <assert_post_action>
   36248:	e7cb      	b.n	361e2 <z_impl_k_mutex_unlock+0x26>
	__ASSERT(_current->base.sched_locked != 1U, "");
   3624a:	4d2e      	ldr	r5, [pc, #184]	; (36304 <z_impl_k_mutex_unlock+0x148>)
   3624c:	22fe      	movs	r2, #254	; 0xfe
   3624e:	4629      	mov	r1, r5
   36250:	482b      	ldr	r0, [pc, #172]	; (36300 <z_impl_k_mutex_unlock+0x144>)
   36252:	f005 fc71 	bl	3bb38 <printk>
   36256:	21fe      	movs	r1, #254	; 0xfe
   36258:	4628      	mov	r0, r5
   3625a:	f005 fec1 	bl	3bfe0 <assert_post_action>
   3625e:	e7c5      	b.n	361ec <z_impl_k_mutex_unlock+0x30>
	__asm__ volatile(
   36260:	f04f 0320 	mov.w	r3, #32
   36264:	f3ef 8511 	mrs	r5, BASEPRI
   36268:	f383 8812 	msr	BASEPRI_MAX, r3
   3626c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36270:	4825      	ldr	r0, [pc, #148]	; (36308 <z_impl_k_mutex_unlock+0x14c>)
   36272:	f7ff fe59 	bl	35f28 <z_spin_lock_valid>
   36276:	b1b8      	cbz	r0, 362a8 <z_impl_k_mutex_unlock+0xec>
	z_spin_lock_set_owner(l);
   36278:	4823      	ldr	r0, [pc, #140]	; (36308 <z_impl_k_mutex_unlock+0x14c>)
   3627a:	f7ff fe75 	bl	35f68 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3627e:	6921      	ldr	r1, [r4, #16]
   36280:	4620      	mov	r0, r4
   36282:	f009 fca6 	bl	3fbd2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   36286:	4620      	mov	r0, r4
   36288:	f001 fda0 	bl	37dcc <z_unpend_first_thread>
	mutex->owner = new_owner;
   3628c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3628e:	b1b0      	cbz	r0, 362be <z_impl_k_mutex_unlock+0x102>
		mutex->owner_orig_prio = new_owner->base.prio;
   36290:	f990 300e 	ldrsb.w	r3, [r0, #14]
   36294:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   36296:	2300      	movs	r3, #0
   36298:	67c3      	str	r3, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   3629a:	f001 f98b 	bl	375b4 <z_ready_thread>
		z_reschedule(&lock, key);
   3629e:	4629      	mov	r1, r5
   362a0:	4819      	ldr	r0, [pc, #100]	; (36308 <z_impl_k_mutex_unlock+0x14c>)
   362a2:	f000 ff15 	bl	370d0 <z_reschedule>
   362a6:	e7ab      	b.n	36200 <z_impl_k_mutex_unlock+0x44>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   362a8:	4e18      	ldr	r6, [pc, #96]	; (3630c <z_impl_k_mutex_unlock+0x150>)
   362aa:	2281      	movs	r2, #129	; 0x81
   362ac:	4631      	mov	r1, r6
   362ae:	4814      	ldr	r0, [pc, #80]	; (36300 <z_impl_k_mutex_unlock+0x144>)
   362b0:	f005 fc42 	bl	3bb38 <printk>
   362b4:	2181      	movs	r1, #129	; 0x81
   362b6:	4630      	mov	r0, r6
   362b8:	f005 fe92 	bl	3bfe0 <assert_post_action>
   362bc:	e7dc      	b.n	36278 <z_impl_k_mutex_unlock+0xbc>
		mutex->lock_count = 0U;
   362be:	2300      	movs	r3, #0
   362c0:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   362c2:	4811      	ldr	r0, [pc, #68]	; (36308 <z_impl_k_mutex_unlock+0x14c>)
   362c4:	f7ff fe40 	bl	35f48 <z_spin_unlock_valid>
   362c8:	b120      	cbz	r0, 362d4 <z_impl_k_mutex_unlock+0x118>
	__asm__ volatile(
   362ca:	f385 8811 	msr	BASEPRI, r5
   362ce:	f3bf 8f6f 	isb	sy
   362d2:	e795      	b.n	36200 <z_impl_k_mutex_unlock+0x44>
   362d4:	4c0d      	ldr	r4, [pc, #52]	; (3630c <z_impl_k_mutex_unlock+0x150>)
   362d6:	22ac      	movs	r2, #172	; 0xac
   362d8:	4621      	mov	r1, r4
   362da:	4809      	ldr	r0, [pc, #36]	; (36300 <z_impl_k_mutex_unlock+0x144>)
   362dc:	f005 fc2c 	bl	3bb38 <printk>
   362e0:	21ac      	movs	r1, #172	; 0xac
   362e2:	4620      	mov	r0, r4
   362e4:	f005 fe7c 	bl	3bfe0 <assert_post_action>
   362e8:	e7ef      	b.n	362ca <z_impl_k_mutex_unlock+0x10e>
		return -EINVAL;
   362ea:	f06f 0015 	mvn.w	r0, #21
   362ee:	e78a      	b.n	36206 <z_impl_k_mutex_unlock+0x4a>
		return -EPERM;
   362f0:	f04f 30ff 	mov.w	r0, #4294967295
   362f4:	e787      	b.n	36206 <z_impl_k_mutex_unlock+0x4a>
   362f6:	bf00      	nop
   362f8:	20010d7c 	.word	0x20010d7c
   362fc:	00045ba4 	.word	0x00045ba4
   36300:	00041c84 	.word	0x00041c84
   36304:	00045bc8 	.word	0x00045bc8
   36308:	20010da4 	.word	0x20010da4
   3630c:	00042210 	.word	0x00042210

00036310 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   36310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36314:	4604      	mov	r4, r0
   36316:	460e      	mov	r6, r1
   36318:	4615      	mov	r5, r2
   3631a:	4698      	mov	r8, r3
   3631c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36320:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   36324:	f04f 0320 	mov.w	r3, #32
   36328:	f3ef 8a11 	mrs	sl, BASEPRI
   3632c:	f383 8812 	msr	BASEPRI_MAX, r3
   36330:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36334:	4638      	mov	r0, r7
   36336:	f7ff fdf7 	bl	35f28 <z_spin_lock_valid>
   3633a:	b1c0      	cbz	r0, 3636e <queue_insert+0x5e>
	z_spin_lock_set_owner(l);
   3633c:	4638      	mov	r0, r7
   3633e:	f7ff fe13 	bl	35f68 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   36342:	f1b9 0f00 	cmp.w	r9, #0
   36346:	d000      	beq.n	3634a <queue_insert+0x3a>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   36348:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3634a:	f104 000c 	add.w	r0, r4, #12
   3634e:	f001 fd3d 	bl	37dcc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   36352:	b9c0      	cbnz	r0, 36386 <queue_insert+0x76>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   36354:	f1b8 0f00 	cmp.w	r8, #0
   36358:	d034      	beq.n	363c4 <queue_insert+0xb4>
 * @return A pointer to the allocated memory, or NULL if there is insufficient
 * RAM in the pool or there is no pool to draw memory from
 */
static inline void *z_thread_malloc(size_t size)
{
	return z_thread_aligned_alloc(0, size);
   3635a:	2108      	movs	r1, #8
   3635c:	2000      	movs	r0, #0
   3635e:	f003 f9e3 	bl	39728 <z_thread_aligned_alloc>
		struct alloc_node *anode;

		anode = z_thread_malloc(sizeof(*anode));
		if (anode == NULL) {
   36362:	b1c8      	cbz	r0, 36398 <queue_insert+0x88>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc,
				-ENOMEM);

			return -ENOMEM;
		}
		anode->data = data;
   36364:	6045      	str	r5, [r0, #4]
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   36366:	2201      	movs	r2, #1
   36368:	6002      	str	r2, [r0, #0]
		sys_sfnode_init(&anode->node, 0x1);
		data = anode;
   3636a:	4605      	mov	r5, r0
}
   3636c:	e02c      	b.n	363c8 <queue_insert+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3636e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 36438 <queue_insert+0x128>
   36372:	2281      	movs	r2, #129	; 0x81
   36374:	4659      	mov	r1, fp
   36376:	482f      	ldr	r0, [pc, #188]	; (36434 <queue_insert+0x124>)
   36378:	f005 fbde 	bl	3bb38 <printk>
   3637c:	2181      	movs	r1, #129	; 0x81
   3637e:	4658      	mov	r0, fp
   36380:	f005 fe2e 	bl	3bfe0 <assert_post_action>
   36384:	e7da      	b.n	3633c <queue_insert+0x2c>
		prepare_thread_to_run(first_pending_thread, data);
   36386:	4629      	mov	r1, r5
   36388:	f009 fc35 	bl	3fbf6 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   3638c:	4651      	mov	r1, sl
   3638e:	4638      	mov	r0, r7
   36390:	f000 fe9e 	bl	370d0 <z_reschedule>
		return 0;
   36394:	2000      	movs	r0, #0
   36396:	e04b      	b.n	36430 <queue_insert+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36398:	4638      	mov	r0, r7
   3639a:	f7ff fdd5 	bl	35f48 <z_spin_unlock_valid>
   3639e:	b130      	cbz	r0, 363ae <queue_insert+0x9e>
	__asm__ volatile(
   363a0:	f38a 8811 	msr	BASEPRI, sl
   363a4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   363a8:	f06f 000b 	mvn.w	r0, #11
   363ac:	e040      	b.n	36430 <queue_insert+0x120>
   363ae:	4c22      	ldr	r4, [pc, #136]	; (36438 <queue_insert+0x128>)
   363b0:	22ac      	movs	r2, #172	; 0xac
   363b2:	4621      	mov	r1, r4
   363b4:	481f      	ldr	r0, [pc, #124]	; (36434 <queue_insert+0x124>)
   363b6:	f005 fbbf 	bl	3bb38 <printk>
   363ba:	21ac      	movs	r1, #172	; 0xac
   363bc:	4620      	mov	r0, r4
   363be:	f005 fe0f 	bl	3bfe0 <assert_post_action>
   363c2:	e7ed      	b.n	363a0 <queue_insert+0x90>
	node->next_and_flags = flags;
   363c4:	2300      	movs	r3, #0
   363c6:	602b      	str	r3, [r5, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   363c8:	b186      	cbz	r6, 363ec <queue_insert+0xdc>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   363ca:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   363cc:	f033 0303 	bics.w	r3, r3, #3
   363d0:	d11a      	bne.n	36408 <queue_insert+0xf8>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   363d2:	682b      	ldr	r3, [r5, #0]
   363d4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   363d8:	602b      	str	r3, [r5, #0]
	return list->tail;
   363da:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   363dc:	b18a      	cbz	r2, 36402 <queue_insert+0xf2>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   363de:	6813      	ldr	r3, [r2, #0]
   363e0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   363e4:	432b      	orrs	r3, r5
   363e6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   363e8:	6065      	str	r5, [r4, #4]
}
   363ea:	e017      	b.n	3641c <queue_insert+0x10c>
	return list->head;
   363ec:	6822      	ldr	r2, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   363ee:	682b      	ldr	r3, [r5, #0]
   363f0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   363f4:	4313      	orrs	r3, r2
   363f6:	602b      	str	r3, [r5, #0]
	list->head = node;
   363f8:	6025      	str	r5, [r4, #0]
	return list->tail;
   363fa:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   363fc:	b973      	cbnz	r3, 3641c <queue_insert+0x10c>
	list->tail = node;
   363fe:	6065      	str	r5, [r4, #4]
}
   36400:	e00c      	b.n	3641c <queue_insert+0x10c>
	list->tail = node;
   36402:	6065      	str	r5, [r4, #4]
	list->head = node;
   36404:	6025      	str	r5, [r4, #0]
}
   36406:	e009      	b.n	3641c <queue_insert+0x10c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36408:	682a      	ldr	r2, [r5, #0]
   3640a:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3640e:	4313      	orrs	r3, r2
   36410:	602b      	str	r3, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   36412:	6833      	ldr	r3, [r6, #0]
   36414:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   36418:	431d      	orrs	r5, r3
   3641a:	6035      	str	r5, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3641c:	2104      	movs	r1, #4
   3641e:	f104 0014 	add.w	r0, r4, #20
   36422:	f009 fd11 	bl	3fe48 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   36426:	4651      	mov	r1, sl
   36428:	4638      	mov	r0, r7
   3642a:	f000 fe51 	bl	370d0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   3642e:	2000      	movs	r0, #0
}
   36430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36434:	00041c84 	.word	0x00041c84
   36438:	00042210 	.word	0x00042210

0003643c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   3643c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36440:	b083      	sub	sp, #12
   36442:	4604      	mov	r4, r0
   36444:	4616      	mov	r6, r2
   36446:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   36448:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3644c:	f04f 0320 	mov.w	r3, #32
   36450:	f3ef 8811 	mrs	r8, BASEPRI
   36454:	f383 8812 	msr	BASEPRI_MAX, r3
   36458:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3645c:	4628      	mov	r0, r5
   3645e:	f7ff fd63 	bl	35f28 <z_spin_lock_valid>
   36462:	b1d8      	cbz	r0, 3649c <z_impl_k_queue_get+0x60>
	z_spin_lock_set_owner(l);
   36464:	4628      	mov	r0, r5
   36466:	f7ff fd7f 	bl	35f68 <z_spin_lock_set_owner>
	return list->head;
   3646a:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3646c:	b378      	cbz	r0, 364ce <z_impl_k_queue_get+0x92>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3646e:	6803      	ldr	r3, [r0, #0]
   36470:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   36474:	6023      	str	r3, [r4, #0]
	return list->tail;
   36476:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   36478:	4290      	cmp	r0, r2
   3647a:	d01b      	beq.n	364b4 <z_impl_k_queue_get+0x78>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3647c:	2101      	movs	r1, #1
   3647e:	f009 fbc1 	bl	3fc04 <z_queue_node_peek>
   36482:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36484:	4628      	mov	r0, r5
   36486:	f7ff fd5f 	bl	35f48 <z_spin_unlock_valid>
   3648a:	b1a8      	cbz	r0, 364b8 <z_impl_k_queue_get+0x7c>
	__asm__ volatile(
   3648c:	f388 8811 	msr	BASEPRI, r8
   36490:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   36494:	4620      	mov	r0, r4
   36496:	b003      	add	sp, #12
   36498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3649c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 36520 <z_impl_k_queue_get+0xe4>
   364a0:	2281      	movs	r2, #129	; 0x81
   364a2:	4649      	mov	r1, r9
   364a4:	481d      	ldr	r0, [pc, #116]	; (3651c <z_impl_k_queue_get+0xe0>)
   364a6:	f005 fb47 	bl	3bb38 <printk>
   364aa:	2181      	movs	r1, #129	; 0x81
   364ac:	4648      	mov	r0, r9
   364ae:	f005 fd97 	bl	3bfe0 <assert_post_action>
   364b2:	e7d7      	b.n	36464 <z_impl_k_queue_get+0x28>
	list->tail = node;
   364b4:	6063      	str	r3, [r4, #4]
}
   364b6:	e7e1      	b.n	3647c <z_impl_k_queue_get+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   364b8:	4d19      	ldr	r5, [pc, #100]	; (36520 <z_impl_k_queue_get+0xe4>)
   364ba:	22ac      	movs	r2, #172	; 0xac
   364bc:	4629      	mov	r1, r5
   364be:	4817      	ldr	r0, [pc, #92]	; (3651c <z_impl_k_queue_get+0xe0>)
   364c0:	f005 fb3a 	bl	3bb38 <printk>
   364c4:	21ac      	movs	r1, #172	; 0xac
   364c6:	4628      	mov	r0, r5
   364c8:	f005 fd8a 	bl	3bfe0 <assert_post_action>
   364cc:	e7de      	b.n	3648c <z_impl_k_queue_get+0x50>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   364ce:	ea56 0307 	orrs.w	r3, r6, r7
   364d2:	d00c      	beq.n	364ee <z_impl_k_queue_get+0xb2>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   364d4:	e9cd 6700 	strd	r6, r7, [sp]
   364d8:	f104 020c 	add.w	r2, r4, #12
   364dc:	4641      	mov	r1, r8
   364de:	4628      	mov	r0, r5
   364e0:	f001 fa3a 	bl	37958 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   364e4:	b9c0      	cbnz	r0, 36518 <z_impl_k_queue_get+0xdc>
   364e6:	4b0f      	ldr	r3, [pc, #60]	; (36524 <z_impl_k_queue_get+0xe8>)
   364e8:	689b      	ldr	r3, [r3, #8]
   364ea:	695c      	ldr	r4, [r3, #20]
   364ec:	e7d2      	b.n	36494 <z_impl_k_queue_get+0x58>
   364ee:	4628      	mov	r0, r5
   364f0:	f7ff fd2a 	bl	35f48 <z_spin_unlock_valid>
   364f4:	b128      	cbz	r0, 36502 <z_impl_k_queue_get+0xc6>
   364f6:	f388 8811 	msr	BASEPRI, r8
   364fa:	f3bf 8f6f 	isb	sy
		return NULL;
   364fe:	2400      	movs	r4, #0
   36500:	e7c8      	b.n	36494 <z_impl_k_queue_get+0x58>
   36502:	4c07      	ldr	r4, [pc, #28]	; (36520 <z_impl_k_queue_get+0xe4>)
   36504:	22ac      	movs	r2, #172	; 0xac
   36506:	4621      	mov	r1, r4
   36508:	4804      	ldr	r0, [pc, #16]	; (3651c <z_impl_k_queue_get+0xe0>)
   3650a:	f005 fb15 	bl	3bb38 <printk>
   3650e:	21ac      	movs	r1, #172	; 0xac
   36510:	4620      	mov	r0, r4
   36512:	f005 fd65 	bl	3bfe0 <assert_post_action>
   36516:	e7ee      	b.n	364f6 <z_impl_k_queue_get+0xba>
	return (ret != 0) ? NULL : _current->base.swap_data;
   36518:	2400      	movs	r4, #0
   3651a:	e7bb      	b.n	36494 <z_impl_k_queue_get+0x58>
   3651c:	00041c84 	.word	0x00041c84
   36520:	00042210 	.word	0x00042210
   36524:	20010d7c 	.word	0x20010d7c

00036528 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   36528:	b570      	push	{r4, r5, r6, lr}
   3652a:	4604      	mov	r4, r0
	__asm__ volatile(
   3652c:	f04f 0320 	mov.w	r3, #32
   36530:	f3ef 8511 	mrs	r5, BASEPRI
   36534:	f383 8812 	msr	BASEPRI_MAX, r3
   36538:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3653c:	4816      	ldr	r0, [pc, #88]	; (36598 <z_impl_k_sem_give+0x70>)
   3653e:	f7ff fcf3 	bl	35f28 <z_spin_lock_valid>
   36542:	b178      	cbz	r0, 36564 <z_impl_k_sem_give+0x3c>
	z_spin_lock_set_owner(l);
   36544:	4814      	ldr	r0, [pc, #80]	; (36598 <z_impl_k_sem_give+0x70>)
   36546:	f7ff fd0f 	bl	35f68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   3654a:	4620      	mov	r0, r4
   3654c:	f001 fc3e 	bl	37dcc <z_unpend_first_thread>

	if (thread != NULL) {
   36550:	b198      	cbz	r0, 3657a <z_impl_k_sem_give+0x52>
   36552:	2200      	movs	r2, #0
   36554:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   36556:	f001 f82d 	bl	375b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   3655a:	4629      	mov	r1, r5
   3655c:	480e      	ldr	r0, [pc, #56]	; (36598 <z_impl_k_sem_give+0x70>)
   3655e:	f000 fdb7 	bl	370d0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   36562:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36564:	4e0d      	ldr	r6, [pc, #52]	; (3659c <z_impl_k_sem_give+0x74>)
   36566:	2281      	movs	r2, #129	; 0x81
   36568:	4631      	mov	r1, r6
   3656a:	480d      	ldr	r0, [pc, #52]	; (365a0 <z_impl_k_sem_give+0x78>)
   3656c:	f005 fae4 	bl	3bb38 <printk>
   36570:	2181      	movs	r1, #129	; 0x81
   36572:	4630      	mov	r0, r6
   36574:	f005 fd34 	bl	3bfe0 <assert_post_action>
   36578:	e7e4      	b.n	36544 <z_impl_k_sem_give+0x1c>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3657a:	68a3      	ldr	r3, [r4, #8]
   3657c:	68e2      	ldr	r2, [r4, #12]
   3657e:	4293      	cmp	r3, r2
   36580:	d008      	beq.n	36594 <z_impl_k_sem_give+0x6c>
   36582:	2201      	movs	r2, #1
   36584:	4413      	add	r3, r2
   36586:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   36588:	2102      	movs	r1, #2
   3658a:	f104 0010 	add.w	r0, r4, #16
   3658e:	f009 fc5b 	bl	3fe48 <z_handle_obj_poll_events>
}
   36592:	e7e2      	b.n	3655a <z_impl_k_sem_give+0x32>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   36594:	2200      	movs	r2, #0
   36596:	e7f5      	b.n	36584 <z_impl_k_sem_give+0x5c>
   36598:	20010da8 	.word	0x20010da8
   3659c:	00042210 	.word	0x00042210
   365a0:	00041c84 	.word	0x00041c84

000365a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   365a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   365a8:	b082      	sub	sp, #8
   365aa:	4604      	mov	r4, r0
   365ac:	4616      	mov	r6, r2
   365ae:	461f      	mov	r7, r3
   365b0:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   365b4:	b113      	cbz	r3, 365bc <z_impl_k_sem_take+0x18>
   365b6:	ea56 0307 	orrs.w	r3, r6, r7
   365ba:	d11e      	bne.n	365fa <z_impl_k_sem_take+0x56>
   365bc:	f04f 0320 	mov.w	r3, #32
   365c0:	f3ef 8511 	mrs	r5, BASEPRI
   365c4:	f383 8812 	msr	BASEPRI_MAX, r3
   365c8:	f3bf 8f6f 	isb	sy
   365cc:	482c      	ldr	r0, [pc, #176]	; (36680 <z_impl_k_sem_take+0xdc>)
   365ce:	f7ff fcab 	bl	35f28 <z_spin_lock_valid>
   365d2:	b1e8      	cbz	r0, 36610 <z_impl_k_sem_take+0x6c>
	z_spin_lock_set_owner(l);
   365d4:	482a      	ldr	r0, [pc, #168]	; (36680 <z_impl_k_sem_take+0xdc>)
   365d6:	f7ff fcc7 	bl	35f68 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   365da:	68a3      	ldr	r3, [r4, #8]
   365dc:	b37b      	cbz	r3, 3663e <z_impl_k_sem_take+0x9a>
		sem->count--;
   365de:	3b01      	subs	r3, #1
   365e0:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   365e2:	4827      	ldr	r0, [pc, #156]	; (36680 <z_impl_k_sem_take+0xdc>)
   365e4:	f7ff fcb0 	bl	35f48 <z_spin_unlock_valid>
   365e8:	b1f0      	cbz	r0, 36628 <z_impl_k_sem_take+0x84>
	__asm__ volatile(
   365ea:	f385 8811 	msr	BASEPRI, r5
   365ee:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   365f2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   365f4:	b002      	add	sp, #8
   365f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   365fa:	4d22      	ldr	r5, [pc, #136]	; (36684 <z_impl_k_sem_take+0xe0>)
   365fc:	2279      	movs	r2, #121	; 0x79
   365fe:	4629      	mov	r1, r5
   36600:	4821      	ldr	r0, [pc, #132]	; (36688 <z_impl_k_sem_take+0xe4>)
   36602:	f005 fa99 	bl	3bb38 <printk>
   36606:	2179      	movs	r1, #121	; 0x79
   36608:	4628      	mov	r0, r5
   3660a:	f005 fce9 	bl	3bfe0 <assert_post_action>
   3660e:	e7d5      	b.n	365bc <z_impl_k_sem_take+0x18>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36610:	f8df 8078 	ldr.w	r8, [pc, #120]	; 3668c <z_impl_k_sem_take+0xe8>
   36614:	2281      	movs	r2, #129	; 0x81
   36616:	4641      	mov	r1, r8
   36618:	481b      	ldr	r0, [pc, #108]	; (36688 <z_impl_k_sem_take+0xe4>)
   3661a:	f005 fa8d 	bl	3bb38 <printk>
   3661e:	2181      	movs	r1, #129	; 0x81
   36620:	4640      	mov	r0, r8
   36622:	f005 fcdd 	bl	3bfe0 <assert_post_action>
   36626:	e7d5      	b.n	365d4 <z_impl_k_sem_take+0x30>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36628:	4c18      	ldr	r4, [pc, #96]	; (3668c <z_impl_k_sem_take+0xe8>)
   3662a:	22ac      	movs	r2, #172	; 0xac
   3662c:	4621      	mov	r1, r4
   3662e:	4816      	ldr	r0, [pc, #88]	; (36688 <z_impl_k_sem_take+0xe4>)
   36630:	f005 fa82 	bl	3bb38 <printk>
   36634:	21ac      	movs	r1, #172	; 0xac
   36636:	4620      	mov	r0, r4
   36638:	f005 fcd2 	bl	3bfe0 <assert_post_action>
   3663c:	e7d5      	b.n	365ea <z_impl_k_sem_take+0x46>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3663e:	ea56 0307 	orrs.w	r3, r6, r7
   36642:	d007      	beq.n	36654 <z_impl_k_sem_take+0xb0>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   36644:	e9cd 6700 	strd	r6, r7, [sp]
   36648:	4622      	mov	r2, r4
   3664a:	4629      	mov	r1, r5
   3664c:	480c      	ldr	r0, [pc, #48]	; (36680 <z_impl_k_sem_take+0xdc>)
   3664e:	f001 f983 	bl	37958 <z_pend_curr>
	return ret;
   36652:	e7cf      	b.n	365f4 <z_impl_k_sem_take+0x50>
   36654:	480a      	ldr	r0, [pc, #40]	; (36680 <z_impl_k_sem_take+0xdc>)
   36656:	f7ff fc77 	bl	35f48 <z_spin_unlock_valid>
   3665a:	b130      	cbz	r0, 3666a <z_impl_k_sem_take+0xc6>
   3665c:	f385 8811 	msr	BASEPRI, r5
   36660:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   36664:	f06f 000f 	mvn.w	r0, #15
   36668:	e7c4      	b.n	365f4 <z_impl_k_sem_take+0x50>
   3666a:	4c08      	ldr	r4, [pc, #32]	; (3668c <z_impl_k_sem_take+0xe8>)
   3666c:	22ac      	movs	r2, #172	; 0xac
   3666e:	4621      	mov	r1, r4
   36670:	4805      	ldr	r0, [pc, #20]	; (36688 <z_impl_k_sem_take+0xe4>)
   36672:	f005 fa61 	bl	3bb38 <printk>
   36676:	21ac      	movs	r1, #172	; 0xac
   36678:	4620      	mov	r0, r4
   3667a:	f005 fcb1 	bl	3bfe0 <assert_post_action>
   3667e:	e7ed      	b.n	3665c <z_impl_k_sem_take+0xb8>
   36680:	20010da8 	.word	0x20010da8
   36684:	00045bf4 	.word	0x00045bf4
   36688:	00041c84 	.word	0x00041c84
   3668c:	00042210 	.word	0x00042210

00036690 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   36690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36692:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   36694:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   36696:	f013 0f02 	tst.w	r3, #2
   3669a:	d16d      	bne.n	36778 <submit_to_queue_locked+0xe8>
   3669c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   3669e:	f013 0f04 	tst.w	r3, #4
   366a2:	d16e      	bne.n	36782 <submit_to_queue_locked+0xf2>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   366a4:	680b      	ldr	r3, [r1, #0]
   366a6:	2b00      	cmp	r3, #0
   366a8:	d03c      	beq.n	36724 <submit_to_queue_locked+0x94>
	return (*flagp & BIT(bit)) != 0U;
   366aa:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   366ac:	f013 0f01 	tst.w	r3, #1
   366b0:	d048      	beq.n	36744 <submit_to_queue_locked+0xb4>
			__ASSERT_NO_MSG(work->queue != NULL);
   366b2:	68a3      	ldr	r3, [r4, #8]
   366b4:	2b00      	cmp	r3, #0
   366b6:	d038      	beq.n	3672a <submit_to_queue_locked+0x9a>
			*queuep = work->queue;
   366b8:	68a3      	ldr	r3, [r4, #8]
   366ba:	602b      	str	r3, [r5, #0]
			ret = 2;
   366bc:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   366be:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   366c0:	2e00      	cmp	r6, #0
   366c2:	d04d      	beq.n	36760 <submit_to_queue_locked+0xd0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   366c4:	4b30      	ldr	r3, [pc, #192]	; (36788 <submit_to_queue_locked+0xf8>)
   366c6:	689b      	ldr	r3, [r3, #8]
   366c8:	42b3      	cmp	r3, r6
   366ca:	d03d      	beq.n	36748 <submit_to_queue_locked+0xb8>
   366cc:	2300      	movs	r3, #0
   366ce:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   366d0:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   366d4:	f3c3 0180 	ubfx	r1, r3, #2, #1
   366d8:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   366dc:	f013 0f01 	tst.w	r3, #1
   366e0:	d041      	beq.n	36766 <submit_to_queue_locked+0xd6>
	} else if (draining && !chained) {
   366e2:	b109      	cbz	r1, 366e8 <submit_to_queue_locked+0x58>
   366e4:	2a00      	cmp	r2, #0
   366e6:	d041      	beq.n	3676c <submit_to_queue_locked+0xdc>
	} else if (plugged && !draining) {
   366e8:	b108      	cbz	r0, 366ee <submit_to_queue_locked+0x5e>
   366ea:	2900      	cmp	r1, #0
   366ec:	d041      	beq.n	36772 <submit_to_queue_locked+0xe2>
	parent->next = child;
   366ee:	2300      	movs	r3, #0
   366f0:	6023      	str	r3, [r4, #0]
	return list->tail;
   366f2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   366f6:	b373      	cbz	r3, 36756 <submit_to_queue_locked+0xc6>
	parent->next = child;
   366f8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   366fa:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   366fe:	2200      	movs	r2, #0
   36700:	4611      	mov	r1, r2
   36702:	f106 0088 	add.w	r0, r6, #136	; 0x88
   36706:	f001 fdc7 	bl	38298 <z_sched_wake>
		ret = 1;
   3670a:	2001      	movs	r0, #1

		if (rc < 0) {
   3670c:	2800      	cmp	r0, #0
   3670e:	db06      	blt.n	3671e <submit_to_queue_locked+0x8e>
	*flagp |= BIT(bit);
   36710:	68e3      	ldr	r3, [r4, #12]
   36712:	f043 0304 	orr.w	r3, r3, #4
   36716:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   36718:	682b      	ldr	r3, [r5, #0]
   3671a:	60a3      	str	r3, [r4, #8]
   3671c:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   3671e:	2800      	cmp	r0, #0
   36720:	dc2e      	bgt.n	36780 <submit_to_queue_locked+0xf0>
   36722:	e02b      	b.n	3677c <submit_to_queue_locked+0xec>
			*queuep = work->queue;
   36724:	6883      	ldr	r3, [r0, #8]
   36726:	600b      	str	r3, [r1, #0]
   36728:	e7bf      	b.n	366aa <submit_to_queue_locked+0x1a>
			__ASSERT_NO_MSG(work->queue != NULL);
   3672a:	4e18      	ldr	r6, [pc, #96]	; (3678c <submit_to_queue_locked+0xfc>)
   3672c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   36730:	4631      	mov	r1, r6
   36732:	4817      	ldr	r0, [pc, #92]	; (36790 <submit_to_queue_locked+0x100>)
   36734:	f005 fa00 	bl	3bb38 <printk>
   36738:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   3673c:	4630      	mov	r0, r6
   3673e:	f005 fc4f 	bl	3bfe0 <assert_post_action>
   36742:	e7b9      	b.n	366b8 <submit_to_queue_locked+0x28>
		ret = 1;
   36744:	2701      	movs	r7, #1
   36746:	e7ba      	b.n	366be <submit_to_queue_locked+0x2e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   36748:	f009 fa18 	bl	3fb7c <k_is_in_isr>
   3674c:	b908      	cbnz	r0, 36752 <submit_to_queue_locked+0xc2>
   3674e:	2301      	movs	r3, #1
   36750:	e7bd      	b.n	366ce <submit_to_queue_locked+0x3e>
   36752:	2300      	movs	r3, #0
   36754:	e7bb      	b.n	366ce <submit_to_queue_locked+0x3e>
   36756:	f8c6 4084 	str.w	r4, [r6, #132]	; 0x84
	list->head = node;
   3675a:	f8c6 4080 	str.w	r4, [r6, #128]	; 0x80
}
   3675e:	e7ce      	b.n	366fe <submit_to_queue_locked+0x6e>
		return -EINVAL;
   36760:	f06f 0015 	mvn.w	r0, #21
   36764:	e7d2      	b.n	3670c <submit_to_queue_locked+0x7c>
		ret = -ENODEV;
   36766:	f06f 0012 	mvn.w	r0, #18
   3676a:	e7cf      	b.n	3670c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   3676c:	f06f 000f 	mvn.w	r0, #15
   36770:	e7cc      	b.n	3670c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   36772:	f06f 000f 	mvn.w	r0, #15
   36776:	e7c9      	b.n	3670c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   36778:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   3677c:	2300      	movs	r3, #0
   3677e:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   36780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   36782:	2000      	movs	r0, #0
   36784:	e7fa      	b.n	3677c <submit_to_queue_locked+0xec>
   36786:	bf00      	nop
   36788:	20010d7c 	.word	0x20010d7c
   3678c:	00045c14 	.word	0x00045c14
   36790:	00041c84 	.word	0x00041c84

00036794 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   36794:	b5f0      	push	{r4, r5, r6, r7, lr}
   36796:	b083      	sub	sp, #12
   36798:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   3679a:	f1a0 0610 	sub.w	r6, r0, #16
	__asm__ volatile(
   3679e:	f04f 0320 	mov.w	r3, #32
   367a2:	f3ef 8511 	mrs	r5, BASEPRI
   367a6:	f383 8812 	msr	BASEPRI_MAX, r3
   367aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367ae:	481c      	ldr	r0, [pc, #112]	; (36820 <work_timeout+0x8c>)
   367b0:	f7ff fbba 	bl	35f28 <z_spin_lock_valid>
   367b4:	b1b8      	cbz	r0, 367e6 <work_timeout+0x52>
	z_spin_lock_set_owner(l);
   367b6:	481a      	ldr	r0, [pc, #104]	; (36820 <work_timeout+0x8c>)
   367b8:	f7ff fbd6 	bl	35f68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   367bc:	2300      	movs	r3, #0
   367be:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   367c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   367c4:	f023 0208 	bic.w	r2, r3, #8
   367c8:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   367cc:	f013 0f08 	tst.w	r3, #8
   367d0:	d114      	bne.n	367fc <work_timeout+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   367d2:	4813      	ldr	r0, [pc, #76]	; (36820 <work_timeout+0x8c>)
   367d4:	f7ff fbb8 	bl	35f48 <z_spin_unlock_valid>
   367d8:	b1b8      	cbz	r0, 3680a <work_timeout+0x76>
	__asm__ volatile(
   367da:	f385 8811 	msr	BASEPRI, r5
   367de:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   367e2:	b003      	add	sp, #12
   367e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   367e6:	4f0f      	ldr	r7, [pc, #60]	; (36824 <work_timeout+0x90>)
   367e8:	2281      	movs	r2, #129	; 0x81
   367ea:	4639      	mov	r1, r7
   367ec:	480e      	ldr	r0, [pc, #56]	; (36828 <work_timeout+0x94>)
   367ee:	f005 f9a3 	bl	3bb38 <printk>
   367f2:	2181      	movs	r1, #129	; 0x81
   367f4:	4638      	mov	r0, r7
   367f6:	f005 fbf3 	bl	3bfe0 <assert_post_action>
   367fa:	e7dc      	b.n	367b6 <work_timeout+0x22>
		queue = dw->queue;
   367fc:	69a3      	ldr	r3, [r4, #24]
   367fe:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   36800:	a901      	add	r1, sp, #4
   36802:	4630      	mov	r0, r6
   36804:	f7ff ff44 	bl	36690 <submit_to_queue_locked>
   36808:	e7e3      	b.n	367d2 <work_timeout+0x3e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3680a:	4c06      	ldr	r4, [pc, #24]	; (36824 <work_timeout+0x90>)
   3680c:	22ac      	movs	r2, #172	; 0xac
   3680e:	4621      	mov	r1, r4
   36810:	4805      	ldr	r0, [pc, #20]	; (36828 <work_timeout+0x94>)
   36812:	f005 f991 	bl	3bb38 <printk>
   36816:	21ac      	movs	r1, #172	; 0xac
   36818:	4620      	mov	r0, r4
   3681a:	f005 fbe1 	bl	3bfe0 <assert_post_action>
   3681e:	e7dc      	b.n	367da <work_timeout+0x46>
   36820:	20010dac 	.word	0x20010dac
   36824:	00042210 	.word	0x00042210
   36828:	00041c84 	.word	0x00041c84

0003682c <finalize_cancel_locked>:
{
   3682c:	b570      	push	{r4, r5, r6, lr}
   3682e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   36830:	68c3      	ldr	r3, [r0, #12]
   36832:	f023 0302 	bic.w	r3, r3, #2
   36836:	60c3      	str	r3, [r0, #12]
	return list->head;
   36838:	4b19      	ldr	r3, [pc, #100]	; (368a0 <finalize_cancel_locked+0x74>)
   3683a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   3683c:	b1e8      	cbz	r0, 3687a <finalize_cancel_locked+0x4e>
   3683e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   36840:	b100      	cbz	r0, 36844 <finalize_cancel_locked+0x18>
	return node->next;
   36842:	6804      	ldr	r4, [r0, #0]
   36844:	2600      	movs	r6, #0
   36846:	e01d      	b.n	36884 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   36848:	b15e      	cbz	r6, 36862 <finalize_cancel_locked+0x36>
	return node->next;
   3684a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   3684c:	6033      	str	r3, [r6, #0]
	return list->tail;
   3684e:	4b14      	ldr	r3, [pc, #80]	; (368a0 <finalize_cancel_locked+0x74>)
   36850:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   36852:	4298      	cmp	r0, r3
   36854:	d00e      	beq.n	36874 <finalize_cancel_locked+0x48>
	parent->next = child;
   36856:	2300      	movs	r3, #0
   36858:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   3685c:	f7ff fe64 	bl	36528 <z_impl_k_sem_give>
}
   36860:	e015      	b.n	3688e <finalize_cancel_locked+0x62>
	return node->next;
   36862:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   36864:	4b0e      	ldr	r3, [pc, #56]	; (368a0 <finalize_cancel_locked+0x74>)
   36866:	601a      	str	r2, [r3, #0]
	return list->tail;
   36868:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   3686a:	4298      	cmp	r0, r3
   3686c:	d1f3      	bne.n	36856 <finalize_cancel_locked+0x2a>
	list->tail = node;
   3686e:	4b0c      	ldr	r3, [pc, #48]	; (368a0 <finalize_cancel_locked+0x74>)
   36870:	605a      	str	r2, [r3, #4]
}
   36872:	e7f0      	b.n	36856 <finalize_cancel_locked+0x2a>
	list->tail = node;
   36874:	4b0a      	ldr	r3, [pc, #40]	; (368a0 <finalize_cancel_locked+0x74>)
   36876:	605e      	str	r6, [r3, #4]
}
   36878:	e7ed      	b.n	36856 <finalize_cancel_locked+0x2a>
   3687a:	4604      	mov	r4, r0
   3687c:	e7e2      	b.n	36844 <finalize_cancel_locked+0x18>
   3687e:	4623      	mov	r3, r4
   36880:	4620      	mov	r0, r4
   36882:	461c      	mov	r4, r3
   36884:	b150      	cbz	r0, 3689c <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   36886:	6843      	ldr	r3, [r0, #4]
   36888:	42ab      	cmp	r3, r5
   3688a:	d0dd      	beq.n	36848 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   3688c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   3688e:	2c00      	cmp	r4, #0
   36890:	d0f5      	beq.n	3687e <finalize_cancel_locked+0x52>
   36892:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   36894:	2c00      	cmp	r4, #0
   36896:	d0f3      	beq.n	36880 <finalize_cancel_locked+0x54>
	return node->next;
   36898:	6823      	ldr	r3, [r4, #0]
   3689a:	e7f1      	b.n	36880 <finalize_cancel_locked+0x54>
}
   3689c:	bd70      	pop	{r4, r5, r6, pc}
   3689e:	bf00      	nop
   368a0:	20010db0 	.word	0x20010db0

000368a4 <work_queue_main>:
{
   368a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368a8:	b084      	sub	sp, #16
   368aa:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   368ac:	e021      	b.n	368f2 <work_queue_main+0x4e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   368ae:	4c63      	ldr	r4, [pc, #396]	; (36a3c <work_queue_main+0x198>)
   368b0:	2281      	movs	r2, #129	; 0x81
   368b2:	4621      	mov	r1, r4
   368b4:	4862      	ldr	r0, [pc, #392]	; (36a40 <work_queue_main+0x19c>)
   368b6:	f005 f93f 	bl	3bb38 <printk>
   368ba:	2181      	movs	r1, #129	; 0x81
   368bc:	4620      	mov	r0, r4
   368be:	f005 fb8f 	bl	3bfe0 <assert_post_action>
   368c2:	e023      	b.n	3690c <work_queue_main+0x68>
	return (*flagp & BIT(bit)) != 0U;
   368c4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	*flagp &= ~BIT(bit);
   368c8:	f023 0204 	bic.w	r2, r3, #4
   368cc:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
   368d0:	f013 0f04 	tst.w	r3, #4
   368d4:	d174      	bne.n	369c0 <work_queue_main+0x11c>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   368d6:	2300      	movs	r3, #0
   368d8:	9302      	str	r3, [sp, #8]
   368da:	f04f 32ff 	mov.w	r2, #4294967295
   368de:	f04f 33ff 	mov.w	r3, #4294967295
   368e2:	e9cd 2300 	strd	r2, r3, [sp]
   368e6:	f105 0288 	add.w	r2, r5, #136	; 0x88
   368ea:	4631      	mov	r1, r6
   368ec:	4855      	ldr	r0, [pc, #340]	; (36a44 <work_queue_main+0x1a0>)
   368ee:	f001 fd33 	bl	38358 <z_sched_wait>
	__asm__ volatile(
   368f2:	f04f 0320 	mov.w	r3, #32
   368f6:	f3ef 8611 	mrs	r6, BASEPRI
   368fa:	f383 8812 	msr	BASEPRI_MAX, r3
   368fe:	f3bf 8f6f 	isb	sy
   36902:	4850      	ldr	r0, [pc, #320]	; (36a44 <work_queue_main+0x1a0>)
   36904:	f7ff fb10 	bl	35f28 <z_spin_lock_valid>
   36908:	2800      	cmp	r0, #0
   3690a:	d0d0      	beq.n	368ae <work_queue_main+0xa>
	z_spin_lock_set_owner(l);
   3690c:	484d      	ldr	r0, [pc, #308]	; (36a44 <work_queue_main+0x1a0>)
   3690e:	f7ff fb2b 	bl	35f68 <z_spin_lock_set_owner>
	return list->head;
   36912:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   36916:	2c00      	cmp	r4, #0
   36918:	d0d4      	beq.n	368c4 <work_queue_main+0x20>
	return node->next;
   3691a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   3691c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
	return list->tail;
   36920:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   36924:	4294      	cmp	r4, r2
   36926:	d048      	beq.n	369ba <work_queue_main+0x116>
	*flagp |= BIT(bit);
   36928:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   3692c:	f043 0302 	orr.w	r3, r3, #2
   36930:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
   36934:	68e3      	ldr	r3, [r4, #12]
   36936:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   3693a:	f023 0304 	bic.w	r3, r3, #4
   3693e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   36940:	6867      	ldr	r7, [r4, #4]
		if (work == NULL) {
   36942:	2c00      	cmp	r4, #0
   36944:	d0c7      	beq.n	368d6 <work_queue_main+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36946:	483f      	ldr	r0, [pc, #252]	; (36a44 <work_queue_main+0x1a0>)
   36948:	f7ff fafe 	bl	35f48 <z_spin_unlock_valid>
   3694c:	2800      	cmp	r0, #0
   3694e:	d042      	beq.n	369d6 <work_queue_main+0x132>
	__asm__ volatile(
   36950:	f386 8811 	msr	BASEPRI, r6
   36954:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   36958:	2f00      	cmp	r7, #0
   3695a:	d048      	beq.n	369ee <work_queue_main+0x14a>
		handler(work);
   3695c:	4620      	mov	r0, r4
   3695e:	47b8      	blx	r7
	__asm__ volatile(
   36960:	f04f 0320 	mov.w	r3, #32
   36964:	f3ef 8611 	mrs	r6, BASEPRI
   36968:	f383 8812 	msr	BASEPRI_MAX, r3
   3696c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36970:	4834      	ldr	r0, [pc, #208]	; (36a44 <work_queue_main+0x1a0>)
   36972:	f7ff fad9 	bl	35f28 <z_spin_lock_valid>
   36976:	2800      	cmp	r0, #0
   36978:	d046      	beq.n	36a08 <work_queue_main+0x164>
	z_spin_lock_set_owner(l);
   3697a:	4832      	ldr	r0, [pc, #200]	; (36a44 <work_queue_main+0x1a0>)
   3697c:	f7ff faf4 	bl	35f68 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   36980:	68e3      	ldr	r3, [r4, #12]
   36982:	f023 0301 	bic.w	r3, r3, #1
   36986:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   36988:	f013 0f02 	tst.w	r3, #2
   3698c:	d147      	bne.n	36a1e <work_queue_main+0x17a>
	*flagp &= ~BIT(bit);
   3698e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   36992:	f023 0302 	bic.w	r3, r3, #2
   36996:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
	return (*flagp & BIT(bit)) != 0U;
   3699a:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3699e:	4829      	ldr	r0, [pc, #164]	; (36a44 <work_queue_main+0x1a0>)
   369a0:	f7ff fad2 	bl	35f48 <z_spin_unlock_valid>
   369a4:	2800      	cmp	r0, #0
   369a6:	d03e      	beq.n	36a26 <work_queue_main+0x182>
	__asm__ volatile(
   369a8:	f386 8811 	msr	BASEPRI, r6
   369ac:	f3bf 8f6f 	isb	sy
		if (yield) {
   369b0:	2c00      	cmp	r4, #0
   369b2:	d19e      	bne.n	368f2 <work_queue_main+0x4e>
	z_impl_k_yield();
   369b4:	f001 fa68 	bl	37e88 <z_impl_k_yield>
}
   369b8:	e79b      	b.n	368f2 <work_queue_main+0x4e>
	list->tail = node;
   369ba:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
   369be:	e7b3      	b.n	36928 <work_queue_main+0x84>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   369c0:	f105 0790 	add.w	r7, r5, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   369c4:	2200      	movs	r2, #0
   369c6:	2101      	movs	r1, #1
   369c8:	4638      	mov	r0, r7
   369ca:	f001 fc65 	bl	38298 <z_sched_wake>
   369ce:	2800      	cmp	r0, #0
   369d0:	d1f8      	bne.n	369c4 <work_queue_main+0x120>
		k_work_handler_t handler = NULL;
   369d2:	2700      	movs	r7, #0
   369d4:	e7b5      	b.n	36942 <work_queue_main+0x9e>
   369d6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 36a3c <work_queue_main+0x198>
   369da:	22ac      	movs	r2, #172	; 0xac
   369dc:	4641      	mov	r1, r8
   369de:	4818      	ldr	r0, [pc, #96]	; (36a40 <work_queue_main+0x19c>)
   369e0:	f005 f8aa 	bl	3bb38 <printk>
   369e4:	21ac      	movs	r1, #172	; 0xac
   369e6:	4640      	mov	r0, r8
   369e8:	f005 fafa 	bl	3bfe0 <assert_post_action>
   369ec:	e7b0      	b.n	36950 <work_queue_main+0xac>
		__ASSERT_NO_MSG(handler != NULL);
   369ee:	4e16      	ldr	r6, [pc, #88]	; (36a48 <work_queue_main+0x1a4>)
   369f0:	f44f 7222 	mov.w	r2, #648	; 0x288
   369f4:	4631      	mov	r1, r6
   369f6:	4812      	ldr	r0, [pc, #72]	; (36a40 <work_queue_main+0x19c>)
   369f8:	f005 f89e 	bl	3bb38 <printk>
   369fc:	f44f 7122 	mov.w	r1, #648	; 0x288
   36a00:	4630      	mov	r0, r6
   36a02:	f005 faed 	bl	3bfe0 <assert_post_action>
   36a06:	e7a9      	b.n	3695c <work_queue_main+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36a08:	4f0c      	ldr	r7, [pc, #48]	; (36a3c <work_queue_main+0x198>)
   36a0a:	2281      	movs	r2, #129	; 0x81
   36a0c:	4639      	mov	r1, r7
   36a0e:	480c      	ldr	r0, [pc, #48]	; (36a40 <work_queue_main+0x19c>)
   36a10:	f005 f892 	bl	3bb38 <printk>
   36a14:	2181      	movs	r1, #129	; 0x81
   36a16:	4638      	mov	r0, r7
   36a18:	f005 fae2 	bl	3bfe0 <assert_post_action>
   36a1c:	e7ad      	b.n	3697a <work_queue_main+0xd6>
			finalize_cancel_locked(work);
   36a1e:	4620      	mov	r0, r4
   36a20:	f7ff ff04 	bl	3682c <finalize_cancel_locked>
   36a24:	e7b3      	b.n	3698e <work_queue_main+0xea>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36a26:	4f05      	ldr	r7, [pc, #20]	; (36a3c <work_queue_main+0x198>)
   36a28:	22ac      	movs	r2, #172	; 0xac
   36a2a:	4639      	mov	r1, r7
   36a2c:	4804      	ldr	r0, [pc, #16]	; (36a40 <work_queue_main+0x19c>)
   36a2e:	f005 f883 	bl	3bb38 <printk>
   36a32:	21ac      	movs	r1, #172	; 0xac
   36a34:	4638      	mov	r0, r7
   36a36:	f005 fad3 	bl	3bfe0 <assert_post_action>
   36a3a:	e7b5      	b.n	369a8 <work_queue_main+0x104>
   36a3c:	00042210 	.word	0x00042210
   36a40:	00041c84 	.word	0x00041c84
   36a44:	20010dac 	.word	0x20010dac
   36a48:	00045c14 	.word	0x00045c14

00036a4c <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   36a4c:	b570      	push	{r4, r5, r6, lr}
   36a4e:	4606      	mov	r6, r0
   36a50:	4608      	mov	r0, r1
   36a52:	4614      	mov	r4, r2
   36a54:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   36a56:	ea54 0305 	orrs.w	r3, r4, r5
   36a5a:	d00c      	beq.n	36a76 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   36a5c:	68cb      	ldr	r3, [r1, #12]
   36a5e:	f043 0308 	orr.w	r3, r3, #8
   36a62:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   36a64:	6833      	ldr	r3, [r6, #0]
   36a66:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   36a68:	462b      	mov	r3, r5
   36a6a:	4905      	ldr	r1, [pc, #20]	; (36a80 <schedule_for_queue_locked+0x34>)
   36a6c:	3010      	adds	r0, #16
   36a6e:	f001 fce7 	bl	38440 <z_add_timeout>

	return ret;
   36a72:	2001      	movs	r0, #1
}
   36a74:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   36a76:	4631      	mov	r1, r6
   36a78:	f7ff fe0a 	bl	36690 <submit_to_queue_locked>
   36a7c:	e7fa      	b.n	36a74 <schedule_for_queue_locked+0x28>
   36a7e:	bf00      	nop
   36a80:	00036795 	.word	0x00036795

00036a84 <k_work_init>:
{
   36a84:	b570      	push	{r4, r5, r6, lr}
   36a86:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   36a88:	4604      	mov	r4, r0
   36a8a:	b130      	cbz	r0, 36a9a <k_work_init+0x16>
	__ASSERT_NO_MSG(handler != NULL);
   36a8c:	b185      	cbz	r5, 36ab0 <k_work_init+0x2c>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   36a8e:	2300      	movs	r3, #0
   36a90:	6023      	str	r3, [r4, #0]
   36a92:	60a3      	str	r3, [r4, #8]
   36a94:	60e3      	str	r3, [r4, #12]
   36a96:	6065      	str	r5, [r4, #4]
}
   36a98:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   36a9a:	4e0b      	ldr	r6, [pc, #44]	; (36ac8 <k_work_init+0x44>)
   36a9c:	2289      	movs	r2, #137	; 0x89
   36a9e:	4631      	mov	r1, r6
   36aa0:	480a      	ldr	r0, [pc, #40]	; (36acc <k_work_init+0x48>)
   36aa2:	f005 f849 	bl	3bb38 <printk>
   36aa6:	2189      	movs	r1, #137	; 0x89
   36aa8:	4630      	mov	r0, r6
   36aaa:	f005 fa99 	bl	3bfe0 <assert_post_action>
   36aae:	e7ed      	b.n	36a8c <k_work_init+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   36ab0:	4e05      	ldr	r6, [pc, #20]	; (36ac8 <k_work_init+0x44>)
   36ab2:	228a      	movs	r2, #138	; 0x8a
   36ab4:	4631      	mov	r1, r6
   36ab6:	4805      	ldr	r0, [pc, #20]	; (36acc <k_work_init+0x48>)
   36ab8:	f005 f83e 	bl	3bb38 <printk>
   36abc:	218a      	movs	r1, #138	; 0x8a
   36abe:	4630      	mov	r0, r6
   36ac0:	f005 fa8e 	bl	3bfe0 <assert_post_action>
   36ac4:	e7e3      	b.n	36a8e <k_work_init+0xa>
   36ac6:	bf00      	nop
   36ac8:	00045c14 	.word	0x00045c14
   36acc:	00041c84 	.word	0x00041c84

00036ad0 <k_work_submit_to_queue>:
{
   36ad0:	b570      	push	{r4, r5, r6, lr}
   36ad2:	b082      	sub	sp, #8
   36ad4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   36ad6:	460c      	mov	r4, r1
   36ad8:	b309      	cbz	r1, 36b1e <k_work_submit_to_queue+0x4e>
	__asm__ volatile(
   36ada:	f04f 0320 	mov.w	r3, #32
   36ade:	f3ef 8611 	mrs	r6, BASEPRI
   36ae2:	f383 8812 	msr	BASEPRI_MAX, r3
   36ae6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36aea:	4822      	ldr	r0, [pc, #136]	; (36b74 <k_work_submit_to_queue+0xa4>)
   36aec:	f7ff fa1c 	bl	35f28 <z_spin_lock_valid>
   36af0:	b310      	cbz	r0, 36b38 <k_work_submit_to_queue+0x68>
	z_spin_lock_set_owner(l);
   36af2:	4d20      	ldr	r5, [pc, #128]	; (36b74 <k_work_submit_to_queue+0xa4>)
   36af4:	4628      	mov	r0, r5
   36af6:	f7ff fa37 	bl	35f68 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   36afa:	a901      	add	r1, sp, #4
   36afc:	4620      	mov	r0, r4
   36afe:	f7ff fdc7 	bl	36690 <submit_to_queue_locked>
   36b02:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b04:	4628      	mov	r0, r5
   36b06:	f7ff fa1f 	bl	35f48 <z_spin_unlock_valid>
   36b0a:	b300      	cbz	r0, 36b4e <k_work_submit_to_queue+0x7e>
	__asm__ volatile(
   36b0c:	f386 8811 	msr	BASEPRI, r6
   36b10:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   36b14:	2c00      	cmp	r4, #0
   36b16:	dc25      	bgt.n	36b64 <k_work_submit_to_queue+0x94>
}
   36b18:	4620      	mov	r0, r4
   36b1a:	b002      	add	sp, #8
   36b1c:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   36b1e:	4d16      	ldr	r5, [pc, #88]	; (36b78 <k_work_submit_to_queue+0xa8>)
   36b20:	f240 1269 	movw	r2, #361	; 0x169
   36b24:	4629      	mov	r1, r5
   36b26:	4815      	ldr	r0, [pc, #84]	; (36b7c <k_work_submit_to_queue+0xac>)
   36b28:	f005 f806 	bl	3bb38 <printk>
   36b2c:	f240 1169 	movw	r1, #361	; 0x169
   36b30:	4628      	mov	r0, r5
   36b32:	f005 fa55 	bl	3bfe0 <assert_post_action>
   36b36:	e7d0      	b.n	36ada <k_work_submit_to_queue+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36b38:	4d11      	ldr	r5, [pc, #68]	; (36b80 <k_work_submit_to_queue+0xb0>)
   36b3a:	2281      	movs	r2, #129	; 0x81
   36b3c:	4629      	mov	r1, r5
   36b3e:	480f      	ldr	r0, [pc, #60]	; (36b7c <k_work_submit_to_queue+0xac>)
   36b40:	f004 fffa 	bl	3bb38 <printk>
   36b44:	2181      	movs	r1, #129	; 0x81
   36b46:	4628      	mov	r0, r5
   36b48:	f005 fa4a 	bl	3bfe0 <assert_post_action>
   36b4c:	e7d1      	b.n	36af2 <k_work_submit_to_queue+0x22>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36b4e:	4d0c      	ldr	r5, [pc, #48]	; (36b80 <k_work_submit_to_queue+0xb0>)
   36b50:	22ac      	movs	r2, #172	; 0xac
   36b52:	4629      	mov	r1, r5
   36b54:	4809      	ldr	r0, [pc, #36]	; (36b7c <k_work_submit_to_queue+0xac>)
   36b56:	f004 ffef 	bl	3bb38 <printk>
   36b5a:	21ac      	movs	r1, #172	; 0xac
   36b5c:	4628      	mov	r0, r5
   36b5e:	f005 fa3f 	bl	3bfe0 <assert_post_action>
   36b62:	e7d3      	b.n	36b0c <k_work_submit_to_queue+0x3c>
	return z_impl_k_is_preempt_thread();
   36b64:	f001 fb0a 	bl	3817c <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   36b68:	2800      	cmp	r0, #0
   36b6a:	d0d5      	beq.n	36b18 <k_work_submit_to_queue+0x48>
	z_impl_k_yield();
   36b6c:	f001 f98c 	bl	37e88 <z_impl_k_yield>
	return ret;
   36b70:	e7d2      	b.n	36b18 <k_work_submit_to_queue+0x48>
   36b72:	bf00      	nop
   36b74:	20010dac 	.word	0x20010dac
   36b78:	00045c14 	.word	0x00045c14
   36b7c:	00041c84 	.word	0x00041c84
   36b80:	00042210 	.word	0x00042210

00036b84 <k_work_submit>:
{
   36b84:	b508      	push	{r3, lr}
   36b86:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   36b88:	4801      	ldr	r0, [pc, #4]	; (36b90 <k_work_submit+0xc>)
   36b8a:	f7ff ffa1 	bl	36ad0 <k_work_submit_to_queue>
}
   36b8e:	bd08      	pop	{r3, pc}
   36b90:	2000e740 	.word	0x2000e740

00036b94 <k_work_queue_start>:
{
   36b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36b98:	b089      	sub	sp, #36	; 0x24
   36b9a:	460d      	mov	r5, r1
   36b9c:	4617      	mov	r7, r2
   36b9e:	4698      	mov	r8, r3
   36ba0:	9e10      	ldr	r6, [sp, #64]	; 0x40
	__ASSERT_NO_MSG(queue);
   36ba2:	4604      	mov	r4, r0
   36ba4:	2800      	cmp	r0, #0
   36ba6:	d03e      	beq.n	36c26 <k_work_queue_start+0x92>
	__ASSERT_NO_MSG(stack);
   36ba8:	2d00      	cmp	r5, #0
   36baa:	d04a      	beq.n	36c42 <k_work_queue_start+0xae>
	return (*flagp & BIT(bit)) != 0U;
   36bac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   36bb0:	f013 0f01 	tst.w	r3, #1
   36bb4:	d153      	bne.n	36c5e <k_work_queue_start+0xca>
	list->head = NULL;
   36bb6:	2300      	movs	r3, #0
   36bb8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	list->tail = NULL;
   36bbc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   36bc0:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->head = (sys_dnode_t *)list;
   36bc4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	list->tail = (sys_dnode_t *)list;
   36bc8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   36bcc:	f104 0390 	add.w	r3, r4, #144	; 0x90
	list->head = (sys_dnode_t *)list;
   36bd0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
	list->tail = (sys_dnode_t *)list;
   36bd4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	if ((cfg != NULL) && cfg->no_yield) {
   36bd8:	2e00      	cmp	r6, #0
   36bda:	d04e      	beq.n	36c7a <k_work_queue_start+0xe6>
   36bdc:	7933      	ldrb	r3, [r6, #4]
   36bde:	2b00      	cmp	r3, #0
   36be0:	d14d      	bne.n	36c7e <k_work_queue_start+0xea>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   36be2:	2301      	movs	r3, #1
	*flagp = flags;
   36be4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   36be8:	f04f 32ff 	mov.w	r2, #4294967295
   36bec:	f04f 33ff 	mov.w	r3, #4294967295
   36bf0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   36bf4:	2200      	movs	r2, #0
   36bf6:	9204      	str	r2, [sp, #16]
   36bf8:	f8cd 800c 	str.w	r8, [sp, #12]
   36bfc:	9202      	str	r2, [sp, #8]
   36bfe:	9201      	str	r2, [sp, #4]
   36c00:	9400      	str	r4, [sp, #0]
   36c02:	4b20      	ldr	r3, [pc, #128]	; (36c84 <k_work_queue_start+0xf0>)
   36c04:	463a      	mov	r2, r7
   36c06:	4629      	mov	r1, r5
   36c08:	4620      	mov	r0, r4
   36c0a:	f7ff f8db 	bl	35dc4 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   36c0e:	b126      	cbz	r6, 36c1a <k_work_queue_start+0x86>
   36c10:	6831      	ldr	r1, [r6, #0]
   36c12:	b111      	cbz	r1, 36c1a <k_work_queue_start+0x86>
	return z_impl_k_thread_name_set(thread, str);
   36c14:	4620      	mov	r0, r4
   36c16:	f008 ffb7 	bl	3fb88 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   36c1a:	4620      	mov	r0, r4
   36c1c:	f008 ffb9 	bl	3fb92 <z_impl_k_thread_start>
}
   36c20:	b009      	add	sp, #36	; 0x24
   36c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(queue);
   36c26:	f8df 9064 	ldr.w	r9, [pc, #100]	; 36c8c <k_work_queue_start+0xf8>
   36c2a:	f240 22b5 	movw	r2, #693	; 0x2b5
   36c2e:	4649      	mov	r1, r9
   36c30:	4815      	ldr	r0, [pc, #84]	; (36c88 <k_work_queue_start+0xf4>)
   36c32:	f004 ff81 	bl	3bb38 <printk>
   36c36:	f240 21b5 	movw	r1, #693	; 0x2b5
   36c3a:	4648      	mov	r0, r9
   36c3c:	f005 f9d0 	bl	3bfe0 <assert_post_action>
   36c40:	e7b2      	b.n	36ba8 <k_work_queue_start+0x14>
	__ASSERT_NO_MSG(stack);
   36c42:	f8df 9048 	ldr.w	r9, [pc, #72]	; 36c8c <k_work_queue_start+0xf8>
   36c46:	f240 22b6 	movw	r2, #694	; 0x2b6
   36c4a:	4649      	mov	r1, r9
   36c4c:	480e      	ldr	r0, [pc, #56]	; (36c88 <k_work_queue_start+0xf4>)
   36c4e:	f004 ff73 	bl	3bb38 <printk>
   36c52:	f240 21b6 	movw	r1, #694	; 0x2b6
   36c56:	4648      	mov	r0, r9
   36c58:	f005 f9c2 	bl	3bfe0 <assert_post_action>
   36c5c:	e7a6      	b.n	36bac <k_work_queue_start+0x18>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   36c5e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 36c8c <k_work_queue_start+0xf8>
   36c62:	f240 22b7 	movw	r2, #695	; 0x2b7
   36c66:	4649      	mov	r1, r9
   36c68:	4807      	ldr	r0, [pc, #28]	; (36c88 <k_work_queue_start+0xf4>)
   36c6a:	f004 ff65 	bl	3bb38 <printk>
   36c6e:	f240 21b7 	movw	r1, #695	; 0x2b7
   36c72:	4648      	mov	r0, r9
   36c74:	f005 f9b4 	bl	3bfe0 <assert_post_action>
   36c78:	e79d      	b.n	36bb6 <k_work_queue_start+0x22>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   36c7a:	2301      	movs	r3, #1
   36c7c:	e7b2      	b.n	36be4 <k_work_queue_start+0x50>
		flags |= K_WORK_QUEUE_NO_YIELD;
   36c7e:	f240 1301 	movw	r3, #257	; 0x101
   36c82:	e7af      	b.n	36be4 <k_work_queue_start+0x50>
   36c84:	000368a5 	.word	0x000368a5
   36c88:	00041c84 	.word	0x00041c84
   36c8c:	00045c14 	.word	0x00045c14

00036c90 <k_work_init_delayable>:
{
   36c90:	b570      	push	{r4, r5, r6, lr}
   36c92:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(dwork != NULL);
   36c94:	4605      	mov	r5, r0
   36c96:	b150      	cbz	r0, 36cae <k_work_init_delayable+0x1e>
	__ASSERT_NO_MSG(handler != NULL);
   36c98:	b1b4      	cbz	r4, 36cc8 <k_work_init_delayable+0x38>
	*dwork = (struct k_work_delayable){
   36c9a:	2230      	movs	r2, #48	; 0x30
   36c9c:	2100      	movs	r1, #0
   36c9e:	4628      	mov	r0, r5
   36ca0:	f009 f94e 	bl	3ff40 <memset>
   36ca4:	606c      	str	r4, [r5, #4]
   36ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
   36caa:	60eb      	str	r3, [r5, #12]
}
   36cac:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   36cae:	4e0d      	ldr	r6, [pc, #52]	; (36ce4 <k_work_init_delayable+0x54>)
   36cb0:	f240 322d 	movw	r2, #813	; 0x32d
   36cb4:	4631      	mov	r1, r6
   36cb6:	480c      	ldr	r0, [pc, #48]	; (36ce8 <k_work_init_delayable+0x58>)
   36cb8:	f004 ff3e 	bl	3bb38 <printk>
   36cbc:	f240 312d 	movw	r1, #813	; 0x32d
   36cc0:	4630      	mov	r0, r6
   36cc2:	f005 f98d 	bl	3bfe0 <assert_post_action>
   36cc6:	e7e7      	b.n	36c98 <k_work_init_delayable+0x8>
	__ASSERT_NO_MSG(handler != NULL);
   36cc8:	4e06      	ldr	r6, [pc, #24]	; (36ce4 <k_work_init_delayable+0x54>)
   36cca:	f240 322e 	movw	r2, #814	; 0x32e
   36cce:	4631      	mov	r1, r6
   36cd0:	4805      	ldr	r0, [pc, #20]	; (36ce8 <k_work_init_delayable+0x58>)
   36cd2:	f004 ff31 	bl	3bb38 <printk>
   36cd6:	f240 312e 	movw	r1, #814	; 0x32e
   36cda:	4630      	mov	r0, r6
   36cdc:	f005 f980 	bl	3bfe0 <assert_post_action>
   36ce0:	e7db      	b.n	36c9a <k_work_init_delayable+0xa>
   36ce2:	bf00      	nop
   36ce4:	00045c14 	.word	0x00045c14
   36ce8:	00041c84 	.word	0x00041c84

00036cec <k_work_delayable_busy_get>:
{
   36cec:	b570      	push	{r4, r5, r6, lr}
   36cee:	4604      	mov	r4, r0
	__asm__ volatile(
   36cf0:	f04f 0320 	mov.w	r3, #32
   36cf4:	f3ef 8611 	mrs	r6, BASEPRI
   36cf8:	f383 8812 	msr	BASEPRI_MAX, r3
   36cfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d00:	4815      	ldr	r0, [pc, #84]	; (36d58 <k_work_delayable_busy_get+0x6c>)
   36d02:	f7ff f911 	bl	35f28 <z_spin_lock_valid>
   36d06:	b180      	cbz	r0, 36d2a <k_work_delayable_busy_get+0x3e>
	z_spin_lock_set_owner(l);
   36d08:	4d13      	ldr	r5, [pc, #76]	; (36d58 <k_work_delayable_busy_get+0x6c>)
   36d0a:	4628      	mov	r0, r5
   36d0c:	f7ff f92c 	bl	35f68 <z_spin_lock_set_owner>
	return *flagp;
   36d10:	68e4      	ldr	r4, [r4, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   36d12:	f004 040f 	and.w	r4, r4, #15
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d16:	4628      	mov	r0, r5
   36d18:	f7ff f916 	bl	35f48 <z_spin_unlock_valid>
   36d1c:	b180      	cbz	r0, 36d40 <k_work_delayable_busy_get+0x54>
	__asm__ volatile(
   36d1e:	f386 8811 	msr	BASEPRI, r6
   36d22:	f3bf 8f6f 	isb	sy
}
   36d26:	4620      	mov	r0, r4
   36d28:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d2a:	4d0c      	ldr	r5, [pc, #48]	; (36d5c <k_work_delayable_busy_get+0x70>)
   36d2c:	2281      	movs	r2, #129	; 0x81
   36d2e:	4629      	mov	r1, r5
   36d30:	480b      	ldr	r0, [pc, #44]	; (36d60 <k_work_delayable_busy_get+0x74>)
   36d32:	f004 ff01 	bl	3bb38 <printk>
   36d36:	2181      	movs	r1, #129	; 0x81
   36d38:	4628      	mov	r0, r5
   36d3a:	f005 f951 	bl	3bfe0 <assert_post_action>
   36d3e:	e7e3      	b.n	36d08 <k_work_delayable_busy_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d40:	4d06      	ldr	r5, [pc, #24]	; (36d5c <k_work_delayable_busy_get+0x70>)
   36d42:	22ac      	movs	r2, #172	; 0xac
   36d44:	4629      	mov	r1, r5
   36d46:	4806      	ldr	r0, [pc, #24]	; (36d60 <k_work_delayable_busy_get+0x74>)
   36d48:	f004 fef6 	bl	3bb38 <printk>
   36d4c:	21ac      	movs	r1, #172	; 0xac
   36d4e:	4628      	mov	r0, r5
   36d50:	f005 f946 	bl	3bfe0 <assert_post_action>
   36d54:	e7e3      	b.n	36d1e <k_work_delayable_busy_get+0x32>
   36d56:	bf00      	nop
   36d58:	20010dac 	.word	0x20010dac
   36d5c:	00042210 	.word	0x00042210
   36d60:	00041c84 	.word	0x00041c84

00036d64 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   36d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36d68:	b082      	sub	sp, #8
   36d6a:	9001      	str	r0, [sp, #4]
   36d6c:	4617      	mov	r7, r2
   36d6e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   36d70:	460c      	mov	r4, r1
   36d72:	b1f9      	cbz	r1, 36db4 <k_work_schedule_for_queue+0x50>
	__asm__ volatile(
   36d74:	f04f 0320 	mov.w	r3, #32
   36d78:	f3ef 8611 	mrs	r6, BASEPRI
   36d7c:	f383 8812 	msr	BASEPRI_MAX, r3
   36d80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36d84:	4821      	ldr	r0, [pc, #132]	; (36e0c <k_work_schedule_for_queue+0xa8>)
   36d86:	f7ff f8cf 	bl	35f28 <z_spin_lock_valid>
   36d8a:	b300      	cbz	r0, 36dce <k_work_schedule_for_queue+0x6a>
	z_spin_lock_set_owner(l);
   36d8c:	481f      	ldr	r0, [pc, #124]	; (36e0c <k_work_schedule_for_queue+0xa8>)
   36d8e:	f7ff f8eb 	bl	35f68 <z_spin_lock_set_owner>
	return *flagp;
   36d92:	68e1      	ldr	r1, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   36d94:	f011 0f0e 	tst.w	r1, #14
   36d98:	d025      	beq.n	36de6 <k_work_schedule_for_queue+0x82>
	int ret = 0;
   36d9a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36d9c:	481b      	ldr	r0, [pc, #108]	; (36e0c <k_work_schedule_for_queue+0xa8>)
   36d9e:	f7ff f8d3 	bl	35f48 <z_spin_unlock_valid>
   36da2:	b340      	cbz	r0, 36df6 <k_work_schedule_for_queue+0x92>
	__asm__ volatile(
   36da4:	f386 8811 	msr	BASEPRI, r6
   36da8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   36dac:	4620      	mov	r0, r4
   36dae:	b002      	add	sp, #8
   36db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   36db4:	4e16      	ldr	r6, [pc, #88]	; (36e10 <k_work_schedule_for_queue+0xac>)
   36db6:	f44f 7269 	mov.w	r2, #932	; 0x3a4
   36dba:	4631      	mov	r1, r6
   36dbc:	4815      	ldr	r0, [pc, #84]	; (36e14 <k_work_schedule_for_queue+0xb0>)
   36dbe:	f004 febb 	bl	3bb38 <printk>
   36dc2:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   36dc6:	4630      	mov	r0, r6
   36dc8:	f005 f90a 	bl	3bfe0 <assert_post_action>
   36dcc:	e7d2      	b.n	36d74 <k_work_schedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36dce:	f8df 8048 	ldr.w	r8, [pc, #72]	; 36e18 <k_work_schedule_for_queue+0xb4>
   36dd2:	2281      	movs	r2, #129	; 0x81
   36dd4:	4641      	mov	r1, r8
   36dd6:	480f      	ldr	r0, [pc, #60]	; (36e14 <k_work_schedule_for_queue+0xb0>)
   36dd8:	f004 feae 	bl	3bb38 <printk>
   36ddc:	2181      	movs	r1, #129	; 0x81
   36dde:	4640      	mov	r0, r8
   36de0:	f005 f8fe 	bl	3bfe0 <assert_post_action>
   36de4:	e7d2      	b.n	36d8c <k_work_schedule_for_queue+0x28>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   36de6:	463a      	mov	r2, r7
   36de8:	462b      	mov	r3, r5
   36dea:	4621      	mov	r1, r4
   36dec:	a801      	add	r0, sp, #4
   36dee:	f7ff fe2d 	bl	36a4c <schedule_for_queue_locked>
   36df2:	4604      	mov	r4, r0
   36df4:	e7d2      	b.n	36d9c <k_work_schedule_for_queue+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36df6:	4d08      	ldr	r5, [pc, #32]	; (36e18 <k_work_schedule_for_queue+0xb4>)
   36df8:	22ac      	movs	r2, #172	; 0xac
   36dfa:	4629      	mov	r1, r5
   36dfc:	4805      	ldr	r0, [pc, #20]	; (36e14 <k_work_schedule_for_queue+0xb0>)
   36dfe:	f004 fe9b 	bl	3bb38 <printk>
   36e02:	21ac      	movs	r1, #172	; 0xac
   36e04:	4628      	mov	r0, r5
   36e06:	f005 f8eb 	bl	3bfe0 <assert_post_action>
   36e0a:	e7cb      	b.n	36da4 <k_work_schedule_for_queue+0x40>
   36e0c:	20010dac 	.word	0x20010dac
   36e10:	00045c14 	.word	0x00045c14
   36e14:	00041c84 	.word	0x00041c84
   36e18:	00042210 	.word	0x00042210

00036e1c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   36e1c:	b508      	push	{r3, lr}
   36e1e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   36e20:	4801      	ldr	r0, [pc, #4]	; (36e28 <k_work_schedule+0xc>)
   36e22:	f7ff ff9f 	bl	36d64 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   36e26:	bd08      	pop	{r3, pc}
   36e28:	2000e740 	.word	0x2000e740

00036e2c <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   36e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36e30:	b082      	sub	sp, #8
   36e32:	9001      	str	r0, [sp, #4]
   36e34:	4616      	mov	r6, r2
   36e36:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   36e38:	460c      	mov	r4, r1
   36e3a:	b341      	cbz	r1, 36e8e <k_work_reschedule_for_queue+0x62>
	__asm__ volatile(
   36e3c:	f04f 0320 	mov.w	r3, #32
   36e40:	f3ef 8711 	mrs	r7, BASEPRI
   36e44:	f383 8812 	msr	BASEPRI_MAX, r3
   36e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36e4c:	4824      	ldr	r0, [pc, #144]	; (36ee0 <k_work_reschedule_for_queue+0xb4>)
   36e4e:	f7ff f86b 	bl	35f28 <z_spin_lock_valid>
   36e52:	b348      	cbz	r0, 36ea8 <k_work_reschedule_for_queue+0x7c>
	z_spin_lock_set_owner(l);
   36e54:	4822      	ldr	r0, [pc, #136]	; (36ee0 <k_work_reschedule_for_queue+0xb4>)
   36e56:	f7ff f887 	bl	35f68 <z_spin_lock_set_owner>
	return (*flagp & BIT(bit)) != 0U;
   36e5a:	68e3      	ldr	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   36e5c:	f023 0208 	bic.w	r2, r3, #8
   36e60:	60e2      	str	r2, [r4, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   36e62:	f013 0f08 	tst.w	r3, #8
   36e66:	d12b      	bne.n	36ec0 <k_work_reschedule_for_queue+0x94>

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   36e68:	4632      	mov	r2, r6
   36e6a:	462b      	mov	r3, r5
   36e6c:	4621      	mov	r1, r4
   36e6e:	a801      	add	r0, sp, #4
   36e70:	f7ff fdec 	bl	36a4c <schedule_for_queue_locked>
   36e74:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36e76:	481a      	ldr	r0, [pc, #104]	; (36ee0 <k_work_reschedule_for_queue+0xb4>)
   36e78:	f7ff f866 	bl	35f48 <z_spin_unlock_valid>
   36e7c:	b328      	cbz	r0, 36eca <k_work_reschedule_for_queue+0x9e>
	__asm__ volatile(
   36e7e:	f387 8811 	msr	BASEPRI, r7
   36e82:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   36e86:	4620      	mov	r0, r4
   36e88:	b002      	add	sp, #8
   36e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   36e8e:	4f15      	ldr	r7, [pc, #84]	; (36ee4 <k_work_reschedule_for_queue+0xb8>)
   36e90:	f44f 7272 	mov.w	r2, #968	; 0x3c8
   36e94:	4639      	mov	r1, r7
   36e96:	4814      	ldr	r0, [pc, #80]	; (36ee8 <k_work_reschedule_for_queue+0xbc>)
   36e98:	f004 fe4e 	bl	3bb38 <printk>
   36e9c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   36ea0:	4638      	mov	r0, r7
   36ea2:	f005 f89d 	bl	3bfe0 <assert_post_action>
   36ea6:	e7c9      	b.n	36e3c <k_work_reschedule_for_queue+0x10>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36ea8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 36eec <k_work_reschedule_for_queue+0xc0>
   36eac:	2281      	movs	r2, #129	; 0x81
   36eae:	4641      	mov	r1, r8
   36eb0:	480d      	ldr	r0, [pc, #52]	; (36ee8 <k_work_reschedule_for_queue+0xbc>)
   36eb2:	f004 fe41 	bl	3bb38 <printk>
   36eb6:	2181      	movs	r1, #129	; 0x81
   36eb8:	4640      	mov	r0, r8
   36eba:	f005 f891 	bl	3bfe0 <assert_post_action>
   36ebe:	e7c9      	b.n	36e54 <k_work_reschedule_for_queue+0x28>
		z_abort_timeout(&dwork->timeout);
   36ec0:	f104 0010 	add.w	r0, r4, #16
   36ec4:	f001 fba0 	bl	38608 <z_abort_timeout>
		ret = true;
   36ec8:	e7ce      	b.n	36e68 <k_work_reschedule_for_queue+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36eca:	4d08      	ldr	r5, [pc, #32]	; (36eec <k_work_reschedule_for_queue+0xc0>)
   36ecc:	22ac      	movs	r2, #172	; 0xac
   36ece:	4629      	mov	r1, r5
   36ed0:	4805      	ldr	r0, [pc, #20]	; (36ee8 <k_work_reschedule_for_queue+0xbc>)
   36ed2:	f004 fe31 	bl	3bb38 <printk>
   36ed6:	21ac      	movs	r1, #172	; 0xac
   36ed8:	4628      	mov	r0, r5
   36eda:	f005 f881 	bl	3bfe0 <assert_post_action>
   36ede:	e7ce      	b.n	36e7e <k_work_reschedule_for_queue+0x52>
   36ee0:	20010dac 	.word	0x20010dac
   36ee4:	00045c14 	.word	0x00045c14
   36ee8:	00041c84 	.word	0x00041c84
   36eec:	00042210 	.word	0x00042210

00036ef0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   36ef0:	b508      	push	{r3, lr}
   36ef2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   36ef4:	4801      	ldr	r0, [pc, #4]	; (36efc <k_work_reschedule+0xc>)
   36ef6:	f7ff ff99 	bl	36e2c <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   36efa:	bd08      	pop	{r3, pc}
   36efc:	2000e740 	.word	0x2000e740

00036f00 <pended_on_thread>:
}
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
   36f00:	b538      	push	{r3, r4, r5, lr}
   36f02:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   36f04:	6883      	ldr	r3, [r0, #8]
   36f06:	b10b      	cbz	r3, 36f0c <pended_on_thread+0xc>

	return thread->base.pended_on;
}
   36f08:	68a0      	ldr	r0, [r4, #8]
   36f0a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(thread->base.pended_on);
   36f0c:	4d06      	ldr	r5, [pc, #24]	; (36f28 <pended_on_thread+0x28>)
   36f0e:	f240 2283 	movw	r2, #643	; 0x283
   36f12:	4629      	mov	r1, r5
   36f14:	4805      	ldr	r0, [pc, #20]	; (36f2c <pended_on_thread+0x2c>)
   36f16:	f004 fe0f 	bl	3bb38 <printk>
   36f1a:	f240 2183 	movw	r1, #643	; 0x283
   36f1e:	4628      	mov	r0, r5
   36f20:	f005 f85e 	bl	3bfe0 <assert_post_action>
   36f24:	e7f0      	b.n	36f08 <pended_on_thread+0x8>
   36f26:	bf00      	nop
   36f28:	00045c38 	.word	0x00045c38
   36f2c:	00041c84 	.word	0x00041c84

00036f30 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   36f30:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   36f32:	f1b3 3fff 	cmp.w	r3, #4294967295
   36f36:	bf08      	it	eq
   36f38:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   36f3c:	d100      	bne.n	36f40 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   36f3e:	bd38      	pop	{r3, r4, r5, pc}
   36f40:	4902      	ldr	r1, [pc, #8]	; (36f4c <add_thread_timeout+0x1c>)
   36f42:	3018      	adds	r0, #24
   36f44:	f001 fa7c 	bl	38440 <z_add_timeout>
   36f48:	e7f9      	b.n	36f3e <add_thread_timeout+0xe>
   36f4a:	bf00      	nop
   36f4c:	00037755 	.word	0x00037755

00036f50 <z_reset_time_slice>:
{
   36f50:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   36f52:	4b08      	ldr	r3, [pc, #32]	; (36f74 <z_reset_time_slice+0x24>)
   36f54:	681b      	ldr	r3, [r3, #0]
   36f56:	b903      	cbnz	r3, 36f5a <z_reset_time_slice+0xa>
}
   36f58:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   36f5a:	f7f3 fc9b 	bl	2a894 <sys_clock_elapsed>
   36f5e:	4603      	mov	r3, r0
   36f60:	4a04      	ldr	r2, [pc, #16]	; (36f74 <z_reset_time_slice+0x24>)
   36f62:	6810      	ldr	r0, [r2, #0]
   36f64:	4403      	add	r3, r0
   36f66:	4a04      	ldr	r2, [pc, #16]	; (36f78 <z_reset_time_slice+0x28>)
   36f68:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   36f6a:	2100      	movs	r1, #0
   36f6c:	f001 fbd4 	bl	38718 <z_set_timeout_expiry>
}
   36f70:	e7f2      	b.n	36f58 <z_reset_time_slice+0x8>
   36f72:	bf00      	nop
   36f74:	20010dc4 	.word	0x20010dc4
   36f78:	20010d7c 	.word	0x20010d7c

00036f7c <k_sched_time_slice_set>:
{
   36f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36f80:	4606      	mov	r6, r0
   36f82:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   36f84:	2400      	movs	r4, #0
	__asm__ volatile(
   36f86:	f04f 0320 	mov.w	r3, #32
   36f8a:	f3ef 8711 	mrs	r7, BASEPRI
   36f8e:	f383 8812 	msr	BASEPRI_MAX, r3
   36f92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36f96:	4824      	ldr	r0, [pc, #144]	; (37028 <k_sched_time_slice_set+0xac>)
   36f98:	f7fe ffc6 	bl	35f28 <z_spin_lock_valid>
   36f9c:	b118      	cbz	r0, 36fa6 <k_sched_time_slice_set+0x2a>
	z_spin_lock_set_owner(l);
   36f9e:	4822      	ldr	r0, [pc, #136]	; (37028 <k_sched_time_slice_set+0xac>)
   36fa0:	f7fe ffe2 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   36fa4:	e018      	b.n	36fd8 <k_sched_time_slice_set+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   36fa6:	4d21      	ldr	r5, [pc, #132]	; (3702c <k_sched_time_slice_set+0xb0>)
   36fa8:	2281      	movs	r2, #129	; 0x81
   36faa:	4629      	mov	r1, r5
   36fac:	4820      	ldr	r0, [pc, #128]	; (37030 <k_sched_time_slice_set+0xb4>)
   36fae:	f004 fdc3 	bl	3bb38 <printk>
   36fb2:	2181      	movs	r1, #129	; 0x81
   36fb4:	4628      	mov	r0, r5
   36fb6:	f005 f813 	bl	3bfe0 <assert_post_action>
   36fba:	e7f0      	b.n	36f9e <k_sched_time_slice_set+0x22>
		slice_max_prio = prio;
   36fbc:	4b1d      	ldr	r3, [pc, #116]	; (37034 <k_sched_time_slice_set+0xb8>)
   36fbe:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   36fc2:	f7ff ffc5 	bl	36f50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   36fc6:	4818      	ldr	r0, [pc, #96]	; (37028 <k_sched_time_slice_set+0xac>)
   36fc8:	f7fe ffbe 	bl	35f48 <z_spin_unlock_valid>
   36fcc:	b1f8      	cbz	r0, 3700e <k_sched_time_slice_set+0x92>
	__asm__ volatile(
   36fce:	f387 8811 	msr	BASEPRI, r7
   36fd2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   36fd6:	2401      	movs	r4, #1
   36fd8:	bb24      	cbnz	r4, 37024 <k_sched_time_slice_set+0xa8>
		_current_cpu->slice_ticks = 0;
   36fda:	2300      	movs	r3, #0
   36fdc:	4a16      	ldr	r2, [pc, #88]	; (37038 <k_sched_time_slice_set+0xbc>)
   36fde:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   36fe0:	0c75      	lsrs	r5, r6, #17
   36fe2:	03f4      	lsls	r4, r6, #15
   36fe4:	f240 30e7 	movw	r0, #999	; 0x3e7
   36fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36fec:	2300      	movs	r3, #0
   36fee:	1820      	adds	r0, r4, r0
   36ff0:	f04f 0100 	mov.w	r1, #0
   36ff4:	eb45 0101 	adc.w	r1, r5, r1
   36ff8:	f7ea f852 	bl	210a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   36ffc:	4b0f      	ldr	r3, [pc, #60]	; (3703c <k_sched_time_slice_set+0xc0>)
   36ffe:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   37000:	2e00      	cmp	r6, #0
   37002:	dddb      	ble.n	36fbc <k_sched_time_slice_set+0x40>
			slice_time = MAX(2, slice_time);
   37004:	2802      	cmp	r0, #2
   37006:	bfb8      	it	lt
   37008:	2002      	movlt	r0, #2
   3700a:	6018      	str	r0, [r3, #0]
   3700c:	e7d6      	b.n	36fbc <k_sched_time_slice_set+0x40>
   3700e:	4c07      	ldr	r4, [pc, #28]	; (3702c <k_sched_time_slice_set+0xb0>)
   37010:	22ac      	movs	r2, #172	; 0xac
   37012:	4621      	mov	r1, r4
   37014:	4806      	ldr	r0, [pc, #24]	; (37030 <k_sched_time_slice_set+0xb4>)
   37016:	f004 fd8f 	bl	3bb38 <printk>
   3701a:	21ac      	movs	r1, #172	; 0xac
   3701c:	4620      	mov	r0, r4
   3701e:	f004 ffdf 	bl	3bfe0 <assert_post_action>
   37022:	e7d4      	b.n	36fce <k_sched_time_slice_set+0x52>
}
   37024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37028:	20010dbc 	.word	0x20010dbc
   3702c:	00042210 	.word	0x00042210
   37030:	00041c84 	.word	0x00041c84
   37034:	20010dc0 	.word	0x20010dc0
   37038:	20010d7c 	.word	0x20010d7c
   3703c:	20010dc4 	.word	0x20010dc4

00037040 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   37040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37042:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   37044:	2500      	movs	r5, #0
	__asm__ volatile(
   37046:	f04f 0320 	mov.w	r3, #32
   3704a:	f3ef 8611 	mrs	r6, BASEPRI
   3704e:	f383 8812 	msr	BASEPRI_MAX, r3
   37052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37056:	481b      	ldr	r0, [pc, #108]	; (370c4 <z_unpend_thread_no_timeout+0x84>)
   37058:	f7fe ff66 	bl	35f28 <z_spin_lock_valid>
   3705c:	b118      	cbz	r0, 37066 <z_unpend_thread_no_timeout+0x26>
	z_spin_lock_set_owner(l);
   3705e:	4819      	ldr	r0, [pc, #100]	; (370c4 <z_unpend_thread_no_timeout+0x84>)
   37060:	f7fe ff82 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   37064:	e019      	b.n	3709a <z_unpend_thread_no_timeout+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37066:	4f18      	ldr	r7, [pc, #96]	; (370c8 <z_unpend_thread_no_timeout+0x88>)
   37068:	2281      	movs	r2, #129	; 0x81
   3706a:	4639      	mov	r1, r7
   3706c:	4817      	ldr	r0, [pc, #92]	; (370cc <z_unpend_thread_no_timeout+0x8c>)
   3706e:	f004 fd63 	bl	3bb38 <printk>
   37072:	2181      	movs	r1, #129	; 0x81
   37074:	4638      	mov	r0, r7
   37076:	f004 ffb3 	bl	3bfe0 <assert_post_action>
   3707a:	e7f0      	b.n	3705e <z_unpend_thread_no_timeout+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3707c:	4d12      	ldr	r5, [pc, #72]	; (370c8 <z_unpend_thread_no_timeout+0x88>)
   3707e:	22ac      	movs	r2, #172	; 0xac
   37080:	4629      	mov	r1, r5
   37082:	4812      	ldr	r0, [pc, #72]	; (370cc <z_unpend_thread_no_timeout+0x8c>)
   37084:	f004 fd58 	bl	3bb38 <printk>
   37088:	21ac      	movs	r1, #172	; 0xac
   3708a:	4628      	mov	r0, r5
   3708c:	f004 ffa8 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   37090:	f386 8811 	msr	BASEPRI, r6
   37094:	f3bf 8f6f 	isb	sy
   37098:	2501      	movs	r5, #1
   3709a:	b98d      	cbnz	r5, 370c0 <z_unpend_thread_no_timeout+0x80>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3709c:	4620      	mov	r0, r4
   3709e:	f7ff ff2f 	bl	36f00 <pended_on_thread>
   370a2:	4621      	mov	r1, r4
   370a4:	f000 f8b2 	bl	3720c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   370a8:	7b63      	ldrb	r3, [r4, #13]
   370aa:	f023 0302 	bic.w	r3, r3, #2
   370ae:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   370b0:	2300      	movs	r3, #0
   370b2:	60a3      	str	r3, [r4, #8]
   370b4:	4803      	ldr	r0, [pc, #12]	; (370c4 <z_unpend_thread_no_timeout+0x84>)
   370b6:	f7fe ff47 	bl	35f48 <z_spin_unlock_valid>
   370ba:	2800      	cmp	r0, #0
   370bc:	d1e8      	bne.n	37090 <z_unpend_thread_no_timeout+0x50>
   370be:	e7dd      	b.n	3707c <z_unpend_thread_no_timeout+0x3c>
		unpend_thread_no_timeout(thread);
	}
}
   370c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   370c2:	bf00      	nop
   370c4:	20010dbc 	.word	0x20010dbc
   370c8:	00042210 	.word	0x00042210
   370cc:	00041c84 	.word	0x00041c84

000370d0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   370d0:	b538      	push	{r3, r4, r5, lr}
	if (resched(key.key) && need_swap()) {
   370d2:	460c      	mov	r4, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   370d4:	b921      	cbnz	r1, 370e0 <z_reschedule+0x10>
   370d6:	f3ef 8305 	mrs	r3, IPSR
   370da:	b913      	cbnz	r3, 370e2 <z_reschedule+0x12>
   370dc:	2101      	movs	r1, #1
   370de:	e000      	b.n	370e2 <z_reschedule+0x12>
   370e0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   370e2:	f011 0f01 	tst.w	r1, #1
   370e6:	d016      	beq.n	37116 <z_reschedule+0x46>
	new_thread = _kernel.ready_q.cache;
   370e8:	4b14      	ldr	r3, [pc, #80]	; (3713c <z_reschedule+0x6c>)
   370ea:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   370ec:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   370ee:	429a      	cmp	r2, r3
   370f0:	d011      	beq.n	37116 <z_reschedule+0x46>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   370f2:	f7fe ff29 	bl	35f48 <z_spin_unlock_valid>
   370f6:	b118      	cbz	r0, 37100 <z_reschedule+0x30>
	ret = arch_swap(key);
   370f8:	4620      	mov	r0, r4
   370fa:	f7f0 fc09 	bl	27910 <arch_swap>
		z_swap(lock, key);
   370fe:	e011      	b.n	37124 <z_reschedule+0x54>
   37100:	4d0f      	ldr	r5, [pc, #60]	; (37140 <z_reschedule+0x70>)
   37102:	22c3      	movs	r2, #195	; 0xc3
   37104:	4629      	mov	r1, r5
   37106:	480f      	ldr	r0, [pc, #60]	; (37144 <z_reschedule+0x74>)
   37108:	f004 fd16 	bl	3bb38 <printk>
   3710c:	21c3      	movs	r1, #195	; 0xc3
   3710e:	4628      	mov	r0, r5
   37110:	f004 ff66 	bl	3bfe0 <assert_post_action>
   37114:	e7f0      	b.n	370f8 <z_reschedule+0x28>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37116:	f7fe ff17 	bl	35f48 <z_spin_unlock_valid>
   3711a:	b120      	cbz	r0, 37126 <z_reschedule+0x56>
   3711c:	f384 8811 	msr	BASEPRI, r4
   37120:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   37124:	bd38      	pop	{r3, r4, r5, pc}
   37126:	4d06      	ldr	r5, [pc, #24]	; (37140 <z_reschedule+0x70>)
   37128:	22ac      	movs	r2, #172	; 0xac
   3712a:	4629      	mov	r1, r5
   3712c:	4805      	ldr	r0, [pc, #20]	; (37144 <z_reschedule+0x74>)
   3712e:	f004 fd03 	bl	3bb38 <printk>
   37132:	21ac      	movs	r1, #172	; 0xac
   37134:	4628      	mov	r0, r5
   37136:	f004 ff53 	bl	3bfe0 <assert_post_action>
   3713a:	e7ef      	b.n	3711c <z_reschedule+0x4c>
   3713c:	20010d7c 	.word	0x20010d7c
   37140:	00042210 	.word	0x00042210
   37144:	00041c84 	.word	0x00041c84

00037148 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   37148:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   3714a:	2400      	movs	r4, #0
	__asm__ volatile(
   3714c:	f04f 0320 	mov.w	r3, #32
   37150:	f3ef 8511 	mrs	r5, BASEPRI
   37154:	f383 8812 	msr	BASEPRI_MAX, r3
   37158:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3715c:	4826      	ldr	r0, [pc, #152]	; (371f8 <k_sched_lock+0xb0>)
   3715e:	f7fe fee3 	bl	35f28 <z_spin_lock_valid>
   37162:	b118      	cbz	r0, 3716c <k_sched_lock+0x24>
	z_spin_lock_set_owner(l);
   37164:	4824      	ldr	r0, [pc, #144]	; (371f8 <k_sched_lock+0xb0>)
   37166:	f7fe feff 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   3716a:	e02f      	b.n	371cc <k_sched_lock+0x84>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3716c:	4e23      	ldr	r6, [pc, #140]	; (371fc <k_sched_lock+0xb4>)
   3716e:	2281      	movs	r2, #129	; 0x81
   37170:	4631      	mov	r1, r6
   37172:	4823      	ldr	r0, [pc, #140]	; (37200 <k_sched_lock+0xb8>)
   37174:	f004 fce0 	bl	3bb38 <printk>
   37178:	2181      	movs	r1, #129	; 0x81
   3717a:	4630      	mov	r0, r6
   3717c:	f004 ff30 	bl	3bfe0 <assert_post_action>
   37180:	e7f0      	b.n	37164 <k_sched_lock+0x1c>
	__ASSERT(!arch_is_in_isr(), "");
   37182:	4c20      	ldr	r4, [pc, #128]	; (37204 <k_sched_lock+0xbc>)
   37184:	22fd      	movs	r2, #253	; 0xfd
   37186:	4621      	mov	r1, r4
   37188:	481d      	ldr	r0, [pc, #116]	; (37200 <k_sched_lock+0xb8>)
   3718a:	f004 fcd5 	bl	3bb38 <printk>
   3718e:	21fd      	movs	r1, #253	; 0xfd
   37190:	4620      	mov	r0, r4
   37192:	f004 ff25 	bl	3bfe0 <assert_post_action>
   37196:	e01e      	b.n	371d6 <k_sched_lock+0x8e>
	__ASSERT(_current->base.sched_locked != 1U, "");
   37198:	4c1a      	ldr	r4, [pc, #104]	; (37204 <k_sched_lock+0xbc>)
   3719a:	22fe      	movs	r2, #254	; 0xfe
   3719c:	4621      	mov	r1, r4
   3719e:	4818      	ldr	r0, [pc, #96]	; (37200 <k_sched_lock+0xb8>)
   371a0:	f004 fcca 	bl	3bb38 <printk>
   371a4:	21fe      	movs	r1, #254	; 0xfe
   371a6:	4620      	mov	r0, r4
   371a8:	f004 ff1a 	bl	3bfe0 <assert_post_action>
   371ac:	e018      	b.n	371e0 <k_sched_lock+0x98>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   371ae:	4c13      	ldr	r4, [pc, #76]	; (371fc <k_sched_lock+0xb4>)
   371b0:	22ac      	movs	r2, #172	; 0xac
   371b2:	4621      	mov	r1, r4
   371b4:	4812      	ldr	r0, [pc, #72]	; (37200 <k_sched_lock+0xb8>)
   371b6:	f004 fcbf 	bl	3bb38 <printk>
   371ba:	21ac      	movs	r1, #172	; 0xac
   371bc:	4620      	mov	r0, r4
   371be:	f004 ff0f 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   371c2:	f385 8811 	msr	BASEPRI, r5
   371c6:	f3bf 8f6f 	isb	sy
   371ca:	2401      	movs	r4, #1
   371cc:	b99c      	cbnz	r4, 371f6 <k_sched_lock+0xae>
   371ce:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   371d2:	2b00      	cmp	r3, #0
   371d4:	d1d5      	bne.n	37182 <k_sched_lock+0x3a>
	__ASSERT(_current->base.sched_locked != 1U, "");
   371d6:	4b0c      	ldr	r3, [pc, #48]	; (37208 <k_sched_lock+0xc0>)
   371d8:	689b      	ldr	r3, [r3, #8]
   371da:	7bdb      	ldrb	r3, [r3, #15]
   371dc:	2b01      	cmp	r3, #1
   371de:	d0db      	beq.n	37198 <k_sched_lock+0x50>
	--_current->base.sched_locked;
   371e0:	4b09      	ldr	r3, [pc, #36]	; (37208 <k_sched_lock+0xc0>)
   371e2:	689a      	ldr	r2, [r3, #8]
   371e4:	7bd3      	ldrb	r3, [r2, #15]
   371e6:	3b01      	subs	r3, #1
   371e8:	73d3      	strb	r3, [r2, #15]
   371ea:	4803      	ldr	r0, [pc, #12]	; (371f8 <k_sched_lock+0xb0>)
   371ec:	f7fe feac 	bl	35f48 <z_spin_unlock_valid>
   371f0:	2800      	cmp	r0, #0
   371f2:	d1e6      	bne.n	371c2 <k_sched_lock+0x7a>
   371f4:	e7db      	b.n	371ae <k_sched_lock+0x66>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   371f6:	bd70      	pop	{r4, r5, r6, pc}
   371f8:	20010dbc 	.word	0x20010dbc
   371fc:	00042210 	.word	0x00042210
   37200:	00041c84 	.word	0x00041c84
   37204:	00045bc8 	.word	0x00045bc8
   37208:	20010d7c 	.word	0x20010d7c

0003720c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   3720c:	b538      	push	{r3, r4, r5, lr}
   3720e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37210:	4b0b      	ldr	r3, [pc, #44]	; (37240 <z_priq_dumb_remove+0x34>)
   37212:	4299      	cmp	r1, r3
   37214:	d007      	beq.n	37226 <z_priq_dumb_remove+0x1a>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   37216:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   37218:	6823      	ldr	r3, [r4, #0]

	prev->next = next;
   3721a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3721c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3721e:	2300      	movs	r3, #0
   37220:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   37222:	6063      	str	r3, [r4, #4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   37224:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37226:	4d07      	ldr	r5, [pc, #28]	; (37244 <z_priq_dumb_remove+0x38>)
   37228:	f240 32e7 	movw	r2, #999	; 0x3e7
   3722c:	4629      	mov	r1, r5
   3722e:	4806      	ldr	r0, [pc, #24]	; (37248 <z_priq_dumb_remove+0x3c>)
   37230:	f004 fc82 	bl	3bb38 <printk>
   37234:	f240 31e7 	movw	r1, #999	; 0x3e7
   37238:	4628      	mov	r0, r5
   3723a:	f004 fed1 	bl	3bfe0 <assert_post_action>
   3723e:	e7ea      	b.n	37216 <z_priq_dumb_remove+0xa>
   37240:	2000e638 	.word	0x2000e638
   37244:	00045c38 	.word	0x00045c38
   37248:	00041c84 	.word	0x00041c84

0003724c <z_unpend_thread>:
{
   3724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3724e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   37250:	2500      	movs	r5, #0
	__asm__ volatile(
   37252:	f04f 0320 	mov.w	r3, #32
   37256:	f3ef 8611 	mrs	r6, BASEPRI
   3725a:	f383 8812 	msr	BASEPRI_MAX, r3
   3725e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37262:	481d      	ldr	r0, [pc, #116]	; (372d8 <z_unpend_thread+0x8c>)
   37264:	f7fe fe60 	bl	35f28 <z_spin_lock_valid>
   37268:	b118      	cbz	r0, 37272 <z_unpend_thread+0x26>
	z_spin_lock_set_owner(l);
   3726a:	481b      	ldr	r0, [pc, #108]	; (372d8 <z_unpend_thread+0x8c>)
   3726c:	f7fe fe7c 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   37270:	e019      	b.n	372a6 <z_unpend_thread+0x5a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37272:	4f1a      	ldr	r7, [pc, #104]	; (372dc <z_unpend_thread+0x90>)
   37274:	2281      	movs	r2, #129	; 0x81
   37276:	4639      	mov	r1, r7
   37278:	4819      	ldr	r0, [pc, #100]	; (372e0 <z_unpend_thread+0x94>)
   3727a:	f004 fc5d 	bl	3bb38 <printk>
   3727e:	2181      	movs	r1, #129	; 0x81
   37280:	4638      	mov	r0, r7
   37282:	f004 fead 	bl	3bfe0 <assert_post_action>
   37286:	e7f0      	b.n	3726a <z_unpend_thread+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37288:	4d14      	ldr	r5, [pc, #80]	; (372dc <z_unpend_thread+0x90>)
   3728a:	22ac      	movs	r2, #172	; 0xac
   3728c:	4629      	mov	r1, r5
   3728e:	4814      	ldr	r0, [pc, #80]	; (372e0 <z_unpend_thread+0x94>)
   37290:	f004 fc52 	bl	3bb38 <printk>
   37294:	21ac      	movs	r1, #172	; 0xac
   37296:	4628      	mov	r0, r5
   37298:	f004 fea2 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   3729c:	f386 8811 	msr	BASEPRI, r6
   372a0:	f3bf 8f6f 	isb	sy
   372a4:	2501      	movs	r5, #1
   372a6:	b98d      	cbnz	r5, 372cc <z_unpend_thread+0x80>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   372a8:	4620      	mov	r0, r4
   372aa:	f7ff fe29 	bl	36f00 <pended_on_thread>
   372ae:	4621      	mov	r1, r4
   372b0:	f7ff ffac 	bl	3720c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   372b4:	7b63      	ldrb	r3, [r4, #13]
   372b6:	f023 0302 	bic.w	r3, r3, #2
   372ba:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   372bc:	2300      	movs	r3, #0
   372be:	60a3      	str	r3, [r4, #8]
   372c0:	4805      	ldr	r0, [pc, #20]	; (372d8 <z_unpend_thread+0x8c>)
   372c2:	f7fe fe41 	bl	35f48 <z_spin_unlock_valid>
   372c6:	2800      	cmp	r0, #0
   372c8:	d1e8      	bne.n	3729c <z_unpend_thread+0x50>
   372ca:	e7dd      	b.n	37288 <z_unpend_thread+0x3c>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   372cc:	f104 0018 	add.w	r0, r4, #24
   372d0:	f001 f99a 	bl	38608 <z_abort_timeout>
}
   372d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   372d6:	bf00      	nop
   372d8:	20010dbc 	.word	0x20010dbc
   372dc:	00042210 	.word	0x00042210
   372e0:	00041c84 	.word	0x00041c84

000372e4 <update_cache>:
{
   372e4:	b538      	push	{r3, r4, r5, lr}
   372e6:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   372e8:	4816      	ldr	r0, [pc, #88]	; (37344 <update_cache+0x60>)
   372ea:	f008 fcda 	bl	3fca2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   372ee:	4605      	mov	r5, r0
   372f0:	b188      	cbz	r0, 37316 <update_cache+0x32>
	if (preempt_ok != 0) {
   372f2:	b9f4      	cbnz	r4, 37332 <update_cache+0x4e>
	__ASSERT(_current != NULL, "");
   372f4:	4b14      	ldr	r3, [pc, #80]	; (37348 <update_cache+0x64>)
   372f6:	689b      	ldr	r3, [r3, #8]
   372f8:	b183      	cbz	r3, 3731c <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   372fa:	4b13      	ldr	r3, [pc, #76]	; (37348 <update_cache+0x64>)
   372fc:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   372fe:	7b5a      	ldrb	r2, [r3, #13]
   37300:	f012 0f1f 	tst.w	r2, #31
   37304:	d115      	bne.n	37332 <update_cache+0x4e>
	return node->next != NULL;
   37306:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   37308:	b99a      	cbnz	r2, 37332 <update_cache+0x4e>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   3730a:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   3730c:	2a7f      	cmp	r2, #127	; 0x7f
   3730e:	d910      	bls.n	37332 <update_cache+0x4e>
		_kernel.ready_q.cache = _current;
   37310:	4a0d      	ldr	r2, [pc, #52]	; (37348 <update_cache+0x64>)
   37312:	61d3      	str	r3, [r2, #28]
   37314:	e015      	b.n	37342 <update_cache+0x5e>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   37316:	4b0c      	ldr	r3, [pc, #48]	; (37348 <update_cache+0x64>)
   37318:	68dd      	ldr	r5, [r3, #12]
   3731a:	e7ea      	b.n	372f2 <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   3731c:	4c0b      	ldr	r4, [pc, #44]	; (3734c <update_cache+0x68>)
   3731e:	2289      	movs	r2, #137	; 0x89
   37320:	4621      	mov	r1, r4
   37322:	480b      	ldr	r0, [pc, #44]	; (37350 <update_cache+0x6c>)
   37324:	f004 fc08 	bl	3bb38 <printk>
   37328:	2189      	movs	r1, #137	; 0x89
   3732a:	4620      	mov	r0, r4
   3732c:	f004 fe58 	bl	3bfe0 <assert_post_action>
   37330:	e7e3      	b.n	372fa <update_cache+0x16>
		if (thread != _current) {
   37332:	4b05      	ldr	r3, [pc, #20]	; (37348 <update_cache+0x64>)
   37334:	689b      	ldr	r3, [r3, #8]
   37336:	42ab      	cmp	r3, r5
   37338:	d001      	beq.n	3733e <update_cache+0x5a>
			z_reset_time_slice();
   3733a:	f7ff fe09 	bl	36f50 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3733e:	4b02      	ldr	r3, [pc, #8]	; (37348 <update_cache+0x64>)
   37340:	61dd      	str	r5, [r3, #28]
}
   37342:	bd38      	pop	{r3, r4, r5, pc}
   37344:	20010d9c 	.word	0x20010d9c
   37348:	20010d7c 	.word	0x20010d7c
   3734c:	00045c38 	.word	0x00045c38
   37350:	00041c84 	.word	0x00041c84

00037354 <move_thread_to_end_of_prio_q>:
{
   37354:	b538      	push	{r3, r4, r5, lr}
   37356:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   37358:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   3735a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   3735e:	2b00      	cmp	r3, #0
   37360:	db2b      	blt.n	373ba <move_thread_to_end_of_prio_q+0x66>
	thread->base.thread_state |= _THREAD_QUEUED;
   37362:	7b6b      	ldrb	r3, [r5, #13]
   37364:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37368:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3736a:	4b21      	ldr	r3, [pc, #132]	; (373f0 <move_thread_to_end_of_prio_q+0x9c>)
   3736c:	429d      	cmp	r5, r3
   3736e:	d02c      	beq.n	373ca <move_thread_to_end_of_prio_q+0x76>
	return list->head == list;
   37370:	4b20      	ldr	r3, [pc, #128]	; (373f4 <move_thread_to_end_of_prio_q+0xa0>)
   37372:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37376:	429c      	cmp	r4, r3
   37378:	d038      	beq.n	373ec <move_thread_to_end_of_prio_q+0x98>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3737a:	b16c      	cbz	r4, 37398 <move_thread_to_end_of_prio_q+0x44>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3737c:	4621      	mov	r1, r4
   3737e:	4628      	mov	r0, r5
   37380:	f008 fc70 	bl	3fc64 <z_sched_prio_cmp>
   37384:	2800      	cmp	r0, #0
   37386:	dc2b      	bgt.n	373e0 <move_thread_to_end_of_prio_q+0x8c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   37388:	b134      	cbz	r4, 37398 <move_thread_to_end_of_prio_q+0x44>
	return (node == list->tail) ? NULL : node->next;
   3738a:	4b1a      	ldr	r3, [pc, #104]	; (373f4 <move_thread_to_end_of_prio_q+0xa0>)
   3738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3738e:	429c      	cmp	r4, r3
   37390:	d002      	beq.n	37398 <move_thread_to_end_of_prio_q+0x44>
   37392:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37394:	2c00      	cmp	r4, #0
   37396:	d1f0      	bne.n	3737a <move_thread_to_end_of_prio_q+0x26>
	sys_dnode_t *const tail = list->tail;
   37398:	4b16      	ldr	r3, [pc, #88]	; (373f4 <move_thread_to_end_of_prio_q+0xa0>)
   3739a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   3739c:	f103 0120 	add.w	r1, r3, #32
   373a0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   373a2:	606a      	str	r2, [r5, #4]
	tail->next = node;
   373a4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   373a6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   373a8:	4b12      	ldr	r3, [pc, #72]	; (373f4 <move_thread_to_end_of_prio_q+0xa0>)
   373aa:	6898      	ldr	r0, [r3, #8]
   373ac:	42a8      	cmp	r0, r5
   373ae:	bf14      	ite	ne
   373b0:	2000      	movne	r0, #0
   373b2:	2001      	moveq	r0, #1
   373b4:	f7ff ff96 	bl	372e4 <update_cache>
}
   373b8:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   373ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   373be:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   373c0:	4601      	mov	r1, r0
   373c2:	480d      	ldr	r0, [pc, #52]	; (373f8 <move_thread_to_end_of_prio_q+0xa4>)
   373c4:	f7ff ff22 	bl	3720c <z_priq_dumb_remove>
}
   373c8:	e7cb      	b.n	37362 <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   373ca:	4c0c      	ldr	r4, [pc, #48]	; (373fc <move_thread_to_end_of_prio_q+0xa8>)
   373cc:	22ba      	movs	r2, #186	; 0xba
   373ce:	4621      	mov	r1, r4
   373d0:	480b      	ldr	r0, [pc, #44]	; (37400 <move_thread_to_end_of_prio_q+0xac>)
   373d2:	f004 fbb1 	bl	3bb38 <printk>
   373d6:	21ba      	movs	r1, #186	; 0xba
   373d8:	4620      	mov	r0, r4
   373da:	f004 fe01 	bl	3bfe0 <assert_post_action>
   373de:	e7c7      	b.n	37370 <move_thread_to_end_of_prio_q+0x1c>
	sys_dnode_t *const prev = successor->prev;
   373e0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   373e2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   373e4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   373e6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   373e8:	6065      	str	r5, [r4, #4]
}
   373ea:	e7dd      	b.n	373a8 <move_thread_to_end_of_prio_q+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   373ec:	2400      	movs	r4, #0
   373ee:	e7c4      	b.n	3737a <move_thread_to_end_of_prio_q+0x26>
   373f0:	2000e638 	.word	0x2000e638
   373f4:	20010d7c 	.word	0x20010d7c
   373f8:	20010d9c 	.word	0x20010d9c
   373fc:	00045c38 	.word	0x00045c38
   37400:	00041c84 	.word	0x00041c84

00037404 <z_time_slice>:
{
   37404:	b570      	push	{r4, r5, r6, lr}
   37406:	4604      	mov	r4, r0
	__asm__ volatile(
   37408:	f04f 0320 	mov.w	r3, #32
   3740c:	f3ef 8511 	mrs	r5, BASEPRI
   37410:	f383 8812 	msr	BASEPRI_MAX, r3
   37414:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37418:	4834      	ldr	r0, [pc, #208]	; (374ec <z_time_slice+0xe8>)
   3741a:	f7fe fd85 	bl	35f28 <z_spin_lock_valid>
   3741e:	b338      	cbz	r0, 37470 <z_time_slice+0x6c>
	z_spin_lock_set_owner(l);
   37420:	4832      	ldr	r0, [pc, #200]	; (374ec <z_time_slice+0xe8>)
   37422:	f7fe fda1 	bl	35f68 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   37426:	4b32      	ldr	r3, [pc, #200]	; (374f0 <z_time_slice+0xec>)
   37428:	689b      	ldr	r3, [r3, #8]
   3742a:	4a32      	ldr	r2, [pc, #200]	; (374f4 <z_time_slice+0xf0>)
   3742c:	6812      	ldr	r2, [r2, #0]
   3742e:	4293      	cmp	r3, r2
   37430:	d029      	beq.n	37486 <z_time_slice+0x82>
	pending_current = NULL;
   37432:	4a30      	ldr	r2, [pc, #192]	; (374f4 <z_time_slice+0xf0>)
   37434:	2100      	movs	r1, #0
   37436:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   37438:	4a2f      	ldr	r2, [pc, #188]	; (374f8 <z_time_slice+0xf4>)
   3743a:	6812      	ldr	r2, [r2, #0]
   3743c:	2a00      	cmp	r2, #0
   3743e:	d03e      	beq.n	374be <z_time_slice+0xba>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   37440:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   37442:	2a7f      	cmp	r2, #127	; 0x7f
   37444:	d83b      	bhi.n	374be <z_time_slice+0xba>
	uint8_t state = thread->base.thread_state;
   37446:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   37448:	f012 0f1f 	tst.w	r2, #31
   3744c:	d137      	bne.n	374be <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3744e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   37452:	4a2a      	ldr	r2, [pc, #168]	; (374fc <z_time_slice+0xf8>)
   37454:	6812      	ldr	r2, [r2, #0]
   37456:	4291      	cmp	r1, r2
   37458:	db31      	blt.n	374be <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
   3745a:	4a29      	ldr	r2, [pc, #164]	; (37500 <z_time_slice+0xfc>)
   3745c:	4293      	cmp	r3, r2
   3745e:	d02e      	beq.n	374be <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
   37460:	4a23      	ldr	r2, [pc, #140]	; (374f0 <z_time_slice+0xec>)
   37462:	6910      	ldr	r0, [r2, #16]
   37464:	42a0      	cmp	r0, r4
   37466:	dd24      	ble.n	374b2 <z_time_slice+0xae>
			_current_cpu->slice_ticks -= ticks;
   37468:	1b00      	subs	r0, r0, r4
   3746a:	4b21      	ldr	r3, [pc, #132]	; (374f0 <z_time_slice+0xec>)
   3746c:	6118      	str	r0, [r3, #16]
   3746e:	e029      	b.n	374c4 <z_time_slice+0xc0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37470:	4e24      	ldr	r6, [pc, #144]	; (37504 <z_time_slice+0x100>)
   37472:	2281      	movs	r2, #129	; 0x81
   37474:	4631      	mov	r1, r6
   37476:	4824      	ldr	r0, [pc, #144]	; (37508 <z_time_slice+0x104>)
   37478:	f004 fb5e 	bl	3bb38 <printk>
   3747c:	2181      	movs	r1, #129	; 0x81
   3747e:	4630      	mov	r0, r6
   37480:	f004 fdae 	bl	3bfe0 <assert_post_action>
   37484:	e7cc      	b.n	37420 <z_time_slice+0x1c>
		z_reset_time_slice();
   37486:	f7ff fd63 	bl	36f50 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3748a:	4818      	ldr	r0, [pc, #96]	; (374ec <z_time_slice+0xe8>)
   3748c:	f7fe fd5c 	bl	35f48 <z_spin_unlock_valid>
   37490:	b120      	cbz	r0, 3749c <z_time_slice+0x98>
	__asm__ volatile(
   37492:	f385 8811 	msr	BASEPRI, r5
   37496:	f3bf 8f6f 	isb	sy
		return;
   3749a:	e01b      	b.n	374d4 <z_time_slice+0xd0>
   3749c:	4c19      	ldr	r4, [pc, #100]	; (37504 <z_time_slice+0x100>)
   3749e:	22ac      	movs	r2, #172	; 0xac
   374a0:	4621      	mov	r1, r4
   374a2:	4819      	ldr	r0, [pc, #100]	; (37508 <z_time_slice+0x104>)
   374a4:	f004 fb48 	bl	3bb38 <printk>
   374a8:	21ac      	movs	r1, #172	; 0xac
   374aa:	4620      	mov	r0, r4
   374ac:	f004 fd98 	bl	3bfe0 <assert_post_action>
   374b0:	e7ef      	b.n	37492 <z_time_slice+0x8e>
			move_thread_to_end_of_prio_q(_current);
   374b2:	4618      	mov	r0, r3
   374b4:	f7ff ff4e 	bl	37354 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   374b8:	f7ff fd4a 	bl	36f50 <z_reset_time_slice>
   374bc:	e002      	b.n	374c4 <z_time_slice+0xc0>
		_current_cpu->slice_ticks = 0;
   374be:	4b0c      	ldr	r3, [pc, #48]	; (374f0 <z_time_slice+0xec>)
   374c0:	2200      	movs	r2, #0
   374c2:	611a      	str	r2, [r3, #16]
   374c4:	4809      	ldr	r0, [pc, #36]	; (374ec <z_time_slice+0xe8>)
   374c6:	f7fe fd3f 	bl	35f48 <z_spin_unlock_valid>
   374ca:	b120      	cbz	r0, 374d6 <z_time_slice+0xd2>
   374cc:	f385 8811 	msr	BASEPRI, r5
   374d0:	f3bf 8f6f 	isb	sy
}
   374d4:	bd70      	pop	{r4, r5, r6, pc}
   374d6:	4c0b      	ldr	r4, [pc, #44]	; (37504 <z_time_slice+0x100>)
   374d8:	22ac      	movs	r2, #172	; 0xac
   374da:	4621      	mov	r1, r4
   374dc:	480a      	ldr	r0, [pc, #40]	; (37508 <z_time_slice+0x104>)
   374de:	f004 fb2b 	bl	3bb38 <printk>
   374e2:	21ac      	movs	r1, #172	; 0xac
   374e4:	4620      	mov	r0, r4
   374e6:	f004 fd7b 	bl	3bfe0 <assert_post_action>
   374ea:	e7ef      	b.n	374cc <z_time_slice+0xc8>
   374ec:	20010dbc 	.word	0x20010dbc
   374f0:	20010d7c 	.word	0x20010d7c
   374f4:	20010db8 	.word	0x20010db8
   374f8:	20010dc4 	.word	0x20010dc4
   374fc:	20010dc0 	.word	0x20010dc0
   37500:	2000e638 	.word	0x2000e638
   37504:	00042210 	.word	0x00042210
   37508:	00041c84 	.word	0x00041c84

0003750c <ready_thread>:
{
   3750c:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   3750e:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   37510:	f990 200d 	ldrsb.w	r2, [r0, #13]
   37514:	2a00      	cmp	r2, #0
   37516:	db30      	blt.n	3757a <ready_thread+0x6e>
   37518:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3751a:	f013 0f1f 	tst.w	r3, #31
   3751e:	d105      	bne.n	3752c <ready_thread+0x20>
	return node->next != NULL;
   37520:	6982      	ldr	r2, [r0, #24]
   37522:	b10a      	cbz	r2, 37528 <ready_thread+0x1c>
   37524:	2200      	movs	r2, #0
   37526:	e002      	b.n	3752e <ready_thread+0x22>
   37528:	2201      	movs	r2, #1
   3752a:	e000      	b.n	3752e <ready_thread+0x22>
   3752c:	2200      	movs	r2, #0
   3752e:	b322      	cbz	r2, 3757a <ready_thread+0x6e>
	thread->base.thread_state |= _THREAD_QUEUED;
   37530:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37534:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37536:	4b1b      	ldr	r3, [pc, #108]	; (375a4 <ready_thread+0x98>)
   37538:	429c      	cmp	r4, r3
   3753a:	d01f      	beq.n	3757c <ready_thread+0x70>
	return list->head == list;
   3753c:	4b1a      	ldr	r3, [pc, #104]	; (375a8 <ready_thread+0x9c>)
   3753e:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37542:	429d      	cmp	r5, r3
   37544:	d02b      	beq.n	3759e <ready_thread+0x92>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37546:	b16d      	cbz	r5, 37564 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   37548:	4629      	mov	r1, r5
   3754a:	4620      	mov	r0, r4
   3754c:	f008 fb8a 	bl	3fc64 <z_sched_prio_cmp>
   37550:	2800      	cmp	r0, #0
   37552:	dc1e      	bgt.n	37592 <ready_thread+0x86>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   37554:	b135      	cbz	r5, 37564 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   37556:	4b14      	ldr	r3, [pc, #80]	; (375a8 <ready_thread+0x9c>)
   37558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3755a:	429d      	cmp	r5, r3
   3755c:	d002      	beq.n	37564 <ready_thread+0x58>
   3755e:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37560:	2d00      	cmp	r5, #0
   37562:	d1f0      	bne.n	37546 <ready_thread+0x3a>
	sys_dnode_t *const tail = list->tail;
   37564:	4b10      	ldr	r3, [pc, #64]	; (375a8 <ready_thread+0x9c>)
   37566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   37568:	f103 0120 	add.w	r1, r3, #32
   3756c:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   3756e:	6062      	str	r2, [r4, #4]
	tail->next = node;
   37570:	6014      	str	r4, [r2, #0]
	list->tail = node;
   37572:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   37574:	2000      	movs	r0, #0
   37576:	f7ff feb5 	bl	372e4 <update_cache>
}
   3757a:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3757c:	4d0b      	ldr	r5, [pc, #44]	; (375ac <ready_thread+0xa0>)
   3757e:	22ba      	movs	r2, #186	; 0xba
   37580:	4629      	mov	r1, r5
   37582:	480b      	ldr	r0, [pc, #44]	; (375b0 <ready_thread+0xa4>)
   37584:	f004 fad8 	bl	3bb38 <printk>
   37588:	21ba      	movs	r1, #186	; 0xba
   3758a:	4628      	mov	r0, r5
   3758c:	f004 fd28 	bl	3bfe0 <assert_post_action>
   37590:	e7d4      	b.n	3753c <ready_thread+0x30>
	sys_dnode_t *const prev = successor->prev;
   37592:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   37594:	6063      	str	r3, [r4, #4]
	node->next = successor;
   37596:	6025      	str	r5, [r4, #0]
	prev->next = node;
   37598:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   3759a:	606c      	str	r4, [r5, #4]
}
   3759c:	e7ea      	b.n	37574 <ready_thread+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3759e:	2500      	movs	r5, #0
   375a0:	e7d1      	b.n	37546 <ready_thread+0x3a>
   375a2:	bf00      	nop
   375a4:	2000e638 	.word	0x2000e638
   375a8:	20010d7c 	.word	0x20010d7c
   375ac:	00045c38 	.word	0x00045c38
   375b0:	00041c84 	.word	0x00041c84

000375b4 <z_ready_thread>:
{
   375b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   375b6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   375b8:	2400      	movs	r4, #0
	__asm__ volatile(
   375ba:	f04f 0320 	mov.w	r3, #32
   375be:	f3ef 8611 	mrs	r6, BASEPRI
   375c2:	f383 8812 	msr	BASEPRI_MAX, r3
   375c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   375ca:	4819      	ldr	r0, [pc, #100]	; (37630 <z_ready_thread+0x7c>)
   375cc:	f7fe fcac 	bl	35f28 <z_spin_lock_valid>
   375d0:	b118      	cbz	r0, 375da <z_ready_thread+0x26>
	z_spin_lock_set_owner(l);
   375d2:	4817      	ldr	r0, [pc, #92]	; (37630 <z_ready_thread+0x7c>)
   375d4:	f7fe fcc8 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   375d8:	e01d      	b.n	37616 <z_ready_thread+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   375da:	4f16      	ldr	r7, [pc, #88]	; (37634 <z_ready_thread+0x80>)
   375dc:	2281      	movs	r2, #129	; 0x81
   375de:	4639      	mov	r1, r7
   375e0:	4815      	ldr	r0, [pc, #84]	; (37638 <z_ready_thread+0x84>)
   375e2:	f004 faa9 	bl	3bb38 <printk>
   375e6:	2181      	movs	r1, #129	; 0x81
   375e8:	4638      	mov	r0, r7
   375ea:	f004 fcf9 	bl	3bfe0 <assert_post_action>
   375ee:	e7f0      	b.n	375d2 <z_ready_thread+0x1e>
			ready_thread(thread);
   375f0:	4628      	mov	r0, r5
   375f2:	f7ff ff8b 	bl	3750c <ready_thread>
   375f6:	e014      	b.n	37622 <z_ready_thread+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   375f8:	4c0e      	ldr	r4, [pc, #56]	; (37634 <z_ready_thread+0x80>)
   375fa:	22ac      	movs	r2, #172	; 0xac
   375fc:	4621      	mov	r1, r4
   375fe:	480e      	ldr	r0, [pc, #56]	; (37638 <z_ready_thread+0x84>)
   37600:	f004 fa9a 	bl	3bb38 <printk>
   37604:	21ac      	movs	r1, #172	; 0xac
   37606:	4620      	mov	r0, r4
   37608:	f004 fcea 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   3760c:	f386 8811 	msr	BASEPRI, r6
   37610:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   37614:	2401      	movs	r4, #1
   37616:	b954      	cbnz	r4, 3762e <z_ready_thread+0x7a>
		if (!thread_active_elsewhere(thread)) {
   37618:	4628      	mov	r0, r5
   3761a:	f008 fb21 	bl	3fc60 <thread_active_elsewhere>
   3761e:	2800      	cmp	r0, #0
   37620:	d0e6      	beq.n	375f0 <z_ready_thread+0x3c>
   37622:	4803      	ldr	r0, [pc, #12]	; (37630 <z_ready_thread+0x7c>)
   37624:	f7fe fc90 	bl	35f48 <z_spin_unlock_valid>
   37628:	2800      	cmp	r0, #0
   3762a:	d1ef      	bne.n	3760c <z_ready_thread+0x58>
   3762c:	e7e4      	b.n	375f8 <z_ready_thread+0x44>
}
   3762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37630:	20010dbc 	.word	0x20010dbc
   37634:	00042210 	.word	0x00042210
   37638:	00041c84 	.word	0x00041c84

0003763c <z_sched_start>:
{
   3763c:	b570      	push	{r4, r5, r6, lr}
   3763e:	4604      	mov	r4, r0
	__asm__ volatile(
   37640:	f04f 0320 	mov.w	r3, #32
   37644:	f3ef 8511 	mrs	r5, BASEPRI
   37648:	f383 8812 	msr	BASEPRI_MAX, r3
   3764c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37650:	481a      	ldr	r0, [pc, #104]	; (376bc <z_sched_start+0x80>)
   37652:	f7fe fc69 	bl	35f28 <z_spin_lock_valid>
   37656:	b188      	cbz	r0, 3767c <z_sched_start+0x40>
	z_spin_lock_set_owner(l);
   37658:	4818      	ldr	r0, [pc, #96]	; (376bc <z_sched_start+0x80>)
   3765a:	f7fe fc85 	bl	35f68 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   3765e:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   37660:	f013 0f04 	tst.w	r3, #4
   37664:	d015      	beq.n	37692 <z_sched_start+0x56>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   37666:	f023 0304 	bic.w	r3, r3, #4
   3766a:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   3766c:	4620      	mov	r0, r4
   3766e:	f7ff ff4d 	bl	3750c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   37672:	4629      	mov	r1, r5
   37674:	4811      	ldr	r0, [pc, #68]	; (376bc <z_sched_start+0x80>)
   37676:	f7ff fd2b 	bl	370d0 <z_reschedule>
}
   3767a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3767c:	4e10      	ldr	r6, [pc, #64]	; (376c0 <z_sched_start+0x84>)
   3767e:	2281      	movs	r2, #129	; 0x81
   37680:	4631      	mov	r1, r6
   37682:	4810      	ldr	r0, [pc, #64]	; (376c4 <z_sched_start+0x88>)
   37684:	f004 fa58 	bl	3bb38 <printk>
   37688:	2181      	movs	r1, #129	; 0x81
   3768a:	4630      	mov	r0, r6
   3768c:	f004 fca8 	bl	3bfe0 <assert_post_action>
   37690:	e7e2      	b.n	37658 <z_sched_start+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37692:	480a      	ldr	r0, [pc, #40]	; (376bc <z_sched_start+0x80>)
   37694:	f7fe fc58 	bl	35f48 <z_spin_unlock_valid>
   37698:	b120      	cbz	r0, 376a4 <z_sched_start+0x68>
	__asm__ volatile(
   3769a:	f385 8811 	msr	BASEPRI, r5
   3769e:	f3bf 8f6f 	isb	sy
		return;
   376a2:	e7ea      	b.n	3767a <z_sched_start+0x3e>
   376a4:	4c06      	ldr	r4, [pc, #24]	; (376c0 <z_sched_start+0x84>)
   376a6:	22ac      	movs	r2, #172	; 0xac
   376a8:	4621      	mov	r1, r4
   376aa:	4806      	ldr	r0, [pc, #24]	; (376c4 <z_sched_start+0x88>)
   376ac:	f004 fa44 	bl	3bb38 <printk>
   376b0:	21ac      	movs	r1, #172	; 0xac
   376b2:	4620      	mov	r0, r4
   376b4:	f004 fc94 	bl	3bfe0 <assert_post_action>
   376b8:	e7ef      	b.n	3769a <z_sched_start+0x5e>
   376ba:	bf00      	nop
   376bc:	20010dbc 	.word	0x20010dbc
   376c0:	00042210 	.word	0x00042210
   376c4:	00041c84 	.word	0x00041c84

000376c8 <z_impl_k_thread_resume>:
{
   376c8:	b570      	push	{r4, r5, r6, lr}
   376ca:	4604      	mov	r4, r0
	__asm__ volatile(
   376cc:	f04f 0320 	mov.w	r3, #32
   376d0:	f3ef 8511 	mrs	r5, BASEPRI
   376d4:	f383 8812 	msr	BASEPRI_MAX, r3
   376d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   376dc:	481a      	ldr	r0, [pc, #104]	; (37748 <z_impl_k_thread_resume+0x80>)
   376de:	f7fe fc23 	bl	35f28 <z_spin_lock_valid>
   376e2:	b188      	cbz	r0, 37708 <z_impl_k_thread_resume+0x40>
	z_spin_lock_set_owner(l);
   376e4:	4818      	ldr	r0, [pc, #96]	; (37748 <z_impl_k_thread_resume+0x80>)
   376e6:	f7fe fc3f 	bl	35f68 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
   376ea:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
   376ec:	f013 0f10 	tst.w	r3, #16
   376f0:	d015      	beq.n	3771e <z_impl_k_thread_resume+0x56>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   376f2:	f023 0310 	bic.w	r3, r3, #16
   376f6:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   376f8:	4620      	mov	r0, r4
   376fa:	f7ff ff07 	bl	3750c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   376fe:	4629      	mov	r1, r5
   37700:	4811      	ldr	r0, [pc, #68]	; (37748 <z_impl_k_thread_resume+0x80>)
   37702:	f7ff fce5 	bl	370d0 <z_reschedule>
}
   37706:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37708:	4e10      	ldr	r6, [pc, #64]	; (3774c <z_impl_k_thread_resume+0x84>)
   3770a:	2281      	movs	r2, #129	; 0x81
   3770c:	4631      	mov	r1, r6
   3770e:	4810      	ldr	r0, [pc, #64]	; (37750 <z_impl_k_thread_resume+0x88>)
   37710:	f004 fa12 	bl	3bb38 <printk>
   37714:	2181      	movs	r1, #129	; 0x81
   37716:	4630      	mov	r0, r6
   37718:	f004 fc62 	bl	3bfe0 <assert_post_action>
   3771c:	e7e2      	b.n	376e4 <z_impl_k_thread_resume+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3771e:	480a      	ldr	r0, [pc, #40]	; (37748 <z_impl_k_thread_resume+0x80>)
   37720:	f7fe fc12 	bl	35f48 <z_spin_unlock_valid>
   37724:	b120      	cbz	r0, 37730 <z_impl_k_thread_resume+0x68>
	__asm__ volatile(
   37726:	f385 8811 	msr	BASEPRI, r5
   3772a:	f3bf 8f6f 	isb	sy
		return;
   3772e:	e7ea      	b.n	37706 <z_impl_k_thread_resume+0x3e>
   37730:	4c06      	ldr	r4, [pc, #24]	; (3774c <z_impl_k_thread_resume+0x84>)
   37732:	22ac      	movs	r2, #172	; 0xac
   37734:	4621      	mov	r1, r4
   37736:	4806      	ldr	r0, [pc, #24]	; (37750 <z_impl_k_thread_resume+0x88>)
   37738:	f004 f9fe 	bl	3bb38 <printk>
   3773c:	21ac      	movs	r1, #172	; 0xac
   3773e:	4620      	mov	r0, r4
   37740:	f004 fc4e 	bl	3bfe0 <assert_post_action>
   37744:	e7ef      	b.n	37726 <z_impl_k_thread_resume+0x5e>
   37746:	bf00      	nop
   37748:	20010dbc 	.word	0x20010dbc
   3774c:	00042210 	.word	0x00042210
   37750:	00041c84 	.word	0x00041c84

00037754 <z_thread_timeout>:
{
   37754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37758:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   3775a:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
   3775e:	2500      	movs	r5, #0
	__asm__ volatile(
   37760:	f04f 0320 	mov.w	r3, #32
   37764:	f3ef 8711 	mrs	r7, BASEPRI
   37768:	f383 8812 	msr	BASEPRI_MAX, r3
   3776c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37770:	4824      	ldr	r0, [pc, #144]	; (37804 <z_thread_timeout+0xb0>)
   37772:	f7fe fbd9 	bl	35f28 <z_spin_lock_valid>
   37776:	b118      	cbz	r0, 37780 <z_thread_timeout+0x2c>
	z_spin_lock_set_owner(l);
   37778:	4822      	ldr	r0, [pc, #136]	; (37804 <z_thread_timeout+0xb0>)
   3777a:	f7fe fbf5 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   3777e:	e029      	b.n	377d4 <z_thread_timeout+0x80>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37780:	f8df 8088 	ldr.w	r8, [pc, #136]	; 3780c <z_thread_timeout+0xb8>
   37784:	2281      	movs	r2, #129	; 0x81
   37786:	4641      	mov	r1, r8
   37788:	481f      	ldr	r0, [pc, #124]	; (37808 <z_thread_timeout+0xb4>)
   3778a:	f004 f9d5 	bl	3bb38 <printk>
   3778e:	2181      	movs	r1, #129	; 0x81
   37790:	4640      	mov	r0, r8
   37792:	f004 fc25 	bl	3bfe0 <assert_post_action>
   37796:	e7ef      	b.n	37778 <z_thread_timeout+0x24>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37798:	4630      	mov	r0, r6
   3779a:	f7ff fbb1 	bl	36f00 <pended_on_thread>
   3779e:	4631      	mov	r1, r6
   377a0:	f7ff fd34 	bl	3720c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   377a4:	7b73      	ldrb	r3, [r6, #13]
   377a6:	f023 0302 	bic.w	r3, r3, #2
   377aa:	7373      	strb	r3, [r6, #13]
	thread->base.pended_on = NULL;
   377ac:	2300      	movs	r3, #0
   377ae:	60b3      	str	r3, [r6, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   377b0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   377b4:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   377b8:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   377bc:	4630      	mov	r0, r6
   377be:	f7ff fea5 	bl	3750c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   377c2:	4810      	ldr	r0, [pc, #64]	; (37804 <z_thread_timeout+0xb0>)
   377c4:	f7fe fbc0 	bl	35f48 <z_spin_unlock_valid>
   377c8:	b178      	cbz	r0, 377ea <z_thread_timeout+0x96>
	__asm__ volatile(
   377ca:	f387 8811 	msr	BASEPRI, r7
   377ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   377d2:	2501      	movs	r5, #1
   377d4:	b9a5      	cbnz	r5, 37800 <z_thread_timeout+0xac>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   377d6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   377da:	f013 0f28 	tst.w	r3, #40	; 0x28
   377de:	d1f0      	bne.n	377c2 <z_thread_timeout+0x6e>
			if (thread->base.pended_on != NULL) {
   377e0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   377e4:	2b00      	cmp	r3, #0
   377e6:	d1d7      	bne.n	37798 <z_thread_timeout+0x44>
   377e8:	e7e2      	b.n	377b0 <z_thread_timeout+0x5c>
   377ea:	4d08      	ldr	r5, [pc, #32]	; (3780c <z_thread_timeout+0xb8>)
   377ec:	22ac      	movs	r2, #172	; 0xac
   377ee:	4629      	mov	r1, r5
   377f0:	4805      	ldr	r0, [pc, #20]	; (37808 <z_thread_timeout+0xb4>)
   377f2:	f004 f9a1 	bl	3bb38 <printk>
   377f6:	21ac      	movs	r1, #172	; 0xac
   377f8:	4628      	mov	r0, r5
   377fa:	f004 fbf1 	bl	3bfe0 <assert_post_action>
   377fe:	e7e4      	b.n	377ca <z_thread_timeout+0x76>
}
   37800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37804:	20010dbc 	.word	0x20010dbc
   37808:	00041c84 	.word	0x00041c84
   3780c:	00042210 	.word	0x00042210

00037810 <unready_thread>:
{
   37810:	b510      	push	{r4, lr}
   37812:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   37814:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   37816:	f990 300d 	ldrsb.w	r3, [r0, #13]
   3781a:	2b00      	cmp	r3, #0
   3781c:	db08      	blt.n	37830 <unready_thread+0x20>
	update_cache(thread == _current);
   3781e:	4b08      	ldr	r3, [pc, #32]	; (37840 <unready_thread+0x30>)
   37820:	6898      	ldr	r0, [r3, #8]
   37822:	42a0      	cmp	r0, r4
   37824:	bf14      	ite	ne
   37826:	2000      	movne	r0, #0
   37828:	2001      	moveq	r0, #1
   3782a:	f7ff fd5b 	bl	372e4 <update_cache>
}
   3782e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37830:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   37834:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37836:	4601      	mov	r1, r0
   37838:	4802      	ldr	r0, [pc, #8]	; (37844 <unready_thread+0x34>)
   3783a:	f7ff fce7 	bl	3720c <z_priq_dumb_remove>
}
   3783e:	e7ee      	b.n	3781e <unready_thread+0xe>
   37840:	20010d7c 	.word	0x20010d7c
   37844:	20010d9c 	.word	0x20010d9c

00037848 <add_to_waitq_locked>:
{
   37848:	b570      	push	{r4, r5, r6, lr}
   3784a:	4605      	mov	r5, r0
   3784c:	460e      	mov	r6, r1
	unready_thread(thread);
   3784e:	f7ff ffdf 	bl	37810 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   37852:	7b6b      	ldrb	r3, [r5, #13]
   37854:	f043 0302 	orr.w	r3, r3, #2
   37858:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   3785a:	b1ce      	cbz	r6, 37890 <add_to_waitq_locked+0x48>
		thread->base.pended_on = wait_q;
   3785c:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3785e:	4b16      	ldr	r3, [pc, #88]	; (378b8 <add_to_waitq_locked+0x70>)
   37860:	429d      	cmp	r5, r3
   37862:	d016      	beq.n	37892 <add_to_waitq_locked+0x4a>
	return list->head == list;
   37864:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37866:	42a6      	cmp	r6, r4
   37868:	d024      	beq.n	378b4 <add_to_waitq_locked+0x6c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3786a:	b164      	cbz	r4, 37886 <add_to_waitq_locked+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3786c:	4621      	mov	r1, r4
   3786e:	4628      	mov	r0, r5
   37870:	f008 f9f8 	bl	3fc64 <z_sched_prio_cmp>
   37874:	2800      	cmp	r0, #0
   37876:	dc17      	bgt.n	378a8 <add_to_waitq_locked+0x60>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   37878:	b12c      	cbz	r4, 37886 <add_to_waitq_locked+0x3e>
	return (node == list->tail) ? NULL : node->next;
   3787a:	6873      	ldr	r3, [r6, #4]
   3787c:	429c      	cmp	r4, r3
   3787e:	d002      	beq.n	37886 <add_to_waitq_locked+0x3e>
   37880:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37882:	2c00      	cmp	r4, #0
   37884:	d1f1      	bne.n	3786a <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   37886:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   37888:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   3788a:	606b      	str	r3, [r5, #4]
	tail->next = node;
   3788c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3788e:	6075      	str	r5, [r6, #4]
}
   37890:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37892:	4c0a      	ldr	r4, [pc, #40]	; (378bc <add_to_waitq_locked+0x74>)
   37894:	22ba      	movs	r2, #186	; 0xba
   37896:	4621      	mov	r1, r4
   37898:	4809      	ldr	r0, [pc, #36]	; (378c0 <add_to_waitq_locked+0x78>)
   3789a:	f004 f94d 	bl	3bb38 <printk>
   3789e:	21ba      	movs	r1, #186	; 0xba
   378a0:	4620      	mov	r0, r4
   378a2:	f004 fb9d 	bl	3bfe0 <assert_post_action>
   378a6:	e7dd      	b.n	37864 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const prev = successor->prev;
   378a8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   378aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
   378ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
   378ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   378b0:	6065      	str	r5, [r4, #4]
}
   378b2:	e7ed      	b.n	37890 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   378b4:	2400      	movs	r4, #0
   378b6:	e7d8      	b.n	3786a <add_to_waitq_locked+0x22>
   378b8:	2000e638 	.word	0x2000e638
   378bc:	00045c38 	.word	0x00045c38
   378c0:	00041c84 	.word	0x00041c84

000378c4 <pend>:
{
   378c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   378c8:	4605      	mov	r5, r0
   378ca:	460f      	mov	r7, r1
   378cc:	4691      	mov	r9, r2
   378ce:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   378d0:	2400      	movs	r4, #0
	__asm__ volatile(
   378d2:	f04f 0320 	mov.w	r3, #32
   378d6:	f3ef 8611 	mrs	r6, BASEPRI
   378da:	f383 8812 	msr	BASEPRI_MAX, r3
   378de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   378e2:	481a      	ldr	r0, [pc, #104]	; (3794c <pend+0x88>)
   378e4:	f7fe fb20 	bl	35f28 <z_spin_lock_valid>
   378e8:	b118      	cbz	r0, 378f2 <pend+0x2e>
	z_spin_lock_set_owner(l);
   378ea:	4818      	ldr	r0, [pc, #96]	; (3794c <pend+0x88>)
   378ec:	f7fe fb3c 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   378f0:	e01a      	b.n	37928 <pend+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   378f2:	f8df a060 	ldr.w	sl, [pc, #96]	; 37954 <pend+0x90>
   378f6:	2281      	movs	r2, #129	; 0x81
   378f8:	4651      	mov	r1, sl
   378fa:	4815      	ldr	r0, [pc, #84]	; (37950 <pend+0x8c>)
   378fc:	f004 f91c 	bl	3bb38 <printk>
   37900:	2181      	movs	r1, #129	; 0x81
   37902:	4650      	mov	r0, sl
   37904:	f004 fb6c 	bl	3bfe0 <assert_post_action>
   37908:	e7ef      	b.n	378ea <pend+0x26>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3790a:	4c12      	ldr	r4, [pc, #72]	; (37954 <pend+0x90>)
   3790c:	22ac      	movs	r2, #172	; 0xac
   3790e:	4621      	mov	r1, r4
   37910:	480f      	ldr	r0, [pc, #60]	; (37950 <pend+0x8c>)
   37912:	f004 f911 	bl	3bb38 <printk>
   37916:	21ac      	movs	r1, #172	; 0xac
   37918:	4620      	mov	r0, r4
   3791a:	f004 fb61 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   3791e:	f386 8811 	msr	BASEPRI, r6
   37922:	f3bf 8f6f 	isb	sy
   37926:	2401      	movs	r4, #1
   37928:	b94c      	cbnz	r4, 3793e <pend+0x7a>
		add_to_waitq_locked(thread, wait_q);
   3792a:	4639      	mov	r1, r7
   3792c:	4628      	mov	r0, r5
   3792e:	f7ff ff8b 	bl	37848 <add_to_waitq_locked>
   37932:	4806      	ldr	r0, [pc, #24]	; (3794c <pend+0x88>)
   37934:	f7fe fb08 	bl	35f48 <z_spin_unlock_valid>
   37938:	2800      	cmp	r0, #0
   3793a:	d1f0      	bne.n	3791e <pend+0x5a>
   3793c:	e7e5      	b.n	3790a <pend+0x46>
	add_thread_timeout(thread, timeout);
   3793e:	464a      	mov	r2, r9
   37940:	4643      	mov	r3, r8
   37942:	4628      	mov	r0, r5
   37944:	f7ff faf4 	bl	36f30 <add_thread_timeout>
}
   37948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3794c:	20010dbc 	.word	0x20010dbc
   37950:	00041c84 	.word	0x00041c84
   37954:	00042210 	.word	0x00042210

00037958 <z_pend_curr>:
{
   37958:	b538      	push	{r3, r4, r5, lr}
   3795a:	4605      	mov	r5, r0
   3795c:	460c      	mov	r4, r1
   3795e:	4611      	mov	r1, r2
	pending_current = _current;
   37960:	4b0d      	ldr	r3, [pc, #52]	; (37998 <z_pend_curr+0x40>)
   37962:	6898      	ldr	r0, [r3, #8]
   37964:	4b0d      	ldr	r3, [pc, #52]	; (3799c <z_pend_curr+0x44>)
   37966:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   37968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3796c:	f7ff ffaa 	bl	378c4 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37970:	4628      	mov	r0, r5
   37972:	f7fe fae9 	bl	35f48 <z_spin_unlock_valid>
   37976:	b118      	cbz	r0, 37980 <z_pend_curr+0x28>
   37978:	4620      	mov	r0, r4
   3797a:	f7ef ffc9 	bl	27910 <arch_swap>
}
   3797e:	bd38      	pop	{r3, r4, r5, pc}
   37980:	4d07      	ldr	r5, [pc, #28]	; (379a0 <z_pend_curr+0x48>)
   37982:	22c3      	movs	r2, #195	; 0xc3
   37984:	4629      	mov	r1, r5
   37986:	4807      	ldr	r0, [pc, #28]	; (379a4 <z_pend_curr+0x4c>)
   37988:	f004 f8d6 	bl	3bb38 <printk>
   3798c:	21c3      	movs	r1, #195	; 0xc3
   3798e:	4628      	mov	r0, r5
   37990:	f004 fb26 	bl	3bfe0 <assert_post_action>
   37994:	e7f0      	b.n	37978 <z_pend_curr+0x20>
   37996:	bf00      	nop
   37998:	20010d7c 	.word	0x20010d7c
   3799c:	20010db8 	.word	0x20010db8
   379a0:	00042210 	.word	0x00042210
   379a4:	00041c84 	.word	0x00041c84

000379a8 <z_set_prio>:
{
   379a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   379ac:	4604      	mov	r4, r0
   379ae:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   379b0:	2500      	movs	r5, #0
	__asm__ volatile(
   379b2:	f04f 0320 	mov.w	r3, #32
   379b6:	f3ef 8611 	mrs	r6, BASEPRI
   379ba:	f383 8812 	msr	BASEPRI_MAX, r3
   379be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   379c2:	4840      	ldr	r0, [pc, #256]	; (37ac4 <z_set_prio+0x11c>)
   379c4:	f7fe fab0 	bl	35f28 <z_spin_lock_valid>
   379c8:	b128      	cbz	r0, 379d6 <z_set_prio+0x2e>
	z_spin_lock_set_owner(l);
   379ca:	483e      	ldr	r0, [pc, #248]	; (37ac4 <z_set_prio+0x11c>)
   379cc:	f7fe facc 	bl	35f68 <z_spin_lock_set_owner>
	bool need_sched = 0;
   379d0:	f04f 0800 	mov.w	r8, #0
	return k;
   379d4:	e019      	b.n	37a0a <z_set_prio+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   379d6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 37adc <z_set_prio+0x134>
   379da:	2281      	movs	r2, #129	; 0x81
   379dc:	4641      	mov	r1, r8
   379de:	483a      	ldr	r0, [pc, #232]	; (37ac8 <z_set_prio+0x120>)
   379e0:	f004 f8aa 	bl	3bb38 <printk>
   379e4:	2181      	movs	r1, #129	; 0x81
   379e6:	4640      	mov	r0, r8
   379e8:	f004 fafa 	bl	3bfe0 <assert_post_action>
   379ec:	e7ed      	b.n	379ca <z_set_prio+0x22>
		if (need_sched) {
   379ee:	f013 0801 	ands.w	r8, r3, #1
   379f2:	d116      	bne.n	37a22 <z_set_prio+0x7a>
			thread->base.prio = prio;
   379f4:	73a7      	strb	r7, [r4, #14]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   379f6:	4833      	ldr	r0, [pc, #204]	; (37ac4 <z_set_prio+0x11c>)
   379f8:	f7fe faa6 	bl	35f48 <z_spin_unlock_valid>
   379fc:	2800      	cmp	r0, #0
   379fe:	d052      	beq.n	37aa6 <z_set_prio+0xfe>
	__asm__ volatile(
   37a00:	f386 8811 	msr	BASEPRI, r6
   37a04:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   37a08:	2501      	movs	r5, #1
   37a0a:	462b      	mov	r3, r5
   37a0c:	2d00      	cmp	r5, #0
   37a0e:	d155      	bne.n	37abc <z_set_prio+0x114>
	uint8_t state = thread->base.thread_state;
   37a10:	7b62      	ldrb	r2, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   37a12:	f012 0f1f 	tst.w	r2, #31
   37a16:	d1ea      	bne.n	379ee <z_set_prio+0x46>
	return node->next != NULL;
   37a18:	69a1      	ldr	r1, [r4, #24]
   37a1a:	2900      	cmp	r1, #0
   37a1c:	d1e7      	bne.n	379ee <z_set_prio+0x46>
   37a1e:	2301      	movs	r3, #1
   37a20:	e7e5      	b.n	379ee <z_set_prio+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37a22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   37a26:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37a28:	4621      	mov	r1, r4
   37a2a:	4828      	ldr	r0, [pc, #160]	; (37acc <z_set_prio+0x124>)
   37a2c:	f7ff fbee 	bl	3720c <z_priq_dumb_remove>
				thread->base.prio = prio;
   37a30:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   37a32:	7b63      	ldrb	r3, [r4, #13]
   37a34:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37a38:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37a3a:	4b25      	ldr	r3, [pc, #148]	; (37ad0 <z_set_prio+0x128>)
   37a3c:	429c      	cmp	r4, r3
   37a3e:	d01f      	beq.n	37a80 <z_set_prio+0xd8>
	return list->head == list;
   37a40:	4b24      	ldr	r3, [pc, #144]	; (37ad4 <z_set_prio+0x12c>)
   37a42:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37a46:	429d      	cmp	r5, r3
   37a48:	d02b      	beq.n	37aa2 <z_set_prio+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37a4a:	b16d      	cbz	r5, 37a68 <z_set_prio+0xc0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   37a4c:	4629      	mov	r1, r5
   37a4e:	4620      	mov	r0, r4
   37a50:	f008 f908 	bl	3fc64 <z_sched_prio_cmp>
   37a54:	2800      	cmp	r0, #0
   37a56:	dc1e      	bgt.n	37a96 <z_set_prio+0xee>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   37a58:	b135      	cbz	r5, 37a68 <z_set_prio+0xc0>
	return (node == list->tail) ? NULL : node->next;
   37a5a:	4b1e      	ldr	r3, [pc, #120]	; (37ad4 <z_set_prio+0x12c>)
   37a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   37a5e:	429d      	cmp	r5, r3
   37a60:	d002      	beq.n	37a68 <z_set_prio+0xc0>
   37a62:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37a64:	2d00      	cmp	r5, #0
   37a66:	d1f0      	bne.n	37a4a <z_set_prio+0xa2>
	sys_dnode_t *const tail = list->tail;
   37a68:	4b1a      	ldr	r3, [pc, #104]	; (37ad4 <z_set_prio+0x12c>)
   37a6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   37a6c:	f103 0120 	add.w	r1, r3, #32
   37a70:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   37a72:	6062      	str	r2, [r4, #4]
	tail->next = node;
   37a74:	6014      	str	r4, [r2, #0]
	list->tail = node;
   37a76:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   37a78:	2001      	movs	r0, #1
   37a7a:	f7ff fc33 	bl	372e4 <update_cache>
   37a7e:	e7ba      	b.n	379f6 <z_set_prio+0x4e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37a80:	4d15      	ldr	r5, [pc, #84]	; (37ad8 <z_set_prio+0x130>)
   37a82:	22ba      	movs	r2, #186	; 0xba
   37a84:	4629      	mov	r1, r5
   37a86:	4810      	ldr	r0, [pc, #64]	; (37ac8 <z_set_prio+0x120>)
   37a88:	f004 f856 	bl	3bb38 <printk>
   37a8c:	21ba      	movs	r1, #186	; 0xba
   37a8e:	4628      	mov	r0, r5
   37a90:	f004 faa6 	bl	3bfe0 <assert_post_action>
   37a94:	e7d4      	b.n	37a40 <z_set_prio+0x98>
	sys_dnode_t *const prev = successor->prev;
   37a96:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   37a98:	6063      	str	r3, [r4, #4]
	node->next = successor;
   37a9a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   37a9c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   37a9e:	606c      	str	r4, [r5, #4]
}
   37aa0:	e7ea      	b.n	37a78 <z_set_prio+0xd0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37aa2:	2500      	movs	r5, #0
   37aa4:	e7d1      	b.n	37a4a <z_set_prio+0xa2>
   37aa6:	4d0d      	ldr	r5, [pc, #52]	; (37adc <z_set_prio+0x134>)
   37aa8:	22ac      	movs	r2, #172	; 0xac
   37aaa:	4629      	mov	r1, r5
   37aac:	4806      	ldr	r0, [pc, #24]	; (37ac8 <z_set_prio+0x120>)
   37aae:	f004 f843 	bl	3bb38 <printk>
   37ab2:	21ac      	movs	r1, #172	; 0xac
   37ab4:	4628      	mov	r0, r5
   37ab6:	f004 fa93 	bl	3bfe0 <assert_post_action>
   37aba:	e7a1      	b.n	37a00 <z_set_prio+0x58>
}
   37abc:	4640      	mov	r0, r8
   37abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37ac2:	bf00      	nop
   37ac4:	20010dbc 	.word	0x20010dbc
   37ac8:	00041c84 	.word	0x00041c84
   37acc:	20010d9c 	.word	0x20010d9c
   37ad0:	2000e638 	.word	0x2000e638
   37ad4:	20010d7c 	.word	0x20010d7c
   37ad8:	00045c38 	.word	0x00045c38
   37adc:	00042210 	.word	0x00042210

00037ae0 <z_impl_k_thread_suspend>:
{
   37ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37ae2:	4604      	mov	r4, r0
   37ae4:	3018      	adds	r0, #24
   37ae6:	f000 fd8f 	bl	38608 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   37aea:	2500      	movs	r5, #0
	__asm__ volatile(
   37aec:	f04f 0320 	mov.w	r3, #32
   37af0:	f3ef 8611 	mrs	r6, BASEPRI
   37af4:	f383 8812 	msr	BASEPRI_MAX, r3
   37af8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37afc:	4828      	ldr	r0, [pc, #160]	; (37ba0 <z_impl_k_thread_suspend+0xc0>)
   37afe:	f7fe fa13 	bl	35f28 <z_spin_lock_valid>
   37b02:	b118      	cbz	r0, 37b0c <z_impl_k_thread_suspend+0x2c>
	z_spin_lock_set_owner(l);
   37b04:	4826      	ldr	r0, [pc, #152]	; (37ba0 <z_impl_k_thread_suspend+0xc0>)
   37b06:	f7fe fa2f 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   37b0a:	e021      	b.n	37b50 <z_impl_k_thread_suspend+0x70>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37b0c:	4f25      	ldr	r7, [pc, #148]	; (37ba4 <z_impl_k_thread_suspend+0xc4>)
   37b0e:	2281      	movs	r2, #129	; 0x81
   37b10:	4639      	mov	r1, r7
   37b12:	4825      	ldr	r0, [pc, #148]	; (37ba8 <z_impl_k_thread_suspend+0xc8>)
   37b14:	f004 f810 	bl	3bb38 <printk>
   37b18:	2181      	movs	r1, #129	; 0x81
   37b1a:	4638      	mov	r0, r7
   37b1c:	f004 fa60 	bl	3bfe0 <assert_post_action>
   37b20:	e7f0      	b.n	37b04 <z_impl_k_thread_suspend+0x24>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37b22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   37b26:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37b28:	4621      	mov	r1, r4
   37b2a:	4820      	ldr	r0, [pc, #128]	; (37bac <z_impl_k_thread_suspend+0xcc>)
   37b2c:	f7ff fb6e 	bl	3720c <z_priq_dumb_remove>
}
   37b30:	e014      	b.n	37b5c <z_impl_k_thread_suspend+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37b32:	4d1c      	ldr	r5, [pc, #112]	; (37ba4 <z_impl_k_thread_suspend+0xc4>)
   37b34:	22ac      	movs	r2, #172	; 0xac
   37b36:	4629      	mov	r1, r5
   37b38:	481b      	ldr	r0, [pc, #108]	; (37ba8 <z_impl_k_thread_suspend+0xc8>)
   37b3a:	f003 fffd 	bl	3bb38 <printk>
   37b3e:	21ac      	movs	r1, #172	; 0xac
   37b40:	4628      	mov	r0, r5
   37b42:	f004 fa4d 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   37b46:	f386 8811 	msr	BASEPRI, r6
   37b4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   37b4e:	2501      	movs	r5, #1
   37b50:	b9b5      	cbnz	r5, 37b80 <z_impl_k_thread_suspend+0xa0>
	return (thread->base.thread_state & state) != 0U;
   37b52:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   37b54:	f994 300d 	ldrsb.w	r3, [r4, #13]
   37b58:	2b00      	cmp	r3, #0
   37b5a:	dbe2      	blt.n	37b22 <z_impl_k_thread_suspend+0x42>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   37b5c:	7b63      	ldrb	r3, [r4, #13]
   37b5e:	f043 0310 	orr.w	r3, r3, #16
   37b62:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   37b64:	4b12      	ldr	r3, [pc, #72]	; (37bb0 <z_impl_k_thread_suspend+0xd0>)
   37b66:	6898      	ldr	r0, [r3, #8]
   37b68:	42a0      	cmp	r0, r4
   37b6a:	bf14      	ite	ne
   37b6c:	2000      	movne	r0, #0
   37b6e:	2001      	moveq	r0, #1
   37b70:	f7ff fbb8 	bl	372e4 <update_cache>
   37b74:	480a      	ldr	r0, [pc, #40]	; (37ba0 <z_impl_k_thread_suspend+0xc0>)
   37b76:	f7fe f9e7 	bl	35f48 <z_spin_unlock_valid>
   37b7a:	2800      	cmp	r0, #0
   37b7c:	d1e3      	bne.n	37b46 <z_impl_k_thread_suspend+0x66>
   37b7e:	e7d8      	b.n	37b32 <z_impl_k_thread_suspend+0x52>
	if (thread == _current) {
   37b80:	4b0b      	ldr	r3, [pc, #44]	; (37bb0 <z_impl_k_thread_suspend+0xd0>)
   37b82:	689b      	ldr	r3, [r3, #8]
   37b84:	42a3      	cmp	r3, r4
   37b86:	d000      	beq.n	37b8a <z_impl_k_thread_suspend+0xaa>
}
   37b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
   37b8a:	f04f 0320 	mov.w	r3, #32
   37b8e:	f3ef 8011 	mrs	r0, BASEPRI
   37b92:	f383 8812 	msr	BASEPRI_MAX, r3
   37b96:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   37b9a:	f008 f86d 	bl	3fc78 <z_reschedule_irqlock>
   37b9e:	e7f3      	b.n	37b88 <z_impl_k_thread_suspend+0xa8>
   37ba0:	20010dbc 	.word	0x20010dbc
   37ba4:	00042210 	.word	0x00042210
   37ba8:	00041c84 	.word	0x00041c84
   37bac:	20010d9c 	.word	0x20010d9c
   37bb0:	20010d7c 	.word	0x20010d7c

00037bb4 <k_sched_unlock>:
{
   37bb4:	b570      	push	{r4, r5, r6, lr}
	LOCKED(&sched_spinlock) {
   37bb6:	2400      	movs	r4, #0
   37bb8:	f04f 0320 	mov.w	r3, #32
   37bbc:	f3ef 8511 	mrs	r5, BASEPRI
   37bc0:	f383 8812 	msr	BASEPRI_MAX, r3
   37bc4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37bc8:	482f      	ldr	r0, [pc, #188]	; (37c88 <k_sched_unlock+0xd4>)
   37bca:	f7fe f9ad 	bl	35f28 <z_spin_lock_valid>
   37bce:	b118      	cbz	r0, 37bd8 <k_sched_unlock+0x24>
	z_spin_lock_set_owner(l);
   37bd0:	482d      	ldr	r0, [pc, #180]	; (37c88 <k_sched_unlock+0xd4>)
   37bd2:	f7fe f9c9 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   37bd6:	e033      	b.n	37c40 <k_sched_unlock+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37bd8:	4e2c      	ldr	r6, [pc, #176]	; (37c8c <k_sched_unlock+0xd8>)
   37bda:	2281      	movs	r2, #129	; 0x81
   37bdc:	4631      	mov	r1, r6
   37bde:	482c      	ldr	r0, [pc, #176]	; (37c90 <k_sched_unlock+0xdc>)
   37be0:	f003 ffaa 	bl	3bb38 <printk>
   37be4:	2181      	movs	r1, #129	; 0x81
   37be6:	4630      	mov	r0, r6
   37be8:	f004 f9fa 	bl	3bfe0 <assert_post_action>
   37bec:	e7f0      	b.n	37bd0 <k_sched_unlock+0x1c>
		__ASSERT(_current->base.sched_locked != 0U, "");
   37bee:	4c29      	ldr	r4, [pc, #164]	; (37c94 <k_sched_unlock+0xe0>)
   37bf0:	f240 3285 	movw	r2, #901	; 0x385
   37bf4:	4621      	mov	r1, r4
   37bf6:	4826      	ldr	r0, [pc, #152]	; (37c90 <k_sched_unlock+0xdc>)
   37bf8:	f003 ff9e 	bl	3bb38 <printk>
   37bfc:	f240 3185 	movw	r1, #901	; 0x385
   37c00:	4620      	mov	r0, r4
   37c02:	f004 f9ed 	bl	3bfe0 <assert_post_action>
   37c06:	e021      	b.n	37c4c <k_sched_unlock+0x98>
		__ASSERT(!arch_is_in_isr(), "");
   37c08:	4c22      	ldr	r4, [pc, #136]	; (37c94 <k_sched_unlock+0xe0>)
   37c0a:	f240 3286 	movw	r2, #902	; 0x386
   37c0e:	4621      	mov	r1, r4
   37c10:	481f      	ldr	r0, [pc, #124]	; (37c90 <k_sched_unlock+0xdc>)
   37c12:	f003 ff91 	bl	3bb38 <printk>
   37c16:	f240 3186 	movw	r1, #902	; 0x386
   37c1a:	4620      	mov	r0, r4
   37c1c:	f004 f9e0 	bl	3bfe0 <assert_post_action>
   37c20:	e018      	b.n	37c54 <k_sched_unlock+0xa0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37c22:	4c1a      	ldr	r4, [pc, #104]	; (37c8c <k_sched_unlock+0xd8>)
   37c24:	22ac      	movs	r2, #172	; 0xac
   37c26:	4621      	mov	r1, r4
   37c28:	4819      	ldr	r0, [pc, #100]	; (37c90 <k_sched_unlock+0xdc>)
   37c2a:	f003 ff85 	bl	3bb38 <printk>
   37c2e:	21ac      	movs	r1, #172	; 0xac
   37c30:	4620      	mov	r0, r4
   37c32:	f004 f9d5 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   37c36:	f385 8811 	msr	BASEPRI, r5
   37c3a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   37c3e:	2401      	movs	r4, #1
   37c40:	b9b4      	cbnz	r4, 37c70 <k_sched_unlock+0xbc>
		__ASSERT(_current->base.sched_locked != 0U, "");
   37c42:	4b15      	ldr	r3, [pc, #84]	; (37c98 <k_sched_unlock+0xe4>)
   37c44:	689b      	ldr	r3, [r3, #8]
   37c46:	7bdb      	ldrb	r3, [r3, #15]
   37c48:	2b00      	cmp	r3, #0
   37c4a:	d0d0      	beq.n	37bee <k_sched_unlock+0x3a>
   37c4c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   37c50:	2b00      	cmp	r3, #0
   37c52:	d1d9      	bne.n	37c08 <k_sched_unlock+0x54>
		++_current->base.sched_locked;
   37c54:	4b10      	ldr	r3, [pc, #64]	; (37c98 <k_sched_unlock+0xe4>)
   37c56:	689a      	ldr	r2, [r3, #8]
   37c58:	7bd3      	ldrb	r3, [r2, #15]
   37c5a:	3301      	adds	r3, #1
   37c5c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   37c5e:	2000      	movs	r0, #0
   37c60:	f7ff fb40 	bl	372e4 <update_cache>
   37c64:	4808      	ldr	r0, [pc, #32]	; (37c88 <k_sched_unlock+0xd4>)
   37c66:	f7fe f96f 	bl	35f48 <z_spin_unlock_valid>
   37c6a:	2800      	cmp	r0, #0
   37c6c:	d1e3      	bne.n	37c36 <k_sched_unlock+0x82>
   37c6e:	e7d8      	b.n	37c22 <k_sched_unlock+0x6e>
	__asm__ volatile(
   37c70:	f04f 0320 	mov.w	r3, #32
   37c74:	f3ef 8011 	mrs	r0, BASEPRI
   37c78:	f383 8812 	msr	BASEPRI_MAX, r3
   37c7c:	f3bf 8f6f 	isb	sy
   37c80:	f007 fffa 	bl	3fc78 <z_reschedule_irqlock>
}
   37c84:	bd70      	pop	{r4, r5, r6, pc}
   37c86:	bf00      	nop
   37c88:	20010dbc 	.word	0x20010dbc
   37c8c:	00042210 	.word	0x00042210
   37c90:	00041c84 	.word	0x00041c84
   37c94:	00045c38 	.word	0x00045c38
   37c98:	20010d7c 	.word	0x20010d7c

00037c9c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   37c9c:	7b43      	ldrb	r3, [r0, #13]
   37c9e:	f013 0f08 	tst.w	r3, #8
   37ca2:	d142      	bne.n	37d2a <end_thread+0x8e>
{
   37ca4:	b570      	push	{r4, r5, r6, lr}
   37ca6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   37ca8:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   37cac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   37cb0:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   37cb2:	f013 0f80 	tst.w	r3, #128	; 0x80
   37cb6:	d113      	bne.n	37ce0 <end_thread+0x44>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   37cb8:	68ab      	ldr	r3, [r5, #8]
   37cba:	b15b      	cbz	r3, 37cd4 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37cbc:	4628      	mov	r0, r5
   37cbe:	f7ff f91f 	bl	36f00 <pended_on_thread>
   37cc2:	4629      	mov	r1, r5
   37cc4:	f7ff faa2 	bl	3720c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   37cc8:	7b6b      	ldrb	r3, [r5, #13]
   37cca:	f023 0302 	bic.w	r3, r3, #2
   37cce:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   37cd0:	2300      	movs	r3, #0
   37cd2:	60ab      	str	r3, [r5, #8]
   37cd4:	f105 0018 	add.w	r0, r5, #24
   37cd8:	f000 fc96 	bl	38608 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   37cdc:	3558      	adds	r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   37cde:	e01b      	b.n	37d18 <end_thread+0x7c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   37ce4:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37ce6:	4601      	mov	r1, r0
   37ce8:	4810      	ldr	r0, [pc, #64]	; (37d2c <end_thread+0x90>)
   37cea:	f7ff fa8f 	bl	3720c <z_priq_dumb_remove>
}
   37cee:	e7e3      	b.n	37cb8 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37cf0:	4620      	mov	r0, r4
   37cf2:	f7ff f905 	bl	36f00 <pended_on_thread>
   37cf6:	4621      	mov	r1, r4
   37cf8:	f7ff fa88 	bl	3720c <z_priq_dumb_remove>
   37cfc:	7b63      	ldrb	r3, [r4, #13]
   37cfe:	f023 0302 	bic.w	r3, r3, #2
   37d02:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   37d04:	2600      	movs	r6, #0
   37d06:	60a6      	str	r6, [r4, #8]
   37d08:	f104 0018 	add.w	r0, r4, #24
   37d0c:	f000 fc7c 	bl	38608 <z_abort_timeout>
   37d10:	67e6      	str	r6, [r4, #124]	; 0x7c
		ready_thread(thread);
   37d12:	4620      	mov	r0, r4
   37d14:	f7ff fbfa 	bl	3750c <ready_thread>
	return list->head == list;
   37d18:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37d1a:	42ac      	cmp	r4, r5
   37d1c:	d001      	beq.n	37d22 <end_thread+0x86>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   37d1e:	2c00      	cmp	r4, #0
   37d20:	d1e6      	bne.n	37cf0 <end_thread+0x54>
		update_cache(1);
   37d22:	2001      	movs	r0, #1
   37d24:	f7ff fade 	bl	372e4 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   37d28:	bd70      	pop	{r4, r5, r6, pc}
   37d2a:	4770      	bx	lr
   37d2c:	20010d9c 	.word	0x20010d9c

00037d30 <z_unpend1_no_timeout>:
{
   37d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37d32:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   37d34:	2500      	movs	r5, #0
   37d36:	f04f 0320 	mov.w	r3, #32
   37d3a:	f3ef 8611 	mrs	r6, BASEPRI
   37d3e:	f383 8812 	msr	BASEPRI_MAX, r3
   37d42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d46:	481e      	ldr	r0, [pc, #120]	; (37dc0 <z_unpend1_no_timeout+0x90>)
   37d48:	f7fe f8ee 	bl	35f28 <z_spin_lock_valid>
   37d4c:	b120      	cbz	r0, 37d58 <z_unpend1_no_timeout+0x28>
	z_spin_lock_set_owner(l);
   37d4e:	481c      	ldr	r0, [pc, #112]	; (37dc0 <z_unpend1_no_timeout+0x90>)
   37d50:	f7fe f90a 	bl	35f68 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   37d54:	2400      	movs	r4, #0
	return k;
   37d56:	e01e      	b.n	37d96 <z_unpend1_no_timeout+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37d58:	4c1a      	ldr	r4, [pc, #104]	; (37dc4 <z_unpend1_no_timeout+0x94>)
   37d5a:	2281      	movs	r2, #129	; 0x81
   37d5c:	4621      	mov	r1, r4
   37d5e:	481a      	ldr	r0, [pc, #104]	; (37dc8 <z_unpend1_no_timeout+0x98>)
   37d60:	f003 feea 	bl	3bb38 <printk>
   37d64:	2181      	movs	r1, #129	; 0x81
   37d66:	4620      	mov	r0, r4
   37d68:	f004 f93a 	bl	3bfe0 <assert_post_action>
   37d6c:	e7ef      	b.n	37d4e <z_unpend1_no_timeout+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37d6e:	f7ff f8c7 	bl	36f00 <pended_on_thread>
   37d72:	4621      	mov	r1, r4
   37d74:	f7ff fa4a 	bl	3720c <z_priq_dumb_remove>
   37d78:	7b63      	ldrb	r3, [r4, #13]
   37d7a:	f023 0302 	bic.w	r3, r3, #2
   37d7e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   37d80:	2300      	movs	r3, #0
   37d82:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37d84:	480e      	ldr	r0, [pc, #56]	; (37dc0 <z_unpend1_no_timeout+0x90>)
   37d86:	f7fe f8df 	bl	35f48 <z_spin_unlock_valid>
   37d8a:	b160      	cbz	r0, 37da6 <z_unpend1_no_timeout+0x76>
	__asm__ volatile(
   37d8c:	f386 8811 	msr	BASEPRI, r6
   37d90:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   37d94:	2501      	movs	r5, #1
   37d96:	b98d      	cbnz	r5, 37dbc <z_unpend1_no_timeout+0x8c>
		thread = _priq_wait_best(&wait_q->waitq);
   37d98:	4638      	mov	r0, r7
   37d9a:	f007 ff82 	bl	3fca2 <z_priq_dumb_best>
		if (thread != NULL) {
   37d9e:	4604      	mov	r4, r0
   37da0:	2800      	cmp	r0, #0
   37da2:	d1e4      	bne.n	37d6e <z_unpend1_no_timeout+0x3e>
   37da4:	e7ee      	b.n	37d84 <z_unpend1_no_timeout+0x54>
   37da6:	4d07      	ldr	r5, [pc, #28]	; (37dc4 <z_unpend1_no_timeout+0x94>)
   37da8:	22ac      	movs	r2, #172	; 0xac
   37daa:	4629      	mov	r1, r5
   37dac:	4806      	ldr	r0, [pc, #24]	; (37dc8 <z_unpend1_no_timeout+0x98>)
   37dae:	f003 fec3 	bl	3bb38 <printk>
   37db2:	21ac      	movs	r1, #172	; 0xac
   37db4:	4628      	mov	r0, r5
   37db6:	f004 f913 	bl	3bfe0 <assert_post_action>
   37dba:	e7e7      	b.n	37d8c <z_unpend1_no_timeout+0x5c>
}
   37dbc:	4620      	mov	r0, r4
   37dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37dc0:	20010dbc 	.word	0x20010dbc
   37dc4:	00042210 	.word	0x00042210
   37dc8:	00041c84 	.word	0x00041c84

00037dcc <z_unpend_first_thread>:
{
   37dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37dce:	4607      	mov	r7, r0
	LOCKED(&sched_spinlock) {
   37dd0:	2500      	movs	r5, #0
	__asm__ volatile(
   37dd2:	f04f 0320 	mov.w	r3, #32
   37dd6:	f3ef 8611 	mrs	r6, BASEPRI
   37dda:	f383 8812 	msr	BASEPRI_MAX, r3
   37dde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37de2:	4820      	ldr	r0, [pc, #128]	; (37e64 <z_unpend_first_thread+0x98>)
   37de4:	f7fe f8a0 	bl	35f28 <z_spin_lock_valid>
   37de8:	b120      	cbz	r0, 37df4 <z_unpend_first_thread+0x28>
	z_spin_lock_set_owner(l);
   37dea:	481e      	ldr	r0, [pc, #120]	; (37e64 <z_unpend_first_thread+0x98>)
   37dec:	f7fe f8bc 	bl	35f68 <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   37df0:	2400      	movs	r4, #0
	return k;
   37df2:	e022      	b.n	37e3a <z_unpend_first_thread+0x6e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37df4:	4c1c      	ldr	r4, [pc, #112]	; (37e68 <z_unpend_first_thread+0x9c>)
   37df6:	2281      	movs	r2, #129	; 0x81
   37df8:	4621      	mov	r1, r4
   37dfa:	481c      	ldr	r0, [pc, #112]	; (37e6c <z_unpend_first_thread+0xa0>)
   37dfc:	f003 fe9c 	bl	3bb38 <printk>
   37e00:	2181      	movs	r1, #129	; 0x81
   37e02:	4620      	mov	r0, r4
   37e04:	f004 f8ec 	bl	3bfe0 <assert_post_action>
   37e08:	e7ef      	b.n	37dea <z_unpend_first_thread+0x1e>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   37e0a:	f7ff f879 	bl	36f00 <pended_on_thread>
   37e0e:	4621      	mov	r1, r4
   37e10:	f7ff f9fc 	bl	3720c <z_priq_dumb_remove>
   37e14:	7b63      	ldrb	r3, [r4, #13]
   37e16:	f023 0302 	bic.w	r3, r3, #2
   37e1a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   37e1c:	2300      	movs	r3, #0
   37e1e:	60a3      	str	r3, [r4, #8]
   37e20:	f104 0018 	add.w	r0, r4, #24
   37e24:	f000 fbf0 	bl	38608 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37e28:	480e      	ldr	r0, [pc, #56]	; (37e64 <z_unpend_first_thread+0x98>)
   37e2a:	f7fe f88d 	bl	35f48 <z_spin_unlock_valid>
   37e2e:	b160      	cbz	r0, 37e4a <z_unpend_first_thread+0x7e>
	__asm__ volatile(
   37e30:	f386 8811 	msr	BASEPRI, r6
   37e34:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   37e38:	2501      	movs	r5, #1
   37e3a:	b98d      	cbnz	r5, 37e60 <z_unpend_first_thread+0x94>
		thread = _priq_wait_best(&wait_q->waitq);
   37e3c:	4638      	mov	r0, r7
   37e3e:	f007 ff30 	bl	3fca2 <z_priq_dumb_best>
		if (thread != NULL) {
   37e42:	4604      	mov	r4, r0
   37e44:	2800      	cmp	r0, #0
   37e46:	d1e0      	bne.n	37e0a <z_unpend_first_thread+0x3e>
   37e48:	e7ee      	b.n	37e28 <z_unpend_first_thread+0x5c>
   37e4a:	4d07      	ldr	r5, [pc, #28]	; (37e68 <z_unpend_first_thread+0x9c>)
   37e4c:	22ac      	movs	r2, #172	; 0xac
   37e4e:	4629      	mov	r1, r5
   37e50:	4806      	ldr	r0, [pc, #24]	; (37e6c <z_unpend_first_thread+0xa0>)
   37e52:	f003 fe71 	bl	3bb38 <printk>
   37e56:	21ac      	movs	r1, #172	; 0xac
   37e58:	4628      	mov	r0, r5
   37e5a:	f004 f8c1 	bl	3bfe0 <assert_post_action>
   37e5e:	e7e7      	b.n	37e30 <z_unpend_first_thread+0x64>
}
   37e60:	4620      	mov	r0, r4
   37e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37e64:	20010dbc 	.word	0x20010dbc
   37e68:	00042210 	.word	0x00042210
   37e6c:	00041c84 	.word	0x00041c84

00037e70 <z_sched_init>:
{
   37e70:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   37e72:	4804      	ldr	r0, [pc, #16]	; (37e84 <z_sched_init+0x14>)
   37e74:	f007 ff2d 	bl	3fcd2 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   37e78:	2100      	movs	r1, #0
   37e7a:	4608      	mov	r0, r1
   37e7c:	f7ff f87e 	bl	36f7c <k_sched_time_slice_set>
}
   37e80:	bd08      	pop	{r3, pc}
   37e82:	bf00      	nop
   37e84:	20010d98 	.word	0x20010d98

00037e88 <z_impl_k_yield>:
{
   37e88:	b570      	push	{r4, r5, r6, lr}
   37e8a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   37e8e:	2b00      	cmp	r3, #0
   37e90:	d148      	bne.n	37f24 <z_impl_k_yield+0x9c>
	__asm__ volatile(
   37e92:	f04f 0320 	mov.w	r3, #32
   37e96:	f3ef 8611 	mrs	r6, BASEPRI
   37e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   37e9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ea2:	483b      	ldr	r0, [pc, #236]	; (37f90 <z_impl_k_yield+0x108>)
   37ea4:	f7fe f840 	bl	35f28 <z_spin_lock_valid>
   37ea8:	2800      	cmp	r0, #0
   37eaa:	d048      	beq.n	37f3e <z_impl_k_yield+0xb6>
	z_spin_lock_set_owner(l);
   37eac:	4838      	ldr	r0, [pc, #224]	; (37f90 <z_impl_k_yield+0x108>)
   37eae:	f7fe f85b 	bl	35f68 <z_spin_lock_set_owner>
		dequeue_thread(_current);
   37eb2:	4c38      	ldr	r4, [pc, #224]	; (37f94 <z_impl_k_yield+0x10c>)
   37eb4:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   37eb6:	7b4b      	ldrb	r3, [r1, #13]
   37eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   37ebc:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   37ebe:	f104 0020 	add.w	r0, r4, #32
   37ec2:	f7ff f9a3 	bl	3720c <z_priq_dumb_remove>
	queue_thread(_current);
   37ec6:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   37ec8:	7b6b      	ldrb	r3, [r5, #13]
   37eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
   37ece:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37ed0:	4b31      	ldr	r3, [pc, #196]	; (37f98 <z_impl_k_yield+0x110>)
   37ed2:	429d      	cmp	r5, r3
   37ed4:	d03e      	beq.n	37f54 <z_impl_k_yield+0xcc>
	return list->head == list;
   37ed6:	4b2f      	ldr	r3, [pc, #188]	; (37f94 <z_impl_k_yield+0x10c>)
   37ed8:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37edc:	429c      	cmp	r4, r3
   37ede:	d04a      	beq.n	37f76 <z_impl_k_yield+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37ee0:	b16c      	cbz	r4, 37efe <z_impl_k_yield+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   37ee2:	4621      	mov	r1, r4
   37ee4:	4628      	mov	r0, r5
   37ee6:	f007 febd 	bl	3fc64 <z_sched_prio_cmp>
   37eea:	2800      	cmp	r0, #0
   37eec:	dc3d      	bgt.n	37f6a <z_impl_k_yield+0xe2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   37eee:	b134      	cbz	r4, 37efe <z_impl_k_yield+0x76>
	return (node == list->tail) ? NULL : node->next;
   37ef0:	4b28      	ldr	r3, [pc, #160]	; (37f94 <z_impl_k_yield+0x10c>)
   37ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   37ef4:	429c      	cmp	r4, r3
   37ef6:	d002      	beq.n	37efe <z_impl_k_yield+0x76>
   37ef8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37efa:	2c00      	cmp	r4, #0
   37efc:	d1f0      	bne.n	37ee0 <z_impl_k_yield+0x58>
	sys_dnode_t *const tail = list->tail;
   37efe:	4b25      	ldr	r3, [pc, #148]	; (37f94 <z_impl_k_yield+0x10c>)
   37f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   37f02:	f103 0120 	add.w	r1, r3, #32
   37f06:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   37f08:	606a      	str	r2, [r5, #4]
	tail->next = node;
   37f0a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   37f0c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   37f0e:	2001      	movs	r0, #1
   37f10:	f7ff f9e8 	bl	372e4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f14:	481e      	ldr	r0, [pc, #120]	; (37f90 <z_impl_k_yield+0x108>)
   37f16:	f7fe f817 	bl	35f48 <z_spin_unlock_valid>
   37f1a:	b370      	cbz	r0, 37f7a <z_impl_k_yield+0xf2>
   37f1c:	4630      	mov	r0, r6
   37f1e:	f7ef fcf7 	bl	27910 <arch_swap>
}
   37f22:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   37f24:	4c1d      	ldr	r4, [pc, #116]	; (37f9c <z_impl_k_yield+0x114>)
   37f26:	f240 42dc 	movw	r2, #1244	; 0x4dc
   37f2a:	4621      	mov	r1, r4
   37f2c:	481c      	ldr	r0, [pc, #112]	; (37fa0 <z_impl_k_yield+0x118>)
   37f2e:	f003 fe03 	bl	3bb38 <printk>
   37f32:	f240 41dc 	movw	r1, #1244	; 0x4dc
   37f36:	4620      	mov	r0, r4
   37f38:	f004 f852 	bl	3bfe0 <assert_post_action>
   37f3c:	e7a9      	b.n	37e92 <z_impl_k_yield+0xa>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37f3e:	4c19      	ldr	r4, [pc, #100]	; (37fa4 <z_impl_k_yield+0x11c>)
   37f40:	2281      	movs	r2, #129	; 0x81
   37f42:	4621      	mov	r1, r4
   37f44:	4816      	ldr	r0, [pc, #88]	; (37fa0 <z_impl_k_yield+0x118>)
   37f46:	f003 fdf7 	bl	3bb38 <printk>
   37f4a:	2181      	movs	r1, #129	; 0x81
   37f4c:	4620      	mov	r0, r4
   37f4e:	f004 f847 	bl	3bfe0 <assert_post_action>
   37f52:	e7ab      	b.n	37eac <z_impl_k_yield+0x24>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   37f54:	4c11      	ldr	r4, [pc, #68]	; (37f9c <z_impl_k_yield+0x114>)
   37f56:	22ba      	movs	r2, #186	; 0xba
   37f58:	4621      	mov	r1, r4
   37f5a:	4811      	ldr	r0, [pc, #68]	; (37fa0 <z_impl_k_yield+0x118>)
   37f5c:	f003 fdec 	bl	3bb38 <printk>
   37f60:	21ba      	movs	r1, #186	; 0xba
   37f62:	4620      	mov	r0, r4
   37f64:	f004 f83c 	bl	3bfe0 <assert_post_action>
   37f68:	e7b5      	b.n	37ed6 <z_impl_k_yield+0x4e>
	sys_dnode_t *const prev = successor->prev;
   37f6a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   37f6c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   37f6e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   37f70:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   37f72:	6065      	str	r5, [r4, #4]
}
   37f74:	e7cb      	b.n	37f0e <z_impl_k_yield+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   37f76:	2400      	movs	r4, #0
   37f78:	e7b2      	b.n	37ee0 <z_impl_k_yield+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f7a:	4c0a      	ldr	r4, [pc, #40]	; (37fa4 <z_impl_k_yield+0x11c>)
   37f7c:	22c3      	movs	r2, #195	; 0xc3
   37f7e:	4621      	mov	r1, r4
   37f80:	4807      	ldr	r0, [pc, #28]	; (37fa0 <z_impl_k_yield+0x118>)
   37f82:	f003 fdd9 	bl	3bb38 <printk>
   37f86:	21c3      	movs	r1, #195	; 0xc3
   37f88:	4620      	mov	r0, r4
   37f8a:	f004 f829 	bl	3bfe0 <assert_post_action>
   37f8e:	e7c5      	b.n	37f1c <z_impl_k_yield+0x94>
   37f90:	20010dbc 	.word	0x20010dbc
   37f94:	20010d7c 	.word	0x20010d7c
   37f98:	2000e638 	.word	0x2000e638
   37f9c:	00045c38 	.word	0x00045c38
   37fa0:	00041c84 	.word	0x00041c84
   37fa4:	00042210 	.word	0x00042210

00037fa8 <z_tick_sleep>:
{
   37fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   37fac:	4604      	mov	r4, r0
   37fae:	460d      	mov	r5, r1
   37fb0:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   37fb4:	2b00      	cmp	r3, #0
   37fb6:	d14e      	bne.n	38056 <z_tick_sleep+0xae>
	if (ticks == 0) {
   37fb8:	ea54 0305 	orrs.w	r3, r4, r5
   37fbc:	d059      	beq.n	38072 <z_tick_sleep+0xca>
	if (Z_TICK_ABS(ticks) <= 0) {
   37fbe:	f06f 0301 	mvn.w	r3, #1
   37fc2:	1b1e      	subs	r6, r3, r4
   37fc4:	f04f 33ff 	mov.w	r3, #4294967295
   37fc8:	eb63 0705 	sbc.w	r7, r3, r5
   37fcc:	2e01      	cmp	r6, #1
   37fce:	f177 0300 	sbcs.w	r3, r7, #0
   37fd2:	db52      	blt.n	3807a <z_tick_sleep+0xd2>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   37fd4:	f06f 0601 	mvn.w	r6, #1
   37fd8:	1b36      	subs	r6, r6, r4
   37fda:	f04f 0320 	mov.w	r3, #32
   37fde:	f3ef 8911 	mrs	r9, BASEPRI
   37fe2:	f383 8812 	msr	BASEPRI_MAX, r3
   37fe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37fea:	4838      	ldr	r0, [pc, #224]	; (380cc <z_tick_sleep+0x124>)
   37fec:	f7fd ff9c 	bl	35f28 <z_spin_lock_valid>
   37ff0:	2800      	cmp	r0, #0
   37ff2:	d046      	beq.n	38082 <z_tick_sleep+0xda>
	z_spin_lock_set_owner(l);
   37ff4:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 380cc <z_tick_sleep+0x124>
   37ff8:	4640      	mov	r0, r8
   37ffa:	f7fd ffb5 	bl	35f68 <z_spin_lock_set_owner>
	pending_current = _current;
   37ffe:	4f34      	ldr	r7, [pc, #208]	; (380d0 <z_tick_sleep+0x128>)
   38000:	68b8      	ldr	r0, [r7, #8]
   38002:	4b34      	ldr	r3, [pc, #208]	; (380d4 <z_tick_sleep+0x12c>)
   38004:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   38006:	f7ff fc03 	bl	37810 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   3800a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   3800c:	4622      	mov	r2, r4
   3800e:	462b      	mov	r3, r5
   38010:	4931      	ldr	r1, [pc, #196]	; (380d8 <z_tick_sleep+0x130>)
   38012:	3018      	adds	r0, #24
   38014:	f000 fa14 	bl	38440 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   38018:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3801a:	7b53      	ldrb	r3, [r2, #13]
   3801c:	f043 0310 	orr.w	r3, r3, #16
   38020:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38022:	4640      	mov	r0, r8
   38024:	f7fd ff90 	bl	35f48 <z_spin_unlock_valid>
   38028:	b3b0      	cbz	r0, 38098 <z_tick_sleep+0xf0>
   3802a:	4648      	mov	r0, r9
   3802c:	f7ef fc70 	bl	27910 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   38030:	4b27      	ldr	r3, [pc, #156]	; (380d0 <z_tick_sleep+0x128>)
   38032:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   38034:	7b5b      	ldrb	r3, [r3, #13]
   38036:	f013 0f10 	tst.w	r3, #16
   3803a:	d138      	bne.n	380ae <z_tick_sleep+0x106>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   3803c:	2500      	movs	r5, #0
   3803e:	f007 fe63 	bl	3fd08 <sys_clock_tick_get_32>
   38042:	1a34      	subs	r4, r6, r0
   38044:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   38048:	2c01      	cmp	r4, #1
   3804a:	f175 0300 	sbcs.w	r3, r5, #0
   3804e:	da3b      	bge.n	380c8 <z_tick_sleep+0x120>
	return 0;
   38050:	2000      	movs	r0, #0
}
   38052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   38056:	f8df 808c 	ldr.w	r8, [pc, #140]	; 380e4 <z_tick_sleep+0x13c>
   3805a:	f44f 629f 	mov.w	r2, #1272	; 0x4f8
   3805e:	4641      	mov	r1, r8
   38060:	481e      	ldr	r0, [pc, #120]	; (380dc <z_tick_sleep+0x134>)
   38062:	f003 fd69 	bl	3bb38 <printk>
   38066:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   3806a:	4640      	mov	r0, r8
   3806c:	f003 ffb8 	bl	3bfe0 <assert_post_action>
   38070:	e7a2      	b.n	37fb8 <z_tick_sleep+0x10>
	z_impl_k_yield();
   38072:	f7ff ff09 	bl	37e88 <z_impl_k_yield>
		return 0;
   38076:	2000      	movs	r0, #0
   38078:	e7eb      	b.n	38052 <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   3807a:	f007 fe45 	bl	3fd08 <sys_clock_tick_get_32>
   3807e:	1906      	adds	r6, r0, r4
   38080:	e7ab      	b.n	37fda <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38082:	4f17      	ldr	r7, [pc, #92]	; (380e0 <z_tick_sleep+0x138>)
   38084:	2281      	movs	r2, #129	; 0x81
   38086:	4639      	mov	r1, r7
   38088:	4814      	ldr	r0, [pc, #80]	; (380dc <z_tick_sleep+0x134>)
   3808a:	f003 fd55 	bl	3bb38 <printk>
   3808e:	2181      	movs	r1, #129	; 0x81
   38090:	4638      	mov	r0, r7
   38092:	f003 ffa5 	bl	3bfe0 <assert_post_action>
   38096:	e7ad      	b.n	37ff4 <z_tick_sleep+0x4c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38098:	4c11      	ldr	r4, [pc, #68]	; (380e0 <z_tick_sleep+0x138>)
   3809a:	22c3      	movs	r2, #195	; 0xc3
   3809c:	4621      	mov	r1, r4
   3809e:	480f      	ldr	r0, [pc, #60]	; (380dc <z_tick_sleep+0x134>)
   380a0:	f003 fd4a 	bl	3bb38 <printk>
   380a4:	21c3      	movs	r1, #195	; 0xc3
   380a6:	4620      	mov	r0, r4
   380a8:	f003 ff9a 	bl	3bfe0 <assert_post_action>
   380ac:	e7bd      	b.n	3802a <z_tick_sleep+0x82>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   380ae:	4c0d      	ldr	r4, [pc, #52]	; (380e4 <z_tick_sleep+0x13c>)
   380b0:	f240 5219 	movw	r2, #1305	; 0x519
   380b4:	4621      	mov	r1, r4
   380b6:	4809      	ldr	r0, [pc, #36]	; (380dc <z_tick_sleep+0x134>)
   380b8:	f003 fd3e 	bl	3bb38 <printk>
   380bc:	f240 5119 	movw	r1, #1305	; 0x519
   380c0:	4620      	mov	r0, r4
   380c2:	f003 ff8d 	bl	3bfe0 <assert_post_action>
   380c6:	e7b9      	b.n	3803c <z_tick_sleep+0x94>
		return ticks;
   380c8:	4620      	mov	r0, r4
   380ca:	e7c2      	b.n	38052 <z_tick_sleep+0xaa>
   380cc:	20010dbc 	.word	0x20010dbc
   380d0:	20010d7c 	.word	0x20010d7c
   380d4:	20010db8 	.word	0x20010db8
   380d8:	00037755 	.word	0x00037755
   380dc:	00041c84 	.word	0x00041c84
   380e0:	00042210 	.word	0x00042210
   380e4:	00045c38 	.word	0x00045c38

000380e8 <z_impl_k_sleep>:
{
   380e8:	b570      	push	{r4, r5, r6, lr}
   380ea:	4604      	mov	r4, r0
   380ec:	460d      	mov	r5, r1
   380ee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   380f2:	bb13      	cbnz	r3, 3813a <z_impl_k_sleep+0x52>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   380f4:	f1b5 3fff 	cmp.w	r5, #4294967295
   380f8:	bf08      	it	eq
   380fa:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   380fe:	d029      	beq.n	38154 <z_impl_k_sleep+0x6c>
	ticks = z_tick_sleep(ticks);
   38100:	4620      	mov	r0, r4
   38102:	4629      	mov	r1, r5
   38104:	f7ff ff50 	bl	37fa8 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   38108:	4604      	mov	r4, r0
   3810a:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   3810c:	0169      	lsls	r1, r5, #5
   3810e:	0143      	lsls	r3, r0, #5
   38110:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   38114:	1a18      	subs	r0, r3, r0
   38116:	eb62 0305 	sbc.w	r3, r2, r5
   3811a:	009a      	lsls	r2, r3, #2
   3811c:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   38120:	0081      	lsls	r1, r0, #2
   38122:	4613      	mov	r3, r2
   38124:	1908      	adds	r0, r1, r4
   38126:	eb45 0303 	adc.w	r3, r5, r3
   3812a:	00da      	lsls	r2, r3, #3
   3812c:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   38130:	00c1      	lsls	r1, r0, #3
   38132:	0bc8      	lsrs	r0, r1, #15
   38134:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   38138:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "");
   3813a:	4e0a      	ldr	r6, [pc, #40]	; (38164 <z_impl_k_sleep+0x7c>)
   3813c:	f44f 62a5 	mov.w	r2, #1320	; 0x528
   38140:	4631      	mov	r1, r6
   38142:	4809      	ldr	r0, [pc, #36]	; (38168 <z_impl_k_sleep+0x80>)
   38144:	f003 fcf8 	bl	3bb38 <printk>
   38148:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   3814c:	4630      	mov	r0, r6
   3814e:	f003 ff47 	bl	3bfe0 <assert_post_action>
   38152:	e7cf      	b.n	380f4 <z_impl_k_sleep+0xc>
		k_thread_suspend(_current);
   38154:	4b05      	ldr	r3, [pc, #20]	; (3816c <z_impl_k_sleep+0x84>)
   38156:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   38158:	f7ff fcc2 	bl	37ae0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   3815c:	f04f 30ff 	mov.w	r0, #4294967295
   38160:	e7ea      	b.n	38138 <z_impl_k_sleep+0x50>
   38162:	bf00      	nop
   38164:	00045c38 	.word	0x00045c38
   38168:	00041c84 	.word	0x00041c84
   3816c:	20010d7c 	.word	0x20010d7c

00038170 <z_impl_z_current_get>:
}
   38170:	4b01      	ldr	r3, [pc, #4]	; (38178 <z_impl_z_current_get+0x8>)
   38172:	6898      	ldr	r0, [r3, #8]
   38174:	4770      	bx	lr
   38176:	bf00      	nop
   38178:	20010d7c 	.word	0x20010d7c

0003817c <z_impl_k_is_preempt_thread>:
   3817c:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   38180:	b933      	cbnz	r3, 38190 <z_impl_k_is_preempt_thread+0x14>
   38182:	4b05      	ldr	r3, [pc, #20]	; (38198 <z_impl_k_is_preempt_thread+0x1c>)
   38184:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   38186:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   38188:	2b7f      	cmp	r3, #127	; 0x7f
   3818a:	d803      	bhi.n	38194 <z_impl_k_is_preempt_thread+0x18>
   3818c:	2001      	movs	r0, #1
   3818e:	4770      	bx	lr
   38190:	2000      	movs	r0, #0
   38192:	4770      	bx	lr
   38194:	2000      	movs	r0, #0
}
   38196:	4770      	bx	lr
   38198:	20010d7c 	.word	0x20010d7c

0003819c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   3819c:	b570      	push	{r4, r5, r6, lr}
   3819e:	4604      	mov	r4, r0
   381a0:	f04f 0320 	mov.w	r3, #32
   381a4:	f3ef 8511 	mrs	r5, BASEPRI
   381a8:	f383 8812 	msr	BASEPRI_MAX, r3
   381ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   381b0:	4834      	ldr	r0, [pc, #208]	; (38284 <z_thread_abort+0xe8>)
   381b2:	f7fd feb9 	bl	35f28 <z_spin_lock_valid>
   381b6:	b1b8      	cbz	r0, 381e8 <z_thread_abort+0x4c>
	z_spin_lock_set_owner(l);
   381b8:	4832      	ldr	r0, [pc, #200]	; (38284 <z_thread_abort+0xe8>)
   381ba:	f7fd fed5 	bl	35f68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   381be:	7b63      	ldrb	r3, [r4, #13]
   381c0:	f013 0f08 	tst.w	r3, #8
   381c4:	d11b      	bne.n	381fe <z_thread_abort+0x62>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   381c6:	4620      	mov	r0, r4
   381c8:	f7ff fd68 	bl	37c9c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   381cc:	4b2e      	ldr	r3, [pc, #184]	; (38288 <z_thread_abort+0xec>)
   381ce:	689b      	ldr	r3, [r3, #8]
   381d0:	42a3      	cmp	r3, r4
   381d2:	d028      	beq.n	38226 <z_thread_abort+0x8a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   381d4:	482b      	ldr	r0, [pc, #172]	; (38284 <z_thread_abort+0xe8>)
   381d6:	f7fd feb7 	bl	35f48 <z_spin_unlock_valid>
   381da:	2800      	cmp	r0, #0
   381dc:	d046      	beq.n	3826c <z_thread_abort+0xd0>
	__asm__ volatile(
   381de:	f385 8811 	msr	BASEPRI, r5
   381e2:	f3bf 8f6f 	isb	sy
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   381e6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   381e8:	4e28      	ldr	r6, [pc, #160]	; (3828c <z_thread_abort+0xf0>)
   381ea:	2281      	movs	r2, #129	; 0x81
   381ec:	4631      	mov	r1, r6
   381ee:	4828      	ldr	r0, [pc, #160]	; (38290 <z_thread_abort+0xf4>)
   381f0:	f003 fca2 	bl	3bb38 <printk>
   381f4:	2181      	movs	r1, #129	; 0x81
   381f6:	4630      	mov	r0, r6
   381f8:	f003 fef2 	bl	3bfe0 <assert_post_action>
   381fc:	e7dc      	b.n	381b8 <z_thread_abort+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   381fe:	4821      	ldr	r0, [pc, #132]	; (38284 <z_thread_abort+0xe8>)
   38200:	f7fd fea2 	bl	35f48 <z_spin_unlock_valid>
   38204:	b120      	cbz	r0, 38210 <z_thread_abort+0x74>
   38206:	f385 8811 	msr	BASEPRI, r5
   3820a:	f3bf 8f6f 	isb	sy
		return;
   3820e:	e7ea      	b.n	381e6 <z_thread_abort+0x4a>
   38210:	4c1e      	ldr	r4, [pc, #120]	; (3828c <z_thread_abort+0xf0>)
   38212:	22ac      	movs	r2, #172	; 0xac
   38214:	4621      	mov	r1, r4
   38216:	481e      	ldr	r0, [pc, #120]	; (38290 <z_thread_abort+0xf4>)
   38218:	f003 fc8e 	bl	3bb38 <printk>
   3821c:	21ac      	movs	r1, #172	; 0xac
   3821e:	4620      	mov	r0, r4
   38220:	f003 fede 	bl	3bfe0 <assert_post_action>
   38224:	e7ef      	b.n	38206 <z_thread_abort+0x6a>
   38226:	f3ef 8305 	mrs	r3, IPSR
	if (thread == _current && !arch_is_in_isr()) {
   3822a:	2b00      	cmp	r3, #0
   3822c:	d1d2      	bne.n	381d4 <z_thread_abort+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3822e:	4815      	ldr	r0, [pc, #84]	; (38284 <z_thread_abort+0xe8>)
   38230:	f7fd fe8a 	bl	35f48 <z_spin_unlock_valid>
   38234:	b178      	cbz	r0, 38256 <z_thread_abort+0xba>
   38236:	4628      	mov	r0, r5
   38238:	f7ef fb6a 	bl	27910 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   3823c:	4c15      	ldr	r4, [pc, #84]	; (38294 <z_thread_abort+0xf8>)
   3823e:	f240 624b 	movw	r2, #1611	; 0x64b
   38242:	4621      	mov	r1, r4
   38244:	4812      	ldr	r0, [pc, #72]	; (38290 <z_thread_abort+0xf4>)
   38246:	f003 fc77 	bl	3bb38 <printk>
   3824a:	f240 614b 	movw	r1, #1611	; 0x64b
   3824e:	4620      	mov	r0, r4
   38250:	f003 fec6 	bl	3bfe0 <assert_post_action>
   38254:	e7be      	b.n	381d4 <z_thread_abort+0x38>
   38256:	4c0d      	ldr	r4, [pc, #52]	; (3828c <z_thread_abort+0xf0>)
   38258:	22c3      	movs	r2, #195	; 0xc3
   3825a:	4621      	mov	r1, r4
   3825c:	480c      	ldr	r0, [pc, #48]	; (38290 <z_thread_abort+0xf4>)
   3825e:	f003 fc6b 	bl	3bb38 <printk>
   38262:	21c3      	movs	r1, #195	; 0xc3
   38264:	4620      	mov	r0, r4
   38266:	f003 febb 	bl	3bfe0 <assert_post_action>
   3826a:	e7e4      	b.n	38236 <z_thread_abort+0x9a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3826c:	4c07      	ldr	r4, [pc, #28]	; (3828c <z_thread_abort+0xf0>)
   3826e:	22ac      	movs	r2, #172	; 0xac
   38270:	4621      	mov	r1, r4
   38272:	4807      	ldr	r0, [pc, #28]	; (38290 <z_thread_abort+0xf4>)
   38274:	f003 fc60 	bl	3bb38 <printk>
   38278:	21ac      	movs	r1, #172	; 0xac
   3827a:	4620      	mov	r0, r4
   3827c:	f003 feb0 	bl	3bfe0 <assert_post_action>
   38280:	e7ad      	b.n	381de <z_thread_abort+0x42>
   38282:	bf00      	nop
   38284:	20010dbc 	.word	0x20010dbc
   38288:	20010d7c 	.word	0x20010d7c
   3828c:	00042210 	.word	0x00042210
   38290:	00041c84 	.word	0x00041c84
   38294:	00045c38 	.word	0x00045c38

00038298 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   38298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3829c:	4606      	mov	r6, r0
   3829e:	460f      	mov	r7, r1
   382a0:	4690      	mov	r8, r2
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
   382a2:	2400      	movs	r4, #0
	__asm__ volatile(
   382a4:	f04f 0320 	mov.w	r3, #32
   382a8:	f3ef 8511 	mrs	r5, BASEPRI
   382ac:	f383 8812 	msr	BASEPRI_MAX, r3
   382b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   382b4:	4825      	ldr	r0, [pc, #148]	; (3834c <z_sched_wake+0xb4>)
   382b6:	f7fd fe37 	bl	35f28 <z_spin_lock_valid>
   382ba:	b128      	cbz	r0, 382c8 <z_sched_wake+0x30>
	z_spin_lock_set_owner(l);
   382bc:	4823      	ldr	r0, [pc, #140]	; (3834c <z_sched_wake+0xb4>)
   382be:	f7fd fe53 	bl	35f68 <z_spin_lock_set_owner>
	bool ret = false;
   382c2:	f04f 0900 	mov.w	r9, #0
	return k;
   382c6:	e02b      	b.n	38320 <z_sched_wake+0x88>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   382c8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 38354 <z_sched_wake+0xbc>
   382cc:	2281      	movs	r2, #129	; 0x81
   382ce:	4649      	mov	r1, r9
   382d0:	481f      	ldr	r0, [pc, #124]	; (38350 <z_sched_wake+0xb8>)
   382d2:	f003 fc31 	bl	3bb38 <printk>
   382d6:	2181      	movs	r1, #129	; 0x81
   382d8:	4648      	mov	r0, r9
   382da:	f003 fe81 	bl	3bfe0 <assert_post_action>
   382de:	e7ed      	b.n	382bc <z_sched_wake+0x24>
   382e0:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   382e2:	f8c0 8014 	str.w	r8, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   382e6:	f7fe fe0b 	bl	36f00 <pended_on_thread>
   382ea:	4621      	mov	r1, r4
   382ec:	f7fe ff8e 	bl	3720c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   382f0:	7b63      	ldrb	r3, [r4, #13]
   382f2:	f023 0302 	bic.w	r3, r3, #2
   382f6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   382f8:	2300      	movs	r3, #0
   382fa:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
   382fc:	f104 0018 	add.w	r0, r4, #24
   38300:	f000 f982 	bl	38608 <z_abort_timeout>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   38304:	4620      	mov	r0, r4
   38306:	f7ff f901 	bl	3750c <ready_thread>
			ret = true;
   3830a:	f04f 0901 	mov.w	r9, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3830e:	480f      	ldr	r0, [pc, #60]	; (3834c <z_sched_wake+0xb4>)
   38310:	f7fd fe1a 	bl	35f48 <z_spin_unlock_valid>
   38314:	b160      	cbz	r0, 38330 <z_sched_wake+0x98>
	__asm__ volatile(
   38316:	f385 8811 	msr	BASEPRI, r5
   3831a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   3831e:	2401      	movs	r4, #1
   38320:	b98c      	cbnz	r4, 38346 <z_sched_wake+0xae>
		thread = _priq_wait_best(&wait_q->waitq);
   38322:	4630      	mov	r0, r6
   38324:	f007 fcbd 	bl	3fca2 <z_priq_dumb_best>
		if (thread != NULL) {
   38328:	4604      	mov	r4, r0
   3832a:	2800      	cmp	r0, #0
   3832c:	d1d8      	bne.n	382e0 <z_sched_wake+0x48>
   3832e:	e7ee      	b.n	3830e <z_sched_wake+0x76>
   38330:	4c08      	ldr	r4, [pc, #32]	; (38354 <z_sched_wake+0xbc>)
   38332:	22ac      	movs	r2, #172	; 0xac
   38334:	4621      	mov	r1, r4
   38336:	4806      	ldr	r0, [pc, #24]	; (38350 <z_sched_wake+0xb8>)
   38338:	f003 fbfe 	bl	3bb38 <printk>
   3833c:	21ac      	movs	r1, #172	; 0xac
   3833e:	4620      	mov	r0, r4
   38340:	f003 fe4e 	bl	3bfe0 <assert_post_action>
   38344:	e7e7      	b.n	38316 <z_sched_wake+0x7e>
		}
	}

	return ret;
}
   38346:	4648      	mov	r0, r9
   38348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3834c:	20010dbc 	.word	0x20010dbc
   38350:	00041c84 	.word	0x00041c84
   38354:	00042210 	.word	0x00042210

00038358 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   38358:	b5d0      	push	{r4, r6, r7, lr}
   3835a:	b082      	sub	sp, #8
   3835c:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   3835e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   38362:	e9cd 6700 	strd	r6, r7, [sp]
   38366:	f7ff faf7 	bl	37958 <z_pend_curr>

	if (data != NULL) {
   3836a:	b11c      	cbz	r4, 38374 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   3836c:	4b02      	ldr	r3, [pc, #8]	; (38378 <z_sched_wait+0x20>)
   3836e:	689b      	ldr	r3, [r3, #8]
   38370:	695b      	ldr	r3, [r3, #20]
   38372:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   38374:	b002      	add	sp, #8
   38376:	bdd0      	pop	{r4, r6, r7, pc}
   38378:	20010d7c 	.word	0x20010d7c

0003837c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3837c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   3837e:	4806      	ldr	r0, [pc, #24]	; (38398 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   38380:	4a06      	ldr	r2, [pc, #24]	; (3839c <z_data_copy+0x20>)
   38382:	1a12      	subs	r2, r2, r0
   38384:	4906      	ldr	r1, [pc, #24]	; (383a0 <z_data_copy+0x24>)
   38386:	f007 fdbb 	bl	3ff00 <memcpy>
   3838a:	4a06      	ldr	r2, [pc, #24]	; (383a4 <z_data_copy+0x28>)
   3838c:	4906      	ldr	r1, [pc, #24]	; (383a8 <z_data_copy+0x2c>)
   3838e:	4807      	ldr	r0, [pc, #28]	; (383ac <z_data_copy+0x30>)
   38390:	f007 fdb6 	bl	3ff00 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   38394:	bd08      	pop	{r3, pc}
   38396:	bf00      	nop
   38398:	2000c500 	.word	0x2000c500
   3839c:	2000cb24 	.word	0x2000cb24
   383a0:	00045fd8 	.word	0x00045fd8
   383a4:	00000000 	.word	0x00000000
   383a8:	00045fc0 	.word	0x00045fc0
   383ac:	2000c500 	.word	0x2000c500

000383b0 <first>:
	return list->head == list;
   383b0:	4b03      	ldr	r3, [pc, #12]	; (383c0 <first+0x10>)
   383b2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   383b4:	4298      	cmp	r0, r3
   383b6:	d000      	beq.n	383ba <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   383b8:	4770      	bx	lr
   383ba:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   383bc:	e7fc      	b.n	383b8 <first+0x8>
   383be:	bf00      	nop
   383c0:	2000c6e4 	.word	0x2000c6e4

000383c4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   383c4:	b130      	cbz	r0, 383d4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   383c6:	4a04      	ldr	r2, [pc, #16]	; (383d8 <next+0x14>)
   383c8:	6852      	ldr	r2, [r2, #4]
   383ca:	4290      	cmp	r0, r2
   383cc:	d001      	beq.n	383d2 <next+0xe>
   383ce:	6800      	ldr	r0, [r0, #0]
   383d0:	4770      	bx	lr
   383d2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   383d4:	4770      	bx	lr
   383d6:	bf00      	nop
   383d8:	2000c6e4 	.word	0x2000c6e4

000383dc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   383dc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   383de:	4b04      	ldr	r3, [pc, #16]	; (383f0 <elapsed+0x14>)
   383e0:	681b      	ldr	r3, [r3, #0]
   383e2:	b10b      	cbz	r3, 383e8 <elapsed+0xc>
   383e4:	2000      	movs	r0, #0
}
   383e6:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   383e8:	f7f2 fa54 	bl	2a894 <sys_clock_elapsed>
   383ec:	e7fb      	b.n	383e6 <elapsed+0xa>
   383ee:	bf00      	nop
   383f0:	20010dc8 	.word	0x20010dc8

000383f4 <next_timeout>:

static int32_t next_timeout(void)
{
   383f4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   383f6:	f7ff ffdb 	bl	383b0 <first>
   383fa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   383fc:	f7ff ffee 	bl	383dc <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   38400:	b18c      	cbz	r4, 38426 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   38402:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   38406:	1a12      	subs	r2, r2, r0
   38408:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   3840c:	2a01      	cmp	r2, #1
   3840e:	f173 0100 	sbcs.w	r1, r3, #0
   38412:	db11      	blt.n	38438 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   38414:	4610      	mov	r0, r2
   38416:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   3841a:	f173 0300 	sbcs.w	r3, r3, #0
   3841e:	db04      	blt.n	3842a <next_timeout+0x36>
   38420:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   38424:	e001      	b.n	3842a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   38426:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3842a:	4b04      	ldr	r3, [pc, #16]	; (3843c <next_timeout+0x48>)
   3842c:	691b      	ldr	r3, [r3, #16]
   3842e:	b113      	cbz	r3, 38436 <next_timeout+0x42>
   38430:	4283      	cmp	r3, r0
   38432:	da00      	bge.n	38436 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   38434:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   38436:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   38438:	2000      	movs	r0, #0
   3843a:	e7f6      	b.n	3842a <next_timeout+0x36>
   3843c:	20010d7c 	.word	0x20010d7c

00038440 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   38440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38444:	b087      	sub	sp, #28
   38446:	9100      	str	r1, [sp, #0]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38448:	f1b3 3fff 	cmp.w	r3, #4294967295
   3844c:	bf08      	it	eq
   3844e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   38452:	f000 80c7 	beq.w	385e4 <z_add_timeout+0x1a4>
   38456:	4604      	mov	r4, r0
   38458:	4616      	mov	r6, r2
   3845a:	461f      	mov	r7, r3
	return node->next != NULL;
   3845c:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3845e:	b14b      	cbz	r3, 38474 <z_add_timeout+0x34>
   38460:	4d62      	ldr	r5, [pc, #392]	; (385ec <z_add_timeout+0x1ac>)
   38462:	225d      	movs	r2, #93	; 0x5d
   38464:	4629      	mov	r1, r5
   38466:	4862      	ldr	r0, [pc, #392]	; (385f0 <z_add_timeout+0x1b0>)
   38468:	f003 fb66 	bl	3bb38 <printk>
   3846c:	215d      	movs	r1, #93	; 0x5d
   3846e:	4628      	mov	r0, r5
   38470:	f003 fdb6 	bl	3bfe0 <assert_post_action>
	to->fn = fn;
   38474:	9b00      	ldr	r3, [sp, #0]
   38476:	60a3      	str	r3, [r4, #8]

	LOCKED(&timeout_lock) {
   38478:	2500      	movs	r5, #0
	__asm__ volatile(
   3847a:	f04f 0320 	mov.w	r3, #32
   3847e:	f3ef 8211 	mrs	r2, BASEPRI
   38482:	f383 8812 	msr	BASEPRI_MAX, r3
   38486:	f3bf 8f6f 	isb	sy
   3848a:	9200      	str	r2, [sp, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3848c:	4859      	ldr	r0, [pc, #356]	; (385f4 <z_add_timeout+0x1b4>)
   3848e:	f7fd fd4b 	bl	35f28 <z_spin_lock_valid>
   38492:	b140      	cbz	r0, 384a6 <z_add_timeout+0x66>
	z_spin_lock_set_owner(l);
   38494:	4857      	ldr	r0, [pc, #348]	; (385f4 <z_add_timeout+0x1b4>)
   38496:	f7fd fd67 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   3849a:	9b00      	ldr	r3, [sp, #0]
   3849c:	9305      	str	r3, [sp, #20]
   3849e:	e9cd ab02 	strd	sl, fp, [sp, #8]
   384a2:	46a3      	mov	fp, r4
   384a4:	e03a      	b.n	3851c <z_add_timeout+0xdc>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   384a6:	2281      	movs	r2, #129	; 0x81
   384a8:	4953      	ldr	r1, [pc, #332]	; (385f8 <z_add_timeout+0x1b8>)
   384aa:	4851      	ldr	r0, [pc, #324]	; (385f0 <z_add_timeout+0x1b0>)
   384ac:	f003 fb44 	bl	3bb38 <printk>
   384b0:	2181      	movs	r1, #129	; 0x81
   384b2:	4851      	ldr	r0, [pc, #324]	; (385f8 <z_add_timeout+0x1b8>)
   384b4:	f003 fd94 	bl	3bfe0 <assert_post_action>
   384b8:	e7ec      	b.n	38494 <z_add_timeout+0x54>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   384ba:	2201      	movs	r2, #1
   384bc:	2300      	movs	r3, #0
   384be:	e051      	b.n	38564 <z_add_timeout+0x124>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   384c0:	f7ff ff8c 	bl	383dc <elapsed>
   384c4:	1833      	adds	r3, r6, r0
   384c6:	eb47 74e0 	adc.w	r4, r7, r0, asr #31
   384ca:	1c5a      	adds	r2, r3, #1
   384cc:	f144 0300 	adc.w	r3, r4, #0
   384d0:	f8cb 2010 	str.w	r2, [fp, #16]
   384d4:	f8cb 3014 	str.w	r3, [fp, #20]
   384d8:	e048      	b.n	3856c <z_add_timeout+0x12c>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   384da:	9b00      	ldr	r3, [sp, #0]
   384dc:	1ae2      	subs	r2, r4, r3
   384de:	9b01      	ldr	r3, [sp, #4]
   384e0:	eb65 0303 	sbc.w	r3, r5, r3
   384e4:	6102      	str	r2, [r0, #16]
   384e6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   384e8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   384ea:	f8cb 3004 	str.w	r3, [fp, #4]
	node->next = successor;
   384ee:	f8cb 0000 	str.w	r0, [fp]
	prev->next = node;
   384f2:	f8c3 b000 	str.w	fp, [r3]
	successor->prev = node;
   384f6:	f8c0 b004 	str.w	fp, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   384fa:	2800      	cmp	r0, #0
   384fc:	d04f      	beq.n	3859e <z_add_timeout+0x15e>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   384fe:	f7ff ff57 	bl	383b0 <first>
   38502:	4583      	cmp	fp, r0
   38504:	d056      	beq.n	385b4 <z_add_timeout+0x174>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38506:	483b      	ldr	r0, [pc, #236]	; (385f4 <z_add_timeout+0x1b4>)
   38508:	f7fd fd1e 	bl	35f48 <z_spin_unlock_valid>
   3850c:	2800      	cmp	r0, #0
   3850e:	d05e      	beq.n	385ce <z_add_timeout+0x18e>
	__asm__ volatile(
   38510:	9b05      	ldr	r3, [sp, #20]
   38512:	f383 8811 	msr	BASEPRI, r3
   38516:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   3851a:	2501      	movs	r5, #1
   3851c:	2d00      	cmp	r5, #0
   3851e:	d161      	bne.n	385e4 <z_add_timeout+0x1a4>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   38520:	f06f 0301 	mvn.w	r3, #1
   38524:	ebb3 0806 	subs.w	r8, r3, r6
   38528:	f04f 30ff 	mov.w	r0, #4294967295
   3852c:	eb60 0907 	sbc.w	r9, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   38530:	f1b8 0f00 	cmp.w	r8, #0
   38534:	f179 0300 	sbcs.w	r3, r9, #0
   38538:	dbc2      	blt.n	384c0 <z_add_timeout+0x80>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   3853a:	4a30      	ldr	r2, [pc, #192]	; (385fc <z_add_timeout+0x1bc>)
   3853c:	6813      	ldr	r3, [r2, #0]
   3853e:	6852      	ldr	r2, [r2, #4]
   38540:	18f3      	adds	r3, r6, r3
   38542:	eb47 0202 	adc.w	r2, r7, r2
   38546:	f06f 0101 	mvn.w	r1, #1
   3854a:	1acb      	subs	r3, r1, r3
   3854c:	9302      	str	r3, [sp, #8]
   3854e:	eb60 0302 	sbc.w	r3, r0, r2
   38552:	9303      	str	r3, [sp, #12]
			to->dticks = MAX(1, ticks);
   38554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   38558:	4602      	mov	r2, r0
   3855a:	460b      	mov	r3, r1
   3855c:	2801      	cmp	r0, #1
   3855e:	f171 0100 	sbcs.w	r1, r1, #0
   38562:	dbaa      	blt.n	384ba <z_add_timeout+0x7a>
   38564:	f8cb 2010 	str.w	r2, [fp, #16]
   38568:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   3856c:	f7ff ff20 	bl	383b0 <first>
   38570:	2800      	cmp	r0, #0
   38572:	d0c2      	beq.n	384fa <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   38574:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   38578:	e9db 2304 	ldrd	r2, r3, [fp, #16]
   3857c:	e9cd 2300 	strd	r2, r3, [sp]
   38580:	42a2      	cmp	r2, r4
   38582:	41ab      	sbcs	r3, r5
   38584:	dba9      	blt.n	384da <z_add_timeout+0x9a>
			to->dticks -= t->dticks;
   38586:	9b00      	ldr	r3, [sp, #0]
   38588:	1b1a      	subs	r2, r3, r4
   3858a:	9b01      	ldr	r3, [sp, #4]
   3858c:	eb63 0305 	sbc.w	r3, r3, r5
   38590:	f8cb 2010 	str.w	r2, [fp, #16]
   38594:	f8cb 3014 	str.w	r3, [fp, #20]
		for (t = first(); t != NULL; t = next(t)) {
   38598:	f7ff ff14 	bl	383c4 <next>
   3859c:	e7e8      	b.n	38570 <z_add_timeout+0x130>
	sys_dnode_t *const tail = list->tail;
   3859e:	4b18      	ldr	r3, [pc, #96]	; (38600 <z_add_timeout+0x1c0>)
   385a0:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   385a2:	f8cb 3000 	str.w	r3, [fp]
	node->prev = tail;
   385a6:	f8cb 2004 	str.w	r2, [fp, #4]
	tail->next = node;
   385aa:	f8c2 b000 	str.w	fp, [r2]
	list->tail = node;
   385ae:	f8c3 b004 	str.w	fp, [r3, #4]
}
   385b2:	e7a4      	b.n	384fe <z_add_timeout+0xbe>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   385b4:	f7ff ff1e 	bl	383f4 <next_timeout>

			if (next_time == 0 ||
   385b8:	4603      	mov	r3, r0
   385ba:	b118      	cbz	r0, 385c4 <z_add_timeout+0x184>
			    _current_cpu->slice_ticks != next_time) {
   385bc:	4a11      	ldr	r2, [pc, #68]	; (38604 <z_add_timeout+0x1c4>)
   385be:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   385c0:	4282      	cmp	r2, r0
   385c2:	d0a0      	beq.n	38506 <z_add_timeout+0xc6>
				sys_clock_set_timeout(next_time, false);
   385c4:	2100      	movs	r1, #0
   385c6:	4618      	mov	r0, r3
   385c8:	f7f2 f930 	bl	2a82c <sys_clock_set_timeout>
   385cc:	e79b      	b.n	38506 <z_add_timeout+0xc6>
   385ce:	4c0a      	ldr	r4, [pc, #40]	; (385f8 <z_add_timeout+0x1b8>)
   385d0:	22ac      	movs	r2, #172	; 0xac
   385d2:	4621      	mov	r1, r4
   385d4:	4806      	ldr	r0, [pc, #24]	; (385f0 <z_add_timeout+0x1b0>)
   385d6:	f003 faaf 	bl	3bb38 <printk>
   385da:	21ac      	movs	r1, #172	; 0xac
   385dc:	4620      	mov	r0, r4
   385de:	f003 fcff 	bl	3bfe0 <assert_post_action>
   385e2:	e795      	b.n	38510 <z_add_timeout+0xd0>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   385e4:	b007      	add	sp, #28
   385e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385ea:	bf00      	nop
   385ec:	00045c5c 	.word	0x00045c5c
   385f0:	00041c84 	.word	0x00041c84
   385f4:	20010dcc 	.word	0x20010dcc
   385f8:	00042210 	.word	0x00042210
   385fc:	2000e738 	.word	0x2000e738
   38600:	2000c6e4 	.word	0x2000c6e4
   38604:	20010d7c 	.word	0x20010d7c

00038608 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   38608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3860c:	4605      	mov	r5, r0
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
   3860e:	2400      	movs	r4, #0
	__asm__ volatile(
   38610:	f04f 0320 	mov.w	r3, #32
   38614:	f3ef 8711 	mrs	r7, BASEPRI
   38618:	f383 8812 	msr	BASEPRI_MAX, r3
   3861c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38620:	481a      	ldr	r0, [pc, #104]	; (3868c <z_abort_timeout+0x84>)
   38622:	f7fd fc81 	bl	35f28 <z_spin_lock_valid>
   38626:	b128      	cbz	r0, 38634 <z_abort_timeout+0x2c>
	z_spin_lock_set_owner(l);
   38628:	4818      	ldr	r0, [pc, #96]	; (3868c <z_abort_timeout+0x84>)
   3862a:	f7fd fc9d 	bl	35f68 <z_spin_lock_set_owner>
	int ret = -EINVAL;
   3862e:	f06f 0815 	mvn.w	r8, #21
	return k;
   38632:	e017      	b.n	38664 <z_abort_timeout+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38634:	4e16      	ldr	r6, [pc, #88]	; (38690 <z_abort_timeout+0x88>)
   38636:	2281      	movs	r2, #129	; 0x81
   38638:	4631      	mov	r1, r6
   3863a:	4816      	ldr	r0, [pc, #88]	; (38694 <z_abort_timeout+0x8c>)
   3863c:	f003 fa7c 	bl	3bb38 <printk>
   38640:	2181      	movs	r1, #129	; 0x81
   38642:	4630      	mov	r0, r6
   38644:	f003 fccc 	bl	3bfe0 <assert_post_action>
   38648:	e7ee      	b.n	38628 <z_abort_timeout+0x20>
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   3864a:	4628      	mov	r0, r5
   3864c:	f007 fb45 	bl	3fcda <remove_timeout>
			ret = 0;
   38650:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38652:	480e      	ldr	r0, [pc, #56]	; (3868c <z_abort_timeout+0x84>)
   38654:	f7fd fc78 	bl	35f48 <z_spin_unlock_valid>
   38658:	b150      	cbz	r0, 38670 <z_abort_timeout+0x68>
	__asm__ volatile(
   3865a:	f387 8811 	msr	BASEPRI, r7
   3865e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   38662:	2401      	movs	r4, #1
   38664:	4626      	mov	r6, r4
   38666:	b974      	cbnz	r4, 38686 <z_abort_timeout+0x7e>
	return node->next != NULL;
   38668:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   3866a:	2b00      	cmp	r3, #0
   3866c:	d1ed      	bne.n	3864a <z_abort_timeout+0x42>
   3866e:	e7f0      	b.n	38652 <z_abort_timeout+0x4a>
   38670:	4c07      	ldr	r4, [pc, #28]	; (38690 <z_abort_timeout+0x88>)
   38672:	22ac      	movs	r2, #172	; 0xac
   38674:	4621      	mov	r1, r4
   38676:	4807      	ldr	r0, [pc, #28]	; (38694 <z_abort_timeout+0x8c>)
   38678:	f003 fa5e 	bl	3bb38 <printk>
   3867c:	21ac      	movs	r1, #172	; 0xac
   3867e:	4620      	mov	r0, r4
   38680:	f003 fcae 	bl	3bfe0 <assert_post_action>
   38684:	e7e9      	b.n	3865a <z_abort_timeout+0x52>
		}
	}

	return ret;
}
   38686:	4640      	mov	r0, r8
   38688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3868c:	20010dcc 	.word	0x20010dcc
   38690:	00042210 	.word	0x00042210
   38694:	00041c84 	.word	0x00041c84

00038698 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   38698:	b570      	push	{r4, r5, r6, lr}
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
   3869a:	2500      	movs	r5, #0
	__asm__ volatile(
   3869c:	f04f 0320 	mov.w	r3, #32
   386a0:	f3ef 8611 	mrs	r6, BASEPRI
   386a4:	f383 8812 	msr	BASEPRI_MAX, r3
   386a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   386ac:	4817      	ldr	r0, [pc, #92]	; (3870c <z_get_next_timeout_expiry+0x74>)
   386ae:	f7fd fc3b 	bl	35f28 <z_spin_lock_valid>
   386b2:	b128      	cbz	r0, 386c0 <z_get_next_timeout_expiry+0x28>
	z_spin_lock_set_owner(l);
   386b4:	4815      	ldr	r0, [pc, #84]	; (3870c <z_get_next_timeout_expiry+0x74>)
   386b6:	f7fd fc57 	bl	35f68 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   386ba:	f04f 34ff 	mov.w	r4, #4294967295
	return k;
   386be:	e019      	b.n	386f4 <z_get_next_timeout_expiry+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   386c0:	4c13      	ldr	r4, [pc, #76]	; (38710 <z_get_next_timeout_expiry+0x78>)
   386c2:	2281      	movs	r2, #129	; 0x81
   386c4:	4621      	mov	r1, r4
   386c6:	4813      	ldr	r0, [pc, #76]	; (38714 <z_get_next_timeout_expiry+0x7c>)
   386c8:	f003 fa36 	bl	3bb38 <printk>
   386cc:	2181      	movs	r1, #129	; 0x81
   386ce:	4620      	mov	r0, r4
   386d0:	f003 fc86 	bl	3bfe0 <assert_post_action>
   386d4:	e7ee      	b.n	386b4 <z_get_next_timeout_expiry+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   386d6:	4d0e      	ldr	r5, [pc, #56]	; (38710 <z_get_next_timeout_expiry+0x78>)
   386d8:	22ac      	movs	r2, #172	; 0xac
   386da:	4629      	mov	r1, r5
   386dc:	480d      	ldr	r0, [pc, #52]	; (38714 <z_get_next_timeout_expiry+0x7c>)
   386de:	f003 fa2b 	bl	3bb38 <printk>
   386e2:	21ac      	movs	r1, #172	; 0xac
   386e4:	4628      	mov	r0, r5
   386e6:	f003 fc7b 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   386ea:	f386 8811 	msr	BASEPRI, r6
   386ee:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   386f2:	2501      	movs	r5, #1
   386f4:	b945      	cbnz	r5, 38708 <z_get_next_timeout_expiry+0x70>
		ret = next_timeout();
   386f6:	f7ff fe7d 	bl	383f4 <next_timeout>
   386fa:	4604      	mov	r4, r0
   386fc:	4803      	ldr	r0, [pc, #12]	; (3870c <z_get_next_timeout_expiry+0x74>)
   386fe:	f7fd fc23 	bl	35f48 <z_spin_unlock_valid>
   38702:	2800      	cmp	r0, #0
   38704:	d1f1      	bne.n	386ea <z_get_next_timeout_expiry+0x52>
   38706:	e7e6      	b.n	386d6 <z_get_next_timeout_expiry+0x3e>
	}
	return ret;
}
   38708:	4620      	mov	r0, r4
   3870a:	bd70      	pop	{r4, r5, r6, pc}
   3870c:	20010dcc 	.word	0x20010dcc
   38710:	00042210 	.word	0x00042210
   38714:	00041c84 	.word	0x00041c84

00038718 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   38718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3871c:	4607      	mov	r7, r0
   3871e:	4688      	mov	r8, r1
	LOCKED(&timeout_lock) {
   38720:	2500      	movs	r5, #0
	__asm__ volatile(
   38722:	f04f 0320 	mov.w	r3, #32
   38726:	f3ef 8611 	mrs	r6, BASEPRI
   3872a:	f383 8812 	msr	BASEPRI_MAX, r3
   3872e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38732:	4820      	ldr	r0, [pc, #128]	; (387b4 <z_set_timeout_expiry+0x9c>)
   38734:	f7fd fbf8 	bl	35f28 <z_spin_lock_valid>
   38738:	b118      	cbz	r0, 38742 <z_set_timeout_expiry+0x2a>
	z_spin_lock_set_owner(l);
   3873a:	481e      	ldr	r0, [pc, #120]	; (387b4 <z_set_timeout_expiry+0x9c>)
   3873c:	f7fd fc14 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   38740:	e019      	b.n	38776 <z_set_timeout_expiry+0x5e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38742:	4c1d      	ldr	r4, [pc, #116]	; (387b8 <z_set_timeout_expiry+0xa0>)
   38744:	2281      	movs	r2, #129	; 0x81
   38746:	4621      	mov	r1, r4
   38748:	481c      	ldr	r0, [pc, #112]	; (387bc <z_set_timeout_expiry+0xa4>)
   3874a:	f003 f9f5 	bl	3bb38 <printk>
   3874e:	2181      	movs	r1, #129	; 0x81
   38750:	4620      	mov	r0, r4
   38752:	f003 fc45 	bl	3bfe0 <assert_post_action>
   38756:	e7f0      	b.n	3873a <z_set_timeout_expiry+0x22>
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   38758:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   3875a:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3875e:	2801      	cmp	r0, #1
   38760:	dd00      	ble.n	38764 <z_set_timeout_expiry+0x4c>
   38762:	b99c      	cbnz	r4, 3878c <z_set_timeout_expiry+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38764:	4813      	ldr	r0, [pc, #76]	; (387b4 <z_set_timeout_expiry+0x9c>)
   38766:	f7fd fbef 	bl	35f48 <z_spin_unlock_valid>
   3876a:	b1b0      	cbz	r0, 3879a <z_set_timeout_expiry+0x82>
	__asm__ volatile(
   3876c:	f386 8811 	msr	BASEPRI, r6
   38770:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   38774:	2501      	movs	r5, #1
   38776:	462c      	mov	r4, r5
   38778:	b9d5      	cbnz	r5, 387b0 <z_set_timeout_expiry+0x98>
		int next_to = next_timeout();
   3877a:	f7ff fe3b 	bl	383f4 <next_timeout>
			      || (ticks <= next_to);
   3877e:	f1b0 3fff 	cmp.w	r0, #4294967295
   38782:	d0e9      	beq.n	38758 <z_set_timeout_expiry+0x40>
   38784:	42b8      	cmp	r0, r7
   38786:	dbe8      	blt.n	3875a <z_set_timeout_expiry+0x42>
   38788:	2401      	movs	r4, #1
   3878a:	e7e6      	b.n	3875a <z_set_timeout_expiry+0x42>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   3878c:	4641      	mov	r1, r8
   3878e:	42b8      	cmp	r0, r7
   38790:	bfa8      	it	ge
   38792:	4638      	movge	r0, r7
   38794:	f7f2 f84a 	bl	2a82c <sys_clock_set_timeout>
   38798:	e7e4      	b.n	38764 <z_set_timeout_expiry+0x4c>
   3879a:	4c07      	ldr	r4, [pc, #28]	; (387b8 <z_set_timeout_expiry+0xa0>)
   3879c:	22ac      	movs	r2, #172	; 0xac
   3879e:	4621      	mov	r1, r4
   387a0:	4806      	ldr	r0, [pc, #24]	; (387bc <z_set_timeout_expiry+0xa4>)
   387a2:	f003 f9c9 	bl	3bb38 <printk>
   387a6:	21ac      	movs	r1, #172	; 0xac
   387a8:	4620      	mov	r0, r4
   387aa:	f003 fc19 	bl	3bfe0 <assert_post_action>
   387ae:	e7dd      	b.n	3876c <z_set_timeout_expiry+0x54>
		}
	}
}
   387b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   387b4:	20010dcc 	.word	0x20010dcc
   387b8:	00042210 	.word	0x00042210
   387bc:	00041c84 	.word	0x00041c84

000387c0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   387c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   387c2:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   387c4:	f7fe fe1e 	bl	37404 <z_time_slice>
	__asm__ volatile(
   387c8:	f04f 0320 	mov.w	r3, #32
   387cc:	f3ef 8411 	mrs	r4, BASEPRI
   387d0:	f383 8812 	msr	BASEPRI_MAX, r3
   387d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   387d8:	484a      	ldr	r0, [pc, #296]	; (38904 <sys_clock_announce+0x144>)
   387da:	f7fd fba5 	bl	35f28 <z_spin_lock_valid>
   387de:	b128      	cbz	r0, 387ec <sys_clock_announce+0x2c>
	z_spin_lock_set_owner(l);
   387e0:	4848      	ldr	r0, [pc, #288]	; (38904 <sys_clock_announce+0x144>)
   387e2:	f7fd fbc1 	bl	35f68 <z_spin_lock_set_owner>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   387e6:	4b48      	ldr	r3, [pc, #288]	; (38908 <sys_clock_announce+0x148>)
   387e8:	601d      	str	r5, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   387ea:	e022      	b.n	38832 <sys_clock_announce+0x72>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   387ec:	4e47      	ldr	r6, [pc, #284]	; (3890c <sys_clock_announce+0x14c>)
   387ee:	2281      	movs	r2, #129	; 0x81
   387f0:	4631      	mov	r1, r6
   387f2:	4847      	ldr	r0, [pc, #284]	; (38910 <sys_clock_announce+0x150>)
   387f4:	f003 f9a0 	bl	3bb38 <printk>
   387f8:	2181      	movs	r1, #129	; 0x81
   387fa:	4630      	mov	r0, r6
   387fc:	f003 fbf0 	bl	3bfe0 <assert_post_action>
   38800:	e7ee      	b.n	387e0 <sys_clock_announce+0x20>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38802:	4e42      	ldr	r6, [pc, #264]	; (3890c <sys_clock_announce+0x14c>)
   38804:	22ac      	movs	r2, #172	; 0xac
   38806:	4631      	mov	r1, r6
   38808:	4841      	ldr	r0, [pc, #260]	; (38910 <sys_clock_announce+0x150>)
   3880a:	f003 f995 	bl	3bb38 <printk>
   3880e:	21ac      	movs	r1, #172	; 0xac
   38810:	4630      	mov	r0, r6
   38812:	f003 fbe5 	bl	3bfe0 <assert_post_action>
   38816:	e030      	b.n	3887a <sys_clock_announce+0xba>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38818:	4d3c      	ldr	r5, [pc, #240]	; (3890c <sys_clock_announce+0x14c>)
   3881a:	2281      	movs	r2, #129	; 0x81
   3881c:	4629      	mov	r1, r5
   3881e:	483c      	ldr	r0, [pc, #240]	; (38910 <sys_clock_announce+0x150>)
   38820:	f003 f98a 	bl	3bb38 <printk>
   38824:	2181      	movs	r1, #129	; 0x81
   38826:	4628      	mov	r0, r5
   38828:	f003 fbda 	bl	3bfe0 <assert_post_action>
	z_spin_lock_set_owner(l);
   3882c:	4835      	ldr	r0, [pc, #212]	; (38904 <sys_clock_announce+0x144>)
   3882e:	f7fd fb9b 	bl	35f68 <z_spin_lock_set_owner>
   38832:	f7ff fdbd 	bl	383b0 <first>
   38836:	4605      	mov	r5, r0
   38838:	2800      	cmp	r0, #0
   3883a:	d033      	beq.n	388a4 <sys_clock_announce+0xe4>
   3883c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   38840:	4b31      	ldr	r3, [pc, #196]	; (38908 <sys_clock_announce+0x148>)
   38842:	6819      	ldr	r1, [r3, #0]
   38844:	17cb      	asrs	r3, r1, #31
   38846:	42b1      	cmp	r1, r6
   38848:	41bb      	sbcs	r3, r7
   3884a:	db2b      	blt.n	388a4 <sys_clock_announce+0xe4>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   3884c:	4831      	ldr	r0, [pc, #196]	; (38914 <sys_clock_announce+0x154>)
   3884e:	e9d0 2300 	ldrd	r2, r3, [r0]
   38852:	1992      	adds	r2, r2, r6
   38854:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
   38858:	e9c0 2300 	strd	r2, r3, [r0]
		announce_remaining -= dt;
   3885c:	1b89      	subs	r1, r1, r6
   3885e:	4b2a      	ldr	r3, [pc, #168]	; (38908 <sys_clock_announce+0x148>)
   38860:	6019      	str	r1, [r3, #0]
		t->dticks = 0;
   38862:	2200      	movs	r2, #0
   38864:	2300      	movs	r3, #0
   38866:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   3886a:	4628      	mov	r0, r5
   3886c:	f007 fa35 	bl	3fcda <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38870:	4824      	ldr	r0, [pc, #144]	; (38904 <sys_clock_announce+0x144>)
   38872:	f7fd fb69 	bl	35f48 <z_spin_unlock_valid>
   38876:	2800      	cmp	r0, #0
   38878:	d0c3      	beq.n	38802 <sys_clock_announce+0x42>
	__asm__ volatile(
   3887a:	f384 8811 	msr	BASEPRI, r4
   3887e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   38882:	68ab      	ldr	r3, [r5, #8]
   38884:	4628      	mov	r0, r5
   38886:	4798      	blx	r3
	__asm__ volatile(
   38888:	f04f 0320 	mov.w	r3, #32
   3888c:	f3ef 8411 	mrs	r4, BASEPRI
   38890:	f383 8812 	msr	BASEPRI_MAX, r3
   38894:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38898:	481a      	ldr	r0, [pc, #104]	; (38904 <sys_clock_announce+0x144>)
   3889a:	f7fd fb45 	bl	35f28 <z_spin_lock_valid>
   3889e:	2800      	cmp	r0, #0
   388a0:	d1c4      	bne.n	3882c <sys_clock_announce+0x6c>
   388a2:	e7b9      	b.n	38818 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   388a4:	b145      	cbz	r5, 388b8 <sys_clock_announce+0xf8>
		first()->dticks -= announce_remaining;
   388a6:	4b18      	ldr	r3, [pc, #96]	; (38908 <sys_clock_announce+0x148>)
   388a8:	6819      	ldr	r1, [r3, #0]
   388aa:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   388ae:	1a52      	subs	r2, r2, r1
   388b0:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   388b4:	e9c5 2304 	strd	r2, r3, [r5, #16]
	}

	curr_tick += announce_remaining;
   388b8:	4816      	ldr	r0, [pc, #88]	; (38914 <sys_clock_announce+0x154>)
   388ba:	4913      	ldr	r1, [pc, #76]	; (38908 <sys_clock_announce+0x148>)
   388bc:	680d      	ldr	r5, [r1, #0]
   388be:	e9d0 2300 	ldrd	r2, r3, [r0]
   388c2:	1952      	adds	r2, r2, r5
   388c4:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   388c8:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   388cc:	2500      	movs	r5, #0
   388ce:	600d      	str	r5, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   388d0:	f7ff fd90 	bl	383f4 <next_timeout>
   388d4:	4629      	mov	r1, r5
   388d6:	f7f1 ffa9 	bl	2a82c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   388da:	480a      	ldr	r0, [pc, #40]	; (38904 <sys_clock_announce+0x144>)
   388dc:	f7fd fb34 	bl	35f48 <z_spin_unlock_valid>
   388e0:	b120      	cbz	r0, 388ec <sys_clock_announce+0x12c>
	__asm__ volatile(
   388e2:	f384 8811 	msr	BASEPRI, r4
   388e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   388ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   388ec:	4d07      	ldr	r5, [pc, #28]	; (3890c <sys_clock_announce+0x14c>)
   388ee:	22ac      	movs	r2, #172	; 0xac
   388f0:	4629      	mov	r1, r5
   388f2:	4807      	ldr	r0, [pc, #28]	; (38910 <sys_clock_announce+0x150>)
   388f4:	f003 f920 	bl	3bb38 <printk>
   388f8:	21ac      	movs	r1, #172	; 0xac
   388fa:	4628      	mov	r0, r5
   388fc:	f003 fb70 	bl	3bfe0 <assert_post_action>
   38900:	e7ef      	b.n	388e2 <sys_clock_announce+0x122>
   38902:	bf00      	nop
   38904:	20010dcc 	.word	0x20010dcc
   38908:	20010dc8 	.word	0x20010dc8
   3890c:	00042210 	.word	0x00042210
   38910:	00041c84 	.word	0x00041c84
   38914:	2000e738 	.word	0x2000e738

00038918 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   38918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   3891a:	2400      	movs	r4, #0
	__asm__ volatile(
   3891c:	f04f 0320 	mov.w	r3, #32
   38920:	f3ef 8511 	mrs	r5, BASEPRI
   38924:	f383 8812 	msr	BASEPRI_MAX, r3
   38928:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3892c:	481a      	ldr	r0, [pc, #104]	; (38998 <sys_clock_tick_get+0x80>)
   3892e:	f7fd fafb 	bl	35f28 <z_spin_lock_valid>
   38932:	b128      	cbz	r0, 38940 <sys_clock_tick_get+0x28>
	z_spin_lock_set_owner(l);
   38934:	4818      	ldr	r0, [pc, #96]	; (38998 <sys_clock_tick_get+0x80>)
   38936:	f7fd fb17 	bl	35f68 <z_spin_lock_set_owner>
	uint64_t t = 0U;
   3893a:	2600      	movs	r6, #0
   3893c:	2700      	movs	r7, #0
	return k;
   3893e:	e019      	b.n	38974 <sys_clock_tick_get+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38940:	4e16      	ldr	r6, [pc, #88]	; (3899c <sys_clock_tick_get+0x84>)
   38942:	2281      	movs	r2, #129	; 0x81
   38944:	4631      	mov	r1, r6
   38946:	4816      	ldr	r0, [pc, #88]	; (389a0 <sys_clock_tick_get+0x88>)
   38948:	f003 f8f6 	bl	3bb38 <printk>
   3894c:	2181      	movs	r1, #129	; 0x81
   3894e:	4630      	mov	r0, r6
   38950:	f003 fb46 	bl	3bfe0 <assert_post_action>
   38954:	e7ee      	b.n	38934 <sys_clock_tick_get+0x1c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38956:	4c11      	ldr	r4, [pc, #68]	; (3899c <sys_clock_tick_get+0x84>)
   38958:	22ac      	movs	r2, #172	; 0xac
   3895a:	4621      	mov	r1, r4
   3895c:	4810      	ldr	r0, [pc, #64]	; (389a0 <sys_clock_tick_get+0x88>)
   3895e:	f003 f8eb 	bl	3bb38 <printk>
   38962:	21ac      	movs	r1, #172	; 0xac
   38964:	4620      	mov	r0, r4
   38966:	f003 fb3b 	bl	3bfe0 <assert_post_action>
	__asm__ volatile(
   3896a:	f385 8811 	msr	BASEPRI, r5
   3896e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   38972:	2401      	movs	r4, #1
   38974:	b96c      	cbnz	r4, 38992 <sys_clock_tick_get+0x7a>
		t = curr_tick + sys_clock_elapsed();
   38976:	f7f1 ff8d 	bl	2a894 <sys_clock_elapsed>
   3897a:	4b0a      	ldr	r3, [pc, #40]	; (389a4 <sys_clock_tick_get+0x8c>)
   3897c:	e9d3 6700 	ldrd	r6, r7, [r3]
   38980:	1836      	adds	r6, r6, r0
   38982:	f147 0700 	adc.w	r7, r7, #0
   38986:	4804      	ldr	r0, [pc, #16]	; (38998 <sys_clock_tick_get+0x80>)
   38988:	f7fd fade 	bl	35f48 <z_spin_unlock_valid>
   3898c:	2800      	cmp	r0, #0
   3898e:	d1ec      	bne.n	3896a <sys_clock_tick_get+0x52>
   38990:	e7e1      	b.n	38956 <sys_clock_tick_get+0x3e>
	}
	return t;
}
   38992:	4630      	mov	r0, r6
   38994:	4639      	mov	r1, r7
   38996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   38998:	20010dcc 	.word	0x20010dcc
   3899c:	00042210 	.word	0x00042210
   389a0:	00041c84 	.word	0x00041c84
   389a4:	2000e738 	.word	0x2000e738

000389a8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   389a8:	b570      	push	{r4, r5, r6, lr}
   389aa:	4604      	mov	r4, r0
	__asm__ volatile(
   389ac:	f04f 0320 	mov.w	r3, #32
   389b0:	f3ef 8611 	mrs	r6, BASEPRI
   389b4:	f383 8812 	msr	BASEPRI_MAX, r3
   389b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   389bc:	4849      	ldr	r0, [pc, #292]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   389be:	f7fd fab3 	bl	35f28 <z_spin_lock_valid>
   389c2:	2800      	cmp	r0, #0
   389c4:	d048      	beq.n	38a58 <z_timer_expiration_handler+0xb0>
	z_spin_lock_set_owner(l);
   389c6:	4847      	ldr	r0, [pc, #284]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   389c8:	f7fd face 	bl	35f68 <z_spin_lock_set_owner>
	return k;
   389cc:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   389ce:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   389d2:	ea52 0103 	orrs.w	r1, r2, r3
   389d6:	d005      	beq.n	389e4 <z_timer_expiration_handler+0x3c>
   389d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   389dc:	bf08      	it	eq
   389de:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   389e2:	d144      	bne.n	38a6e <z_timer_expiration_handler+0xc6>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   389e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   389e6:	3301      	adds	r3, #1
   389e8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   389ea:	6a23      	ldr	r3, [r4, #32]
   389ec:	b1db      	cbz	r3, 38a26 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   389ee:	483d      	ldr	r0, [pc, #244]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   389f0:	f7fd faaa 	bl	35f48 <z_spin_unlock_valid>
   389f4:	2800      	cmp	r0, #0
   389f6:	d03f      	beq.n	38a78 <z_timer_expiration_handler+0xd0>
	__asm__ volatile(
   389f8:	f386 8811 	msr	BASEPRI, r6
   389fc:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   38a00:	6a23      	ldr	r3, [r4, #32]
   38a02:	4620      	mov	r0, r4
   38a04:	4798      	blx	r3
	__asm__ volatile(
   38a06:	f04f 0320 	mov.w	r3, #32
   38a0a:	f3ef 8511 	mrs	r5, BASEPRI
   38a0e:	f383 8812 	msr	BASEPRI_MAX, r3
   38a12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38a16:	4833      	ldr	r0, [pc, #204]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   38a18:	f7fd fa86 	bl	35f28 <z_spin_lock_valid>
   38a1c:	2800      	cmp	r0, #0
   38a1e:	d036      	beq.n	38a8e <z_timer_expiration_handler+0xe6>
	z_spin_lock_set_owner(l);
   38a20:	4830      	ldr	r0, [pc, #192]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   38a22:	f7fd faa1 	bl	35f68 <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   38a26:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   38a2a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38a2c:	42a3      	cmp	r3, r4
   38a2e:	d039      	beq.n	38aa4 <z_timer_expiration_handler+0xfc>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   38a30:	2c00      	cmp	r4, #0
   38a32:	d037      	beq.n	38aa4 <z_timer_expiration_handler+0xfc>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   38a34:	4620      	mov	r0, r4
   38a36:	f7fe fb03 	bl	37040 <z_unpend_thread_no_timeout>
   38a3a:	2300      	movs	r3, #0
   38a3c:	67e3      	str	r3, [r4, #124]	; 0x7c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38a3e:	4829      	ldr	r0, [pc, #164]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   38a40:	f7fd fa82 	bl	35f48 <z_spin_unlock_valid>
   38a44:	2800      	cmp	r0, #0
   38a46:	d041      	beq.n	38acc <z_timer_expiration_handler+0x124>
	__asm__ volatile(
   38a48:	f385 8811 	msr	BASEPRI, r5
   38a4c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   38a50:	4620      	mov	r0, r4
   38a52:	f7fe fdaf 	bl	375b4 <z_ready_thread>
}
   38a56:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38a58:	4d23      	ldr	r5, [pc, #140]	; (38ae8 <z_timer_expiration_handler+0x140>)
   38a5a:	2281      	movs	r2, #129	; 0x81
   38a5c:	4629      	mov	r1, r5
   38a5e:	4823      	ldr	r0, [pc, #140]	; (38aec <z_timer_expiration_handler+0x144>)
   38a60:	f003 f86a 	bl	3bb38 <printk>
   38a64:	2181      	movs	r1, #129	; 0x81
   38a66:	4628      	mov	r0, r5
   38a68:	f003 faba 	bl	3bfe0 <assert_post_action>
   38a6c:	e7ab      	b.n	389c6 <z_timer_expiration_handler+0x1e>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38a6e:	4920      	ldr	r1, [pc, #128]	; (38af0 <z_timer_expiration_handler+0x148>)
   38a70:	4620      	mov	r0, r4
   38a72:	f7ff fce5 	bl	38440 <z_add_timeout>
   38a76:	e7b5      	b.n	389e4 <z_timer_expiration_handler+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38a78:	4d1b      	ldr	r5, [pc, #108]	; (38ae8 <z_timer_expiration_handler+0x140>)
   38a7a:	22ac      	movs	r2, #172	; 0xac
   38a7c:	4629      	mov	r1, r5
   38a7e:	481b      	ldr	r0, [pc, #108]	; (38aec <z_timer_expiration_handler+0x144>)
   38a80:	f003 f85a 	bl	3bb38 <printk>
   38a84:	21ac      	movs	r1, #172	; 0xac
   38a86:	4628      	mov	r0, r5
   38a88:	f003 faaa 	bl	3bfe0 <assert_post_action>
   38a8c:	e7b4      	b.n	389f8 <z_timer_expiration_handler+0x50>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38a8e:	4e16      	ldr	r6, [pc, #88]	; (38ae8 <z_timer_expiration_handler+0x140>)
   38a90:	2281      	movs	r2, #129	; 0x81
   38a92:	4631      	mov	r1, r6
   38a94:	4815      	ldr	r0, [pc, #84]	; (38aec <z_timer_expiration_handler+0x144>)
   38a96:	f003 f84f 	bl	3bb38 <printk>
   38a9a:	2181      	movs	r1, #129	; 0x81
   38a9c:	4630      	mov	r0, r6
   38a9e:	f003 fa9f 	bl	3bfe0 <assert_post_action>
   38aa2:	e7bd      	b.n	38a20 <z_timer_expiration_handler+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38aa4:	480f      	ldr	r0, [pc, #60]	; (38ae4 <z_timer_expiration_handler+0x13c>)
   38aa6:	f7fd fa4f 	bl	35f48 <z_spin_unlock_valid>
   38aaa:	b120      	cbz	r0, 38ab6 <z_timer_expiration_handler+0x10e>
   38aac:	f385 8811 	msr	BASEPRI, r5
   38ab0:	f3bf 8f6f 	isb	sy
		return;
   38ab4:	e7cf      	b.n	38a56 <z_timer_expiration_handler+0xae>
   38ab6:	4c0c      	ldr	r4, [pc, #48]	; (38ae8 <z_timer_expiration_handler+0x140>)
   38ab8:	22ac      	movs	r2, #172	; 0xac
   38aba:	4621      	mov	r1, r4
   38abc:	480b      	ldr	r0, [pc, #44]	; (38aec <z_timer_expiration_handler+0x144>)
   38abe:	f003 f83b 	bl	3bb38 <printk>
   38ac2:	21ac      	movs	r1, #172	; 0xac
   38ac4:	4620      	mov	r0, r4
   38ac6:	f003 fa8b 	bl	3bfe0 <assert_post_action>
   38aca:	e7ef      	b.n	38aac <z_timer_expiration_handler+0x104>
   38acc:	4e06      	ldr	r6, [pc, #24]	; (38ae8 <z_timer_expiration_handler+0x140>)
   38ace:	22ac      	movs	r2, #172	; 0xac
   38ad0:	4631      	mov	r1, r6
   38ad2:	4806      	ldr	r0, [pc, #24]	; (38aec <z_timer_expiration_handler+0x144>)
   38ad4:	f003 f830 	bl	3bb38 <printk>
   38ad8:	21ac      	movs	r1, #172	; 0xac
   38ada:	4630      	mov	r0, r6
   38adc:	f003 fa80 	bl	3bfe0 <assert_post_action>
   38ae0:	e7b2      	b.n	38a48 <z_timer_expiration_handler+0xa0>
   38ae2:	bf00      	nop
   38ae4:	20010dd0 	.word	0x20010dd0
   38ae8:	00042210 	.word	0x00042210
   38aec:	00041c84 	.word	0x00041c84
   38af0:	000389a9 	.word	0x000389a9

00038af4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   38af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38af8:	b087      	sub	sp, #28
   38afa:	4614      	mov	r4, r2
   38afc:	461d      	mov	r5, r3
   38afe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   38b02:	f1b3 3fff 	cmp.w	r3, #4294967295
   38b06:	bf08      	it	eq
   38b08:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   38b0c:	d035      	beq.n	38b7a <z_impl_k_timer_start+0x86>
   38b0e:	4606      	mov	r6, r0
   38b10:	4613      	mov	r3, r2
   38b12:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   38b14:	f1b9 3fff 	cmp.w	r9, #4294967295
   38b18:	bf08      	it	eq
   38b1a:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   38b1e:	d012      	beq.n	38b46 <z_impl_k_timer_start+0x52>
   38b20:	ea58 0109 	orrs.w	r1, r8, r9
   38b24:	d00f      	beq.n	38b46 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   38b26:	f06f 0701 	mvn.w	r7, #1
   38b2a:	ebb7 0708 	subs.w	r7, r7, r8
   38b2e:	9702      	str	r7, [sp, #8]
   38b30:	f04f 31ff 	mov.w	r1, #4294967295
   38b34:	eb61 0709 	sbc.w	r7, r1, r9
   38b38:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   38b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   38b3e:	2800      	cmp	r0, #0
   38b40:	f171 0100 	sbcs.w	r1, r1, #0
   38b44:	db1c      	blt.n	38b80 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   38b46:	f06f 0101 	mvn.w	r1, #1
   38b4a:	ebb1 0a03 	subs.w	sl, r1, r3
   38b4e:	f04f 31ff 	mov.w	r1, #4294967295
   38b52:	eb61 0b02 	sbc.w	fp, r1, r2
   38b56:	f1ba 0f00 	cmp.w	sl, #0
   38b5a:	f17b 0100 	sbcs.w	r1, fp, #0
   38b5e:	db23      	blt.n	38ba8 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   38b60:	4630      	mov	r0, r6
   38b62:	f7ff fd51 	bl	38608 <z_abort_timeout>
	timer->period = period;
   38b66:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   38b6a:	2300      	movs	r3, #0
   38b6c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   38b6e:	4622      	mov	r2, r4
   38b70:	462b      	mov	r3, r5
   38b72:	4917      	ldr	r1, [pc, #92]	; (38bd0 <z_impl_k_timer_start+0xdc>)
   38b74:	4630      	mov	r0, r6
   38b76:	f7ff fc63 	bl	38440 <z_add_timeout>
		     duration);
}
   38b7a:	b007      	add	sp, #28
   38b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   38b80:	f118 31ff 	adds.w	r1, r8, #4294967295
   38b84:	9104      	str	r1, [sp, #16]
   38b86:	f149 31ff 	adc.w	r1, r9, #4294967295
   38b8a:	9105      	str	r1, [sp, #20]
   38b8c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   38b90:	4638      	mov	r0, r7
   38b92:	4641      	mov	r1, r8
   38b94:	2f01      	cmp	r7, #1
   38b96:	f178 0700 	sbcs.w	r7, r8, #0
   38b9a:	db02      	blt.n	38ba2 <z_impl_k_timer_start+0xae>
   38b9c:	4680      	mov	r8, r0
   38b9e:	4689      	mov	r9, r1
   38ba0:	e7d1      	b.n	38b46 <z_impl_k_timer_start+0x52>
   38ba2:	2001      	movs	r0, #1
   38ba4:	2100      	movs	r1, #0
   38ba6:	e7f9      	b.n	38b9c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   38ba8:	f113 33ff 	adds.w	r3, r3, #4294967295
   38bac:	9300      	str	r3, [sp, #0]
   38bae:	f142 33ff 	adc.w	r3, r2, #4294967295
   38bb2:	9301      	str	r3, [sp, #4]
   38bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
   38bb8:	4602      	mov	r2, r0
   38bba:	460b      	mov	r3, r1
   38bbc:	2800      	cmp	r0, #0
   38bbe:	f171 0100 	sbcs.w	r1, r1, #0
   38bc2:	db02      	blt.n	38bca <z_impl_k_timer_start+0xd6>
   38bc4:	4614      	mov	r4, r2
   38bc6:	461d      	mov	r5, r3
   38bc8:	e7ca      	b.n	38b60 <z_impl_k_timer_start+0x6c>
   38bca:	2200      	movs	r2, #0
   38bcc:	4613      	mov	r3, r2
   38bce:	e7f9      	b.n	38bc4 <z_impl_k_timer_start+0xd0>
   38bd0:	000389a9 	.word	0x000389a9

00038bd4 <signal_poller>:

	return events_registered;
}

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   38bd4:	b570      	push	{r4, r5, r6, lr}
   38bd6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   38bd8:	6880      	ldr	r0, [r0, #8]
   38bda:	f007 f8fa 	bl	3fdd2 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   38bde:	4604      	mov	r4, r0
   38be0:	b1e0      	cbz	r0, 38c1c <signal_poller+0x48>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   38be2:	7b63      	ldrb	r3, [r4, #13]

	if (!z_is_thread_pending(thread)) {
   38be4:	f013 0f02 	tst.w	r3, #2
   38be8:	d031      	beq.n	38c4e <signal_poller+0x7a>
	return thread->base.timeout.dticks == _EXPIRED;
   38bea:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   38bee:	f06f 0001 	mvn.w	r0, #1
   38bf2:	f04f 31ff 	mov.w	r1, #4294967295
   38bf6:	428b      	cmp	r3, r1
   38bf8:	bf08      	it	eq
   38bfa:	4282      	cmpeq	r2, r0
   38bfc:	d029      	beq.n	38c52 <signal_poller+0x7e>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   38bfe:	4620      	mov	r0, r4
   38c00:	f7fe fb24 	bl	3724c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   38c04:	2d08      	cmp	r5, #8
   38c06:	d014      	beq.n	38c32 <signal_poller+0x5e>
   38c08:	2300      	movs	r3, #0
   38c0a:	67e3      	str	r3, [r4, #124]	; 0x7c
	uint8_t state = thread->base.thread_state;
   38c0c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38c0e:	f013 0f1f 	tst.w	r3, #31
   38c12:	d113      	bne.n	38c3c <signal_poller+0x68>
	return node->next != NULL;
   38c14:	69a3      	ldr	r3, [r4, #24]
   38c16:	b17b      	cbz	r3, 38c38 <signal_poller+0x64>
   38c18:	2300      	movs	r3, #0
   38c1a:	e010      	b.n	38c3e <signal_poller+0x6a>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   38c1c:	4e0e      	ldr	r6, [pc, #56]	; (38c58 <signal_poller+0x84>)
   38c1e:	22f9      	movs	r2, #249	; 0xf9
   38c20:	4631      	mov	r1, r6
   38c22:	480e      	ldr	r0, [pc, #56]	; (38c5c <signal_poller+0x88>)
   38c24:	f002 ff88 	bl	3bb38 <printk>
   38c28:	21f9      	movs	r1, #249	; 0xf9
   38c2a:	4630      	mov	r0, r6
   38c2c:	f003 f9d8 	bl	3bfe0 <assert_post_action>
   38c30:	e7d7      	b.n	38be2 <signal_poller+0xe>
	arch_thread_return_value_set(thread,
   38c32:	f06f 0303 	mvn.w	r3, #3
   38c36:	e7e8      	b.n	38c0a <signal_poller+0x36>
   38c38:	2301      	movs	r3, #1
   38c3a:	e000      	b.n	38c3e <signal_poller+0x6a>
   38c3c:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   38c3e:	b90b      	cbnz	r3, 38c44 <signal_poller+0x70>
		return 0;
   38c40:	2000      	movs	r0, #0
   38c42:	e005      	b.n	38c50 <signal_poller+0x7c>
	}

	z_ready_thread(thread);
   38c44:	4620      	mov	r0, r4
   38c46:	f7fe fcb5 	bl	375b4 <z_ready_thread>

	return 0;
   38c4a:	2000      	movs	r0, #0
   38c4c:	e000      	b.n	38c50 <signal_poller+0x7c>
		return 0;
   38c4e:	2000      	movs	r0, #0
}
   38c50:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   38c52:	f06f 000a 	mvn.w	r0, #10
   38c56:	e7fb      	b.n	38c50 <signal_poller+0x7c>
   38c58:	00045c80 	.word	0x00045c80
   38c5c:	00041c84 	.word	0x00041c84

00038c60 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   38c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c64:	b08d      	sub	sp, #52	; 0x34
   38c66:	4605      	mov	r5, r0
   38c68:	9106      	str	r1, [sp, #24]
   38c6a:	9202      	str	r2, [sp, #8]
   38c6c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   38c6e:	4ba6      	ldr	r3, [pc, #664]	; (38f08 <z_impl_k_poll+0x2a8>)
   38c70:	f8d3 9008 	ldr.w	r9, [r3, #8]
   38c74:	f109 0660 	add.w	r6, r9, #96	; 0x60

	poller->is_polling = true;
   38c78:	2301      	movs	r3, #1
   38c7a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   38c7e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
   38c82:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   38c86:	b973      	cbnz	r3, 38ca6 <z_impl_k_poll+0x46>
	__ASSERT(events != NULL, "NULL events\n");
   38c88:	b1d5      	cbz	r5, 38cc0 <z_impl_k_poll+0x60>
	__ASSERT(num_events >= 0, "<0 events\n");
   38c8a:	9b06      	ldr	r3, [sp, #24]
   38c8c:	2b00      	cmp	r3, #0
   38c8e:	db24      	blt.n	38cda <z_impl_k_poll+0x7a>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   38c90:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   38c94:	4613      	mov	r3, r2
   38c96:	430b      	orrs	r3, r1
   38c98:	bf0c      	ite	eq
   38c9a:	2301      	moveq	r3, #1
   38c9c:	2300      	movne	r3, #0
   38c9e:	9307      	str	r3, [sp, #28]
	for (int ii = 0; ii < num_events; ii++) {
   38ca0:	2700      	movs	r7, #0
	int events_registered = 0;
   38ca2:	46bb      	mov	fp, r7
	for (int ii = 0; ii < num_events; ii++) {
   38ca4:	e071      	b.n	38d8a <z_impl_k_poll+0x12a>
	__ASSERT(!arch_is_in_isr(), "");
   38ca6:	4c99      	ldr	r4, [pc, #612]	; (38f0c <z_impl_k_poll+0x2ac>)
   38ca8:	f44f 728d 	mov.w	r2, #282	; 0x11a
   38cac:	4621      	mov	r1, r4
   38cae:	4898      	ldr	r0, [pc, #608]	; (38f10 <z_impl_k_poll+0x2b0>)
   38cb0:	f002 ff42 	bl	3bb38 <printk>
   38cb4:	f44f 718d 	mov.w	r1, #282	; 0x11a
   38cb8:	4620      	mov	r0, r4
   38cba:	f003 f991 	bl	3bfe0 <assert_post_action>
   38cbe:	e7e3      	b.n	38c88 <z_impl_k_poll+0x28>
	__ASSERT(events != NULL, "NULL events\n");
   38cc0:	4c92      	ldr	r4, [pc, #584]	; (38f0c <z_impl_k_poll+0x2ac>)
   38cc2:	f240 121b 	movw	r2, #283	; 0x11b
   38cc6:	4621      	mov	r1, r4
   38cc8:	4891      	ldr	r0, [pc, #580]	; (38f10 <z_impl_k_poll+0x2b0>)
   38cca:	f002 ff35 	bl	3bb38 <printk>
   38cce:	f240 111b 	movw	r1, #283	; 0x11b
   38cd2:	4620      	mov	r0, r4
   38cd4:	f003 f984 	bl	3bfe0 <assert_post_action>
   38cd8:	e7d7      	b.n	38c8a <z_impl_k_poll+0x2a>
	__ASSERT(num_events >= 0, "<0 events\n");
   38cda:	4c8c      	ldr	r4, [pc, #560]	; (38f0c <z_impl_k_poll+0x2ac>)
   38cdc:	f44f 728e 	mov.w	r2, #284	; 0x11c
   38ce0:	4621      	mov	r1, r4
   38ce2:	488b      	ldr	r0, [pc, #556]	; (38f10 <z_impl_k_poll+0x2b0>)
   38ce4:	f002 ff28 	bl	3bb38 <printk>
   38ce8:	f44f 718e 	mov.w	r1, #284	; 0x11c
   38cec:	4620      	mov	r0, r4
   38cee:	f003 f977 	bl	3bfe0 <assert_post_action>
   38cf2:	e7cd      	b.n	38c90 <z_impl_k_poll+0x30>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38cf4:	4c87      	ldr	r4, [pc, #540]	; (38f14 <z_impl_k_poll+0x2b4>)
   38cf6:	2281      	movs	r2, #129	; 0x81
   38cf8:	4621      	mov	r1, r4
   38cfa:	4885      	ldr	r0, [pc, #532]	; (38f10 <z_impl_k_poll+0x2b0>)
   38cfc:	f002 ff1c 	bl	3bb38 <printk>
   38d00:	2181      	movs	r1, #129	; 0x81
   38d02:	4620      	mov	r0, r4
   38d04:	f003 f96c 	bl	3bfe0 <assert_post_action>
   38d08:	e051      	b.n	38dae <z_impl_k_poll+0x14e>
		if (k_sem_count_get(event->sem) > 0U) {
   38d0a:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   38d0c:	689b      	ldr	r3, [r3, #8]
   38d0e:	b31b      	cbz	r3, 38d58 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   38d10:	2302      	movs	r3, #2
   38d12:	9305      	str	r3, [sp, #20]
			return true;
   38d14:	2301      	movs	r3, #1
   38d16:	e01f      	b.n	38d58 <z_impl_k_poll+0xf8>
		if (!k_queue_is_empty(event->queue)) {
   38d18:	6923      	ldr	r3, [r4, #16]
	return list->head;
   38d1a:	681b      	ldr	r3, [r3, #0]
   38d1c:	b1e3      	cbz	r3, 38d58 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   38d1e:	2304      	movs	r3, #4
   38d20:	9305      	str	r3, [sp, #20]
			return true;
   38d22:	2301      	movs	r3, #1
   38d24:	e018      	b.n	38d58 <z_impl_k_poll+0xf8>
		if (event->signal->signaled != 0U) {
   38d26:	6923      	ldr	r3, [r4, #16]
   38d28:	689b      	ldr	r3, [r3, #8]
   38d2a:	b1ab      	cbz	r3, 38d58 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_SIGNALED;
   38d2c:	2301      	movs	r3, #1
   38d2e:	9305      	str	r3, [sp, #20]
   38d30:	e012      	b.n	38d58 <z_impl_k_poll+0xf8>
		if (event->msgq->used_msgs > 0) {
   38d32:	6923      	ldr	r3, [r4, #16]
   38d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   38d36:	b17b      	cbz	r3, 38d58 <z_impl_k_poll+0xf8>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   38d38:	2310      	movs	r3, #16
   38d3a:	9305      	str	r3, [sp, #20]
			return true;
   38d3c:	2301      	movs	r3, #1
   38d3e:	e00b      	b.n	38d58 <z_impl_k_poll+0xf8>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   38d40:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 38f0c <z_impl_k_poll+0x2ac>
   38d44:	225c      	movs	r2, #92	; 0x5c
   38d46:	4641      	mov	r1, r8
   38d48:	4871      	ldr	r0, [pc, #452]	; (38f10 <z_impl_k_poll+0x2b0>)
   38d4a:	f002 fef5 	bl	3bb38 <printk>
   38d4e:	215c      	movs	r1, #92	; 0x5c
   38d50:	4640      	mov	r0, r8
   38d52:	f003 f945 	bl	3bfe0 <assert_post_action>
	return false;
   38d56:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   38d58:	2b00      	cmp	r3, #0
   38d5a:	d04d      	beq.n	38df8 <z_impl_k_poll+0x198>
	event->poller = NULL;
   38d5c:	2100      	movs	r1, #0
   38d5e:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   38d60:	68e3      	ldr	r3, [r4, #12]
   38d62:	f3c3 3245 	ubfx	r2, r3, #13, #6
   38d66:	9805      	ldr	r0, [sp, #20]
   38d68:	4302      	orrs	r2, r0
   38d6a:	f362 3352 	bfi	r3, r2, #13, #6
   38d6e:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   38d70:	7031      	strb	r1, [r6, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d72:	4869      	ldr	r0, [pc, #420]	; (38f18 <z_impl_k_poll+0x2b8>)
   38d74:	f7fd f8e8 	bl	35f48 <z_spin_unlock_valid>
   38d78:	2800      	cmp	r0, #0
   38d7a:	f000 822a 	beq.w	391d2 <z_impl_k_poll+0x572>
   38d7e:	9b08      	ldr	r3, [sp, #32]
   38d80:	f383 8811 	msr	BASEPRI, r3
   38d84:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   38d88:	3701      	adds	r7, #1
   38d8a:	9b06      	ldr	r3, [sp, #24]
   38d8c:	42bb      	cmp	r3, r7
   38d8e:	f340 822b 	ble.w	391e8 <z_impl_k_poll+0x588>
	__asm__ volatile(
   38d92:	f04f 0320 	mov.w	r3, #32
   38d96:	f3ef 8211 	mrs	r2, BASEPRI
   38d9a:	f383 8812 	msr	BASEPRI_MAX, r3
   38d9e:	f3bf 8f6f 	isb	sy
   38da2:	9208      	str	r2, [sp, #32]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38da4:	485c      	ldr	r0, [pc, #368]	; (38f18 <z_impl_k_poll+0x2b8>)
   38da6:	f7fd f8bf 	bl	35f28 <z_spin_lock_valid>
   38daa:	2800      	cmp	r0, #0
   38dac:	d0a2      	beq.n	38cf4 <z_impl_k_poll+0x94>
	z_spin_lock_set_owner(l);
   38dae:	485a      	ldr	r0, [pc, #360]	; (38f18 <z_impl_k_poll+0x2b8>)
   38db0:	f7fd f8da 	bl	35f68 <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   38db4:	eb07 0487 	add.w	r4, r7, r7, lsl #2
   38db8:	00a3      	lsls	r3, r4, #2
   38dba:	9309      	str	r3, [sp, #36]	; 0x24
   38dbc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   38dc0:	7b63      	ldrb	r3, [r4, #13]
   38dc2:	f003 031f 	and.w	r3, r3, #31
   38dc6:	2b08      	cmp	r3, #8
   38dc8:	d8ba      	bhi.n	38d40 <z_impl_k_poll+0xe0>
   38dca:	a201      	add	r2, pc, #4	; (adr r2, 38dd0 <z_impl_k_poll+0x170>)
   38dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   38dd0:	00038df5 	.word	0x00038df5
   38dd4:	00038d27 	.word	0x00038d27
   38dd8:	00038d0b 	.word	0x00038d0b
   38ddc:	00038d41 	.word	0x00038d41
   38de0:	00038d19 	.word	0x00038d19
   38de4:	00038d41 	.word	0x00038d41
   38de8:	00038d41 	.word	0x00038d41
   38dec:	00038d41 	.word	0x00038d41
   38df0:	00038d33 	.word	0x00038d33
   38df4:	2300      	movs	r3, #0
   38df6:	e7af      	b.n	38d58 <z_impl_k_poll+0xf8>
		} else if (!just_check && poller->is_polling) {
   38df8:	9b07      	ldr	r3, [sp, #28]
   38dfa:	2b00      	cmp	r3, #0
   38dfc:	d1b9      	bne.n	38d72 <z_impl_k_poll+0x112>
   38dfe:	7833      	ldrb	r3, [r6, #0]
   38e00:	2b00      	cmp	r3, #0
   38e02:	d0b6      	beq.n	38d72 <z_impl_k_poll+0x112>
	switch (event->type) {
   38e04:	7b63      	ldrb	r3, [r4, #13]
   38e06:	f003 031f 	and.w	r3, r3, #31
   38e0a:	2b08      	cmp	r3, #8
   38e0c:	f200 81d2 	bhi.w	391b4 <z_impl_k_poll+0x554>
   38e10:	e8df f013 	tbh	[pc, r3, lsl #1]
   38e14:	00f401db 	.word	0x00f401db
   38e18:	01d00009 	.word	0x01d00009
   38e1c:	01d00084 	.word	0x01d00084
   38e20:	01d001d0 	.word	0x01d001d0
   38e24:	0160      	.short	0x0160
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   38e26:	6923      	ldr	r3, [r4, #16]
   38e28:	2b00      	cmp	r3, #0
   38e2a:	d035      	beq.n	38e98 <z_impl_k_poll+0x238>
		add_event(&event->sem->poll_events, event, poller);
   38e2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   38e30:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   38e34:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   38e38:	4598      	cmp	r8, r3
   38e3a:	d039      	beq.n	38eb0 <z_impl_k_poll+0x250>
   38e3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   38e40:	2b00      	cmp	r3, #0
   38e42:	d035      	beq.n	38eb0 <z_impl_k_poll+0x250>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   38e44:	6898      	ldr	r0, [r3, #8]
   38e46:	f006 ffc4 	bl	3fdd2 <poller_thread>
   38e4a:	900b      	str	r0, [sp, #44]	; 0x2c
   38e4c:	4630      	mov	r0, r6
   38e4e:	f006 ffc0 	bl	3fdd2 <poller_thread>
   38e52:	4601      	mov	r1, r0
   38e54:	900a      	str	r0, [sp, #40]	; 0x28
   38e56:	980b      	ldr	r0, [sp, #44]	; 0x2c
   38e58:	f006 ff04 	bl	3fc64 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   38e5c:	2800      	cmp	r0, #0
   38e5e:	dc27      	bgt.n	38eb0 <z_impl_k_poll+0x250>
	return list->head == list;
   38e60:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38e64:	45d0      	cmp	r8, sl
   38e66:	d039      	beq.n	38edc <z_impl_k_poll+0x27c>
   38e68:	4653      	mov	r3, sl
   38e6a:	46a2      	mov	sl, r4
   38e6c:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38e6e:	2c00      	cmp	r4, #0
   38e70:	d03a      	beq.n	38ee8 <z_impl_k_poll+0x288>
		if (z_sched_prio_cmp(poller_thread(poller),
   38e72:	68a0      	ldr	r0, [r4, #8]
   38e74:	f006 ffad 	bl	3fdd2 <poller_thread>
   38e78:	4601      	mov	r1, r0
   38e7a:	980a      	ldr	r0, [sp, #40]	; 0x28
   38e7c:	f006 fef2 	bl	3fc64 <z_sched_prio_cmp>
   38e80:	2800      	cmp	r0, #0
   38e82:	dc1f      	bgt.n	38ec4 <z_impl_k_poll+0x264>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   38e84:	b394      	cbz	r4, 38eec <z_impl_k_poll+0x28c>
	return (node == list->tail) ? NULL : node->next;
   38e86:	f8d8 3004 	ldr.w	r3, [r8, #4]
   38e8a:	429c      	cmp	r4, r3
   38e8c:	d039      	beq.n	38f02 <z_impl_k_poll+0x2a2>
   38e8e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38e90:	2c00      	cmp	r4, #0
   38e92:	d1ec      	bne.n	38e6e <z_impl_k_poll+0x20e>
   38e94:	4654      	mov	r4, sl
   38e96:	e02a      	b.n	38eee <z_impl_k_poll+0x28e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   38e98:	f8df 8070 	ldr.w	r8, [pc, #112]	; 38f0c <z_impl_k_poll+0x2ac>
   38e9c:	2286      	movs	r2, #134	; 0x86
   38e9e:	4641      	mov	r1, r8
   38ea0:	481b      	ldr	r0, [pc, #108]	; (38f10 <z_impl_k_poll+0x2b0>)
   38ea2:	f002 fe49 	bl	3bb38 <printk>
   38ea6:	2186      	movs	r1, #134	; 0x86
   38ea8:	4640      	mov	r0, r8
   38eaa:	f003 f899 	bl	3bfe0 <assert_post_action>
   38eae:	e7bd      	b.n	38e2c <z_impl_k_poll+0x1cc>
	sys_dnode_t *const tail = list->tail;
   38eb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   38eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38eb6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   38eba:	6063      	str	r3, [r4, #4]
	tail->next = node;
   38ebc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38ebe:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   38ec2:	e182      	b.n	391ca <z_impl_k_poll+0x56a>
   38ec4:	4623      	mov	r3, r4
   38ec6:	4654      	mov	r4, sl
   38ec8:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   38eca:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   38ecc:	6063      	str	r3, [r4, #4]
	node->next = successor;
   38ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38ed0:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   38ed4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   38ed6:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   38eda:	e176      	b.n	391ca <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38edc:	f04f 0a00 	mov.w	sl, #0
   38ee0:	4653      	mov	r3, sl
   38ee2:	46a2      	mov	sl, r4
   38ee4:	461c      	mov	r4, r3
   38ee6:	e7c2      	b.n	38e6e <z_impl_k_poll+0x20e>
   38ee8:	4654      	mov	r4, sl
   38eea:	e000      	b.n	38eee <z_impl_k_poll+0x28e>
   38eec:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   38eee:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   38ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38ef4:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   38ef8:	6063      	str	r3, [r4, #4]
	tail->next = node;
   38efa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38efc:	f8c8 4004 	str.w	r4, [r8, #4]
}
   38f00:	e163      	b.n	391ca <z_impl_k_poll+0x56a>
   38f02:	4654      	mov	r4, sl
   38f04:	e7f3      	b.n	38eee <z_impl_k_poll+0x28e>
   38f06:	bf00      	nop
   38f08:	20010d7c 	.word	0x20010d7c
   38f0c:	00045c80 	.word	0x00045c80
   38f10:	00041c84 	.word	0x00041c84
   38f14:	00042210 	.word	0x00042210
   38f18:	20010dd4 	.word	0x20010dd4
		__ASSERT(event->queue != NULL, "invalid queue\n");
   38f1c:	6923      	ldr	r3, [r4, #16]
   38f1e:	2b00      	cmp	r3, #0
   38f20:	d035      	beq.n	38f8e <z_impl_k_poll+0x32e>
		add_event(&event->queue->poll_events, event, poller);
   38f22:	f8d4 a010 	ldr.w	sl, [r4, #16]
   38f26:	f10a 0814 	add.w	r8, sl, #20
	return list->head == list;
   38f2a:	f8da 3014 	ldr.w	r3, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   38f2e:	4598      	cmp	r8, r3
   38f30:	d039      	beq.n	38fa6 <z_impl_k_poll+0x346>
   38f32:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   38f36:	2b00      	cmp	r3, #0
   38f38:	d035      	beq.n	38fa6 <z_impl_k_poll+0x346>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   38f3a:	6898      	ldr	r0, [r3, #8]
   38f3c:	f006 ff49 	bl	3fdd2 <poller_thread>
   38f40:	900b      	str	r0, [sp, #44]	; 0x2c
   38f42:	4630      	mov	r0, r6
   38f44:	f006 ff45 	bl	3fdd2 <poller_thread>
   38f48:	4601      	mov	r1, r0
   38f4a:	900a      	str	r0, [sp, #40]	; 0x28
   38f4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   38f4e:	f006 fe89 	bl	3fc64 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   38f52:	2800      	cmp	r0, #0
   38f54:	dc27      	bgt.n	38fa6 <z_impl_k_poll+0x346>
	return list->head == list;
   38f56:	f8da a014 	ldr.w	sl, [sl, #20]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38f5a:	45d0      	cmp	r8, sl
   38f5c:	d039      	beq.n	38fd2 <z_impl_k_poll+0x372>
   38f5e:	4653      	mov	r3, sl
   38f60:	46a2      	mov	sl, r4
   38f62:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38f64:	2c00      	cmp	r4, #0
   38f66:	d03a      	beq.n	38fde <z_impl_k_poll+0x37e>
		if (z_sched_prio_cmp(poller_thread(poller),
   38f68:	68a0      	ldr	r0, [r4, #8]
   38f6a:	f006 ff32 	bl	3fdd2 <poller_thread>
   38f6e:	4601      	mov	r1, r0
   38f70:	980a      	ldr	r0, [sp, #40]	; 0x28
   38f72:	f006 fe77 	bl	3fc64 <z_sched_prio_cmp>
   38f76:	2800      	cmp	r0, #0
   38f78:	dc1f      	bgt.n	38fba <z_impl_k_poll+0x35a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   38f7a:	b394      	cbz	r4, 38fe2 <z_impl_k_poll+0x382>
	return (node == list->tail) ? NULL : node->next;
   38f7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   38f80:	429c      	cmp	r4, r3
   38f82:	d039      	beq.n	38ff8 <z_impl_k_poll+0x398>
   38f84:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38f86:	2c00      	cmp	r4, #0
   38f88:	d1ec      	bne.n	38f64 <z_impl_k_poll+0x304>
   38f8a:	4654      	mov	r4, sl
   38f8c:	e02a      	b.n	38fe4 <z_impl_k_poll+0x384>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   38f8e:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 39288 <z_impl_k_poll+0x628>
   38f92:	228a      	movs	r2, #138	; 0x8a
   38f94:	4641      	mov	r1, r8
   38f96:	48b8      	ldr	r0, [pc, #736]	; (39278 <z_impl_k_poll+0x618>)
   38f98:	f002 fdce 	bl	3bb38 <printk>
   38f9c:	218a      	movs	r1, #138	; 0x8a
   38f9e:	4640      	mov	r0, r8
   38fa0:	f003 f81e 	bl	3bfe0 <assert_post_action>
   38fa4:	e7bd      	b.n	38f22 <z_impl_k_poll+0x2c2>
	sys_dnode_t *const tail = list->tail;
   38fa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   38faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38fac:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   38fb0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   38fb2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38fb4:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   38fb8:	e107      	b.n	391ca <z_impl_k_poll+0x56a>
   38fba:	4623      	mov	r3, r4
   38fbc:	4654      	mov	r4, sl
   38fbe:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   38fc0:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   38fc2:	6063      	str	r3, [r4, #4]
	node->next = successor;
   38fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38fc6:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   38fca:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   38fcc:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   38fd0:	e0fb      	b.n	391ca <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   38fd2:	f04f 0a00 	mov.w	sl, #0
   38fd6:	4653      	mov	r3, sl
   38fd8:	46a2      	mov	sl, r4
   38fda:	461c      	mov	r4, r3
   38fdc:	e7c2      	b.n	38f64 <z_impl_k_poll+0x304>
   38fde:	4654      	mov	r4, sl
   38fe0:	e000      	b.n	38fe4 <z_impl_k_poll+0x384>
   38fe2:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   38fe4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   38fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   38fea:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   38fee:	6063      	str	r3, [r4, #4]
	tail->next = node;
   38ff0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38ff2:	f8c8 4004 	str.w	r4, [r8, #4]
}
   38ff6:	e0e8      	b.n	391ca <z_impl_k_poll+0x56a>
   38ff8:	4654      	mov	r4, sl
   38ffa:	e7f3      	b.n	38fe4 <z_impl_k_poll+0x384>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   38ffc:	6923      	ldr	r3, [r4, #16]
   38ffe:	b393      	cbz	r3, 39066 <z_impl_k_poll+0x406>
		add_event(&event->signal->poll_events, event, poller);
   39000:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   39004:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   39008:	4598      	cmp	r8, r3
   3900a:	d038      	beq.n	3907e <z_impl_k_poll+0x41e>
   3900c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   39010:	b3ab      	cbz	r3, 3907e <z_impl_k_poll+0x41e>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   39012:	6898      	ldr	r0, [r3, #8]
   39014:	f006 fedd 	bl	3fdd2 <poller_thread>
   39018:	4682      	mov	sl, r0
   3901a:	4630      	mov	r0, r6
   3901c:	f006 fed9 	bl	3fdd2 <poller_thread>
   39020:	4601      	mov	r1, r0
   39022:	900a      	str	r0, [sp, #40]	; 0x28
   39024:	4650      	mov	r0, sl
   39026:	f006 fe1d 	bl	3fc64 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3902a:	2800      	cmp	r0, #0
   3902c:	dc27      	bgt.n	3907e <z_impl_k_poll+0x41e>
	return list->head == list;
   3902e:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39032:	45d0      	cmp	r8, sl
   39034:	d039      	beq.n	390aa <z_impl_k_poll+0x44a>
   39036:	4653      	mov	r3, sl
   39038:	46a2      	mov	sl, r4
   3903a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3903c:	2c00      	cmp	r4, #0
   3903e:	d03a      	beq.n	390b6 <z_impl_k_poll+0x456>
		if (z_sched_prio_cmp(poller_thread(poller),
   39040:	68a0      	ldr	r0, [r4, #8]
   39042:	f006 fec6 	bl	3fdd2 <poller_thread>
   39046:	4601      	mov	r1, r0
   39048:	980a      	ldr	r0, [sp, #40]	; 0x28
   3904a:	f006 fe0b 	bl	3fc64 <z_sched_prio_cmp>
   3904e:	2800      	cmp	r0, #0
   39050:	dc1f      	bgt.n	39092 <z_impl_k_poll+0x432>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39052:	b394      	cbz	r4, 390ba <z_impl_k_poll+0x45a>
	return (node == list->tail) ? NULL : node->next;
   39054:	f8d8 3004 	ldr.w	r3, [r8, #4]
   39058:	429c      	cmp	r4, r3
   3905a:	d039      	beq.n	390d0 <z_impl_k_poll+0x470>
   3905c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3905e:	2c00      	cmp	r4, #0
   39060:	d1ec      	bne.n	3903c <z_impl_k_poll+0x3dc>
   39062:	4654      	mov	r4, sl
   39064:	e02a      	b.n	390bc <z_impl_k_poll+0x45c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39066:	f8df 8220 	ldr.w	r8, [pc, #544]	; 39288 <z_impl_k_poll+0x628>
   3906a:	228e      	movs	r2, #142	; 0x8e
   3906c:	4641      	mov	r1, r8
   3906e:	4882      	ldr	r0, [pc, #520]	; (39278 <z_impl_k_poll+0x618>)
   39070:	f002 fd62 	bl	3bb38 <printk>
   39074:	218e      	movs	r1, #142	; 0x8e
   39076:	4640      	mov	r0, r8
   39078:	f002 ffb2 	bl	3bfe0 <assert_post_action>
   3907c:	e7c0      	b.n	39000 <z_impl_k_poll+0x3a0>
	sys_dnode_t *const tail = list->tail;
   3907e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   39082:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39084:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   39088:	6063      	str	r3, [r4, #4]
	tail->next = node;
   3908a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3908c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   39090:	e09b      	b.n	391ca <z_impl_k_poll+0x56a>
   39092:	4623      	mov	r3, r4
   39094:	4654      	mov	r4, sl
   39096:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   39098:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   3909a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   3909c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3909e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   390a2:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   390a4:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   390a8:	e08f      	b.n	391ca <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   390aa:	f04f 0a00 	mov.w	sl, #0
   390ae:	4653      	mov	r3, sl
   390b0:	46a2      	mov	sl, r4
   390b2:	461c      	mov	r4, r3
   390b4:	e7c2      	b.n	3903c <z_impl_k_poll+0x3dc>
   390b6:	4654      	mov	r4, sl
   390b8:	e000      	b.n	390bc <z_impl_k_poll+0x45c>
   390ba:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   390bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   390c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   390c2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   390c6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   390c8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   390ca:	f8c8 4004 	str.w	r4, [r8, #4]
}
   390ce:	e07c      	b.n	391ca <z_impl_k_poll+0x56a>
   390d0:	4654      	mov	r4, sl
   390d2:	e7f3      	b.n	390bc <z_impl_k_poll+0x45c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   390d4:	6923      	ldr	r3, [r4, #16]
   390d6:	2b00      	cmp	r3, #0
   390d8:	d035      	beq.n	39146 <z_impl_k_poll+0x4e6>
		add_event(&event->msgq->poll_events, event, poller);
   390da:	f8d4 a010 	ldr.w	sl, [r4, #16]
   390de:	f10a 0828 	add.w	r8, sl, #40	; 0x28
	return list->head == list;
   390e2:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   390e6:	4598      	cmp	r8, r3
   390e8:	d039      	beq.n	3915e <z_impl_k_poll+0x4fe>
   390ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   390ee:	2b00      	cmp	r3, #0
   390f0:	d035      	beq.n	3915e <z_impl_k_poll+0x4fe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   390f2:	6898      	ldr	r0, [r3, #8]
   390f4:	f006 fe6d 	bl	3fdd2 <poller_thread>
   390f8:	900b      	str	r0, [sp, #44]	; 0x2c
   390fa:	4630      	mov	r0, r6
   390fc:	f006 fe69 	bl	3fdd2 <poller_thread>
   39100:	4601      	mov	r1, r0
   39102:	900a      	str	r0, [sp, #40]	; 0x28
   39104:	980b      	ldr	r0, [sp, #44]	; 0x2c
   39106:	f006 fdad 	bl	3fc64 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3910a:	2800      	cmp	r0, #0
   3910c:	dc27      	bgt.n	3915e <z_impl_k_poll+0x4fe>
	return list->head == list;
   3910e:	f8da a028 	ldr.w	sl, [sl, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39112:	45d0      	cmp	r8, sl
   39114:	d039      	beq.n	3918a <z_impl_k_poll+0x52a>
   39116:	4653      	mov	r3, sl
   39118:	46a2      	mov	sl, r4
   3911a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3911c:	2c00      	cmp	r4, #0
   3911e:	d03a      	beq.n	39196 <z_impl_k_poll+0x536>
		if (z_sched_prio_cmp(poller_thread(poller),
   39120:	68a0      	ldr	r0, [r4, #8]
   39122:	f006 fe56 	bl	3fdd2 <poller_thread>
   39126:	4601      	mov	r1, r0
   39128:	980a      	ldr	r0, [sp, #40]	; 0x28
   3912a:	f006 fd9b 	bl	3fc64 <z_sched_prio_cmp>
   3912e:	2800      	cmp	r0, #0
   39130:	dc1f      	bgt.n	39172 <z_impl_k_poll+0x512>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39132:	b394      	cbz	r4, 3919a <z_impl_k_poll+0x53a>
	return (node == list->tail) ? NULL : node->next;
   39134:	f8d8 3004 	ldr.w	r3, [r8, #4]
   39138:	429c      	cmp	r4, r3
   3913a:	d039      	beq.n	391b0 <z_impl_k_poll+0x550>
   3913c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3913e:	2c00      	cmp	r4, #0
   39140:	d1ec      	bne.n	3911c <z_impl_k_poll+0x4bc>
   39142:	4654      	mov	r4, sl
   39144:	e02a      	b.n	3919c <z_impl_k_poll+0x53c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39146:	f8df 8140 	ldr.w	r8, [pc, #320]	; 39288 <z_impl_k_poll+0x628>
   3914a:	2292      	movs	r2, #146	; 0x92
   3914c:	4641      	mov	r1, r8
   3914e:	484a      	ldr	r0, [pc, #296]	; (39278 <z_impl_k_poll+0x618>)
   39150:	f002 fcf2 	bl	3bb38 <printk>
   39154:	2192      	movs	r1, #146	; 0x92
   39156:	4640      	mov	r0, r8
   39158:	f002 ff42 	bl	3bfe0 <assert_post_action>
   3915c:	e7bd      	b.n	390da <z_impl_k_poll+0x47a>
	sys_dnode_t *const tail = list->tail;
   3915e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   39162:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39164:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   39168:	6063      	str	r3, [r4, #4]
	tail->next = node;
   3916a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3916c:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   39170:	e02b      	b.n	391ca <z_impl_k_poll+0x56a>
   39172:	4623      	mov	r3, r4
   39174:	4654      	mov	r4, sl
   39176:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   39178:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   3917a:	6063      	str	r3, [r4, #4]
	node->next = successor;
   3917c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3917e:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   39182:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   39184:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   39188:	e01f      	b.n	391ca <z_impl_k_poll+0x56a>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3918a:	f04f 0a00 	mov.w	sl, #0
   3918e:	4653      	mov	r3, sl
   39190:	46a2      	mov	sl, r4
   39192:	461c      	mov	r4, r3
   39194:	e7c2      	b.n	3911c <z_impl_k_poll+0x4bc>
   39196:	4654      	mov	r4, sl
   39198:	e000      	b.n	3919c <z_impl_k_poll+0x53c>
   3919a:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   3919c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   391a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   391a2:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   391a6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   391a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   391aa:	f8c8 4004 	str.w	r4, [r8, #4]
}
   391ae:	e00c      	b.n	391ca <z_impl_k_poll+0x56a>
   391b0:	4654      	mov	r4, sl
   391b2:	e7f3      	b.n	3919c <z_impl_k_poll+0x53c>
		__ASSERT(false, "invalid event type\n");
   391b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 39288 <z_impl_k_poll+0x628>
   391b8:	2299      	movs	r2, #153	; 0x99
   391ba:	4641      	mov	r1, r8
   391bc:	482e      	ldr	r0, [pc, #184]	; (39278 <z_impl_k_poll+0x618>)
   391be:	f002 fcbb 	bl	3bb38 <printk>
   391c2:	2199      	movs	r1, #153	; 0x99
   391c4:	4640      	mov	r0, r8
   391c6:	f002 ff0b 	bl	3bfe0 <assert_post_action>
	event->poller = poller;
   391ca:	60a6      	str	r6, [r4, #8]
			events_registered += 1;
   391cc:	f10b 0b01 	add.w	fp, fp, #1
   391d0:	e5cf      	b.n	38d72 <z_impl_k_poll+0x112>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   391d2:	4c2a      	ldr	r4, [pc, #168]	; (3927c <z_impl_k_poll+0x61c>)
   391d4:	22ac      	movs	r2, #172	; 0xac
   391d6:	4621      	mov	r1, r4
   391d8:	4827      	ldr	r0, [pc, #156]	; (39278 <z_impl_k_poll+0x618>)
   391da:	f002 fcad 	bl	3bb38 <printk>
   391de:	21ac      	movs	r1, #172	; 0xac
   391e0:	4620      	mov	r0, r4
   391e2:	f002 fefd 	bl	3bfe0 <assert_post_action>
   391e6:	e5ca      	b.n	38d7e <z_impl_k_poll+0x11e>
   391e8:	f04f 0320 	mov.w	r3, #32
   391ec:	f3ef 8611 	mrs	r6, BASEPRI
   391f0:	f383 8812 	msr	BASEPRI_MAX, r3
   391f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   391f8:	4821      	ldr	r0, [pc, #132]	; (39280 <z_impl_k_poll+0x620>)
   391fa:	f7fc fe95 	bl	35f28 <z_spin_lock_valid>
   391fe:	b368      	cbz	r0, 3925c <z_impl_k_poll+0x5fc>
	z_spin_lock_set_owner(l);
   39200:	481f      	ldr	r0, [pc, #124]	; (39280 <z_impl_k_poll+0x620>)
   39202:	f7fc feb1 	bl	35f68 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   39206:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   3920a:	2b00      	cmp	r3, #0
   3920c:	d031      	beq.n	39272 <z_impl_k_poll+0x612>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   3920e:	2300      	movs	r3, #0
   39210:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   39214:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   39218:	4323      	orrs	r3, r4
   3921a:	f000 80ef 	beq.w	393fc <z_impl_k_poll+0x79c>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3921e:	4c18      	ldr	r4, [pc, #96]	; (39280 <z_impl_k_poll+0x620>)
   39220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   39224:	e9cd 2300 	strd	r2, r3, [sp]
   39228:	4a16      	ldr	r2, [pc, #88]	; (39284 <z_impl_k_poll+0x624>)
   3922a:	4631      	mov	r1, r6
   3922c:	4620      	mov	r0, r4
   3922e:	f7fe fb93 	bl	37958 <z_pend_curr>
   39232:	4607      	mov	r7, r0
   39234:	f04f 0320 	mov.w	r3, #32
   39238:	f3ef 8911 	mrs	r9, BASEPRI
   3923c:	f383 8812 	msr	BASEPRI_MAX, r3
   39240:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39244:	4620      	mov	r0, r4
   39246:	f7fc fe6f 	bl	35f28 <z_spin_lock_valid>
   3924a:	2800      	cmp	r0, #0
   3924c:	f000 80ec 	beq.w	39428 <z_impl_k_poll+0x7c8>
	z_spin_lock_set_owner(l);
   39250:	480b      	ldr	r0, [pc, #44]	; (39280 <z_impl_k_poll+0x620>)
   39252:	f7fc fe89 	bl	35f68 <z_spin_lock_set_owner>
	 * we've already know the return code (-EAGAIN), and even if they are
	 * added to the list of events that occurred, the user has to check the
	 * return code first, which invalidates the whole list of event states.
	 */
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
   39256:	464e      	mov	r6, r9
	while (num_events--) {
   39258:	465b      	mov	r3, fp
   3925a:	e118      	b.n	3948e <z_impl_k_poll+0x82e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3925c:	4c07      	ldr	r4, [pc, #28]	; (3927c <z_impl_k_poll+0x61c>)
   3925e:	2281      	movs	r2, #129	; 0x81
   39260:	4621      	mov	r1, r4
   39262:	4805      	ldr	r0, [pc, #20]	; (39278 <z_impl_k_poll+0x618>)
   39264:	f002 fc68 	bl	3bb38 <printk>
   39268:	2181      	movs	r1, #129	; 0x81
   3926a:	4620      	mov	r0, r4
   3926c:	f002 feb8 	bl	3bfe0 <assert_post_action>
   39270:	e7c6      	b.n	39200 <z_impl_k_poll+0x5a0>
		clear_event_registrations(events, events_registered, key);
   39272:	46b0      	mov	r8, r6
	while (num_events--) {
   39274:	465f      	mov	r7, fp
   39276:	e02e      	b.n	392d6 <z_impl_k_poll+0x676>
   39278:	00041c84 	.word	0x00041c84
   3927c:	00042210 	.word	0x00042210
   39280:	20010dd4 	.word	0x20010dd4
   39284:	2000c6ec 	.word	0x2000c6ec
   39288:	00045c80 	.word	0x00045c80
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3928c:	6923      	ldr	r3, [r4, #16]
   3928e:	2b00      	cmp	r3, #0
   39290:	d046      	beq.n	39320 <z_impl_k_poll+0x6c0>
	return node->next != NULL;
   39292:	59eb      	ldr	r3, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   39294:	b12b      	cbz	r3, 392a2 <z_impl_k_poll+0x642>
	sys_dnode_t *const prev = node->prev;
   39296:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   39298:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3929a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3929c:	2300      	movs	r3, #0
   3929e:	51eb      	str	r3, [r5, r7]
	node->prev = NULL;
   392a0:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   392a2:	48bb      	ldr	r0, [pc, #748]	; (39590 <z_impl_k_poll+0x930>)
   392a4:	f7fc fe50 	bl	35f48 <z_spin_unlock_valid>
   392a8:	2800      	cmp	r0, #0
   392aa:	d07d      	beq.n	393a8 <z_impl_k_poll+0x748>
	__asm__ volatile(
   392ac:	f388 8811 	msr	BASEPRI, r8
   392b0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   392b4:	f04f 0320 	mov.w	r3, #32
   392b8:	f3ef 8811 	mrs	r8, BASEPRI
   392bc:	f383 8812 	msr	BASEPRI_MAX, r3
   392c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   392c4:	48b2      	ldr	r0, [pc, #712]	; (39590 <z_impl_k_poll+0x930>)
   392c6:	f7fc fe2f 	bl	35f28 <z_spin_lock_valid>
   392ca:	2800      	cmp	r0, #0
   392cc:	d077      	beq.n	393be <z_impl_k_poll+0x75e>
	z_spin_lock_set_owner(l);
   392ce:	48b0      	ldr	r0, [pc, #704]	; (39590 <z_impl_k_poll+0x930>)
   392d0:	f7fc fe4a 	bl	35f68 <z_spin_lock_set_owner>
	while (num_events--) {
   392d4:	464f      	mov	r7, r9
   392d6:	f107 39ff 	add.w	r9, r7, #4294967295
   392da:	2f00      	cmp	r7, #0
   392dc:	d07a      	beq.n	393d4 <z_impl_k_poll+0x774>
		clear_event_registration(&events[num_events]);
   392de:	eb09 0489 	add.w	r4, r9, r9, lsl #2
   392e2:	00a7      	lsls	r7, r4, #2
   392e4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   392e8:	2300      	movs	r3, #0
   392ea:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   392ec:	7b63      	ldrb	r3, [r4, #13]
   392ee:	f003 031f 	and.w	r3, r3, #31
   392f2:	2b08      	cmp	r3, #8
   392f4:	d84d      	bhi.n	39392 <z_impl_k_poll+0x732>
   392f6:	a201      	add	r2, pc, #4	; (adr r2, 392fc <z_impl_k_poll+0x69c>)
   392f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   392fc:	000392a3 	.word	0x000392a3
   39300:	00039357 	.word	0x00039357
   39304:	0003928d 	.word	0x0003928d
   39308:	00039393 	.word	0x00039393
   3930c:	00039339 	.word	0x00039339
   39310:	00039393 	.word	0x00039393
   39314:	00039393 	.word	0x00039393
   39318:	00039393 	.word	0x00039393
   3931c:	00039375 	.word	0x00039375
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   39320:	f8df a274 	ldr.w	sl, [pc, #628]	; 39598 <z_impl_k_poll+0x938>
   39324:	22a9      	movs	r2, #169	; 0xa9
   39326:	4651      	mov	r1, sl
   39328:	489a      	ldr	r0, [pc, #616]	; (39594 <z_impl_k_poll+0x934>)
   3932a:	f002 fc05 	bl	3bb38 <printk>
   3932e:	21a9      	movs	r1, #169	; 0xa9
   39330:	4650      	mov	r0, sl
   39332:	f002 fe55 	bl	3bfe0 <assert_post_action>
   39336:	e7ac      	b.n	39292 <z_impl_k_poll+0x632>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   39338:	6923      	ldr	r3, [r4, #16]
   3933a:	2b00      	cmp	r3, #0
   3933c:	d1a9      	bne.n	39292 <z_impl_k_poll+0x632>
   3933e:	f8df a258 	ldr.w	sl, [pc, #600]	; 39598 <z_impl_k_poll+0x938>
   39342:	22ad      	movs	r2, #173	; 0xad
   39344:	4651      	mov	r1, sl
   39346:	4893      	ldr	r0, [pc, #588]	; (39594 <z_impl_k_poll+0x934>)
   39348:	f002 fbf6 	bl	3bb38 <printk>
   3934c:	21ad      	movs	r1, #173	; 0xad
   3934e:	4650      	mov	r0, sl
   39350:	f002 fe46 	bl	3bfe0 <assert_post_action>
   39354:	e79d      	b.n	39292 <z_impl_k_poll+0x632>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39356:	6923      	ldr	r3, [r4, #16]
   39358:	2b00      	cmp	r3, #0
   3935a:	d19a      	bne.n	39292 <z_impl_k_poll+0x632>
   3935c:	f8df a238 	ldr.w	sl, [pc, #568]	; 39598 <z_impl_k_poll+0x938>
   39360:	22b1      	movs	r2, #177	; 0xb1
   39362:	4651      	mov	r1, sl
   39364:	488b      	ldr	r0, [pc, #556]	; (39594 <z_impl_k_poll+0x934>)
   39366:	f002 fbe7 	bl	3bb38 <printk>
   3936a:	21b1      	movs	r1, #177	; 0xb1
   3936c:	4650      	mov	r0, sl
   3936e:	f002 fe37 	bl	3bfe0 <assert_post_action>
   39372:	e78e      	b.n	39292 <z_impl_k_poll+0x632>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39374:	6923      	ldr	r3, [r4, #16]
   39376:	2b00      	cmp	r3, #0
   39378:	d18b      	bne.n	39292 <z_impl_k_poll+0x632>
   3937a:	f8df a21c 	ldr.w	sl, [pc, #540]	; 39598 <z_impl_k_poll+0x938>
   3937e:	22b5      	movs	r2, #181	; 0xb5
   39380:	4651      	mov	r1, sl
   39382:	4884      	ldr	r0, [pc, #528]	; (39594 <z_impl_k_poll+0x934>)
   39384:	f002 fbd8 	bl	3bb38 <printk>
   39388:	21b5      	movs	r1, #181	; 0xb5
   3938a:	4650      	mov	r0, sl
   3938c:	f002 fe28 	bl	3bfe0 <assert_post_action>
   39390:	e77f      	b.n	39292 <z_impl_k_poll+0x632>
		__ASSERT(false, "invalid event type\n");
   39392:	4c81      	ldr	r4, [pc, #516]	; (39598 <z_impl_k_poll+0x938>)
   39394:	22bc      	movs	r2, #188	; 0xbc
   39396:	4621      	mov	r1, r4
   39398:	487e      	ldr	r0, [pc, #504]	; (39594 <z_impl_k_poll+0x934>)
   3939a:	f002 fbcd 	bl	3bb38 <printk>
   3939e:	21bc      	movs	r1, #188	; 0xbc
   393a0:	4620      	mov	r0, r4
   393a2:	f002 fe1d 	bl	3bfe0 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   393a6:	e77c      	b.n	392a2 <z_impl_k_poll+0x642>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   393a8:	4c7c      	ldr	r4, [pc, #496]	; (3959c <z_impl_k_poll+0x93c>)
   393aa:	22ac      	movs	r2, #172	; 0xac
   393ac:	4621      	mov	r1, r4
   393ae:	4879      	ldr	r0, [pc, #484]	; (39594 <z_impl_k_poll+0x934>)
   393b0:	f002 fbc2 	bl	3bb38 <printk>
   393b4:	21ac      	movs	r1, #172	; 0xac
   393b6:	4620      	mov	r0, r4
   393b8:	f002 fe12 	bl	3bfe0 <assert_post_action>
   393bc:	e776      	b.n	392ac <z_impl_k_poll+0x64c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   393be:	4c77      	ldr	r4, [pc, #476]	; (3959c <z_impl_k_poll+0x93c>)
   393c0:	2281      	movs	r2, #129	; 0x81
   393c2:	4621      	mov	r1, r4
   393c4:	4873      	ldr	r0, [pc, #460]	; (39594 <z_impl_k_poll+0x934>)
   393c6:	f002 fbb7 	bl	3bb38 <printk>
   393ca:	2181      	movs	r1, #129	; 0x81
   393cc:	4620      	mov	r0, r4
   393ce:	f002 fe07 	bl	3bfe0 <assert_post_action>
   393d2:	e77c      	b.n	392ce <z_impl_k_poll+0x66e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   393d4:	486e      	ldr	r0, [pc, #440]	; (39590 <z_impl_k_poll+0x930>)
   393d6:	f7fc fdb7 	bl	35f48 <z_spin_unlock_valid>
   393da:	b120      	cbz	r0, 393e6 <z_impl_k_poll+0x786>
	__asm__ volatile(
   393dc:	f386 8811 	msr	BASEPRI, r6
   393e0:	f3bf 8f6f 	isb	sy
		return 0;
   393e4:	e0e4      	b.n	395b0 <z_impl_k_poll+0x950>
   393e6:	4c6d      	ldr	r4, [pc, #436]	; (3959c <z_impl_k_poll+0x93c>)
   393e8:	22ac      	movs	r2, #172	; 0xac
   393ea:	4621      	mov	r1, r4
   393ec:	4869      	ldr	r0, [pc, #420]	; (39594 <z_impl_k_poll+0x934>)
   393ee:	f002 fba3 	bl	3bb38 <printk>
   393f2:	21ac      	movs	r1, #172	; 0xac
   393f4:	4620      	mov	r0, r4
   393f6:	f002 fdf3 	bl	3bfe0 <assert_post_action>
   393fa:	e7ef      	b.n	393dc <z_impl_k_poll+0x77c>
   393fc:	4864      	ldr	r0, [pc, #400]	; (39590 <z_impl_k_poll+0x930>)
   393fe:	f7fc fda3 	bl	35f48 <z_spin_unlock_valid>
   39402:	b130      	cbz	r0, 39412 <z_impl_k_poll+0x7b2>
   39404:	f386 8811 	msr	BASEPRI, r6
   39408:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3940c:	f06f 070a 	mvn.w	r7, #10
   39410:	e0ce      	b.n	395b0 <z_impl_k_poll+0x950>
   39412:	4c62      	ldr	r4, [pc, #392]	; (3959c <z_impl_k_poll+0x93c>)
   39414:	22ac      	movs	r2, #172	; 0xac
   39416:	4621      	mov	r1, r4
   39418:	485e      	ldr	r0, [pc, #376]	; (39594 <z_impl_k_poll+0x934>)
   3941a:	f002 fb8d 	bl	3bb38 <printk>
   3941e:	21ac      	movs	r1, #172	; 0xac
   39420:	4620      	mov	r0, r4
   39422:	f002 fddd 	bl	3bfe0 <assert_post_action>
   39426:	e7ed      	b.n	39404 <z_impl_k_poll+0x7a4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39428:	4c5c      	ldr	r4, [pc, #368]	; (3959c <z_impl_k_poll+0x93c>)
   3942a:	2281      	movs	r2, #129	; 0x81
   3942c:	4621      	mov	r1, r4
   3942e:	4859      	ldr	r0, [pc, #356]	; (39594 <z_impl_k_poll+0x934>)
   39430:	f002 fb82 	bl	3bb38 <printk>
   39434:	2181      	movs	r1, #129	; 0x81
   39436:	4620      	mov	r0, r4
   39438:	f002 fdd2 	bl	3bfe0 <assert_post_action>
   3943c:	e708      	b.n	39250 <z_impl_k_poll+0x5f0>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3943e:	6923      	ldr	r3, [r4, #16]
   39440:	2b00      	cmp	r3, #0
   39442:	d04b      	beq.n	394dc <z_impl_k_poll+0x87c>
	return node->next != NULL;
   39444:	f855 300a 	ldr.w	r3, [r5, sl]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   39448:	b133      	cbz	r3, 39458 <z_impl_k_poll+0x7f8>
	sys_dnode_t *const prev = node->prev;
   3944a:	6862      	ldr	r2, [r4, #4]
	prev->next = next;
   3944c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3944e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39450:	2300      	movs	r3, #0
   39452:	f845 300a 	str.w	r3, [r5, sl]
	node->prev = NULL;
   39456:	6063      	str	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39458:	484d      	ldr	r0, [pc, #308]	; (39590 <z_impl_k_poll+0x930>)
   3945a:	f7fc fd75 	bl	35f48 <z_spin_unlock_valid>
   3945e:	2800      	cmp	r0, #0
   39460:	f000 8080 	beq.w	39564 <z_impl_k_poll+0x904>
   39464:	f386 8811 	msr	BASEPRI, r6
   39468:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3946c:	f04f 0320 	mov.w	r3, #32
   39470:	f3ef 8611 	mrs	r6, BASEPRI
   39474:	f383 8812 	msr	BASEPRI_MAX, r3
   39478:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3947c:	4844      	ldr	r0, [pc, #272]	; (39590 <z_impl_k_poll+0x930>)
   3947e:	f7fc fd53 	bl	35f28 <z_spin_lock_valid>
   39482:	2800      	cmp	r0, #0
   39484:	d079      	beq.n	3957a <z_impl_k_poll+0x91a>
	z_spin_lock_set_owner(l);
   39486:	4842      	ldr	r0, [pc, #264]	; (39590 <z_impl_k_poll+0x930>)
   39488:	f7fc fd6e 	bl	35f68 <z_spin_lock_set_owner>
	while (num_events--) {
   3948c:	4643      	mov	r3, r8
   3948e:	f103 38ff 	add.w	r8, r3, #4294967295
   39492:	2b00      	cmp	r3, #0
   39494:	f000 8084 	beq.w	395a0 <z_impl_k_poll+0x940>
		clear_event_registration(&events[num_events]);
   39498:	eb08 0488 	add.w	r4, r8, r8, lsl #2
   3949c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   394a0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	event->poller = NULL;
   394a4:	2300      	movs	r3, #0
   394a6:	60a3      	str	r3, [r4, #8]
	switch (event->type) {
   394a8:	7b63      	ldrb	r3, [r4, #13]
   394aa:	f003 031f 	and.w	r3, r3, #31
   394ae:	2b08      	cmp	r3, #8
   394b0:	d84d      	bhi.n	3954e <z_impl_k_poll+0x8ee>
   394b2:	a201      	add	r2, pc, #4	; (adr r2, 394b8 <z_impl_k_poll+0x858>)
   394b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   394b8:	00039459 	.word	0x00039459
   394bc:	00039513 	.word	0x00039513
   394c0:	0003943f 	.word	0x0003943f
   394c4:	0003954f 	.word	0x0003954f
   394c8:	000394f5 	.word	0x000394f5
   394cc:	0003954f 	.word	0x0003954f
   394d0:	0003954f 	.word	0x0003954f
   394d4:	0003954f 	.word	0x0003954f
   394d8:	00039531 	.word	0x00039531
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   394dc:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 39598 <z_impl_k_poll+0x938>
   394e0:	22a9      	movs	r2, #169	; 0xa9
   394e2:	4659      	mov	r1, fp
   394e4:	482b      	ldr	r0, [pc, #172]	; (39594 <z_impl_k_poll+0x934>)
   394e6:	f002 fb27 	bl	3bb38 <printk>
   394ea:	21a9      	movs	r1, #169	; 0xa9
   394ec:	4658      	mov	r0, fp
   394ee:	f002 fd77 	bl	3bfe0 <assert_post_action>
   394f2:	e7a7      	b.n	39444 <z_impl_k_poll+0x7e4>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   394f4:	6923      	ldr	r3, [r4, #16]
   394f6:	2b00      	cmp	r3, #0
   394f8:	d1a4      	bne.n	39444 <z_impl_k_poll+0x7e4>
   394fa:	f8df b09c 	ldr.w	fp, [pc, #156]	; 39598 <z_impl_k_poll+0x938>
   394fe:	22ad      	movs	r2, #173	; 0xad
   39500:	4659      	mov	r1, fp
   39502:	4824      	ldr	r0, [pc, #144]	; (39594 <z_impl_k_poll+0x934>)
   39504:	f002 fb18 	bl	3bb38 <printk>
   39508:	21ad      	movs	r1, #173	; 0xad
   3950a:	4658      	mov	r0, fp
   3950c:	f002 fd68 	bl	3bfe0 <assert_post_action>
   39510:	e798      	b.n	39444 <z_impl_k_poll+0x7e4>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   39512:	6923      	ldr	r3, [r4, #16]
   39514:	2b00      	cmp	r3, #0
   39516:	d195      	bne.n	39444 <z_impl_k_poll+0x7e4>
   39518:	f8df b07c 	ldr.w	fp, [pc, #124]	; 39598 <z_impl_k_poll+0x938>
   3951c:	22b1      	movs	r2, #177	; 0xb1
   3951e:	4659      	mov	r1, fp
   39520:	481c      	ldr	r0, [pc, #112]	; (39594 <z_impl_k_poll+0x934>)
   39522:	f002 fb09 	bl	3bb38 <printk>
   39526:	21b1      	movs	r1, #177	; 0xb1
   39528:	4658      	mov	r0, fp
   3952a:	f002 fd59 	bl	3bfe0 <assert_post_action>
   3952e:	e789      	b.n	39444 <z_impl_k_poll+0x7e4>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   39530:	6923      	ldr	r3, [r4, #16]
   39532:	2b00      	cmp	r3, #0
   39534:	d186      	bne.n	39444 <z_impl_k_poll+0x7e4>
   39536:	f8df b060 	ldr.w	fp, [pc, #96]	; 39598 <z_impl_k_poll+0x938>
   3953a:	22b5      	movs	r2, #181	; 0xb5
   3953c:	4659      	mov	r1, fp
   3953e:	4815      	ldr	r0, [pc, #84]	; (39594 <z_impl_k_poll+0x934>)
   39540:	f002 fafa 	bl	3bb38 <printk>
   39544:	21b5      	movs	r1, #181	; 0xb5
   39546:	4658      	mov	r0, fp
   39548:	f002 fd4a 	bl	3bfe0 <assert_post_action>
   3954c:	e77a      	b.n	39444 <z_impl_k_poll+0x7e4>
		__ASSERT(false, "invalid event type\n");
   3954e:	4c12      	ldr	r4, [pc, #72]	; (39598 <z_impl_k_poll+0x938>)
   39550:	22bc      	movs	r2, #188	; 0xbc
   39552:	4621      	mov	r1, r4
   39554:	480f      	ldr	r0, [pc, #60]	; (39594 <z_impl_k_poll+0x934>)
   39556:	f002 faef 	bl	3bb38 <printk>
   3955a:	21bc      	movs	r1, #188	; 0xbc
   3955c:	4620      	mov	r0, r4
   3955e:	f002 fd3f 	bl	3bfe0 <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   39562:	e779      	b.n	39458 <z_impl_k_poll+0x7f8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39564:	4c0d      	ldr	r4, [pc, #52]	; (3959c <z_impl_k_poll+0x93c>)
   39566:	22ac      	movs	r2, #172	; 0xac
   39568:	4621      	mov	r1, r4
   3956a:	480a      	ldr	r0, [pc, #40]	; (39594 <z_impl_k_poll+0x934>)
   3956c:	f002 fae4 	bl	3bb38 <printk>
   39570:	21ac      	movs	r1, #172	; 0xac
   39572:	4620      	mov	r0, r4
   39574:	f002 fd34 	bl	3bfe0 <assert_post_action>
   39578:	e774      	b.n	39464 <z_impl_k_poll+0x804>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3957a:	4c08      	ldr	r4, [pc, #32]	; (3959c <z_impl_k_poll+0x93c>)
   3957c:	2281      	movs	r2, #129	; 0x81
   3957e:	4621      	mov	r1, r4
   39580:	4804      	ldr	r0, [pc, #16]	; (39594 <z_impl_k_poll+0x934>)
   39582:	f002 fad9 	bl	3bb38 <printk>
   39586:	2181      	movs	r1, #129	; 0x81
   39588:	4620      	mov	r0, r4
   3958a:	f002 fd29 	bl	3bfe0 <assert_post_action>
   3958e:	e77a      	b.n	39486 <z_impl_k_poll+0x826>
   39590:	20010dd4 	.word	0x20010dd4
   39594:	00041c84 	.word	0x00041c84
   39598:	00045c80 	.word	0x00045c80
   3959c:	00042210 	.word	0x00042210
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   395a0:	480b      	ldr	r0, [pc, #44]	; (395d0 <z_impl_k_poll+0x970>)
   395a2:	f7fc fcd1 	bl	35f48 <z_spin_unlock_valid>
   395a6:	b138      	cbz	r0, 395b8 <z_impl_k_poll+0x958>
	__asm__ volatile(
   395a8:	f389 8811 	msr	BASEPRI, r9
   395ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   395b0:	4638      	mov	r0, r7
   395b2:	b00d      	add	sp, #52	; 0x34
   395b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   395b8:	4c06      	ldr	r4, [pc, #24]	; (395d4 <z_impl_k_poll+0x974>)
   395ba:	22ac      	movs	r2, #172	; 0xac
   395bc:	4621      	mov	r1, r4
   395be:	4806      	ldr	r0, [pc, #24]	; (395d8 <z_impl_k_poll+0x978>)
   395c0:	f002 faba 	bl	3bb38 <printk>
   395c4:	21ac      	movs	r1, #172	; 0xac
   395c6:	4620      	mov	r0, r4
   395c8:	f002 fd0a 	bl	3bfe0 <assert_post_action>
   395cc:	e7ec      	b.n	395a8 <z_impl_k_poll+0x948>
   395ce:	bf00      	nop
   395d0:	20010dd4 	.word	0x20010dd4
   395d4:	00042210 	.word	0x00042210
   395d8:	00041c84 	.word	0x00041c84

000395dc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   395dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   395de:	4604      	mov	r4, r0
   395e0:	460d      	mov	r5, r1
	__asm__ volatile(
   395e2:	f04f 0320 	mov.w	r3, #32
   395e6:	f3ef 8611 	mrs	r6, BASEPRI
   395ea:	f383 8812 	msr	BASEPRI_MAX, r3
   395ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   395f2:	481f      	ldr	r0, [pc, #124]	; (39670 <z_impl_k_poll_signal_raise+0x94>)
   395f4:	f7fc fc98 	bl	35f28 <z_spin_lock_valid>
   395f8:	b1d0      	cbz	r0, 39630 <z_impl_k_poll_signal_raise+0x54>
	z_spin_lock_set_owner(l);
   395fa:	481d      	ldr	r0, [pc, #116]	; (39670 <z_impl_k_poll_signal_raise+0x94>)
   395fc:	f7fc fcb4 	bl	35f68 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   39600:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   39602:	2301      	movs	r3, #1
   39604:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   39606:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   39608:	4284      	cmp	r4, r0
   3960a:	d01c      	beq.n	39646 <z_impl_k_poll_signal_raise+0x6a>
	sys_dnode_t *const prev = node->prev;
   3960c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   3960e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   39610:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   39612:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39614:	2300      	movs	r3, #0
   39616:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   39618:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   3961a:	b1a0      	cbz	r0, 39646 <z_impl_k_poll_signal_raise+0x6a>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3961c:	2101      	movs	r1, #1
   3961e:	f006 fbf1 	bl	3fe04 <signal_poll_event>
   39622:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   39624:	4631      	mov	r1, r6
   39626:	4812      	ldr	r0, [pc, #72]	; (39670 <z_impl_k_poll_signal_raise+0x94>)
   39628:	f7fd fd52 	bl	370d0 <z_reschedule>
	return rc;
}
   3962c:	4620      	mov	r0, r4
   3962e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39630:	4f10      	ldr	r7, [pc, #64]	; (39674 <z_impl_k_poll_signal_raise+0x98>)
   39632:	2281      	movs	r2, #129	; 0x81
   39634:	4639      	mov	r1, r7
   39636:	4810      	ldr	r0, [pc, #64]	; (39678 <z_impl_k_poll_signal_raise+0x9c>)
   39638:	f002 fa7e 	bl	3bb38 <printk>
   3963c:	2181      	movs	r1, #129	; 0x81
   3963e:	4638      	mov	r0, r7
   39640:	f002 fcce 	bl	3bfe0 <assert_post_action>
   39644:	e7d9      	b.n	395fa <z_impl_k_poll_signal_raise+0x1e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39646:	480a      	ldr	r0, [pc, #40]	; (39670 <z_impl_k_poll_signal_raise+0x94>)
   39648:	f7fc fc7e 	bl	35f48 <z_spin_unlock_valid>
   3964c:	b128      	cbz	r0, 3965a <z_impl_k_poll_signal_raise+0x7e>
	__asm__ volatile(
   3964e:	f386 8811 	msr	BASEPRI, r6
   39652:	f3bf 8f6f 	isb	sy
		return 0;
   39656:	2400      	movs	r4, #0
   39658:	e7e8      	b.n	3962c <z_impl_k_poll_signal_raise+0x50>
   3965a:	4c06      	ldr	r4, [pc, #24]	; (39674 <z_impl_k_poll_signal_raise+0x98>)
   3965c:	22ac      	movs	r2, #172	; 0xac
   3965e:	4621      	mov	r1, r4
   39660:	4805      	ldr	r0, [pc, #20]	; (39678 <z_impl_k_poll_signal_raise+0x9c>)
   39662:	f002 fa69 	bl	3bb38 <printk>
   39666:	21ac      	movs	r1, #172	; 0xac
   39668:	4620      	mov	r0, r4
   3966a:	f002 fcb9 	bl	3bfe0 <assert_post_action>
   3966e:	e7ee      	b.n	3964e <z_impl_k_poll_signal_raise+0x72>
   39670:	20010dd4 	.word	0x20010dd4
   39674:	00042210 	.word	0x00042210
   39678:	00041c84 	.word	0x00041c84

0003967c <z_heap_aligned_alloc>:
#include <string.h>
#include <sys/math_extras.h>
#include <sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   3967c:	b570      	push	{r4, r5, r6, lr}
   3967e:	b082      	sub	sp, #8
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   39680:	3204      	adds	r2, #4
   39682:	d21d      	bcs.n	396c0 <z_heap_aligned_alloc+0x44>
   39684:	4605      	mov	r5, r0
   39686:	460c      	mov	r4, r1
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   39688:	2000      	movs	r0, #0
   3968a:	2100      	movs	r1, #0
   3968c:	e9cd 0100 	strd	r0, r1, [sp]
   39690:	f044 0104 	orr.w	r1, r4, #4
   39694:	4628      	mov	r0, r5
   39696:	f7fc fa2b 	bl	35af0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   3969a:	4606      	mov	r6, r0
   3969c:	b188      	cbz	r0, 396c2 <z_heap_aligned_alloc+0x46>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   3969e:	f846 5b04 	str.w	r5, [r6], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   396a2:	b174      	cbz	r4, 396c2 <z_heap_aligned_alloc+0x46>
   396a4:	3c01      	subs	r4, #1
   396a6:	4226      	tst	r6, r4
   396a8:	d00b      	beq.n	396c2 <z_heap_aligned_alloc+0x46>
   396aa:	4c07      	ldr	r4, [pc, #28]	; (396c8 <z_heap_aligned_alloc+0x4c>)
   396ac:	2225      	movs	r2, #37	; 0x25
   396ae:	4621      	mov	r1, r4
   396b0:	4806      	ldr	r0, [pc, #24]	; (396cc <z_heap_aligned_alloc+0x50>)
   396b2:	f002 fa41 	bl	3bb38 <printk>
   396b6:	2125      	movs	r1, #37	; 0x25
   396b8:	4620      	mov	r0, r4
   396ba:	f002 fc91 	bl	3bfe0 <assert_post_action>
   396be:	e000      	b.n	396c2 <z_heap_aligned_alloc+0x46>
		return NULL;
   396c0:	2600      	movs	r6, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   396c2:	4630      	mov	r0, r6
   396c4:	b002      	add	sp, #8
   396c6:	bd70      	pop	{r4, r5, r6, pc}
   396c8:	00045ca4 	.word	0x00045ca4
   396cc:	00041c84 	.word	0x00041c84

000396d0 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   396d0:	b570      	push	{r4, r5, r6, lr}
   396d2:	4604      	mov	r4, r0
   396d4:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   396d6:	2803      	cmp	r0, #3
   396d8:	d902      	bls.n	396e0 <k_aligned_alloc+0x10>
   396da:	f010 0f03 	tst.w	r0, #3
   396de:	d009      	beq.n	396f4 <k_aligned_alloc+0x24>
   396e0:	4e0e      	ldr	r6, [pc, #56]	; (3971c <k_aligned_alloc+0x4c>)
   396e2:	2242      	movs	r2, #66	; 0x42
   396e4:	4631      	mov	r1, r6
   396e6:	480e      	ldr	r0, [pc, #56]	; (39720 <k_aligned_alloc+0x50>)
   396e8:	f002 fa26 	bl	3bb38 <printk>
   396ec:	2142      	movs	r1, #66	; 0x42
   396ee:	4630      	mov	r0, r6
   396f0:	f002 fc76 	bl	3bfe0 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   396f4:	1e63      	subs	r3, r4, #1
   396f6:	4223      	tst	r3, r4
   396f8:	d105      	bne.n	39706 <k_aligned_alloc+0x36>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   396fa:	462a      	mov	r2, r5
   396fc:	4621      	mov	r1, r4
   396fe:	4809      	ldr	r0, [pc, #36]	; (39724 <k_aligned_alloc+0x54>)
   39700:	f7ff ffbc 	bl	3967c <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   39704:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((align & (align - 1)) == 0,
   39706:	4e05      	ldr	r6, [pc, #20]	; (3971c <k_aligned_alloc+0x4c>)
   39708:	2246      	movs	r2, #70	; 0x46
   3970a:	4631      	mov	r1, r6
   3970c:	4804      	ldr	r0, [pc, #16]	; (39720 <k_aligned_alloc+0x50>)
   3970e:	f002 fa13 	bl	3bb38 <printk>
   39712:	2146      	movs	r1, #70	; 0x46
   39714:	4630      	mov	r0, r6
   39716:	f002 fc63 	bl	3bfe0 <assert_post_action>
   3971a:	e7ee      	b.n	396fa <k_aligned_alloc+0x2a>
   3971c:	00045ca4 	.word	0x00045ca4
   39720:	00041c84 	.word	0x00041c84
   39724:	2000c9c0 	.word	0x2000c9c0

00039728 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   39728:	b538      	push	{r3, r4, r5, lr}
   3972a:	4604      	mov	r4, r0
   3972c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   3972e:	f006 fa25 	bl	3fb7c <k_is_in_isr>
   39732:	b940      	cbnz	r0, 39746 <z_thread_aligned_alloc+0x1e>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   39734:	4b05      	ldr	r3, [pc, #20]	; (3974c <z_thread_aligned_alloc+0x24>)
   39736:	689b      	ldr	r3, [r3, #8]
   39738:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   3973a:	b118      	cbz	r0, 39744 <z_thread_aligned_alloc+0x1c>
		ret = z_heap_aligned_alloc(heap, align, size);
   3973c:	462a      	mov	r2, r5
   3973e:	4621      	mov	r1, r4
   39740:	f7ff ff9c 	bl	3967c <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   39744:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   39746:	4802      	ldr	r0, [pc, #8]	; (39750 <z_thread_aligned_alloc+0x28>)
   39748:	e7f7      	b.n	3973a <z_thread_aligned_alloc+0x12>
   3974a:	bf00      	nop
   3974c:	20010d7c 	.word	0x20010d7c
   39750:	2000c9c0 	.word	0x2000c9c0

00039754 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   39754:	b510      	push	{r4, lr}
   39756:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   39758:	4b08      	ldr	r3, [pc, #32]	; (3977c <k_sys_work_q_init+0x28>)
   3975a:	9302      	str	r3, [sp, #8]
   3975c:	2400      	movs	r4, #0
   3975e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   39762:	ab02      	add	r3, sp, #8
   39764:	9300      	str	r3, [sp, #0]
   39766:	f04f 33ff 	mov.w	r3, #4294967295
   3976a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3976e:	4904      	ldr	r1, [pc, #16]	; (39780 <k_sys_work_q_init+0x2c>)
   39770:	4804      	ldr	r0, [pc, #16]	; (39784 <k_sys_work_q_init+0x30>)
   39772:	f7fd fa0f 	bl	36b94 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   39776:	4620      	mov	r0, r4
   39778:	b004      	add	sp, #16
   3977a:	bd10      	pop	{r4, pc}
   3977c:	00045cc8 	.word	0x00045cc8
   39780:	20014a08 	.word	0x20014a08
   39784:	2000e740 	.word	0x2000e740

00039788 <__assert_func>:
   39788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3978a:	4614      	mov	r4, r2
   3978c:	461a      	mov	r2, r3
   3978e:	4b09      	ldr	r3, [pc, #36]	; (397b4 <__assert_func+0x2c>)
   39790:	4605      	mov	r5, r0
   39792:	681b      	ldr	r3, [r3, #0]
   39794:	68d8      	ldr	r0, [r3, #12]
   39796:	b14c      	cbz	r4, 397ac <__assert_func+0x24>
   39798:	4b07      	ldr	r3, [pc, #28]	; (397b8 <__assert_func+0x30>)
   3979a:	9100      	str	r1, [sp, #0]
   3979c:	4907      	ldr	r1, [pc, #28]	; (397bc <__assert_func+0x34>)
   3979e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   397a2:	462b      	mov	r3, r5
   397a4:	f000 f80e 	bl	397c4 <fiprintf>
   397a8:	f006 fdee 	bl	40388 <abort>
   397ac:	4b04      	ldr	r3, [pc, #16]	; (397c0 <__assert_func+0x38>)
   397ae:	461c      	mov	r4, r3
   397b0:	e7f3      	b.n	3979a <__assert_func+0x12>
   397b2:	bf00      	nop
   397b4:	2000c6f4 	.word	0x2000c6f4
   397b8:	00045e0a 	.word	0x00045e0a
   397bc:	00045e17 	.word	0x00045e17
   397c0:	00045de9 	.word	0x00045de9

000397c4 <fiprintf>:
   397c4:	b40e      	push	{r1, r2, r3}
   397c6:	b503      	push	{r0, r1, lr}
   397c8:	ab03      	add	r3, sp, #12
   397ca:	4601      	mov	r1, r0
   397cc:	4805      	ldr	r0, [pc, #20]	; (397e4 <fiprintf+0x20>)
   397ce:	f853 2b04 	ldr.w	r2, [r3], #4
   397d2:	6800      	ldr	r0, [r0, #0]
   397d4:	9301      	str	r3, [sp, #4]
   397d6:	f000 f965 	bl	39aa4 <_vfiprintf_r>
   397da:	b002      	add	sp, #8
   397dc:	f85d eb04 	ldr.w	lr, [sp], #4
   397e0:	b003      	add	sp, #12
   397e2:	4770      	bx	lr
   397e4:	2000c6f4 	.word	0x2000c6f4

000397e8 <gmtime_r>:
   397e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   397ec:	e9d0 6700 	ldrd	r6, r7, [r0]
   397f0:	460c      	mov	r4, r1
   397f2:	4a50      	ldr	r2, [pc, #320]	; (39934 <gmtime_r+0x14c>)
   397f4:	2300      	movs	r3, #0
   397f6:	4630      	mov	r0, r6
   397f8:	4639      	mov	r1, r7
   397fa:	f04f 0805 	mov.w	r8, #5
   397fe:	f7e7 fbff 	bl	21000 <__aeabi_ldivmod>
   39802:	4639      	mov	r1, r7
   39804:	4605      	mov	r5, r0
   39806:	4a4b      	ldr	r2, [pc, #300]	; (39934 <gmtime_r+0x14c>)
   39808:	4630      	mov	r0, r6
   3980a:	2300      	movs	r3, #0
   3980c:	f7e7 fbf8 	bl	21000 <__aeabi_ldivmod>
   39810:	2a00      	cmp	r2, #0
   39812:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   39816:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   3981a:	bfb8      	it	lt
   3981c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   39820:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   39824:	bfae      	itee	ge
   39826:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   3982a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   3982e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   39832:	f240 176d 	movw	r7, #365	; 0x16d
   39836:	2664      	movs	r6, #100	; 0x64
   39838:	fbb2 f3f1 	udiv	r3, r2, r1
   3983c:	fb01 2213 	mls	r2, r1, r3, r2
   39840:	213c      	movs	r1, #60	; 0x3c
   39842:	60a3      	str	r3, [r4, #8]
   39844:	fbb2 f3f1 	udiv	r3, r2, r1
   39848:	fb01 2213 	mls	r2, r1, r3, r2
   3984c:	493a      	ldr	r1, [pc, #232]	; (39938 <gmtime_r+0x150>)
   3984e:	6063      	str	r3, [r4, #4]
   39850:	1cc3      	adds	r3, r0, #3
   39852:	6022      	str	r2, [r4, #0]
   39854:	2207      	movs	r2, #7
   39856:	fb93 f2f2 	sdiv	r2, r3, r2
   3985a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   3985e:	1a9b      	subs	r3, r3, r2
   39860:	f648 62ac 	movw	r2, #36524	; 0x8eac
   39864:	bf48      	it	mi
   39866:	3307      	addmi	r3, #7
   39868:	2800      	cmp	r0, #0
   3986a:	61a3      	str	r3, [r4, #24]
   3986c:	bfbb      	ittet	lt
   3986e:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   39872:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   39876:	fb90 f1f1 	sdivge	r1, r0, r1
   3987a:	fb93 f1f1 	sdivlt	r1, r3, r1
   3987e:	4b2f      	ldr	r3, [pc, #188]	; (3993c <gmtime_r+0x154>)
   39880:	fb03 0001 	mla	r0, r3, r1, r0
   39884:	fbb0 f2f2 	udiv	r2, r0, r2
   39888:	fbb0 f3fc 	udiv	r3, r0, ip
   3988c:	4402      	add	r2, r0
   3988e:	1ad2      	subs	r2, r2, r3
   39890:	4b2b      	ldr	r3, [pc, #172]	; (39940 <gmtime_r+0x158>)
   39892:	fbb0 f3f3 	udiv	r3, r0, r3
   39896:	1ad3      	subs	r3, r2, r3
   39898:	fbb3 f5f7 	udiv	r5, r3, r7
   3989c:	fbb3 f3fc 	udiv	r3, r3, ip
   398a0:	fbb5 f2f6 	udiv	r2, r5, r6
   398a4:	1ad3      	subs	r3, r2, r3
   398a6:	4403      	add	r3, r0
   398a8:	2099      	movs	r0, #153	; 0x99
   398aa:	fb07 3315 	mls	r3, r7, r5, r3
   398ae:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   398b2:	f103 0e01 	add.w	lr, r3, #1
   398b6:	f10c 0c02 	add.w	ip, ip, #2
   398ba:	fbbc f7f0 	udiv	r7, ip, r0
   398be:	4378      	muls	r0, r7
   398c0:	3002      	adds	r0, #2
   398c2:	fbb0 f0f8 	udiv	r0, r0, r8
   398c6:	ebae 0000 	sub.w	r0, lr, r0
   398ca:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   398ce:	45f4      	cmp	ip, lr
   398d0:	bf94      	ite	ls
   398d2:	f04f 0c02 	movls.w	ip, #2
   398d6:	f06f 0c09 	mvnhi.w	ip, #9
   398da:	4467      	add	r7, ip
   398dc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   398e0:	fb0c 5101 	mla	r1, ip, r1, r5
   398e4:	2f01      	cmp	r7, #1
   398e6:	bf98      	it	ls
   398e8:	3101      	addls	r1, #1
   398ea:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   398ee:	d30c      	bcc.n	3990a <gmtime_r+0x122>
   398f0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   398f4:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   398f8:	61e3      	str	r3, [r4, #28]
   398fa:	2300      	movs	r3, #0
   398fc:	60e0      	str	r0, [r4, #12]
   398fe:	4620      	mov	r0, r4
   39900:	6223      	str	r3, [r4, #32]
   39902:	e9c4 7104 	strd	r7, r1, [r4, #16]
   39906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3990a:	f015 0f03 	tst.w	r5, #3
   3990e:	d102      	bne.n	39916 <gmtime_r+0x12e>
   39910:	fb06 5212 	mls	r2, r6, r2, r5
   39914:	b95a      	cbnz	r2, 3992e <gmtime_r+0x146>
   39916:	f44f 76c8 	mov.w	r6, #400	; 0x190
   3991a:	fbb5 f2f6 	udiv	r2, r5, r6
   3991e:	fb06 5212 	mls	r2, r6, r2, r5
   39922:	fab2 f282 	clz	r2, r2
   39926:	0952      	lsrs	r2, r2, #5
   39928:	333b      	adds	r3, #59	; 0x3b
   3992a:	4413      	add	r3, r2
   3992c:	e7e2      	b.n	398f4 <gmtime_r+0x10c>
   3992e:	2201      	movs	r2, #1
   39930:	e7fa      	b.n	39928 <gmtime_r+0x140>
   39932:	bf00      	nop
   39934:	00015180 	.word	0x00015180
   39938:	00023ab1 	.word	0x00023ab1
   3993c:	fffdc54f 	.word	0xfffdc54f
   39940:	00023ab0 	.word	0x00023ab0

00039944 <malloc>:
   39944:	4b02      	ldr	r3, [pc, #8]	; (39950 <malloc+0xc>)
   39946:	4601      	mov	r1, r0
   39948:	6818      	ldr	r0, [r3, #0]
   3994a:	f000 b851 	b.w	399f0 <_malloc_r>
   3994e:	bf00      	nop
   39950:	2000c6f4 	.word	0x2000c6f4

00039954 <_free_r>:
   39954:	b538      	push	{r3, r4, r5, lr}
   39956:	4605      	mov	r5, r0
   39958:	2900      	cmp	r1, #0
   3995a:	d045      	beq.n	399e8 <_free_r+0x94>
   3995c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   39960:	1f0c      	subs	r4, r1, #4
   39962:	2b00      	cmp	r3, #0
   39964:	bfb8      	it	lt
   39966:	18e4      	addlt	r4, r4, r3
   39968:	f001 f9fa 	bl	3ad60 <__malloc_lock>
   3996c:	4a1f      	ldr	r2, [pc, #124]	; (399ec <_free_r+0x98>)
   3996e:	6813      	ldr	r3, [r2, #0]
   39970:	4610      	mov	r0, r2
   39972:	b933      	cbnz	r3, 39982 <_free_r+0x2e>
   39974:	6063      	str	r3, [r4, #4]
   39976:	6014      	str	r4, [r2, #0]
   39978:	4628      	mov	r0, r5
   3997a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3997e:	f001 b9f5 	b.w	3ad6c <__malloc_unlock>
   39982:	42a3      	cmp	r3, r4
   39984:	d90b      	bls.n	3999e <_free_r+0x4a>
   39986:	6821      	ldr	r1, [r4, #0]
   39988:	1862      	adds	r2, r4, r1
   3998a:	4293      	cmp	r3, r2
   3998c:	bf02      	ittt	eq
   3998e:	681a      	ldreq	r2, [r3, #0]
   39990:	685b      	ldreq	r3, [r3, #4]
   39992:	1852      	addeq	r2, r2, r1
   39994:	6063      	str	r3, [r4, #4]
   39996:	bf08      	it	eq
   39998:	6022      	streq	r2, [r4, #0]
   3999a:	6004      	str	r4, [r0, #0]
   3999c:	e7ec      	b.n	39978 <_free_r+0x24>
   3999e:	461a      	mov	r2, r3
   399a0:	685b      	ldr	r3, [r3, #4]
   399a2:	b10b      	cbz	r3, 399a8 <_free_r+0x54>
   399a4:	42a3      	cmp	r3, r4
   399a6:	d9fa      	bls.n	3999e <_free_r+0x4a>
   399a8:	6811      	ldr	r1, [r2, #0]
   399aa:	1850      	adds	r0, r2, r1
   399ac:	42a0      	cmp	r0, r4
   399ae:	d10b      	bne.n	399c8 <_free_r+0x74>
   399b0:	6820      	ldr	r0, [r4, #0]
   399b2:	4401      	add	r1, r0
   399b4:	1850      	adds	r0, r2, r1
   399b6:	6011      	str	r1, [r2, #0]
   399b8:	4283      	cmp	r3, r0
   399ba:	d1dd      	bne.n	39978 <_free_r+0x24>
   399bc:	6818      	ldr	r0, [r3, #0]
   399be:	685b      	ldr	r3, [r3, #4]
   399c0:	4401      	add	r1, r0
   399c2:	6053      	str	r3, [r2, #4]
   399c4:	6011      	str	r1, [r2, #0]
   399c6:	e7d7      	b.n	39978 <_free_r+0x24>
   399c8:	d902      	bls.n	399d0 <_free_r+0x7c>
   399ca:	230c      	movs	r3, #12
   399cc:	602b      	str	r3, [r5, #0]
   399ce:	e7d3      	b.n	39978 <_free_r+0x24>
   399d0:	6820      	ldr	r0, [r4, #0]
   399d2:	1821      	adds	r1, r4, r0
   399d4:	428b      	cmp	r3, r1
   399d6:	bf02      	ittt	eq
   399d8:	6819      	ldreq	r1, [r3, #0]
   399da:	685b      	ldreq	r3, [r3, #4]
   399dc:	1809      	addeq	r1, r1, r0
   399de:	6063      	str	r3, [r4, #4]
   399e0:	bf08      	it	eq
   399e2:	6021      	streq	r1, [r4, #0]
   399e4:	6054      	str	r4, [r2, #4]
   399e6:	e7c7      	b.n	39978 <_free_r+0x24>
   399e8:	bd38      	pop	{r3, r4, r5, pc}
   399ea:	bf00      	nop
   399ec:	20010dd8 	.word	0x20010dd8

000399f0 <_malloc_r>:
   399f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   399f2:	1ccd      	adds	r5, r1, #3
   399f4:	4606      	mov	r6, r0
   399f6:	f025 0503 	bic.w	r5, r5, #3
   399fa:	3508      	adds	r5, #8
   399fc:	2d0c      	cmp	r5, #12
   399fe:	bf38      	it	cc
   39a00:	250c      	movcc	r5, #12
   39a02:	2d00      	cmp	r5, #0
   39a04:	db01      	blt.n	39a0a <_malloc_r+0x1a>
   39a06:	42a9      	cmp	r1, r5
   39a08:	d903      	bls.n	39a12 <_malloc_r+0x22>
   39a0a:	230c      	movs	r3, #12
   39a0c:	6033      	str	r3, [r6, #0]
   39a0e:	2000      	movs	r0, #0
   39a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39a12:	f001 f9a5 	bl	3ad60 <__malloc_lock>
   39a16:	4921      	ldr	r1, [pc, #132]	; (39a9c <_malloc_r+0xac>)
   39a18:	680a      	ldr	r2, [r1, #0]
   39a1a:	4614      	mov	r4, r2
   39a1c:	b99c      	cbnz	r4, 39a46 <_malloc_r+0x56>
   39a1e:	4f20      	ldr	r7, [pc, #128]	; (39aa0 <_malloc_r+0xb0>)
   39a20:	683b      	ldr	r3, [r7, #0]
   39a22:	b923      	cbnz	r3, 39a2e <_malloc_r+0x3e>
   39a24:	4621      	mov	r1, r4
   39a26:	4630      	mov	r0, r6
   39a28:	f000 fcbc 	bl	3a3a4 <_sbrk_r>
   39a2c:	6038      	str	r0, [r7, #0]
   39a2e:	4629      	mov	r1, r5
   39a30:	4630      	mov	r0, r6
   39a32:	f000 fcb7 	bl	3a3a4 <_sbrk_r>
   39a36:	1c43      	adds	r3, r0, #1
   39a38:	d123      	bne.n	39a82 <_malloc_r+0x92>
   39a3a:	230c      	movs	r3, #12
   39a3c:	4630      	mov	r0, r6
   39a3e:	6033      	str	r3, [r6, #0]
   39a40:	f001 f994 	bl	3ad6c <__malloc_unlock>
   39a44:	e7e3      	b.n	39a0e <_malloc_r+0x1e>
   39a46:	6823      	ldr	r3, [r4, #0]
   39a48:	1b5b      	subs	r3, r3, r5
   39a4a:	d417      	bmi.n	39a7c <_malloc_r+0x8c>
   39a4c:	2b0b      	cmp	r3, #11
   39a4e:	d903      	bls.n	39a58 <_malloc_r+0x68>
   39a50:	6023      	str	r3, [r4, #0]
   39a52:	441c      	add	r4, r3
   39a54:	6025      	str	r5, [r4, #0]
   39a56:	e004      	b.n	39a62 <_malloc_r+0x72>
   39a58:	6863      	ldr	r3, [r4, #4]
   39a5a:	42a2      	cmp	r2, r4
   39a5c:	bf0c      	ite	eq
   39a5e:	600b      	streq	r3, [r1, #0]
   39a60:	6053      	strne	r3, [r2, #4]
   39a62:	4630      	mov	r0, r6
   39a64:	f001 f982 	bl	3ad6c <__malloc_unlock>
   39a68:	f104 000b 	add.w	r0, r4, #11
   39a6c:	1d23      	adds	r3, r4, #4
   39a6e:	f020 0007 	bic.w	r0, r0, #7
   39a72:	1ac2      	subs	r2, r0, r3
   39a74:	d0cc      	beq.n	39a10 <_malloc_r+0x20>
   39a76:	1a1b      	subs	r3, r3, r0
   39a78:	50a3      	str	r3, [r4, r2]
   39a7a:	e7c9      	b.n	39a10 <_malloc_r+0x20>
   39a7c:	4622      	mov	r2, r4
   39a7e:	6864      	ldr	r4, [r4, #4]
   39a80:	e7cc      	b.n	39a1c <_malloc_r+0x2c>
   39a82:	1cc4      	adds	r4, r0, #3
   39a84:	f024 0403 	bic.w	r4, r4, #3
   39a88:	42a0      	cmp	r0, r4
   39a8a:	d0e3      	beq.n	39a54 <_malloc_r+0x64>
   39a8c:	1a21      	subs	r1, r4, r0
   39a8e:	4630      	mov	r0, r6
   39a90:	f000 fc88 	bl	3a3a4 <_sbrk_r>
   39a94:	3001      	adds	r0, #1
   39a96:	d1dd      	bne.n	39a54 <_malloc_r+0x64>
   39a98:	e7cf      	b.n	39a3a <_malloc_r+0x4a>
   39a9a:	bf00      	nop
   39a9c:	20010dd8 	.word	0x20010dd8
   39aa0:	20010ddc 	.word	0x20010ddc

00039aa4 <_vfiprintf_r>:
   39aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39aa8:	460d      	mov	r5, r1
   39aaa:	b09d      	sub	sp, #116	; 0x74
   39aac:	4614      	mov	r4, r2
   39aae:	4698      	mov	r8, r3
   39ab0:	4606      	mov	r6, r0
   39ab2:	b118      	cbz	r0, 39abc <_vfiprintf_r+0x18>
   39ab4:	6983      	ldr	r3, [r0, #24]
   39ab6:	b90b      	cbnz	r3, 39abc <_vfiprintf_r+0x18>
   39ab8:	f001 f87e 	bl	3abb8 <__sinit>
   39abc:	4b89      	ldr	r3, [pc, #548]	; (39ce4 <_vfiprintf_r+0x240>)
   39abe:	429d      	cmp	r5, r3
   39ac0:	d11b      	bne.n	39afa <_vfiprintf_r+0x56>
   39ac2:	6875      	ldr	r5, [r6, #4]
   39ac4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39ac6:	07d9      	lsls	r1, r3, #31
   39ac8:	d405      	bmi.n	39ad6 <_vfiprintf_r+0x32>
   39aca:	89ab      	ldrh	r3, [r5, #12]
   39acc:	059a      	lsls	r2, r3, #22
   39ace:	d402      	bmi.n	39ad6 <_vfiprintf_r+0x32>
   39ad0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39ad2:	f7ee ff7f 	bl	289d4 <__retarget_lock_acquire_recursive>
   39ad6:	89ab      	ldrh	r3, [r5, #12]
   39ad8:	071b      	lsls	r3, r3, #28
   39ada:	d501      	bpl.n	39ae0 <_vfiprintf_r+0x3c>
   39adc:	692b      	ldr	r3, [r5, #16]
   39ade:	b9eb      	cbnz	r3, 39b1c <_vfiprintf_r+0x78>
   39ae0:	4629      	mov	r1, r5
   39ae2:	4630      	mov	r0, r6
   39ae4:	f000 fee8 	bl	3a8b8 <__swsetup_r>
   39ae8:	b1c0      	cbz	r0, 39b1c <_vfiprintf_r+0x78>
   39aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39aec:	07dc      	lsls	r4, r3, #31
   39aee:	d50e      	bpl.n	39b0e <_vfiprintf_r+0x6a>
   39af0:	f04f 30ff 	mov.w	r0, #4294967295
   39af4:	b01d      	add	sp, #116	; 0x74
   39af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39afa:	4b7b      	ldr	r3, [pc, #492]	; (39ce8 <_vfiprintf_r+0x244>)
   39afc:	429d      	cmp	r5, r3
   39afe:	d101      	bne.n	39b04 <_vfiprintf_r+0x60>
   39b00:	68b5      	ldr	r5, [r6, #8]
   39b02:	e7df      	b.n	39ac4 <_vfiprintf_r+0x20>
   39b04:	4b79      	ldr	r3, [pc, #484]	; (39cec <_vfiprintf_r+0x248>)
   39b06:	429d      	cmp	r5, r3
   39b08:	bf08      	it	eq
   39b0a:	68f5      	ldreq	r5, [r6, #12]
   39b0c:	e7da      	b.n	39ac4 <_vfiprintf_r+0x20>
   39b0e:	89ab      	ldrh	r3, [r5, #12]
   39b10:	0598      	lsls	r0, r3, #22
   39b12:	d4ed      	bmi.n	39af0 <_vfiprintf_r+0x4c>
   39b14:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39b16:	f7ee ff79 	bl	28a0c <__retarget_lock_release_recursive>
   39b1a:	e7e9      	b.n	39af0 <_vfiprintf_r+0x4c>
   39b1c:	2300      	movs	r3, #0
   39b1e:	f8cd 800c 	str.w	r8, [sp, #12]
   39b22:	f04f 0901 	mov.w	r9, #1
   39b26:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 39cf0 <_vfiprintf_r+0x24c>
   39b2a:	9309      	str	r3, [sp, #36]	; 0x24
   39b2c:	2320      	movs	r3, #32
   39b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   39b32:	2330      	movs	r3, #48	; 0x30
   39b34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   39b38:	4623      	mov	r3, r4
   39b3a:	469a      	mov	sl, r3
   39b3c:	f813 2b01 	ldrb.w	r2, [r3], #1
   39b40:	b10a      	cbz	r2, 39b46 <_vfiprintf_r+0xa2>
   39b42:	2a25      	cmp	r2, #37	; 0x25
   39b44:	d1f9      	bne.n	39b3a <_vfiprintf_r+0x96>
   39b46:	ebba 0b04 	subs.w	fp, sl, r4
   39b4a:	d00b      	beq.n	39b64 <_vfiprintf_r+0xc0>
   39b4c:	465b      	mov	r3, fp
   39b4e:	4622      	mov	r2, r4
   39b50:	4629      	mov	r1, r5
   39b52:	4630      	mov	r0, r6
   39b54:	f006 fa11 	bl	3ff7a <__sfputs_r>
   39b58:	3001      	adds	r0, #1
   39b5a:	f000 80aa 	beq.w	39cb2 <_vfiprintf_r+0x20e>
   39b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39b60:	445a      	add	r2, fp
   39b62:	9209      	str	r2, [sp, #36]	; 0x24
   39b64:	f89a 3000 	ldrb.w	r3, [sl]
   39b68:	2b00      	cmp	r3, #0
   39b6a:	f000 80a2 	beq.w	39cb2 <_vfiprintf_r+0x20e>
   39b6e:	2300      	movs	r3, #0
   39b70:	f04f 32ff 	mov.w	r2, #4294967295
   39b74:	f10a 0a01 	add.w	sl, sl, #1
   39b78:	9304      	str	r3, [sp, #16]
   39b7a:	9307      	str	r3, [sp, #28]
   39b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   39b80:	931a      	str	r3, [sp, #104]	; 0x68
   39b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
   39b86:	4654      	mov	r4, sl
   39b88:	2205      	movs	r2, #5
   39b8a:	4859      	ldr	r0, [pc, #356]	; (39cf0 <_vfiprintf_r+0x24c>)
   39b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
   39b90:	f006 f99a 	bl	3fec8 <memchr>
   39b94:	9a04      	ldr	r2, [sp, #16]
   39b96:	b9d8      	cbnz	r0, 39bd0 <_vfiprintf_r+0x12c>
   39b98:	06d1      	lsls	r1, r2, #27
   39b9a:	bf44      	itt	mi
   39b9c:	2320      	movmi	r3, #32
   39b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39ba2:	0713      	lsls	r3, r2, #28
   39ba4:	bf44      	itt	mi
   39ba6:	232b      	movmi	r3, #43	; 0x2b
   39ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   39bac:	f89a 3000 	ldrb.w	r3, [sl]
   39bb0:	2b2a      	cmp	r3, #42	; 0x2a
   39bb2:	d015      	beq.n	39be0 <_vfiprintf_r+0x13c>
   39bb4:	9a07      	ldr	r2, [sp, #28]
   39bb6:	4654      	mov	r4, sl
   39bb8:	2000      	movs	r0, #0
   39bba:	f04f 0c0a 	mov.w	ip, #10
   39bbe:	4621      	mov	r1, r4
   39bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
   39bc4:	3b30      	subs	r3, #48	; 0x30
   39bc6:	2b09      	cmp	r3, #9
   39bc8:	d94e      	bls.n	39c68 <_vfiprintf_r+0x1c4>
   39bca:	b1b0      	cbz	r0, 39bfa <_vfiprintf_r+0x156>
   39bcc:	9207      	str	r2, [sp, #28]
   39bce:	e014      	b.n	39bfa <_vfiprintf_r+0x156>
   39bd0:	eba0 0308 	sub.w	r3, r0, r8
   39bd4:	46a2      	mov	sl, r4
   39bd6:	fa09 f303 	lsl.w	r3, r9, r3
   39bda:	4313      	orrs	r3, r2
   39bdc:	9304      	str	r3, [sp, #16]
   39bde:	e7d2      	b.n	39b86 <_vfiprintf_r+0xe2>
   39be0:	9b03      	ldr	r3, [sp, #12]
   39be2:	1d19      	adds	r1, r3, #4
   39be4:	681b      	ldr	r3, [r3, #0]
   39be6:	2b00      	cmp	r3, #0
   39be8:	9103      	str	r1, [sp, #12]
   39bea:	bfbb      	ittet	lt
   39bec:	425b      	neglt	r3, r3
   39bee:	f042 0202 	orrlt.w	r2, r2, #2
   39bf2:	9307      	strge	r3, [sp, #28]
   39bf4:	9307      	strlt	r3, [sp, #28]
   39bf6:	bfb8      	it	lt
   39bf8:	9204      	strlt	r2, [sp, #16]
   39bfa:	7823      	ldrb	r3, [r4, #0]
   39bfc:	2b2e      	cmp	r3, #46	; 0x2e
   39bfe:	d10c      	bne.n	39c1a <_vfiprintf_r+0x176>
   39c00:	7863      	ldrb	r3, [r4, #1]
   39c02:	2b2a      	cmp	r3, #42	; 0x2a
   39c04:	d135      	bne.n	39c72 <_vfiprintf_r+0x1ce>
   39c06:	9b03      	ldr	r3, [sp, #12]
   39c08:	3402      	adds	r4, #2
   39c0a:	1d1a      	adds	r2, r3, #4
   39c0c:	681b      	ldr	r3, [r3, #0]
   39c0e:	2b00      	cmp	r3, #0
   39c10:	9203      	str	r2, [sp, #12]
   39c12:	bfb8      	it	lt
   39c14:	f04f 33ff 	movlt.w	r3, #4294967295
   39c18:	9305      	str	r3, [sp, #20]
   39c1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 39d00 <_vfiprintf_r+0x25c>
   39c1e:	2203      	movs	r2, #3
   39c20:	7821      	ldrb	r1, [r4, #0]
   39c22:	4650      	mov	r0, sl
   39c24:	f006 f950 	bl	3fec8 <memchr>
   39c28:	b140      	cbz	r0, 39c3c <_vfiprintf_r+0x198>
   39c2a:	2340      	movs	r3, #64	; 0x40
   39c2c:	eba0 000a 	sub.w	r0, r0, sl
   39c30:	3401      	adds	r4, #1
   39c32:	fa03 f000 	lsl.w	r0, r3, r0
   39c36:	9b04      	ldr	r3, [sp, #16]
   39c38:	4303      	orrs	r3, r0
   39c3a:	9304      	str	r3, [sp, #16]
   39c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   39c40:	2206      	movs	r2, #6
   39c42:	482c      	ldr	r0, [pc, #176]	; (39cf4 <_vfiprintf_r+0x250>)
   39c44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   39c48:	f006 f93e 	bl	3fec8 <memchr>
   39c4c:	2800      	cmp	r0, #0
   39c4e:	d03f      	beq.n	39cd0 <_vfiprintf_r+0x22c>
   39c50:	4b29      	ldr	r3, [pc, #164]	; (39cf8 <_vfiprintf_r+0x254>)
   39c52:	bb1b      	cbnz	r3, 39c9c <_vfiprintf_r+0x1f8>
   39c54:	9b03      	ldr	r3, [sp, #12]
   39c56:	3307      	adds	r3, #7
   39c58:	f023 0307 	bic.w	r3, r3, #7
   39c5c:	3308      	adds	r3, #8
   39c5e:	9303      	str	r3, [sp, #12]
   39c60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   39c62:	443b      	add	r3, r7
   39c64:	9309      	str	r3, [sp, #36]	; 0x24
   39c66:	e767      	b.n	39b38 <_vfiprintf_r+0x94>
   39c68:	fb0c 3202 	mla	r2, ip, r2, r3
   39c6c:	460c      	mov	r4, r1
   39c6e:	2001      	movs	r0, #1
   39c70:	e7a5      	b.n	39bbe <_vfiprintf_r+0x11a>
   39c72:	2300      	movs	r3, #0
   39c74:	3401      	adds	r4, #1
   39c76:	f04f 0c0a 	mov.w	ip, #10
   39c7a:	4619      	mov	r1, r3
   39c7c:	9305      	str	r3, [sp, #20]
   39c7e:	4620      	mov	r0, r4
   39c80:	f810 2b01 	ldrb.w	r2, [r0], #1
   39c84:	3a30      	subs	r2, #48	; 0x30
   39c86:	2a09      	cmp	r2, #9
   39c88:	d903      	bls.n	39c92 <_vfiprintf_r+0x1ee>
   39c8a:	2b00      	cmp	r3, #0
   39c8c:	d0c5      	beq.n	39c1a <_vfiprintf_r+0x176>
   39c8e:	9105      	str	r1, [sp, #20]
   39c90:	e7c3      	b.n	39c1a <_vfiprintf_r+0x176>
   39c92:	fb0c 2101 	mla	r1, ip, r1, r2
   39c96:	4604      	mov	r4, r0
   39c98:	2301      	movs	r3, #1
   39c9a:	e7f0      	b.n	39c7e <_vfiprintf_r+0x1da>
   39c9c:	ab03      	add	r3, sp, #12
   39c9e:	462a      	mov	r2, r5
   39ca0:	a904      	add	r1, sp, #16
   39ca2:	4630      	mov	r0, r6
   39ca4:	9300      	str	r3, [sp, #0]
   39ca6:	4b15      	ldr	r3, [pc, #84]	; (39cfc <_vfiprintf_r+0x258>)
   39ca8:	f000 f82c 	bl	39d04 <_printf_float>
   39cac:	4607      	mov	r7, r0
   39cae:	1c78      	adds	r0, r7, #1
   39cb0:	d1d6      	bne.n	39c60 <_vfiprintf_r+0x1bc>
   39cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   39cb4:	07d9      	lsls	r1, r3, #31
   39cb6:	d405      	bmi.n	39cc4 <_vfiprintf_r+0x220>
   39cb8:	89ab      	ldrh	r3, [r5, #12]
   39cba:	059a      	lsls	r2, r3, #22
   39cbc:	d402      	bmi.n	39cc4 <_vfiprintf_r+0x220>
   39cbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
   39cc0:	f7ee fea4 	bl	28a0c <__retarget_lock_release_recursive>
   39cc4:	89ab      	ldrh	r3, [r5, #12]
   39cc6:	065b      	lsls	r3, r3, #25
   39cc8:	f53f af12 	bmi.w	39af0 <_vfiprintf_r+0x4c>
   39ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
   39cce:	e711      	b.n	39af4 <_vfiprintf_r+0x50>
   39cd0:	ab03      	add	r3, sp, #12
   39cd2:	462a      	mov	r2, r5
   39cd4:	a904      	add	r1, sp, #16
   39cd6:	4630      	mov	r0, r6
   39cd8:	9300      	str	r3, [sp, #0]
   39cda:	4b08      	ldr	r3, [pc, #32]	; (39cfc <_vfiprintf_r+0x258>)
   39cdc:	f000 fa3c 	bl	3a158 <_printf_i>
   39ce0:	e7e4      	b.n	39cac <_vfiprintf_r+0x208>
   39ce2:	bf00      	nop
   39ce4:	00045cf8 	.word	0x00045cf8
   39ce8:	00045d18 	.word	0x00045d18
   39cec:	00045cd8 	.word	0x00045cd8
   39cf0:	00045f47 	.word	0x00045f47
   39cf4:	00045f51 	.word	0x00045f51
   39cf8:	00039d05 	.word	0x00039d05
   39cfc:	0003ff7b 	.word	0x0003ff7b
   39d00:	00045f4d 	.word	0x00045f4d

00039d04 <_printf_float>:
   39d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d08:	b091      	sub	sp, #68	; 0x44
   39d0a:	460c      	mov	r4, r1
   39d0c:	4616      	mov	r6, r2
   39d0e:	461f      	mov	r7, r3
   39d10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   39d14:	4605      	mov	r5, r0
   39d16:	f000 ffcd 	bl	3acb4 <_localeconv_r>
   39d1a:	6803      	ldr	r3, [r0, #0]
   39d1c:	4618      	mov	r0, r3
   39d1e:	9309      	str	r3, [sp, #36]	; 0x24
   39d20:	f7e7 fc0c 	bl	2153c <strlen>
   39d24:	2300      	movs	r3, #0
   39d26:	900a      	str	r0, [sp, #40]	; 0x28
   39d28:	930e      	str	r3, [sp, #56]	; 0x38
   39d2a:	f8d8 3000 	ldr.w	r3, [r8]
   39d2e:	f894 9018 	ldrb.w	r9, [r4, #24]
   39d32:	3307      	adds	r3, #7
   39d34:	f8d4 b000 	ldr.w	fp, [r4]
   39d38:	f023 0307 	bic.w	r3, r3, #7
   39d3c:	f103 0208 	add.w	r2, r3, #8
   39d40:	f8c8 2000 	str.w	r2, [r8]
   39d44:	e9d3 2300 	ldrd	r2, r3, [r3]
   39d48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   39d4c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   39d50:	f04f 32ff 	mov.w	r2, #4294967295
   39d54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   39d58:	4640      	mov	r0, r8
   39d5a:	930b      	str	r3, [sp, #44]	; 0x2c
   39d5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   39d5e:	4b9b      	ldr	r3, [pc, #620]	; (39fcc <_printf_float+0x2c8>)
   39d60:	f7e7 fba4 	bl	214ac <__aeabi_dcmpun>
   39d64:	bb70      	cbnz	r0, 39dc4 <_printf_float+0xc0>
   39d66:	f04f 32ff 	mov.w	r2, #4294967295
   39d6a:	4b98      	ldr	r3, [pc, #608]	; (39fcc <_printf_float+0x2c8>)
   39d6c:	4640      	mov	r0, r8
   39d6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   39d70:	f7e7 fb7e 	bl	21470 <__aeabi_dcmple>
   39d74:	bb30      	cbnz	r0, 39dc4 <_printf_float+0xc0>
   39d76:	2200      	movs	r2, #0
   39d78:	2300      	movs	r3, #0
   39d7a:	4640      	mov	r0, r8
   39d7c:	4651      	mov	r1, sl
   39d7e:	f7e7 fb6d 	bl	2145c <__aeabi_dcmplt>
   39d82:	b110      	cbz	r0, 39d8a <_printf_float+0x86>
   39d84:	232d      	movs	r3, #45	; 0x2d
   39d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   39d8a:	4b91      	ldr	r3, [pc, #580]	; (39fd0 <_printf_float+0x2cc>)
   39d8c:	4891      	ldr	r0, [pc, #580]	; (39fd4 <_printf_float+0x2d0>)
   39d8e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   39d92:	bf94      	ite	ls
   39d94:	4698      	movls	r8, r3
   39d96:	4680      	movhi	r8, r0
   39d98:	2303      	movs	r3, #3
   39d9a:	f04f 0a00 	mov.w	sl, #0
   39d9e:	6123      	str	r3, [r4, #16]
   39da0:	f02b 0304 	bic.w	r3, fp, #4
   39da4:	6023      	str	r3, [r4, #0]
   39da6:	4633      	mov	r3, r6
   39da8:	aa0f      	add	r2, sp, #60	; 0x3c
   39daa:	4621      	mov	r1, r4
   39dac:	4628      	mov	r0, r5
   39dae:	9700      	str	r7, [sp, #0]
   39db0:	f006 f993 	bl	400da <_printf_common>
   39db4:	3001      	adds	r0, #1
   39db6:	f040 808f 	bne.w	39ed8 <_printf_float+0x1d4>
   39dba:	f04f 30ff 	mov.w	r0, #4294967295
   39dbe:	b011      	add	sp, #68	; 0x44
   39dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39dc4:	4642      	mov	r2, r8
   39dc6:	4653      	mov	r3, sl
   39dc8:	4640      	mov	r0, r8
   39dca:	4651      	mov	r1, sl
   39dcc:	f7e7 fb6e 	bl	214ac <__aeabi_dcmpun>
   39dd0:	b140      	cbz	r0, 39de4 <_printf_float+0xe0>
   39dd2:	f1ba 0f00 	cmp.w	sl, #0
   39dd6:	4880      	ldr	r0, [pc, #512]	; (39fd8 <_printf_float+0x2d4>)
   39dd8:	bfbc      	itt	lt
   39dda:	232d      	movlt	r3, #45	; 0x2d
   39ddc:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   39de0:	4b7e      	ldr	r3, [pc, #504]	; (39fdc <_printf_float+0x2d8>)
   39de2:	e7d4      	b.n	39d8e <_printf_float+0x8a>
   39de4:	6863      	ldr	r3, [r4, #4]
   39de6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   39dea:	1c5a      	adds	r2, r3, #1
   39dec:	d142      	bne.n	39e74 <_printf_float+0x170>
   39dee:	2306      	movs	r3, #6
   39df0:	6063      	str	r3, [r4, #4]
   39df2:	2200      	movs	r2, #0
   39df4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   39df8:	4628      	mov	r0, r5
   39dfa:	910b      	str	r1, [sp, #44]	; 0x2c
   39dfc:	9206      	str	r2, [sp, #24]
   39dfe:	aa0e      	add	r2, sp, #56	; 0x38
   39e00:	6023      	str	r3, [r4, #0]
   39e02:	e9cd 9204 	strd	r9, r2, [sp, #16]
   39e06:	aa0d      	add	r2, sp, #52	; 0x34
   39e08:	9203      	str	r2, [sp, #12]
   39e0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   39e0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
   39e12:	6863      	ldr	r3, [r4, #4]
   39e14:	4642      	mov	r2, r8
   39e16:	9300      	str	r3, [sp, #0]
   39e18:	4653      	mov	r3, sl
   39e1a:	f006 f8c0 	bl	3ff9e <__cvt>
   39e1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   39e20:	4680      	mov	r8, r0
   39e22:	2947      	cmp	r1, #71	; 0x47
   39e24:	990d      	ldr	r1, [sp, #52]	; 0x34
   39e26:	d108      	bne.n	39e3a <_printf_float+0x136>
   39e28:	1cc8      	adds	r0, r1, #3
   39e2a:	db02      	blt.n	39e32 <_printf_float+0x12e>
   39e2c:	6863      	ldr	r3, [r4, #4]
   39e2e:	4299      	cmp	r1, r3
   39e30:	dd40      	ble.n	39eb4 <_printf_float+0x1b0>
   39e32:	f1a9 0902 	sub.w	r9, r9, #2
   39e36:	fa5f f989 	uxtb.w	r9, r9
   39e3a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   39e3e:	d81f      	bhi.n	39e80 <_printf_float+0x17c>
   39e40:	3901      	subs	r1, #1
   39e42:	464a      	mov	r2, r9
   39e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
   39e48:	910d      	str	r1, [sp, #52]	; 0x34
   39e4a:	f006 f908 	bl	4005e <__exponent>
   39e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   39e50:	4682      	mov	sl, r0
   39e52:	1813      	adds	r3, r2, r0
   39e54:	2a01      	cmp	r2, #1
   39e56:	6123      	str	r3, [r4, #16]
   39e58:	dc02      	bgt.n	39e60 <_printf_float+0x15c>
   39e5a:	6822      	ldr	r2, [r4, #0]
   39e5c:	07d2      	lsls	r2, r2, #31
   39e5e:	d501      	bpl.n	39e64 <_printf_float+0x160>
   39e60:	3301      	adds	r3, #1
   39e62:	6123      	str	r3, [r4, #16]
   39e64:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   39e68:	2b00      	cmp	r3, #0
   39e6a:	d09c      	beq.n	39da6 <_printf_float+0xa2>
   39e6c:	232d      	movs	r3, #45	; 0x2d
   39e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   39e72:	e798      	b.n	39da6 <_printf_float+0xa2>
   39e74:	2947      	cmp	r1, #71	; 0x47
   39e76:	d1bc      	bne.n	39df2 <_printf_float+0xee>
   39e78:	2b00      	cmp	r3, #0
   39e7a:	d1ba      	bne.n	39df2 <_printf_float+0xee>
   39e7c:	2301      	movs	r3, #1
   39e7e:	e7b7      	b.n	39df0 <_printf_float+0xec>
   39e80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   39e84:	d118      	bne.n	39eb8 <_printf_float+0x1b4>
   39e86:	2900      	cmp	r1, #0
   39e88:	6863      	ldr	r3, [r4, #4]
   39e8a:	dd0b      	ble.n	39ea4 <_printf_float+0x1a0>
   39e8c:	6121      	str	r1, [r4, #16]
   39e8e:	b913      	cbnz	r3, 39e96 <_printf_float+0x192>
   39e90:	6822      	ldr	r2, [r4, #0]
   39e92:	07d0      	lsls	r0, r2, #31
   39e94:	d502      	bpl.n	39e9c <_printf_float+0x198>
   39e96:	3301      	adds	r3, #1
   39e98:	440b      	add	r3, r1
   39e9a:	6123      	str	r3, [r4, #16]
   39e9c:	f04f 0a00 	mov.w	sl, #0
   39ea0:	65a1      	str	r1, [r4, #88]	; 0x58
   39ea2:	e7df      	b.n	39e64 <_printf_float+0x160>
   39ea4:	b913      	cbnz	r3, 39eac <_printf_float+0x1a8>
   39ea6:	6822      	ldr	r2, [r4, #0]
   39ea8:	07d2      	lsls	r2, r2, #31
   39eaa:	d501      	bpl.n	39eb0 <_printf_float+0x1ac>
   39eac:	3302      	adds	r3, #2
   39eae:	e7f4      	b.n	39e9a <_printf_float+0x196>
   39eb0:	2301      	movs	r3, #1
   39eb2:	e7f2      	b.n	39e9a <_printf_float+0x196>
   39eb4:	f04f 0967 	mov.w	r9, #103	; 0x67
   39eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39eba:	4299      	cmp	r1, r3
   39ebc:	db05      	blt.n	39eca <_printf_float+0x1c6>
   39ebe:	6823      	ldr	r3, [r4, #0]
   39ec0:	6121      	str	r1, [r4, #16]
   39ec2:	07d8      	lsls	r0, r3, #31
   39ec4:	d5ea      	bpl.n	39e9c <_printf_float+0x198>
   39ec6:	1c4b      	adds	r3, r1, #1
   39ec8:	e7e7      	b.n	39e9a <_printf_float+0x196>
   39eca:	2900      	cmp	r1, #0
   39ecc:	bfd4      	ite	le
   39ece:	f1c1 0202 	rsble	r2, r1, #2
   39ed2:	2201      	movgt	r2, #1
   39ed4:	4413      	add	r3, r2
   39ed6:	e7e0      	b.n	39e9a <_printf_float+0x196>
   39ed8:	6823      	ldr	r3, [r4, #0]
   39eda:	055a      	lsls	r2, r3, #21
   39edc:	d407      	bmi.n	39eee <_printf_float+0x1ea>
   39ede:	6923      	ldr	r3, [r4, #16]
   39ee0:	4642      	mov	r2, r8
   39ee2:	4631      	mov	r1, r6
   39ee4:	4628      	mov	r0, r5
   39ee6:	47b8      	blx	r7
   39ee8:	3001      	adds	r0, #1
   39eea:	d12b      	bne.n	39f44 <_printf_float+0x240>
   39eec:	e765      	b.n	39dba <_printf_float+0xb6>
   39eee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   39ef2:	f240 80dc 	bls.w	3a0ae <_printf_float+0x3aa>
   39ef6:	2200      	movs	r2, #0
   39ef8:	2300      	movs	r3, #0
   39efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   39efe:	f7e7 faa3 	bl	21448 <__aeabi_dcmpeq>
   39f02:	2800      	cmp	r0, #0
   39f04:	d033      	beq.n	39f6e <_printf_float+0x26a>
   39f06:	2301      	movs	r3, #1
   39f08:	4a35      	ldr	r2, [pc, #212]	; (39fe0 <_printf_float+0x2dc>)
   39f0a:	4631      	mov	r1, r6
   39f0c:	4628      	mov	r0, r5
   39f0e:	47b8      	blx	r7
   39f10:	3001      	adds	r0, #1
   39f12:	f43f af52 	beq.w	39dba <_printf_float+0xb6>
   39f16:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   39f1a:	429a      	cmp	r2, r3
   39f1c:	db02      	blt.n	39f24 <_printf_float+0x220>
   39f1e:	6823      	ldr	r3, [r4, #0]
   39f20:	07d8      	lsls	r0, r3, #31
   39f22:	d50f      	bpl.n	39f44 <_printf_float+0x240>
   39f24:	4631      	mov	r1, r6
   39f26:	4628      	mov	r0, r5
   39f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   39f2c:	47b8      	blx	r7
   39f2e:	3001      	adds	r0, #1
   39f30:	f43f af43 	beq.w	39dba <_printf_float+0xb6>
   39f34:	f04f 0800 	mov.w	r8, #0
   39f38:	f104 091a 	add.w	r9, r4, #26
   39f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39f3e:	3b01      	subs	r3, #1
   39f40:	4543      	cmp	r3, r8
   39f42:	dc09      	bgt.n	39f58 <_printf_float+0x254>
   39f44:	6823      	ldr	r3, [r4, #0]
   39f46:	079b      	lsls	r3, r3, #30
   39f48:	f100 8101 	bmi.w	3a14e <_printf_float+0x44a>
   39f4c:	68e0      	ldr	r0, [r4, #12]
   39f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   39f50:	4298      	cmp	r0, r3
   39f52:	bfb8      	it	lt
   39f54:	4618      	movlt	r0, r3
   39f56:	e732      	b.n	39dbe <_printf_float+0xba>
   39f58:	2301      	movs	r3, #1
   39f5a:	464a      	mov	r2, r9
   39f5c:	4631      	mov	r1, r6
   39f5e:	4628      	mov	r0, r5
   39f60:	47b8      	blx	r7
   39f62:	3001      	adds	r0, #1
   39f64:	f43f af29 	beq.w	39dba <_printf_float+0xb6>
   39f68:	f108 0801 	add.w	r8, r8, #1
   39f6c:	e7e6      	b.n	39f3c <_printf_float+0x238>
   39f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   39f70:	2b00      	cmp	r3, #0
   39f72:	dc37      	bgt.n	39fe4 <_printf_float+0x2e0>
   39f74:	2301      	movs	r3, #1
   39f76:	4a1a      	ldr	r2, [pc, #104]	; (39fe0 <_printf_float+0x2dc>)
   39f78:	4631      	mov	r1, r6
   39f7a:	4628      	mov	r0, r5
   39f7c:	47b8      	blx	r7
   39f7e:	3001      	adds	r0, #1
   39f80:	f43f af1b 	beq.w	39dba <_printf_float+0xb6>
   39f84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   39f88:	4313      	orrs	r3, r2
   39f8a:	d102      	bne.n	39f92 <_printf_float+0x28e>
   39f8c:	6823      	ldr	r3, [r4, #0]
   39f8e:	07d9      	lsls	r1, r3, #31
   39f90:	d5d8      	bpl.n	39f44 <_printf_float+0x240>
   39f92:	4631      	mov	r1, r6
   39f94:	4628      	mov	r0, r5
   39f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   39f9a:	47b8      	blx	r7
   39f9c:	3001      	adds	r0, #1
   39f9e:	f43f af0c 	beq.w	39dba <_printf_float+0xb6>
   39fa2:	f04f 0900 	mov.w	r9, #0
   39fa6:	f104 0a1a 	add.w	sl, r4, #26
   39faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   39fac:	425b      	negs	r3, r3
   39fae:	454b      	cmp	r3, r9
   39fb0:	dc01      	bgt.n	39fb6 <_printf_float+0x2b2>
   39fb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39fb4:	e794      	b.n	39ee0 <_printf_float+0x1dc>
   39fb6:	2301      	movs	r3, #1
   39fb8:	4652      	mov	r2, sl
   39fba:	4631      	mov	r1, r6
   39fbc:	4628      	mov	r0, r5
   39fbe:	47b8      	blx	r7
   39fc0:	3001      	adds	r0, #1
   39fc2:	f43f aefa 	beq.w	39dba <_printf_float+0xb6>
   39fc6:	f109 0901 	add.w	r9, r9, #1
   39fca:	e7ee      	b.n	39faa <_printf_float+0x2a6>
   39fcc:	7fefffff 	.word	0x7fefffff
   39fd0:	00045f58 	.word	0x00045f58
   39fd4:	00045f5c 	.word	0x00045f5c
   39fd8:	00045f64 	.word	0x00045f64
   39fdc:	00045f60 	.word	0x00045f60
   39fe0:	00045f9b 	.word	0x00045f9b
   39fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   39fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   39fe8:	429a      	cmp	r2, r3
   39fea:	bfa8      	it	ge
   39fec:	461a      	movge	r2, r3
   39fee:	2a00      	cmp	r2, #0
   39ff0:	4691      	mov	r9, r2
   39ff2:	dc37      	bgt.n	3a064 <_printf_float+0x360>
   39ff4:	f04f 0b00 	mov.w	fp, #0
   39ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   39ffc:	f104 021a 	add.w	r2, r4, #26
   3a000:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3a004:	ebaa 0309 	sub.w	r3, sl, r9
   3a008:	455b      	cmp	r3, fp
   3a00a:	dc33      	bgt.n	3a074 <_printf_float+0x370>
   3a00c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a010:	429a      	cmp	r2, r3
   3a012:	db3b      	blt.n	3a08c <_printf_float+0x388>
   3a014:	6823      	ldr	r3, [r4, #0]
   3a016:	07da      	lsls	r2, r3, #31
   3a018:	d438      	bmi.n	3a08c <_printf_float+0x388>
   3a01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a01c:	990d      	ldr	r1, [sp, #52]	; 0x34
   3a01e:	eba2 030a 	sub.w	r3, r2, sl
   3a022:	eba2 0901 	sub.w	r9, r2, r1
   3a026:	4599      	cmp	r9, r3
   3a028:	bfa8      	it	ge
   3a02a:	4699      	movge	r9, r3
   3a02c:	f1b9 0f00 	cmp.w	r9, #0
   3a030:	dc34      	bgt.n	3a09c <_printf_float+0x398>
   3a032:	f04f 0800 	mov.w	r8, #0
   3a036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3a03a:	f104 0a1a 	add.w	sl, r4, #26
   3a03e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   3a042:	1a9b      	subs	r3, r3, r2
   3a044:	eba3 0309 	sub.w	r3, r3, r9
   3a048:	4543      	cmp	r3, r8
   3a04a:	f77f af7b 	ble.w	39f44 <_printf_float+0x240>
   3a04e:	2301      	movs	r3, #1
   3a050:	4652      	mov	r2, sl
   3a052:	4631      	mov	r1, r6
   3a054:	4628      	mov	r0, r5
   3a056:	47b8      	blx	r7
   3a058:	3001      	adds	r0, #1
   3a05a:	f43f aeae 	beq.w	39dba <_printf_float+0xb6>
   3a05e:	f108 0801 	add.w	r8, r8, #1
   3a062:	e7ec      	b.n	3a03e <_printf_float+0x33a>
   3a064:	4613      	mov	r3, r2
   3a066:	4631      	mov	r1, r6
   3a068:	4642      	mov	r2, r8
   3a06a:	4628      	mov	r0, r5
   3a06c:	47b8      	blx	r7
   3a06e:	3001      	adds	r0, #1
   3a070:	d1c0      	bne.n	39ff4 <_printf_float+0x2f0>
   3a072:	e6a2      	b.n	39dba <_printf_float+0xb6>
   3a074:	2301      	movs	r3, #1
   3a076:	4631      	mov	r1, r6
   3a078:	4628      	mov	r0, r5
   3a07a:	920b      	str	r2, [sp, #44]	; 0x2c
   3a07c:	47b8      	blx	r7
   3a07e:	3001      	adds	r0, #1
   3a080:	f43f ae9b 	beq.w	39dba <_printf_float+0xb6>
   3a084:	f10b 0b01 	add.w	fp, fp, #1
   3a088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3a08a:	e7b9      	b.n	3a000 <_printf_float+0x2fc>
   3a08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a090:	4631      	mov	r1, r6
   3a092:	4628      	mov	r0, r5
   3a094:	47b8      	blx	r7
   3a096:	3001      	adds	r0, #1
   3a098:	d1bf      	bne.n	3a01a <_printf_float+0x316>
   3a09a:	e68e      	b.n	39dba <_printf_float+0xb6>
   3a09c:	464b      	mov	r3, r9
   3a09e:	eb08 020a 	add.w	r2, r8, sl
   3a0a2:	4631      	mov	r1, r6
   3a0a4:	4628      	mov	r0, r5
   3a0a6:	47b8      	blx	r7
   3a0a8:	3001      	adds	r0, #1
   3a0aa:	d1c2      	bne.n	3a032 <_printf_float+0x32e>
   3a0ac:	e685      	b.n	39dba <_printf_float+0xb6>
   3a0ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   3a0b0:	2a01      	cmp	r2, #1
   3a0b2:	dc01      	bgt.n	3a0b8 <_printf_float+0x3b4>
   3a0b4:	07db      	lsls	r3, r3, #31
   3a0b6:	d537      	bpl.n	3a128 <_printf_float+0x424>
   3a0b8:	2301      	movs	r3, #1
   3a0ba:	4642      	mov	r2, r8
   3a0bc:	4631      	mov	r1, r6
   3a0be:	4628      	mov	r0, r5
   3a0c0:	47b8      	blx	r7
   3a0c2:	3001      	adds	r0, #1
   3a0c4:	f43f ae79 	beq.w	39dba <_printf_float+0xb6>
   3a0c8:	4631      	mov	r1, r6
   3a0ca:	4628      	mov	r0, r5
   3a0cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3a0d0:	47b8      	blx	r7
   3a0d2:	3001      	adds	r0, #1
   3a0d4:	f43f ae71 	beq.w	39dba <_printf_float+0xb6>
   3a0d8:	2200      	movs	r2, #0
   3a0da:	2300      	movs	r3, #0
   3a0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3a0e0:	f7e7 f9b2 	bl	21448 <__aeabi_dcmpeq>
   3a0e4:	b9d8      	cbnz	r0, 3a11e <_printf_float+0x41a>
   3a0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a0e8:	f108 0201 	add.w	r2, r8, #1
   3a0ec:	3b01      	subs	r3, #1
   3a0ee:	4631      	mov	r1, r6
   3a0f0:	4628      	mov	r0, r5
   3a0f2:	47b8      	blx	r7
   3a0f4:	3001      	adds	r0, #1
   3a0f6:	d10e      	bne.n	3a116 <_printf_float+0x412>
   3a0f8:	e65f      	b.n	39dba <_printf_float+0xb6>
   3a0fa:	2301      	movs	r3, #1
   3a0fc:	464a      	mov	r2, r9
   3a0fe:	4631      	mov	r1, r6
   3a100:	4628      	mov	r0, r5
   3a102:	47b8      	blx	r7
   3a104:	3001      	adds	r0, #1
   3a106:	f43f ae58 	beq.w	39dba <_printf_float+0xb6>
   3a10a:	f108 0801 	add.w	r8, r8, #1
   3a10e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3a110:	3b01      	subs	r3, #1
   3a112:	4543      	cmp	r3, r8
   3a114:	dcf1      	bgt.n	3a0fa <_printf_float+0x3f6>
   3a116:	4653      	mov	r3, sl
   3a118:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3a11c:	e6e1      	b.n	39ee2 <_printf_float+0x1de>
   3a11e:	f04f 0800 	mov.w	r8, #0
   3a122:	f104 091a 	add.w	r9, r4, #26
   3a126:	e7f2      	b.n	3a10e <_printf_float+0x40a>
   3a128:	2301      	movs	r3, #1
   3a12a:	4642      	mov	r2, r8
   3a12c:	e7df      	b.n	3a0ee <_printf_float+0x3ea>
   3a12e:	2301      	movs	r3, #1
   3a130:	464a      	mov	r2, r9
   3a132:	4631      	mov	r1, r6
   3a134:	4628      	mov	r0, r5
   3a136:	47b8      	blx	r7
   3a138:	3001      	adds	r0, #1
   3a13a:	f43f ae3e 	beq.w	39dba <_printf_float+0xb6>
   3a13e:	f108 0801 	add.w	r8, r8, #1
   3a142:	68e3      	ldr	r3, [r4, #12]
   3a144:	990f      	ldr	r1, [sp, #60]	; 0x3c
   3a146:	1a5b      	subs	r3, r3, r1
   3a148:	4543      	cmp	r3, r8
   3a14a:	dcf0      	bgt.n	3a12e <_printf_float+0x42a>
   3a14c:	e6fe      	b.n	39f4c <_printf_float+0x248>
   3a14e:	f04f 0800 	mov.w	r8, #0
   3a152:	f104 0919 	add.w	r9, r4, #25
   3a156:	e7f4      	b.n	3a142 <_printf_float+0x43e>

0003a158 <_printf_i>:
   3a158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3a15c:	460c      	mov	r4, r1
   3a15e:	4691      	mov	r9, r2
   3a160:	4680      	mov	r8, r0
   3a162:	469a      	mov	sl, r3
   3a164:	7e27      	ldrb	r7, [r4, #24]
   3a166:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3a16a:	990c      	ldr	r1, [sp, #48]	; 0x30
   3a16c:	2f78      	cmp	r7, #120	; 0x78
   3a16e:	d807      	bhi.n	3a180 <_printf_i+0x28>
   3a170:	2f62      	cmp	r7, #98	; 0x62
   3a172:	d80a      	bhi.n	3a18a <_printf_i+0x32>
   3a174:	2f00      	cmp	r7, #0
   3a176:	f000 80d8 	beq.w	3a32a <_printf_i+0x1d2>
   3a17a:	2f58      	cmp	r7, #88	; 0x58
   3a17c:	f000 80a3 	beq.w	3a2c6 <_printf_i+0x16e>
   3a180:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3a184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3a188:	e03a      	b.n	3a200 <_printf_i+0xa8>
   3a18a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3a18e:	2b15      	cmp	r3, #21
   3a190:	d8f6      	bhi.n	3a180 <_printf_i+0x28>
   3a192:	a001      	add	r0, pc, #4	; (adr r0, 3a198 <_printf_i+0x40>)
   3a194:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3a198:	0003a1f1 	.word	0x0003a1f1
   3a19c:	0003a205 	.word	0x0003a205
   3a1a0:	0003a181 	.word	0x0003a181
   3a1a4:	0003a181 	.word	0x0003a181
   3a1a8:	0003a181 	.word	0x0003a181
   3a1ac:	0003a181 	.word	0x0003a181
   3a1b0:	0003a205 	.word	0x0003a205
   3a1b4:	0003a181 	.word	0x0003a181
   3a1b8:	0003a181 	.word	0x0003a181
   3a1bc:	0003a181 	.word	0x0003a181
   3a1c0:	0003a181 	.word	0x0003a181
   3a1c4:	0003a311 	.word	0x0003a311
   3a1c8:	0003a235 	.word	0x0003a235
   3a1cc:	0003a2f3 	.word	0x0003a2f3
   3a1d0:	0003a181 	.word	0x0003a181
   3a1d4:	0003a181 	.word	0x0003a181
   3a1d8:	0003a333 	.word	0x0003a333
   3a1dc:	0003a181 	.word	0x0003a181
   3a1e0:	0003a235 	.word	0x0003a235
   3a1e4:	0003a181 	.word	0x0003a181
   3a1e8:	0003a181 	.word	0x0003a181
   3a1ec:	0003a2fb 	.word	0x0003a2fb
   3a1f0:	680b      	ldr	r3, [r1, #0]
   3a1f2:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3a1f6:	1d1a      	adds	r2, r3, #4
   3a1f8:	681b      	ldr	r3, [r3, #0]
   3a1fa:	600a      	str	r2, [r1, #0]
   3a1fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3a200:	2301      	movs	r3, #1
   3a202:	e0a3      	b.n	3a34c <_printf_i+0x1f4>
   3a204:	6825      	ldr	r5, [r4, #0]
   3a206:	6808      	ldr	r0, [r1, #0]
   3a208:	062e      	lsls	r6, r5, #24
   3a20a:	f100 0304 	add.w	r3, r0, #4
   3a20e:	d50a      	bpl.n	3a226 <_printf_i+0xce>
   3a210:	6805      	ldr	r5, [r0, #0]
   3a212:	600b      	str	r3, [r1, #0]
   3a214:	2d00      	cmp	r5, #0
   3a216:	da03      	bge.n	3a220 <_printf_i+0xc8>
   3a218:	232d      	movs	r3, #45	; 0x2d
   3a21a:	426d      	negs	r5, r5
   3a21c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a220:	485e      	ldr	r0, [pc, #376]	; (3a39c <_printf_i+0x244>)
   3a222:	230a      	movs	r3, #10
   3a224:	e019      	b.n	3a25a <_printf_i+0x102>
   3a226:	f015 0f40 	tst.w	r5, #64	; 0x40
   3a22a:	6805      	ldr	r5, [r0, #0]
   3a22c:	600b      	str	r3, [r1, #0]
   3a22e:	bf18      	it	ne
   3a230:	b22d      	sxthne	r5, r5
   3a232:	e7ef      	b.n	3a214 <_printf_i+0xbc>
   3a234:	680b      	ldr	r3, [r1, #0]
   3a236:	6825      	ldr	r5, [r4, #0]
   3a238:	1d18      	adds	r0, r3, #4
   3a23a:	6008      	str	r0, [r1, #0]
   3a23c:	0628      	lsls	r0, r5, #24
   3a23e:	d501      	bpl.n	3a244 <_printf_i+0xec>
   3a240:	681d      	ldr	r5, [r3, #0]
   3a242:	e002      	b.n	3a24a <_printf_i+0xf2>
   3a244:	0669      	lsls	r1, r5, #25
   3a246:	d5fb      	bpl.n	3a240 <_printf_i+0xe8>
   3a248:	881d      	ldrh	r5, [r3, #0]
   3a24a:	2f6f      	cmp	r7, #111	; 0x6f
   3a24c:	4853      	ldr	r0, [pc, #332]	; (3a39c <_printf_i+0x244>)
   3a24e:	bf0c      	ite	eq
   3a250:	2308      	moveq	r3, #8
   3a252:	230a      	movne	r3, #10
   3a254:	2100      	movs	r1, #0
   3a256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3a25a:	6866      	ldr	r6, [r4, #4]
   3a25c:	2e00      	cmp	r6, #0
   3a25e:	60a6      	str	r6, [r4, #8]
   3a260:	bfa2      	ittt	ge
   3a262:	6821      	ldrge	r1, [r4, #0]
   3a264:	f021 0104 	bicge.w	r1, r1, #4
   3a268:	6021      	strge	r1, [r4, #0]
   3a26a:	b90d      	cbnz	r5, 3a270 <_printf_i+0x118>
   3a26c:	2e00      	cmp	r6, #0
   3a26e:	d04d      	beq.n	3a30c <_printf_i+0x1b4>
   3a270:	4616      	mov	r6, r2
   3a272:	fbb5 f1f3 	udiv	r1, r5, r3
   3a276:	fb03 5711 	mls	r7, r3, r1, r5
   3a27a:	5dc7      	ldrb	r7, [r0, r7]
   3a27c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   3a280:	462f      	mov	r7, r5
   3a282:	460d      	mov	r5, r1
   3a284:	42bb      	cmp	r3, r7
   3a286:	d9f4      	bls.n	3a272 <_printf_i+0x11a>
   3a288:	2b08      	cmp	r3, #8
   3a28a:	d10b      	bne.n	3a2a4 <_printf_i+0x14c>
   3a28c:	6823      	ldr	r3, [r4, #0]
   3a28e:	07df      	lsls	r7, r3, #31
   3a290:	d508      	bpl.n	3a2a4 <_printf_i+0x14c>
   3a292:	6923      	ldr	r3, [r4, #16]
   3a294:	6861      	ldr	r1, [r4, #4]
   3a296:	4299      	cmp	r1, r3
   3a298:	bfde      	ittt	le
   3a29a:	2330      	movle	r3, #48	; 0x30
   3a29c:	f806 3c01 	strble.w	r3, [r6, #-1]
   3a2a0:	f106 36ff 	addle.w	r6, r6, #4294967295
   3a2a4:	1b92      	subs	r2, r2, r6
   3a2a6:	6122      	str	r2, [r4, #16]
   3a2a8:	464b      	mov	r3, r9
   3a2aa:	aa03      	add	r2, sp, #12
   3a2ac:	4621      	mov	r1, r4
   3a2ae:	4640      	mov	r0, r8
   3a2b0:	f8cd a000 	str.w	sl, [sp]
   3a2b4:	f005 ff11 	bl	400da <_printf_common>
   3a2b8:	3001      	adds	r0, #1
   3a2ba:	d14c      	bne.n	3a356 <_printf_i+0x1fe>
   3a2bc:	f04f 30ff 	mov.w	r0, #4294967295
   3a2c0:	b004      	add	sp, #16
   3a2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a2c6:	4835      	ldr	r0, [pc, #212]	; (3a39c <_printf_i+0x244>)
   3a2c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   3a2cc:	6823      	ldr	r3, [r4, #0]
   3a2ce:	680e      	ldr	r6, [r1, #0]
   3a2d0:	061f      	lsls	r7, r3, #24
   3a2d2:	f856 5b04 	ldr.w	r5, [r6], #4
   3a2d6:	600e      	str	r6, [r1, #0]
   3a2d8:	d514      	bpl.n	3a304 <_printf_i+0x1ac>
   3a2da:	07d9      	lsls	r1, r3, #31
   3a2dc:	bf44      	itt	mi
   3a2de:	f043 0320 	orrmi.w	r3, r3, #32
   3a2e2:	6023      	strmi	r3, [r4, #0]
   3a2e4:	b91d      	cbnz	r5, 3a2ee <_printf_i+0x196>
   3a2e6:	6823      	ldr	r3, [r4, #0]
   3a2e8:	f023 0320 	bic.w	r3, r3, #32
   3a2ec:	6023      	str	r3, [r4, #0]
   3a2ee:	2310      	movs	r3, #16
   3a2f0:	e7b0      	b.n	3a254 <_printf_i+0xfc>
   3a2f2:	6823      	ldr	r3, [r4, #0]
   3a2f4:	f043 0320 	orr.w	r3, r3, #32
   3a2f8:	6023      	str	r3, [r4, #0]
   3a2fa:	2378      	movs	r3, #120	; 0x78
   3a2fc:	4828      	ldr	r0, [pc, #160]	; (3a3a0 <_printf_i+0x248>)
   3a2fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3a302:	e7e3      	b.n	3a2cc <_printf_i+0x174>
   3a304:	065e      	lsls	r6, r3, #25
   3a306:	bf48      	it	mi
   3a308:	b2ad      	uxthmi	r5, r5
   3a30a:	e7e6      	b.n	3a2da <_printf_i+0x182>
   3a30c:	4616      	mov	r6, r2
   3a30e:	e7bb      	b.n	3a288 <_printf_i+0x130>
   3a310:	680b      	ldr	r3, [r1, #0]
   3a312:	6826      	ldr	r6, [r4, #0]
   3a314:	1d1d      	adds	r5, r3, #4
   3a316:	6960      	ldr	r0, [r4, #20]
   3a318:	600d      	str	r5, [r1, #0]
   3a31a:	0635      	lsls	r5, r6, #24
   3a31c:	681b      	ldr	r3, [r3, #0]
   3a31e:	d501      	bpl.n	3a324 <_printf_i+0x1cc>
   3a320:	6018      	str	r0, [r3, #0]
   3a322:	e002      	b.n	3a32a <_printf_i+0x1d2>
   3a324:	0671      	lsls	r1, r6, #25
   3a326:	d5fb      	bpl.n	3a320 <_printf_i+0x1c8>
   3a328:	8018      	strh	r0, [r3, #0]
   3a32a:	2300      	movs	r3, #0
   3a32c:	4616      	mov	r6, r2
   3a32e:	6123      	str	r3, [r4, #16]
   3a330:	e7ba      	b.n	3a2a8 <_printf_i+0x150>
   3a332:	680b      	ldr	r3, [r1, #0]
   3a334:	1d1a      	adds	r2, r3, #4
   3a336:	600a      	str	r2, [r1, #0]
   3a338:	2100      	movs	r1, #0
   3a33a:	681e      	ldr	r6, [r3, #0]
   3a33c:	6862      	ldr	r2, [r4, #4]
   3a33e:	4630      	mov	r0, r6
   3a340:	f005 fdc2 	bl	3fec8 <memchr>
   3a344:	b108      	cbz	r0, 3a34a <_printf_i+0x1f2>
   3a346:	1b80      	subs	r0, r0, r6
   3a348:	6060      	str	r0, [r4, #4]
   3a34a:	6863      	ldr	r3, [r4, #4]
   3a34c:	6123      	str	r3, [r4, #16]
   3a34e:	2300      	movs	r3, #0
   3a350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3a354:	e7a8      	b.n	3a2a8 <_printf_i+0x150>
   3a356:	6923      	ldr	r3, [r4, #16]
   3a358:	4632      	mov	r2, r6
   3a35a:	4649      	mov	r1, r9
   3a35c:	4640      	mov	r0, r8
   3a35e:	47d0      	blx	sl
   3a360:	3001      	adds	r0, #1
   3a362:	d0ab      	beq.n	3a2bc <_printf_i+0x164>
   3a364:	6823      	ldr	r3, [r4, #0]
   3a366:	079b      	lsls	r3, r3, #30
   3a368:	d413      	bmi.n	3a392 <_printf_i+0x23a>
   3a36a:	68e0      	ldr	r0, [r4, #12]
   3a36c:	9b03      	ldr	r3, [sp, #12]
   3a36e:	4298      	cmp	r0, r3
   3a370:	bfb8      	it	lt
   3a372:	4618      	movlt	r0, r3
   3a374:	e7a4      	b.n	3a2c0 <_printf_i+0x168>
   3a376:	2301      	movs	r3, #1
   3a378:	4632      	mov	r2, r6
   3a37a:	4649      	mov	r1, r9
   3a37c:	4640      	mov	r0, r8
   3a37e:	47d0      	blx	sl
   3a380:	3001      	adds	r0, #1
   3a382:	d09b      	beq.n	3a2bc <_printf_i+0x164>
   3a384:	3501      	adds	r5, #1
   3a386:	68e3      	ldr	r3, [r4, #12]
   3a388:	9903      	ldr	r1, [sp, #12]
   3a38a:	1a5b      	subs	r3, r3, r1
   3a38c:	42ab      	cmp	r3, r5
   3a38e:	dcf2      	bgt.n	3a376 <_printf_i+0x21e>
   3a390:	e7eb      	b.n	3a36a <_printf_i+0x212>
   3a392:	2500      	movs	r5, #0
   3a394:	f104 0619 	add.w	r6, r4, #25
   3a398:	e7f5      	b.n	3a386 <_printf_i+0x22e>
   3a39a:	bf00      	nop
   3a39c:	00045f68 	.word	0x00045f68
   3a3a0:	00045f79 	.word	0x00045f79

0003a3a4 <_sbrk_r>:
   3a3a4:	b538      	push	{r3, r4, r5, lr}
   3a3a6:	2300      	movs	r3, #0
   3a3a8:	4d05      	ldr	r5, [pc, #20]	; (3a3c0 <_sbrk_r+0x1c>)
   3a3aa:	4604      	mov	r4, r0
   3a3ac:	4608      	mov	r0, r1
   3a3ae:	602b      	str	r3, [r5, #0]
   3a3b0:	f7ee fad0 	bl	28954 <_sbrk>
   3a3b4:	1c43      	adds	r3, r0, #1
   3a3b6:	d102      	bne.n	3a3be <_sbrk_r+0x1a>
   3a3b8:	682b      	ldr	r3, [r5, #0]
   3a3ba:	b103      	cbz	r3, 3a3be <_sbrk_r+0x1a>
   3a3bc:	6023      	str	r3, [r4, #0]
   3a3be:	bd38      	pop	{r3, r4, r5, pc}
   3a3c0:	20010f40 	.word	0x20010f40

0003a3c4 <sniprintf>:
   3a3c4:	b40c      	push	{r2, r3}
   3a3c6:	4b18      	ldr	r3, [pc, #96]	; (3a428 <sniprintf+0x64>)
   3a3c8:	b530      	push	{r4, r5, lr}
   3a3ca:	1e0c      	subs	r4, r1, #0
   3a3cc:	b09d      	sub	sp, #116	; 0x74
   3a3ce:	681d      	ldr	r5, [r3, #0]
   3a3d0:	da08      	bge.n	3a3e4 <sniprintf+0x20>
   3a3d2:	238b      	movs	r3, #139	; 0x8b
   3a3d4:	f04f 30ff 	mov.w	r0, #4294967295
   3a3d8:	602b      	str	r3, [r5, #0]
   3a3da:	b01d      	add	sp, #116	; 0x74
   3a3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3a3e0:	b002      	add	sp, #8
   3a3e2:	4770      	bx	lr
   3a3e4:	f44f 7302 	mov.w	r3, #520	; 0x208
   3a3e8:	9002      	str	r0, [sp, #8]
   3a3ea:	9006      	str	r0, [sp, #24]
   3a3ec:	a902      	add	r1, sp, #8
   3a3ee:	f8ad 3014 	strh.w	r3, [sp, #20]
   3a3f2:	bf14      	ite	ne
   3a3f4:	f104 33ff 	addne.w	r3, r4, #4294967295
   3a3f8:	4623      	moveq	r3, r4
   3a3fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3a3fc:	4628      	mov	r0, r5
   3a3fe:	9304      	str	r3, [sp, #16]
   3a400:	9307      	str	r3, [sp, #28]
   3a402:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a406:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a40a:	ab21      	add	r3, sp, #132	; 0x84
   3a40c:	9301      	str	r3, [sp, #4]
   3a40e:	f000 fd01 	bl	3ae14 <_svfiprintf_r>
   3a412:	1c43      	adds	r3, r0, #1
   3a414:	bfbc      	itt	lt
   3a416:	238b      	movlt	r3, #139	; 0x8b
   3a418:	602b      	strlt	r3, [r5, #0]
   3a41a:	2c00      	cmp	r4, #0
   3a41c:	d0dd      	beq.n	3a3da <sniprintf+0x16>
   3a41e:	9b02      	ldr	r3, [sp, #8]
   3a420:	2200      	movs	r2, #0
   3a422:	701a      	strb	r2, [r3, #0]
   3a424:	e7d9      	b.n	3a3da <sniprintf+0x16>
   3a426:	bf00      	nop
   3a428:	2000c6f4 	.word	0x2000c6f4

0003a42c <_strtol_l.isra.0>:
   3a42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3a430:	468c      	mov	ip, r1
   3a432:	4686      	mov	lr, r0
   3a434:	4e38      	ldr	r6, [pc, #224]	; (3a518 <_strtol_l.isra.0+0xec>)
   3a436:	4660      	mov	r0, ip
   3a438:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3a43c:	5da5      	ldrb	r5, [r4, r6]
   3a43e:	f015 0508 	ands.w	r5, r5, #8
   3a442:	d1f8      	bne.n	3a436 <_strtol_l.isra.0+0xa>
   3a444:	2c2d      	cmp	r4, #45	; 0x2d
   3a446:	d133      	bne.n	3a4b0 <_strtol_l.isra.0+0x84>
   3a448:	f89c 4000 	ldrb.w	r4, [ip]
   3a44c:	f04f 0801 	mov.w	r8, #1
   3a450:	f100 0c02 	add.w	ip, r0, #2
   3a454:	2b00      	cmp	r3, #0
   3a456:	d05b      	beq.n	3a510 <_strtol_l.isra.0+0xe4>
   3a458:	2b10      	cmp	r3, #16
   3a45a:	d10c      	bne.n	3a476 <_strtol_l.isra.0+0x4a>
   3a45c:	2c30      	cmp	r4, #48	; 0x30
   3a45e:	d10a      	bne.n	3a476 <_strtol_l.isra.0+0x4a>
   3a460:	f89c 0000 	ldrb.w	r0, [ip]
   3a464:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3a468:	2858      	cmp	r0, #88	; 0x58
   3a46a:	d14c      	bne.n	3a506 <_strtol_l.isra.0+0xda>
   3a46c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3a470:	2310      	movs	r3, #16
   3a472:	f10c 0c02 	add.w	ip, ip, #2
   3a476:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   3a47a:	2600      	movs	r6, #0
   3a47c:	3f01      	subs	r7, #1
   3a47e:	4630      	mov	r0, r6
   3a480:	fbb7 f9f3 	udiv	r9, r7, r3
   3a484:	fb03 7a19 	mls	sl, r3, r9, r7
   3a488:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   3a48c:	2d09      	cmp	r5, #9
   3a48e:	d817      	bhi.n	3a4c0 <_strtol_l.isra.0+0x94>
   3a490:	462c      	mov	r4, r5
   3a492:	42a3      	cmp	r3, r4
   3a494:	dd23      	ble.n	3a4de <_strtol_l.isra.0+0xb2>
   3a496:	1c75      	adds	r5, r6, #1
   3a498:	d007      	beq.n	3a4aa <_strtol_l.isra.0+0x7e>
   3a49a:	4581      	cmp	r9, r0
   3a49c:	d31c      	bcc.n	3a4d8 <_strtol_l.isra.0+0xac>
   3a49e:	d101      	bne.n	3a4a4 <_strtol_l.isra.0+0x78>
   3a4a0:	45a2      	cmp	sl, r4
   3a4a2:	db19      	blt.n	3a4d8 <_strtol_l.isra.0+0xac>
   3a4a4:	fb00 4003 	mla	r0, r0, r3, r4
   3a4a8:	2601      	movs	r6, #1
   3a4aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3a4ae:	e7eb      	b.n	3a488 <_strtol_l.isra.0+0x5c>
   3a4b0:	2c2b      	cmp	r4, #43	; 0x2b
   3a4b2:	46a8      	mov	r8, r5
   3a4b4:	bf04      	itt	eq
   3a4b6:	f89c 4000 	ldrbeq.w	r4, [ip]
   3a4ba:	f100 0c02 	addeq.w	ip, r0, #2
   3a4be:	e7c9      	b.n	3a454 <_strtol_l.isra.0+0x28>
   3a4c0:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   3a4c4:	2d19      	cmp	r5, #25
   3a4c6:	d801      	bhi.n	3a4cc <_strtol_l.isra.0+0xa0>
   3a4c8:	3c37      	subs	r4, #55	; 0x37
   3a4ca:	e7e2      	b.n	3a492 <_strtol_l.isra.0+0x66>
   3a4cc:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   3a4d0:	2d19      	cmp	r5, #25
   3a4d2:	d804      	bhi.n	3a4de <_strtol_l.isra.0+0xb2>
   3a4d4:	3c57      	subs	r4, #87	; 0x57
   3a4d6:	e7dc      	b.n	3a492 <_strtol_l.isra.0+0x66>
   3a4d8:	f04f 36ff 	mov.w	r6, #4294967295
   3a4dc:	e7e5      	b.n	3a4aa <_strtol_l.isra.0+0x7e>
   3a4de:	1c73      	adds	r3, r6, #1
   3a4e0:	d106      	bne.n	3a4f0 <_strtol_l.isra.0+0xc4>
   3a4e2:	2322      	movs	r3, #34	; 0x22
   3a4e4:	4638      	mov	r0, r7
   3a4e6:	f8ce 3000 	str.w	r3, [lr]
   3a4ea:	b942      	cbnz	r2, 3a4fe <_strtol_l.isra.0+0xd2>
   3a4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3a4f0:	f1b8 0f00 	cmp.w	r8, #0
   3a4f4:	d000      	beq.n	3a4f8 <_strtol_l.isra.0+0xcc>
   3a4f6:	4240      	negs	r0, r0
   3a4f8:	2a00      	cmp	r2, #0
   3a4fa:	d0f7      	beq.n	3a4ec <_strtol_l.isra.0+0xc0>
   3a4fc:	b10e      	cbz	r6, 3a502 <_strtol_l.isra.0+0xd6>
   3a4fe:	f10c 31ff 	add.w	r1, ip, #4294967295
   3a502:	6011      	str	r1, [r2, #0]
   3a504:	e7f2      	b.n	3a4ec <_strtol_l.isra.0+0xc0>
   3a506:	2430      	movs	r4, #48	; 0x30
   3a508:	2b00      	cmp	r3, #0
   3a50a:	d1b4      	bne.n	3a476 <_strtol_l.isra.0+0x4a>
   3a50c:	2308      	movs	r3, #8
   3a50e:	e7b2      	b.n	3a476 <_strtol_l.isra.0+0x4a>
   3a510:	2c30      	cmp	r4, #48	; 0x30
   3a512:	d0a5      	beq.n	3a460 <_strtol_l.isra.0+0x34>
   3a514:	230a      	movs	r3, #10
   3a516:	e7ae      	b.n	3a476 <_strtol_l.isra.0+0x4a>
   3a518:	00045e47 	.word	0x00045e47

0003a51c <strtol>:
   3a51c:	4613      	mov	r3, r2
   3a51e:	460a      	mov	r2, r1
   3a520:	4601      	mov	r1, r0
   3a522:	4802      	ldr	r0, [pc, #8]	; (3a52c <strtol+0x10>)
   3a524:	6800      	ldr	r0, [r0, #0]
   3a526:	f7ff bf81 	b.w	3a42c <_strtol_l.isra.0>
   3a52a:	bf00      	nop
   3a52c:	2000c6f4 	.word	0x2000c6f4

0003a530 <_strtoll_l.isra.0>:
   3a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a534:	4691      	mov	r9, r2
   3a536:	b087      	sub	sp, #28
   3a538:	4688      	mov	r8, r1
   3a53a:	461f      	mov	r7, r3
   3a53c:	460d      	mov	r5, r1
   3a53e:	4a46      	ldr	r2, [pc, #280]	; (3a658 <_strtoll_l.isra.0+0x128>)
   3a540:	9005      	str	r0, [sp, #20]
   3a542:	462b      	mov	r3, r5
   3a544:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a548:	5ca6      	ldrb	r6, [r4, r2]
   3a54a:	f016 0608 	ands.w	r6, r6, #8
   3a54e:	d1f8      	bne.n	3a542 <_strtoll_l.isra.0+0x12>
   3a550:	2c2d      	cmp	r4, #45	; 0x2d
   3a552:	d148      	bne.n	3a5e6 <_strtoll_l.isra.0+0xb6>
   3a554:	782c      	ldrb	r4, [r5, #0]
   3a556:	2601      	movs	r6, #1
   3a558:	1c9d      	adds	r5, r3, #2
   3a55a:	2f00      	cmp	r7, #0
   3a55c:	d078      	beq.n	3a650 <_strtoll_l.isra.0+0x120>
   3a55e:	2f10      	cmp	r7, #16
   3a560:	d109      	bne.n	3a576 <_strtoll_l.isra.0+0x46>
   3a562:	2c30      	cmp	r4, #48	; 0x30
   3a564:	d107      	bne.n	3a576 <_strtoll_l.isra.0+0x46>
   3a566:	782b      	ldrb	r3, [r5, #0]
   3a568:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3a56c:	2b58      	cmp	r3, #88	; 0x58
   3a56e:	d16a      	bne.n	3a646 <_strtoll_l.isra.0+0x116>
   3a570:	786c      	ldrb	r4, [r5, #1]
   3a572:	2710      	movs	r7, #16
   3a574:	3502      	adds	r5, #2
   3a576:	f04f 32ff 	mov.w	r2, #4294967295
   3a57a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   3a57e:	ea4f 7be7 	mov.w	fp, r7, asr #31
   3a582:	46ba      	mov	sl, r7
   3a584:	1990      	adds	r0, r2, r6
   3a586:	463a      	mov	r2, r7
   3a588:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
   3a58c:	465b      	mov	r3, fp
   3a58e:	e9cd 0100 	strd	r0, r1, [sp]
   3a592:	f7e6 fd85 	bl	210a0 <__aeabi_uldivmod>
   3a596:	2300      	movs	r3, #0
   3a598:	4696      	mov	lr, r2
   3a59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   3a59e:	2000      	movs	r0, #0
   3a5a0:	2100      	movs	r1, #0
   3a5a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   3a5a6:	f1bc 0f09 	cmp.w	ip, #9
   3a5aa:	d821      	bhi.n	3a5f0 <_strtoll_l.isra.0+0xc0>
   3a5ac:	4664      	mov	r4, ip
   3a5ae:	42a7      	cmp	r7, r4
   3a5b0:	dd2f      	ble.n	3a612 <_strtoll_l.isra.0+0xe2>
   3a5b2:	1c5a      	adds	r2, r3, #1
   3a5b4:	d014      	beq.n	3a5e0 <_strtoll_l.isra.0+0xb0>
   3a5b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3a5ba:	428b      	cmp	r3, r1
   3a5bc:	bf08      	it	eq
   3a5be:	4282      	cmpeq	r2, r0
   3a5c0:	d324      	bcc.n	3a60c <_strtoll_l.isra.0+0xdc>
   3a5c2:	d101      	bne.n	3a5c8 <_strtoll_l.isra.0+0x98>
   3a5c4:	45a6      	cmp	lr, r4
   3a5c6:	db21      	blt.n	3a60c <_strtoll_l.isra.0+0xdc>
   3a5c8:	fb0a f301 	mul.w	r3, sl, r1
   3a5cc:	fb00 330b 	mla	r3, r0, fp, r3
   3a5d0:	fbaa 0100 	umull	r0, r1, sl, r0
   3a5d4:	4419      	add	r1, r3
   3a5d6:	1900      	adds	r0, r0, r4
   3a5d8:	f04f 0301 	mov.w	r3, #1
   3a5dc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   3a5e0:	f815 4b01 	ldrb.w	r4, [r5], #1
   3a5e4:	e7dd      	b.n	3a5a2 <_strtoll_l.isra.0+0x72>
   3a5e6:	2c2b      	cmp	r4, #43	; 0x2b
   3a5e8:	bf04      	itt	eq
   3a5ea:	782c      	ldrbeq	r4, [r5, #0]
   3a5ec:	1c9d      	addeq	r5, r3, #2
   3a5ee:	e7b4      	b.n	3a55a <_strtoll_l.isra.0+0x2a>
   3a5f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   3a5f4:	f1bc 0f19 	cmp.w	ip, #25
   3a5f8:	d801      	bhi.n	3a5fe <_strtoll_l.isra.0+0xce>
   3a5fa:	3c37      	subs	r4, #55	; 0x37
   3a5fc:	e7d7      	b.n	3a5ae <_strtoll_l.isra.0+0x7e>
   3a5fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   3a602:	f1bc 0f19 	cmp.w	ip, #25
   3a606:	d804      	bhi.n	3a612 <_strtoll_l.isra.0+0xe2>
   3a608:	3c57      	subs	r4, #87	; 0x57
   3a60a:	e7d0      	b.n	3a5ae <_strtoll_l.isra.0+0x7e>
   3a60c:	f04f 33ff 	mov.w	r3, #4294967295
   3a610:	e7e6      	b.n	3a5e0 <_strtoll_l.isra.0+0xb0>
   3a612:	1c5a      	adds	r2, r3, #1
   3a614:	d10a      	bne.n	3a62c <_strtoll_l.isra.0+0xfc>
   3a616:	2322      	movs	r3, #34	; 0x22
   3a618:	9a05      	ldr	r2, [sp, #20]
   3a61a:	e9dd 0100 	ldrd	r0, r1, [sp]
   3a61e:	6013      	str	r3, [r2, #0]
   3a620:	f1b9 0f00 	cmp.w	r9, #0
   3a624:	d10a      	bne.n	3a63c <_strtoll_l.isra.0+0x10c>
   3a626:	b007      	add	sp, #28
   3a628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a62c:	b116      	cbz	r6, 3a634 <_strtoll_l.isra.0+0x104>
   3a62e:	4240      	negs	r0, r0
   3a630:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   3a634:	f1b9 0f00 	cmp.w	r9, #0
   3a638:	d0f5      	beq.n	3a626 <_strtoll_l.isra.0+0xf6>
   3a63a:	b10b      	cbz	r3, 3a640 <_strtoll_l.isra.0+0x110>
   3a63c:	f105 38ff 	add.w	r8, r5, #4294967295
   3a640:	f8c9 8000 	str.w	r8, [r9]
   3a644:	e7ef      	b.n	3a626 <_strtoll_l.isra.0+0xf6>
   3a646:	2430      	movs	r4, #48	; 0x30
   3a648:	2f00      	cmp	r7, #0
   3a64a:	d194      	bne.n	3a576 <_strtoll_l.isra.0+0x46>
   3a64c:	2708      	movs	r7, #8
   3a64e:	e792      	b.n	3a576 <_strtoll_l.isra.0+0x46>
   3a650:	2c30      	cmp	r4, #48	; 0x30
   3a652:	d088      	beq.n	3a566 <_strtoll_l.isra.0+0x36>
   3a654:	270a      	movs	r7, #10
   3a656:	e78e      	b.n	3a576 <_strtoll_l.isra.0+0x46>
   3a658:	00045e47 	.word	0x00045e47

0003a65c <strtoll>:
   3a65c:	4613      	mov	r3, r2
   3a65e:	460a      	mov	r2, r1
   3a660:	4601      	mov	r1, r0
   3a662:	4802      	ldr	r0, [pc, #8]	; (3a66c <strtoll+0x10>)
   3a664:	6800      	ldr	r0, [r0, #0]
   3a666:	f7ff bf63 	b.w	3a530 <_strtoll_l.isra.0>
   3a66a:	bf00      	nop
   3a66c:	2000c6f4 	.word	0x2000c6f4

0003a670 <_strtoul_l.isra.0>:
   3a670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a674:	468c      	mov	ip, r1
   3a676:	4686      	mov	lr, r0
   3a678:	4e39      	ldr	r6, [pc, #228]	; (3a760 <_strtoul_l.isra.0+0xf0>)
   3a67a:	4660      	mov	r0, ip
   3a67c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3a680:	5da5      	ldrb	r5, [r4, r6]
   3a682:	f015 0508 	ands.w	r5, r5, #8
   3a686:	d1f8      	bne.n	3a67a <_strtoul_l.isra.0+0xa>
   3a688:	2c2d      	cmp	r4, #45	; 0x2d
   3a68a:	d134      	bne.n	3a6f6 <_strtoul_l.isra.0+0x86>
   3a68c:	f89c 4000 	ldrb.w	r4, [ip]
   3a690:	f04f 0801 	mov.w	r8, #1
   3a694:	f100 0c02 	add.w	ip, r0, #2
   3a698:	2b00      	cmp	r3, #0
   3a69a:	d05d      	beq.n	3a758 <_strtoul_l.isra.0+0xe8>
   3a69c:	2b10      	cmp	r3, #16
   3a69e:	d10c      	bne.n	3a6ba <_strtoul_l.isra.0+0x4a>
   3a6a0:	2c30      	cmp	r4, #48	; 0x30
   3a6a2:	d10a      	bne.n	3a6ba <_strtoul_l.isra.0+0x4a>
   3a6a4:	f89c 0000 	ldrb.w	r0, [ip]
   3a6a8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3a6ac:	2858      	cmp	r0, #88	; 0x58
   3a6ae:	d14e      	bne.n	3a74e <_strtoul_l.isra.0+0xde>
   3a6b0:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3a6b4:	2310      	movs	r3, #16
   3a6b6:	f10c 0c02 	add.w	ip, ip, #2
   3a6ba:	f04f 37ff 	mov.w	r7, #4294967295
   3a6be:	2500      	movs	r5, #0
   3a6c0:	fbb7 f7f3 	udiv	r7, r7, r3
   3a6c4:	fb03 f907 	mul.w	r9, r3, r7
   3a6c8:	4628      	mov	r0, r5
   3a6ca:	ea6f 0909 	mvn.w	r9, r9
   3a6ce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3a6d2:	2e09      	cmp	r6, #9
   3a6d4:	d817      	bhi.n	3a706 <_strtoul_l.isra.0+0x96>
   3a6d6:	4634      	mov	r4, r6
   3a6d8:	42a3      	cmp	r3, r4
   3a6da:	dd23      	ble.n	3a724 <_strtoul_l.isra.0+0xb4>
   3a6dc:	2d00      	cmp	r5, #0
   3a6de:	db1e      	blt.n	3a71e <_strtoul_l.isra.0+0xae>
   3a6e0:	4287      	cmp	r7, r0
   3a6e2:	d31c      	bcc.n	3a71e <_strtoul_l.isra.0+0xae>
   3a6e4:	d101      	bne.n	3a6ea <_strtoul_l.isra.0+0x7a>
   3a6e6:	45a1      	cmp	r9, r4
   3a6e8:	db19      	blt.n	3a71e <_strtoul_l.isra.0+0xae>
   3a6ea:	fb00 4003 	mla	r0, r0, r3, r4
   3a6ee:	2501      	movs	r5, #1
   3a6f0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3a6f4:	e7eb      	b.n	3a6ce <_strtoul_l.isra.0+0x5e>
   3a6f6:	2c2b      	cmp	r4, #43	; 0x2b
   3a6f8:	46a8      	mov	r8, r5
   3a6fa:	bf04      	itt	eq
   3a6fc:	f89c 4000 	ldrbeq.w	r4, [ip]
   3a700:	f100 0c02 	addeq.w	ip, r0, #2
   3a704:	e7c8      	b.n	3a698 <_strtoul_l.isra.0+0x28>
   3a706:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3a70a:	2e19      	cmp	r6, #25
   3a70c:	d801      	bhi.n	3a712 <_strtoul_l.isra.0+0xa2>
   3a70e:	3c37      	subs	r4, #55	; 0x37
   3a710:	e7e2      	b.n	3a6d8 <_strtoul_l.isra.0+0x68>
   3a712:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3a716:	2e19      	cmp	r6, #25
   3a718:	d804      	bhi.n	3a724 <_strtoul_l.isra.0+0xb4>
   3a71a:	3c57      	subs	r4, #87	; 0x57
   3a71c:	e7dc      	b.n	3a6d8 <_strtoul_l.isra.0+0x68>
   3a71e:	f04f 35ff 	mov.w	r5, #4294967295
   3a722:	e7e5      	b.n	3a6f0 <_strtoul_l.isra.0+0x80>
   3a724:	2d00      	cmp	r5, #0
   3a726:	da07      	bge.n	3a738 <_strtoul_l.isra.0+0xc8>
   3a728:	2322      	movs	r3, #34	; 0x22
   3a72a:	f04f 30ff 	mov.w	r0, #4294967295
   3a72e:	f8ce 3000 	str.w	r3, [lr]
   3a732:	b942      	cbnz	r2, 3a746 <_strtoul_l.isra.0+0xd6>
   3a734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a738:	f1b8 0f00 	cmp.w	r8, #0
   3a73c:	d000      	beq.n	3a740 <_strtoul_l.isra.0+0xd0>
   3a73e:	4240      	negs	r0, r0
   3a740:	2a00      	cmp	r2, #0
   3a742:	d0f7      	beq.n	3a734 <_strtoul_l.isra.0+0xc4>
   3a744:	b10d      	cbz	r5, 3a74a <_strtoul_l.isra.0+0xda>
   3a746:	f10c 31ff 	add.w	r1, ip, #4294967295
   3a74a:	6011      	str	r1, [r2, #0]
   3a74c:	e7f2      	b.n	3a734 <_strtoul_l.isra.0+0xc4>
   3a74e:	2430      	movs	r4, #48	; 0x30
   3a750:	2b00      	cmp	r3, #0
   3a752:	d1b2      	bne.n	3a6ba <_strtoul_l.isra.0+0x4a>
   3a754:	2308      	movs	r3, #8
   3a756:	e7b0      	b.n	3a6ba <_strtoul_l.isra.0+0x4a>
   3a758:	2c30      	cmp	r4, #48	; 0x30
   3a75a:	d0a3      	beq.n	3a6a4 <_strtoul_l.isra.0+0x34>
   3a75c:	230a      	movs	r3, #10
   3a75e:	e7ac      	b.n	3a6ba <_strtoul_l.isra.0+0x4a>
   3a760:	00045e47 	.word	0x00045e47

0003a764 <strtoul>:
   3a764:	4613      	mov	r3, r2
   3a766:	460a      	mov	r2, r1
   3a768:	4601      	mov	r1, r0
   3a76a:	4802      	ldr	r0, [pc, #8]	; (3a774 <strtoul+0x10>)
   3a76c:	6800      	ldr	r0, [r0, #0]
   3a76e:	f7ff bf7f 	b.w	3a670 <_strtoul_l.isra.0>
   3a772:	bf00      	nop
   3a774:	2000c6f4 	.word	0x2000c6f4

0003a778 <vsniprintf>:
   3a778:	b507      	push	{r0, r1, r2, lr}
   3a77a:	9300      	str	r3, [sp, #0]
   3a77c:	4613      	mov	r3, r2
   3a77e:	460a      	mov	r2, r1
   3a780:	4601      	mov	r1, r0
   3a782:	4803      	ldr	r0, [pc, #12]	; (3a790 <vsniprintf+0x18>)
   3a784:	6800      	ldr	r0, [r0, #0]
   3a786:	f005 fdd3 	bl	40330 <_vsniprintf_r>
   3a78a:	b003      	add	sp, #12
   3a78c:	f85d fb04 	ldr.w	pc, [sp], #4
   3a790:	2000c6f4 	.word	0x2000c6f4

0003a794 <_vsiscanf_r>:
   3a794:	b570      	push	{r4, r5, r6, lr}
   3a796:	461e      	mov	r6, r3
   3a798:	b09a      	sub	sp, #104	; 0x68
   3a79a:	f44f 7301 	mov.w	r3, #516	; 0x204
   3a79e:	4604      	mov	r4, r0
   3a7a0:	4608      	mov	r0, r1
   3a7a2:	4615      	mov	r5, r2
   3a7a4:	f8ad 300c 	strh.w	r3, [sp, #12]
   3a7a8:	9100      	str	r1, [sp, #0]
   3a7aa:	9104      	str	r1, [sp, #16]
   3a7ac:	f7e6 fec6 	bl	2153c <strlen>
   3a7b0:	4b09      	ldr	r3, [pc, #36]	; (3a7d8 <_vsiscanf_r+0x44>)
   3a7b2:	462a      	mov	r2, r5
   3a7b4:	4669      	mov	r1, sp
   3a7b6:	9001      	str	r0, [sp, #4]
   3a7b8:	9309      	str	r3, [sp, #36]	; 0x24
   3a7ba:	2300      	movs	r3, #0
   3a7bc:	9005      	str	r0, [sp, #20]
   3a7be:	4620      	mov	r0, r4
   3a7c0:	930d      	str	r3, [sp, #52]	; 0x34
   3a7c2:	9312      	str	r3, [sp, #72]	; 0x48
   3a7c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3a7c8:	f8ad 300e 	strh.w	r3, [sp, #14]
   3a7cc:	4633      	mov	r3, r6
   3a7ce:	f000 fc21 	bl	3b014 <__ssvfiscanf_r>
   3a7d2:	b01a      	add	sp, #104	; 0x68
   3a7d4:	bd70      	pop	{r4, r5, r6, pc}
   3a7d6:	bf00      	nop
   3a7d8:	000401dd 	.word	0x000401dd

0003a7dc <vsiscanf>:
   3a7dc:	4613      	mov	r3, r2
   3a7de:	460a      	mov	r2, r1
   3a7e0:	4601      	mov	r1, r0
   3a7e2:	4802      	ldr	r0, [pc, #8]	; (3a7ec <vsiscanf+0x10>)
   3a7e4:	6800      	ldr	r0, [r0, #0]
   3a7e6:	f7ff bfd5 	b.w	3a794 <_vsiscanf_r>
   3a7ea:	bf00      	nop
   3a7ec:	2000c6f4 	.word	0x2000c6f4

0003a7f0 <__swbuf_r>:
   3a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a7f2:	460e      	mov	r6, r1
   3a7f4:	4614      	mov	r4, r2
   3a7f6:	4605      	mov	r5, r0
   3a7f8:	b118      	cbz	r0, 3a802 <__swbuf_r+0x12>
   3a7fa:	6983      	ldr	r3, [r0, #24]
   3a7fc:	b90b      	cbnz	r3, 3a802 <__swbuf_r+0x12>
   3a7fe:	f000 f9db 	bl	3abb8 <__sinit>
   3a802:	4b21      	ldr	r3, [pc, #132]	; (3a888 <__swbuf_r+0x98>)
   3a804:	429c      	cmp	r4, r3
   3a806:	d12b      	bne.n	3a860 <__swbuf_r+0x70>
   3a808:	686c      	ldr	r4, [r5, #4]
   3a80a:	69a3      	ldr	r3, [r4, #24]
   3a80c:	60a3      	str	r3, [r4, #8]
   3a80e:	89a3      	ldrh	r3, [r4, #12]
   3a810:	071a      	lsls	r2, r3, #28
   3a812:	d52f      	bpl.n	3a874 <__swbuf_r+0x84>
   3a814:	6923      	ldr	r3, [r4, #16]
   3a816:	b36b      	cbz	r3, 3a874 <__swbuf_r+0x84>
   3a818:	6923      	ldr	r3, [r4, #16]
   3a81a:	b2f6      	uxtb	r6, r6
   3a81c:	6820      	ldr	r0, [r4, #0]
   3a81e:	4637      	mov	r7, r6
   3a820:	1ac0      	subs	r0, r0, r3
   3a822:	6963      	ldr	r3, [r4, #20]
   3a824:	4283      	cmp	r3, r0
   3a826:	dc04      	bgt.n	3a832 <__swbuf_r+0x42>
   3a828:	4621      	mov	r1, r4
   3a82a:	4628      	mov	r0, r5
   3a82c:	f000 f946 	bl	3aabc <_fflush_r>
   3a830:	bb30      	cbnz	r0, 3a880 <__swbuf_r+0x90>
   3a832:	68a3      	ldr	r3, [r4, #8]
   3a834:	3001      	adds	r0, #1
   3a836:	3b01      	subs	r3, #1
   3a838:	60a3      	str	r3, [r4, #8]
   3a83a:	6823      	ldr	r3, [r4, #0]
   3a83c:	1c5a      	adds	r2, r3, #1
   3a83e:	6022      	str	r2, [r4, #0]
   3a840:	701e      	strb	r6, [r3, #0]
   3a842:	6963      	ldr	r3, [r4, #20]
   3a844:	4283      	cmp	r3, r0
   3a846:	d004      	beq.n	3a852 <__swbuf_r+0x62>
   3a848:	89a3      	ldrh	r3, [r4, #12]
   3a84a:	07db      	lsls	r3, r3, #31
   3a84c:	d506      	bpl.n	3a85c <__swbuf_r+0x6c>
   3a84e:	2e0a      	cmp	r6, #10
   3a850:	d104      	bne.n	3a85c <__swbuf_r+0x6c>
   3a852:	4621      	mov	r1, r4
   3a854:	4628      	mov	r0, r5
   3a856:	f000 f931 	bl	3aabc <_fflush_r>
   3a85a:	b988      	cbnz	r0, 3a880 <__swbuf_r+0x90>
   3a85c:	4638      	mov	r0, r7
   3a85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3a860:	4b0a      	ldr	r3, [pc, #40]	; (3a88c <__swbuf_r+0x9c>)
   3a862:	429c      	cmp	r4, r3
   3a864:	d101      	bne.n	3a86a <__swbuf_r+0x7a>
   3a866:	68ac      	ldr	r4, [r5, #8]
   3a868:	e7cf      	b.n	3a80a <__swbuf_r+0x1a>
   3a86a:	4b09      	ldr	r3, [pc, #36]	; (3a890 <__swbuf_r+0xa0>)
   3a86c:	429c      	cmp	r4, r3
   3a86e:	bf08      	it	eq
   3a870:	68ec      	ldreq	r4, [r5, #12]
   3a872:	e7ca      	b.n	3a80a <__swbuf_r+0x1a>
   3a874:	4621      	mov	r1, r4
   3a876:	4628      	mov	r0, r5
   3a878:	f000 f81e 	bl	3a8b8 <__swsetup_r>
   3a87c:	2800      	cmp	r0, #0
   3a87e:	d0cb      	beq.n	3a818 <__swbuf_r+0x28>
   3a880:	f04f 37ff 	mov.w	r7, #4294967295
   3a884:	e7ea      	b.n	3a85c <__swbuf_r+0x6c>
   3a886:	bf00      	nop
   3a888:	00045cf8 	.word	0x00045cf8
   3a88c:	00045d18 	.word	0x00045d18
   3a890:	00045cd8 	.word	0x00045cd8

0003a894 <_write_r>:
   3a894:	b538      	push	{r3, r4, r5, lr}
   3a896:	4604      	mov	r4, r0
   3a898:	4d06      	ldr	r5, [pc, #24]	; (3a8b4 <_write_r+0x20>)
   3a89a:	4608      	mov	r0, r1
   3a89c:	4611      	mov	r1, r2
   3a89e:	2200      	movs	r2, #0
   3a8a0:	602a      	str	r2, [r5, #0]
   3a8a2:	461a      	mov	r2, r3
   3a8a4:	f001 ffcf 	bl	3c846 <_write>
   3a8a8:	1c43      	adds	r3, r0, #1
   3a8aa:	d102      	bne.n	3a8b2 <_write_r+0x1e>
   3a8ac:	682b      	ldr	r3, [r5, #0]
   3a8ae:	b103      	cbz	r3, 3a8b2 <_write_r+0x1e>
   3a8b0:	6023      	str	r3, [r4, #0]
   3a8b2:	bd38      	pop	{r3, r4, r5, pc}
   3a8b4:	20010f40 	.word	0x20010f40

0003a8b8 <__swsetup_r>:
   3a8b8:	4b32      	ldr	r3, [pc, #200]	; (3a984 <__swsetup_r+0xcc>)
   3a8ba:	b570      	push	{r4, r5, r6, lr}
   3a8bc:	681d      	ldr	r5, [r3, #0]
   3a8be:	4606      	mov	r6, r0
   3a8c0:	460c      	mov	r4, r1
   3a8c2:	b125      	cbz	r5, 3a8ce <__swsetup_r+0x16>
   3a8c4:	69ab      	ldr	r3, [r5, #24]
   3a8c6:	b913      	cbnz	r3, 3a8ce <__swsetup_r+0x16>
   3a8c8:	4628      	mov	r0, r5
   3a8ca:	f000 f975 	bl	3abb8 <__sinit>
   3a8ce:	4b2e      	ldr	r3, [pc, #184]	; (3a988 <__swsetup_r+0xd0>)
   3a8d0:	429c      	cmp	r4, r3
   3a8d2:	d10f      	bne.n	3a8f4 <__swsetup_r+0x3c>
   3a8d4:	686c      	ldr	r4, [r5, #4]
   3a8d6:	89a3      	ldrh	r3, [r4, #12]
   3a8d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3a8dc:	0719      	lsls	r1, r3, #28
   3a8de:	d42c      	bmi.n	3a93a <__swsetup_r+0x82>
   3a8e0:	06dd      	lsls	r5, r3, #27
   3a8e2:	d411      	bmi.n	3a908 <__swsetup_r+0x50>
   3a8e4:	2309      	movs	r3, #9
   3a8e6:	6033      	str	r3, [r6, #0]
   3a8e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3a8ec:	f04f 30ff 	mov.w	r0, #4294967295
   3a8f0:	81a3      	strh	r3, [r4, #12]
   3a8f2:	e03e      	b.n	3a972 <__swsetup_r+0xba>
   3a8f4:	4b25      	ldr	r3, [pc, #148]	; (3a98c <__swsetup_r+0xd4>)
   3a8f6:	429c      	cmp	r4, r3
   3a8f8:	d101      	bne.n	3a8fe <__swsetup_r+0x46>
   3a8fa:	68ac      	ldr	r4, [r5, #8]
   3a8fc:	e7eb      	b.n	3a8d6 <__swsetup_r+0x1e>
   3a8fe:	4b24      	ldr	r3, [pc, #144]	; (3a990 <__swsetup_r+0xd8>)
   3a900:	429c      	cmp	r4, r3
   3a902:	bf08      	it	eq
   3a904:	68ec      	ldreq	r4, [r5, #12]
   3a906:	e7e6      	b.n	3a8d6 <__swsetup_r+0x1e>
   3a908:	0758      	lsls	r0, r3, #29
   3a90a:	d512      	bpl.n	3a932 <__swsetup_r+0x7a>
   3a90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3a90e:	b141      	cbz	r1, 3a922 <__swsetup_r+0x6a>
   3a910:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3a914:	4299      	cmp	r1, r3
   3a916:	d002      	beq.n	3a91e <__swsetup_r+0x66>
   3a918:	4630      	mov	r0, r6
   3a91a:	f7ff f81b 	bl	39954 <_free_r>
   3a91e:	2300      	movs	r3, #0
   3a920:	6363      	str	r3, [r4, #52]	; 0x34
   3a922:	89a3      	ldrh	r3, [r4, #12]
   3a924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3a928:	81a3      	strh	r3, [r4, #12]
   3a92a:	2300      	movs	r3, #0
   3a92c:	6063      	str	r3, [r4, #4]
   3a92e:	6923      	ldr	r3, [r4, #16]
   3a930:	6023      	str	r3, [r4, #0]
   3a932:	89a3      	ldrh	r3, [r4, #12]
   3a934:	f043 0308 	orr.w	r3, r3, #8
   3a938:	81a3      	strh	r3, [r4, #12]
   3a93a:	6923      	ldr	r3, [r4, #16]
   3a93c:	b94b      	cbnz	r3, 3a952 <__swsetup_r+0x9a>
   3a93e:	89a3      	ldrh	r3, [r4, #12]
   3a940:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3a944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3a948:	d003      	beq.n	3a952 <__swsetup_r+0x9a>
   3a94a:	4621      	mov	r1, r4
   3a94c:	4630      	mov	r0, r6
   3a94e:	f000 f9c7 	bl	3ace0 <__smakebuf_r>
   3a952:	89a0      	ldrh	r0, [r4, #12]
   3a954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3a958:	f010 0301 	ands.w	r3, r0, #1
   3a95c:	d00a      	beq.n	3a974 <__swsetup_r+0xbc>
   3a95e:	2300      	movs	r3, #0
   3a960:	60a3      	str	r3, [r4, #8]
   3a962:	6963      	ldr	r3, [r4, #20]
   3a964:	425b      	negs	r3, r3
   3a966:	61a3      	str	r3, [r4, #24]
   3a968:	6923      	ldr	r3, [r4, #16]
   3a96a:	b943      	cbnz	r3, 3a97e <__swsetup_r+0xc6>
   3a96c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   3a970:	d1ba      	bne.n	3a8e8 <__swsetup_r+0x30>
   3a972:	bd70      	pop	{r4, r5, r6, pc}
   3a974:	0781      	lsls	r1, r0, #30
   3a976:	bf58      	it	pl
   3a978:	6963      	ldrpl	r3, [r4, #20]
   3a97a:	60a3      	str	r3, [r4, #8]
   3a97c:	e7f4      	b.n	3a968 <__swsetup_r+0xb0>
   3a97e:	2000      	movs	r0, #0
   3a980:	e7f7      	b.n	3a972 <__swsetup_r+0xba>
   3a982:	bf00      	nop
   3a984:	2000c6f4 	.word	0x2000c6f4
   3a988:	00045cf8 	.word	0x00045cf8
   3a98c:	00045d18 	.word	0x00045d18
   3a990:	00045cd8 	.word	0x00045cd8

0003a994 <_close_r>:
   3a994:	b538      	push	{r3, r4, r5, lr}
   3a996:	2300      	movs	r3, #0
   3a998:	4d05      	ldr	r5, [pc, #20]	; (3a9b0 <_close_r+0x1c>)
   3a99a:	4604      	mov	r4, r0
   3a99c:	4608      	mov	r0, r1
   3a99e:	602b      	str	r3, [r5, #0]
   3a9a0:	f001 ff57 	bl	3c852 <_close>
   3a9a4:	1c43      	adds	r3, r0, #1
   3a9a6:	d102      	bne.n	3a9ae <_close_r+0x1a>
   3a9a8:	682b      	ldr	r3, [r5, #0]
   3a9aa:	b103      	cbz	r3, 3a9ae <_close_r+0x1a>
   3a9ac:	6023      	str	r3, [r4, #0]
   3a9ae:	bd38      	pop	{r3, r4, r5, pc}
   3a9b0:	20010f40 	.word	0x20010f40

0003a9b4 <__sflush_r>:
   3a9b4:	898a      	ldrh	r2, [r1, #12]
   3a9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a9ba:	4605      	mov	r5, r0
   3a9bc:	0710      	lsls	r0, r2, #28
   3a9be:	460c      	mov	r4, r1
   3a9c0:	d458      	bmi.n	3aa74 <__sflush_r+0xc0>
   3a9c2:	684b      	ldr	r3, [r1, #4]
   3a9c4:	2b00      	cmp	r3, #0
   3a9c6:	dc05      	bgt.n	3a9d4 <__sflush_r+0x20>
   3a9c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3a9ca:	2b00      	cmp	r3, #0
   3a9cc:	dc02      	bgt.n	3a9d4 <__sflush_r+0x20>
   3a9ce:	2000      	movs	r0, #0
   3a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a9d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3a9d6:	2e00      	cmp	r6, #0
   3a9d8:	d0f9      	beq.n	3a9ce <__sflush_r+0x1a>
   3a9da:	2300      	movs	r3, #0
   3a9dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3a9e0:	682f      	ldr	r7, [r5, #0]
   3a9e2:	602b      	str	r3, [r5, #0]
   3a9e4:	d032      	beq.n	3aa4c <__sflush_r+0x98>
   3a9e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3a9e8:	89a3      	ldrh	r3, [r4, #12]
   3a9ea:	075a      	lsls	r2, r3, #29
   3a9ec:	d505      	bpl.n	3a9fa <__sflush_r+0x46>
   3a9ee:	6863      	ldr	r3, [r4, #4]
   3a9f0:	1ac0      	subs	r0, r0, r3
   3a9f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3a9f4:	b10b      	cbz	r3, 3a9fa <__sflush_r+0x46>
   3a9f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3a9f8:	1ac0      	subs	r0, r0, r3
   3a9fa:	2300      	movs	r3, #0
   3a9fc:	4602      	mov	r2, r0
   3a9fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3aa00:	4628      	mov	r0, r5
   3aa02:	6a21      	ldr	r1, [r4, #32]
   3aa04:	47b0      	blx	r6
   3aa06:	1c43      	adds	r3, r0, #1
   3aa08:	89a3      	ldrh	r3, [r4, #12]
   3aa0a:	d106      	bne.n	3aa1a <__sflush_r+0x66>
   3aa0c:	6829      	ldr	r1, [r5, #0]
   3aa0e:	291d      	cmp	r1, #29
   3aa10:	d82c      	bhi.n	3aa6c <__sflush_r+0xb8>
   3aa12:	4a29      	ldr	r2, [pc, #164]	; (3aab8 <__sflush_r+0x104>)
   3aa14:	40ca      	lsrs	r2, r1
   3aa16:	07d6      	lsls	r6, r2, #31
   3aa18:	d528      	bpl.n	3aa6c <__sflush_r+0xb8>
   3aa1a:	2200      	movs	r2, #0
   3aa1c:	04d9      	lsls	r1, r3, #19
   3aa1e:	6062      	str	r2, [r4, #4]
   3aa20:	6922      	ldr	r2, [r4, #16]
   3aa22:	6022      	str	r2, [r4, #0]
   3aa24:	d504      	bpl.n	3aa30 <__sflush_r+0x7c>
   3aa26:	1c42      	adds	r2, r0, #1
   3aa28:	d101      	bne.n	3aa2e <__sflush_r+0x7a>
   3aa2a:	682b      	ldr	r3, [r5, #0]
   3aa2c:	b903      	cbnz	r3, 3aa30 <__sflush_r+0x7c>
   3aa2e:	6560      	str	r0, [r4, #84]	; 0x54
   3aa30:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3aa32:	602f      	str	r7, [r5, #0]
   3aa34:	2900      	cmp	r1, #0
   3aa36:	d0ca      	beq.n	3a9ce <__sflush_r+0x1a>
   3aa38:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3aa3c:	4299      	cmp	r1, r3
   3aa3e:	d002      	beq.n	3aa46 <__sflush_r+0x92>
   3aa40:	4628      	mov	r0, r5
   3aa42:	f7fe ff87 	bl	39954 <_free_r>
   3aa46:	2000      	movs	r0, #0
   3aa48:	6360      	str	r0, [r4, #52]	; 0x34
   3aa4a:	e7c1      	b.n	3a9d0 <__sflush_r+0x1c>
   3aa4c:	6a21      	ldr	r1, [r4, #32]
   3aa4e:	2301      	movs	r3, #1
   3aa50:	4628      	mov	r0, r5
   3aa52:	47b0      	blx	r6
   3aa54:	1c41      	adds	r1, r0, #1
   3aa56:	d1c7      	bne.n	3a9e8 <__sflush_r+0x34>
   3aa58:	682b      	ldr	r3, [r5, #0]
   3aa5a:	2b00      	cmp	r3, #0
   3aa5c:	d0c4      	beq.n	3a9e8 <__sflush_r+0x34>
   3aa5e:	2b1d      	cmp	r3, #29
   3aa60:	d001      	beq.n	3aa66 <__sflush_r+0xb2>
   3aa62:	2b16      	cmp	r3, #22
   3aa64:	d101      	bne.n	3aa6a <__sflush_r+0xb6>
   3aa66:	602f      	str	r7, [r5, #0]
   3aa68:	e7b1      	b.n	3a9ce <__sflush_r+0x1a>
   3aa6a:	89a3      	ldrh	r3, [r4, #12]
   3aa6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3aa70:	81a3      	strh	r3, [r4, #12]
   3aa72:	e7ad      	b.n	3a9d0 <__sflush_r+0x1c>
   3aa74:	690f      	ldr	r7, [r1, #16]
   3aa76:	2f00      	cmp	r7, #0
   3aa78:	d0a9      	beq.n	3a9ce <__sflush_r+0x1a>
   3aa7a:	0793      	lsls	r3, r2, #30
   3aa7c:	680e      	ldr	r6, [r1, #0]
   3aa7e:	600f      	str	r7, [r1, #0]
   3aa80:	bf0c      	ite	eq
   3aa82:	694b      	ldreq	r3, [r1, #20]
   3aa84:	2300      	movne	r3, #0
   3aa86:	eba6 0807 	sub.w	r8, r6, r7
   3aa8a:	608b      	str	r3, [r1, #8]
   3aa8c:	f1b8 0f00 	cmp.w	r8, #0
   3aa90:	dd9d      	ble.n	3a9ce <__sflush_r+0x1a>
   3aa92:	4643      	mov	r3, r8
   3aa94:	463a      	mov	r2, r7
   3aa96:	6a21      	ldr	r1, [r4, #32]
   3aa98:	4628      	mov	r0, r5
   3aa9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3aa9c:	47b0      	blx	r6
   3aa9e:	2800      	cmp	r0, #0
   3aaa0:	dc06      	bgt.n	3aab0 <__sflush_r+0xfc>
   3aaa2:	89a3      	ldrh	r3, [r4, #12]
   3aaa4:	f04f 30ff 	mov.w	r0, #4294967295
   3aaa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3aaac:	81a3      	strh	r3, [r4, #12]
   3aaae:	e78f      	b.n	3a9d0 <__sflush_r+0x1c>
   3aab0:	4407      	add	r7, r0
   3aab2:	eba8 0800 	sub.w	r8, r8, r0
   3aab6:	e7e9      	b.n	3aa8c <__sflush_r+0xd8>
   3aab8:	20400001 	.word	0x20400001

0003aabc <_fflush_r>:
   3aabc:	b538      	push	{r3, r4, r5, lr}
   3aabe:	690b      	ldr	r3, [r1, #16]
   3aac0:	4605      	mov	r5, r0
   3aac2:	460c      	mov	r4, r1
   3aac4:	b913      	cbnz	r3, 3aacc <_fflush_r+0x10>
   3aac6:	2500      	movs	r5, #0
   3aac8:	4628      	mov	r0, r5
   3aaca:	bd38      	pop	{r3, r4, r5, pc}
   3aacc:	b118      	cbz	r0, 3aad6 <_fflush_r+0x1a>
   3aace:	6983      	ldr	r3, [r0, #24]
   3aad0:	b90b      	cbnz	r3, 3aad6 <_fflush_r+0x1a>
   3aad2:	f000 f871 	bl	3abb8 <__sinit>
   3aad6:	4b14      	ldr	r3, [pc, #80]	; (3ab28 <_fflush_r+0x6c>)
   3aad8:	429c      	cmp	r4, r3
   3aada:	d11b      	bne.n	3ab14 <_fflush_r+0x58>
   3aadc:	686c      	ldr	r4, [r5, #4]
   3aade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3aae2:	2b00      	cmp	r3, #0
   3aae4:	d0ef      	beq.n	3aac6 <_fflush_r+0xa>
   3aae6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3aae8:	07d0      	lsls	r0, r2, #31
   3aaea:	d404      	bmi.n	3aaf6 <_fflush_r+0x3a>
   3aaec:	0599      	lsls	r1, r3, #22
   3aaee:	d402      	bmi.n	3aaf6 <_fflush_r+0x3a>
   3aaf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3aaf2:	f7ed ff6f 	bl	289d4 <__retarget_lock_acquire_recursive>
   3aaf6:	4628      	mov	r0, r5
   3aaf8:	4621      	mov	r1, r4
   3aafa:	f7ff ff5b 	bl	3a9b4 <__sflush_r>
   3aafe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3ab00:	4605      	mov	r5, r0
   3ab02:	07da      	lsls	r2, r3, #31
   3ab04:	d4e0      	bmi.n	3aac8 <_fflush_r+0xc>
   3ab06:	89a3      	ldrh	r3, [r4, #12]
   3ab08:	059b      	lsls	r3, r3, #22
   3ab0a:	d4dd      	bmi.n	3aac8 <_fflush_r+0xc>
   3ab0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3ab0e:	f7ed ff7d 	bl	28a0c <__retarget_lock_release_recursive>
   3ab12:	e7d9      	b.n	3aac8 <_fflush_r+0xc>
   3ab14:	4b05      	ldr	r3, [pc, #20]	; (3ab2c <_fflush_r+0x70>)
   3ab16:	429c      	cmp	r4, r3
   3ab18:	d101      	bne.n	3ab1e <_fflush_r+0x62>
   3ab1a:	68ac      	ldr	r4, [r5, #8]
   3ab1c:	e7df      	b.n	3aade <_fflush_r+0x22>
   3ab1e:	4b04      	ldr	r3, [pc, #16]	; (3ab30 <_fflush_r+0x74>)
   3ab20:	429c      	cmp	r4, r3
   3ab22:	bf08      	it	eq
   3ab24:	68ec      	ldreq	r4, [r5, #12]
   3ab26:	e7da      	b.n	3aade <_fflush_r+0x22>
   3ab28:	00045cf8 	.word	0x00045cf8
   3ab2c:	00045d18 	.word	0x00045d18
   3ab30:	00045cd8 	.word	0x00045cd8

0003ab34 <std>:
   3ab34:	2300      	movs	r3, #0
   3ab36:	b510      	push	{r4, lr}
   3ab38:	4604      	mov	r4, r0
   3ab3a:	6083      	str	r3, [r0, #8]
   3ab3c:	8181      	strh	r1, [r0, #12]
   3ab3e:	4619      	mov	r1, r3
   3ab40:	6643      	str	r3, [r0, #100]	; 0x64
   3ab42:	81c2      	strh	r2, [r0, #14]
   3ab44:	2208      	movs	r2, #8
   3ab46:	6183      	str	r3, [r0, #24]
   3ab48:	e9c0 3300 	strd	r3, r3, [r0]
   3ab4c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3ab50:	305c      	adds	r0, #92	; 0x5c
   3ab52:	f005 f9f5 	bl	3ff40 <memset>
   3ab56:	4b05      	ldr	r3, [pc, #20]	; (3ab6c <std+0x38>)
   3ab58:	6224      	str	r4, [r4, #32]
   3ab5a:	6263      	str	r3, [r4, #36]	; 0x24
   3ab5c:	4b04      	ldr	r3, [pc, #16]	; (3ab70 <std+0x3c>)
   3ab5e:	62a3      	str	r3, [r4, #40]	; 0x28
   3ab60:	4b04      	ldr	r3, [pc, #16]	; (3ab74 <std+0x40>)
   3ab62:	62e3      	str	r3, [r4, #44]	; 0x2c
   3ab64:	4b04      	ldr	r3, [pc, #16]	; (3ab78 <std+0x44>)
   3ab66:	6323      	str	r3, [r4, #48]	; 0x30
   3ab68:	bd10      	pop	{r4, pc}
   3ab6a:	bf00      	nop
   3ab6c:	000401bb 	.word	0x000401bb
   3ab70:	000401e1 	.word	0x000401e1
   3ab74:	00040219 	.word	0x00040219
   3ab78:	0004023d 	.word	0x0004023d

0003ab7c <_cleanup_r>:
   3ab7c:	4901      	ldr	r1, [pc, #4]	; (3ab84 <_cleanup_r+0x8>)
   3ab7e:	f005 bcaf 	b.w	404e0 <_fwalk_reent>
   3ab82:	bf00      	nop
   3ab84:	0003aabd 	.word	0x0003aabd

0003ab88 <__sfp_lock_acquire>:
   3ab88:	4801      	ldr	r0, [pc, #4]	; (3ab90 <__sfp_lock_acquire+0x8>)
   3ab8a:	f7ed bf23 	b.w	289d4 <__retarget_lock_acquire_recursive>
   3ab8e:	bf00      	nop
   3ab90:	2000ca1c 	.word	0x2000ca1c

0003ab94 <__sfp_lock_release>:
   3ab94:	4801      	ldr	r0, [pc, #4]	; (3ab9c <__sfp_lock_release+0x8>)
   3ab96:	f7ed bf39 	b.w	28a0c <__retarget_lock_release_recursive>
   3ab9a:	bf00      	nop
   3ab9c:	2000ca1c 	.word	0x2000ca1c

0003aba0 <__sinit_lock_acquire>:
   3aba0:	4801      	ldr	r0, [pc, #4]	; (3aba8 <__sinit_lock_acquire+0x8>)
   3aba2:	f7ed bf17 	b.w	289d4 <__retarget_lock_acquire_recursive>
   3aba6:	bf00      	nop
   3aba8:	2000ca30 	.word	0x2000ca30

0003abac <__sinit_lock_release>:
   3abac:	4801      	ldr	r0, [pc, #4]	; (3abb4 <__sinit_lock_release+0x8>)
   3abae:	f7ed bf2d 	b.w	28a0c <__retarget_lock_release_recursive>
   3abb2:	bf00      	nop
   3abb4:	2000ca30 	.word	0x2000ca30

0003abb8 <__sinit>:
   3abb8:	b510      	push	{r4, lr}
   3abba:	4604      	mov	r4, r0
   3abbc:	f7ff fff0 	bl	3aba0 <__sinit_lock_acquire>
   3abc0:	69a3      	ldr	r3, [r4, #24]
   3abc2:	b11b      	cbz	r3, 3abcc <__sinit+0x14>
   3abc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3abc8:	f7ff bff0 	b.w	3abac <__sinit_lock_release>
   3abcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3abd0:	6523      	str	r3, [r4, #80]	; 0x50
   3abd2:	4620      	mov	r0, r4
   3abd4:	4b12      	ldr	r3, [pc, #72]	; (3ac20 <__sinit+0x68>)
   3abd6:	4a13      	ldr	r2, [pc, #76]	; (3ac24 <__sinit+0x6c>)
   3abd8:	681b      	ldr	r3, [r3, #0]
   3abda:	62a2      	str	r2, [r4, #40]	; 0x28
   3abdc:	42a3      	cmp	r3, r4
   3abde:	bf04      	itt	eq
   3abe0:	2301      	moveq	r3, #1
   3abe2:	61a3      	streq	r3, [r4, #24]
   3abe4:	f000 f820 	bl	3ac28 <__sfp>
   3abe8:	6060      	str	r0, [r4, #4]
   3abea:	4620      	mov	r0, r4
   3abec:	f000 f81c 	bl	3ac28 <__sfp>
   3abf0:	60a0      	str	r0, [r4, #8]
   3abf2:	4620      	mov	r0, r4
   3abf4:	f000 f818 	bl	3ac28 <__sfp>
   3abf8:	2200      	movs	r2, #0
   3abfa:	2104      	movs	r1, #4
   3abfc:	60e0      	str	r0, [r4, #12]
   3abfe:	6860      	ldr	r0, [r4, #4]
   3ac00:	f7ff ff98 	bl	3ab34 <std>
   3ac04:	2201      	movs	r2, #1
   3ac06:	2109      	movs	r1, #9
   3ac08:	68a0      	ldr	r0, [r4, #8]
   3ac0a:	f7ff ff93 	bl	3ab34 <std>
   3ac0e:	2202      	movs	r2, #2
   3ac10:	2112      	movs	r1, #18
   3ac12:	68e0      	ldr	r0, [r4, #12]
   3ac14:	f7ff ff8e 	bl	3ab34 <std>
   3ac18:	2301      	movs	r3, #1
   3ac1a:	61a3      	str	r3, [r4, #24]
   3ac1c:	e7d2      	b.n	3abc4 <__sinit+0xc>
   3ac1e:	bf00      	nop
   3ac20:	00045cd4 	.word	0x00045cd4
   3ac24:	0003ab7d 	.word	0x0003ab7d

0003ac28 <__sfp>:
   3ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ac2a:	4607      	mov	r7, r0
   3ac2c:	f7ff ffac 	bl	3ab88 <__sfp_lock_acquire>
   3ac30:	4b1e      	ldr	r3, [pc, #120]	; (3acac <__sfp+0x84>)
   3ac32:	681e      	ldr	r6, [r3, #0]
   3ac34:	69b3      	ldr	r3, [r6, #24]
   3ac36:	b913      	cbnz	r3, 3ac3e <__sfp+0x16>
   3ac38:	4630      	mov	r0, r6
   3ac3a:	f7ff ffbd 	bl	3abb8 <__sinit>
   3ac3e:	3648      	adds	r6, #72	; 0x48
   3ac40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3ac44:	3b01      	subs	r3, #1
   3ac46:	d503      	bpl.n	3ac50 <__sfp+0x28>
   3ac48:	6833      	ldr	r3, [r6, #0]
   3ac4a:	b30b      	cbz	r3, 3ac90 <__sfp+0x68>
   3ac4c:	6836      	ldr	r6, [r6, #0]
   3ac4e:	e7f7      	b.n	3ac40 <__sfp+0x18>
   3ac50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3ac54:	b9d5      	cbnz	r5, 3ac8c <__sfp+0x64>
   3ac56:	4b16      	ldr	r3, [pc, #88]	; (3acb0 <__sfp+0x88>)
   3ac58:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3ac5c:	6665      	str	r5, [r4, #100]	; 0x64
   3ac5e:	60e3      	str	r3, [r4, #12]
   3ac60:	f7ed fe8e 	bl	28980 <__retarget_lock_init_recursive>
   3ac64:	f7ff ff96 	bl	3ab94 <__sfp_lock_release>
   3ac68:	2208      	movs	r2, #8
   3ac6a:	4629      	mov	r1, r5
   3ac6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3ac70:	6025      	str	r5, [r4, #0]
   3ac72:	61a5      	str	r5, [r4, #24]
   3ac74:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3ac78:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3ac7c:	f005 f960 	bl	3ff40 <memset>
   3ac80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3ac84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3ac88:	4620      	mov	r0, r4
   3ac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ac8c:	3468      	adds	r4, #104	; 0x68
   3ac8e:	e7d9      	b.n	3ac44 <__sfp+0x1c>
   3ac90:	2104      	movs	r1, #4
   3ac92:	4638      	mov	r0, r7
   3ac94:	f005 fc0e 	bl	404b4 <__sfmoreglue>
   3ac98:	4604      	mov	r4, r0
   3ac9a:	6030      	str	r0, [r6, #0]
   3ac9c:	2800      	cmp	r0, #0
   3ac9e:	d1d5      	bne.n	3ac4c <__sfp+0x24>
   3aca0:	f7ff ff78 	bl	3ab94 <__sfp_lock_release>
   3aca4:	230c      	movs	r3, #12
   3aca6:	603b      	str	r3, [r7, #0]
   3aca8:	e7ee      	b.n	3ac88 <__sfp+0x60>
   3acaa:	bf00      	nop
   3acac:	00045cd4 	.word	0x00045cd4
   3acb0:	ffff0001 	.word	0xffff0001

0003acb4 <_localeconv_r>:
   3acb4:	4800      	ldr	r0, [pc, #0]	; (3acb8 <_localeconv_r+0x4>)
   3acb6:	4770      	bx	lr
   3acb8:	2000c848 	.word	0x2000c848

0003acbc <_lseek_r>:
   3acbc:	b538      	push	{r3, r4, r5, lr}
   3acbe:	4604      	mov	r4, r0
   3acc0:	4d06      	ldr	r5, [pc, #24]	; (3acdc <_lseek_r+0x20>)
   3acc2:	4608      	mov	r0, r1
   3acc4:	4611      	mov	r1, r2
   3acc6:	2200      	movs	r2, #0
   3acc8:	602a      	str	r2, [r5, #0]
   3acca:	461a      	mov	r2, r3
   3accc:	f001 fdc4 	bl	3c858 <_lseek>
   3acd0:	1c43      	adds	r3, r0, #1
   3acd2:	d102      	bne.n	3acda <_lseek_r+0x1e>
   3acd4:	682b      	ldr	r3, [r5, #0]
   3acd6:	b103      	cbz	r3, 3acda <_lseek_r+0x1e>
   3acd8:	6023      	str	r3, [r4, #0]
   3acda:	bd38      	pop	{r3, r4, r5, pc}
   3acdc:	20010f40 	.word	0x20010f40

0003ace0 <__smakebuf_r>:
   3ace0:	898b      	ldrh	r3, [r1, #12]
   3ace2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3ace4:	079d      	lsls	r5, r3, #30
   3ace6:	4606      	mov	r6, r0
   3ace8:	460c      	mov	r4, r1
   3acea:	d507      	bpl.n	3acfc <__smakebuf_r+0x1c>
   3acec:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3acf0:	6023      	str	r3, [r4, #0]
   3acf2:	6123      	str	r3, [r4, #16]
   3acf4:	2301      	movs	r3, #1
   3acf6:	6163      	str	r3, [r4, #20]
   3acf8:	b002      	add	sp, #8
   3acfa:	bd70      	pop	{r4, r5, r6, pc}
   3acfc:	ab01      	add	r3, sp, #4
   3acfe:	466a      	mov	r2, sp
   3ad00:	f005 fc0d 	bl	4051e <__swhatbuf_r>
   3ad04:	9900      	ldr	r1, [sp, #0]
   3ad06:	4605      	mov	r5, r0
   3ad08:	4630      	mov	r0, r6
   3ad0a:	f7fe fe71 	bl	399f0 <_malloc_r>
   3ad0e:	b948      	cbnz	r0, 3ad24 <__smakebuf_r+0x44>
   3ad10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3ad14:	059a      	lsls	r2, r3, #22
   3ad16:	d4ef      	bmi.n	3acf8 <__smakebuf_r+0x18>
   3ad18:	f023 0303 	bic.w	r3, r3, #3
   3ad1c:	f043 0302 	orr.w	r3, r3, #2
   3ad20:	81a3      	strh	r3, [r4, #12]
   3ad22:	e7e3      	b.n	3acec <__smakebuf_r+0xc>
   3ad24:	4b0d      	ldr	r3, [pc, #52]	; (3ad5c <__smakebuf_r+0x7c>)
   3ad26:	62b3      	str	r3, [r6, #40]	; 0x28
   3ad28:	89a3      	ldrh	r3, [r4, #12]
   3ad2a:	6020      	str	r0, [r4, #0]
   3ad2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3ad30:	6120      	str	r0, [r4, #16]
   3ad32:	81a3      	strh	r3, [r4, #12]
   3ad34:	9b00      	ldr	r3, [sp, #0]
   3ad36:	6163      	str	r3, [r4, #20]
   3ad38:	9b01      	ldr	r3, [sp, #4]
   3ad3a:	b15b      	cbz	r3, 3ad54 <__smakebuf_r+0x74>
   3ad3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3ad40:	4630      	mov	r0, r6
   3ad42:	f000 fc6b 	bl	3b61c <_isatty_r>
   3ad46:	b128      	cbz	r0, 3ad54 <__smakebuf_r+0x74>
   3ad48:	89a3      	ldrh	r3, [r4, #12]
   3ad4a:	f023 0303 	bic.w	r3, r3, #3
   3ad4e:	f043 0301 	orr.w	r3, r3, #1
   3ad52:	81a3      	strh	r3, [r4, #12]
   3ad54:	89a0      	ldrh	r0, [r4, #12]
   3ad56:	4305      	orrs	r5, r0
   3ad58:	81a5      	strh	r5, [r4, #12]
   3ad5a:	e7cd      	b.n	3acf8 <__smakebuf_r+0x18>
   3ad5c:	0003ab7d 	.word	0x0003ab7d

0003ad60 <__malloc_lock>:
   3ad60:	4801      	ldr	r0, [pc, #4]	; (3ad68 <__malloc_lock+0x8>)
   3ad62:	f7ed be37 	b.w	289d4 <__retarget_lock_acquire_recursive>
   3ad66:	bf00      	nop
   3ad68:	2000ca08 	.word	0x2000ca08

0003ad6c <__malloc_unlock>:
   3ad6c:	4801      	ldr	r0, [pc, #4]	; (3ad74 <__malloc_unlock+0x8>)
   3ad6e:	f7ed be4d 	b.w	28a0c <__retarget_lock_release_recursive>
   3ad72:	bf00      	nop
   3ad74:	2000ca08 	.word	0x2000ca08

0003ad78 <__pow5mult>:
   3ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ad7c:	4615      	mov	r5, r2
   3ad7e:	f012 0203 	ands.w	r2, r2, #3
   3ad82:	4606      	mov	r6, r0
   3ad84:	460f      	mov	r7, r1
   3ad86:	d007      	beq.n	3ad98 <__pow5mult+0x20>
   3ad88:	3a01      	subs	r2, #1
   3ad8a:	4c21      	ldr	r4, [pc, #132]	; (3ae10 <__pow5mult+0x98>)
   3ad8c:	2300      	movs	r3, #0
   3ad8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3ad92:	f005 fc4d 	bl	40630 <__multadd>
   3ad96:	4607      	mov	r7, r0
   3ad98:	10ad      	asrs	r5, r5, #2
   3ad9a:	d035      	beq.n	3ae08 <__pow5mult+0x90>
   3ad9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3ad9e:	b93c      	cbnz	r4, 3adb0 <__pow5mult+0x38>
   3ada0:	2010      	movs	r0, #16
   3ada2:	f7fe fdcf 	bl	39944 <malloc>
   3ada6:	6270      	str	r0, [r6, #36]	; 0x24
   3ada8:	6004      	str	r4, [r0, #0]
   3adaa:	60c4      	str	r4, [r0, #12]
   3adac:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3adb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3adb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3adb8:	b94c      	cbnz	r4, 3adce <__pow5mult+0x56>
   3adba:	f240 2171 	movw	r1, #625	; 0x271
   3adbe:	4630      	mov	r0, r6
   3adc0:	f005 fcc3 	bl	4074a <__i2b>
   3adc4:	2300      	movs	r3, #0
   3adc6:	4604      	mov	r4, r0
   3adc8:	f8c8 0008 	str.w	r0, [r8, #8]
   3adcc:	6003      	str	r3, [r0, #0]
   3adce:	f04f 0900 	mov.w	r9, #0
   3add2:	07eb      	lsls	r3, r5, #31
   3add4:	d50a      	bpl.n	3adec <__pow5mult+0x74>
   3add6:	4639      	mov	r1, r7
   3add8:	4622      	mov	r2, r4
   3adda:	4630      	mov	r0, r6
   3addc:	f005 fcbe 	bl	4075c <__multiply>
   3ade0:	4680      	mov	r8, r0
   3ade2:	4639      	mov	r1, r7
   3ade4:	4630      	mov	r0, r6
   3ade6:	4647      	mov	r7, r8
   3ade8:	f005 fc0b 	bl	40602 <_Bfree>
   3adec:	106d      	asrs	r5, r5, #1
   3adee:	d00b      	beq.n	3ae08 <__pow5mult+0x90>
   3adf0:	6820      	ldr	r0, [r4, #0]
   3adf2:	b938      	cbnz	r0, 3ae04 <__pow5mult+0x8c>
   3adf4:	4622      	mov	r2, r4
   3adf6:	4621      	mov	r1, r4
   3adf8:	4630      	mov	r0, r6
   3adfa:	f005 fcaf 	bl	4075c <__multiply>
   3adfe:	6020      	str	r0, [r4, #0]
   3ae00:	f8c0 9000 	str.w	r9, [r0]
   3ae04:	4604      	mov	r4, r0
   3ae06:	e7e4      	b.n	3add2 <__pow5mult+0x5a>
   3ae08:	4638      	mov	r0, r7
   3ae0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3ae0e:	bf00      	nop
   3ae10:	00045d38 	.word	0x00045d38

0003ae14 <_svfiprintf_r>:
   3ae14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ae18:	4698      	mov	r8, r3
   3ae1a:	898b      	ldrh	r3, [r1, #12]
   3ae1c:	b09d      	sub	sp, #116	; 0x74
   3ae1e:	4607      	mov	r7, r0
   3ae20:	061b      	lsls	r3, r3, #24
   3ae22:	460d      	mov	r5, r1
   3ae24:	4614      	mov	r4, r2
   3ae26:	d50e      	bpl.n	3ae46 <_svfiprintf_r+0x32>
   3ae28:	690b      	ldr	r3, [r1, #16]
   3ae2a:	b963      	cbnz	r3, 3ae46 <_svfiprintf_r+0x32>
   3ae2c:	2140      	movs	r1, #64	; 0x40
   3ae2e:	f7fe fddf 	bl	399f0 <_malloc_r>
   3ae32:	6028      	str	r0, [r5, #0]
   3ae34:	6128      	str	r0, [r5, #16]
   3ae36:	b920      	cbnz	r0, 3ae42 <_svfiprintf_r+0x2e>
   3ae38:	230c      	movs	r3, #12
   3ae3a:	603b      	str	r3, [r7, #0]
   3ae3c:	f04f 30ff 	mov.w	r0, #4294967295
   3ae40:	e0d1      	b.n	3afe6 <_svfiprintf_r+0x1d2>
   3ae42:	2340      	movs	r3, #64	; 0x40
   3ae44:	616b      	str	r3, [r5, #20]
   3ae46:	2300      	movs	r3, #0
   3ae48:	f8cd 800c 	str.w	r8, [sp, #12]
   3ae4c:	f04f 0901 	mov.w	r9, #1
   3ae50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3b000 <_svfiprintf_r+0x1ec>
   3ae54:	9309      	str	r3, [sp, #36]	; 0x24
   3ae56:	2320      	movs	r3, #32
   3ae58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3ae5c:	2330      	movs	r3, #48	; 0x30
   3ae5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3ae62:	4623      	mov	r3, r4
   3ae64:	469a      	mov	sl, r3
   3ae66:	f813 2b01 	ldrb.w	r2, [r3], #1
   3ae6a:	b10a      	cbz	r2, 3ae70 <_svfiprintf_r+0x5c>
   3ae6c:	2a25      	cmp	r2, #37	; 0x25
   3ae6e:	d1f9      	bne.n	3ae64 <_svfiprintf_r+0x50>
   3ae70:	ebba 0b04 	subs.w	fp, sl, r4
   3ae74:	d00b      	beq.n	3ae8e <_svfiprintf_r+0x7a>
   3ae76:	465b      	mov	r3, fp
   3ae78:	4622      	mov	r2, r4
   3ae7a:	4629      	mov	r1, r5
   3ae7c:	4638      	mov	r0, r7
   3ae7e:	f005 fe82 	bl	40b86 <__ssputs_r>
   3ae82:	3001      	adds	r0, #1
   3ae84:	f000 80aa 	beq.w	3afdc <_svfiprintf_r+0x1c8>
   3ae88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3ae8a:	445a      	add	r2, fp
   3ae8c:	9209      	str	r2, [sp, #36]	; 0x24
   3ae8e:	f89a 3000 	ldrb.w	r3, [sl]
   3ae92:	2b00      	cmp	r3, #0
   3ae94:	f000 80a2 	beq.w	3afdc <_svfiprintf_r+0x1c8>
   3ae98:	2300      	movs	r3, #0
   3ae9a:	f04f 32ff 	mov.w	r2, #4294967295
   3ae9e:	f10a 0a01 	add.w	sl, sl, #1
   3aea2:	9304      	str	r3, [sp, #16]
   3aea4:	9307      	str	r3, [sp, #28]
   3aea6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3aeaa:	931a      	str	r3, [sp, #104]	; 0x68
   3aeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3aeb0:	4654      	mov	r4, sl
   3aeb2:	2205      	movs	r2, #5
   3aeb4:	4852      	ldr	r0, [pc, #328]	; (3b000 <_svfiprintf_r+0x1ec>)
   3aeb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   3aeba:	f005 f805 	bl	3fec8 <memchr>
   3aebe:	9a04      	ldr	r2, [sp, #16]
   3aec0:	b9d8      	cbnz	r0, 3aefa <_svfiprintf_r+0xe6>
   3aec2:	06d0      	lsls	r0, r2, #27
   3aec4:	bf44      	itt	mi
   3aec6:	2320      	movmi	r3, #32
   3aec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3aecc:	0711      	lsls	r1, r2, #28
   3aece:	bf44      	itt	mi
   3aed0:	232b      	movmi	r3, #43	; 0x2b
   3aed2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3aed6:	f89a 3000 	ldrb.w	r3, [sl]
   3aeda:	2b2a      	cmp	r3, #42	; 0x2a
   3aedc:	d015      	beq.n	3af0a <_svfiprintf_r+0xf6>
   3aede:	9a07      	ldr	r2, [sp, #28]
   3aee0:	4654      	mov	r4, sl
   3aee2:	2000      	movs	r0, #0
   3aee4:	f04f 0c0a 	mov.w	ip, #10
   3aee8:	4621      	mov	r1, r4
   3aeea:	f811 3b01 	ldrb.w	r3, [r1], #1
   3aeee:	3b30      	subs	r3, #48	; 0x30
   3aef0:	2b09      	cmp	r3, #9
   3aef2:	d94e      	bls.n	3af92 <_svfiprintf_r+0x17e>
   3aef4:	b1b0      	cbz	r0, 3af24 <_svfiprintf_r+0x110>
   3aef6:	9207      	str	r2, [sp, #28]
   3aef8:	e014      	b.n	3af24 <_svfiprintf_r+0x110>
   3aefa:	eba0 0308 	sub.w	r3, r0, r8
   3aefe:	46a2      	mov	sl, r4
   3af00:	fa09 f303 	lsl.w	r3, r9, r3
   3af04:	4313      	orrs	r3, r2
   3af06:	9304      	str	r3, [sp, #16]
   3af08:	e7d2      	b.n	3aeb0 <_svfiprintf_r+0x9c>
   3af0a:	9b03      	ldr	r3, [sp, #12]
   3af0c:	1d19      	adds	r1, r3, #4
   3af0e:	681b      	ldr	r3, [r3, #0]
   3af10:	2b00      	cmp	r3, #0
   3af12:	9103      	str	r1, [sp, #12]
   3af14:	bfbb      	ittet	lt
   3af16:	425b      	neglt	r3, r3
   3af18:	f042 0202 	orrlt.w	r2, r2, #2
   3af1c:	9307      	strge	r3, [sp, #28]
   3af1e:	9307      	strlt	r3, [sp, #28]
   3af20:	bfb8      	it	lt
   3af22:	9204      	strlt	r2, [sp, #16]
   3af24:	7823      	ldrb	r3, [r4, #0]
   3af26:	2b2e      	cmp	r3, #46	; 0x2e
   3af28:	d10c      	bne.n	3af44 <_svfiprintf_r+0x130>
   3af2a:	7863      	ldrb	r3, [r4, #1]
   3af2c:	2b2a      	cmp	r3, #42	; 0x2a
   3af2e:	d135      	bne.n	3af9c <_svfiprintf_r+0x188>
   3af30:	9b03      	ldr	r3, [sp, #12]
   3af32:	3402      	adds	r4, #2
   3af34:	1d1a      	adds	r2, r3, #4
   3af36:	681b      	ldr	r3, [r3, #0]
   3af38:	2b00      	cmp	r3, #0
   3af3a:	9203      	str	r2, [sp, #12]
   3af3c:	bfb8      	it	lt
   3af3e:	f04f 33ff 	movlt.w	r3, #4294967295
   3af42:	9305      	str	r3, [sp, #20]
   3af44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3b010 <_svfiprintf_r+0x1fc>
   3af48:	2203      	movs	r2, #3
   3af4a:	7821      	ldrb	r1, [r4, #0]
   3af4c:	4650      	mov	r0, sl
   3af4e:	f004 ffbb 	bl	3fec8 <memchr>
   3af52:	b140      	cbz	r0, 3af66 <_svfiprintf_r+0x152>
   3af54:	2340      	movs	r3, #64	; 0x40
   3af56:	eba0 000a 	sub.w	r0, r0, sl
   3af5a:	3401      	adds	r4, #1
   3af5c:	fa03 f000 	lsl.w	r0, r3, r0
   3af60:	9b04      	ldr	r3, [sp, #16]
   3af62:	4303      	orrs	r3, r0
   3af64:	9304      	str	r3, [sp, #16]
   3af66:	f814 1b01 	ldrb.w	r1, [r4], #1
   3af6a:	2206      	movs	r2, #6
   3af6c:	4825      	ldr	r0, [pc, #148]	; (3b004 <_svfiprintf_r+0x1f0>)
   3af6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3af72:	f004 ffa9 	bl	3fec8 <memchr>
   3af76:	2800      	cmp	r0, #0
   3af78:	d038      	beq.n	3afec <_svfiprintf_r+0x1d8>
   3af7a:	4b23      	ldr	r3, [pc, #140]	; (3b008 <_svfiprintf_r+0x1f4>)
   3af7c:	bb1b      	cbnz	r3, 3afc6 <_svfiprintf_r+0x1b2>
   3af7e:	9b03      	ldr	r3, [sp, #12]
   3af80:	3307      	adds	r3, #7
   3af82:	f023 0307 	bic.w	r3, r3, #7
   3af86:	3308      	adds	r3, #8
   3af88:	9303      	str	r3, [sp, #12]
   3af8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3af8c:	4433      	add	r3, r6
   3af8e:	9309      	str	r3, [sp, #36]	; 0x24
   3af90:	e767      	b.n	3ae62 <_svfiprintf_r+0x4e>
   3af92:	fb0c 3202 	mla	r2, ip, r2, r3
   3af96:	460c      	mov	r4, r1
   3af98:	2001      	movs	r0, #1
   3af9a:	e7a5      	b.n	3aee8 <_svfiprintf_r+0xd4>
   3af9c:	2300      	movs	r3, #0
   3af9e:	3401      	adds	r4, #1
   3afa0:	f04f 0c0a 	mov.w	ip, #10
   3afa4:	4619      	mov	r1, r3
   3afa6:	9305      	str	r3, [sp, #20]
   3afa8:	4620      	mov	r0, r4
   3afaa:	f810 2b01 	ldrb.w	r2, [r0], #1
   3afae:	3a30      	subs	r2, #48	; 0x30
   3afb0:	2a09      	cmp	r2, #9
   3afb2:	d903      	bls.n	3afbc <_svfiprintf_r+0x1a8>
   3afb4:	2b00      	cmp	r3, #0
   3afb6:	d0c5      	beq.n	3af44 <_svfiprintf_r+0x130>
   3afb8:	9105      	str	r1, [sp, #20]
   3afba:	e7c3      	b.n	3af44 <_svfiprintf_r+0x130>
   3afbc:	fb0c 2101 	mla	r1, ip, r1, r2
   3afc0:	4604      	mov	r4, r0
   3afc2:	2301      	movs	r3, #1
   3afc4:	e7f0      	b.n	3afa8 <_svfiprintf_r+0x194>
   3afc6:	ab03      	add	r3, sp, #12
   3afc8:	462a      	mov	r2, r5
   3afca:	a904      	add	r1, sp, #16
   3afcc:	4638      	mov	r0, r7
   3afce:	9300      	str	r3, [sp, #0]
   3afd0:	4b0e      	ldr	r3, [pc, #56]	; (3b00c <_svfiprintf_r+0x1f8>)
   3afd2:	f7fe fe97 	bl	39d04 <_printf_float>
   3afd6:	1c42      	adds	r2, r0, #1
   3afd8:	4606      	mov	r6, r0
   3afda:	d1d6      	bne.n	3af8a <_svfiprintf_r+0x176>
   3afdc:	89ab      	ldrh	r3, [r5, #12]
   3afde:	065b      	lsls	r3, r3, #25
   3afe0:	f53f af2c 	bmi.w	3ae3c <_svfiprintf_r+0x28>
   3afe4:	9809      	ldr	r0, [sp, #36]	; 0x24
   3afe6:	b01d      	add	sp, #116	; 0x74
   3afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afec:	ab03      	add	r3, sp, #12
   3afee:	462a      	mov	r2, r5
   3aff0:	a904      	add	r1, sp, #16
   3aff2:	4638      	mov	r0, r7
   3aff4:	9300      	str	r3, [sp, #0]
   3aff6:	4b05      	ldr	r3, [pc, #20]	; (3b00c <_svfiprintf_r+0x1f8>)
   3aff8:	f7ff f8ae 	bl	3a158 <_printf_i>
   3affc:	e7eb      	b.n	3afd6 <_svfiprintf_r+0x1c2>
   3affe:	bf00      	nop
   3b000:	00045f47 	.word	0x00045f47
   3b004:	00045f51 	.word	0x00045f51
   3b008:	00039d05 	.word	0x00039d05
   3b00c:	00040b87 	.word	0x00040b87
   3b010:	00045f4d 	.word	0x00045f4d

0003b014 <__ssvfiscanf_r>:
   3b014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b018:	460c      	mov	r4, r1
   3b01a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   3b01e:	2100      	movs	r1, #0
   3b020:	4606      	mov	r6, r0
   3b022:	f10d 0804 	add.w	r8, sp, #4
   3b026:	4fb4      	ldr	r7, [pc, #720]	; (3b2f8 <__ssvfiscanf_r+0x2e4>)
   3b028:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 3b304 <__ssvfiscanf_r+0x2f0>
   3b02c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3b030:	9300      	str	r3, [sp, #0]
   3b032:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3b036:	49b1      	ldr	r1, [pc, #708]	; (3b2fc <__ssvfiscanf_r+0x2e8>)
   3b038:	91a0      	str	r1, [sp, #640]	; 0x280
   3b03a:	49b1      	ldr	r1, [pc, #708]	; (3b300 <__ssvfiscanf_r+0x2ec>)
   3b03c:	91a1      	str	r1, [sp, #644]	; 0x284
   3b03e:	f892 a000 	ldrb.w	sl, [r2]
   3b042:	f1ba 0f00 	cmp.w	sl, #0
   3b046:	f000 8154 	beq.w	3b2f2 <__ssvfiscanf_r+0x2de>
   3b04a:	f81a 3007 	ldrb.w	r3, [sl, r7]
   3b04e:	1c55      	adds	r5, r2, #1
   3b050:	f013 0308 	ands.w	r3, r3, #8
   3b054:	d019      	beq.n	3b08a <__ssvfiscanf_r+0x76>
   3b056:	6863      	ldr	r3, [r4, #4]
   3b058:	2b00      	cmp	r3, #0
   3b05a:	dd0f      	ble.n	3b07c <__ssvfiscanf_r+0x68>
   3b05c:	6823      	ldr	r3, [r4, #0]
   3b05e:	781a      	ldrb	r2, [r3, #0]
   3b060:	5cba      	ldrb	r2, [r7, r2]
   3b062:	0712      	lsls	r2, r2, #28
   3b064:	d401      	bmi.n	3b06a <__ssvfiscanf_r+0x56>
   3b066:	462a      	mov	r2, r5
   3b068:	e7e9      	b.n	3b03e <__ssvfiscanf_r+0x2a>
   3b06a:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3b06c:	3301      	adds	r3, #1
   3b06e:	3201      	adds	r2, #1
   3b070:	6023      	str	r3, [r4, #0]
   3b072:	9245      	str	r2, [sp, #276]	; 0x114
   3b074:	6862      	ldr	r2, [r4, #4]
   3b076:	3a01      	subs	r2, #1
   3b078:	6062      	str	r2, [r4, #4]
   3b07a:	e7ec      	b.n	3b056 <__ssvfiscanf_r+0x42>
   3b07c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3b07e:	4621      	mov	r1, r4
   3b080:	4630      	mov	r0, r6
   3b082:	4798      	blx	r3
   3b084:	2800      	cmp	r0, #0
   3b086:	d0e9      	beq.n	3b05c <__ssvfiscanf_r+0x48>
   3b088:	e7ed      	b.n	3b066 <__ssvfiscanf_r+0x52>
   3b08a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   3b08e:	f040 8086 	bne.w	3b19e <__ssvfiscanf_r+0x18a>
   3b092:	9341      	str	r3, [sp, #260]	; 0x104
   3b094:	9343      	str	r3, [sp, #268]	; 0x10c
   3b096:	7853      	ldrb	r3, [r2, #1]
   3b098:	2b2a      	cmp	r3, #42	; 0x2a
   3b09a:	bf04      	itt	eq
   3b09c:	2310      	moveq	r3, #16
   3b09e:	1c95      	addeq	r5, r2, #2
   3b0a0:	f04f 020a 	mov.w	r2, #10
   3b0a4:	bf08      	it	eq
   3b0a6:	9341      	streq	r3, [sp, #260]	; 0x104
   3b0a8:	46ab      	mov	fp, r5
   3b0aa:	f81b 1b01 	ldrb.w	r1, [fp], #1
   3b0ae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3b0b2:	2b09      	cmp	r3, #9
   3b0b4:	d91d      	bls.n	3b0f2 <__ssvfiscanf_r+0xde>
   3b0b6:	2203      	movs	r2, #3
   3b0b8:	4892      	ldr	r0, [pc, #584]	; (3b304 <__ssvfiscanf_r+0x2f0>)
   3b0ba:	f004 ff05 	bl	3fec8 <memchr>
   3b0be:	b140      	cbz	r0, 3b0d2 <__ssvfiscanf_r+0xbe>
   3b0c0:	2301      	movs	r3, #1
   3b0c2:	eba0 0009 	sub.w	r0, r0, r9
   3b0c6:	465d      	mov	r5, fp
   3b0c8:	fa03 f000 	lsl.w	r0, r3, r0
   3b0cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3b0ce:	4318      	orrs	r0, r3
   3b0d0:	9041      	str	r0, [sp, #260]	; 0x104
   3b0d2:	f815 3b01 	ldrb.w	r3, [r5], #1
   3b0d6:	2b78      	cmp	r3, #120	; 0x78
   3b0d8:	d806      	bhi.n	3b0e8 <__ssvfiscanf_r+0xd4>
   3b0da:	2b57      	cmp	r3, #87	; 0x57
   3b0dc:	d810      	bhi.n	3b100 <__ssvfiscanf_r+0xec>
   3b0de:	2b25      	cmp	r3, #37	; 0x25
   3b0e0:	d05d      	beq.n	3b19e <__ssvfiscanf_r+0x18a>
   3b0e2:	d857      	bhi.n	3b194 <__ssvfiscanf_r+0x180>
   3b0e4:	2b00      	cmp	r3, #0
   3b0e6:	d075      	beq.n	3b1d4 <__ssvfiscanf_r+0x1c0>
   3b0e8:	2303      	movs	r3, #3
   3b0ea:	9347      	str	r3, [sp, #284]	; 0x11c
   3b0ec:	230a      	movs	r3, #10
   3b0ee:	9342      	str	r3, [sp, #264]	; 0x108
   3b0f0:	e082      	b.n	3b1f8 <__ssvfiscanf_r+0x1e4>
   3b0f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3b0f4:	465d      	mov	r5, fp
   3b0f6:	fb02 1303 	mla	r3, r2, r3, r1
   3b0fa:	3b30      	subs	r3, #48	; 0x30
   3b0fc:	9343      	str	r3, [sp, #268]	; 0x10c
   3b0fe:	e7d3      	b.n	3b0a8 <__ssvfiscanf_r+0x94>
   3b100:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   3b104:	2a20      	cmp	r2, #32
   3b106:	d8ef      	bhi.n	3b0e8 <__ssvfiscanf_r+0xd4>
   3b108:	a101      	add	r1, pc, #4	; (adr r1, 3b110 <__ssvfiscanf_r+0xfc>)
   3b10a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   3b10e:	bf00      	nop
   3b110:	0003b1e3 	.word	0x0003b1e3
   3b114:	0003b0e9 	.word	0x0003b0e9
   3b118:	0003b0e9 	.word	0x0003b0e9
   3b11c:	0003b241 	.word	0x0003b241
   3b120:	0003b0e9 	.word	0x0003b0e9
   3b124:	0003b0e9 	.word	0x0003b0e9
   3b128:	0003b0e9 	.word	0x0003b0e9
   3b12c:	0003b0e9 	.word	0x0003b0e9
   3b130:	0003b0e9 	.word	0x0003b0e9
   3b134:	0003b0e9 	.word	0x0003b0e9
   3b138:	0003b0e9 	.word	0x0003b0e9
   3b13c:	0003b257 	.word	0x0003b257
   3b140:	0003b22d 	.word	0x0003b22d
   3b144:	0003b19b 	.word	0x0003b19b
   3b148:	0003b19b 	.word	0x0003b19b
   3b14c:	0003b19b 	.word	0x0003b19b
   3b150:	0003b0e9 	.word	0x0003b0e9
   3b154:	0003b231 	.word	0x0003b231
   3b158:	0003b0e9 	.word	0x0003b0e9
   3b15c:	0003b0e9 	.word	0x0003b0e9
   3b160:	0003b0e9 	.word	0x0003b0e9
   3b164:	0003b0e9 	.word	0x0003b0e9
   3b168:	0003b267 	.word	0x0003b267
   3b16c:	0003b239 	.word	0x0003b239
   3b170:	0003b1db 	.word	0x0003b1db
   3b174:	0003b0e9 	.word	0x0003b0e9
   3b178:	0003b0e9 	.word	0x0003b0e9
   3b17c:	0003b263 	.word	0x0003b263
   3b180:	0003b0e9 	.word	0x0003b0e9
   3b184:	0003b22d 	.word	0x0003b22d
   3b188:	0003b0e9 	.word	0x0003b0e9
   3b18c:	0003b0e9 	.word	0x0003b0e9
   3b190:	0003b1e3 	.word	0x0003b1e3
   3b194:	3b45      	subs	r3, #69	; 0x45
   3b196:	2b02      	cmp	r3, #2
   3b198:	d8a6      	bhi.n	3b0e8 <__ssvfiscanf_r+0xd4>
   3b19a:	2305      	movs	r3, #5
   3b19c:	e02b      	b.n	3b1f6 <__ssvfiscanf_r+0x1e2>
   3b19e:	6863      	ldr	r3, [r4, #4]
   3b1a0:	2b00      	cmp	r3, #0
   3b1a2:	dd0d      	ble.n	3b1c0 <__ssvfiscanf_r+0x1ac>
   3b1a4:	6823      	ldr	r3, [r4, #0]
   3b1a6:	781a      	ldrb	r2, [r3, #0]
   3b1a8:	4552      	cmp	r2, sl
   3b1aa:	f040 80a2 	bne.w	3b2f2 <__ssvfiscanf_r+0x2de>
   3b1ae:	3301      	adds	r3, #1
   3b1b0:	6862      	ldr	r2, [r4, #4]
   3b1b2:	6023      	str	r3, [r4, #0]
   3b1b4:	3a01      	subs	r2, #1
   3b1b6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3b1b8:	6062      	str	r2, [r4, #4]
   3b1ba:	3301      	adds	r3, #1
   3b1bc:	9345      	str	r3, [sp, #276]	; 0x114
   3b1be:	e752      	b.n	3b066 <__ssvfiscanf_r+0x52>
   3b1c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3b1c2:	4621      	mov	r1, r4
   3b1c4:	4630      	mov	r0, r6
   3b1c6:	4798      	blx	r3
   3b1c8:	2800      	cmp	r0, #0
   3b1ca:	d0eb      	beq.n	3b1a4 <__ssvfiscanf_r+0x190>
   3b1cc:	9844      	ldr	r0, [sp, #272]	; 0x110
   3b1ce:	2800      	cmp	r0, #0
   3b1d0:	f040 8085 	bne.w	3b2de <__ssvfiscanf_r+0x2ca>
   3b1d4:	f04f 30ff 	mov.w	r0, #4294967295
   3b1d8:	e087      	b.n	3b2ea <__ssvfiscanf_r+0x2d6>
   3b1da:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3b1dc:	f042 0220 	orr.w	r2, r2, #32
   3b1e0:	9241      	str	r2, [sp, #260]	; 0x104
   3b1e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3b1e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3b1e8:	9241      	str	r2, [sp, #260]	; 0x104
   3b1ea:	2210      	movs	r2, #16
   3b1ec:	2b6f      	cmp	r3, #111	; 0x6f
   3b1ee:	9242      	str	r2, [sp, #264]	; 0x108
   3b1f0:	bf34      	ite	cc
   3b1f2:	2303      	movcc	r3, #3
   3b1f4:	2304      	movcs	r3, #4
   3b1f6:	9347      	str	r3, [sp, #284]	; 0x11c
   3b1f8:	6863      	ldr	r3, [r4, #4]
   3b1fa:	2b00      	cmp	r3, #0
   3b1fc:	dd42      	ble.n	3b284 <__ssvfiscanf_r+0x270>
   3b1fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3b200:	0659      	lsls	r1, r3, #25
   3b202:	d404      	bmi.n	3b20e <__ssvfiscanf_r+0x1fa>
   3b204:	6823      	ldr	r3, [r4, #0]
   3b206:	781a      	ldrb	r2, [r3, #0]
   3b208:	5cba      	ldrb	r2, [r7, r2]
   3b20a:	0712      	lsls	r2, r2, #28
   3b20c:	d441      	bmi.n	3b292 <__ssvfiscanf_r+0x27e>
   3b20e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3b210:	2b02      	cmp	r3, #2
   3b212:	dc50      	bgt.n	3b2b6 <__ssvfiscanf_r+0x2a2>
   3b214:	466b      	mov	r3, sp
   3b216:	4622      	mov	r2, r4
   3b218:	a941      	add	r1, sp, #260	; 0x104
   3b21a:	4630      	mov	r0, r6
   3b21c:	f000 f876 	bl	3b30c <_scanf_chars>
   3b220:	2801      	cmp	r0, #1
   3b222:	d066      	beq.n	3b2f2 <__ssvfiscanf_r+0x2de>
   3b224:	2802      	cmp	r0, #2
   3b226:	f47f af1e 	bne.w	3b066 <__ssvfiscanf_r+0x52>
   3b22a:	e7cf      	b.n	3b1cc <__ssvfiscanf_r+0x1b8>
   3b22c:	220a      	movs	r2, #10
   3b22e:	e7dd      	b.n	3b1ec <__ssvfiscanf_r+0x1d8>
   3b230:	2300      	movs	r3, #0
   3b232:	9342      	str	r3, [sp, #264]	; 0x108
   3b234:	2303      	movs	r3, #3
   3b236:	e7de      	b.n	3b1f6 <__ssvfiscanf_r+0x1e2>
   3b238:	2308      	movs	r3, #8
   3b23a:	9342      	str	r3, [sp, #264]	; 0x108
   3b23c:	2304      	movs	r3, #4
   3b23e:	e7da      	b.n	3b1f6 <__ssvfiscanf_r+0x1e2>
   3b240:	4629      	mov	r1, r5
   3b242:	4640      	mov	r0, r8
   3b244:	f005 fd54 	bl	40cf0 <__sccl>
   3b248:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3b24a:	4605      	mov	r5, r0
   3b24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3b250:	9341      	str	r3, [sp, #260]	; 0x104
   3b252:	2301      	movs	r3, #1
   3b254:	e7cf      	b.n	3b1f6 <__ssvfiscanf_r+0x1e2>
   3b256:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3b258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3b25c:	9341      	str	r3, [sp, #260]	; 0x104
   3b25e:	2300      	movs	r3, #0
   3b260:	e7c9      	b.n	3b1f6 <__ssvfiscanf_r+0x1e2>
   3b262:	2302      	movs	r3, #2
   3b264:	e7c7      	b.n	3b1f6 <__ssvfiscanf_r+0x1e2>
   3b266:	9841      	ldr	r0, [sp, #260]	; 0x104
   3b268:	06c3      	lsls	r3, r0, #27
   3b26a:	f53f aefc 	bmi.w	3b066 <__ssvfiscanf_r+0x52>
   3b26e:	9b00      	ldr	r3, [sp, #0]
   3b270:	07c0      	lsls	r0, r0, #31
   3b272:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3b274:	f103 0104 	add.w	r1, r3, #4
   3b278:	9100      	str	r1, [sp, #0]
   3b27a:	681b      	ldr	r3, [r3, #0]
   3b27c:	bf4c      	ite	mi
   3b27e:	801a      	strhmi	r2, [r3, #0]
   3b280:	601a      	strpl	r2, [r3, #0]
   3b282:	e6f0      	b.n	3b066 <__ssvfiscanf_r+0x52>
   3b284:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3b286:	4621      	mov	r1, r4
   3b288:	4630      	mov	r0, r6
   3b28a:	4798      	blx	r3
   3b28c:	2800      	cmp	r0, #0
   3b28e:	d0b6      	beq.n	3b1fe <__ssvfiscanf_r+0x1ea>
   3b290:	e79c      	b.n	3b1cc <__ssvfiscanf_r+0x1b8>
   3b292:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3b294:	3201      	adds	r2, #1
   3b296:	9245      	str	r2, [sp, #276]	; 0x114
   3b298:	6862      	ldr	r2, [r4, #4]
   3b29a:	3a01      	subs	r2, #1
   3b29c:	2a00      	cmp	r2, #0
   3b29e:	6062      	str	r2, [r4, #4]
   3b2a0:	dd02      	ble.n	3b2a8 <__ssvfiscanf_r+0x294>
   3b2a2:	3301      	adds	r3, #1
   3b2a4:	6023      	str	r3, [r4, #0]
   3b2a6:	e7ad      	b.n	3b204 <__ssvfiscanf_r+0x1f0>
   3b2a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3b2aa:	4621      	mov	r1, r4
   3b2ac:	4630      	mov	r0, r6
   3b2ae:	4798      	blx	r3
   3b2b0:	2800      	cmp	r0, #0
   3b2b2:	d0a7      	beq.n	3b204 <__ssvfiscanf_r+0x1f0>
   3b2b4:	e78a      	b.n	3b1cc <__ssvfiscanf_r+0x1b8>
   3b2b6:	2b04      	cmp	r3, #4
   3b2b8:	dc06      	bgt.n	3b2c8 <__ssvfiscanf_r+0x2b4>
   3b2ba:	466b      	mov	r3, sp
   3b2bc:	4622      	mov	r2, r4
   3b2be:	a941      	add	r1, sp, #260	; 0x104
   3b2c0:	4630      	mov	r0, r6
   3b2c2:	f000 f87b 	bl	3b3bc <_scanf_i>
   3b2c6:	e7ab      	b.n	3b220 <__ssvfiscanf_r+0x20c>
   3b2c8:	4b0f      	ldr	r3, [pc, #60]	; (3b308 <__ssvfiscanf_r+0x2f4>)
   3b2ca:	2b00      	cmp	r3, #0
   3b2cc:	f43f aecb 	beq.w	3b066 <__ssvfiscanf_r+0x52>
   3b2d0:	466b      	mov	r3, sp
   3b2d2:	4622      	mov	r2, r4
   3b2d4:	a941      	add	r1, sp, #260	; 0x104
   3b2d6:	4630      	mov	r0, r6
   3b2d8:	e000      	b.n	3b2dc <__ssvfiscanf_r+0x2c8>
   3b2da:	bf00      	nop
   3b2dc:	e7a0      	b.n	3b220 <__ssvfiscanf_r+0x20c>
   3b2de:	89a3      	ldrh	r3, [r4, #12]
   3b2e0:	f013 0f40 	tst.w	r3, #64	; 0x40
   3b2e4:	bf18      	it	ne
   3b2e6:	f04f 30ff 	movne.w	r0, #4294967295
   3b2ea:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   3b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b2f2:	9844      	ldr	r0, [sp, #272]	; 0x110
   3b2f4:	e7f9      	b.n	3b2ea <__ssvfiscanf_r+0x2d6>
   3b2f6:	bf00      	nop
   3b2f8:	00045e47 	.word	0x00045e47
   3b2fc:	00040c3d 	.word	0x00040c3d
   3b300:	00040cb7 	.word	0x00040cb7
   3b304:	00045f4d 	.word	0x00045f4d
   3b308:	00000000 	.word	0x00000000

0003b30c <_scanf_chars>:
   3b30c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b310:	4615      	mov	r5, r2
   3b312:	688a      	ldr	r2, [r1, #8]
   3b314:	4680      	mov	r8, r0
   3b316:	460c      	mov	r4, r1
   3b318:	b932      	cbnz	r2, 3b328 <_scanf_chars+0x1c>
   3b31a:	698a      	ldr	r2, [r1, #24]
   3b31c:	2a00      	cmp	r2, #0
   3b31e:	bf0c      	ite	eq
   3b320:	2201      	moveq	r2, #1
   3b322:	f04f 32ff 	movne.w	r2, #4294967295
   3b326:	608a      	str	r2, [r1, #8]
   3b328:	6822      	ldr	r2, [r4, #0]
   3b32a:	2700      	movs	r7, #0
   3b32c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3b3b8 <_scanf_chars+0xac>
   3b330:	06d1      	lsls	r1, r2, #27
   3b332:	bf5f      	itttt	pl
   3b334:	681a      	ldrpl	r2, [r3, #0]
   3b336:	1d11      	addpl	r1, r2, #4
   3b338:	6019      	strpl	r1, [r3, #0]
   3b33a:	6816      	ldrpl	r6, [r2, #0]
   3b33c:	69a0      	ldr	r0, [r4, #24]
   3b33e:	b188      	cbz	r0, 3b364 <_scanf_chars+0x58>
   3b340:	2801      	cmp	r0, #1
   3b342:	d107      	bne.n	3b354 <_scanf_chars+0x48>
   3b344:	682b      	ldr	r3, [r5, #0]
   3b346:	781a      	ldrb	r2, [r3, #0]
   3b348:	6963      	ldr	r3, [r4, #20]
   3b34a:	5c9b      	ldrb	r3, [r3, r2]
   3b34c:	b953      	cbnz	r3, 3b364 <_scanf_chars+0x58>
   3b34e:	bb27      	cbnz	r7, 3b39a <_scanf_chars+0x8e>
   3b350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b354:	2802      	cmp	r0, #2
   3b356:	d120      	bne.n	3b39a <_scanf_chars+0x8e>
   3b358:	682b      	ldr	r3, [r5, #0]
   3b35a:	781b      	ldrb	r3, [r3, #0]
   3b35c:	f813 3009 	ldrb.w	r3, [r3, r9]
   3b360:	071b      	lsls	r3, r3, #28
   3b362:	d41a      	bmi.n	3b39a <_scanf_chars+0x8e>
   3b364:	6823      	ldr	r3, [r4, #0]
   3b366:	3701      	adds	r7, #1
   3b368:	06da      	lsls	r2, r3, #27
   3b36a:	bf5e      	ittt	pl
   3b36c:	682b      	ldrpl	r3, [r5, #0]
   3b36e:	781b      	ldrbpl	r3, [r3, #0]
   3b370:	f806 3b01 	strbpl.w	r3, [r6], #1
   3b374:	682a      	ldr	r2, [r5, #0]
   3b376:	686b      	ldr	r3, [r5, #4]
   3b378:	3201      	adds	r2, #1
   3b37a:	3b01      	subs	r3, #1
   3b37c:	602a      	str	r2, [r5, #0]
   3b37e:	68a2      	ldr	r2, [r4, #8]
   3b380:	606b      	str	r3, [r5, #4]
   3b382:	3a01      	subs	r2, #1
   3b384:	60a2      	str	r2, [r4, #8]
   3b386:	b142      	cbz	r2, 3b39a <_scanf_chars+0x8e>
   3b388:	2b00      	cmp	r3, #0
   3b38a:	dcd7      	bgt.n	3b33c <_scanf_chars+0x30>
   3b38c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3b390:	4629      	mov	r1, r5
   3b392:	4640      	mov	r0, r8
   3b394:	4798      	blx	r3
   3b396:	2800      	cmp	r0, #0
   3b398:	d0d0      	beq.n	3b33c <_scanf_chars+0x30>
   3b39a:	6823      	ldr	r3, [r4, #0]
   3b39c:	f013 0310 	ands.w	r3, r3, #16
   3b3a0:	d105      	bne.n	3b3ae <_scanf_chars+0xa2>
   3b3a2:	68e2      	ldr	r2, [r4, #12]
   3b3a4:	3201      	adds	r2, #1
   3b3a6:	60e2      	str	r2, [r4, #12]
   3b3a8:	69a2      	ldr	r2, [r4, #24]
   3b3aa:	b102      	cbz	r2, 3b3ae <_scanf_chars+0xa2>
   3b3ac:	7033      	strb	r3, [r6, #0]
   3b3ae:	6923      	ldr	r3, [r4, #16]
   3b3b0:	2000      	movs	r0, #0
   3b3b2:	441f      	add	r7, r3
   3b3b4:	6127      	str	r7, [r4, #16]
   3b3b6:	e7cb      	b.n	3b350 <_scanf_chars+0x44>
   3b3b8:	00045e47 	.word	0x00045e47

0003b3bc <_scanf_i>:
   3b3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b3c0:	4698      	mov	r8, r3
   3b3c2:	b087      	sub	sp, #28
   3b3c4:	4b72      	ldr	r3, [pc, #456]	; (3b590 <_scanf_i+0x1d4>)
   3b3c6:	460c      	mov	r4, r1
   3b3c8:	4682      	mov	sl, r0
   3b3ca:	4616      	mov	r6, r2
   3b3cc:	4627      	mov	r7, r4
   3b3ce:	f04f 0b00 	mov.w	fp, #0
   3b3d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3b3d6:	ab03      	add	r3, sp, #12
   3b3d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3b3dc:	4b6d      	ldr	r3, [pc, #436]	; (3b594 <_scanf_i+0x1d8>)
   3b3de:	69a1      	ldr	r1, [r4, #24]
   3b3e0:	4a6d      	ldr	r2, [pc, #436]	; (3b598 <_scanf_i+0x1dc>)
   3b3e2:	2903      	cmp	r1, #3
   3b3e4:	bf18      	it	ne
   3b3e6:	461a      	movne	r2, r3
   3b3e8:	68a3      	ldr	r3, [r4, #8]
   3b3ea:	9201      	str	r2, [sp, #4]
   3b3ec:	1e5a      	subs	r2, r3, #1
   3b3ee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3b3f2:	bf89      	itett	hi
   3b3f4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3b3f8:	f04f 0900 	movls.w	r9, #0
   3b3fc:	eb03 0905 	addhi.w	r9, r3, r5
   3b400:	f240 135d 	movwhi	r3, #349	; 0x15d
   3b404:	bf88      	it	hi
   3b406:	60a3      	strhi	r3, [r4, #8]
   3b408:	f857 3b1c 	ldr.w	r3, [r7], #28
   3b40c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3b410:	463d      	mov	r5, r7
   3b412:	6023      	str	r3, [r4, #0]
   3b414:	6831      	ldr	r1, [r6, #0]
   3b416:	ab03      	add	r3, sp, #12
   3b418:	2202      	movs	r2, #2
   3b41a:	7809      	ldrb	r1, [r1, #0]
   3b41c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3b420:	f004 fd52 	bl	3fec8 <memchr>
   3b424:	b328      	cbz	r0, 3b472 <_scanf_i+0xb6>
   3b426:	f1bb 0f01 	cmp.w	fp, #1
   3b42a:	d159      	bne.n	3b4e0 <_scanf_i+0x124>
   3b42c:	6862      	ldr	r2, [r4, #4]
   3b42e:	b92a      	cbnz	r2, 3b43c <_scanf_i+0x80>
   3b430:	6822      	ldr	r2, [r4, #0]
   3b432:	2308      	movs	r3, #8
   3b434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3b438:	6063      	str	r3, [r4, #4]
   3b43a:	6022      	str	r2, [r4, #0]
   3b43c:	6822      	ldr	r2, [r4, #0]
   3b43e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3b442:	6022      	str	r2, [r4, #0]
   3b444:	68a2      	ldr	r2, [r4, #8]
   3b446:	1e51      	subs	r1, r2, #1
   3b448:	60a1      	str	r1, [r4, #8]
   3b44a:	b192      	cbz	r2, 3b472 <_scanf_i+0xb6>
   3b44c:	6832      	ldr	r2, [r6, #0]
   3b44e:	1c51      	adds	r1, r2, #1
   3b450:	6031      	str	r1, [r6, #0]
   3b452:	7812      	ldrb	r2, [r2, #0]
   3b454:	f805 2b01 	strb.w	r2, [r5], #1
   3b458:	6872      	ldr	r2, [r6, #4]
   3b45a:	3a01      	subs	r2, #1
   3b45c:	2a00      	cmp	r2, #0
   3b45e:	6072      	str	r2, [r6, #4]
   3b460:	dc07      	bgt.n	3b472 <_scanf_i+0xb6>
   3b462:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3b466:	4631      	mov	r1, r6
   3b468:	4650      	mov	r0, sl
   3b46a:	4790      	blx	r2
   3b46c:	2800      	cmp	r0, #0
   3b46e:	f040 8085 	bne.w	3b57c <_scanf_i+0x1c0>
   3b472:	f10b 0b01 	add.w	fp, fp, #1
   3b476:	f1bb 0f03 	cmp.w	fp, #3
   3b47a:	d1cb      	bne.n	3b414 <_scanf_i+0x58>
   3b47c:	6863      	ldr	r3, [r4, #4]
   3b47e:	b90b      	cbnz	r3, 3b484 <_scanf_i+0xc8>
   3b480:	230a      	movs	r3, #10
   3b482:	6063      	str	r3, [r4, #4]
   3b484:	6863      	ldr	r3, [r4, #4]
   3b486:	f04f 0b00 	mov.w	fp, #0
   3b48a:	4944      	ldr	r1, [pc, #272]	; (3b59c <_scanf_i+0x1e0>)
   3b48c:	6960      	ldr	r0, [r4, #20]
   3b48e:	1ac9      	subs	r1, r1, r3
   3b490:	f005 fc2e 	bl	40cf0 <__sccl>
   3b494:	68a3      	ldr	r3, [r4, #8]
   3b496:	6822      	ldr	r2, [r4, #0]
   3b498:	2b00      	cmp	r3, #0
   3b49a:	d03d      	beq.n	3b518 <_scanf_i+0x15c>
   3b49c:	6831      	ldr	r1, [r6, #0]
   3b49e:	6960      	ldr	r0, [r4, #20]
   3b4a0:	f891 c000 	ldrb.w	ip, [r1]
   3b4a4:	f810 000c 	ldrb.w	r0, [r0, ip]
   3b4a8:	2800      	cmp	r0, #0
   3b4aa:	d035      	beq.n	3b518 <_scanf_i+0x15c>
   3b4ac:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3b4b0:	d124      	bne.n	3b4fc <_scanf_i+0x140>
   3b4b2:	0510      	lsls	r0, r2, #20
   3b4b4:	d522      	bpl.n	3b4fc <_scanf_i+0x140>
   3b4b6:	f10b 0b01 	add.w	fp, fp, #1
   3b4ba:	f1b9 0f00 	cmp.w	r9, #0
   3b4be:	d003      	beq.n	3b4c8 <_scanf_i+0x10c>
   3b4c0:	3301      	adds	r3, #1
   3b4c2:	f109 39ff 	add.w	r9, r9, #4294967295
   3b4c6:	60a3      	str	r3, [r4, #8]
   3b4c8:	6873      	ldr	r3, [r6, #4]
   3b4ca:	3b01      	subs	r3, #1
   3b4cc:	2b00      	cmp	r3, #0
   3b4ce:	6073      	str	r3, [r6, #4]
   3b4d0:	dd1b      	ble.n	3b50a <_scanf_i+0x14e>
   3b4d2:	6833      	ldr	r3, [r6, #0]
   3b4d4:	3301      	adds	r3, #1
   3b4d6:	6033      	str	r3, [r6, #0]
   3b4d8:	68a3      	ldr	r3, [r4, #8]
   3b4da:	3b01      	subs	r3, #1
   3b4dc:	60a3      	str	r3, [r4, #8]
   3b4de:	e7d9      	b.n	3b494 <_scanf_i+0xd8>
   3b4e0:	f1bb 0f02 	cmp.w	fp, #2
   3b4e4:	d1ae      	bne.n	3b444 <_scanf_i+0x88>
   3b4e6:	6822      	ldr	r2, [r4, #0]
   3b4e8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3b4ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3b4f0:	d1bf      	bne.n	3b472 <_scanf_i+0xb6>
   3b4f2:	2310      	movs	r3, #16
   3b4f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3b4f8:	6063      	str	r3, [r4, #4]
   3b4fa:	e7a2      	b.n	3b442 <_scanf_i+0x86>
   3b4fc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3b500:	6022      	str	r2, [r4, #0]
   3b502:	780b      	ldrb	r3, [r1, #0]
   3b504:	f805 3b01 	strb.w	r3, [r5], #1
   3b508:	e7de      	b.n	3b4c8 <_scanf_i+0x10c>
   3b50a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3b50e:	4631      	mov	r1, r6
   3b510:	4650      	mov	r0, sl
   3b512:	4798      	blx	r3
   3b514:	2800      	cmp	r0, #0
   3b516:	d0df      	beq.n	3b4d8 <_scanf_i+0x11c>
   3b518:	6823      	ldr	r3, [r4, #0]
   3b51a:	05d9      	lsls	r1, r3, #23
   3b51c:	d50d      	bpl.n	3b53a <_scanf_i+0x17e>
   3b51e:	42bd      	cmp	r5, r7
   3b520:	d909      	bls.n	3b536 <_scanf_i+0x17a>
   3b522:	f105 39ff 	add.w	r9, r5, #4294967295
   3b526:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3b52a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3b52e:	4632      	mov	r2, r6
   3b530:	464d      	mov	r5, r9
   3b532:	4650      	mov	r0, sl
   3b534:	4798      	blx	r3
   3b536:	42bd      	cmp	r5, r7
   3b538:	d028      	beq.n	3b58c <_scanf_i+0x1d0>
   3b53a:	6822      	ldr	r2, [r4, #0]
   3b53c:	f012 0210 	ands.w	r2, r2, #16
   3b540:	d113      	bne.n	3b56a <_scanf_i+0x1ae>
   3b542:	702a      	strb	r2, [r5, #0]
   3b544:	4639      	mov	r1, r7
   3b546:	6863      	ldr	r3, [r4, #4]
   3b548:	4650      	mov	r0, sl
   3b54a:	9e01      	ldr	r6, [sp, #4]
   3b54c:	47b0      	blx	r6
   3b54e:	f8d8 3000 	ldr.w	r3, [r8]
   3b552:	6821      	ldr	r1, [r4, #0]
   3b554:	1d1a      	adds	r2, r3, #4
   3b556:	f011 0f20 	tst.w	r1, #32
   3b55a:	f8c8 2000 	str.w	r2, [r8]
   3b55e:	681b      	ldr	r3, [r3, #0]
   3b560:	d00f      	beq.n	3b582 <_scanf_i+0x1c6>
   3b562:	6018      	str	r0, [r3, #0]
   3b564:	68e3      	ldr	r3, [r4, #12]
   3b566:	3301      	adds	r3, #1
   3b568:	60e3      	str	r3, [r4, #12]
   3b56a:	1bed      	subs	r5, r5, r7
   3b56c:	2000      	movs	r0, #0
   3b56e:	44ab      	add	fp, r5
   3b570:	6925      	ldr	r5, [r4, #16]
   3b572:	445d      	add	r5, fp
   3b574:	6125      	str	r5, [r4, #16]
   3b576:	b007      	add	sp, #28
   3b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b57c:	f04f 0b00 	mov.w	fp, #0
   3b580:	e7ca      	b.n	3b518 <_scanf_i+0x15c>
   3b582:	07ca      	lsls	r2, r1, #31
   3b584:	bf4c      	ite	mi
   3b586:	8018      	strhmi	r0, [r3, #0]
   3b588:	6018      	strpl	r0, [r3, #0]
   3b58a:	e7eb      	b.n	3b564 <_scanf_i+0x1a8>
   3b58c:	2001      	movs	r0, #1
   3b58e:	e7f2      	b.n	3b576 <_scanf_i+0x1ba>
   3b590:	00041374 	.word	0x00041374
   3b594:	0004032d 	.word	0x0004032d
   3b598:	00040329 	.word	0x00040329
   3b59c:	00045fb0 	.word	0x00045fb0

0003b5a0 <_read_r>:
   3b5a0:	b538      	push	{r3, r4, r5, lr}
   3b5a2:	4604      	mov	r4, r0
   3b5a4:	4d06      	ldr	r5, [pc, #24]	; (3b5c0 <_read_r+0x20>)
   3b5a6:	4608      	mov	r0, r1
   3b5a8:	4611      	mov	r1, r2
   3b5aa:	2200      	movs	r2, #0
   3b5ac:	602a      	str	r2, [r5, #0]
   3b5ae:	461a      	mov	r2, r3
   3b5b0:	f001 f943 	bl	3c83a <_read>
   3b5b4:	1c43      	adds	r3, r0, #1
   3b5b6:	d102      	bne.n	3b5be <_read_r+0x1e>
   3b5b8:	682b      	ldr	r3, [r5, #0]
   3b5ba:	b103      	cbz	r3, 3b5be <_read_r+0x1e>
   3b5bc:	6023      	str	r3, [r4, #0]
   3b5be:	bd38      	pop	{r3, r4, r5, pc}
   3b5c0:	20010f40 	.word	0x20010f40

0003b5c4 <raise>:
   3b5c4:	4b02      	ldr	r3, [pc, #8]	; (3b5d0 <raise+0xc>)
   3b5c6:	4601      	mov	r1, r0
   3b5c8:	6818      	ldr	r0, [r3, #0]
   3b5ca:	f005 bbca 	b.w	40d62 <_raise_r>
   3b5ce:	bf00      	nop
   3b5d0:	2000c6f4 	.word	0x2000c6f4

0003b5d4 <_kill_r>:
   3b5d4:	b538      	push	{r3, r4, r5, lr}
   3b5d6:	2300      	movs	r3, #0
   3b5d8:	4d06      	ldr	r5, [pc, #24]	; (3b5f4 <_kill_r+0x20>)
   3b5da:	4604      	mov	r4, r0
   3b5dc:	4608      	mov	r0, r1
   3b5de:	4611      	mov	r1, r2
   3b5e0:	602b      	str	r3, [r5, #0]
   3b5e2:	f001 f940 	bl	3c866 <_kill>
   3b5e6:	1c43      	adds	r3, r0, #1
   3b5e8:	d102      	bne.n	3b5f0 <_kill_r+0x1c>
   3b5ea:	682b      	ldr	r3, [r5, #0]
   3b5ec:	b103      	cbz	r3, 3b5f0 <_kill_r+0x1c>
   3b5ee:	6023      	str	r3, [r4, #0]
   3b5f0:	bd38      	pop	{r3, r4, r5, pc}
   3b5f2:	bf00      	nop
   3b5f4:	20010f40 	.word	0x20010f40

0003b5f8 <_fstat_r>:
   3b5f8:	b538      	push	{r3, r4, r5, lr}
   3b5fa:	2300      	movs	r3, #0
   3b5fc:	4d06      	ldr	r5, [pc, #24]	; (3b618 <_fstat_r+0x20>)
   3b5fe:	4604      	mov	r4, r0
   3b600:	4608      	mov	r0, r1
   3b602:	4611      	mov	r1, r2
   3b604:	602b      	str	r3, [r5, #0]
   3b606:	f001 f932 	bl	3c86e <_fstat>
   3b60a:	1c43      	adds	r3, r0, #1
   3b60c:	d102      	bne.n	3b614 <_fstat_r+0x1c>
   3b60e:	682b      	ldr	r3, [r5, #0]
   3b610:	b103      	cbz	r3, 3b614 <_fstat_r+0x1c>
   3b612:	6023      	str	r3, [r4, #0]
   3b614:	bd38      	pop	{r3, r4, r5, pc}
   3b616:	bf00      	nop
   3b618:	20010f40 	.word	0x20010f40

0003b61c <_isatty_r>:
   3b61c:	b538      	push	{r3, r4, r5, lr}
   3b61e:	2300      	movs	r3, #0
   3b620:	4d05      	ldr	r5, [pc, #20]	; (3b638 <_isatty_r+0x1c>)
   3b622:	4604      	mov	r4, r0
   3b624:	4608      	mov	r0, r1
   3b626:	602b      	str	r3, [r5, #0]
   3b628:	f001 f918 	bl	3c85c <_isatty>
   3b62c:	1c43      	adds	r3, r0, #1
   3b62e:	d102      	bne.n	3b636 <_isatty_r+0x1a>
   3b630:	682b      	ldr	r3, [r5, #0]
   3b632:	b103      	cbz	r3, 3b636 <_isatty_r+0x1a>
   3b634:	6023      	str	r3, [r4, #0]
   3b636:	bd38      	pop	{r3, r4, r5, pc}
   3b638:	20010f40 	.word	0x20010f40

0003b63c <dfu_target_cb_dummy>:
void dfu_target_cb_dummy(enum dfu_target_evt_id evt_id) {;}
   3b63c:	4770      	bx	lr

0003b63e <http_client_connect>:
{
   3b63e:	b508      	push	{r3, lr}
    return lte_lc_init_and_connect();
   3b640:	f003 f832 	bl	3e6a8 <lte_lc_init_and_connect>
}
   3b644:	bd08      	pop	{r3, pc}

0003b646 <cmd_request_flash_write>:
{
   3b646:	b508      	push	{r3, lr}
   3b648:	460a      	mov	r2, r1
    return app_cmd_request(CMD_OP_FLASH_WRITE_52, p_data, length);
   3b64a:	4601      	mov	r1, r0
   3b64c:	2023      	movs	r0, #35	; 0x23
   3b64e:	f7e9 f815 	bl	2467c <app_cmd_request>
}
   3b652:	bd08      	pop	{r3, pc}

0003b654 <cmd_request_flash_erase>:
{
   3b654:	b500      	push	{lr}
   3b656:	b083      	sub	sp, #12
	dst[0] = val;
   3b658:	f88d 0000 	strb.w	r0, [sp]
	dst[1] = val >> 8;
   3b65c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   3b660:	f88d 3001 	strb.w	r3, [sp, #1]
	sys_put_le16(val >> 16, &dst[2]);
   3b664:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   3b666:	f88d 3002 	strb.w	r3, [sp, #2]
	dst[1] = val >> 8;
   3b66a:	0e00      	lsrs	r0, r0, #24
   3b66c:	f88d 0003 	strb.w	r0, [sp, #3]
	dst[0] = val;
   3b670:	f88d 1004 	strb.w	r1, [sp, #4]
	dst[1] = val >> 8;
   3b674:	0a0b      	lsrs	r3, r1, #8
   3b676:	f88d 3005 	strb.w	r3, [sp, #5]
	sys_put_le16(val >> 16, &dst[2]);
   3b67a:	0c09      	lsrs	r1, r1, #16
	dst[0] = val;
   3b67c:	f88d 1006 	strb.w	r1, [sp, #6]
	dst[1] = val >> 8;
   3b680:	2300      	movs	r3, #0
   3b682:	f88d 3007 	strb.w	r3, [sp, #7]
    return app_cmd_request(CMD_OP_FLASH_ERASE_52, p_data, sizeof(p_data));
   3b686:	2208      	movs	r2, #8
   3b688:	4669      	mov	r1, sp
   3b68a:	2024      	movs	r0, #36	; 0x24
   3b68c:	f7e8 fff6 	bl	2467c <app_cmd_request>
}
   3b690:	b003      	add	sp, #12
   3b692:	f85d fb04 	ldr.w	pc, [sp], #4

0003b696 <uart_buffer_reset>:
    p_buff->length = 0;
   3b696:	2300      	movs	r3, #0
   3b698:	8083      	strh	r3, [r0, #4]
}
   3b69a:	4770      	bx	lr

0003b69c <event_cb_dummy>:
static void event_cb_dummy(cmd_event_t* p_event) {;}
   3b69c:	4770      	bx	lr

0003b69e <mode_set>:
    cmd_mode_t old_mode = p_cmd_ctx->mode;
   3b69e:	7803      	ldrb	r3, [r0, #0]
    if (old_mode != new_mode) {
   3b6a0:	428b      	cmp	r3, r1
   3b6a2:	d000      	beq.n	3b6a6 <mode_set+0x8>
        p_cmd_ctx->mode = new_mode;
   3b6a4:	7001      	strb	r1, [r0, #0]
}
   3b6a6:	4770      	bx	lr

0003b6a8 <mode_get>:
}
   3b6a8:	7800      	ldrb	r0, [r0, #0]
   3b6aa:	4770      	bx	lr

0003b6ac <state_get>:
}
   3b6ac:	7840      	ldrb	r0, [r0, #1]
   3b6ae:	4770      	bx	lr

0003b6b0 <op_code_get>:
    if (p_buff == NULL || p_buff->p_data == NULL) {
   3b6b0:	b128      	cbz	r0, 3b6be <op_code_get+0xe>
   3b6b2:	6803      	ldr	r3, [r0, #0]
   3b6b4:	b133      	cbz	r3, 3b6c4 <op_code_get+0x14>
    *op_code = p_buff->p_data[CMD_FMT_OFFSET_OPCODE];
   3b6b6:	78db      	ldrb	r3, [r3, #3]
   3b6b8:	700b      	strb	r3, [r1, #0]
    return 0;
   3b6ba:	2000      	movs	r0, #0
   3b6bc:	4770      	bx	lr
        return -1;
   3b6be:	f04f 30ff 	mov.w	r0, #4294967295
   3b6c2:	4770      	bx	lr
   3b6c4:	f04f 30ff 	mov.w	r0, #4294967295
}
   3b6c8:	4770      	bx	lr

0003b6ca <buff_to_cmd>:
    if (p_buff->p_data == NULL || p_cmd == NULL) {
   3b6ca:	6803      	ldr	r3, [r0, #0]
   3b6cc:	b17b      	cbz	r3, 3b6ee <buff_to_cmd+0x24>
   3b6ce:	b189      	cbz	r1, 3b6f4 <buff_to_cmd+0x2a>
	return ((uint16_t)src[1] << 8) | src[0];
   3b6d0:	7898      	ldrb	r0, [r3, #2]
   3b6d2:	785a      	ldrb	r2, [r3, #1]
   3b6d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   3b6d8:	b212      	sxth	r2, r2
    p_cmd->type = p_data[CMD_FMT_OFFSET_START];
   3b6da:	7818      	ldrb	r0, [r3, #0]
   3b6dc:	7008      	strb	r0, [r1, #0]
    p_cmd->op_code = p_data[CMD_FMT_OFFSET_OPCODE];
   3b6de:	78d8      	ldrb	r0, [r3, #3]
   3b6e0:	7048      	strb	r0, [r1, #1]
    p_cmd->length = op_pdu_len - CMD_FMT_SIZE_OPCODE;
   3b6e2:	3a01      	subs	r2, #1
   3b6e4:	810a      	strh	r2, [r1, #8]
    p_cmd->p_data = &p_data[CMD_FMT_OFFSET_PDU];
   3b6e6:	3304      	adds	r3, #4
   3b6e8:	604b      	str	r3, [r1, #4]
    return 0;
   3b6ea:	2000      	movs	r0, #0
   3b6ec:	4770      	bx	lr
        return -1;
   3b6ee:	f04f 30ff 	mov.w	r0, #4294967295
   3b6f2:	4770      	bx	lr
   3b6f4:	f04f 30ff 	mov.w	r0, #4294967295
}
   3b6f8:	4770      	bx	lr

0003b6fa <state_set>:
{
   3b6fa:	b508      	push	{r3, lr}
    cmd_state_t old_state = p_cmd_ctx->state;
   3b6fc:	7843      	ldrb	r3, [r0, #1]
    if (old_state != new_state) {
   3b6fe:	428b      	cmp	r3, r1
   3b700:	d100      	bne.n	3b704 <state_set+0xa>
}
   3b702:	bd08      	pop	{r3, pc}
        p_cmd_ctx->state = new_state;
   3b704:	7041      	strb	r1, [r0, #1]
        state_handler(p_cmd_ctx);
   3b706:	f7e8 f8fd 	bl	23904 <state_handler>
}
   3b70a:	e7fa      	b.n	3b702 <state_set+0x8>

0003b70c <crc16_check>:
{
   3b70c:	b510      	push	{r4, lr}
   3b70e:	4614      	mov	r4, r2
    return crc16_compute(p_data, length) == crc_target;
   3b710:	460a      	mov	r2, r1
   3b712:	4601      	mov	r1, r0
   3b714:	2000      	movs	r0, #0
   3b716:	f000 f95f 	bl	3b9d8 <crc16_itu_t>
}
   3b71a:	42a0      	cmp	r0, r4
   3b71c:	bf14      	ite	ne
   3b71e:	2000      	movne	r0, #0
   3b720:	2001      	moveq	r0, #1
   3b722:	bd10      	pop	{r4, pc}

0003b724 <app_flash_si_slotinfo>:
{
   3b724:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b726:	b083      	sub	sp, #12
   3b728:	4604      	mov	r4, r0
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   3b72a:	a901      	add	r1, sp, #4
   3b72c:	2007      	movs	r0, #7
   3b72e:	f7eb fbd1 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b732:	4606      	mov	r6, r0
   3b734:	b110      	cbz	r0, 3b73c <app_flash_si_slotinfo+0x18>
}
   3b736:	4630      	mov	r0, r6
   3b738:	b003      	add	sp, #12
   3b73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bank_addr = fa->fa_off;
   3b73c:	9801      	ldr	r0, [sp, #4]
   3b73e:	6845      	ldr	r5, [r0, #4]
	page_count = fa->fa_size / 0x1000;
   3b740:	6887      	ldr	r7, [r0, #8]
   3b742:	0b3f      	lsrs	r7, r7, #12
	flash_area_close(fa);
   3b744:	f000 fe98 	bl	3c478 <flash_area_close>
	p_read = bank_addr;
   3b748:	4629      	mov	r1, r5
	found = false;
   3b74a:	2000      	movs	r0, #0
	while (p_read < fa->fa_size) {
   3b74c:	e003      	b.n	3b756 <app_flash_si_slotinfo+0x32>
				found = true;
   3b74e:	2001      	movs	r0, #1
		if (!found) {
   3b750:	b170      	cbz	r0, 3b770 <app_flash_si_slotinfo+0x4c>
		p_read += 4096;
   3b752:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	while (p_read < fa->fa_size) {
   3b756:	9b01      	ldr	r3, [sp, #4]
   3b758:	689b      	ldr	r3, [r3, #8]
   3b75a:	428b      	cmp	r3, r1
   3b75c:	d908      	bls.n	3b770 <app_flash_si_slotinfo+0x4c>
		for (uint32_t i = 0; i < 4096; i++) {
   3b75e:	2300      	movs	r3, #0
   3b760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   3b764:	d2f4      	bcs.n	3b750 <app_flash_si_slotinfo+0x2c>
			if (((uint8_t*)p_read)[i] != 0xFF) {
   3b766:	5cca      	ldrb	r2, [r1, r3]
   3b768:	2aff      	cmp	r2, #255	; 0xff
   3b76a:	d1f0      	bne.n	3b74e <app_flash_si_slotinfo+0x2a>
		for (uint32_t i = 0; i < 4096; i++) {
   3b76c:	3301      	adds	r3, #1
   3b76e:	e7f7      	b.n	3b760 <app_flash_si_slotinfo+0x3c>
	first_blank = MAX(bank_addr, (p_read - 4096));
   3b770:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
   3b774:	42a9      	cmp	r1, r5
   3b776:	bf38      	it	cc
   3b778:	4629      	movcc	r1, r5
	dst[0] = val;
   3b77a:	7025      	strb	r5, [r4, #0]
	dst[1] = val >> 8;
   3b77c:	f3c5 2307 	ubfx	r3, r5, #8, #8
   3b780:	7063      	strb	r3, [r4, #1]
	sys_put_le16(val >> 16, &dst[2]);
   3b782:	0c2b      	lsrs	r3, r5, #16
	dst[0] = val;
   3b784:	70a3      	strb	r3, [r4, #2]
	dst[1] = val >> 8;
   3b786:	0e2d      	lsrs	r5, r5, #24
   3b788:	70e5      	strb	r5, [r4, #3]
	dst[0] = val;
   3b78a:	7127      	strb	r7, [r4, #4]
	dst[1] = val >> 8;
   3b78c:	f3c7 2307 	ubfx	r3, r7, #8, #8
   3b790:	7163      	strb	r3, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
   3b792:	0c3f      	lsrs	r7, r7, #16
	dst[0] = val;
   3b794:	71a7      	strb	r7, [r4, #6]
	dst[1] = val >> 8;
   3b796:	2300      	movs	r3, #0
   3b798:	71e3      	strb	r3, [r4, #7]
	dst[0] = val;
   3b79a:	7221      	strb	r1, [r4, #8]
	dst[1] = val >> 8;
   3b79c:	f3c1 2307 	ubfx	r3, r1, #8, #8
   3b7a0:	7263      	strb	r3, [r4, #9]
	sys_put_le16(val >> 16, &dst[2]);
   3b7a2:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   3b7a4:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   3b7a6:	0e09      	lsrs	r1, r1, #24
   3b7a8:	72e1      	strb	r1, [r4, #11]
	return rc;
   3b7aa:	e7c4      	b.n	3b736 <app_flash_si_slotinfo+0x12>

0003b7ac <app_flash_read>:
{
   3b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b7ae:	b083      	sub	sp, #12
   3b7b0:	4604      	mov	r4, r0
   3b7b2:	460d      	mov	r5, r1
   3b7b4:	4616      	mov	r6, r2
	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   3b7b6:	a901      	add	r1, sp, #4
   3b7b8:	2007      	movs	r0, #7
   3b7ba:	f7eb fb8b 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b7be:	4607      	mov	r7, r0
   3b7c0:	b110      	cbz	r0, 3b7c8 <app_flash_read+0x1c>
}
   3b7c2:	4638      	mov	r0, r7
   3b7c4:	b003      	add	sp, #12
   3b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = flash_area_read(fa, offset, p_data, length);
   3b7c8:	4633      	mov	r3, r6
   3b7ca:	462a      	mov	r2, r5
   3b7cc:	4621      	mov	r1, r4
   3b7ce:	9801      	ldr	r0, [sp, #4]
   3b7d0:	f000 fe53 	bl	3c47a <flash_area_read>
	if (rc) {
   3b7d4:	4607      	mov	r7, r0
   3b7d6:	2800      	cmp	r0, #0
   3b7d8:	d1f3      	bne.n	3b7c2 <app_flash_read+0x16>
	flash_area_close(fa);
   3b7da:	9801      	ldr	r0, [sp, #4]
   3b7dc:	f000 fe4c 	bl	3c478 <flash_area_close>
	return rc;
   3b7e0:	e7ef      	b.n	3b7c2 <app_flash_read+0x16>

0003b7e2 <app_flash_read_id>:
{
   3b7e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b7e4:	b083      	sub	sp, #12
   3b7e6:	4604      	mov	r4, r0
   3b7e8:	460d      	mov	r5, r1
   3b7ea:	4616      	mov	r6, r2
	rc = flash_area_open(FLASH_ID, &fa);
   3b7ec:	a901      	add	r1, sp, #4
   3b7ee:	4618      	mov	r0, r3
   3b7f0:	f7eb fb70 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b7f4:	4607      	mov	r7, r0
   3b7f6:	b110      	cbz	r0, 3b7fe <app_flash_read_id+0x1c>
}
   3b7f8:	4638      	mov	r0, r7
   3b7fa:	b003      	add	sp, #12
   3b7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = flash_area_read(fa, offset, p_data, length);
   3b7fe:	4633      	mov	r3, r6
   3b800:	462a      	mov	r2, r5
   3b802:	4621      	mov	r1, r4
   3b804:	9801      	ldr	r0, [sp, #4]
   3b806:	f000 fe38 	bl	3c47a <flash_area_read>
	if (rc) {
   3b80a:	4607      	mov	r7, r0
   3b80c:	2800      	cmp	r0, #0
   3b80e:	d1f3      	bne.n	3b7f8 <app_flash_read_id+0x16>
	flash_area_close(fa);
   3b810:	9801      	ldr	r0, [sp, #4]
   3b812:	f000 fe31 	bl	3c478 <flash_area_close>
	return rc;
   3b816:	e7ef      	b.n	3b7f8 <app_flash_read_id+0x16>

0003b818 <app_flash_fwnum>:

//Get Fw Num
static int app_flash_fwnum(uint8_t* minor_fw, uint8_t* major_fw)
{
   3b818:	b530      	push	{r4, r5, lr}
   3b81a:	b083      	sub	sp, #12
   3b81c:	4605      	mov	r5, r0
   3b81e:	460c      	mov	r4, r1
	int rc;
	
	uint8_t Data_bata[2];

	rc = app_flash_read_id(20,Data_bata,2,FLASH_AREA_ID(image_0));//4+4+2+2+4+4 20 21
   3b820:	2303      	movs	r3, #3
   3b822:	2202      	movs	r2, #2
   3b824:	a901      	add	r1, sp, #4
   3b826:	2014      	movs	r0, #20
   3b828:	f7ff ffdb 	bl	3b7e2 <app_flash_read_id>

	*minor_fw=Data_bata[0];
   3b82c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3b830:	702b      	strb	r3, [r5, #0]
	*major_fw=Data_bata[1];
   3b832:	f89d 3005 	ldrb.w	r3, [sp, #5]
   3b836:	7023      	strb	r3, [r4, #0]

	return rc;
}
   3b838:	b003      	add	sp, #12
   3b83a:	bd30      	pop	{r4, r5, pc}

0003b83c <app_flash_get_DevInf>:

int app_flash_get_DevInf(uint8_t* buffer,uint16_t bufferlength){
   3b83c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	
	if(bufferlength < 6){ //6 -> major minor version = 2 Byte + 4 byte for Available Space
   3b83e:	2905      	cmp	r1, #5
   3b840:	d910      	bls.n	3b864 <app_flash_get_DevInf+0x28>
   3b842:	4604      	mov	r4, r0
		return -1;
	}

	//Retrieve FW Version
	rc = app_flash_fwnum(&buffer[0],&buffer[1]);
   3b844:	1c41      	adds	r1, r0, #1
   3b846:	f7ff ffe7 	bl	3b818 <app_flash_fwnum>
   3b84a:	4605      	mov	r5, r0
	sys_put_le32(app_flash_get_availablesize(),&buffer[2]);
   3b84c:	f7e8 ffe2 	bl	24814 <app_flash_get_availablesize>
	dst[0] = val;
   3b850:	70a0      	strb	r0, [r4, #2]
	dst[1] = val >> 8;
   3b852:	f3c0 2307 	ubfx	r3, r0, #8, #8
   3b856:	70e3      	strb	r3, [r4, #3]
	sys_put_le16(val >> 16, &dst[2]);
   3b858:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   3b85a:	7123      	strb	r3, [r4, #4]
	dst[1] = val >> 8;
   3b85c:	0e03      	lsrs	r3, r0, #24
   3b85e:	7163      	strb	r3, [r4, #5]

	return rc;
}
   3b860:	4628      	mov	r0, r5
   3b862:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3b864:	f04f 35ff 	mov.w	r5, #4294967295
   3b868:	e7fa      	b.n	3b860 <app_flash_get_DevInf+0x24>

0003b86a <app_flash_write>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_write(uint32_t offset, uint8_t* p_data, uint32_t length)
{
   3b86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b86e:	b082      	sub	sp, #8
   3b870:	4605      	mov	r5, r0
   3b872:	4688      	mov	r8, r1
   3b874:	4614      	mov	r4, r2
	int rc;
	const struct flash_area* fa;
	uint8_t  p_last_word[4] = {0xFF, 0xFF, 0xFF, 0xFF};
   3b876:	f04f 33ff 	mov.w	r3, #4294967295
   3b87a:	9300      	str	r3, [sp, #0]
	uint32_t word_align_len;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   3b87c:	a901      	add	r1, sp, #4
   3b87e:	2007      	movs	r0, #7
   3b880:	f7eb fb28 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b884:	4606      	mov	r6, r0
   3b886:	bb00      	cbnz	r0, 3b8ca <app_flash_write+0x60>
		return rc;
	}

	if (length % 4 != 0) {
   3b888:	f014 0f03 	tst.w	r4, #3
   3b88c:	d021      	beq.n	3b8d2 <app_flash_write+0x68>
		word_align_len = length / 4 * 4;
   3b88e:	f024 0703 	bic.w	r7, r4, #3
	}
	else {
		word_align_len = length;
	}

	rc = flash_area_write(fa, offset, p_data, word_align_len);
   3b892:	463b      	mov	r3, r7
   3b894:	4642      	mov	r2, r8
   3b896:	4629      	mov	r1, r5
   3b898:	9801      	ldr	r0, [sp, #4]
   3b89a:	f000 fe10 	bl	3c4be <flash_area_write>
	if (rc != 0) {
   3b89e:	4606      	mov	r6, r0
   3b8a0:	b998      	cbnz	r0, 3b8ca <app_flash_write+0x60>
		return rc;
	}

	if (word_align_len < length) {
   3b8a2:	42a7      	cmp	r7, r4
   3b8a4:	d20e      	bcs.n	3b8c4 <app_flash_write+0x5a>
		memcpy(p_last_word, &p_data[word_align_len], (length - word_align_len));
   3b8a6:	2304      	movs	r3, #4
   3b8a8:	1be2      	subs	r2, r4, r7
   3b8aa:	eb08 0107 	add.w	r1, r8, r7
   3b8ae:	4668      	mov	r0, sp
   3b8b0:	f004 fb33 	bl	3ff1a <__memcpy_chk>
		rc = flash_area_write(fa, offset + word_align_len, p_last_word, 4);
   3b8b4:	2304      	movs	r3, #4
   3b8b6:	466a      	mov	r2, sp
   3b8b8:	1979      	adds	r1, r7, r5
   3b8ba:	9801      	ldr	r0, [sp, #4]
   3b8bc:	f000 fdff 	bl	3c4be <flash_area_write>
		if (rc) {
   3b8c0:	4606      	mov	r6, r0
   3b8c2:	b910      	cbnz	r0, 3b8ca <app_flash_write+0x60>
			return rc;
		}
	}

	flash_area_close(fa);
   3b8c4:	9801      	ldr	r0, [sp, #4]
   3b8c6:	f000 fdd7 	bl	3c478 <flash_area_close>

	return rc;
}
   3b8ca:	4630      	mov	r0, r6
   3b8cc:	b002      	add	sp, #8
   3b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		word_align_len = length;
   3b8d2:	4627      	mov	r7, r4
   3b8d4:	e7dd      	b.n	3b892 <app_flash_write+0x28>

0003b8d6 <app_flash_erase_page>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_erase_page(uint32_t offset, uint32_t count)
{
   3b8d6:	b570      	push	{r4, r5, r6, lr}
   3b8d8:	b082      	sub	sp, #8
   3b8da:	4605      	mov	r5, r0
   3b8dc:	460c      	mov	r4, r1
	int rc;
	const struct flash_area* fa;
	uint32_t byte_len;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   3b8de:	a901      	add	r1, sp, #4
   3b8e0:	2007      	movs	r0, #7
   3b8e2:	f7eb faf7 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b8e6:	4606      	mov	r6, r0
   3b8e8:	b110      	cbz	r0, 3b8f0 <app_flash_erase_page+0x1a>
	rc = flash_area_erase(fa, offset, byte_len);

	flash_area_close(fa);

	return rc;
}
   3b8ea:	4630      	mov	r0, r6
   3b8ec:	b002      	add	sp, #8
   3b8ee:	bd70      	pop	{r4, r5, r6, pc}
	byte_len = MIN(count * 0x1000, fa->fa_size);
   3b8f0:	9801      	ldr	r0, [sp, #4]
   3b8f2:	6882      	ldr	r2, [r0, #8]
   3b8f4:	0324      	lsls	r4, r4, #12
	rc = flash_area_erase(fa, offset, byte_len);
   3b8f6:	42a2      	cmp	r2, r4
   3b8f8:	bf28      	it	cs
   3b8fa:	4622      	movcs	r2, r4
   3b8fc:	4629      	mov	r1, r5
   3b8fe:	f000 fe0f 	bl	3c520 <flash_area_erase>
   3b902:	4606      	mov	r6, r0
	flash_area_close(fa);
   3b904:	9801      	ldr	r0, [sp, #4]
   3b906:	f000 fdb7 	bl	3c478 <flash_area_close>
	return rc;
   3b90a:	e7ee      	b.n	3b8ea <app_flash_erase_page+0x14>

0003b90c <app_flash_erase_from_end>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_erase_from_end(uint32_t count)
{
   3b90c:	b530      	push	{r4, r5, lr}
   3b90e:	b083      	sub	sp, #12
   3b910:	4604      	mov	r4, r0
	int rc;
	const struct flash_area* fa;
	uint32_t byte_len;
    uint32_t offset;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   3b912:	a901      	add	r1, sp, #4
   3b914:	2007      	movs	r0, #7
   3b916:	f7eb fadd 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b91a:	4605      	mov	r5, r0
   3b91c:	b110      	cbz	r0, 3b924 <app_flash_erase_from_end+0x18>
	rc = flash_area_erase(fa, offset, byte_len);

	flash_area_close(fa);

	return rc;
}
   3b91e:	4628      	mov	r0, r5
   3b920:	b003      	add	sp, #12
   3b922:	bd30      	pop	{r4, r5, pc}
	byte_len = MIN(count * 0x1000, fa->fa_size);
   3b924:	9801      	ldr	r0, [sp, #4]
   3b926:	6881      	ldr	r1, [r0, #8]
   3b928:	0322      	lsls	r2, r4, #12
   3b92a:	428a      	cmp	r2, r1
   3b92c:	bf28      	it	cs
   3b92e:	460a      	movcs	r2, r1
	rc = flash_area_erase(fa, offset, byte_len);
   3b930:	1a89      	subs	r1, r1, r2
   3b932:	f000 fdf5 	bl	3c520 <flash_area_erase>
   3b936:	4605      	mov	r5, r0
	flash_area_close(fa);
   3b938:	9801      	ldr	r0, [sp, #4]
   3b93a:	f000 fd9d 	bl	3c478 <flash_area_close>
	return rc;
   3b93e:	e7ee      	b.n	3b91e <app_flash_erase_from_end+0x12>

0003b940 <app_flash_crc>:
 *
 * @return 0: success
 * @return neg: error
 */
int app_flash_crc(uint32_t offset, uint32_t length, uint32_t* crc32)
{
   3b940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b944:	b082      	sub	sp, #8
   3b946:	460d      	mov	r5, r1
   3b948:	4616      	mov	r6, r2
	uint8_t *bank_addr;
	uint32_t step = 1024;
	uint32_t crc_val = 0;
	uint32_t i;

	rc = flash_area_open(APP_FLASH_BANK_ID, &fa);
   3b94a:	a901      	add	r1, sp, #4
   3b94c:	2007      	movs	r0, #7
   3b94e:	f7eb fac1 	bl	26ed4 <flash_area_open>
	if (rc) {
   3b952:	4607      	mov	r7, r0
   3b954:	b9f0      	cbnz	r0, 3b994 <app_flash_crc+0x54>
		return rc;
	}

	bank_addr = (uint8_t *)(fa->fa_off);
   3b956:	9b01      	ldr	r3, [sp, #4]
   3b958:	f8d3 8004 	ldr.w	r8, [r3, #4]

	if (length <= step) {
   3b95c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   3b960:	d902      	bls.n	3b968 <app_flash_crc+0x28>
		crc_val = crc32_ieee(bank_addr, length);
	}
	else {
		crc_val = 0;

		for (i = 0; i < length / step; i++) {
   3b962:	2400      	movs	r4, #0
		crc_val = 0;
   3b964:	4620      	mov	r0, r4
   3b966:	e00b      	b.n	3b980 <app_flash_crc+0x40>
		crc_val = crc32_ieee(bank_addr, length);
   3b968:	4629      	mov	r1, r5
   3b96a:	4640      	mov	r0, r8
   3b96c:	f000 f82d 	bl	3b9ca <crc32_ieee>
   3b970:	e00c      	b.n	3b98c <app_flash_crc+0x4c>
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, step);
   3b972:	f44f 6280 	mov.w	r2, #1024	; 0x400
   3b976:	eb08 2184 	add.w	r1, r8, r4, lsl #10
   3b97a:	f7e9 f8d7 	bl	24b2c <crc32_ieee_update>
		for (i = 0; i < length / step; i++) {
   3b97e:	3401      	adds	r4, #1
   3b980:	ebb4 2f95 	cmp.w	r4, r5, lsr #10
   3b984:	d3f5      	bcc.n	3b972 <app_flash_crc+0x32>
		}
		if (length % step != 0) {
   3b986:	f3c5 0209 	ubfx	r2, r5, #0, #10
   3b98a:	b93a      	cbnz	r2, 3b99c <app_flash_crc+0x5c>
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, length % step);
		}
	}
	*crc32 = crc_val;
   3b98c:	6030      	str	r0, [r6, #0]

	flash_area_close(fa);
   3b98e:	9801      	ldr	r0, [sp, #4]
   3b990:	f000 fd72 	bl	3c478 <flash_area_close>

	return rc;
}
   3b994:	4638      	mov	r0, r7
   3b996:	b002      	add	sp, #8
   3b998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			crc_val = crc32_ieee_update(crc_val, bank_addr + i * step, length % step);
   3b99c:	eb08 2184 	add.w	r1, r8, r4, lsl #10
   3b9a0:	f7e9 f8c4 	bl	24b2c <crc32_ieee_update>
   3b9a4:	e7f2      	b.n	3b98c <app_flash_crc+0x4c>

0003b9a6 <req_cb_flash_info>:
{
   3b9a6:	b530      	push	{r4, r5, lr}
   3b9a8:	b085      	sub	sp, #20
   3b9aa:	4614      	mov	r4, r2
    rc = app_flash_si_slotinfo(p_rsp);
   3b9ac:	a801      	add	r0, sp, #4
   3b9ae:	f7ff feb9 	bl	3b724 <app_flash_si_slotinfo>
    if (rc == 0) {
   3b9b2:	4605      	mov	r5, r0
   3b9b4:	b928      	cbnz	r0, 3b9c2 <req_cb_flash_info+0x1c>
        respond(p_rsp, rsp_len);
   3b9b6:	210c      	movs	r1, #12
   3b9b8:	a801      	add	r0, sp, #4
   3b9ba:	47a0      	blx	r4
}
   3b9bc:	4628      	mov	r0, r5
   3b9be:	b005      	add	sp, #20
   3b9c0:	bd30      	pop	{r4, r5, pc}
        respond(NULL, 0);
   3b9c2:	2100      	movs	r1, #0
   3b9c4:	4608      	mov	r0, r1
   3b9c6:	47a0      	blx	r4
    return rc;
   3b9c8:	e7f8      	b.n	3b9bc <req_cb_flash_info+0x16>

0003b9ca <crc32_ieee>:
{
   3b9ca:	b508      	push	{r3, lr}
   3b9cc:	460a      	mov	r2, r1
	return crc32_ieee_update(0x0, data, len);
   3b9ce:	4601      	mov	r1, r0
   3b9d0:	2000      	movs	r0, #0
   3b9d2:	f7e9 f8ab 	bl	24b2c <crc32_ieee_update>
}
   3b9d6:	bd08      	pop	{r3, pc}

0003b9d8 <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
   3b9d8:	b192      	cbz	r2, 3ba00 <crc16_itu_t+0x28>
		seed = (seed >> 8U) | (seed << 8U);
   3b9da:	0a03      	lsrs	r3, r0, #8
   3b9dc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   3b9e0:	b280      	uxth	r0, r0
		seed ^= *src++;
   3b9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   3b9e6:	4043      	eors	r3, r0
		seed ^= (seed & 0xffU) >> 4U;
   3b9e8:	f3c3 1003 	ubfx	r0, r3, #4, #4
   3b9ec:	4058      	eors	r0, r3
		seed ^= seed << 12U;
   3b9ee:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
   3b9f2:	b280      	uxth	r0, r0
		seed ^= (seed & 0xffU) << 5U;
   3b9f4:	0143      	lsls	r3, r0, #5
   3b9f6:	f403 53ff 	and.w	r3, r3, #8160	; 0x1fe0
   3b9fa:	4058      	eors	r0, r3
	for (; len > 0; len--) {
   3b9fc:	3a01      	subs	r2, #1
   3b9fe:	e7eb      	b.n	3b9d8 <crc16_itu_t>
	}

	return seed;
}
   3ba00:	4770      	bx	lr

0003ba02 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   3ba02:	b40c      	push	{r2, r3}
   3ba04:	b500      	push	{lr}
   3ba06:	b083      	sub	sp, #12
   3ba08:	4603      	mov	r3, r0
   3ba0a:	4608      	mov	r0, r1
   3ba0c:	aa04      	add	r2, sp, #16
   3ba0e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
   3ba12:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3ba14:	68db      	ldr	r3, [r3, #12]
   3ba16:	4798      	blx	r3
	va_end(args);

	return res;
}
   3ba18:	b003      	add	sp, #12
   3ba1a:	f85d eb04 	ldr.w	lr, [sp], #4
   3ba1e:	b002      	add	sp, #8
   3ba20:	4770      	bx	lr

0003ba22 <z_free_fd>:

void z_free_fd(int fd)
{
   3ba22:	b508      	push	{r3, lr}
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
   3ba24:	f7e9 f8d4 	bl	24bd0 <z_fd_unref>
}
   3ba28:	bd08      	pop	{r3, pc}

0003ba2a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   3ba2a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   3ba2e:	b2db      	uxtb	r3, r3
   3ba30:	2b09      	cmp	r3, #9
   3ba32:	d802      	bhi.n	3ba3a <char2hex+0x10>
		*x = c - '0';
   3ba34:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   3ba36:	2000      	movs	r0, #0
   3ba38:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   3ba3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   3ba3e:	b2db      	uxtb	r3, r3
   3ba40:	2b05      	cmp	r3, #5
   3ba42:	d803      	bhi.n	3ba4c <char2hex+0x22>
		*x = c - 'a' + 10;
   3ba44:	3857      	subs	r0, #87	; 0x57
   3ba46:	7008      	strb	r0, [r1, #0]
	return 0;
   3ba48:	2000      	movs	r0, #0
   3ba4a:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   3ba4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   3ba50:	b2db      	uxtb	r3, r3
   3ba52:	2b05      	cmp	r3, #5
   3ba54:	d803      	bhi.n	3ba5e <char2hex+0x34>
		*x = c - 'A' + 10;
   3ba56:	3837      	subs	r0, #55	; 0x37
   3ba58:	7008      	strb	r0, [r1, #0]
	return 0;
   3ba5a:	2000      	movs	r0, #0
   3ba5c:	4770      	bx	lr
		return -EINVAL;
   3ba5e:	f06f 0015 	mvn.w	r0, #21
}
   3ba62:	4770      	bx	lr

0003ba64 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   3ba64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3ba68:	b083      	sub	sp, #12
   3ba6a:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   3ba6c:	f001 0201 	and.w	r2, r1, #1
   3ba70:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   3ba74:	4598      	cmp	r8, r3
   3ba76:	d832      	bhi.n	3bade <hex2bin+0x7a>
   3ba78:	4607      	mov	r7, r0
   3ba7a:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   3ba7e:	b90a      	cbnz	r2, 3ba84 <hex2bin+0x20>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   3ba80:	2400      	movs	r4, #0
   3ba82:	e012      	b.n	3baaa <hex2bin+0x46>
		if (char2hex(hex[0], &dec) < 0) {
   3ba84:	f10d 0107 	add.w	r1, sp, #7
   3ba88:	7800      	ldrb	r0, [r0, #0]
   3ba8a:	f7ff ffce 	bl	3ba2a <char2hex>
   3ba8e:	2800      	cmp	r0, #0
   3ba90:	db2b      	blt.n	3baea <hex2bin+0x86>
		buf[0] = dec;
   3ba92:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3ba96:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   3ba9a:	3701      	adds	r7, #1
		buf++;
   3ba9c:	e7f0      	b.n	3ba80 <hex2bin+0x1c>
		buf[i] = dec << 4;

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
			return 0;
		}
		buf[i] += dec;
   3ba9e:	5d33      	ldrb	r3, [r6, r4]
   3baa0:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3baa4:	4413      	add	r3, r2
   3baa6:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   3baa8:	3401      	adds	r4, #1
   3baaa:	45a1      	cmp	r9, r4
   3baac:	d919      	bls.n	3bae2 <hex2bin+0x7e>
		if (char2hex(hex[2 * i], &dec) < 0) {
   3baae:	0065      	lsls	r5, r4, #1
   3bab0:	f10d 0107 	add.w	r1, sp, #7
   3bab4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   3bab8:	f7ff ffb7 	bl	3ba2a <char2hex>
   3babc:	2800      	cmp	r0, #0
   3babe:	db17      	blt.n	3baf0 <hex2bin+0x8c>
		buf[i] = dec << 4;
   3bac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3bac4:	011b      	lsls	r3, r3, #4
   3bac6:	5533      	strb	r3, [r6, r4]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   3bac8:	3501      	adds	r5, #1
   3baca:	f10d 0107 	add.w	r1, sp, #7
   3bace:	5d78      	ldrb	r0, [r7, r5]
   3bad0:	f7ff ffab 	bl	3ba2a <char2hex>
   3bad4:	2800      	cmp	r0, #0
   3bad6:	dae2      	bge.n	3ba9e <hex2bin+0x3a>
			return 0;
   3bad8:	f04f 0800 	mov.w	r8, #0
   3badc:	e001      	b.n	3bae2 <hex2bin+0x7e>
		return 0;
   3bade:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   3bae2:	4640      	mov	r0, r8
   3bae4:	b003      	add	sp, #12
   3bae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   3baea:	f04f 0800 	mov.w	r8, #0
   3baee:	e7f8      	b.n	3bae2 <hex2bin+0x7e>
			return 0;
   3baf0:	f04f 0800 	mov.w	r8, #0
   3baf4:	e7f5      	b.n	3bae2 <hex2bin+0x7e>

0003baf6 <sys_notify_validate>:
	if (notify == NULL) {
   3baf6:	4602      	mov	r2, r0
   3baf8:	b1b0      	cbz	r0, 3bb28 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3bafa:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3bafc:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3bb00:	2b02      	cmp	r3, #2
   3bb02:	d00b      	beq.n	3bb1c <sys_notify_validate+0x26>
   3bb04:	2b03      	cmp	r3, #3
   3bb06:	d004      	beq.n	3bb12 <sys_notify_validate+0x1c>
   3bb08:	2b01      	cmp	r3, #1
   3bb0a:	d004      	beq.n	3bb16 <sys_notify_validate+0x20>
   3bb0c:	f06f 0015 	mvn.w	r0, #21
   3bb10:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   3bb12:	6803      	ldr	r3, [r0, #0]
   3bb14:	b15b      	cbz	r3, 3bb2e <sys_notify_validate+0x38>
		notify->result = 0;
   3bb16:	2000      	movs	r0, #0
   3bb18:	6090      	str	r0, [r2, #8]
   3bb1a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   3bb1c:	6803      	ldr	r3, [r0, #0]
   3bb1e:	2b00      	cmp	r3, #0
   3bb20:	d1f9      	bne.n	3bb16 <sys_notify_validate+0x20>
			rv = -EINVAL;
   3bb22:	f06f 0015 	mvn.w	r0, #21
}
   3bb26:	4770      	bx	lr
		return -EINVAL;
   3bb28:	f06f 0015 	mvn.w	r0, #21
   3bb2c:	4770      	bx	lr
			rv = -EINVAL;
   3bb2e:	f06f 0015 	mvn.w	r0, #21
   3bb32:	4770      	bx	lr

0003bb34 <arch_printk_char_out>:
}
   3bb34:	2000      	movs	r0, #0
   3bb36:	4770      	bx	lr

0003bb38 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
   3bb38:	b40f      	push	{r0, r1, r2, r3}
   3bb3a:	b500      	push	{lr}
   3bb3c:	b083      	sub	sp, #12
   3bb3e:	a904      	add	r1, sp, #16
   3bb40:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   3bb44:	9101      	str	r1, [sp, #4]
	z_log_printk(fmt, ap);
   3bb46:	f000 fa77 	bl	3c038 <z_log_printk>
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
	}
	va_end(ap);
}
   3bb4a:	b003      	add	sp, #12
   3bb4c:	f85d eb04 	ldr.w	lr, [sp], #4
   3bb50:	b004      	add	sp, #16
   3bb52:	4770      	bx	lr

0003bb54 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   3bb54:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   3bb58:	8b81      	ldrh	r1, [r0, #28]
   3bb5a:	f021 0107 	bic.w	r1, r1, #7
   3bb5e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   3bb60:	8381      	strh	r1, [r0, #28]
}
   3bb62:	4770      	bx	lr

0003bb64 <notify_monitors>:
{
   3bb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bb68:	4606      	mov	r6, r0
   3bb6a:	460f      	mov	r7, r1
   3bb6c:	4690      	mov	r8, r2
	return list->head;
   3bb6e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   3bb70:	b119      	cbz	r1, 3bb7a <notify_monitors+0x16>
   3bb72:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   3bb74:	b131      	cbz	r1, 3bb84 <notify_monitors+0x20>
	return node->next;
   3bb76:	680c      	ldr	r4, [r1, #0]
   3bb78:	e004      	b.n	3bb84 <notify_monitors+0x20>
   3bb7a:	460c      	mov	r4, r1
   3bb7c:	e002      	b.n	3bb84 <notify_monitors+0x20>
   3bb7e:	4623      	mov	r3, r4
   3bb80:	4621      	mov	r1, r4
   3bb82:	461c      	mov	r4, r3
   3bb84:	b159      	cbz	r1, 3bb9e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   3bb86:	684d      	ldr	r5, [r1, #4]
   3bb88:	4643      	mov	r3, r8
   3bb8a:	463a      	mov	r2, r7
   3bb8c:	4630      	mov	r0, r6
   3bb8e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   3bb90:	2c00      	cmp	r4, #0
   3bb92:	d0f4      	beq.n	3bb7e <notify_monitors+0x1a>
   3bb94:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   3bb96:	2c00      	cmp	r4, #0
   3bb98:	d0f2      	beq.n	3bb80 <notify_monitors+0x1c>
	return node->next;
   3bb9a:	6823      	ldr	r3, [r4, #0]
   3bb9c:	e7f0      	b.n	3bb80 <notify_monitors+0x1c>
}
   3bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003bba2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3bba2:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3bba4:	f013 0307 	ands.w	r3, r3, #7
   3bba8:	d103      	bne.n	3bbb2 <process_recheck+0x10>
	return list->head;
   3bbaa:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   3bbac:	b10a      	cbz	r2, 3bbb2 <process_recheck+0x10>
		evt = EVT_START;
   3bbae:	2003      	movs	r0, #3
   3bbb0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3bbb2:	2b02      	cmp	r3, #2
   3bbb4:	d003      	beq.n	3bbbe <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   3bbb6:	2b01      	cmp	r3, #1
   3bbb8:	d006      	beq.n	3bbc8 <process_recheck+0x26>
	int evt = EVT_NOP;
   3bbba:	2000      	movs	r0, #0
   3bbbc:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   3bbbe:	8bc2      	ldrh	r2, [r0, #30]
   3bbc0:	2a00      	cmp	r2, #0
   3bbc2:	d1f8      	bne.n	3bbb6 <process_recheck+0x14>
		evt = EVT_STOP;
   3bbc4:	2004      	movs	r0, #4
   3bbc6:	4770      	bx	lr
   3bbc8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   3bbca:	b10b      	cbz	r3, 3bbd0 <process_recheck+0x2e>
		evt = EVT_RESET;
   3bbcc:	2005      	movs	r0, #5
}
   3bbce:	4770      	bx	lr
	int evt = EVT_NOP;
   3bbd0:	2000      	movs	r0, #0
   3bbd2:	4770      	bx	lr

0003bbd4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   3bbd4:	b158      	cbz	r0, 3bbee <validate_args+0x1a>
{
   3bbd6:	b510      	push	{r4, lr}
   3bbd8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3bbda:	b159      	cbz	r1, 3bbf4 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   3bbdc:	1d08      	adds	r0, r1, #4
   3bbde:	f7ff ff8a 	bl	3baf6 <sys_notify_validate>
	if ((rv == 0)
   3bbe2:	b918      	cbnz	r0, 3bbec <validate_args+0x18>
	    && ((cli->notify.flags
   3bbe4:	68a3      	ldr	r3, [r4, #8]
   3bbe6:	f033 0303 	bics.w	r3, r3, #3
   3bbea:	d106      	bne.n	3bbfa <validate_args+0x26>
}
   3bbec:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3bbee:	f06f 0015 	mvn.w	r0, #21
}
   3bbf2:	4770      	bx	lr
		return -EINVAL;
   3bbf4:	f06f 0015 	mvn.w	r0, #21
   3bbf8:	e7f8      	b.n	3bbec <validate_args+0x18>
		rv = -EINVAL;
   3bbfa:	f06f 0015 	mvn.w	r0, #21
   3bbfe:	e7f5      	b.n	3bbec <validate_args+0x18>

0003bc00 <notify_one>:
{
   3bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bc04:	4607      	mov	r7, r0
   3bc06:	460c      	mov	r4, r1
   3bc08:	4616      	mov	r6, r2
   3bc0a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3bc0c:	4619      	mov	r1, r3
   3bc0e:	1d20      	adds	r0, r4, #4
   3bc10:	f7e9 f88c 	bl	24d2c <sys_notify_finalize>
	if (cb) {
   3bc14:	b128      	cbz	r0, 3bc22 <notify_one+0x22>
   3bc16:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   3bc18:	462b      	mov	r3, r5
   3bc1a:	4632      	mov	r2, r6
   3bc1c:	4621      	mov	r1, r4
   3bc1e:	4638      	mov	r0, r7
   3bc20:	47c0      	blx	r8
}
   3bc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003bc26 <notify_all>:
{
   3bc26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3bc2a:	4681      	mov	r9, r0
   3bc2c:	460c      	mov	r4, r1
   3bc2e:	4690      	mov	r8, r2
   3bc30:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   3bc32:	e005      	b.n	3bc40 <notify_all+0x1a>
	list->tail = node;
   3bc34:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   3bc36:	463b      	mov	r3, r7
   3bc38:	4642      	mov	r2, r8
   3bc3a:	4648      	mov	r0, r9
   3bc3c:	f7ff ffe0 	bl	3bc00 <notify_one>
	return list->head;
   3bc40:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   3bc42:	b129      	cbz	r1, 3bc50 <notify_all+0x2a>
	return node->next;
   3bc44:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   3bc46:	6025      	str	r5, [r4, #0]
	return list->tail;
   3bc48:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3bc4a:	428e      	cmp	r6, r1
   3bc4c:	d1f3      	bne.n	3bc36 <notify_all+0x10>
   3bc4e:	e7f1      	b.n	3bc34 <notify_all+0xe>
}
   3bc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003bc54 <onoff_manager_init>:
	if ((mgr == NULL)
   3bc54:	b170      	cbz	r0, 3bc74 <onoff_manager_init+0x20>
{
   3bc56:	b538      	push	{r3, r4, r5, lr}
   3bc58:	460c      	mov	r4, r1
   3bc5a:	4605      	mov	r5, r0
	    || (transitions == NULL)
   3bc5c:	b169      	cbz	r1, 3bc7a <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   3bc5e:	680b      	ldr	r3, [r1, #0]
   3bc60:	b173      	cbz	r3, 3bc80 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   3bc62:	684b      	ldr	r3, [r1, #4]
   3bc64:	b17b      	cbz	r3, 3bc86 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3bc66:	2220      	movs	r2, #32
   3bc68:	2100      	movs	r1, #0
   3bc6a:	f004 f969 	bl	3ff40 <memset>
   3bc6e:	612c      	str	r4, [r5, #16]
	return 0;
   3bc70:	2000      	movs	r0, #0
}
   3bc72:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3bc74:	f06f 0015 	mvn.w	r0, #21
}
   3bc78:	4770      	bx	lr
		return -EINVAL;
   3bc7a:	f06f 0015 	mvn.w	r0, #21
   3bc7e:	e7f8      	b.n	3bc72 <onoff_manager_init+0x1e>
   3bc80:	f06f 0015 	mvn.w	r0, #21
   3bc84:	e7f5      	b.n	3bc72 <onoff_manager_init+0x1e>
   3bc86:	f06f 0015 	mvn.w	r0, #21
   3bc8a:	e7f2      	b.n	3bc72 <onoff_manager_init+0x1e>

0003bc8c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3bc8c:	b508      	push	{r3, lr}
   3bc8e:	4604      	mov	r4, r0
   3bc90:	4608      	mov	r0, r1
   3bc92:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   3bc94:	461a      	mov	r2, r3
   3bc96:	47a0      	blx	r4
	return z_impl_z_current_get();
   3bc98:	f7fc fa6a 	bl	38170 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   3bc9c:	f7ec fbb2 	bl	28404 <z_impl_k_thread_abort>

0003bca0 <timeutil_timegm64>:

int64_t timeutil_timegm64(const struct tm *tm)
{
   3bca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bca4:	4682      	mov	sl, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   3bca6:	6902      	ldr	r2, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   3bca8:	68c3      	ldr	r3, [r0, #12]
	int64_t ndays = time_days_from_civil(y, m, d);
   3bcaa:	3b01      	subs	r3, #1
   3bcac:	3201      	adds	r2, #1
   3bcae:	f240 706c 	movw	r0, #1900	; 0x76c
   3bcb2:	2100      	movs	r1, #0
   3bcb4:	4689      	mov	r9, r1
   3bcb6:	f8da 1014 	ldr.w	r1, [sl, #20]
   3bcba:	eb10 0801 	adds.w	r8, r0, r1
   3bcbe:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
   3bcc2:	4640      	mov	r0, r8
   3bcc4:	4649      	mov	r1, r9
   3bcc6:	f7e9 fb5d 	bl	25384 <time_days_from_civil>
	int64_t time = tm->tm_sec;
   3bcca:	f8da c000 	ldr.w	ip, [sl]

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   3bcce:	f8da e004 	ldr.w	lr, [sl, #4]
   3bcd2:	f8da 9008 	ldr.w	r9, [sl, #8]
   3bcd6:	464a      	mov	r2, r9
   3bcd8:	17d3      	asrs	r3, r2, #31
   3bcda:	ea4f 1b03 	mov.w	fp, r3, lsl #4
   3bcde:	ea4f 1809 	mov.w	r8, r9, lsl #4
   3bce2:	ea4b 7a19 	orr.w	sl, fp, r9, lsr #28
   3bce6:	ebb8 0409 	subs.w	r4, r8, r9
   3bcea:	eb6a 0503 	sbc.w	r5, sl, r3
   3bcee:	00ab      	lsls	r3, r5, #2
   3bcf0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
   3bcf4:	00a2      	lsls	r2, r4, #2
   3bcf6:	eb12 040e 	adds.w	r4, r2, lr
   3bcfa:	eb43 75ee 	adc.w	r5, r3, lr, asr #31
   3bcfe:	ea4f 1e05 	mov.w	lr, r5, lsl #4
   3bd02:	0123      	lsls	r3, r4, #4
   3bd04:	ea4e 7214 	orr.w	r2, lr, r4, lsr #28
   3bd08:	1b1e      	subs	r6, r3, r4
   3bd0a:	eb62 0705 	sbc.w	r7, r2, r5
   3bd0e:	00bb      	lsls	r3, r7, #2
   3bd10:	ea43 7396 	orr.w	r3, r3, r6, lsr #30
   3bd14:	00b2      	lsls	r2, r6, #2
   3bd16:	eb12 060c 	adds.w	r6, r2, ip
   3bd1a:	eb43 77ec 	adc.w	r7, r3, ip, asr #31
	time += 86400LL * ndays;
   3bd1e:	1803      	adds	r3, r0, r0
   3bd20:	eb41 0201 	adc.w	r2, r1, r1
   3bd24:	181b      	adds	r3, r3, r0
   3bd26:	eb42 0101 	adc.w	r1, r2, r1
   3bd2a:	010a      	lsls	r2, r1, #4
   3bd2c:	ea42 7213 	orr.w	r2, r2, r3, lsr #28
   3bd30:	0118      	lsls	r0, r3, #4
   3bd32:	1ac3      	subs	r3, r0, r3
   3bd34:	eb62 0201 	sbc.w	r2, r2, r1
   3bd38:	0111      	lsls	r1, r2, #4
   3bd3a:	ea41 7113 	orr.w	r1, r1, r3, lsr #28
   3bd3e:	0118      	lsls	r0, r3, #4
   3bd40:	1ac0      	subs	r0, r0, r3
   3bd42:	eb61 0102 	sbc.w	r1, r1, r2
   3bd46:	01cb      	lsls	r3, r1, #7
   3bd48:	ea43 6350 	orr.w	r3, r3, r0, lsr #25
   3bd4c:	01c2      	lsls	r2, r0, #7
   3bd4e:	4619      	mov	r1, r3

	return time;
}
   3bd50:	1990      	adds	r0, r2, r6
   3bd52:	eb47 0101 	adc.w	r1, r7, r1
   3bd56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003bd5a <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3bd5a:	00c9      	lsls	r1, r1, #3
   3bd5c:	3104      	adds	r1, #4
}
   3bd5e:	4408      	add	r0, r1
   3bd60:	4770      	bx	lr

0003bd62 <free_list_remove_bidx>:
		return ((uint16_t *)cmem)[f];
   3bd62:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   3bd66:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   3bd68:	4299      	cmp	r1, r3
   3bd6a:	d00e      	beq.n	3bd8a <free_list_remove_bidx+0x28>
{
   3bd6c:	b410      	push	{r4}
   3bd6e:	00cc      	lsls	r4, r1, #3
   3bd70:	4404      	add	r4, r0
   3bd72:	88a1      	ldrh	r1, [r4, #4]
		b->next = second;
   3bd74:	3204      	adds	r2, #4
   3bd76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   3bd7a:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   3bd7c:	3206      	adds	r2, #6
   3bd7e:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   3bd80:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   3bd82:	3304      	adds	r3, #4
   3bd84:	52c1      	strh	r1, [r0, r3]
}
   3bd86:	bc10      	pop	{r4}
   3bd88:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   3bd8a:	2301      	movs	r3, #1
   3bd8c:	fa03 f102 	lsl.w	r1, r3, r2
   3bd90:	68c3      	ldr	r3, [r0, #12]
   3bd92:	ea23 0301 	bic.w	r3, r3, r1
   3bd96:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   3bd98:	3204      	adds	r2, #4
   3bd9a:	2300      	movs	r3, #0
   3bd9c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   3bda0:	4770      	bx	lr

0003bda2 <free_list_add_bidx>:
{
   3bda2:	b470      	push	{r4, r5, r6}
	if (b->next == 0U) {
   3bda4:	1d13      	adds	r3, r2, #4
   3bda6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   3bdaa:	b984      	cbnz	r4, 3bdce <free_list_add_bidx+0x2c>
		h->avail_buckets |= BIT(bidx);
   3bdac:	2301      	movs	r3, #1
   3bdae:	fa03 f402 	lsl.w	r4, r3, r2
   3bdb2:	68c3      	ldr	r3, [r0, #12]
   3bdb4:	4323      	orrs	r3, r4
   3bdb6:	60c3      	str	r3, [r0, #12]
		b->next = c;
   3bdb8:	3204      	adds	r2, #4
   3bdba:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   3bdbe:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   3bdc0:	1d1a      	adds	r2, r3, #4
   3bdc2:	b289      	uxth	r1, r1
   3bdc4:	5281      	strh	r1, [r0, r2]
   3bdc6:	3306      	adds	r3, #6
   3bdc8:	52c1      	strh	r1, [r0, r3]
}
   3bdca:	bc70      	pop	{r4, r5, r6}
   3bdcc:	4770      	bx	lr
	void *cmem = &buf[c];
   3bdce:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   3bdd0:	3204      	adds	r2, #4
   3bdd2:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   3bdd4:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   3bdd6:	1d2e      	adds	r6, r5, #4
   3bdd8:	5383      	strh	r3, [r0, r6]
   3bdda:	3506      	adds	r5, #6
   3bddc:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   3bdde:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   3bde0:	3306      	adds	r3, #6
   3bde2:	b289      	uxth	r1, r1
   3bde4:	52c1      	strh	r1, [r0, r3]
   3bde6:	5281      	strh	r1, [r0, r2]
   3bde8:	e7ef      	b.n	3bdca <free_list_add_bidx+0x28>

0003bdea <split_chunks>:
{
   3bdea:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   3bdec:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   3bdee:	3302      	adds	r3, #2
   3bdf0:	5ac4      	ldrh	r4, [r0, r3]
	chunksz_t lsz = rc - lc;
   3bdf2:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   3bdf4:	1a89      	subs	r1, r1, r2
   3bdf6:	eb01 0154 	add.w	r1, r1, r4, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3bdfa:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   3bdfc:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3bdfe:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   3be00:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   3be02:	3402      	adds	r4, #2
   3be04:	5303      	strh	r3, [r0, r4]
   3be06:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3be0a:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c + chunk_size(h, c);
   3be0e:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   3be10:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   3be14:	bc30      	pop	{r4, r5}
   3be16:	4770      	bx	lr

0003be18 <merge_chunks>:
{
   3be18:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   3be1a:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   3be1c:	3102      	adds	r1, #2
   3be1e:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   3be20:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   3be22:	3402      	adds	r4, #2
   3be24:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3be26:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3be28:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3be2c:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   3be2e:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   3be30:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   3be32:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   3be36:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   3be3a:	bc30      	pop	{r4, r5}
   3be3c:	4770      	bx	lr

0003be3e <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   3be3e:	3904      	subs	r1, #4
   3be40:	1a08      	subs	r0, r1, r0
}
   3be42:	08c0      	lsrs	r0, r0, #3
   3be44:	4770      	bx	lr

0003be46 <free_list_remove>:
{
   3be46:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   3be48:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   3be4c:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3be4e:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   3be50:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   3be54:	f1c2 021f 	rsb	r2, r2, #31
   3be58:	f7ff ff83 	bl	3bd62 <free_list_remove_bidx>
}
   3be5c:	bd08      	pop	{r3, pc}

0003be5e <free_list_add>:
{
   3be5e:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   3be60:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   3be64:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3be66:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   3be68:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   3be6c:	f1c2 021f 	rsb	r2, r2, #31
   3be70:	f7ff ff97 	bl	3bda2 <free_list_add_bidx>
}
   3be74:	bd08      	pop	{r3, pc}

0003be76 <free_chunk>:
{
   3be76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3be78:	4604      	mov	r4, r0
   3be7a:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   3be7c:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   3be7e:	1cb7      	adds	r7, r6, #2
   3be80:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   3be82:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   3be86:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   3be8a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   3be8c:	f013 0f01 	tst.w	r3, #1
   3be90:	d00c      	beq.n	3beac <free_chunk+0x36>
   3be92:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   3be94:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   3be96:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   3be9a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   3be9c:	f013 0f01 	tst.w	r3, #1
   3bea0:	d00e      	beq.n	3bec0 <free_chunk+0x4a>
	free_list_add(h, c);
   3bea2:	4629      	mov	r1, r5
   3bea4:	4620      	mov	r0, r4
   3bea6:	f7ff ffda 	bl	3be5e <free_list_add>
}
   3beaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   3beac:	f7ff ffcb 	bl	3be46 <free_list_remove>
   3beb0:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   3beb2:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   3beb6:	4629      	mov	r1, r5
   3beb8:	4620      	mov	r0, r4
   3beba:	f7ff ffad 	bl	3be18 <merge_chunks>
   3bebe:	e7e8      	b.n	3be92 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   3bec0:	4620      	mov	r0, r4
   3bec2:	f7ff ffc0 	bl	3be46 <free_list_remove>
   3bec6:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   3bec8:	462a      	mov	r2, r5
   3beca:	1a69      	subs	r1, r5, r1
   3becc:	4620      	mov	r0, r4
   3bece:	f7ff ffa3 	bl	3be18 <merge_chunks>
   3bed2:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   3bed4:	1aed      	subs	r5, r5, r3
   3bed6:	e7e4      	b.n	3bea2 <free_chunk+0x2c>

0003bed8 <alloc_chunk>:
{
   3bed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   3beda:	fab1 f381 	clz	r3, r1
	if (b->next) {
   3bede:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   3bee2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   3bee6:	b1b7      	cbz	r7, 3bf16 <alloc_chunk+0x3e>
   3bee8:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   3beec:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   3beee:	1d14      	adds	r4, r2, #4
   3bef0:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   3bef4:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   3bef6:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   3befa:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   3befe:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   3bf02:	d912      	bls.n	3bf2a <alloc_chunk+0x52>
   3bf04:	4405      	add	r5, r0
   3bf06:	88ec      	ldrh	r4, [r5, #6]
			b->next = next_free_chunk(h, c);
   3bf08:	1d15      	adds	r5, r2, #4
   3bf0a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
		} while (--i && b->next != first);
   3bf0e:	3e01      	subs	r6, #1
   3bf10:	d001      	beq.n	3bf16 <alloc_chunk+0x3e>
   3bf12:	42a7      	cmp	r7, r4
   3bf14:	d1eb      	bne.n	3beee <alloc_chunk+0x16>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   3bf16:	68c4      	ldr	r4, [r0, #12]
   3bf18:	f1c3 0220 	rsb	r2, r3, #32
   3bf1c:	2301      	movs	r3, #1
   3bf1e:	4093      	lsls	r3, r2
   3bf20:	425b      	negs	r3, r3
	if (bmask != 0U) {
   3bf22:	401c      	ands	r4, r3
   3bf24:	d105      	bne.n	3bf32 <alloc_chunk+0x5a>
}
   3bf26:	4620      	mov	r0, r4
   3bf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   3bf2a:	4621      	mov	r1, r4
   3bf2c:	f7ff ff19 	bl	3bd62 <free_list_remove_bidx>
				return c;
   3bf30:	e7f9      	b.n	3bf26 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   3bf32:	fa94 f2a4 	rbit	r2, r4
   3bf36:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3bf3a:	1d13      	adds	r3, r2, #4
   3bf3c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   3bf40:	4621      	mov	r1, r4
   3bf42:	f7ff ff0e 	bl	3bd62 <free_list_remove_bidx>
		return c;
   3bf46:	e7ee      	b.n	3bf26 <alloc_chunk+0x4e>

0003bf48 <sys_heap_alloc>:
{
   3bf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   3bf4a:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3bf4c:	b341      	cbz	r1, 3bfa0 <sys_heap_alloc+0x58>
   3bf4e:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   3bf50:	68aa      	ldr	r2, [r5, #8]
   3bf52:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   3bf56:	d925      	bls.n	3bfa4 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3bf58:	330b      	adds	r3, #11
   3bf5a:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3bf5c:	4621      	mov	r1, r4
   3bf5e:	4628      	mov	r0, r5
   3bf60:	f7ff ffba 	bl	3bed8 <alloc_chunk>
	if (c == 0U) {
   3bf64:	4607      	mov	r7, r0
   3bf66:	b1f8      	cbz	r0, 3bfa8 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   3bf68:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   3bf6a:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   3bf6e:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   3bf70:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   3bf74:	d309      	bcc.n	3bf8a <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   3bf76:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3bf78:	885a      	ldrh	r2, [r3, #2]
   3bf7a:	f042 0201 	orr.w	r2, r2, #1
   3bf7e:	805a      	strh	r2, [r3, #2]
	return chunk_mem(h, c);
   3bf80:	4639      	mov	r1, r7
   3bf82:	4628      	mov	r0, r5
   3bf84:	f7ff fee9 	bl	3bd5a <chunk_mem>
}
   3bf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   3bf8a:	4404      	add	r4, r0
   3bf8c:	4622      	mov	r2, r4
   3bf8e:	4601      	mov	r1, r0
   3bf90:	4628      	mov	r0, r5
   3bf92:	f7ff ff2a 	bl	3bdea <split_chunks>
		free_list_add(h, c + chunk_sz);
   3bf96:	4621      	mov	r1, r4
   3bf98:	4628      	mov	r0, r5
   3bf9a:	f7ff ff60 	bl	3be5e <free_list_add>
   3bf9e:	e7ea      	b.n	3bf76 <sys_heap_alloc+0x2e>
		return NULL;
   3bfa0:	2000      	movs	r0, #0
   3bfa2:	e7f1      	b.n	3bf88 <sys_heap_alloc+0x40>
   3bfa4:	2000      	movs	r0, #0
   3bfa6:	e7ef      	b.n	3bf88 <sys_heap_alloc+0x40>
		return NULL;
   3bfa8:	2000      	movs	r0, #0
   3bfaa:	e7ed      	b.n	3bf88 <sys_heap_alloc+0x40>

0003bfac <outs>:
{
   3bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bfb0:	4607      	mov	r7, r0
   3bfb2:	460e      	mov	r6, r1
   3bfb4:	4614      	mov	r4, r2
   3bfb6:	4698      	mov	r8, r3
	size_t count = 0;
   3bfb8:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3bfba:	e006      	b.n	3bfca <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   3bfbc:	4631      	mov	r1, r6
   3bfbe:	f814 0b01 	ldrb.w	r0, [r4], #1
   3bfc2:	47b8      	blx	r7
		if (rc < 0) {
   3bfc4:	2800      	cmp	r0, #0
   3bfc6:	db09      	blt.n	3bfdc <outs+0x30>
		++count;
   3bfc8:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3bfca:	4544      	cmp	r4, r8
   3bfcc:	d3f6      	bcc.n	3bfbc <outs+0x10>
   3bfce:	f1b8 0f00 	cmp.w	r8, #0
   3bfd2:	d102      	bne.n	3bfda <outs+0x2e>
   3bfd4:	7823      	ldrb	r3, [r4, #0]
   3bfd6:	2b00      	cmp	r3, #0
   3bfd8:	d1f0      	bne.n	3bfbc <outs+0x10>
	return (int)count;
   3bfda:	4628      	mov	r0, r5
}
   3bfdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003bfe0 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3bfe0:	4040      	eors	r0, r0
   3bfe2:	f380 8811 	msr	BASEPRI, r0
   3bfe6:	f04f 0004 	mov.w	r0, #4
   3bfea:	df02      	svc	2
}
   3bfec:	4770      	bx	lr

0003bfee <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_MCUBOOT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   3bfee:	4770      	bx	lr

0003bff0 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   3bff0:	b084      	sub	sp, #16
   3bff2:	ab04      	add	r3, sp, #16
   3bff4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   3bff8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3bffc:	2b06      	cmp	r3, #6
   3bffe:	d001      	beq.n	3c004 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   3c000:	b004      	add	sp, #16
   3c002:	4770      	bx	lr
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   3c004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   3c008:	2201      	movs	r2, #1
   3c00a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   3c00e:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   3c012:	bf20      	wfe
    while (true)
   3c014:	e7fd      	b.n	3c012 <pm_power_state_set+0x22>

0003c016 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   3c016:	b084      	sub	sp, #16
   3c018:	ab04      	add	r3, sp, #16
   3c01a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   3c01e:	2300      	movs	r3, #0
   3c020:	f383 8811 	msr	BASEPRI, r3
   3c024:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   3c028:	b004      	add	sp, #16
   3c02a:	4770      	bx	lr

0003c02c <dummy_timestamp>:
}
   3c02c:	2000      	movs	r0, #0
   3c02e:	4770      	bx	lr

0003c030 <default_get_timestamp>:
{
   3c030:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   3c032:	f001 fca2 	bl	3d97a <sys_clock_cycle_get_32>
}
   3c036:	bd08      	pop	{r3, pc}

0003c038 <z_log_printk>:
{
   3c038:	b508      	push	{r3, lr}
   3c03a:	460a      	mov	r2, r1
		} src_level_union = {
   3c03c:	2300      	movs	r3, #0
			log_generic(src_level_union.structure, fmt, ap,
   3c03e:	4601      	mov	r1, r0
   3c040:	4618      	mov	r0, r3
   3c042:	f7ea f90b 	bl	2625c <log_generic>
}
   3c046:	bd08      	pop	{r3, pc}

0003c048 <log_string_sync>:
{
   3c048:	b40e      	push	{r1, r2, r3}
   3c04a:	b500      	push	{lr}
   3c04c:	b082      	sub	sp, #8
   3c04e:	aa03      	add	r2, sp, #12
   3c050:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   3c054:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   3c056:	2300      	movs	r3, #0
   3c058:	f7ea f900 	bl	2625c <log_generic>
}
   3c05c:	b002      	add	sp, #8
   3c05e:	f85d eb04 	ldr.w	lr, [sp], #4
   3c062:	b003      	add	sp, #12
   3c064:	4770      	bx	lr

0003c066 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   3c066:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   3c068:	f7ea f9a0 	bl	263ac <log_init>
	}

	return 0;
}
   3c06c:	2000      	movs	r0, #0
   3c06e:	bd08      	pop	{r3, pc}

0003c070 <z_log_strdup>:
}
   3c070:	4770      	bx	lr

0003c072 <z_log_get_tag>:
}
   3c072:	2000      	movs	r0, #0
   3c074:	4770      	bx	lr

0003c076 <out_func>:
{
   3c076:	b500      	push	{lr}
   3c078:	b083      	sub	sp, #12
   3c07a:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   3c07c:	680b      	ldr	r3, [r1, #0]
   3c07e:	684a      	ldr	r2, [r1, #4]
   3c080:	6852      	ldr	r2, [r2, #4]
   3c082:	2101      	movs	r1, #1
   3c084:	a801      	add	r0, sp, #4
   3c086:	4798      	blx	r3
}
   3c088:	2000      	movs	r0, #0
   3c08a:	b003      	add	sp, #12
   3c08c:	f85d fb04 	ldr.w	pc, [sp], #4

0003c090 <buffer_write>:
{
   3c090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c092:	4607      	mov	r7, r0
   3c094:	460d      	mov	r5, r1
   3c096:	4614      	mov	r4, r2
   3c098:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   3c09a:	4632      	mov	r2, r6
   3c09c:	4621      	mov	r1, r4
   3c09e:	4628      	mov	r0, r5
   3c0a0:	47b8      	blx	r7
		buf += processed;
   3c0a2:	4405      	add	r5, r0
	} while (len != 0);
   3c0a4:	1a24      	subs	r4, r4, r0
   3c0a6:	d1f8      	bne.n	3c09a <buffer_write+0xa>
}
   3c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003c0aa <ends_with_newline>:
	char c = '\0';
   3c0aa:	2200      	movs	r2, #0
	while (*fmt != '\0') {
   3c0ac:	7803      	ldrb	r3, [r0, #0]
   3c0ae:	b113      	cbz	r3, 3c0b6 <ends_with_newline+0xc>
		fmt++;
   3c0b0:	3001      	adds	r0, #1
		c = *fmt;
   3c0b2:	461a      	mov	r2, r3
   3c0b4:	e7fa      	b.n	3c0ac <ends_with_newline+0x2>
}
   3c0b6:	2a0a      	cmp	r2, #10
   3c0b8:	bf14      	ite	ne
   3c0ba:	2000      	movne	r0, #0
   3c0bc:	2001      	moveq	r0, #1
   3c0be:	4770      	bx	lr

0003c0c0 <color_prefix>:
{
   3c0c0:	b508      	push	{r3, lr}
   3c0c2:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   3c0c4:	2201      	movs	r2, #1
   3c0c6:	f7ea fac1 	bl	2664c <color_print>
}
   3c0ca:	bd08      	pop	{r3, pc}

0003c0cc <color_postfix>:
{
   3c0cc:	b508      	push	{r3, lr}
   3c0ce:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   3c0d0:	2200      	movs	r2, #0
   3c0d2:	f7ea fabb 	bl	2664c <color_print>
}
   3c0d6:	bd08      	pop	{r3, pc}

0003c0d8 <postfix_print>:
{
   3c0d8:	b538      	push	{r3, r4, r5, lr}
   3c0da:	4605      	mov	r5, r0
   3c0dc:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   3c0de:	f001 0101 	and.w	r1, r1, #1
   3c0e2:	f7ff fff3 	bl	3c0cc <color_postfix>
	newline_print(output, flags);
   3c0e6:	4621      	mov	r1, r4
   3c0e8:	4628      	mov	r0, r5
   3c0ea:	f7ea fac5 	bl	26678 <newline_print>
}
   3c0ee:	bd38      	pop	{r3, r4, r5, pc}

0003c0f0 <log_output_flush>:
{
   3c0f0:	b510      	push	{r4, lr}
   3c0f2:	4604      	mov	r4, r0
		     output->control_block->offset,
   3c0f4:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   3c0f6:	6853      	ldr	r3, [r2, #4]
   3c0f8:	6812      	ldr	r2, [r2, #0]
   3c0fa:	6881      	ldr	r1, [r0, #8]
   3c0fc:	6800      	ldr	r0, [r0, #0]
   3c0fe:	f7ff ffc7 	bl	3c090 <buffer_write>
	output->control_block->offset = 0;
   3c102:	6863      	ldr	r3, [r4, #4]
   3c104:	2200      	movs	r2, #0
   3c106:	601a      	str	r2, [r3, #0]
}
   3c108:	bd10      	pop	{r4, pc}

0003c10a <get_uptime_in_sec>:
{
   3c10a:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_uptime_ticks();
   3c10c:	f003 fe00 	bl	3fd10 <z_impl_k_uptime_ticks>
   3c110:	014b      	lsls	r3, r1, #5
   3c112:	0142      	lsls	r2, r0, #5
   3c114:	ea43 64d0 	orr.w	r4, r3, r0, lsr #27
   3c118:	1a13      	subs	r3, r2, r0
   3c11a:	eb64 0201 	sbc.w	r2, r4, r1
   3c11e:	0094      	lsls	r4, r2, #2
   3c120:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   3c124:	009d      	lsls	r5, r3, #2
   3c126:	4622      	mov	r2, r4
   3c128:	182b      	adds	r3, r5, r0
   3c12a:	eb41 0202 	adc.w	r2, r1, r2
   3c12e:	00d1      	lsls	r1, r2, #3
   3c130:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   3c134:	00d8      	lsls	r0, r3, #3
   3c136:	0bc0      	lsrs	r0, r0, #15
	return time / MSEC_PER_SEC;
   3c138:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3c13c:	2300      	movs	r3, #0
   3c13e:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   3c142:	2100      	movs	r1, #0
   3c144:	f7e4 ffac 	bl	210a0 <__aeabi_uldivmod>
}
   3c148:	bd38      	pop	{r3, r4, r5, pc}

0003c14a <sntp_recv_response>:
{
   3c14a:	b570      	push	{r4, r5, r6, lr}
   3c14c:	b08e      	sub	sp, #56	; 0x38
   3c14e:	4604      	mov	r4, r0
   3c150:	460d      	mov	r5, r1
   3c152:	4616      	mov	r6, r2
	struct sntp_pkt buf = { 0 };
   3c154:	2230      	movs	r2, #48	; 0x30
   3c156:	2100      	movs	r1, #0
   3c158:	a802      	add	r0, sp, #8
   3c15a:	f003 fef1 	bl	3ff40 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   3c15e:	68a1      	ldr	r1, [r4, #8]
	return z_impl_zsock_poll(fds, nfds, timeout);
   3c160:	462a      	mov	r2, r5
   3c162:	4620      	mov	r0, r4
   3c164:	f000 f92e 	bl	3c3c4 <z_impl_zsock_poll>
	if (status < 0) {
   3c168:	2800      	cmp	r0, #0
   3c16a:	db14      	blt.n	3c196 <sntp_recv_response+0x4c>
	if (status == 0) {
   3c16c:	b1e8      	cbz	r0, 3c1aa <sntp_recv_response+0x60>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   3c16e:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3c170:	2300      	movs	r3, #0
   3c172:	9301      	str	r3, [sp, #4]
   3c174:	9300      	str	r3, [sp, #0]
   3c176:	2230      	movs	r2, #48	; 0x30
   3c178:	a902      	add	r1, sp, #8
   3c17a:	f000 f8f2 	bl	3c362 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   3c17e:	2800      	cmp	r0, #0
   3c180:	db0e      	blt.n	3c1a0 <sntp_recv_response+0x56>
	if (rcvd != sizeof(struct sntp_pkt)) {
   3c182:	2830      	cmp	r0, #48	; 0x30
   3c184:	d114      	bne.n	3c1b0 <sntp_recv_response+0x66>
	status = parse_response((uint8_t *)&buf, sizeof(buf),
   3c186:	4633      	mov	r3, r6
   3c188:	6922      	ldr	r2, [r4, #16]
   3c18a:	2130      	movs	r1, #48	; 0x30
   3c18c:	a802      	add	r0, sp, #8
   3c18e:	f7e5 f9df 	bl	21550 <parse_response>
}
   3c192:	b00e      	add	sp, #56	; 0x38
   3c194:	bd70      	pop	{r4, r5, r6, pc}
		return -errno;
   3c196:	f000 fb6f 	bl	3c878 <__errno>
   3c19a:	6800      	ldr	r0, [r0, #0]
   3c19c:	4240      	negs	r0, r0
   3c19e:	e7f8      	b.n	3c192 <sntp_recv_response+0x48>
		return -errno;
   3c1a0:	f000 fb6a 	bl	3c878 <__errno>
   3c1a4:	6800      	ldr	r0, [r0, #0]
   3c1a6:	4240      	negs	r0, r0
   3c1a8:	e7f3      	b.n	3c192 <sntp_recv_response+0x48>
		return -ETIMEDOUT;
   3c1aa:	f06f 0073 	mvn.w	r0, #115	; 0x73
   3c1ae:	e7f0      	b.n	3c192 <sntp_recv_response+0x48>
		return -EMSGSIZE;
   3c1b0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3c1b4:	e7ed      	b.n	3c192 <sntp_recv_response+0x48>

0003c1b6 <sntp_init>:
	if (!ctx || !addr) {
   3c1b6:	b388      	cbz	r0, 3c21c <sntp_init+0x66>
{
   3c1b8:	b570      	push	{r4, r5, r6, lr}
   3c1ba:	460d      	mov	r5, r1
   3c1bc:	4616      	mov	r6, r2
   3c1be:	4604      	mov	r4, r0
	if (!ctx || !addr) {
   3c1c0:	b379      	cbz	r1, 3c222 <sntp_init+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   3c1c2:	2300      	movs	r3, #0
   3c1c4:	6003      	str	r3, [r0, #0]
   3c1c6:	6043      	str	r3, [r0, #4]
   3c1c8:	6083      	str	r3, [r0, #8]
   3c1ca:	60c3      	str	r3, [r0, #12]
   3c1cc:	6103      	str	r3, [r0, #16]
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3c1ce:	8808      	ldrh	r0, [r1, #0]
	return z_impl_zsock_socket(family, type, proto);
   3c1d0:	2211      	movs	r2, #17
   3c1d2:	2102      	movs	r1, #2
   3c1d4:	f7ea fc78 	bl	26ac8 <z_impl_zsock_socket>
   3c1d8:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   3c1da:	2800      	cmp	r0, #0
   3c1dc:	db11      	blt.n	3c202 <sntp_init+0x4c>
	return z_impl_zsock_connect(sock, addr, addrlen);
   3c1de:	4632      	mov	r2, r6
   3c1e0:	4629      	mov	r1, r5
   3c1e2:	f000 f865 	bl	3c2b0 <z_impl_zsock_connect>
	if (ret < 0) {
   3c1e6:	2800      	cmp	r0, #0
   3c1e8:	db10      	blt.n	3c20c <sntp_init+0x56>
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   3c1ea:	68a3      	ldr	r3, [r4, #8]
   3c1ec:	68e2      	ldr	r2, [r4, #12]
   3c1ee:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3c1f2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   3c1f6:	2101      	movs	r1, #1
   3c1f8:	8091      	strh	r1, [r2, #4]
	ctx->sock.nfds++;
   3c1fa:	440b      	add	r3, r1
   3c1fc:	60a3      	str	r3, [r4, #8]
	return 0;
   3c1fe:	2000      	movs	r0, #0
}
   3c200:	bd70      	pop	{r4, r5, r6, pc}
		return -errno;
   3c202:	f000 fb39 	bl	3c878 <__errno>
   3c206:	6800      	ldr	r0, [r0, #0]
   3c208:	4240      	negs	r0, r0
   3c20a:	e7f9      	b.n	3c200 <sntp_init+0x4a>
		(void)close(ctx->sock.fd);
   3c20c:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_close(sock);
   3c20e:	f000 f82a 	bl	3c266 <z_impl_zsock_close>
		return -errno;
   3c212:	f000 fb31 	bl	3c878 <__errno>
   3c216:	6800      	ldr	r0, [r0, #0]
   3c218:	4240      	negs	r0, r0
   3c21a:	e7f1      	b.n	3c200 <sntp_init+0x4a>
		return -EFAULT;
   3c21c:	f06f 000d 	mvn.w	r0, #13
}
   3c220:	4770      	bx	lr
		return -EFAULT;
   3c222:	f06f 000d 	mvn.w	r0, #13
   3c226:	e7eb      	b.n	3c200 <sntp_init+0x4a>

0003c228 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   3c228:	b120      	cbz	r0, 3c234 <sntp_close+0xc>
{
   3c22a:	b508      	push	{r3, lr}
		(void)close(ctx->sock.fd);
   3c22c:	68c0      	ldr	r0, [r0, #12]
   3c22e:	f000 f81a 	bl	3c266 <z_impl_zsock_close>
	}
}
   3c232:	bd08      	pop	{r3, pc}
   3c234:	4770      	bx	lr

0003c236 <zsock_getaddrinfo>:
#endif /* defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4) */

int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
   3c236:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3c238:	f7ea fdea 	bl	26e10 <socket_offload_getaddrinfo>
		*res = NULL;
	}
#endif

	return ret;
}
   3c23c:	bd08      	pop	{r3, pc}

0003c23e <zsock_freeaddrinfo>:

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
   3c23e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   3c240:	f7ea fe1c 	bl	26e7c <socket_offload_freeaddrinfo>
	}

	free(ai);
}
   3c244:	bd08      	pop	{r3, pc}

0003c246 <z_fdtable_call_ioctl>:
{
   3c246:	b40c      	push	{r2, r3}
   3c248:	b500      	push	{lr}
   3c24a:	b083      	sub	sp, #12
   3c24c:	4603      	mov	r3, r0
   3c24e:	4608      	mov	r0, r1
   3c250:	aa04      	add	r2, sp, #16
   3c252:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, request);
   3c256:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3c258:	68db      	ldr	r3, [r3, #12]
   3c25a:	4798      	blx	r3
}
   3c25c:	b003      	add	sp, #12
   3c25e:	f85d eb04 	ldr.w	lr, [sp], #4
   3c262:	b002      	add	sp, #8
   3c264:	4770      	bx	lr

0003c266 <z_impl_zsock_close>:
{
   3c266:	b530      	push	{r4, r5, lr}
   3c268:	b083      	sub	sp, #12
   3c26a:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3c26c:	466a      	mov	r2, sp
   3c26e:	a901      	add	r1, sp, #4
   3c270:	f7e8 fd00 	bl	24c74 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   3c274:	b1a8      	cbz	r0, 3c2a2 <z_impl_zsock_close+0x3c>
   3c276:	4604      	mov	r4, r0
	(void)k_mutex_lock(lock, K_FOREVER);
   3c278:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   3c27a:	f04f 32ff 	mov.w	r2, #4294967295
   3c27e:	f04f 33ff 	mov.w	r3, #4294967295
   3c282:	f7f9 fea5 	bl	35fd0 <z_impl_k_mutex_lock>
	ret = vtable->fd_vtable.close(ctx);
   3c286:	9b01      	ldr	r3, [sp, #4]
   3c288:	689b      	ldr	r3, [r3, #8]
   3c28a:	4620      	mov	r0, r4
   3c28c:	4798      	blx	r3
   3c28e:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   3c290:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_unlock(mutex);
   3c292:	f7f9 ff93 	bl	361bc <z_impl_k_mutex_unlock>
	z_free_fd(sock);
   3c296:	4628      	mov	r0, r5
   3c298:	f7ff fbc3 	bl	3ba22 <z_free_fd>
}
   3c29c:	4620      	mov	r0, r4
   3c29e:	b003      	add	sp, #12
   3c2a0:	bd30      	pop	{r4, r5, pc}
		errno = EBADF;
   3c2a2:	f000 fae9 	bl	3c878 <__errno>
   3c2a6:	2309      	movs	r3, #9
   3c2a8:	6003      	str	r3, [r0, #0]
		return -1;
   3c2aa:	f04f 34ff 	mov.w	r4, #4294967295
   3c2ae:	e7f5      	b.n	3c29c <z_impl_zsock_close+0x36>

0003c2b0 <z_impl_zsock_connect>:
{
   3c2b0:	b570      	push	{r4, r5, r6, lr}
   3c2b2:	b082      	sub	sp, #8
   3c2b4:	460d      	mov	r5, r1
   3c2b6:	4614      	mov	r4, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3c2b8:	aa01      	add	r2, sp, #4
   3c2ba:	4669      	mov	r1, sp
   3c2bc:	f7e8 fcda 	bl	24c74 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3c2c0:	b1b8      	cbz	r0, 3c2f2 <z_impl_zsock_connect+0x42>
   3c2c2:	4606      	mov	r6, r0
   3c2c4:	9b00      	ldr	r3, [sp, #0]
   3c2c6:	695b      	ldr	r3, [r3, #20]
   3c2c8:	b19b      	cbz	r3, 3c2f2 <z_impl_zsock_connect+0x42>
   3c2ca:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   3c2cc:	f04f 32ff 	mov.w	r2, #4294967295
   3c2d0:	f04f 33ff 	mov.w	r3, #4294967295
   3c2d4:	f7f9 fe7c 	bl	35fd0 <z_impl_k_mutex_lock>
   3c2d8:	9b00      	ldr	r3, [sp, #0]
   3c2da:	695b      	ldr	r3, [r3, #20]
   3c2dc:	4622      	mov	r2, r4
   3c2de:	4629      	mov	r1, r5
   3c2e0:	4630      	mov	r0, r6
   3c2e2:	4798      	blx	r3
   3c2e4:	4604      	mov	r4, r0
   3c2e6:	9801      	ldr	r0, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   3c2e8:	f7f9 ff68 	bl	361bc <z_impl_k_mutex_unlock>
}
   3c2ec:	4620      	mov	r0, r4
   3c2ee:	b002      	add	sp, #8
   3c2f0:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3c2f2:	f000 fac1 	bl	3c878 <__errno>
   3c2f6:	2309      	movs	r3, #9
   3c2f8:	6003      	str	r3, [r0, #0]
   3c2fa:	f04f 34ff 	mov.w	r4, #4294967295
   3c2fe:	e7f5      	b.n	3c2ec <z_impl_zsock_connect+0x3c>

0003c300 <z_impl_zsock_sendto>:
{
   3c300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c304:	b084      	sub	sp, #16
   3c306:	460e      	mov	r6, r1
   3c308:	4615      	mov	r5, r2
   3c30a:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3c30c:	aa03      	add	r2, sp, #12
   3c30e:	a902      	add	r1, sp, #8
   3c310:	f7e8 fcb0 	bl	24c74 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3c314:	b1f0      	cbz	r0, 3c354 <z_impl_zsock_sendto+0x54>
   3c316:	4607      	mov	r7, r0
   3c318:	9b02      	ldr	r3, [sp, #8]
   3c31a:	6a1b      	ldr	r3, [r3, #32]
   3c31c:	b1d3      	cbz	r3, 3c354 <z_impl_zsock_sendto+0x54>
   3c31e:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   3c320:	f04f 32ff 	mov.w	r2, #4294967295
   3c324:	f04f 33ff 	mov.w	r3, #4294967295
   3c328:	f7f9 fe52 	bl	35fd0 <z_impl_k_mutex_lock>
   3c32c:	9b02      	ldr	r3, [sp, #8]
   3c32e:	f8d3 8020 	ldr.w	r8, [r3, #32]
   3c332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3c334:	9301      	str	r3, [sp, #4]
   3c336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c338:	9300      	str	r3, [sp, #0]
   3c33a:	4623      	mov	r3, r4
   3c33c:	462a      	mov	r2, r5
   3c33e:	4631      	mov	r1, r6
   3c340:	4638      	mov	r0, r7
   3c342:	47c0      	blx	r8
   3c344:	4604      	mov	r4, r0
   3c346:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   3c348:	f7f9 ff38 	bl	361bc <z_impl_k_mutex_unlock>
}
   3c34c:	4620      	mov	r0, r4
   3c34e:	b004      	add	sp, #16
   3c350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3c354:	f000 fa90 	bl	3c878 <__errno>
   3c358:	2309      	movs	r3, #9
   3c35a:	6003      	str	r3, [r0, #0]
   3c35c:	f04f 34ff 	mov.w	r4, #4294967295
   3c360:	e7f4      	b.n	3c34c <z_impl_zsock_sendto+0x4c>

0003c362 <z_impl_zsock_recvfrom>:
{
   3c362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c366:	b084      	sub	sp, #16
   3c368:	460e      	mov	r6, r1
   3c36a:	4615      	mov	r5, r2
   3c36c:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3c36e:	aa03      	add	r2, sp, #12
   3c370:	a902      	add	r1, sp, #8
   3c372:	f7e8 fc7f 	bl	24c74 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3c376:	b1f0      	cbz	r0, 3c3b6 <z_impl_zsock_recvfrom+0x54>
   3c378:	4607      	mov	r7, r0
   3c37a:	9b02      	ldr	r3, [sp, #8]
   3c37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3c37e:	b1d3      	cbz	r3, 3c3b6 <z_impl_zsock_recvfrom+0x54>
   3c380:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   3c382:	f04f 32ff 	mov.w	r2, #4294967295
   3c386:	f04f 33ff 	mov.w	r3, #4294967295
   3c38a:	f7f9 fe21 	bl	35fd0 <z_impl_k_mutex_lock>
   3c38e:	9b02      	ldr	r3, [sp, #8]
   3c390:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   3c394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3c396:	9301      	str	r3, [sp, #4]
   3c398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c39a:	9300      	str	r3, [sp, #0]
   3c39c:	4623      	mov	r3, r4
   3c39e:	462a      	mov	r2, r5
   3c3a0:	4631      	mov	r1, r6
   3c3a2:	4638      	mov	r0, r7
   3c3a4:	47c0      	blx	r8
   3c3a6:	4604      	mov	r4, r0
   3c3a8:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   3c3aa:	f7f9 ff07 	bl	361bc <z_impl_k_mutex_unlock>
}
   3c3ae:	4620      	mov	r0, r4
   3c3b0:	b004      	add	sp, #16
   3c3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3c3b6:	f000 fa5f 	bl	3c878 <__errno>
   3c3ba:	2309      	movs	r3, #9
   3c3bc:	6003      	str	r3, [r0, #0]
   3c3be:	f04f 34ff 	mov.w	r4, #4294967295
   3c3c2:	e7f4      	b.n	3c3ae <z_impl_zsock_recvfrom+0x4c>

0003c3c4 <z_impl_zsock_poll>:

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   3c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c3c6:	4604      	mov	r4, r0
   3c3c8:	460d      	mov	r5, r1
	k_timeout_t timeout;

	if (poll_timeout < 0) {
   3c3ca:	2a00      	cmp	r2, #0
   3c3cc:	db19      	blt.n	3c402 <z_impl_zsock_poll+0x3e>
		timeout = K_FOREVER;
	} else {
		timeout = K_MSEC(poll_timeout);
   3c3ce:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   3c3d2:	17d7      	asrs	r7, r2, #31
   3c3d4:	03f9      	lsls	r1, r7, #15
   3c3d6:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   3c3da:	03d0      	lsls	r0, r2, #15
   3c3dc:	f240 36e7 	movw	r6, #999	; 0x3e7
   3c3e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3c3e4:	2300      	movs	r3, #0
   3c3e6:	1980      	adds	r0, r0, r6
   3c3e8:	f04f 0600 	mov.w	r6, #0
   3c3ec:	eb46 0101 	adc.w	r1, r6, r1
   3c3f0:	f7e4 fe56 	bl	210a0 <__aeabi_uldivmod>
   3c3f4:	4602      	mov	r2, r0
   3c3f6:	460b      	mov	r3, r1
	}

	return zsock_poll_internal(fds, nfds, timeout);
   3c3f8:	4629      	mov	r1, r5
   3c3fa:	4620      	mov	r0, r4
   3c3fc:	f7ea fbac 	bl	26b58 <zsock_poll_internal>
}
   3c400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timeout = K_FOREVER;
   3c402:	f04f 32ff 	mov.w	r2, #4294967295
   3c406:	4613      	mov	r3, r2
   3c408:	e7f6      	b.n	3c3f8 <z_impl_zsock_poll+0x34>

0003c40a <z_impl_zsock_inet_pton>:
}
#include <syscalls/zsock_poll_mrsh.c>
#endif

int z_impl_zsock_inet_pton(sa_family_t family, const char *src, void *dst)
{
   3c40a:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_NET_ADDR_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_pton(family, src, dst);
   3c40c:	f000 fa65 	bl	3c8da <z_impl_net_addr_pton>
	if (net_addr_pton(family, src, dst) == 0) {
   3c410:	b908      	cbnz	r0, 3c416 <z_impl_zsock_inet_pton+0xc>
		return 1;
   3c412:	2001      	movs	r0, #1
	} else {
		return 0;
	}
}
   3c414:	bd08      	pop	{r3, pc}
		return 0;
   3c416:	2000      	movs	r0, #0
   3c418:	e7fc      	b.n	3c414 <z_impl_zsock_inet_pton+0xa>

0003c41a <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3c41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c41e:	b084      	sub	sp, #16
   3c420:	460e      	mov	r6, r1
   3c422:	4615      	mov	r5, r2
   3c424:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3c426:	aa03      	add	r2, sp, #12
   3c428:	a902      	add	r1, sp, #8
   3c42a:	f7e8 fc23 	bl	24c74 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3c42e:	b1e0      	cbz	r0, 3c46a <z_impl_zsock_setsockopt+0x50>
   3c430:	4607      	mov	r7, r0
   3c432:	9b02      	ldr	r3, [sp, #8]
   3c434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   3c436:	b1c3      	cbz	r3, 3c46a <z_impl_zsock_setsockopt+0x50>
   3c438:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   3c43a:	f04f 32ff 	mov.w	r2, #4294967295
   3c43e:	f04f 33ff 	mov.w	r3, #4294967295
   3c442:	f7f9 fdc5 	bl	35fd0 <z_impl_k_mutex_lock>
   3c446:	9b02      	ldr	r3, [sp, #8]
   3c448:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
   3c44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c44e:	9300      	str	r3, [sp, #0]
   3c450:	4623      	mov	r3, r4
   3c452:	462a      	mov	r2, r5
   3c454:	4631      	mov	r1, r6
   3c456:	4638      	mov	r0, r7
   3c458:	47c0      	blx	r8
   3c45a:	4604      	mov	r4, r0
   3c45c:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   3c45e:	f7f9 fead 	bl	361bc <z_impl_k_mutex_unlock>
}
   3c462:	4620      	mov	r0, r4
   3c464:	b004      	add	sp, #16
   3c466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3c46a:	f000 fa05 	bl	3c878 <__errno>
   3c46e:	2309      	movs	r3, #9
   3c470:	6003      	str	r3, [r0, #0]
   3c472:	f04f 34ff 	mov.w	r4, #4294967295
   3c476:	e7f4      	b.n	3c462 <z_impl_zsock_setsockopt+0x48>

0003c478 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3c478:	4770      	bx	lr

0003c47a <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3c47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c47e:	4680      	mov	r8, r0
   3c480:	4617      	mov	r7, r2
   3c482:	461e      	mov	r6, r3


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   3c484:	1e0d      	subs	r5, r1, #0
   3c486:	db05      	blt.n	3c494 <flash_area_read+0x1a>
   3c488:	18eb      	adds	r3, r5, r3
   3c48a:	6882      	ldr	r2, [r0, #8]
   3c48c:	4293      	cmp	r3, r2
   3c48e:	d911      	bls.n	3c4b4 <flash_area_read+0x3a>
   3c490:	2300      	movs	r3, #0
   3c492:	e000      	b.n	3c496 <flash_area_read+0x1c>
   3c494:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3c496:	b17b      	cbz	r3, 3c4b8 <flash_area_read+0x3e>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3c498:	f8d8 000c 	ldr.w	r0, [r8, #12]
   3c49c:	f7f9 f934 	bl	35708 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3c4a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   3c4a4:	4429      	add	r1, r5
	const struct flash_driver_api *api =
   3c4a6:	6883      	ldr	r3, [r0, #8]
	return api->read(dev, offset, data, len);
   3c4a8:	681c      	ldr	r4, [r3, #0]
   3c4aa:	4633      	mov	r3, r6
   3c4ac:	463a      	mov	r2, r7
   3c4ae:	47a0      	blx	r4
}
   3c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c4b4:	2301      	movs	r3, #1
   3c4b6:	e7ee      	b.n	3c496 <flash_area_read+0x1c>
		return -EINVAL;
   3c4b8:	f06f 0015 	mvn.w	r0, #21
   3c4bc:	e7f8      	b.n	3c4b0 <flash_area_read+0x36>

0003c4be <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3c4be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c4c2:	4606      	mov	r6, r0
   3c4c4:	4690      	mov	r8, r2
   3c4c6:	461f      	mov	r7, r3
   3c4c8:	f1b1 0900 	subs.w	r9, r1, #0
   3c4cc:	db05      	blt.n	3c4da <flash_area_write+0x1c>
   3c4ce:	444b      	add	r3, r9
   3c4d0:	6882      	ldr	r2, [r0, #8]
   3c4d2:	4293      	cmp	r3, r2
   3c4d4:	d91f      	bls.n	3c516 <flash_area_write+0x58>
   3c4d6:	2300      	movs	r3, #0
   3c4d8:	e000      	b.n	3c4dc <flash_area_write+0x1e>
   3c4da:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3c4dc:	b1eb      	cbz	r3, 3c51a <flash_area_write+0x5c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3c4de:	68f0      	ldr	r0, [r6, #12]
   3c4e0:	f7f9 f912 	bl	35708 <z_impl_device_get_binding>
   3c4e4:	4604      	mov	r4, r0

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3c4e6:	6871      	ldr	r1, [r6, #4]
   3c4e8:	4489      	add	r9, r1
	const struct flash_driver_api *api =
   3c4ea:	6886      	ldr	r6, [r0, #8]
	if (api->write_protection != NULL) {
   3c4ec:	68f3      	ldr	r3, [r6, #12]
   3c4ee:	b11b      	cbz	r3, 3c4f8 <flash_area_write+0x3a>
		rc = api->write_protection(dev, false);
   3c4f0:	2100      	movs	r1, #0
   3c4f2:	4798      	blx	r3
		if (rc) {
   3c4f4:	4605      	mov	r5, r0
   3c4f6:	b958      	cbnz	r0, 3c510 <flash_area_write+0x52>
	rc = api->write(dev, offset, data, len);
   3c4f8:	6875      	ldr	r5, [r6, #4]
   3c4fa:	463b      	mov	r3, r7
   3c4fc:	4642      	mov	r2, r8
   3c4fe:	4649      	mov	r1, r9
   3c500:	4620      	mov	r0, r4
   3c502:	47a8      	blx	r5
   3c504:	4605      	mov	r5, r0
	if (api->write_protection != NULL) {
   3c506:	68f3      	ldr	r3, [r6, #12]
   3c508:	b113      	cbz	r3, 3c510 <flash_area_write+0x52>
		(void) api->write_protection(dev, true);
   3c50a:	2101      	movs	r1, #1
   3c50c:	4620      	mov	r0, r4
   3c50e:	4798      	blx	r3

	return rc;
}
   3c510:	4628      	mov	r0, r5
   3c512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c516:	2301      	movs	r3, #1
   3c518:	e7e0      	b.n	3c4dc <flash_area_write+0x1e>
		return -EINVAL;
   3c51a:	f06f 0515 	mvn.w	r5, #21
   3c51e:	e7f7      	b.n	3c510 <flash_area_write+0x52>

0003c520 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   3c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c524:	4605      	mov	r5, r0
   3c526:	4690      	mov	r8, r2
   3c528:	1e0e      	subs	r6, r1, #0
   3c52a:	db05      	blt.n	3c538 <flash_area_erase+0x18>
   3c52c:	18b3      	adds	r3, r6, r2
   3c52e:	6882      	ldr	r2, [r0, #8]
   3c530:	4293      	cmp	r3, r2
   3c532:	d91e      	bls.n	3c572 <flash_area_erase+0x52>
   3c534:	2300      	movs	r3, #0
   3c536:	e000      	b.n	3c53a <flash_area_erase+0x1a>
   3c538:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3c53a:	b1e3      	cbz	r3, 3c576 <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3c53c:	68e8      	ldr	r0, [r5, #12]
   3c53e:	f7f9 f8e3 	bl	35708 <z_impl_device_get_binding>
   3c542:	4604      	mov	r4, r0

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3c544:	686b      	ldr	r3, [r5, #4]
   3c546:	441e      	add	r6, r3
	const struct flash_driver_api *api =
   3c548:	6887      	ldr	r7, [r0, #8]
	if (api->write_protection != NULL) {
   3c54a:	68fb      	ldr	r3, [r7, #12]
   3c54c:	b11b      	cbz	r3, 3c556 <flash_area_erase+0x36>
		rc = api->write_protection(dev, false);
   3c54e:	2100      	movs	r1, #0
   3c550:	4798      	blx	r3
		if (rc) {
   3c552:	4605      	mov	r5, r0
   3c554:	b950      	cbnz	r0, 3c56c <flash_area_erase+0x4c>
	rc = api->erase(dev, offset, size);
   3c556:	68bb      	ldr	r3, [r7, #8]
   3c558:	4642      	mov	r2, r8
   3c55a:	4631      	mov	r1, r6
   3c55c:	4620      	mov	r0, r4
   3c55e:	4798      	blx	r3
   3c560:	4605      	mov	r5, r0
	if (api->write_protection != NULL) {
   3c562:	68fb      	ldr	r3, [r7, #12]
   3c564:	b113      	cbz	r3, 3c56c <flash_area_erase+0x4c>
		(void) api->write_protection(dev, true);
   3c566:	2101      	movs	r1, #1
   3c568:	4620      	mov	r0, r4
   3c56a:	4798      	blx	r3

	return rc;
}
   3c56c:	4628      	mov	r0, r5
   3c56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c572:	2301      	movs	r3, #1
   3c574:	e7e1      	b.n	3c53a <flash_area_erase+0x1a>
		return -EINVAL;
   3c576:	f06f 0515 	mvn.w	r5, #21
   3c57a:	e7f7      	b.n	3c56c <flash_area_erase+0x4c>

0003c57c <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   3c57c:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3c57e:	68c0      	ldr	r0, [r0, #12]
   3c580:	f7f9 f8c2 	bl	35708 <z_impl_device_get_binding>
	const struct flash_driver_api *api =
   3c584:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   3c586:	691b      	ldr	r3, [r3, #16]
   3c588:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3c58a:	6800      	ldr	r0, [r0, #0]
   3c58c:	bd08      	pop	{r3, pc}

0003c58e <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3c58e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3c590:	68c0      	ldr	r0, [r0, #12]
   3c592:	f7f9 f8b9 	bl	35708 <z_impl_device_get_binding>
	const struct flash_driver_api *api =
   3c596:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev);
   3c598:	691b      	ldr	r3, [r3, #16]
   3c59a:	4798      	blx	r3

	return param->erase_value;
}
   3c59c:	7900      	ldrb	r0, [r0, #4]
   3c59e:	bd08      	pop	{r3, pc}

0003c5a0 <stream_flash_buffered_write>:
{
   3c5a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!ctx) {
   3c5a4:	2800      	cmp	r0, #0
   3c5a6:	d03d      	beq.n	3c624 <stream_flash_buffered_write+0x84>
   3c5a8:	468a      	mov	sl, r1
   3c5aa:	4690      	mov	r8, r2
   3c5ac:	469b      	mov	fp, r3
   3c5ae:	4604      	mov	r4, r0
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3c5b0:	6903      	ldr	r3, [r0, #16]
   3c5b2:	6882      	ldr	r2, [r0, #8]
   3c5b4:	4413      	add	r3, r2
   3c5b6:	4443      	add	r3, r8
   3c5b8:	6982      	ldr	r2, [r0, #24]
   3c5ba:	4293      	cmp	r3, r2
   3c5bc:	d835      	bhi.n	3c62a <stream_flash_buffered_write+0x8a>
	int rc = 0;
   3c5be:	f04f 0900 	mov.w	r9, #0
	int processed = 0;
   3c5c2:	464e      	mov	r6, r9
	while ((len - processed) >=
   3c5c4:	4631      	mov	r1, r6
   3c5c6:	eba8 0706 	sub.w	r7, r8, r6
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3c5ca:	6865      	ldr	r5, [r4, #4]
   3c5cc:	68a3      	ldr	r3, [r4, #8]
   3c5ce:	1aed      	subs	r5, r5, r3
	while ((len - processed) >=
   3c5d0:	42af      	cmp	r7, r5
   3c5d2:	d30f      	bcc.n	3c5f4 <stream_flash_buffered_write+0x54>
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3c5d4:	6820      	ldr	r0, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3c5d6:	462a      	mov	r2, r5
   3c5d8:	eb0a 0106 	add.w	r1, sl, r6
   3c5dc:	4418      	add	r0, r3
   3c5de:	f003 fc8f 	bl	3ff00 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3c5e2:	6863      	ldr	r3, [r4, #4]
   3c5e4:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3c5e6:	4620      	mov	r0, r4
   3c5e8:	f7ea fd16 	bl	27018 <flash_sync>
		if (rc != 0) {
   3c5ec:	4681      	mov	r9, r0
   3c5ee:	b988      	cbnz	r0, 3c614 <stream_flash_buffered_write+0x74>
		processed += buf_empty_bytes;
   3c5f0:	442e      	add	r6, r5
   3c5f2:	e7e7      	b.n	3c5c4 <stream_flash_buffered_write+0x24>
	if (processed < len) {
   3c5f4:	4546      	cmp	r6, r8
   3c5f6:	d208      	bcs.n	3c60a <stream_flash_buffered_write+0x6a>
		memcpy(ctx->buf + ctx->buf_bytes,
   3c5f8:	6820      	ldr	r0, [r4, #0]
   3c5fa:	463a      	mov	r2, r7
   3c5fc:	4451      	add	r1, sl
   3c5fe:	4418      	add	r0, r3
   3c600:	f003 fc7e 	bl	3ff00 <memcpy>
		ctx->buf_bytes += len - processed;
   3c604:	68a3      	ldr	r3, [r4, #8]
   3c606:	441f      	add	r7, r3
   3c608:	60a7      	str	r7, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3c60a:	f1bb 0f00 	cmp.w	fp, #0
   3c60e:	d001      	beq.n	3c614 <stream_flash_buffered_write+0x74>
   3c610:	68a3      	ldr	r3, [r4, #8]
   3c612:	b913      	cbnz	r3, 3c61a <stream_flash_buffered_write+0x7a>
}
   3c614:	4648      	mov	r0, r9
   3c616:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = flash_sync(ctx);
   3c61a:	4620      	mov	r0, r4
   3c61c:	f7ea fcfc 	bl	27018 <flash_sync>
   3c620:	4681      	mov	r9, r0
   3c622:	e7f7      	b.n	3c614 <stream_flash_buffered_write+0x74>
		return -EFAULT;
   3c624:	f06f 090d 	mvn.w	r9, #13
   3c628:	e7f4      	b.n	3c614 <stream_flash_buffered_write+0x74>
		return -ENOMEM;
   3c62a:	f06f 090b 	mvn.w	r9, #11
   3c62e:	e7f1      	b.n	3c614 <stream_flash_buffered_write+0x74>

0003c630 <stream_flash_bytes_written>:
}
   3c630:	6900      	ldr	r0, [r0, #16]
   3c632:	4770      	bx	lr

0003c634 <pm_device_state_get>:
}

int pm_device_state_get(const struct device *dev,
			enum pm_device_state *state)
{
	struct pm_device *pm = dev->pm;
   3c634:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   3c636:	b11b      	cbz	r3, 3c640 <pm_device_state_get+0xc>
		return -ENOSYS;
	}

	*state = pm->state;
   3c638:	791b      	ldrb	r3, [r3, #4]
   3c63a:	700b      	strb	r3, [r1, #0]

	return 0;
   3c63c:	2000      	movs	r0, #0
   3c63e:	4770      	bx	lr
		return -ENOSYS;
   3c640:	f06f 0057 	mvn.w	r0, #87	; 0x57
}
   3c644:	4770      	bx	lr

0003c646 <pm_device_is_busy>:
	return false;
}

bool pm_device_is_busy(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   3c646:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   3c648:	b123      	cbz	r3, 3c654 <pm_device_is_busy+0xe>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3c64a:	e8d3 0faf 	lda	r0, [r3]
   3c64e:	f000 0001 	and.w	r0, r0, #1
		return false;
	}

	return atomic_test_bit(&pm->flags, PM_DEVICE_FLAG_BUSY);
   3c652:	4770      	bx	lr
		return false;
   3c654:	2000      	movs	r0, #0
}
   3c656:	4770      	bx	lr

0003c658 <pm_device_wakeup_is_enabled>:
	return atomic_cas(&pm->flags, flags, new_flags);
}

bool pm_device_wakeup_is_enabled(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   3c658:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   3c65a:	b123      	cbz	r3, 3c666 <pm_device_wakeup_is_enabled+0xe>
   3c65c:	e8d3 0faf 	lda	r0, [r3]
   3c660:	f3c0 0080 	ubfx	r0, r0, #2, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
   3c664:	4770      	bx	lr
		return false;
   3c666:	2000      	movs	r0, #0
			       PM_DEVICE_FLAG_WS_ENABLED);
}
   3c668:	4770      	bx	lr

0003c66a <pm_device_state_is_locked>:
	}
}

bool pm_device_state_is_locked(const struct device *dev)
{
	struct pm_device *pm = dev->pm;
   3c66a:	6983      	ldr	r3, [r0, #24]

	if (pm == NULL) {
   3c66c:	b123      	cbz	r3, 3c678 <pm_device_state_is_locked+0xe>
   3c66e:	e8d3 0faf 	lda	r0, [r3]
   3c672:	f3c0 1000 	ubfx	r0, r0, #4, #1
		return false;
	}

	return atomic_test_bit(&pm->flags,
   3c676:	4770      	bx	lr
		return false;
   3c678:	2000      	movs	r0, #0
			       PM_DEVICE_FLAG_STATE_LOCKED);
}
   3c67a:	4770      	bx	lr

0003c67c <pm_device_action_run>:
{
   3c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct pm_device *pm = dev->pm;
   3c67e:	6986      	ldr	r6, [r0, #24]
	if (pm == NULL) {
   3c680:	b316      	cbz	r6, 3c6c8 <pm_device_action_run+0x4c>
   3c682:	4605      	mov	r5, r0
   3c684:	460c      	mov	r4, r1
	if (pm_device_state_is_locked(dev)) {
   3c686:	f7ff fff0 	bl	3c66a <pm_device_state_is_locked>
   3c68a:	bb00      	cbnz	r0, 3c6ce <pm_device_action_run+0x52>
	switch (action) {
   3c68c:	2c03      	cmp	r4, #3
   3c68e:	d821      	bhi.n	3c6d4 <pm_device_action_run+0x58>
   3c690:	e8df f004 	tbb	[pc, r4]
   3c694:	020d0902 	.word	0x020d0902
		if (pm->state == PM_DEVICE_STATE_SUSPENDED) {
   3c698:	7933      	ldrb	r3, [r6, #4]
   3c69a:	2b01      	cmp	r3, #1
   3c69c:	d01d      	beq.n	3c6da <pm_device_action_run+0x5e>
		} else if (pm->state == PM_DEVICE_STATE_OFF) {
   3c69e:	2b03      	cmp	r3, #3
   3c6a0:	d01e      	beq.n	3c6e0 <pm_device_action_run+0x64>
		state = PM_DEVICE_STATE_SUSPENDED;
   3c6a2:	2701      	movs	r7, #1
   3c6a4:	e007      	b.n	3c6b6 <pm_device_action_run+0x3a>
		if (pm->state == PM_DEVICE_STATE_ACTIVE) {
   3c6a6:	7933      	ldrb	r3, [r6, #4]
   3c6a8:	b1eb      	cbz	r3, 3c6e6 <pm_device_action_run+0x6a>
		state = PM_DEVICE_STATE_ACTIVE;
   3c6aa:	2700      	movs	r7, #0
   3c6ac:	e003      	b.n	3c6b6 <pm_device_action_run+0x3a>
		if (pm->state == PM_DEVICE_STATE_OFF) {
   3c6ae:	7933      	ldrb	r3, [r6, #4]
   3c6b0:	2b03      	cmp	r3, #3
   3c6b2:	d01b      	beq.n	3c6ec <pm_device_action_run+0x70>
		state = PM_DEVICE_STATE_OFF;
   3c6b4:	2703      	movs	r7, #3
	ret = pm->action_cb(dev, action);
   3c6b6:	68b3      	ldr	r3, [r6, #8]
   3c6b8:	4621      	mov	r1, r4
   3c6ba:	4628      	mov	r0, r5
   3c6bc:	4798      	blx	r3
	if (ret < 0) {
   3c6be:	2800      	cmp	r0, #0
   3c6c0:	db01      	blt.n	3c6c6 <pm_device_action_run+0x4a>
	pm->state = state;
   3c6c2:	7137      	strb	r7, [r6, #4]
	return 0;
   3c6c4:	2000      	movs	r0, #0
}
   3c6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOSYS;
   3c6c8:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3c6cc:	e7fb      	b.n	3c6c6 <pm_device_action_run+0x4a>
		return -EPERM;
   3c6ce:	f04f 30ff 	mov.w	r0, #4294967295
   3c6d2:	e7f8      	b.n	3c6c6 <pm_device_action_run+0x4a>
	if (pm_device_state_is_locked(dev)) {
   3c6d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3c6d8:	e7f5      	b.n	3c6c6 <pm_device_action_run+0x4a>
			return -EALREADY;
   3c6da:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3c6de:	e7f2      	b.n	3c6c6 <pm_device_action_run+0x4a>
			return -ENOTSUP;
   3c6e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3c6e4:	e7ef      	b.n	3c6c6 <pm_device_action_run+0x4a>
			return -EALREADY;
   3c6e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3c6ea:	e7ec      	b.n	3c6c6 <pm_device_action_run+0x4a>
			return -EALREADY;
   3c6ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3c6f0:	e7e9      	b.n	3c6c6 <pm_device_action_run+0x4a>

0003c6f2 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   3c6f2:	2200      	movs	r2, #0
   3c6f4:	6002      	str	r2, [r0, #0]
   3c6f6:	6042      	str	r2, [r0, #4]
   3c6f8:	6082      	str	r2, [r0, #8]
}
   3c6fa:	4770      	bx	lr

0003c6fc <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   3c6fc:	b510      	push	{r4, lr}
   3c6fe:	b40f      	push	{r0, r1, r2, r3}
   3c700:	f7ea fffc 	bl	276fc <before_nse>
   3c704:	bc0f      	pop	{r0, r1, r2, r3}
   3c706:	f7e3 fc6f 	bl	1ffe8 <spm_request_random_number_nse>
   3c70a:	b40f      	push	{r0, r1, r2, r3}
   3c70c:	f7eb f800 	bl	27710 <after_nse>
   3c710:	bc0f      	pop	{r0, r1, r2, r3}
   3c712:	bd10      	pop	{r4, pc}

0003c714 <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   3c714:	b510      	push	{r4, lr}
   3c716:	b40f      	push	{r0, r1, r2, r3}
   3c718:	f7ea fff0 	bl	276fc <before_nse>
   3c71c:	bc0f      	pop	{r0, r1, r2, r3}
   3c71e:	f7e3 fc6b 	bl	1fff8 <spm_request_read_nse>
   3c722:	b40f      	push	{r0, r1, r2, r3}
   3c724:	f7ea fff4 	bl	27710 <after_nse>
   3c728:	bc0f      	pop	{r0, r1, r2, r3}
   3c72a:	bd10      	pop	{r4, pc}

0003c72c <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3c72c:	b538      	push	{r3, r4, r5, lr}
   3c72e:	4604      	mov	r4, r0

	if (esf != NULL) {
   3c730:	460d      	mov	r5, r1
   3c732:	b111      	cbz	r1, 3c73a <z_arm_fatal_error+0xe>
		esf_dump(esf);
   3c734:	4608      	mov	r0, r1
   3c736:	f7eb f813 	bl	27760 <esf_dump>
	}
	z_fatal_error(reason, esf);
   3c73a:	4629      	mov	r1, r5
   3c73c:	4620      	mov	r0, r4
   3c73e:	f7f9 f84b 	bl	357d8 <z_fatal_error>
}
   3c742:	bd38      	pop	{r3, r4, r5, pc}

0003c744 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3c744:	b508      	push	{r3, lr}
   3c746:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3c748:	6800      	ldr	r0, [r0, #0]
   3c74a:	f7ff ffef 	bl	3c72c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   3c74e:	bd08      	pop	{r3, pc}

0003c750 <z_irq_spurious>:
{
   3c750:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3c752:	2100      	movs	r1, #0
   3c754:	2001      	movs	r0, #1
   3c756:	f7ff ffe9 	bl	3c72c <z_arm_fatal_error>
}
   3c75a:	bd08      	pop	{r3, pc}

0003c75c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3c75c:	b508      	push	{r3, lr}
	handler();
   3c75e:	f7eb f8b7 	bl	278d0 <z_SysNmiOnReset>
	z_arm_int_exit();
   3c762:	f7eb f97d 	bl	27a60 <z_arm_exc_exit>
}
   3c766:	bd08      	pop	{r3, pc}

0003c768 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   3c768:	6e83      	ldr	r3, [r0, #104]	; 0x68
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3c76a:	f383 880b 	msr	PSPLIM, r3
}
   3c76e:	4770      	bx	lr

0003c770 <memory_fault_recoverable>:
}
   3c770:	2000      	movs	r0, #0
   3c772:	4770      	bx	lr

0003c774 <fault_handle>:
{
   3c774:	b508      	push	{r3, lr}
	*recoverable = false;
   3c776:	2300      	movs	r3, #0
   3c778:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   3c77a:	1ecb      	subs	r3, r1, #3
   3c77c:	2b09      	cmp	r3, #9
   3c77e:	d81a      	bhi.n	3c7b6 <fault_handle+0x42>
   3c780:	e8df f003 	tbb	[pc, r3]
   3c784:	110d0905 	.word	0x110d0905
   3c788:	19191919 	.word	0x19191919
   3c78c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   3c78e:	4611      	mov	r1, r2
   3c790:	f7eb fbf8 	bl	27f84 <hard_fault>
}
   3c794:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   3c796:	2100      	movs	r1, #0
   3c798:	f7eb f970 	bl	27a7c <mem_manage_fault>
		break;
   3c79c:	e7fa      	b.n	3c794 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   3c79e:	2100      	movs	r1, #0
   3c7a0:	f7eb fa4c 	bl	27c3c <bus_fault>
		break;
   3c7a4:	e7f6      	b.n	3c794 <fault_handle+0x20>
		reason = usage_fault(esf);
   3c7a6:	f7eb fb21 	bl	27dec <usage_fault>
		break;
   3c7aa:	e7f3      	b.n	3c794 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   3c7ac:	4611      	mov	r1, r2
   3c7ae:	f7eb fcb1 	bl	28114 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   3c7b2:	2000      	movs	r0, #0
		break;
   3c7b4:	e7ee      	b.n	3c794 <fault_handle+0x20>
		reserved_exception(esf, fault);
   3c7b6:	f7eb fcc7 	bl	28148 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   3c7ba:	2000      	movs	r0, #0
	return reason;
   3c7bc:	e7ea      	b.n	3c794 <fault_handle+0x20>

0003c7be <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   3c7be:	4770      	bx	lr

0003c7c0 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   3c7c0:	4770      	bx	lr

0003c7c2 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3c7c2:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3c7c6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   3c7ca:	d001      	beq.n	3c7d0 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   3c7cc:	b2c0      	uxtb	r0, r0
   3c7ce:	4770      	bx	lr
	}

	return -EINVAL;
   3c7d0:	f06f 0015 	mvn.w	r0, #21
}
   3c7d4:	4770      	bx	lr

0003c7d6 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   3c7d6:	6843      	ldr	r3, [r0, #4]
		&&
   3c7d8:	2b1f      	cmp	r3, #31
   3c7da:	d90a      	bls.n	3c7f2 <mpu_partition_is_valid+0x1c>
		&&
   3c7dc:	f013 0f1f 	tst.w	r3, #31
   3c7e0:	d001      	beq.n	3c7e6 <mpu_partition_is_valid+0x10>
		&&
   3c7e2:	2000      	movs	r0, #0
   3c7e4:	4770      	bx	lr
		((part->start &
   3c7e6:	6803      	ldr	r3, [r0, #0]
		&&
   3c7e8:	f013 0f1f 	tst.w	r3, #31
   3c7ec:	d003      	beq.n	3c7f6 <mpu_partition_is_valid+0x20>
   3c7ee:	2000      	movs	r0, #0
   3c7f0:	4770      	bx	lr
   3c7f2:	2000      	movs	r0, #0
   3c7f4:	4770      	bx	lr
   3c7f6:	2001      	movs	r0, #1
}
   3c7f8:	4770      	bx	lr

0003c7fa <mpu_configure_region>:
{
   3c7fa:	b530      	push	{r4, r5, lr}
   3c7fc:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   3c7fe:	680b      	ldr	r3, [r1, #0]
   3c800:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   3c802:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   3c804:	890d      	ldrh	r5, [r1, #8]
   3c806:	f89d 2008 	ldrb.w	r2, [sp, #8]
   3c80a:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   3c80e:	7a89      	ldrb	r1, [r1, #10]
   3c810:	f361 1247 	bfi	r2, r1, #5, #3
   3c814:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3c818:	f023 031f 	bic.w	r3, r3, #31
   3c81c:	4423      	add	r3, r4
   3c81e:	3b01      	subs	r3, #1
   3c820:	f023 031f 	bic.w	r3, r3, #31
   3c824:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   3c826:	4669      	mov	r1, sp
   3c828:	f7eb fe40 	bl	284ac <region_allocate_and_init>
}
   3c82c:	b005      	add	sp, #20
   3c82e:	bd30      	pop	{r4, r5, pc}

0003c830 <_stdout_hook_default>:
}
   3c830:	f04f 30ff 	mov.w	r0, #4294967295
   3c834:	4770      	bx	lr

0003c836 <_stdin_hook_default>:
}
   3c836:	2000      	movs	r0, #0
   3c838:	4770      	bx	lr

0003c83a <_read>:
{
   3c83a:	b508      	push	{r3, lr}
   3c83c:	4608      	mov	r0, r1
   3c83e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3c840:	f7ec f84e 	bl	288e0 <z_impl_zephyr_read_stdin>
}
   3c844:	bd08      	pop	{r3, pc}

0003c846 <_write>:
{
   3c846:	b508      	push	{r3, lr}
   3c848:	4608      	mov	r0, r1
   3c84a:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3c84c:	f7ec f85e 	bl	2890c <z_impl_zephyr_write_stdout>
}
   3c850:	bd08      	pop	{r3, pc}

0003c852 <_close>:
}
   3c852:	f04f 30ff 	mov.w	r0, #4294967295
   3c856:	4770      	bx	lr

0003c858 <_lseek>:
}
   3c858:	2000      	movs	r0, #0
   3c85a:	4770      	bx	lr

0003c85c <_isatty>:
}
   3c85c:	2802      	cmp	r0, #2
   3c85e:	bfcc      	ite	gt
   3c860:	2000      	movgt	r0, #0
   3c862:	2001      	movle	r0, #1
   3c864:	4770      	bx	lr

0003c866 <_kill>:
}
   3c866:	2000      	movs	r0, #0
   3c868:	4770      	bx	lr

0003c86a <_getpid>:
}
   3c86a:	2000      	movs	r0, #0
   3c86c:	4770      	bx	lr

0003c86e <_fstat>:
	st->st_mode = S_IFCHR;
   3c86e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   3c872:	604b      	str	r3, [r1, #4]
}
   3c874:	2000      	movs	r0, #0
   3c876:	4770      	bx	lr

0003c878 <__errno>:
{
   3c878:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3c87a:	f7f8 ff77 	bl	3576c <z_impl_z_errno>
}
   3c87e:	bd08      	pop	{r3, pc}

0003c880 <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
   3c880:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
   3c882:	f002 f932 	bl	3eaea <boot_set_pending>
	if (rc) {
   3c886:	b900      	cbnz	r0, 3c88a <boot_request_upgrade+0xa>
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
   3c888:	bd08      	pop	{r3, pc}
		return -EFAULT;
   3c88a:	f06f 000d 	mvn.w	r0, #13
   3c88e:	e7fb      	b.n	3c888 <boot_request_upgrade+0x8>

0003c890 <boot_write_img_confirmed>:

	return flag_val == BOOT_FLAG_SET;
}

int boot_write_img_confirmed(void)
{
   3c890:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3c892:	f002 f957 	bl	3eb44 <boot_set_confirmed>
	if (rc) {
   3c896:	b900      	cbnz	r0, 3c89a <boot_write_img_confirmed+0xa>
		return -EIO;
	}

	return 0;
}
   3c898:	bd08      	pop	{r3, pc}
		return -EIO;
   3c89a:	f06f 0004 	mvn.w	r0, #4
   3c89e:	e7fb      	b.n	3c898 <boot_write_img_confirmed+0x8>

0003c8a0 <init_rx_queues>:
	net_gptp_init();
#endif
}

static void init_rx_queues(void)
{
   3c8a0:	b508      	push	{r3, lr}
	/* Starting TX side. The ordering is important here and the TX
	 * can only be started when RX side is ready to receive packets.
	 */
	net_if_init();
   3c8a2:	f7ec f95b 	bl	28b5c <net_if_init>

	net_tc_rx_init();

	/* This will take the interface up and start everything. */
	net_if_post_init();
   3c8a6:	f7ec f991 	bl	28bcc <net_if_post_init>

	/* Things to init after network interface is working */
	net_post_init();
}
   3c8aa:	bd08      	pop	{r3, pc}

0003c8ac <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3c8ac:	b508      	push	{r3, lr}

	l3_init();

	net_mgmt_event_init();

	init_rx_queues();
   3c8ae:	f7ff fff7 	bl	3c8a0 <init_rx_queues>

	return services_init();
}
   3c8b2:	2000      	movs	r0, #0
   3c8b4:	bd08      	pop	{r3, pc}

0003c8b6 <l2_flags_get>:
	if (!iface || !iface->if_dev) {
   3c8b6:	b140      	cbz	r0, 3c8ca <l2_flags_get+0x14>
{
   3c8b8:	b508      	push	{r3, lr}
   3c8ba:	6803      	ldr	r3, [r0, #0]
   3c8bc:	b13b      	cbz	r3, 3c8ce <l2_flags_get+0x18>
	return iface->if_dev->l2;
   3c8be:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3c8c0:	b13b      	cbz	r3, 3c8d2 <l2_flags_get+0x1c>
   3c8c2:	68db      	ldr	r3, [r3, #12]
   3c8c4:	b13b      	cbz	r3, 3c8d6 <l2_flags_get+0x20>
		flags = net_if_l2(iface)->get_flags(iface);
   3c8c6:	4798      	blx	r3
}
   3c8c8:	bd08      	pop	{r3, pc}
	enum net_l2_flags flags = 0;
   3c8ca:	2000      	movs	r0, #0
}
   3c8cc:	4770      	bx	lr
	enum net_l2_flags flags = 0;
   3c8ce:	2000      	movs	r0, #0
   3c8d0:	e7fa      	b.n	3c8c8 <l2_flags_get+0x12>
   3c8d2:	2000      	movs	r0, #0
   3c8d4:	e7f8      	b.n	3c8c8 <l2_flags_get+0x12>
   3c8d6:	2000      	movs	r0, #0
   3c8d8:	e7f6      	b.n	3c8c8 <l2_flags_get+0x12>

0003c8da <z_impl_net_addr_pton>:
#include <syscalls/net_addr_ntop_mrsh.c>
#endif /* CONFIG_USERSPACE */

int z_impl_net_addr_pton(sa_family_t family, const char *src,
			 void *dst)
{
   3c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c8de:	b082      	sub	sp, #8
   3c8e0:	460d      	mov	r5, r1
   3c8e2:	4616      	mov	r6, r2
	if (family == AF_INET) {
   3c8e4:	2801      	cmp	r0, #1
   3c8e6:	d010      	beq.n	3c90a <z_impl_net_addr_pton+0x30>
			addr->s4_addr[i] = strtol(src, &endptr, 10);

			src = ++endptr;
		}

	} else if (family == AF_INET6) {
   3c8e8:	2802      	cmp	r0, #2
   3c8ea:	f040 80c3 	bne.w	3ca74 <z_impl_net_addr_pton+0x19a>
		/* If the string contains a '.', it means it's of the form
		 * X:X:X:X:X:X:x.x.x.x, and contains only 6 16-bit pieces
		 */
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3c8ee:	212e      	movs	r1, #46	; 0x2e
   3c8f0:	4628      	mov	r0, r5
   3c8f2:	f003 fca7 	bl	40244 <strchr>
   3c8f6:	b358      	cbz	r0, 3c950 <z_impl_net_addr_pton+0x76>
   3c8f8:	2706      	movs	r7, #6
		struct in6_addr *addr = (struct in6_addr *)dst;
		int i, len;

		if (*src == ':') {
   3c8fa:	782b      	ldrb	r3, [r5, #0]
   3c8fc:	2b3a      	cmp	r3, #58	; 0x3a
   3c8fe:	d029      	beq.n	3c954 <z_impl_net_addr_pton+0x7a>
			/* Ignore a leading colon, makes parsing neater */
			src++;
		}

		len = strlen(src);
   3c900:	4628      	mov	r0, r5
   3c902:	f7e4 fe1b 	bl	2153c <strlen>
		for (i = 0; i < len; i++) {
   3c906:	2300      	movs	r3, #0
   3c908:	e027      	b.n	3c95a <z_impl_net_addr_pton+0x80>
		len = strlen(src);
   3c90a:	4608      	mov	r0, r1
   3c90c:	f7e4 fe16 	bl	2153c <strlen>
		for (i = 0; i < len; i++) {
   3c910:	2300      	movs	r3, #0
   3c912:	e000      	b.n	3c916 <z_impl_net_addr_pton+0x3c>
   3c914:	3301      	adds	r3, #1
   3c916:	4283      	cmp	r3, r0
   3c918:	d20a      	bcs.n	3c930 <z_impl_net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3c91a:	5ce9      	ldrb	r1, [r5, r3]
   3c91c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   3c920:	b2d2      	uxtb	r2, r2
   3c922:	2a09      	cmp	r2, #9
   3c924:	d9f6      	bls.n	3c914 <z_impl_net_addr_pton+0x3a>
   3c926:	292e      	cmp	r1, #46	; 0x2e
   3c928:	d0f4      	beq.n	3c914 <z_impl_net_addr_pton+0x3a>
				return -EINVAL;
   3c92a:	f06f 0015 	mvn.w	r0, #21
   3c92e:	e0af      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
__ssp_bos_icheck3(memset, void *, int)
   3c930:	2400      	movs	r4, #0
   3c932:	6034      	str	r4, [r6, #0]
   3c934:	e008      	b.n	3c948 <z_impl_net_addr_pton+0x6e>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   3c936:	220a      	movs	r2, #10
   3c938:	a901      	add	r1, sp, #4
   3c93a:	4628      	mov	r0, r5
   3c93c:	f7fd fdee 	bl	3a51c <strtol>
   3c940:	5530      	strb	r0, [r6, r4]
			src = ++endptr;
   3c942:	9d01      	ldr	r5, [sp, #4]
   3c944:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   3c946:	3401      	adds	r4, #1
   3c948:	2c03      	cmp	r4, #3
   3c94a:	d9f4      	bls.n	3c936 <z_impl_net_addr_pton+0x5c>
		}
	} else {
		return -EINVAL;
	}

	return 0;
   3c94c:	2000      	movs	r0, #0
   3c94e:	e09f      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   3c950:	2708      	movs	r7, #8
   3c952:	e7d2      	b.n	3c8fa <z_impl_net_addr_pton+0x20>
			src++;
   3c954:	3501      	adds	r5, #1
   3c956:	e7d3      	b.n	3c900 <z_impl_net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   3c958:	3301      	adds	r3, #1
   3c95a:	4283      	cmp	r3, r0
   3c95c:	da16      	bge.n	3c98c <z_impl_net_addr_pton+0xb2>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3c95e:	5cea      	ldrb	r2, [r5, r3]
   3c960:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   3c964:	b2c9      	uxtb	r1, r1
   3c966:	2909      	cmp	r1, #9
   3c968:	d9f6      	bls.n	3c958 <z_impl_net_addr_pton+0x7e>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   3c96a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   3c96e:	b2c9      	uxtb	r1, r1
			if (!(src[i] >= '0' && src[i] <= '9') &&
   3c970:	2905      	cmp	r1, #5
   3c972:	d9f1      	bls.n	3c958 <z_impl_net_addr_pton+0x7e>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   3c974:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   3c978:	b2c9      	uxtb	r1, r1
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   3c97a:	2905      	cmp	r1, #5
   3c97c:	d9ec      	bls.n	3c958 <z_impl_net_addr_pton+0x7e>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   3c97e:	2a2e      	cmp	r2, #46	; 0x2e
   3c980:	d0ea      	beq.n	3c958 <z_impl_net_addr_pton+0x7e>
			    src[i] != '.' && src[i] != ':') {
   3c982:	2a3a      	cmp	r2, #58	; 0x3a
   3c984:	d0e8      	beq.n	3c958 <z_impl_net_addr_pton+0x7e>
				return -EINVAL;
   3c986:	f06f 0015 	mvn.w	r0, #21
   3c98a:	e081      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
		for (i = 0; i < expected_groups; i++) {
   3c98c:	2400      	movs	r4, #0
   3c98e:	e003      	b.n	3c998 <z_impl_net_addr_pton+0xbe>
					if (i < expected_groups - 1) {
   3c990:	1e7b      	subs	r3, r7, #1
   3c992:	42a3      	cmp	r3, r4
   3c994:	dc77      	bgt.n	3ca86 <z_impl_net_addr_pton+0x1ac>
		for (i = 0; i < expected_groups; i++) {
   3c996:	3401      	adds	r4, #1
   3c998:	42bc      	cmp	r4, r7
   3c99a:	da39      	bge.n	3ca10 <z_impl_net_addr_pton+0x136>
			if (!src || *src == '\0') {
   3c99c:	2d00      	cmp	r5, #0
   3c99e:	d06c      	beq.n	3ca7a <z_impl_net_addr_pton+0x1a0>
   3c9a0:	782b      	ldrb	r3, [r5, #0]
   3c9a2:	2b00      	cmp	r3, #0
   3c9a4:	d06c      	beq.n	3ca80 <z_impl_net_addr_pton+0x1a6>
			if (*src != ':') {
   3c9a6:	2b3a      	cmp	r3, #58	; 0x3a
   3c9a8:	d018      	beq.n	3c9dc <z_impl_net_addr_pton+0x102>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   3c9aa:	2210      	movs	r2, #16
   3c9ac:	2100      	movs	r1, #0
   3c9ae:	4628      	mov	r0, r5
   3c9b0:	f7fd fdb4 	bl	3a51c <strtol>
   3c9b4:	f3c0 2807 	ubfx	r8, r0, #8, #8
   3c9b8:	2210      	movs	r2, #16
   3c9ba:	2100      	movs	r1, #0
   3c9bc:	4628      	mov	r0, r5
   3c9be:	f7fd fdad 	bl	3a51c <strtol>
   3c9c2:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
   3c9c6:	f826 8014 	strh.w	r8, [r6, r4, lsl #1]
				src = strchr(src, ':');
   3c9ca:	213a      	movs	r1, #58	; 0x3a
   3c9cc:	4628      	mov	r0, r5
   3c9ce:	f003 fc39 	bl	40244 <strchr>
				if (src) {
   3c9d2:	4605      	mov	r5, r0
   3c9d4:	2800      	cmp	r0, #0
   3c9d6:	d0db      	beq.n	3c990 <z_impl_net_addr_pton+0xb6>
					src++;
   3c9d8:	3501      	adds	r5, #1
   3c9da:	e7dc      	b.n	3c996 <z_impl_net_addr_pton+0xbc>
			for (; i < expected_groups; i++) {
   3c9dc:	42bc      	cmp	r4, r7
   3c9de:	da07      	bge.n	3c9f0 <z_impl_net_addr_pton+0x116>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   3c9e0:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   3c9e4:	2300      	movs	r3, #0
   3c9e6:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   3c9ea:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   3c9ec:	3401      	adds	r4, #1
   3c9ee:	e7f5      	b.n	3c9dc <z_impl_net_addr_pton+0x102>
			tmp = strrchr(src, ':');
   3c9f0:	213a      	movs	r1, #58	; 0x3a
   3c9f2:	4628      	mov	r0, r5
   3c9f4:	f003 fc6d 	bl	402d2 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3c9f8:	4285      	cmp	r5, r0
   3c9fa:	d003      	beq.n	3ca04 <z_impl_net_addr_pton+0x12a>
			if (expected_groups == 6) {
   3c9fc:	2f06      	cmp	r7, #6
   3c9fe:	d00b      	beq.n	3ca18 <z_impl_net_addr_pton+0x13e>
			i = expected_groups - 1;
   3ca00:	1e7c      	subs	r4, r7, #1
   3ca02:	e011      	b.n	3ca28 <z_impl_net_addr_pton+0x14e>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   3ca04:	2f06      	cmp	r7, #6
   3ca06:	d002      	beq.n	3ca0e <z_impl_net_addr_pton+0x134>
   3ca08:	786b      	ldrb	r3, [r5, #1]
   3ca0a:	2b00      	cmp	r3, #0
   3ca0c:	d1f6      	bne.n	3c9fc <z_impl_net_addr_pton+0x122>
				src++;
   3ca0e:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   3ca10:	2f06      	cmp	r7, #6
   3ca12:	d015      	beq.n	3ca40 <z_impl_net_addr_pton+0x166>
	return 0;
   3ca14:	2000      	movs	r0, #0
   3ca16:	e03b      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
				tmp--;
   3ca18:	3801      	subs	r0, #1
   3ca1a:	e7f1      	b.n	3ca00 <z_impl_net_addr_pton+0x126>
				if (i < 0) {
   3ca1c:	2c00      	cmp	r4, #0
   3ca1e:	db35      	blt.n	3ca8c <z_impl_net_addr_pton+0x1b2>
			} while (tmp-- != src);
   3ca20:	1e43      	subs	r3, r0, #1
   3ca22:	4285      	cmp	r5, r0
   3ca24:	d005      	beq.n	3ca32 <z_impl_net_addr_pton+0x158>
   3ca26:	4618      	mov	r0, r3
				if (*tmp == ':') {
   3ca28:	7803      	ldrb	r3, [r0, #0]
   3ca2a:	2b3a      	cmp	r3, #58	; 0x3a
   3ca2c:	d1f6      	bne.n	3ca1c <z_impl_net_addr_pton+0x142>
					i--;
   3ca2e:	3c01      	subs	r4, #1
   3ca30:	e7f4      	b.n	3ca1c <z_impl_net_addr_pton+0x142>
			src++;
   3ca32:	3501      	adds	r5, #1
   3ca34:	e7af      	b.n	3c996 <z_impl_net_addr_pton+0xbc>
					if (i < 3) {
   3ca36:	2c02      	cmp	r4, #2
   3ca38:	dc18      	bgt.n	3ca6c <z_impl_net_addr_pton+0x192>
						return -EINVAL;
   3ca3a:	f06f 0015 	mvn.w	r0, #21
   3ca3e:	e027      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
			for (i = 0; i < 4; i++) {
   3ca40:	2400      	movs	r4, #0
   3ca42:	2c03      	cmp	r4, #3
   3ca44:	dc14      	bgt.n	3ca70 <z_impl_net_addr_pton+0x196>
				if (!src || !*src) {
   3ca46:	b335      	cbz	r5, 3ca96 <z_impl_net_addr_pton+0x1bc>
   3ca48:	782b      	ldrb	r3, [r5, #0]
   3ca4a:	b33b      	cbz	r3, 3ca9c <z_impl_net_addr_pton+0x1c2>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   3ca4c:	220a      	movs	r2, #10
   3ca4e:	2100      	movs	r1, #0
   3ca50:	4628      	mov	r0, r5
   3ca52:	f7fd fd63 	bl	3a51c <strtol>
   3ca56:	f104 030c 	add.w	r3, r4, #12
   3ca5a:	54f0      	strb	r0, [r6, r3]
				src = strchr(src, '.');
   3ca5c:	212e      	movs	r1, #46	; 0x2e
   3ca5e:	4628      	mov	r0, r5
   3ca60:	f003 fbf0 	bl	40244 <strchr>
				if (src) {
   3ca64:	4605      	mov	r5, r0
   3ca66:	2800      	cmp	r0, #0
   3ca68:	d0e5      	beq.n	3ca36 <z_impl_net_addr_pton+0x15c>
					src++;
   3ca6a:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   3ca6c:	3401      	adds	r4, #1
   3ca6e:	e7e8      	b.n	3ca42 <z_impl_net_addr_pton+0x168>
	return 0;
   3ca70:	2000      	movs	r0, #0
   3ca72:	e00d      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
		return -EINVAL;
   3ca74:	f06f 0015 	mvn.w	r0, #21
   3ca78:	e00a      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
				return -EINVAL;
   3ca7a:	f06f 0015 	mvn.w	r0, #21
   3ca7e:	e007      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
   3ca80:	f06f 0015 	mvn.w	r0, #21
   3ca84:	e004      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
						return -EINVAL;
   3ca86:	f06f 0015 	mvn.w	r0, #21
   3ca8a:	e001      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
					return -EINVAL;
   3ca8c:	f06f 0015 	mvn.w	r0, #21
}
   3ca90:	b002      	add	sp, #8
   3ca92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return -EINVAL;
   3ca96:	f06f 0015 	mvn.w	r0, #21
   3ca9a:	e7f9      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>
   3ca9c:	f06f 0015 	mvn.w	r0, #21
   3caa0:	e7f6      	b.n	3ca90 <z_impl_net_addr_pton+0x1b6>

0003caa2 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   3caa2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   3caa4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   3caa8:	0089      	lsls	r1, r1, #2
   3caaa:	3140      	adds	r1, #64	; 0x40
}
   3caac:	4408      	add	r0, r1
   3caae:	4770      	bx	lr

0003cab0 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   3cab0:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   3cab2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   3cab6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3caba:	4770      	bx	lr

0003cabc <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   3cabc:	6900      	ldr	r0, [r0, #16]
}
   3cabe:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   3cac2:	4770      	bx	lr

0003cac4 <set_off_state>:
	__asm__ volatile(
   3cac4:	f04f 0320 	mov.w	r3, #32
   3cac8:	f3ef 8211 	mrs	r2, BASEPRI
   3cacc:	f383 8812 	msr	BASEPRI_MAX, r3
   3cad0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3cad4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   3cad6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   3cada:	d001      	beq.n	3cae0 <set_off_state+0x1c>
   3cadc:	428b      	cmp	r3, r1
   3cade:	d107      	bne.n	3caf0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   3cae0:	2301      	movs	r3, #1
   3cae2:	6003      	str	r3, [r0, #0]
	int err = 0;
   3cae4:	2000      	movs	r0, #0
	__asm__ volatile(
   3cae6:	f382 8811 	msr	BASEPRI, r2
   3caea:	f3bf 8f6f 	isb	sy
}
   3caee:	4770      	bx	lr
		err = -EPERM;
   3caf0:	f04f 30ff 	mov.w	r0, #4294967295
   3caf4:	e7f7      	b.n	3cae6 <set_off_state+0x22>

0003caf6 <set_starting_state>:
{
   3caf6:	b410      	push	{r4}
	__asm__ volatile(
   3caf8:	f04f 0320 	mov.w	r3, #32
   3cafc:	f3ef 8211 	mrs	r2, BASEPRI
   3cb00:	f383 8812 	msr	BASEPRI_MAX, r3
   3cb04:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3cb08:	6803      	ldr	r3, [r0, #0]
   3cb0a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3cb0e:	f003 0307 	and.w	r3, r3, #7
   3cb12:	2b01      	cmp	r3, #1
   3cb14:	d009      	beq.n	3cb2a <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   3cb16:	428c      	cmp	r4, r1
   3cb18:	d00a      	beq.n	3cb30 <set_starting_state+0x3a>
		err = -EPERM;
   3cb1a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   3cb1e:	f382 8811 	msr	BASEPRI, r2
   3cb22:	f3bf 8f6f 	isb	sy
}
   3cb26:	bc10      	pop	{r4}
   3cb28:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3cb2a:	6001      	str	r1, [r0, #0]
	int err = 0;
   3cb2c:	2000      	movs	r0, #0
   3cb2e:	e7f6      	b.n	3cb1e <set_starting_state+0x28>
		err = -EALREADY;
   3cb30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3cb34:	e7f3      	b.n	3cb1e <set_starting_state+0x28>

0003cb36 <set_on_state>:
	__asm__ volatile(
   3cb36:	f04f 0320 	mov.w	r3, #32
   3cb3a:	f3ef 8211 	mrs	r2, BASEPRI
   3cb3e:	f383 8812 	msr	BASEPRI_MAX, r3
   3cb42:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3cb46:	6803      	ldr	r3, [r0, #0]
   3cb48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3cb4c:	f043 0302 	orr.w	r3, r3, #2
   3cb50:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3cb52:	f382 8811 	msr	BASEPRI, r2
   3cb56:	f3bf 8f6f 	isb	sy
}
   3cb5a:	4770      	bx	lr

0003cb5c <clkstarted_handle>:
{
   3cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cb5e:	4606      	mov	r6, r0
   3cb60:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   3cb62:	f7ff ff9e 	bl	3caa2 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   3cb66:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   3cb68:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   3cb6a:	2300      	movs	r3, #0
   3cb6c:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   3cb70:	f7ff ffe1 	bl	3cb36 <set_on_state>
	if (callback) {
   3cb74:	b11d      	cbz	r5, 3cb7e <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3cb76:	463a      	mov	r2, r7
   3cb78:	4621      	mov	r1, r4
   3cb7a:	4630      	mov	r0, r6
   3cb7c:	47a8      	blx	r5
}
   3cb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003cb80 <async_start>:
{
   3cb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cb84:	4606      	mov	r6, r0
   3cb86:	4690      	mov	r8, r2
   3cb88:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   3cb8a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3cb8c:	4629      	mov	r1, r5
   3cb8e:	f7ff ff88 	bl	3caa2 <get_sub_data>
   3cb92:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   3cb94:	9906      	ldr	r1, [sp, #24]
   3cb96:	3008      	adds	r0, #8
   3cb98:	f7ff ffad 	bl	3caf6 <set_starting_state>
	if (err < 0) {
   3cb9c:	2800      	cmp	r0, #0
   3cb9e:	db09      	blt.n	3cbb4 <async_start+0x34>
	subdata->cb = cb;
   3cba0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   3cba4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   3cba6:	4629      	mov	r1, r5
   3cba8:	4630      	mov	r0, r6
   3cbaa:	f7ff ff81 	bl	3cab0 <get_sub_config>
   3cbae:	6803      	ldr	r3, [r0, #0]
   3cbb0:	4798      	blx	r3
	return 0;
   3cbb2:	2000      	movs	r0, #0
}
   3cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003cbb8 <api_start>:
{
   3cbb8:	b510      	push	{r4, lr}
   3cbba:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3cbbc:	2480      	movs	r4, #128	; 0x80
   3cbbe:	9400      	str	r4, [sp, #0]
   3cbc0:	f7ff ffde 	bl	3cb80 <async_start>
}
   3cbc4:	b002      	add	sp, #8
   3cbc6:	bd10      	pop	{r4, pc}

0003cbc8 <onoff_started_callback>:
{
   3cbc8:	b510      	push	{r4, lr}
   3cbca:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   3cbcc:	b2c9      	uxtb	r1, r1
   3cbce:	f7ff ff75 	bl	3cabc <get_onoff_manager>
	notify(mgr, 0);
   3cbd2:	2100      	movs	r1, #0
   3cbd4:	47a0      	blx	r4
}
   3cbd6:	bd10      	pop	{r4, pc}

0003cbd8 <hfclk_start>:
{
   3cbd8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3cbda:	2001      	movs	r0, #1
   3cbdc:	f7f4 f994 	bl	30f08 <nrfx_clock_start>
}
   3cbe0:	bd08      	pop	{r3, pc}

0003cbe2 <lfclk_start>:
{
   3cbe2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3cbe4:	2000      	movs	r0, #0
   3cbe6:	f7f4 f98f 	bl	30f08 <nrfx_clock_start>
}
   3cbea:	bd08      	pop	{r3, pc}

0003cbec <hfclk_stop>:
{
   3cbec:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3cbee:	2001      	movs	r0, #1
   3cbf0:	f7f4 f9e8 	bl	30fc4 <nrfx_clock_stop>
}
   3cbf4:	bd08      	pop	{r3, pc}

0003cbf6 <lfclk_stop>:
{
   3cbf6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3cbf8:	2000      	movs	r0, #0
   3cbfa:	f7f4 f9e3 	bl	30fc4 <nrfx_clock_stop>
}
   3cbfe:	bd08      	pop	{r3, pc}

0003cc00 <api_stop>:
{
   3cc00:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   3cc02:	2280      	movs	r2, #128	; 0x80
   3cc04:	f7ec f89a 	bl	28d3c <stop>
}
   3cc08:	bd08      	pop	{r3, pc}

0003cc0a <blocking_start_callback>:
{
   3cc0a:	b508      	push	{r3, lr}
   3cc0c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3cc0e:	f7f9 fc8b 	bl	36528 <z_impl_k_sem_give>
}
   3cc12:	bd08      	pop	{r3, pc}

0003cc14 <wait>:
{
   3cc14:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   3cc16:	f002 ffb1 	bl	3fb7c <k_is_in_isr>
   3cc1a:	b100      	cbz	r0, 3cc1e <wait+0xa>
}
   3cc1c:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   3cc1e:	2042      	movs	r0, #66	; 0x42
   3cc20:	2100      	movs	r1, #0
   3cc22:	f7fb fa61 	bl	380e8 <z_impl_k_sleep>
   3cc26:	e7f9      	b.n	3cc1c <wait+0x8>

0003cc28 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   3cc28:	f010 0f10 	tst.w	r0, #16
   3cc2c:	d104      	bne.n	3cc38 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   3cc2e:	f010 0f20 	tst.w	r0, #32
   3cc32:	d103      	bne.n	3cc3c <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   3cc34:	2000      	movs	r0, #0
   3cc36:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   3cc38:	2003      	movs	r0, #3
   3cc3a:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   3cc3c:	2001      	movs	r0, #1
}
   3cc3e:	4770      	bx	lr

0003cc40 <gpio_nrfx_port_get_raw>:
	return port->config;
   3cc40:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3cc42:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3cc44:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3cc46:	600b      	str	r3, [r1, #0]
}
   3cc48:	2000      	movs	r0, #0
   3cc4a:	4770      	bx	lr

0003cc4c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   3cc4c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3cc4e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3cc50:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3cc52:	4042      	eors	r2, r0
   3cc54:	400a      	ands	r2, r1
   3cc56:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3cc58:	605a      	str	r2, [r3, #4]
}
   3cc5a:	2000      	movs	r0, #0
   3cc5c:	4770      	bx	lr

0003cc5e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   3cc5e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3cc60:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3cc62:	6099      	str	r1, [r3, #8]
}
   3cc64:	2000      	movs	r0, #0
   3cc66:	4770      	bx	lr

0003cc68 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   3cc68:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3cc6a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3cc6c:	60d9      	str	r1, [r3, #12]
}
   3cc6e:	2000      	movs	r0, #0
   3cc70:	4770      	bx	lr

0003cc72 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   3cc72:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3cc74:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3cc76:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3cc78:	404b      	eors	r3, r1
    p_reg->OUT = value;
   3cc7a:	6053      	str	r3, [r2, #4]
}
   3cc7c:	2000      	movs	r0, #0
   3cc7e:	4770      	bx	lr

0003cc80 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   3cc80:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   3cc84:	d007      	beq.n	3cc96 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3cc86:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   3cc8a:	d00d      	beq.n	3cca8 <get_trigger+0x28>
   3cc8c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   3cc90:	d008      	beq.n	3cca4 <get_trigger+0x24>
   3cc92:	2001      	movs	r0, #1
}
   3cc94:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3cc96:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   3cc9a:	d001      	beq.n	3cca0 <get_trigger+0x20>
   3cc9c:	2005      	movs	r0, #5
   3cc9e:	4770      	bx	lr
   3cca0:	2004      	movs	r0, #4
   3cca2:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3cca4:	2002      	movs	r0, #2
   3cca6:	4770      	bx	lr
   3cca8:	2003      	movs	r0, #3
   3ccaa:	4770      	bx	lr

0003ccac <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   3ccac:	684b      	ldr	r3, [r1, #4]
   3ccae:	4403      	add	r3, r0
   3ccb0:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   3ccb2:	680b      	ldr	r3, [r1, #0]
   3ccb4:	4403      	add	r3, r0
   3ccb6:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   3ccb8:	688b      	ldr	r3, [r1, #8]
   3ccba:	1a18      	subs	r0, r3, r0
   3ccbc:	6088      	str	r0, [r1, #8]
}
   3ccbe:	4770      	bx	lr

0003ccc0 <erase_op>:
{
   3ccc0:	b538      	push	{r3, r4, r5, lr}
   3ccc2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3ccc4:	f001 ff91 	bl	3ebea <nrfx_nvmc_flash_page_size_get>
   3ccc8:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3ccca:	6860      	ldr	r0, [r4, #4]
   3cccc:	f7f5 fa82 	bl	321d4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3ccd0:	68a3      	ldr	r3, [r4, #8]
   3ccd2:	1b5b      	subs	r3, r3, r5
   3ccd4:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3ccd6:	6862      	ldr	r2, [r4, #4]
   3ccd8:	442a      	add	r2, r5
   3ccda:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
   3ccdc:	2b00      	cmp	r3, #0
   3ccde:	d1f4      	bne.n	3ccca <erase_op+0xa>
}
   3cce0:	2000      	movs	r0, #0
   3cce2:	bd38      	pop	{r3, r4, r5, pc}

0003cce4 <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   3cce4:	b500      	push	{lr}
   3cce6:	b085      	sub	sp, #20
	struct flash_context context = {
   3cce8:	2300      	movs	r3, #0
   3ccea:	9301      	str	r3, [sp, #4]
   3ccec:	9002      	str	r0, [sp, #8]
   3ccee:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   3ccf0:	a801      	add	r0, sp, #4
   3ccf2:	f7ff ffe5 	bl	3ccc0 <erase_op>
}
   3ccf6:	b005      	add	sp, #20
   3ccf8:	f85d fb04 	ldr.w	pc, [sp], #4

0003ccfc <write_op>:
{
   3ccfc:	b510      	push	{r4, lr}
   3ccfe:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   3cd00:	68a3      	ldr	r3, [r4, #8]
   3cd02:	2b03      	cmp	r3, #3
   3cd04:	d909      	bls.n	3cd1a <write_op+0x1e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3cd06:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3cd08:	6819      	ldr	r1, [r3, #0]
   3cd0a:	6860      	ldr	r0, [r4, #4]
   3cd0c:	f7f5 fa94 	bl	32238 <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   3cd10:	4621      	mov	r1, r4
   3cd12:	2004      	movs	r0, #4
   3cd14:	f7ff ffca 	bl	3ccac <shift_write_context>
   3cd18:	e7f2      	b.n	3cd00 <write_op+0x4>
	nvmc_wait_ready();
   3cd1a:	f7ec fbf9 	bl	29510 <nvmc_wait_ready>
}
   3cd1e:	2000      	movs	r0, #0
   3cd20:	bd10      	pop	{r4, pc}

0003cd22 <write>:

static int write(off_t addr, const void *data, size_t len)
{
   3cd22:	b500      	push	{lr}
   3cd24:	b085      	sub	sp, #20
	struct flash_context context = {
   3cd26:	9101      	str	r1, [sp, #4]
   3cd28:	9002      	str	r0, [sp, #8]
   3cd2a:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   3cd2c:	a801      	add	r0, sp, #4
   3cd2e:	f7ff ffe5 	bl	3ccfc <write_op>
}
   3cd32:	b005      	add	sp, #20
   3cd34:	f85d fb04 	ldr.w	pc, [sp], #4

0003cd38 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
   3cd3a:	b083      	sub	sp, #12
   3cd3c:	460e      	mov	r6, r1
   3cd3e:	4617      	mov	r7, r2
   3cd40:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   3cd42:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3cd44:	2300      	movs	r3, #0
   3cd46:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   3cd48:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   3cd4a:	6953      	ldr	r3, [r2, #20]
   3cd4c:	466a      	mov	r2, sp
   3cd4e:	a901      	add	r1, sp, #4
   3cd50:	4798      	blx	r3

	while (layout_size--) {
   3cd52:	e014      	b.n	3cd7e <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   3cd54:	6823      	ldr	r3, [r4, #0]
   3cd56:	1af3      	subs	r3, r6, r3
   3cd58:	fbb3 f5f0 	udiv	r5, r3, r0
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   3cd5c:	6813      	ldr	r3, [r2, #0]
   3cd5e:	42ab      	cmp	r3, r5
   3cd60:	bf28      	it	cs
   3cd62:	462b      	movcs	r3, r5
		info->start_offset += (index_jmp * info->size);
   3cd64:	6822      	ldr	r2, [r4, #0]
   3cd66:	fb03 2000 	mla	r0, r3, r0, r2
   3cd6a:	6020      	str	r0, [r4, #0]
		info->index += index_jmp;
   3cd6c:	68a2      	ldr	r2, [r4, #8]
   3cd6e:	441a      	add	r2, r3
   3cd70:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3cd72:	9a01      	ldr	r2, [sp, #4]
   3cd74:	6811      	ldr	r1, [r2, #0]
   3cd76:	4299      	cmp	r1, r3
   3cd78:	d811      	bhi.n	3cd9e <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   3cd7a:	3208      	adds	r2, #8
   3cd7c:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
   3cd7e:	9b00      	ldr	r3, [sp, #0]
   3cd80:	1e5a      	subs	r2, r3, #1
   3cd82:	9200      	str	r2, [sp, #0]
   3cd84:	b13b      	cbz	r3, 3cd96 <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   3cd86:	9a01      	ldr	r2, [sp, #4]
   3cd88:	6850      	ldr	r0, [r2, #4]
   3cd8a:	6060      	str	r0, [r4, #4]
		if (offs == 0) {
   3cd8c:	2e00      	cmp	r6, #0
   3cd8e:	d1e1      	bne.n	3cd54 <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   3cd90:	68a3      	ldr	r3, [r4, #8]
   3cd92:	1afd      	subs	r5, r7, r3
   3cd94:	e7e2      	b.n	3cd5c <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3cd96:	f06f 0015 	mvn.w	r0, #21
}
   3cd9a:	b003      	add	sp, #12
   3cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return 0;
   3cd9e:	2000      	movs	r0, #0
   3cda0:	e7fb      	b.n	3cd9a <flash_get_page_info+0x62>

0003cda2 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3cda2:	b508      	push	{r3, lr}
   3cda4:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3cda6:	2200      	movs	r2, #0
   3cda8:	f7ff ffc6 	bl	3cd38 <flash_get_page_info>
}
   3cdac:	bd08      	pop	{r3, pc}

0003cdae <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3cdae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3cdb2:	b086      	sub	sp, #24
   3cdb4:	4689      	mov	r9, r1
   3cdb6:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   3cdb8:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   3cdba:	695b      	ldr	r3, [r3, #20]
   3cdbc:	aa01      	add	r2, sp, #4
   3cdbe:	a905      	add	r1, sp, #20
   3cdc0:	4798      	blx	r3
	off_t off = 0;
   3cdc2:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   3cdc4:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   3cdc6:	46a2      	mov	sl, r4
   3cdc8:	9b01      	ldr	r3, [sp, #4]
   3cdca:	4553      	cmp	r3, sl
   3cdcc:	d916      	bls.n	3cdfc <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   3cdce:	9f05      	ldr	r7, [sp, #20]
   3cdd0:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   3cdd4:	687b      	ldr	r3, [r7, #4]
   3cdd6:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   3cdd8:	2500      	movs	r5, #0
   3cdda:	683b      	ldr	r3, [r7, #0]
   3cddc:	42ab      	cmp	r3, r5
   3cdde:	d90a      	bls.n	3cdf6 <flash_page_foreach+0x48>
			page_info.start_offset = off;
   3cde0:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   3cde2:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   3cde4:	4641      	mov	r1, r8
   3cde6:	a802      	add	r0, sp, #8
   3cde8:	47c8      	blx	r9
   3cdea:	b138      	cbz	r0, 3cdfc <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   3cdec:	9b03      	ldr	r3, [sp, #12]
   3cdee:	441c      	add	r4, r3
			page++;
   3cdf0:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   3cdf2:	3501      	adds	r5, #1
   3cdf4:	e7f1      	b.n	3cdda <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   3cdf6:	f10a 0a01 	add.w	sl, sl, #1
   3cdfa:	e7e5      	b.n	3cdc8 <flash_page_foreach+0x1a>
		}
	}
}
   3cdfc:	b006      	add	sp, #24
   3cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003ce02 <endtx_isr>:
	return dev->config;
   3ce02:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3ce04:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   3ce06:	f04f 0120 	mov.w	r1, #32
   3ce0a:	f3ef 8211 	mrs	r2, BASEPRI
   3ce0e:	f381 8812 	msr	BASEPRI_MAX, r1
   3ce12:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ce16:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3ce1a:	b131      	cbz	r1, 3ce2a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ce1c:	2100      	movs	r1, #0
   3ce1e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   3ce22:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ce26:	2101      	movs	r1, #1
   3ce28:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3ce2a:	f382 8811 	msr	BASEPRI, r2
   3ce2e:	f3bf 8f6f 	isb	sy
}
   3ce32:	4770      	bx	lr

0003ce34 <uarte_nrfx_configure>:
{
   3ce34:	b570      	push	{r4, r5, r6, lr}
   3ce36:	b082      	sub	sp, #8
   3ce38:	4605      	mov	r5, r0
   3ce3a:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   3ce3c:	794b      	ldrb	r3, [r1, #5]
   3ce3e:	2b01      	cmp	r3, #1
   3ce40:	d006      	beq.n	3ce50 <uarte_nrfx_configure+0x1c>
   3ce42:	2b03      	cmp	r3, #3
   3ce44:	d011      	beq.n	3ce6a <uarte_nrfx_configure+0x36>
   3ce46:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   3ce4a:	4618      	mov	r0, r3
   3ce4c:	b002      	add	sp, #8
   3ce4e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   3ce50:	2300      	movs	r3, #0
   3ce52:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   3ce56:	79a3      	ldrb	r3, [r4, #6]
   3ce58:	2b03      	cmp	r3, #3
   3ce5a:	d138      	bne.n	3cece <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
   3ce5c:	79e3      	ldrb	r3, [r4, #7]
   3ce5e:	b143      	cbz	r3, 3ce72 <uarte_nrfx_configure+0x3e>
   3ce60:	2b01      	cmp	r3, #1
   3ce62:	d010      	beq.n	3ce86 <uarte_nrfx_configure+0x52>
   3ce64:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3ce68:	e7ef      	b.n	3ce4a <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   3ce6a:	2310      	movs	r3, #16
   3ce6c:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   3ce70:	e7f1      	b.n	3ce56 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   3ce72:	2300      	movs	r3, #0
   3ce74:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   3ce78:	7923      	ldrb	r3, [r4, #4]
   3ce7a:	b143      	cbz	r3, 3ce8e <uarte_nrfx_configure+0x5a>
   3ce7c:	2b02      	cmp	r3, #2
   3ce7e:	d022      	beq.n	3cec6 <uarte_nrfx_configure+0x92>
   3ce80:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3ce84:	e7e1      	b.n	3ce4a <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   3ce86:	2301      	movs	r3, #1
   3ce88:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   3ce8c:	e7f4      	b.n	3ce78 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   3ce8e:	2300      	movs	r3, #0
   3ce90:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   3ce94:	6821      	ldr	r1, [r4, #0]
   3ce96:	4628      	mov	r0, r5
   3ce98:	f7ec fc6a 	bl	29770 <baudrate_set>
   3ce9c:	4603      	mov	r3, r0
   3ce9e:	b9c8      	cbnz	r0, 3ced4 <uarte_nrfx_configure+0xa0>
	return dev->config;
   3cea0:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   3cea2:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   3cea4:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   3cea8:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   3ceac:	f89d 2004 	ldrb.w	r2, [sp, #4]
   3ceb0:	4331      	orrs	r1, r6
   3ceb2:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   3ceb4:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   3ceb8:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   3ceba:	3204      	adds	r2, #4
   3cebc:	e894 0003 	ldmia.w	r4, {r0, r1}
   3cec0:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   3cec4:	e7c1      	b.n	3ce4a <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   3cec6:	230e      	movs	r3, #14
   3cec8:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   3cecc:	e7e2      	b.n	3ce94 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
   3cece:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3ced2:	e7ba      	b.n	3ce4a <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   3ced4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   3ced8:	e7b7      	b.n	3ce4a <uarte_nrfx_configure+0x16>

0003ceda <uarte_nrfx_config_get>:
{
   3ceda:	460b      	mov	r3, r1
	return dev->data;
   3cedc:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   3cede:	6891      	ldr	r1, [r2, #8]
   3cee0:	6850      	ldr	r0, [r2, #4]
   3cee2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3cee6:	2000      	movs	r0, #0
   3cee8:	4770      	bx	lr

0003ceea <uarte_nrfx_err_check>:
	return dev->config;
   3ceea:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3ceec:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3ceee:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3cef2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3cef6:	4770      	bx	lr

0003cef8 <is_tx_ready>:
	return dev->config;
   3cef8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3cefa:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3cefc:	685b      	ldr	r3, [r3, #4]
   3cefe:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3cf02:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3cf06:	b929      	cbnz	r1, 3cf14 <is_tx_ready+0x1c>
   3cf08:	b933      	cbnz	r3, 3cf18 <is_tx_ready+0x20>
   3cf0a:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   3cf0e:	b92b      	cbnz	r3, 3cf1c <is_tx_ready+0x24>
   3cf10:	2000      	movs	r0, #0
   3cf12:	4770      	bx	lr
   3cf14:	2001      	movs	r0, #1
   3cf16:	4770      	bx	lr
   3cf18:	2000      	movs	r0, #0
   3cf1a:	4770      	bx	lr
   3cf1c:	2001      	movs	r0, #1
}
   3cf1e:	4770      	bx	lr

0003cf20 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   3cf20:	4770      	bx	lr

0003cf22 <user_callback>:
{
   3cf22:	b508      	push	{r3, lr}
	return dev->data;
   3cf24:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
   3cf26:	68da      	ldr	r2, [r3, #12]
   3cf28:	6813      	ldr	r3, [r2, #0]
   3cf2a:	b10b      	cbz	r3, 3cf30 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
   3cf2c:	6852      	ldr	r2, [r2, #4]
   3cf2e:	4798      	blx	r3
}
   3cf30:	bd08      	pop	{r3, pc}

0003cf32 <notify_uart_rx_rdy>:
{
   3cf32:	b500      	push	{lr}
   3cf34:	b087      	sub	sp, #28
	return dev->data;
   3cf36:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
   3cf38:	2300      	movs	r3, #0
   3cf3a:	9301      	str	r3, [sp, #4]
   3cf3c:	9302      	str	r3, [sp, #8]
   3cf3e:	9303      	str	r3, [sp, #12]
   3cf40:	9304      	str	r3, [sp, #16]
   3cf42:	9305      	str	r3, [sp, #20]
   3cf44:	2302      	movs	r3, #2
   3cf46:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   3cf4a:	68d3      	ldr	r3, [r2, #12]
   3cf4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	struct uart_event evt = {
   3cf4e:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
   3cf50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	struct uart_event evt = {
   3cf52:	9303      	str	r3, [sp, #12]
   3cf54:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
   3cf56:	a901      	add	r1, sp, #4
   3cf58:	f7ff ffe3 	bl	3cf22 <user_callback>
}
   3cf5c:	b007      	add	sp, #28
   3cf5e:	f85d fb04 	ldr.w	pc, [sp], #4

0003cf62 <notify_rx_buf_release>:
	if (*buf) {
   3cf62:	680b      	ldr	r3, [r1, #0]
   3cf64:	b1ab      	cbz	r3, 3cf92 <notify_rx_buf_release+0x30>
{
   3cf66:	b530      	push	{r4, r5, lr}
   3cf68:	b087      	sub	sp, #28
   3cf6a:	460c      	mov	r4, r1
   3cf6c:	4615      	mov	r5, r2
		struct uart_event evt = {
   3cf6e:	2300      	movs	r3, #0
   3cf70:	9301      	str	r3, [sp, #4]
   3cf72:	9303      	str	r3, [sp, #12]
   3cf74:	9304      	str	r3, [sp, #16]
   3cf76:	9305      	str	r3, [sp, #20]
   3cf78:	2304      	movs	r3, #4
   3cf7a:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
   3cf7e:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
   3cf80:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
   3cf82:	a901      	add	r1, sp, #4
   3cf84:	f7ff ffcd 	bl	3cf22 <user_callback>
		if (clear) {
   3cf88:	b10d      	cbz	r5, 3cf8e <notify_rx_buf_release+0x2c>
			*buf = NULL;
   3cf8a:	2300      	movs	r3, #0
   3cf8c:	6023      	str	r3, [r4, #0]
}
   3cf8e:	b007      	add	sp, #28
   3cf90:	bd30      	pop	{r4, r5, pc}
   3cf92:	4770      	bx	lr

0003cf94 <notify_rx_disable>:
{
   3cf94:	b500      	push	{lr}
   3cf96:	b087      	sub	sp, #28
	struct uart_event evt = {
   3cf98:	2300      	movs	r3, #0
   3cf9a:	9301      	str	r3, [sp, #4]
   3cf9c:	9302      	str	r3, [sp, #8]
   3cf9e:	9303      	str	r3, [sp, #12]
   3cfa0:	9304      	str	r3, [sp, #16]
   3cfa2:	9305      	str	r3, [sp, #20]
   3cfa4:	2305      	movs	r3, #5
   3cfa6:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   3cfaa:	a901      	add	r1, sp, #4
   3cfac:	f7ff ffb9 	bl	3cf22 <user_callback>
}
   3cfb0:	b007      	add	sp, #28
   3cfb2:	f85d fb04 	ldr.w	pc, [sp], #4

0003cfb6 <uarte_nrfx_rx_buf_rsp>:
{
   3cfb6:	b470      	push	{r4, r5, r6}
	return dev->data;
   3cfb8:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   3cfba:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3cfbc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   3cfbe:	f04f 0020 	mov.w	r0, #32
   3cfc2:	f3ef 8511 	mrs	r5, BASEPRI
   3cfc6:	f380 8812 	msr	BASEPRI_MAX, r0
   3cfca:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   3cfce:	68e0      	ldr	r0, [r4, #12]
   3cfd0:	6e06      	ldr	r6, [r0, #96]	; 0x60
   3cfd2:	b1ae      	cbz	r6, 3d000 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
   3cfd4:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
   3cfd6:	b9b6      	cbnz	r6, 3d006 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
   3cfd8:	66c1      	str	r1, [r0, #108]	; 0x6c
		data->async->rx_next_buf_len = len;
   3cfda:	68e0      	ldr	r0, [r4, #12]
   3cfdc:	6702      	str	r2, [r0, #112]	; 0x70
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3cfde:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3cfe2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   3cfe6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3cfea:	f042 0220 	orr.w	r2, r2, #32
   3cfee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
   3cff2:	2000      	movs	r0, #0
	__asm__ volatile(
   3cff4:	f385 8811 	msr	BASEPRI, r5
   3cff8:	f3bf 8f6f 	isb	sy
}
   3cffc:	bc70      	pop	{r4, r5, r6}
   3cffe:	4770      	bx	lr
		err = -EACCES;
   3d000:	f06f 000c 	mvn.w	r0, #12
   3d004:	e7f6      	b.n	3cff4 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
   3d006:	f06f 000f 	mvn.w	r0, #15
   3d00a:	e7f3      	b.n	3cff4 <uarte_nrfx_rx_buf_rsp+0x3e>

0003d00c <uarte_nrfx_callback_set>:
	return dev->data;
   3d00c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   3d00e:	68d8      	ldr	r0, [r3, #12]
   3d010:	b120      	cbz	r0, 3d01c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   3d012:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   3d014:	68db      	ldr	r3, [r3, #12]
   3d016:	605a      	str	r2, [r3, #4]
	return 0;
   3d018:	2000      	movs	r0, #0
   3d01a:	4770      	bx	lr
		return -ENOTSUP;
   3d01c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   3d020:	4770      	bx	lr

0003d022 <uarte_nrfx_poll_in>:
	return dev->data;
   3d022:	6902      	ldr	r2, [r0, #16]
	return dev->config;
   3d024:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d026:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   3d028:	68d0      	ldr	r0, [r2, #12]
   3d02a:	b960      	cbnz	r0, 3d046 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d02c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3d030:	b160      	cbz	r0, 3d04c <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   3d032:	7d52      	ldrb	r2, [r2, #21]
   3d034:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d036:	2000      	movs	r0, #0
   3d038:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3d03c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d040:	2201      	movs	r2, #1
   3d042:	601a      	str	r2, [r3, #0]
	return 0;
   3d044:	4770      	bx	lr
		return -ENOTSUP;
   3d046:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d04a:	4770      	bx	lr
		return -1;
   3d04c:	f04f 30ff 	mov.w	r0, #4294967295
}
   3d050:	4770      	bx	lr

0003d052 <wait_for_tx_stopped>:
{
   3d052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   3d054:	6842      	ldr	r2, [r0, #4]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3d056:	6857      	ldr	r7, [r2, #4]
	return config->uarte_regs;
   3d058:	6815      	ldr	r5, [r2, #0]
	if (!ppi_endtx) {
   3d05a:	f017 0702 	ands.w	r7, r7, #2
   3d05e:	d118      	bne.n	3d092 <wait_for_tx_stopped+0x40>
   3d060:	4606      	mov	r6, r0
    p_reg->INTENCLR = mask;
   3d062:	f44f 7380 	mov.w	r3, #256	; 0x100
   3d066:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   3d06a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3d06e:	4630      	mov	r0, r6
   3d070:	f7ff ff42 	bl	3cef8 <is_tx_ready>
   3d074:	b920      	cbnz	r0, 3d080 <wait_for_tx_stopped+0x2e>
   3d076:	2001      	movs	r0, #1
   3d078:	f001 fd70 	bl	3eb5c <nrfx_busy_wait>
   3d07c:	3c01      	subs	r4, #1
   3d07e:	d1f6      	bne.n	3d06e <wait_for_tx_stopped+0x1c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d080:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3d084:	b92b      	cbnz	r3, 3d092 <wait_for_tx_stopped+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d086:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   3d08a:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d08e:	2301      	movs	r3, #1
   3d090:	60eb      	str	r3, [r5, #12]
		NRFX_WAIT_FOR(is_tx_ready(dev), 1000, 1, res);
   3d092:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d096:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED),
   3d09a:	b923      	cbnz	r3, 3d0a6 <wait_for_tx_stopped+0x54>
   3d09c:	2001      	movs	r0, #1
   3d09e:	f001 fd5d 	bl	3eb5c <nrfx_busy_wait>
   3d0a2:	3c01      	subs	r4, #1
   3d0a4:	d1f7      	bne.n	3d096 <wait_for_tx_stopped+0x44>
	if (!ppi_endtx) {
   3d0a6:	b91f      	cbnz	r7, 3d0b0 <wait_for_tx_stopped+0x5e>
    p_reg->INTENSET = mask;
   3d0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
   3d0ac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   3d0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003d0b2 <uart_disable>:
{
   3d0b2:	b538      	push	{r3, r4, r5, lr}
   3d0b4:	4604      	mov	r4, r0
	return dev->data;
   3d0b6:	6905      	ldr	r5, [r0, #16]
	if (data->async && hw_rx_counting_enabled(data)) {
   3d0b8:	68eb      	ldr	r3, [r5, #12]
   3d0ba:	b113      	cbz	r3, 3d0c2 <uart_disable+0x10>
		return data->async->hw_rx_counting;
   3d0bc:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
	if (data->async && hw_rx_counting_enabled(data)) {
   3d0c0:	b92b      	cbnz	r3, 3d0ce <uart_disable+0x1c>
	return dev->config;
   3d0c2:	6863      	ldr	r3, [r4, #4]
	return config->uarte_regs;
   3d0c4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3d0c6:	2200      	movs	r2, #0
   3d0c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3d0cc:	bd38      	pop	{r3, r4, r5, pc}
	return dev->config;
   3d0ce:	6840      	ldr	r0, [r0, #4]
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   3d0d0:	3020      	adds	r0, #32
   3d0d2:	f7f5 f9a1 	bl	32418 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   3d0d6:	68ea      	ldr	r2, [r5, #12]
   3d0d8:	2300      	movs	r3, #0
   3d0da:	6753      	str	r3, [r2, #116]	; 0x74
		data->async->rx_total_user_byte_cnt = 0;
   3d0dc:	68ea      	ldr	r2, [r5, #12]
   3d0de:	6793      	str	r3, [r2, #120]	; 0x78
   3d0e0:	e7ef      	b.n	3d0c2 <uart_disable+0x10>

0003d0e2 <wait_tx_ready>:
{
   3d0e2:	b570      	push	{r4, r5, r6, lr}
   3d0e4:	4606      	mov	r6, r0
   3d0e6:	e014      	b.n	3d112 <wait_tx_ready+0x30>
		if (res) {
   3d0e8:	b17d      	cbz	r5, 3d10a <wait_tx_ready+0x28>
	__asm__ volatile(
   3d0ea:	f04f 0320 	mov.w	r3, #32
   3d0ee:	f3ef 8411 	mrs	r4, BASEPRI
   3d0f2:	f383 8812 	msr	BASEPRI_MAX, r3
   3d0f6:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   3d0fa:	4630      	mov	r0, r6
   3d0fc:	f7ff fefc 	bl	3cef8 <is_tx_ready>
   3d100:	b9a0      	cbnz	r0, 3d12c <wait_tx_ready+0x4a>
	__asm__ volatile(
   3d102:	f384 8811 	msr	BASEPRI, r4
   3d106:	f3bf 8f6f 	isb	sy
   3d10a:	2021      	movs	r0, #33	; 0x21
   3d10c:	2100      	movs	r1, #0
   3d10e:	f7fa ffeb 	bl	380e8 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   3d112:	2464      	movs	r4, #100	; 0x64
   3d114:	4630      	mov	r0, r6
   3d116:	f7ff feef 	bl	3cef8 <is_tx_ready>
   3d11a:	4605      	mov	r5, r0
   3d11c:	2800      	cmp	r0, #0
   3d11e:	d1e3      	bne.n	3d0e8 <wait_tx_ready+0x6>
   3d120:	2001      	movs	r0, #1
   3d122:	f001 fd1b 	bl	3eb5c <nrfx_busy_wait>
   3d126:	3c01      	subs	r4, #1
   3d128:	d1f4      	bne.n	3d114 <wait_tx_ready+0x32>
   3d12a:	e7dd      	b.n	3d0e8 <wait_tx_ready+0x6>
}
   3d12c:	4620      	mov	r0, r4
   3d12e:	bd70      	pop	{r4, r5, r6, pc}

0003d130 <uarte_enable>:
{
   3d130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d132:	4604      	mov	r4, r0
	return dev->data;
   3d134:	6906      	ldr	r6, [r0, #16]
	if (data->async) {
   3d136:	68f3      	ldr	r3, [r6, #12]
   3d138:	b14b      	cbz	r3, 3d14e <uarte_enable+0x1e>
		bool disabled = data->async->low_power_mask == 0;
   3d13a:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		data->async->low_power_mask |= mask;
   3d13e:	4329      	orrs	r1, r5
   3d140:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
		return data->async->hw_rx_counting;
   3d144:	68f3      	ldr	r3, [r6, #12]
   3d146:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
		if (hw_rx_counting_enabled(data) && disabled) {
   3d14a:	b103      	cbz	r3, 3d14e <uarte_enable+0x1e>
   3d14c:	b12d      	cbz	r5, 3d15a <uarte_enable+0x2a>
	return dev->config;
   3d14e:	6863      	ldr	r3, [r4, #4]
	return config->uarte_regs;
   3d150:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3d152:	2208      	movs	r2, #8
   3d154:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3d158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return dev->config;
   3d15a:	6847      	ldr	r7, [r0, #4]
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   3d15c:	3720      	adds	r7, #32
			nrfx_timer_enable(timer);
   3d15e:	4638      	mov	r0, r7
   3d160:	f7f5 f932 	bl	323c8 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   3d164:	e003      	b.n	3d16e <uarte_enable+0x3e>
				nrfx_timer_increment(timer);
   3d166:	4638      	mov	r0, r7
   3d168:	f7f5 f9bc 	bl	324e4 <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   3d16c:	3501      	adds	r5, #1
   3d16e:	68f3      	ldr	r3, [r6, #12]
   3d170:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
   3d174:	42ab      	cmp	r3, r5
   3d176:	dcf6      	bgt.n	3d166 <uarte_enable+0x36>
   3d178:	e7e9      	b.n	3d14e <uarte_enable+0x1e>

0003d17a <tx_start>:
{
   3d17a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d17c:	b083      	sub	sp, #12
   3d17e:	4605      	mov	r5, r0
   3d180:	460f      	mov	r7, r1
   3d182:	4616      	mov	r6, r2
	return dev->config;
   3d184:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d186:	681c      	ldr	r4, [r3, #0]
	(void)pm_device_state_get(dev, &state);
   3d188:	f10d 0107 	add.w	r1, sp, #7
   3d18c:	f7ff fa52 	bl	3c634 <pm_device_state_get>
	if (state != PM_DEVICE_STATE_ACTIVE) {
   3d190:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3d194:	b993      	cbnz	r3, 3d1bc <tx_start+0x42>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3d196:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3d19a:	f8c4 6548 	str.w	r6, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d19e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   3d1a2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   3d1a6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   3d1aa:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   3d1ae:	686b      	ldr	r3, [r5, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3d1b0:	685b      	ldr	r3, [r3, #4]
   3d1b2:	f013 0f10 	tst.w	r3, #16
   3d1b6:	d103      	bne.n	3d1c0 <tx_start+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d1b8:	2301      	movs	r3, #1
   3d1ba:	60a3      	str	r3, [r4, #8]
}
   3d1bc:	b003      	add	sp, #12
   3d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   3d1c0:	2101      	movs	r1, #1
   3d1c2:	4628      	mov	r0, r5
   3d1c4:	f7ff ffb4 	bl	3d130 <uarte_enable>
    p_reg->INTENSET = mask;
   3d1c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3d1cc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   3d1d0:	e7f2      	b.n	3d1b8 <tx_start+0x3e>

0003d1d2 <start_tx_locked>:
{
   3d1d2:	b538      	push	{r3, r4, r5, lr}
   3d1d4:	4605      	mov	r5, r0
   3d1d6:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
   3d1d8:	f7ff fe8e 	bl	3cef8 <is_tx_ready>
   3d1dc:	b920      	cbnz	r0, 3d1e8 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   3d1de:	68e3      	ldr	r3, [r4, #12]
   3d1e0:	2201      	movs	r2, #1
   3d1e2:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
   3d1e6:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
   3d1e8:	68e3      	ldr	r3, [r4, #12]
   3d1ea:	2200      	movs	r2, #0
   3d1ec:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   3d1f0:	68e3      	ldr	r3, [r4, #12]
   3d1f2:	f04f 32ff 	mov.w	r2, #4294967295
   3d1f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   3d1fa:	68e3      	ldr	r3, [r4, #12]
   3d1fc:	695a      	ldr	r2, [r3, #20]
   3d1fe:	6919      	ldr	r1, [r3, #16]
   3d200:	4628      	mov	r0, r5
   3d202:	f7ff ffba 	bl	3d17a <tx_start>
}
   3d206:	e7ee      	b.n	3d1e6 <start_tx_locked+0x14>

0003d208 <uarte_nrfx_rx_disable>:
{
   3d208:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
   3d20a:	6905      	ldr	r5, [r0, #16]
	return dev->config;
   3d20c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d20e:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   3d210:	68eb      	ldr	r3, [r5, #12]
   3d212:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   3d214:	b1ba      	cbz	r2, 3d246 <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   3d216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   3d218:	b153      	cbz	r3, 3d230 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   3d21a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   3d21e:	f023 0320 	bic.w	r3, r3, #32
   3d222:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d226:	2300      	movs	r3, #0
   3d228:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3d22c:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   3d230:	68e8      	ldr	r0, [r5, #12]
   3d232:	3088      	adds	r0, #136	; 0x88
	z_impl_k_timer_stop(timer);
   3d234:	f002 fdb2 	bl	3fd9c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   3d238:	68eb      	ldr	r3, [r5, #12]
   3d23a:	2000      	movs	r0, #0
   3d23c:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d240:	2301      	movs	r3, #1
   3d242:	6063      	str	r3, [r4, #4]
}
   3d244:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3d246:	f06f 000d 	mvn.w	r0, #13
   3d24a:	e7fb      	b.n	3d244 <uarte_nrfx_rx_disable+0x3c>

0003d24c <error_isr>:
{
   3d24c:	b510      	push	{r4, lr}
   3d24e:	b086      	sub	sp, #24
   3d250:	4604      	mov	r4, r0
	return dev->config;
   3d252:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d254:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3d256:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3d25a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
   3d25e:	2300      	movs	r3, #0
   3d260:	9301      	str	r3, [sp, #4]
   3d262:	9302      	str	r3, [sp, #8]
   3d264:	9303      	str	r3, [sp, #12]
   3d266:	9304      	str	r3, [sp, #16]
   3d268:	9305      	str	r3, [sp, #20]
   3d26a:	2306      	movs	r3, #6
   3d26c:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   3d270:	f012 0f01 	tst.w	r2, #1
   3d274:	d108      	bne.n	3d288 <error_isr+0x3c>
   3d276:	f012 0f02 	tst.w	r2, #2
   3d27a:	d111      	bne.n	3d2a0 <error_isr+0x54>
   3d27c:	f012 0f04 	tst.w	r2, #4
   3d280:	d110      	bne.n	3d2a4 <error_isr+0x58>
   3d282:	f002 0208 	and.w	r2, r2, #8
   3d286:	e000      	b.n	3d28a <error_isr+0x3e>
   3d288:	2201      	movs	r2, #1
	struct uart_event evt = {
   3d28a:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
   3d28e:	a901      	add	r1, sp, #4
   3d290:	4620      	mov	r0, r4
   3d292:	f7ff fe46 	bl	3cf22 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   3d296:	4620      	mov	r0, r4
   3d298:	f7ff ffb6 	bl	3d208 <uarte_nrfx_rx_disable>
}
   3d29c:	b006      	add	sp, #24
   3d29e:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   3d2a0:	2202      	movs	r2, #2
   3d2a2:	e7f2      	b.n	3d28a <error_isr+0x3e>
   3d2a4:	2204      	movs	r2, #4
   3d2a6:	e7f0      	b.n	3d28a <error_isr+0x3e>

0003d2a8 <uarte_nrfx_tx_abort>:
{
   3d2a8:	b538      	push	{r3, r4, r5, lr}
	return dev->data;
   3d2aa:	6903      	ldr	r3, [r0, #16]
	return dev->config;
   3d2ac:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3d2ae:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   3d2b0:	68da      	ldr	r2, [r3, #12]
   3d2b2:	6891      	ldr	r1, [r2, #8]
   3d2b4:	b151      	cbz	r1, 3d2cc <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   3d2b6:	2400      	movs	r4, #0
   3d2b8:	f882 40d4 	strb.w	r4, [r2, #212]	; 0xd4
	k_timer_stop(&data->async->tx_timeout_timer);
   3d2bc:	68d8      	ldr	r0, [r3, #12]
   3d2be:	3028      	adds	r0, #40	; 0x28
   3d2c0:	f002 fd6c 	bl	3fd9c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d2c4:	2301      	movs	r3, #1
   3d2c6:	60eb      	str	r3, [r5, #12]
	return 0;
   3d2c8:	4620      	mov	r0, r4
}
   3d2ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3d2cc:	f06f 000d 	mvn.w	r0, #13
   3d2d0:	e7fb      	b.n	3d2ca <uarte_nrfx_tx_abort+0x22>

0003d2d2 <tx_timeout>:
{
   3d2d2:	b508      	push	{r3, lr}
	return timer->user_data;
   3d2d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
   3d2d6:	6818      	ldr	r0, [r3, #0]
   3d2d8:	f7ff ffe6 	bl	3d2a8 <uarte_nrfx_tx_abort>
}
   3d2dc:	bd08      	pop	{r3, pc}

0003d2de <endrx_isr>:
{
   3d2de:	b570      	push	{r4, r5, r6, lr}
   3d2e0:	4605      	mov	r5, r0
	return dev->data;
   3d2e2:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   3d2e4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d2e6:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   3d2e8:	68e3      	ldr	r3, [r4, #12]
   3d2ea:	2201      	movs	r2, #1
   3d2ec:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	k_timer_stop(&data->async->rx_timeout_timer);
   3d2f0:	68e0      	ldr	r0, [r4, #12]
   3d2f2:	3088      	adds	r0, #136	; 0x88
   3d2f4:	f002 fd52 	bl	3fd9c <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   3d2f8:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
   3d2fc:	68e3      	ldr	r3, [r4, #12]
   3d2fe:	f893 10d1 	ldrb.w	r1, [r3, #209]	; 0xd1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   3d302:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
   3d304:	2200      	movs	r2, #0
   3d306:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
   3d30a:	68e3      	ldr	r3, [r4, #12]
   3d30c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
	if (rx_len < 0) {
   3d30e:	1a89      	subs	r1, r1, r2
   3d310:	d40b      	bmi.n	3d32a <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
   3d312:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3d314:	440a      	add	r2, r1
   3d316:	679a      	str	r2, [r3, #120]	; 0x78
	if (rx_len > 0) {
   3d318:	2900      	cmp	r1, #0
   3d31a:	dc08      	bgt.n	3d32e <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
   3d31c:	68e1      	ldr	r1, [r4, #12]
   3d31e:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
   3d322:	b943      	cbnz	r3, 3d336 <endrx_isr+0x58>
		data->async->is_in_irq = false;
   3d324:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
}
   3d328:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
   3d32a:	2100      	movs	r1, #0
   3d32c:	e7f1      	b.n	3d312 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
   3d32e:	4628      	mov	r0, r5
   3d330:	f7ff fdff 	bl	3cf32 <notify_uart_rx_rdy>
   3d334:	e7f2      	b.n	3d31c <endrx_isr+0x3e>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   3d336:	2200      	movs	r2, #0
   3d338:	3160      	adds	r1, #96	; 0x60
   3d33a:	4628      	mov	r0, r5
   3d33c:	f7ff fe11 	bl	3cf62 <notify_rx_buf_release>
	__asm__ volatile(
   3d340:	f04f 0320 	mov.w	r3, #32
   3d344:	f3ef 8111 	mrs	r1, BASEPRI
   3d348:	f383 8812 	msr	BASEPRI_MAX, r3
   3d34c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   3d350:	68e3      	ldr	r3, [r4, #12]
   3d352:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   3d354:	b1f2      	cbz	r2, 3d394 <endrx_isr+0xb6>
		data->async->rx_buf = data->async->rx_next_buf;
   3d356:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   3d358:	68e3      	ldr	r3, [r4, #12]
   3d35a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3d35c:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
   3d35e:	68e2      	ldr	r2, [r4, #12]
   3d360:	2300      	movs	r3, #0
   3d362:	66d3      	str	r3, [r2, #108]	; 0x6c
		data->async->rx_next_buf_len = 0;
   3d364:	68e2      	ldr	r2, [r4, #12]
   3d366:	6713      	str	r3, [r2, #112]	; 0x70
		data->async->rx_offset = 0;
   3d368:	68e2      	ldr	r2, [r4, #12]
   3d36a:	6693      	str	r3, [r2, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d36c:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   3d370:	b90b      	cbnz	r3, 3d376 <endrx_isr+0x98>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d372:	2301      	movs	r3, #1
   3d374:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   3d376:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
   3d37a:	f023 0320 	bic.w	r3, r3, #32
   3d37e:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
   3d382:	f381 8811 	msr	BASEPRI, r1
   3d386:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   3d38a:	68e3      	ldr	r3, [r4, #12]
   3d38c:	2200      	movs	r2, #0
   3d38e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
   3d392:	e7c9      	b.n	3d328 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d394:	2301      	movs	r3, #1
   3d396:	6073      	str	r3, [r6, #4]
}
   3d398:	e7f3      	b.n	3d382 <endrx_isr+0xa4>

0003d39a <setup_tx_cache>:
{
   3d39a:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   3d39c:	68c3      	ldr	r3, [r0, #12]
   3d39e:	68da      	ldr	r2, [r3, #12]
   3d3a0:	6a19      	ldr	r1, [r3, #32]
	if (!remaining) {
   3d3a2:	1a52      	subs	r2, r2, r1
   3d3a4:	d010      	beq.n	3d3c8 <setup_tx_cache+0x2e>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   3d3a6:	2a08      	cmp	r2, #8
   3d3a8:	bf28      	it	cs
   3d3aa:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   3d3ac:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   3d3ae:	68c3      	ldr	r3, [r0, #12]
   3d3b0:	f103 0118 	add.w	r1, r3, #24
   3d3b4:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   3d3b6:	68c0      	ldr	r0, [r0, #12]
   3d3b8:	6881      	ldr	r1, [r0, #8]
   3d3ba:	6a03      	ldr	r3, [r0, #32]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3d3bc:	4419      	add	r1, r3
   3d3be:	3018      	adds	r0, #24
   3d3c0:	f002 fd9e 	bl	3ff00 <memcpy>
	return true;
   3d3c4:	2001      	movs	r0, #1
}
   3d3c6:	bd08      	pop	{r3, pc}
		return false;
   3d3c8:	2000      	movs	r0, #0
   3d3ca:	e7fc      	b.n	3d3c6 <setup_tx_cache+0x2c>

0003d3cc <rx_timeout>:
{
   3d3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d3ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
   3d3d0:	6826      	ldr	r6, [r4, #0]
	return dev->config;
   3d3d2:	6870      	ldr	r0, [r6, #4]
	if (data->async->is_in_irq) {
   3d3d4:	68e3      	ldr	r3, [r4, #12]
   3d3d6:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
   3d3da:	2b00      	cmp	r3, #0
   3d3dc:	d141      	bne.n	3d462 <rx_timeout+0x96>
   3d3de:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
   3d3e2:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   3d3e4:	2210      	movs	r2, #16
   3d3e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		return data->async->hw_rx_counting;
   3d3ea:	68e3      	ldr	r3, [r4, #12]
   3d3ec:	f893 20d3 	ldrb.w	r2, [r3, #211]	; 0xd3
	if (hw_rx_counting_enabled(data)) {
   3d3f0:	2a00      	cmp	r2, #0
   3d3f2:	d137      	bne.n	3d464 <rx_timeout+0x98>
		read = data->async->rx_cnt.cnt;
   3d3f4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
   3d3f8:	68e3      	ldr	r3, [r4, #12]
   3d3fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   3d3fc:	4282      	cmp	r2, r0
   3d3fe:	d004      	beq.n	3d40a <rx_timeout+0x3e>
		data->async->rx_total_byte_cnt = read;
   3d400:	6758      	str	r0, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   3d402:	68e3      	ldr	r3, [r4, #12]
   3d404:	6fda      	ldr	r2, [r3, #124]	; 0x7c
   3d406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	int32_t len = data->async->rx_total_byte_cnt
   3d40a:	68e3      	ldr	r3, [r4, #12]
   3d40c:	6f5d      	ldr	r5, [r3, #116]	; 0x74
		    - data->async->rx_total_user_byte_cnt;
   3d40e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3d410:	1aad      	subs	r5, r5, r2
		return data->async->hw_rx_counting;
   3d412:	f893 10d3 	ldrb.w	r1, [r3, #211]	; 0xd3
	if (!hw_rx_counting_enabled(data) &&
   3d416:	b909      	cbnz	r1, 3d41c <rx_timeout+0x50>
   3d418:	2d00      	cmp	r5, #0
   3d41a:	db28      	blt.n	3d46e <rx_timeout+0xa2>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3d41c:	68e3      	ldr	r3, [r4, #12]
   3d41e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   3d420:	18a8      	adds	r0, r5, r2
   3d422:	6e59      	ldr	r1, [r3, #100]	; 0x64
   3d424:	4288      	cmp	r0, r1
   3d426:	d901      	bls.n	3d42c <rx_timeout+0x60>
		len = data->async->rx_buf_len - data->async->rx_offset;
   3d428:	1a8d      	subs	r5, r1, r2
		clipped = true;
   3d42a:	2701      	movs	r7, #1
	if (len > 0) {
   3d42c:	2d00      	cmp	r5, #0
   3d42e:	dd13      	ble.n	3d458 <rx_timeout+0x8c>
		if (clipped ||
   3d430:	b92f      	cbnz	r7, 3d43e <rx_timeout+0x72>
			(data->async->rx_timeout_left
   3d432:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
				< data->async->rx_timeout_slab)) {
   3d436:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		if (clipped ||
   3d43a:	428a      	cmp	r2, r1
   3d43c:	da1b      	bge.n	3d476 <rx_timeout+0xaa>
			notify_uart_rx_rdy(dev, len);
   3d43e:	4629      	mov	r1, r5
   3d440:	4630      	mov	r0, r6
   3d442:	f7ff fd76 	bl	3cf32 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   3d446:	68e2      	ldr	r2, [r4, #12]
   3d448:	6e93      	ldr	r3, [r2, #104]	; 0x68
   3d44a:	442b      	add	r3, r5
   3d44c:	6693      	str	r3, [r2, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   3d44e:	68e2      	ldr	r2, [r4, #12]
   3d450:	6f93      	ldr	r3, [r2, #120]	; 0x78
   3d452:	441d      	add	r5, r3
   3d454:	6795      	str	r5, [r2, #120]	; 0x78
		if (clipped) {
   3d456:	b997      	cbnz	r7, 3d47e <rx_timeout+0xb2>
	return dev->config;
   3d458:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
   3d45a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3d45c:	2210      	movs	r2, #16
   3d45e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3d462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		read = nrfx_timer_capture(&cfg->timer, 0);
   3d464:	2100      	movs	r1, #0
   3d466:	3020      	adds	r0, #32
   3d468:	f7f5 f86c 	bl	32544 <nrfx_timer_capture>
   3d46c:	e7c4      	b.n	3d3f8 <rx_timeout+0x2c>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   3d46e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		len = 0;
   3d472:	2500      	movs	r5, #0
   3d474:	e7d2      	b.n	3d41c <rx_timeout+0x50>
			data->async->rx_timeout_left -=
   3d476:	1a52      	subs	r2, r2, r1
   3d478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   3d47c:	e7eb      	b.n	3d456 <rx_timeout+0x8a>
			k_timer_stop(&data->async->rx_timeout_timer);
   3d47e:	68e0      	ldr	r0, [r4, #12]
   3d480:	3088      	adds	r0, #136	; 0x88
   3d482:	f002 fc8b 	bl	3fd9c <z_impl_k_timer_stop>
}
   3d486:	e7e7      	b.n	3d458 <rx_timeout+0x8c>

0003d488 <rx_flush>:
{
   3d488:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d48a:	b083      	sub	sp, #12
	return dev->config;
   3d48c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d48e:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
   3d490:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   3d494:	460d      	mov	r5, r1
   3d496:	b311      	cbz	r1, 3d4de <rx_flush+0x56>
   3d498:	4616      	mov	r6, r2
	if (buf) {
   3d49a:	b315      	cbz	r5, 3d4e2 <rx_flush+0x5a>
__ssp_bos_icheck3(memset, void *, int)
   3d49c:	2100      	movs	r1, #0
   3d49e:	4628      	mov	r0, r5
   3d4a0:	f002 fd4e 	bl	3ff40 <memset>
		flush_buf = buf;
   3d4a4:	462b      	mov	r3, r5
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3d4a6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3d4aa:	f8c4 6538 	str.w	r6, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d4ae:	2300      	movs	r3, #0
   3d4b0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3d4b4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d4b8:	2301      	movs	r3, #1
   3d4ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d4bc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3d4c0:	2b00      	cmp	r3, #0
   3d4c2:	d0fb      	beq.n	3d4bc <rx_flush+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d4c4:	2300      	movs	r3, #0
   3d4c6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3d4ca:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
   3d4ce:	b155      	cbz	r5, 3d4e6 <rx_flush+0x5e>
    return p_reg->RXD.AMOUNT;
   3d4d0:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
   3d4d4:	4287      	cmp	r7, r0
   3d4d6:	d00c      	beq.n	3d4f2 <rx_flush+0x6a>
		return rx_amount;
   3d4d8:	b2c0      	uxtb	r0, r0
}
   3d4da:	b003      	add	sp, #12
   3d4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t flush_len = buf ? len : sizeof(tmp_buf);
   3d4de:	2605      	movs	r6, #5
   3d4e0:	e7db      	b.n	3d49a <rx_flush+0x12>
		flush_buf = tmp_buf;
   3d4e2:	466b      	mov	r3, sp
   3d4e4:	e7df      	b.n	3d4a6 <rx_flush+0x1e>
   3d4e6:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
   3d4ea:	b2c0      	uxtb	r0, r0
   3d4ec:	e7f5      	b.n	3d4da <rx_flush+0x52>
			return rx_amount;
   3d4ee:	b2c0      	uxtb	r0, r0
   3d4f0:	e7f3      	b.n	3d4da <rx_flush+0x52>
	for (int i = 0; i < flush_len; i++) {
   3d4f2:	2300      	movs	r3, #0
   3d4f4:	42b3      	cmp	r3, r6
   3d4f6:	d204      	bcs.n	3d502 <rx_flush+0x7a>
		if (buf[i] != dirty) {
   3d4f8:	5cea      	ldrb	r2, [r5, r3]
   3d4fa:	2a00      	cmp	r2, #0
   3d4fc:	d1f7      	bne.n	3d4ee <rx_flush+0x66>
	for (int i = 0; i < flush_len; i++) {
   3d4fe:	3301      	adds	r3, #1
   3d500:	e7f8      	b.n	3d4f4 <rx_flush+0x6c>
	return 0;
   3d502:	2000      	movs	r0, #0
   3d504:	e7e9      	b.n	3d4da <rx_flush+0x52>

0003d506 <async_uart_release>:
{
   3d506:	b570      	push	{r4, r5, r6, lr}
   3d508:	4604      	mov	r4, r0
	return dev->data;
   3d50a:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   3d50c:	f04f 0320 	mov.w	r3, #32
   3d510:	f3ef 8611 	mrs	r6, BASEPRI
   3d514:	f383 8812 	msr	BASEPRI_MAX, r3
   3d518:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   3d51c:	68d0      	ldr	r0, [r2, #12]
   3d51e:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
   3d522:	ea23 0301 	bic.w	r3, r3, r1
   3d526:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
	if (!data->async->low_power_mask) {
   3d52a:	68d5      	ldr	r5, [r2, #12]
   3d52c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   3d530:	b923      	cbnz	r3, 3d53c <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   3d532:	2902      	cmp	r1, #2
   3d534:	d007      	beq.n	3d546 <async_uart_release+0x40>
		uart_disable(dev);
   3d536:	4620      	mov	r0, r4
   3d538:	f7ff fdbb 	bl	3d0b2 <uart_disable>
	__asm__ volatile(
   3d53c:	f386 8811 	msr	BASEPRI, r6
   3d540:	f3bf 8f6f 	isb	sy
}
   3d544:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
   3d546:	2205      	movs	r2, #5
   3d548:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
   3d54c:	4620      	mov	r0, r4
   3d54e:	f7ff ff9b 	bl	3d488 <rx_flush>
			data->async->rx_flush_cnt =
   3d552:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
   3d556:	e7ee      	b.n	3d536 <async_uart_release+0x30>

0003d558 <txstopped_isr>:
{
   3d558:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d55a:	b087      	sub	sp, #28
   3d55c:	4605      	mov	r5, r0
	return dev->data;
   3d55e:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   3d560:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d562:	681f      	ldr	r7, [r3, #0]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3d564:	685b      	ldr	r3, [r3, #4]
   3d566:	f013 0f10 	tst.w	r3, #16
   3d56a:	d147      	bne.n	3d5fc <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
   3d56c:	68e3      	ldr	r3, [r4, #12]
   3d56e:	689b      	ldr	r3, [r3, #8]
   3d570:	2b00      	cmp	r3, #0
   3d572:	d041      	beq.n	3d5f8 <txstopped_isr+0xa0>
	__asm__ volatile(
   3d574:	f04f 0320 	mov.w	r3, #32
   3d578:	f3ef 8211 	mrs	r2, BASEPRI
   3d57c:	f383 8812 	msr	BASEPRI_MAX, r3
   3d580:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   3d584:	68e3      	ldr	r3, [r4, #12]
   3d586:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   3d58a:	2900      	cmp	r1, #0
   3d58c:	db42      	blt.n	3d614 <txstopped_isr+0xbc>
   3d58e:	f8d3 60c4 	ldr.w	r6, [r3, #196]	; 0xc4
	__asm__ volatile(
   3d592:	f382 8811 	msr	BASEPRI, r2
   3d596:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   3d59a:	68e3      	ldr	r3, [r4, #12]
   3d59c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
   3d5a0:	2a00      	cmp	r2, #0
   3d5a2:	d13a      	bne.n	3d61a <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
   3d5a4:	6899      	ldr	r1, [r3, #8]
   3d5a6:	691a      	ldr	r2, [r3, #16]
   3d5a8:	4291      	cmp	r1, r2
   3d5aa:	d004      	beq.n	3d5b6 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
   3d5ac:	695a      	ldr	r2, [r3, #20]
   3d5ae:	42b2      	cmp	r2, r6
   3d5b0:	d044      	beq.n	3d63c <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
   3d5b2:	6a1b      	ldr	r3, [r3, #32]
   3d5b4:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
   3d5b6:	68e0      	ldr	r0, [r4, #12]
   3d5b8:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
   3d5ba:	f002 fbef 	bl	3fd9c <z_impl_k_timer_stop>
	struct uart_event evt = {
   3d5be:	2300      	movs	r3, #0
   3d5c0:	9301      	str	r3, [sp, #4]
   3d5c2:	9302      	str	r3, [sp, #8]
   3d5c4:	9303      	str	r3, [sp, #12]
   3d5c6:	9304      	str	r3, [sp, #16]
   3d5c8:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
   3d5ca:	68e3      	ldr	r3, [r4, #12]
   3d5cc:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
   3d5ce:	9202      	str	r2, [sp, #8]
   3d5d0:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
   3d5d2:	68db      	ldr	r3, [r3, #12]
   3d5d4:	42b3      	cmp	r3, r6
   3d5d6:	d04c      	beq.n	3d672 <txstopped_isr+0x11a>
		evt.type = UART_TX_ABORTED;
   3d5d8:	2301      	movs	r3, #1
   3d5da:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
   3d5de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3d5e2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   3d5e6:	68e2      	ldr	r2, [r4, #12]
   3d5e8:	2300      	movs	r3, #0
   3d5ea:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   3d5ec:	68e2      	ldr	r2, [r4, #12]
   3d5ee:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   3d5f0:	a901      	add	r1, sp, #4
   3d5f2:	4628      	mov	r0, r5
   3d5f4:	f7ff fc95 	bl	3cf22 <user_callback>
}
   3d5f8:	b007      	add	sp, #28
   3d5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d5fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3d600:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   3d604:	2101      	movs	r1, #1
   3d606:	f7ff ff7e 	bl	3d506 <async_uart_release>
		if (!data->async->tx_size) {
   3d60a:	68e3      	ldr	r3, [r4, #12]
   3d60c:	68db      	ldr	r3, [r3, #12]
   3d60e:	2b00      	cmp	r3, #0
   3d610:	d1ac      	bne.n	3d56c <txstopped_isr+0x14>
   3d612:	e7f1      	b.n	3d5f8 <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
   3d614:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
   3d618:	e7bb      	b.n	3d592 <txstopped_isr+0x3a>
	__asm__ volatile(
   3d61a:	f04f 0320 	mov.w	r3, #32
   3d61e:	f3ef 8611 	mrs	r6, BASEPRI
   3d622:	f383 8812 	msr	BASEPRI_MAX, r3
   3d626:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
   3d62a:	4621      	mov	r1, r4
   3d62c:	4628      	mov	r0, r5
   3d62e:	f7ff fdd0 	bl	3d1d2 <start_tx_locked>
	__asm__ volatile(
   3d632:	f386 8811 	msr	BASEPRI, r6
   3d636:	f3bf 8f6f 	isb	sy
		return;
   3d63a:	e7dd      	b.n	3d5f8 <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
   3d63c:	6a1a      	ldr	r2, [r3, #32]
   3d63e:	4416      	add	r6, r2
   3d640:	621e      	str	r6, [r3, #32]
			if (setup_tx_cache(data)) {
   3d642:	4620      	mov	r0, r4
   3d644:	f7ff fea9 	bl	3d39a <setup_tx_cache>
   3d648:	b910      	cbnz	r0, 3d650 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
   3d64a:	68e3      	ldr	r3, [r4, #12]
   3d64c:	6a1e      	ldr	r6, [r3, #32]
   3d64e:	e7b2      	b.n	3d5b6 <txstopped_isr+0x5e>
	__asm__ volatile(
   3d650:	f04f 0320 	mov.w	r3, #32
   3d654:	f3ef 8611 	mrs	r6, BASEPRI
   3d658:	f383 8812 	msr	BASEPRI_MAX, r3
   3d65c:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   3d660:	4621      	mov	r1, r4
   3d662:	4628      	mov	r0, r5
   3d664:	f7ff fdb5 	bl	3d1d2 <start_tx_locked>
	__asm__ volatile(
   3d668:	f386 8811 	msr	BASEPRI, r6
   3d66c:	f3bf 8f6f 	isb	sy
				return;
   3d670:	e7c2      	b.n	3d5f8 <txstopped_isr+0xa0>
		evt.type = UART_TX_DONE;
   3d672:	2300      	movs	r3, #0
   3d674:	f88d 3004 	strb.w	r3, [sp, #4]
   3d678:	e7b1      	b.n	3d5de <txstopped_isr+0x86>

0003d67a <rxto_isr>:
{
   3d67a:	b538      	push	{r3, r4, r5, lr}
   3d67c:	4604      	mov	r4, r0
	return dev->data;
   3d67e:	6905      	ldr	r5, [r0, #16]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   3d680:	68e9      	ldr	r1, [r5, #12]
   3d682:	2201      	movs	r2, #1
   3d684:	3160      	adds	r1, #96	; 0x60
   3d686:	f7ff fc6c 	bl	3cf62 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   3d68a:	68e9      	ldr	r1, [r5, #12]
   3d68c:	2201      	movs	r2, #1
   3d68e:	316c      	adds	r1, #108	; 0x6c
   3d690:	4620      	mov	r0, r4
   3d692:	f7ff fc66 	bl	3cf62 <notify_rx_buf_release>
	if (data->async->rx_enabled) {
   3d696:	68eb      	ldr	r3, [r5, #12]
   3d698:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
   3d69c:	b15a      	cbz	r2, 3d6b6 <rxto_isr+0x3c>
		data->async->rx_enabled = false;
   3d69e:	2200      	movs	r2, #0
   3d6a0:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	return dev->config;
   3d6a4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3d6a6:	685b      	ldr	r3, [r3, #4]
   3d6a8:	f013 0f10 	tst.w	r3, #16
   3d6ac:	d109      	bne.n	3d6c2 <rxto_isr+0x48>
	notify_rx_disable(dev);
   3d6ae:	4620      	mov	r0, r4
   3d6b0:	f7ff fc70 	bl	3cf94 <notify_rx_disable>
}
   3d6b4:	bd38      	pop	{r3, r4, r5, pc}
		(void)rx_flush(dev, NULL, 0);
   3d6b6:	2200      	movs	r2, #0
   3d6b8:	4611      	mov	r1, r2
   3d6ba:	4620      	mov	r0, r4
   3d6bc:	f7ff fee4 	bl	3d488 <rx_flush>
   3d6c0:	e7f0      	b.n	3d6a4 <rxto_isr+0x2a>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   3d6c2:	2102      	movs	r1, #2
   3d6c4:	4620      	mov	r0, r4
   3d6c6:	f7ff ff1e 	bl	3d506 <async_uart_release>
   3d6ca:	e7f0      	b.n	3d6ae <rxto_isr+0x34>

0003d6cc <uarte_nrfx_isr_async>:
{
   3d6cc:	b538      	push	{r3, r4, r5, lr}
   3d6ce:	4605      	mov	r5, r0
	return dev->config;
   3d6d0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d6d2:	681c      	ldr	r4, [r3, #0]
	return dev->data;
   3d6d4:	6903      	ldr	r3, [r0, #16]
		return data->async->hw_rx_counting;
   3d6d6:	68da      	ldr	r2, [r3, #12]
   3d6d8:	f892 20d3 	ldrb.w	r2, [r2, #211]	; 0xd3
	if (!hw_rx_counting_enabled(data)
   3d6dc:	b912      	cbnz	r2, 3d6e4 <uarte_nrfx_isr_async+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d6de:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   3d6e2:	bb3a      	cbnz	r2, 3d734 <uarte_nrfx_isr_async+0x68>
   3d6e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3d6e8:	bb83      	cbnz	r3, 3d74c <uarte_nrfx_isr_async+0x80>
   3d6ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   3d6ee:	b123      	cbz	r3, 3d6fa <uarte_nrfx_isr_async+0x2e>
    return p_reg->INTENSET & mask;
   3d6f0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   3d6f4:	f013 0f10 	tst.w	r3, #16
   3d6f8:	d131      	bne.n	3d75e <uarte_nrfx_isr_async+0x92>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d6fa:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   3d6fe:	b113      	cbz	r3, 3d706 <uarte_nrfx_isr_async+0x3a>
   3d700:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   3d704:	b3a3      	cbz	r3, 3d770 <uarte_nrfx_isr_async+0xa4>
   3d706:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   3d70a:	b113      	cbz	r3, 3d712 <uarte_nrfx_isr_async+0x46>
   3d70c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   3d710:	b3b3      	cbz	r3, 3d780 <uarte_nrfx_isr_async+0xb4>
   3d712:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   3d716:	b123      	cbz	r3, 3d722 <uarte_nrfx_isr_async+0x56>
    return p_reg->INTENSET & mask;
   3d718:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   3d71c:	f413 7f80 	tst.w	r3, #256	; 0x100
   3d720:	d136      	bne.n	3d790 <uarte_nrfx_isr_async+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d722:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   3d726:	b123      	cbz	r3, 3d732 <uarte_nrfx_isr_async+0x66>
    return p_reg->INTENSET & mask;
   3d728:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   3d72c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   3d730:	d132      	bne.n	3d798 <uarte_nrfx_isr_async+0xcc>
}
   3d732:	bd38      	pop	{r3, r4, r5, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d734:	2200      	movs	r2, #0
   3d736:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
   3d73a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   3d73e:	68da      	ldr	r2, [r3, #12]
   3d740:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   3d744:	3301      	adds	r3, #1
   3d746:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		return;
   3d74a:	e7f2      	b.n	3d732 <uarte_nrfx_isr_async+0x66>
   3d74c:	2300      	movs	r3, #0
   3d74e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   3d752:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
   3d756:	4628      	mov	r0, r5
   3d758:	f7ff fd78 	bl	3d24c <error_isr>
   3d75c:	e7c5      	b.n	3d6ea <uarte_nrfx_isr_async+0x1e>
   3d75e:	2300      	movs	r3, #0
   3d760:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3d764:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
   3d768:	4628      	mov	r0, r5
   3d76a:	f7ff fdb8 	bl	3d2de <endrx_isr>
   3d76e:	e7c4      	b.n	3d6fa <uarte_nrfx_isr_async+0x2e>
   3d770:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3d774:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
   3d778:	4628      	mov	r0, r5
   3d77a:	f7ec f9ed 	bl	29b58 <rxstarted_isr>
   3d77e:	e7c2      	b.n	3d706 <uarte_nrfx_isr_async+0x3a>
   3d780:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   3d784:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
   3d788:	4628      	mov	r0, r5
   3d78a:	f7ff ff76 	bl	3d67a <rxto_isr>
   3d78e:	e7c0      	b.n	3d712 <uarte_nrfx_isr_async+0x46>
		endtx_isr(dev);
   3d790:	4628      	mov	r0, r5
   3d792:	f7ff fb36 	bl	3ce02 <endtx_isr>
   3d796:	e7c4      	b.n	3d722 <uarte_nrfx_isr_async+0x56>
		txstopped_isr(dev);
   3d798:	4628      	mov	r0, r5
   3d79a:	f7ff fedd 	bl	3d558 <txstopped_isr>
   3d79e:	e7c8      	b.n	3d732 <uarte_nrfx_isr_async+0x66>

0003d7a0 <uarte_instance_init>:
{
   3d7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d7a4:	4604      	mov	r4, r0
	return dev->config;
   3d7a6:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   3d7a8:	683d      	ldr	r5, [r7, #0]
	return dev->data;
   3d7aa:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3d7ac:	2100      	movs	r1, #0
   3d7ae:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	data->dev = dev;
   3d7b2:	6030      	str	r0, [r6, #0]
	uarte_nrfx_pins_configure(dev, false);
   3d7b4:	f7ec fb40 	bl	29e38 <uarte_nrfx_pins_configure>
	return dev->data;
   3d7b8:	6921      	ldr	r1, [r4, #16]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   3d7ba:	3104      	adds	r1, #4
   3d7bc:	4620      	mov	r0, r4
   3d7be:	f7ff fb39 	bl	3ce34 <uarte_nrfx_configure>
	if (err) {
   3d7c2:	4680      	mov	r8, r0
   3d7c4:	bb18      	cbnz	r0, 3d80e <uarte_instance_init+0x6e>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   3d7c6:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   3d7c8:	f013 0f02 	tst.w	r3, #2
   3d7cc:	d122      	bne.n	3d814 <uarte_instance_init+0x74>
	if (data->async) {
   3d7ce:	68f3      	ldr	r3, [r6, #12]
   3d7d0:	b343      	cbz	r3, 3d824 <uarte_instance_init+0x84>
		err = uarte_nrfx_init(dev);
   3d7d2:	4620      	mov	r0, r4
   3d7d4:	f7ec faec 	bl	29db0 <uarte_nrfx_init>
		if (err < 0) {
   3d7d8:	2800      	cmp	r0, #0
   3d7da:	db36      	blt.n	3d84a <uarte_instance_init+0xaa>
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   3d7dc:	687b      	ldr	r3, [r7, #4]
   3d7de:	f013 0f02 	tst.w	r3, #2
   3d7e2:	d103      	bne.n	3d7ec <uarte_instance_init+0x4c>
    p_reg->INTENSET = mask;
   3d7e4:	f44f 7380 	mov.w	r3, #256	; 0x100
   3d7e8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3d7ec:	687b      	ldr	r3, [r7, #4]
   3d7ee:	f013 0f10 	tst.w	r3, #16
   3d7f2:	d003      	beq.n	3d7fc <uarte_instance_init+0x5c>
   3d7f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3d7f8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   3d7fc:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3d7fe:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3d802:	2300      	movs	r3, #0
   3d804:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d808:	2301      	movs	r3, #1
   3d80a:	60ab      	str	r3, [r5, #8]
   3d80c:	60eb      	str	r3, [r5, #12]
}
   3d80e:	4640      	mov	r0, r8
   3d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   3d814:	4631      	mov	r1, r6
   3d816:	4628      	mov	r0, r5
   3d818:	f7ec f9d8 	bl	29bcc <endtx_stoptx_ppi_init>
		if (err < 0) {
   3d81c:	2800      	cmp	r0, #0
   3d81e:	dad6      	bge.n	3d7ce <uarte_instance_init+0x2e>
			return err;
   3d820:	4680      	mov	r8, r0
   3d822:	e7f4      	b.n	3d80e <uarte_instance_init+0x6e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3d824:	2308      	movs	r3, #8
   3d826:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   3d82a:	7a3b      	ldrb	r3, [r7, #8]
   3d82c:	2b00      	cmp	r3, #0
   3d82e:	d1d5      	bne.n	3d7dc <uarte_instance_init+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d830:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   3d834:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   3d838:	f106 0315 	add.w	r3, r6, #21
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3d83c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3d840:	2301      	movs	r3, #1
   3d842:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3d846:	602b      	str	r3, [r5, #0]
}
   3d848:	e7c8      	b.n	3d7dc <uarte_instance_init+0x3c>
			return err;
   3d84a:	4680      	mov	r8, r0
   3d84c:	e7df      	b.n	3d80e <uarte_instance_init+0x6e>

0003d84e <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   3d84e:	b510      	push	{r4, lr}
   3d850:	4604      	mov	r4, r0
   3d852:	2200      	movs	r2, #0
   3d854:	2101      	movs	r1, #1
   3d856:	2008      	movs	r0, #8
   3d858:	f7ea f800 	bl	2785c <z_arm_irq_priority_set>
   3d85c:	2008      	movs	r0, #8
   3d85e:	f7e9 ffcb 	bl	277f8 <arch_irq_enable>
   3d862:	2100      	movs	r1, #0
   3d864:	4620      	mov	r0, r4
   3d866:	f7ff ff9b 	bl	3d7a0 <uarte_instance_init>
   3d86a:	bd10      	pop	{r4, pc}

0003d86c <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   3d86c:	b510      	push	{r4, lr}
   3d86e:	4604      	mov	r4, r0
   3d870:	2200      	movs	r2, #0
   3d872:	2101      	movs	r1, #1
   3d874:	2009      	movs	r0, #9
   3d876:	f7e9 fff1 	bl	2785c <z_arm_irq_priority_set>
   3d87a:	2009      	movs	r0, #9
   3d87c:	f7e9 ffbc 	bl	277f8 <arch_irq_enable>
   3d880:	2100      	movs	r1, #0
   3d882:	4620      	mov	r0, r4
   3d884:	f7ff ff8c 	bl	3d7a0 <uarte_instance_init>
   3d888:	bd10      	pop	{r4, pc}

0003d88a <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   3d88a:	2000      	movs	r0, #0
   3d88c:	4770      	bx	lr

0003d88e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3d88e:	4770      	bx	lr

0003d890 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   3d890:	1a40      	subs	r0, r0, r1
}
   3d892:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3d896:	4770      	bx	lr

0003d898 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3d898:	f100 0350 	add.w	r3, r0, #80	; 0x50
   3d89c:	009b      	lsls	r3, r3, #2
   3d89e:	b29b      	uxth	r3, r3
   3d8a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3d8a4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   3d8a8:	2200      	movs	r2, #0
   3d8aa:	601a      	str	r2, [r3, #0]
   3d8ac:	681b      	ldr	r3, [r3, #0]
}
   3d8ae:	4770      	bx	lr

0003d8b0 <absolute_time_to_cc>:
}
   3d8b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3d8b4:	4770      	bx	lr

0003d8b6 <full_int_lock>:
	__asm__ volatile(
   3d8b6:	f04f 0320 	mov.w	r3, #32
   3d8ba:	f3ef 8011 	mrs	r0, BASEPRI
   3d8be:	f383 8812 	msr	BASEPRI_MAX, r3
   3d8c2:	f3bf 8f6f 	isb	sy
}
   3d8c6:	4770      	bx	lr

0003d8c8 <full_int_unlock>:
	__asm__ volatile(
   3d8c8:	f380 8811 	msr	BASEPRI, r0
   3d8cc:	f3bf 8f6f 	isb	sy
}
   3d8d0:	4770      	bx	lr

0003d8d2 <set_absolute_alarm>:
{
   3d8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d8d4:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   3d8d6:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   3d8da:	f7ec fdaf 	bl	2a43c <get_comparator>
   3d8de:	4607      	mov	r7, r0
   3d8e0:	e019      	b.n	3d916 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   3d8e2:	2013      	movs	r0, #19
   3d8e4:	f002 fa18 	bl	3fd18 <z_impl_k_busy_wait>
}
   3d8e8:	e022      	b.n	3d930 <set_absolute_alarm+0x5e>
		event_clear(chan);
   3d8ea:	4630      	mov	r0, r6
   3d8ec:	f7ff ffd4 	bl	3d898 <event_clear>
		event_enable(chan);
   3d8f0:	4630      	mov	r0, r6
   3d8f2:	f7ec fdab 	bl	2a44c <event_enable>
		set_comparator(chan, cc_val);
   3d8f6:	4629      	mov	r1, r5
   3d8f8:	4630      	mov	r0, r6
   3d8fa:	f7ec fd95 	bl	2a428 <set_comparator>
		now2 = counter();
   3d8fe:	f7ec fdb9 	bl	2a474 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   3d902:	4284      	cmp	r4, r0
   3d904:	d01e      	beq.n	3d944 <set_absolute_alarm+0x72>
   3d906:	1c81      	adds	r1, r0, #2
   3d908:	4628      	mov	r0, r5
   3d90a:	f7ff ffc1 	bl	3d890 <counter_sub>
	} while ((now2 != now) &&
   3d90e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3d912:	d917      	bls.n	3d944 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   3d914:	462f      	mov	r7, r5
		now = counter();
   3d916:	f7ec fdad 	bl	2a474 <counter>
   3d91a:	4604      	mov	r4, r0
		set_comparator(chan, now);
   3d91c:	4601      	mov	r1, r0
   3d91e:	4630      	mov	r0, r6
   3d920:	f7ec fd82 	bl	2a428 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   3d924:	4621      	mov	r1, r4
   3d926:	4638      	mov	r0, r7
   3d928:	f7ff ffb2 	bl	3d890 <counter_sub>
   3d92c:	2801      	cmp	r0, #1
   3d92e:	d0d8      	beq.n	3d8e2 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   3d930:	1ca7      	adds	r7, r4, #2
   3d932:	4639      	mov	r1, r7
   3d934:	4628      	mov	r0, r5
   3d936:	f7ff ffab 	bl	3d890 <counter_sub>
   3d93a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   3d93e:	d9d4      	bls.n	3d8ea <set_absolute_alarm+0x18>
			cc_val = now + 2;
   3d940:	463d      	mov	r5, r7
   3d942:	e7d2      	b.n	3d8ea <set_absolute_alarm+0x18>
}
   3d944:	4628      	mov	r0, r5
   3d946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003d948 <compare_set>:
{
   3d948:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d94a:	b083      	sub	sp, #12
   3d94c:	4604      	mov	r4, r0
   3d94e:	4617      	mov	r7, r2
   3d950:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   3d952:	f7ec fd95 	bl	2a480 <compare_int_lock>
   3d956:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   3d958:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d95a:	9301      	str	r3, [sp, #4]
   3d95c:	9b08      	ldr	r3, [sp, #32]
   3d95e:	9300      	str	r3, [sp, #0]
   3d960:	463a      	mov	r2, r7
   3d962:	462b      	mov	r3, r5
   3d964:	4620      	mov	r0, r4
   3d966:	f7ec fe69 	bl	2a63c <compare_set_nolocks>
   3d96a:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   3d96c:	4631      	mov	r1, r6
   3d96e:	4620      	mov	r0, r4
   3d970:	f7ec fde0 	bl	2a534 <compare_int_unlock>
}
   3d974:	4628      	mov	r0, r5
   3d976:	b003      	add	sp, #12
   3d978:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003d97a <sys_clock_cycle_get_32>:
{
   3d97a:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   3d97c:	f7ec fe3e 	bl	2a5fc <z_nrf_rtc_timer_read>
}
   3d980:	bd08      	pop	{r3, pc}

0003d982 <sleeping_thread_init>:
{
   3d982:	b508      	push	{r3, lr}
	k_sem_init(&thread->sem, 0, 1);
   3d984:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   3d986:	2201      	movs	r2, #1
   3d988:	2100      	movs	r1, #0
   3d98a:	f002 f956 	bl	3fc3a <z_impl_k_sem_init>
}
   3d98e:	bd08      	pop	{r3, pc}

0003d990 <nrf_modem_os_busywait>:
{
   3d990:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3d992:	f002 f9c1 	bl	3fd18 <z_impl_k_busy_wait>
}
   3d996:	bd08      	pop	{r3, pc}

0003d998 <nrf_modem_os_timedwait>:
{
   3d998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d99c:	b088      	sub	sp, #32
   3d99e:	460e      	mov	r6, r1
	return z_impl_k_uptime_ticks();
   3d9a0:	f002 f9b6 	bl	3fd10 <z_impl_k_uptime_ticks>
   3d9a4:	014b      	lsls	r3, r1, #5
   3d9a6:	0142      	lsls	r2, r0, #5
   3d9a8:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
   3d9ac:	1a13      	subs	r3, r2, r0
   3d9ae:	eb67 0201 	sbc.w	r2, r7, r1
   3d9b2:	0097      	lsls	r7, r2, #2
   3d9b4:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
   3d9b8:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   3d9bc:	463a      	mov	r2, r7
   3d9be:	eb1c 0300 	adds.w	r3, ip, r0
   3d9c2:	eb41 0202 	adc.w	r2, r1, r2
   3d9c6:	00d1      	lsls	r1, r2, #3
   3d9c8:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   3d9cc:	00d8      	lsls	r0, r3, #3
   3d9ce:	0bc3      	lsrs	r3, r0, #15
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   3d9d0:	ea43 4741 	orr.w	r7, r3, r1, lsl #17
	if (*timeout == 0) {
   3d9d4:	6833      	ldr	r3, [r6, #0]
   3d9d6:	2b00      	cmp	r3, #0
   3d9d8:	d060      	beq.n	3da9c <nrf_modem_os_timedwait+0x104>
   3d9da:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
	if (*timeout < 0) {
   3d9de:	2b00      	cmp	r3, #0
   3d9e0:	db60      	blt.n	3daa4 <nrf_modem_os_timedwait+0x10c>
	sleeping_thread_init(&thread);
   3d9e2:	a801      	add	r0, sp, #4
   3d9e4:	f7ff ffcd 	bl	3d982 <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   3d9e8:	a801      	add	r0, sp, #4
   3d9ea:	f7ec ffe7 	bl	2a9bc <sleeping_thread_add>
   3d9ee:	2800      	cmp	r0, #0
   3d9f0:	d062      	beq.n	3dab8 <nrf_modem_os_timedwait+0x120>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   3d9f2:	6833      	ldr	r3, [r6, #0]
   3d9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   3d9f8:	d058      	beq.n	3daac <nrf_modem_os_timedwait+0x114>
   3d9fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   3d9fe:	ea4f 79e3 	mov.w	r9, r3, asr #31
   3da02:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   3da06:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   3da0a:	03d8      	lsls	r0, r3, #15
   3da0c:	f240 3ce7 	movw	ip, #999	; 0x3e7
   3da10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3da14:	2300      	movs	r3, #0
   3da16:	eb10 000c 	adds.w	r0, r0, ip
   3da1a:	f04f 0c00 	mov.w	ip, #0
   3da1e:	eb41 010c 	adc.w	r1, r1, ip
   3da22:	f7e3 fb3d 	bl	210a0 <__aeabi_uldivmod>
   3da26:	4602      	mov	r2, r0
   3da28:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   3da2a:	a802      	add	r0, sp, #8
   3da2c:	f7f8 fdba 	bl	365a4 <z_impl_k_sem_take>
	sleeping_thread_remove(&thread);
   3da30:	a801      	add	r0, sp, #4
   3da32:	f7ec ffe7 	bl	2aa04 <sleeping_thread_remove>
	if (*timeout == SYS_FOREVER_MS) {
   3da36:	6833      	ldr	r3, [r6, #0]
   3da38:	f1b3 3fff 	cmp.w	r3, #4294967295
   3da3c:	d040      	beq.n	3dac0 <nrf_modem_os_timedwait+0x128>
	remaining = *timeout - k_uptime_delta(&start);
   3da3e:	4698      	mov	r8, r3
   3da40:	ea4f 79e3 	mov.w	r9, r3, asr #31
	return z_impl_k_uptime_ticks();
   3da44:	f002 f964 	bl	3fd10 <z_impl_k_uptime_ticks>
   3da48:	014b      	lsls	r3, r1, #5
   3da4a:	0142      	lsls	r2, r0, #5
   3da4c:	ea43 6cd0 	orr.w	ip, r3, r0, lsr #27
   3da50:	1a13      	subs	r3, r2, r0
   3da52:	eb6c 0201 	sbc.w	r2, ip, r1
   3da56:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   3da5a:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
   3da5e:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   3da62:	4662      	mov	r2, ip
   3da64:	eb1e 0300 	adds.w	r3, lr, r0
   3da68:	eb41 0202 	adc.w	r2, r1, r2
   3da6c:	00d1      	lsls	r1, r2, #3
   3da6e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   3da72:	00d8      	lsls	r0, r3, #3
   3da74:	0bc3      	lsrs	r3, r0, #15
   3da76:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
   3da7a:	0bc8      	lsrs	r0, r1, #15
   3da7c:	1abf      	subs	r7, r7, r2
   3da7e:	eb6a 0a00 	sbc.w	sl, sl, r0
   3da82:	eb17 0408 	adds.w	r4, r7, r8
   3da86:	eb4a 0509 	adc.w	r5, sl, r9
	*timeout = remaining > 0 ? remaining : 0;
   3da8a:	4623      	mov	r3, r4
   3da8c:	2c00      	cmp	r4, #0
   3da8e:	f175 0200 	sbcs.w	r2, r5, #0
   3da92:	db0f      	blt.n	3dab4 <nrf_modem_os_timedwait+0x11c>
   3da94:	6033      	str	r3, [r6, #0]
	if (*timeout == 0) {
   3da96:	b1ab      	cbz	r3, 3dac4 <nrf_modem_os_timedwait+0x12c>
	return 0;
   3da98:	2000      	movs	r0, #0
   3da9a:	e00e      	b.n	3daba <nrf_modem_os_timedwait+0x122>
	z_impl_k_yield();
   3da9c:	f7fa f9f4 	bl	37e88 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   3daa0:	2074      	movs	r0, #116	; 0x74
   3daa2:	e00a      	b.n	3daba <nrf_modem_os_timedwait+0x122>
		*timeout = SYS_FOREVER_MS;
   3daa4:	f04f 33ff 	mov.w	r3, #4294967295
   3daa8:	6033      	str	r3, [r6, #0]
   3daaa:	e79a      	b.n	3d9e2 <nrf_modem_os_timedwait+0x4a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   3daac:	f04f 32ff 	mov.w	r2, #4294967295
   3dab0:	4613      	mov	r3, r2
   3dab2:	e7ba      	b.n	3da2a <nrf_modem_os_timedwait+0x92>
	*timeout = remaining > 0 ? remaining : 0;
   3dab4:	2300      	movs	r3, #0
   3dab6:	e7ed      	b.n	3da94 <nrf_modem_os_timedwait+0xfc>
		return 0;
   3dab8:	2000      	movs	r0, #0
}
   3daba:	b008      	add	sp, #32
   3dabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   3dac0:	2000      	movs	r0, #0
   3dac2:	e7fa      	b.n	3daba <nrf_modem_os_timedwait+0x122>
		return NRF_ETIMEDOUT;
   3dac4:	2074      	movs	r0, #116	; 0x74
   3dac6:	e7f8      	b.n	3daba <nrf_modem_os_timedwait+0x122>

0003dac8 <nrf_modem_os_errno_set>:
{
   3dac8:	b510      	push	{r4, lr}
   3daca:	4604      	mov	r4, r0
	errno = err_code;
   3dacc:	f7fe fed4 	bl	3c878 <__errno>
   3dad0:	6004      	str	r4, [r0, #0]
}
   3dad2:	bd10      	pop	{r4, pc}

0003dad4 <nrf_modem_os_is_in_isr>:
{
   3dad4:	b508      	push	{r3, lr}
	return k_is_in_isr();
   3dad6:	f002 f851 	bl	3fb7c <k_is_in_isr>
}
   3dada:	bd08      	pop	{r3, pc}

0003dadc <read_task_create>:
{
   3dadc:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   3dade:	2200      	movs	r2, #0
   3dae0:	2106      	movs	r1, #6
   3dae2:	201c      	movs	r0, #28
   3dae4:	f7e9 feba 	bl	2785c <z_arm_irq_priority_set>
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   3dae8:	201c      	movs	r0, #28
   3daea:	f7e9 fe85 	bl	277f8 <arch_irq_enable>
}
   3daee:	bd08      	pop	{r3, pc}

0003daf0 <nrf_modem_os_trace_put>:
	if (err) {
		LOG_ERR("nrf_modem_trace_processed_callback failed, err %d", err);
	}
#endif
	return 0;
}
   3daf0:	2000      	movs	r0, #0
   3daf2:	4770      	bx	lr

0003daf4 <z_to_nrf_ipv4>:
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3daf4:	2310      	movs	r3, #16
   3daf6:	700b      	strb	r3, [r1, #0]
	nrf_out->sin_port = ptr->sin_port;
   3daf8:	8843      	ldrh	r3, [r0, #2]
   3dafa:	810b      	strh	r3, [r1, #8]
	nrf_out->sin_family = NRF_AF_INET;
   3dafc:	2302      	movs	r3, #2
   3dafe:	604b      	str	r3, [r1, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3db00:	6843      	ldr	r3, [r0, #4]
   3db02:	60cb      	str	r3, [r1, #12]
}
   3db04:	4770      	bx	lr

0003db06 <nrf_to_z_ipv4>:
	ptr->sin_port = nrf_in->sin_port;
   3db06:	890b      	ldrh	r3, [r1, #8]
   3db08:	8043      	strh	r3, [r0, #2]
	ptr->sin_family = AF_INET;
   3db0a:	2301      	movs	r3, #1
   3db0c:	8003      	strh	r3, [r0, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3db0e:	68cb      	ldr	r3, [r1, #12]
   3db10:	6043      	str	r3, [r0, #4]
}
   3db12:	4770      	bx	lr

0003db14 <z_to_nrf_level>:
	switch (z_in_level) {
   3db14:	2801      	cmp	r0, #1
   3db16:	d007      	beq.n	3db28 <z_to_nrf_level+0x14>
   3db18:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   3db1c:	d108      	bne.n	3db30 <z_to_nrf_level+0x1c>
		*nrf_out_level = NRF_SOL_SECURE;
   3db1e:	f44f 738d 	mov.w	r3, #282	; 0x11a
   3db22:	600b      	str	r3, [r1, #0]
	int retval = 0;
   3db24:	2000      	movs	r0, #0
		break;
   3db26:	4770      	bx	lr
		*nrf_out_level = NRF_SOL_SOCKET;
   3db28:	2301      	movs	r3, #1
   3db2a:	600b      	str	r3, [r1, #0]
	int retval = 0;
   3db2c:	2000      	movs	r0, #0
		break;
   3db2e:	4770      	bx	lr
	switch (z_in_level) {
   3db30:	f04f 30ff 	mov.w	r0, #4294967295
}
   3db34:	4770      	bx	lr

0003db36 <z_to_nrf_optname>:
	switch (z_in_level) {
   3db36:	2801      	cmp	r0, #1
   3db38:	d033      	beq.n	3dba2 <z_to_nrf_optname+0x6c>
   3db3a:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   3db3e:	f040 8088 	bne.w	3dc52 <z_to_nrf_optname+0x11c>
		switch (z_in_optname) {
   3db42:	3901      	subs	r1, #1
   3db44:	290b      	cmp	r1, #11
   3db46:	f200 8087 	bhi.w	3dc58 <z_to_nrf_optname+0x122>
   3db4a:	e8df f001 	tbb	[pc, r1]
   3db4e:	0a06      	.short	0x0a06
   3db50:	1a16120e 	.word	0x1a16120e
   3db54:	1e858585 	.word	0x1e858585
   3db58:	2622      	.short	0x2622
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   3db5a:	2302      	movs	r3, #2
   3db5c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db5e:	2000      	movs	r0, #0
			break;
   3db60:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   3db62:	2305      	movs	r3, #5
   3db64:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db66:	2000      	movs	r0, #0
			break;
   3db68:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   3db6a:	2306      	movs	r3, #6
   3db6c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db6e:	2000      	movs	r0, #0
			break;
   3db70:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   3db72:	2307      	movs	r3, #7
   3db74:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db76:	2000      	movs	r0, #0
			break;
   3db78:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   3db7a:	2304      	movs	r3, #4
   3db7c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db7e:	2000      	movs	r0, #0
			break;
   3db80:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   3db82:	2301      	movs	r3, #1
   3db84:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db86:	2000      	movs	r0, #0
			break;
   3db88:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   3db8a:	2303      	movs	r3, #3
   3db8c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db8e:	2000      	movs	r0, #0
			break;
   3db90:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   3db92:	2309      	movs	r3, #9
   3db94:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db96:	2000      	movs	r0, #0
			break;
   3db98:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   3db9a:	2308      	movs	r3, #8
   3db9c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3db9e:	2000      	movs	r0, #0
			break;
   3dba0:	4770      	bx	lr
		switch (z_in_optname) {
   3dba2:	3902      	subs	r1, #2
   3dba4:	2935      	cmp	r1, #53	; 0x35
   3dba6:	d85a      	bhi.n	3dc5e <z_to_nrf_optname+0x128>
   3dba8:	e8df f001 	tbb	[pc, r1]
   3dbac:	591b592b 	.word	0x591b592b
   3dbb0:	59595959 	.word	0x59595959
   3dbb4:	59595959 	.word	0x59595959
   3dbb8:	59595959 	.word	0x59595959
   3dbbc:	231f5959 	.word	0x231f5959
   3dbc0:	27595959 	.word	0x27595959
   3dbc4:	59595959 	.word	0x59595959
   3dbc8:	5937332f 	.word	0x5937332f
   3dbcc:	59595959 	.word	0x59595959
   3dbd0:	59595959 	.word	0x59595959
   3dbd4:	59595959 	.word	0x59595959
   3dbd8:	59595959 	.word	0x59595959
   3dbdc:	4b47433f 	.word	0x4b47433f
   3dbe0:	3b4f      	.short	0x3b4f
			*nrf_out_optname = NRF_SO_ERROR;
   3dbe2:	2304      	movs	r3, #4
   3dbe4:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dbe6:	2000      	movs	r0, #0
			break;
   3dbe8:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   3dbea:	2314      	movs	r3, #20
   3dbec:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dbee:	2000      	movs	r0, #0
			break;
   3dbf0:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   3dbf2:	2315      	movs	r3, #21
   3dbf4:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dbf6:	2000      	movs	r0, #0
			break;
   3dbf8:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   3dbfa:	2319      	movs	r3, #25
   3dbfc:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dbfe:	2000      	movs	r0, #0
			break;
   3dc00:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_REUSEADDR;
   3dc02:	2328      	movs	r3, #40	; 0x28
   3dc04:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc06:	2000      	movs	r0, #0
			break;
   3dc08:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   3dc0a:	231e      	movs	r3, #30
   3dc0c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc0e:	2000      	movs	r0, #0
			break;
   3dc10:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   3dc12:	231f      	movs	r3, #31
   3dc14:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc16:	2000      	movs	r0, #0
			break;
   3dc18:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   3dc1a:	2320      	movs	r3, #32
   3dc1c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc1e:	2000      	movs	r0, #0
			break;
   3dc20:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   3dc22:	2337      	movs	r3, #55	; 0x37
   3dc24:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc26:	2000      	movs	r0, #0
			break;
   3dc28:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_LAST;
   3dc2a:	2332      	movs	r3, #50	; 0x32
   3dc2c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc2e:	2000      	movs	r0, #0
			break;
   3dc30:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   3dc32:	2333      	movs	r3, #51	; 0x33
   3dc34:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc36:	2000      	movs	r0, #0
			break;
   3dc38:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   3dc3a:	2334      	movs	r3, #52	; 0x34
   3dc3c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc3e:	2000      	movs	r0, #0
			break;
   3dc40:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   3dc42:	2335      	movs	r3, #53	; 0x35
   3dc44:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc46:	2000      	movs	r0, #0
			break;
   3dc48:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   3dc4a:	2336      	movs	r3, #54	; 0x36
   3dc4c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   3dc4e:	2000      	movs	r0, #0
			break;
   3dc50:	4770      	bx	lr
	switch (z_in_level) {
   3dc52:	f04f 30ff 	mov.w	r0, #4294967295
   3dc56:	4770      	bx	lr
   3dc58:	f04f 30ff 	mov.w	r0, #4294967295
   3dc5c:	4770      	bx	lr
   3dc5e:	f04f 30ff 	mov.w	r0, #4294967295
}
   3dc62:	4770      	bx	lr

0003dc64 <z_to_nrf_flags>:
{
   3dc64:	4603      	mov	r3, r0
	if (z_flags & MSG_DONTWAIT) {
   3dc66:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   3dc6a:	d000      	beq.n	3dc6e <z_to_nrf_flags+0xa>
		nrf_flags |= NRF_MSG_DONTWAIT;
   3dc6c:	2002      	movs	r0, #2
	if (z_flags & MSG_PEEK) {
   3dc6e:	f013 0f02 	tst.w	r3, #2
   3dc72:	d001      	beq.n	3dc78 <z_to_nrf_flags+0x14>
		nrf_flags |= NRF_MSG_PEEK;
   3dc74:	f040 0008 	orr.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   3dc78:	f013 0f20 	tst.w	r3, #32
   3dc7c:	d001      	beq.n	3dc82 <z_to_nrf_flags+0x1e>
		nrf_flags |= NRF_MSG_TRUNC;
   3dc7e:	f040 0020 	orr.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   3dc82:	f413 7f80 	tst.w	r3, #256	; 0x100
   3dc86:	d001      	beq.n	3dc8c <z_to_nrf_flags+0x28>
		nrf_flags |= NRF_MSG_WAITALL;
   3dc88:	f040 0010 	orr.w	r0, r0, #16
}
   3dc8c:	4770      	bx	lr

0003dc8e <z_to_nrf_addrinfo_flags>:
{
   3dc8e:	4603      	mov	r3, r0
	if (flags & AI_NUMERICSERV) {
   3dc90:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
   3dc94:	d001      	beq.n	3dc9a <z_to_nrf_addrinfo_flags+0xc>
		nrf_flags |= NRF_AI_NUMERICSERV;
   3dc96:	f44f 6080 	mov.w	r0, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   3dc9a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   3dc9e:	d001      	beq.n	3dca4 <z_to_nrf_addrinfo_flags+0x16>
		nrf_flags |= NRF_AI_PDNSERV;
   3dca0:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
}
   3dca4:	4770      	bx	lr

0003dca6 <nrf_to_z_addrinfo_flags>:
}
   3dca6:	2000      	movs	r0, #0
   3dca8:	4770      	bx	lr

0003dcaa <z_to_nrf_family>:
	switch (z_family) {
   3dcaa:	2803      	cmp	r0, #3
   3dcac:	d809      	bhi.n	3dcc2 <z_to_nrf_family+0x18>
   3dcae:	e8df f000 	tbb	[pc, r0]
   3dcb2:	0206      	.short	0x0206
   3dcb4:	040b      	.short	0x040b
		return NRF_AF_UNSPEC;
   3dcb6:	2002      	movs	r0, #2
   3dcb8:	4770      	bx	lr
		return NRF_AF_PACKET;
   3dcba:	2005      	movs	r0, #5
   3dcbc:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   3dcbe:	2000      	movs	r0, #0
   3dcc0:	4770      	bx	lr
		return -EAFNOSUPPORT;
   3dcc2:	f06f 0069 	mvn.w	r0, #105	; 0x69
   3dcc6:	4770      	bx	lr
		return NRF_AF_INET6;
   3dcc8:	200a      	movs	r0, #10
}
   3dcca:	4770      	bx	lr

0003dccc <nrf_to_z_family>:
	switch (nrf_family) {
   3dccc:	280a      	cmp	r0, #10
   3dcce:	d80b      	bhi.n	3dce8 <nrf_to_z_family+0x1c>
   3dcd0:	e8df f000 	tbb	[pc, r0]
   3dcd4:	0a060a0e 	.word	0x0a060a0e
   3dcd8:	0a0a080a 	.word	0x0a0a080a
   3dcdc:	0a0a      	.short	0x0a0a
   3dcde:	0d          	.byte	0x0d
   3dcdf:	00          	.byte	0x00
		return AF_UNSPEC;
   3dce0:	2001      	movs	r0, #1
   3dce2:	4770      	bx	lr
		return AF_PACKET;
   3dce4:	2003      	movs	r0, #3
   3dce6:	4770      	bx	lr
		return -EAFNOSUPPORT;
   3dce8:	f06f 0069 	mvn.w	r0, #105	; 0x69
   3dcec:	4770      	bx	lr
		return AF_INET6;
   3dcee:	2002      	movs	r0, #2
}
   3dcf0:	4770      	bx	lr

0003dcf2 <nrf_to_z_protocol>:
	switch (proto) {
   3dcf2:	2802      	cmp	r0, #2
   3dcf4:	d00e      	beq.n	3dd14 <nrf_to_z_protocol+0x22>
   3dcf6:	dd08      	ble.n	3dd0a <nrf_to_z_protocol+0x18>
   3dcf8:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   3dcfc:	d00f      	beq.n	3dd1e <nrf_to_z_protocol+0x2c>
   3dcfe:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
   3dd02:	d10f      	bne.n	3dd24 <nrf_to_z_protocol+0x32>
		return IPPROTO_DTLS_1_2;
   3dd04:	f240 1011 	movw	r0, #273	; 0x111
   3dd08:	4770      	bx	lr
	switch (proto) {
   3dd0a:	b168      	cbz	r0, 3dd28 <nrf_to_z_protocol+0x36>
   3dd0c:	2801      	cmp	r0, #1
   3dd0e:	d103      	bne.n	3dd18 <nrf_to_z_protocol+0x26>
   3dd10:	2006      	movs	r0, #6
   3dd12:	4770      	bx	lr
		return IPPROTO_UDP;
   3dd14:	2011      	movs	r0, #17
   3dd16:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   3dd18:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   3dd1c:	4770      	bx	lr
		return IPPROTO_TLS_1_2;
   3dd1e:	f44f 7081 	mov.w	r0, #258	; 0x102
   3dd22:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   3dd24:	f06f 007a 	mvn.w	r0, #122	; 0x7a
}
   3dd28:	4770      	bx	lr

0003dd2a <z_to_nrf_socktype>:
}
   3dd2a:	4770      	bx	lr

0003dd2c <z_to_nrf_protocol>:
	switch (proto) {
   3dd2c:	2811      	cmp	r0, #17
   3dd2e:	d00f      	beq.n	3dd50 <z_to_nrf_protocol+0x24>
   3dd30:	dd09      	ble.n	3dd46 <z_to_nrf_protocol+0x1a>
   3dd32:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3dd36:	d010      	beq.n	3dd5a <z_to_nrf_protocol+0x2e>
   3dd38:	f240 1311 	movw	r3, #273	; 0x111
   3dd3c:	4298      	cmp	r0, r3
   3dd3e:	d10f      	bne.n	3dd60 <z_to_nrf_protocol+0x34>
		return NRF_SPROTO_DTLS1v2;
   3dd40:	f44f 7087 	mov.w	r0, #270	; 0x10e
   3dd44:	4770      	bx	lr
	switch (proto) {
   3dd46:	b168      	cbz	r0, 3dd64 <z_to_nrf_protocol+0x38>
   3dd48:	2806      	cmp	r0, #6
   3dd4a:	d103      	bne.n	3dd54 <z_to_nrf_protocol+0x28>
   3dd4c:	2001      	movs	r0, #1
   3dd4e:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   3dd50:	2002      	movs	r0, #2
   3dd52:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   3dd54:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   3dd58:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   3dd5a:	f44f 7082 	mov.w	r0, #260	; 0x104
   3dd5e:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   3dd60:	f06f 007a 	mvn.w	r0, #122	; 0x7a
}
   3dd64:	4770      	bx	lr

0003dd66 <nrf_to_z_ipv6>:
{
   3dd66:	b470      	push	{r4, r5, r6}
	ptr->sin6_port = nrf_in->sin6_port;
   3dd68:	890b      	ldrh	r3, [r1, #8]
   3dd6a:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3dd6c:	4603      	mov	r3, r0
   3dd6e:	2202      	movs	r2, #2
   3dd70:	f823 2b04 	strh.w	r2, [r3], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   3dd74:	460a      	mov	r2, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3dd76:	f852 6f10 	ldr.w	r6, [r2, #16]!
   3dd7a:	6855      	ldr	r5, [r2, #4]
   3dd7c:	6894      	ldr	r4, [r2, #8]
   3dd7e:	68d2      	ldr	r2, [r2, #12]
   3dd80:	6046      	str	r6, [r0, #4]
   3dd82:	605d      	str	r5, [r3, #4]
   3dd84:	609c      	str	r4, [r3, #8]
   3dd86:	60da      	str	r2, [r3, #12]
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3dd88:	f891 3020 	ldrb.w	r3, [r1, #32]
   3dd8c:	7503      	strb	r3, [r0, #20]
}
   3dd8e:	bc70      	pop	{r4, r5, r6}
   3dd90:	4770      	bx	lr

0003dd92 <z_to_nrf_ipv6>:
{
   3dd92:	b430      	push	{r4, r5}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3dd94:	2324      	movs	r3, #36	; 0x24
   3dd96:	700b      	strb	r3, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3dd98:	8843      	ldrh	r3, [r0, #2]
   3dd9a:	810b      	strh	r3, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3dd9c:	230a      	movs	r3, #10
   3dd9e:	604b      	str	r3, [r1, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   3dda0:	4603      	mov	r3, r0
   3dda2:	f853 5f04 	ldr.w	r5, [r3, #4]!
   3dda6:	685c      	ldr	r4, [r3, #4]
   3dda8:	689a      	ldr	r2, [r3, #8]
   3ddaa:	68db      	ldr	r3, [r3, #12]
   3ddac:	610d      	str	r5, [r1, #16]
   3ddae:	614c      	str	r4, [r1, #20]
   3ddb0:	618a      	str	r2, [r1, #24]
   3ddb2:	61cb      	str	r3, [r1, #28]
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3ddb4:	7d03      	ldrb	r3, [r0, #20]
   3ddb6:	620b      	str	r3, [r1, #32]
}
   3ddb8:	bc30      	pop	{r4, r5}
   3ddba:	4770      	bx	lr

0003ddbc <nrf91_socket_offload_close>:
{
   3ddbc:	b538      	push	{r3, r4, r5, lr}
   3ddbe:	4604      	mov	r4, r0
	retval = nrf_close(ctx->nrf_fd);
   3ddc0:	6800      	ldr	r0, [r0, #0]
   3ddc2:	f001 fda5 	bl	3f910 <nrf_close>
	if (retval == 0) {
   3ddc6:	4605      	mov	r5, r0
   3ddc8:	b108      	cbz	r0, 3ddce <nrf91_socket_offload_close+0x12>
}
   3ddca:	4628      	mov	r0, r5
   3ddcc:	bd38      	pop	{r3, r4, r5, pc}
		release_ctx(ctx);
   3ddce:	4620      	mov	r0, r4
   3ddd0:	f7ec ffa2 	bl	2ad18 <release_ctx>
	return retval;
   3ddd4:	e7f9      	b.n	3ddca <nrf91_socket_offload_close+0xe>

0003ddd6 <nrf91_socket_offload_setsockopt>:
{
   3ddd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ddd8:	b087      	sub	sp, #28
   3ddda:	460c      	mov	r4, r1
   3dddc:	4615      	mov	r5, r2
   3ddde:	461e      	mov	r6, r3
	int sd = OBJ_TO_SD(obj);
   3dde0:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   3dde2:	a905      	add	r1, sp, #20
   3dde4:	4620      	mov	r0, r4
   3dde6:	f7ff fe95 	bl	3db14 <z_to_nrf_level>
   3ddea:	2800      	cmp	r0, #0
   3ddec:	db27      	blt.n	3de3e <nrf91_socket_offload_setsockopt+0x68>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3ddee:	aa04      	add	r2, sp, #16
   3ddf0:	4629      	mov	r1, r5
   3ddf2:	4620      	mov	r0, r4
   3ddf4:	f7ff fe9f 	bl	3db36 <z_to_nrf_optname>
   3ddf8:	2800      	cmp	r0, #0
   3ddfa:	db20      	blt.n	3de3e <nrf91_socket_offload_setsockopt+0x68>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3ddfc:	2c01      	cmp	r4, #1
   3ddfe:	d00c      	beq.n	3de1a <nrf91_socket_offload_setsockopt+0x44>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3de00:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3de04:	d016      	beq.n	3de34 <nrf91_socket_offload_setsockopt+0x5e>
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3de06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3de08:	9300      	str	r3, [sp, #0]
   3de0a:	4633      	mov	r3, r6
   3de0c:	9a04      	ldr	r2, [sp, #16]
   3de0e:	9905      	ldr	r1, [sp, #20]
   3de10:	4638      	mov	r0, r7
   3de12:	f001 fe06 	bl	3fa22 <nrf_setsockopt>
}
   3de16:	b007      	add	sp, #28
   3de18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3de1a:	f1a5 0314 	sub.w	r3, r5, #20
   3de1e:	2b01      	cmp	r3, #1
   3de20:	d8ee      	bhi.n	3de00 <nrf91_socket_offload_setsockopt+0x2a>
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3de22:	6833      	ldr	r3, [r6, #0]
   3de24:	9302      	str	r3, [sp, #8]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3de26:	6873      	ldr	r3, [r6, #4]
   3de28:	9303      	str	r3, [sp, #12]
		nrf_optlen = sizeof(struct nrf_timeval);
   3de2a:	2308      	movs	r3, #8
   3de2c:	930c      	str	r3, [sp, #48]	; 0x30
		nrf_optval = &nrf_timeo;
   3de2e:	eb0d 0603 	add.w	r6, sp, r3
		nrf_optlen = sizeof(struct nrf_timeval);
   3de32:	e7e8      	b.n	3de06 <nrf91_socket_offload_setsockopt+0x30>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3de34:	2d0a      	cmp	r5, #10
   3de36:	d1e6      	bne.n	3de06 <nrf91_socket_offload_setsockopt+0x30>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3de38:	2301      	movs	r3, #1
   3de3a:	930c      	str	r3, [sp, #48]	; 0x30
   3de3c:	e7e3      	b.n	3de06 <nrf91_socket_offload_setsockopt+0x30>
	errno = ENOPROTOOPT;
   3de3e:	f7fe fd1b 	bl	3c878 <__errno>
   3de42:	236d      	movs	r3, #109	; 0x6d
   3de44:	6003      	str	r3, [r0, #0]
	return retval;
   3de46:	f04f 30ff 	mov.w	r0, #4294967295
   3de4a:	e7e4      	b.n	3de16 <nrf91_socket_offload_setsockopt+0x40>

0003de4c <nrf91_socket_offload_getsockopt>:
{
   3de4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3de50:	b088      	sub	sp, #32
   3de52:	460c      	mov	r4, r1
   3de54:	4615      	mov	r5, r2
   3de56:	461e      	mov	r6, r3
   3de58:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	int sd = OBJ_TO_SD(obj);
   3de5a:	f8d0 8000 	ldr.w	r8, [r0]
	struct nrf_timeval nrf_timeo = {0, 0};
   3de5e:	2200      	movs	r2, #0
   3de60:	9204      	str	r2, [sp, #16]
   3de62:	9205      	str	r2, [sp, #20]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3de64:	683b      	ldr	r3, [r7, #0]
   3de66:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   3de68:	a907      	add	r1, sp, #28
   3de6a:	4620      	mov	r0, r4
   3de6c:	f7ff fe52 	bl	3db14 <z_to_nrf_level>
   3de70:	2800      	cmp	r0, #0
   3de72:	db3b      	blt.n	3deec <nrf91_socket_offload_getsockopt+0xa0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3de74:	aa06      	add	r2, sp, #24
   3de76:	4629      	mov	r1, r5
   3de78:	4620      	mov	r0, r4
   3de7a:	f7ff fe5c 	bl	3db36 <z_to_nrf_optname>
   3de7e:	2800      	cmp	r0, #0
   3de80:	db34      	blt.n	3deec <nrf91_socket_offload_getsockopt+0xa0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3de82:	2c01      	cmp	r4, #1
   3de84:	d012      	beq.n	3deac <nrf91_socket_offload_getsockopt+0x60>
	void *nrf_optval = optval;
   3de86:	4633      	mov	r3, r6
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3de88:	aa03      	add	r2, sp, #12
   3de8a:	9200      	str	r2, [sp, #0]
   3de8c:	9a06      	ldr	r2, [sp, #24]
   3de8e:	9907      	ldr	r1, [sp, #28]
   3de90:	4640      	mov	r0, r8
   3de92:	f001 fde1 	bl	3fa58 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3de96:	4680      	mov	r8, r0
   3de98:	b920      	cbnz	r0, 3dea4 <nrf91_socket_offload_getsockopt+0x58>
   3de9a:	b11e      	cbz	r6, 3dea4 <nrf91_socket_offload_getsockopt+0x58>
		*optlen = nrf_optlen;
   3de9c:	9b03      	ldr	r3, [sp, #12]
   3de9e:	603b      	str	r3, [r7, #0]
		if (level == SOL_SOCKET) {
   3dea0:	2c01      	cmp	r4, #1
   3dea2:	d00d      	beq.n	3dec0 <nrf91_socket_offload_getsockopt+0x74>
}
   3dea4:	4640      	mov	r0, r8
   3dea6:	b008      	add	sp, #32
   3dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3deac:	f1a5 0314 	sub.w	r3, r5, #20
   3deb0:	2b01      	cmp	r3, #1
   3deb2:	d901      	bls.n	3deb8 <nrf91_socket_offload_getsockopt+0x6c>
	void *nrf_optval = optval;
   3deb4:	4633      	mov	r3, r6
   3deb6:	e7e7      	b.n	3de88 <nrf91_socket_offload_getsockopt+0x3c>
		nrf_optlen = sizeof(struct nrf_timeval);
   3deb8:	2308      	movs	r3, #8
   3deba:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3debc:	ab04      	add	r3, sp, #16
   3debe:	e7e3      	b.n	3de88 <nrf91_socket_offload_getsockopt+0x3c>
			if (optname == SO_ERROR) {
   3dec0:	2d04      	cmp	r5, #4
   3dec2:	d009      	beq.n	3ded8 <nrf91_socket_offload_getsockopt+0x8c>
			} else if ((optname == SO_RCVTIMEO) ||
   3dec4:	3d14      	subs	r5, #20
   3dec6:	2d01      	cmp	r5, #1
   3dec8:	d8ec      	bhi.n	3dea4 <nrf91_socket_offload_getsockopt+0x58>
					nrf_timeo.tv_sec;
   3deca:	9b04      	ldr	r3, [sp, #16]
				((struct timeval *)optval)->tv_sec =
   3decc:	6033      	str	r3, [r6, #0]
					nrf_timeo.tv_usec;
   3dece:	9b05      	ldr	r3, [sp, #20]
				((struct timeval *)optval)->tv_usec =
   3ded0:	6073      	str	r3, [r6, #4]
				*optlen = sizeof(struct timeval);
   3ded2:	2308      	movs	r3, #8
   3ded4:	603b      	str	r3, [r7, #0]
   3ded6:	e7e5      	b.n	3dea4 <nrf91_socket_offload_getsockopt+0x58>
				if (*(int *)optval != 0) {
   3ded8:	6830      	ldr	r0, [r6, #0]
   3deda:	2800      	cmp	r0, #0
   3dedc:	d0e2      	beq.n	3dea4 <nrf91_socket_offload_getsockopt+0x58>
					nrf_modem_os_errno_set(*(int *)optval);
   3dede:	f7ff fdf3 	bl	3dac8 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3dee2:	f7fe fcc9 	bl	3c878 <__errno>
   3dee6:	6803      	ldr	r3, [r0, #0]
   3dee8:	6033      	str	r3, [r6, #0]
   3deea:	e7db      	b.n	3dea4 <nrf91_socket_offload_getsockopt+0x58>
	errno = ENOPROTOOPT;
   3deec:	f7fe fcc4 	bl	3c878 <__errno>
   3def0:	236d      	movs	r3, #109	; 0x6d
   3def2:	6003      	str	r3, [r0, #0]
	return retval;
   3def4:	f04f 38ff 	mov.w	r8, #4294967295
   3def8:	e7d4      	b.n	3dea4 <nrf91_socket_offload_getsockopt+0x58>

0003defa <nrf91_socket_offload_recvfrom>:
{
   3defa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3defe:	b08c      	sub	sp, #48	; 0x30
   3df00:	4604      	mov	r4, r0
   3df02:	460d      	mov	r5, r1
   3df04:	4617      	mov	r7, r2
   3df06:	4698      	mov	r8, r3
   3df08:	9e14      	ldr	r6, [sp, #80]	; 0x50
	k_mutex_unlock(ctx->lock);
   3df0a:	6840      	ldr	r0, [r0, #4]
	return z_impl_k_mutex_unlock(mutex);
   3df0c:	f7f8 f956 	bl	361bc <z_impl_k_mutex_unlock>
	if (from == NULL) {
   3df10:	b356      	cbz	r6, 3df68 <nrf91_socket_offload_recvfrom+0x6e>
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   3df12:	f10d 090c 	add.w	r9, sp, #12
   3df16:	f04f 0a24 	mov.w	sl, #36	; 0x24
   3df1a:	4652      	mov	r2, sl
   3df1c:	2100      	movs	r1, #0
   3df1e:	4648      	mov	r0, r9
   3df20:	f002 f80e 	bl	3ff40 <memset>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3df24:	f8cd a008 	str.w	sl, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3df28:	4640      	mov	r0, r8
   3df2a:	f7ff fe9b 	bl	3dc64 <z_to_nrf_flags>
   3df2e:	4603      	mov	r3, r0
   3df30:	aa02      	add	r2, sp, #8
   3df32:	9201      	str	r2, [sp, #4]
   3df34:	f8cd 9000 	str.w	r9, [sp]
   3df38:	463a      	mov	r2, r7
   3df3a:	4629      	mov	r1, r5
   3df3c:	6820      	ldr	r0, [r4, #0]
   3df3e:	f001 fd0f 	bl	3f960 <nrf_recvfrom>
		if (retval < 0) {
   3df42:	1e05      	subs	r5, r0, #0
   3df44:	db04      	blt.n	3df50 <nrf91_socket_offload_recvfrom+0x56>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3df46:	9b04      	ldr	r3, [sp, #16]
   3df48:	2b02      	cmp	r3, #2
   3df4a:	d01b      	beq.n	3df84 <nrf91_socket_offload_recvfrom+0x8a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3df4c:	2b0a      	cmp	r3, #10
   3df4e:	d021      	beq.n	3df94 <nrf91_socket_offload_recvfrom+0x9a>
	if (ctx->lock) {
   3df50:	6860      	ldr	r0, [r4, #4]
   3df52:	b128      	cbz	r0, 3df60 <nrf91_socket_offload_recvfrom+0x66>
	return z_impl_k_mutex_lock(mutex, timeout);
   3df54:	f04f 32ff 	mov.w	r2, #4294967295
   3df58:	f04f 33ff 	mov.w	r3, #4294967295
   3df5c:	f7f8 f838 	bl	35fd0 <z_impl_k_mutex_lock>
}
   3df60:	4628      	mov	r0, r5
   3df62:	b00c      	add	sp, #48	; 0x30
   3df64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   3df68:	4640      	mov	r0, r8
   3df6a:	f7ff fe7b 	bl	3dc64 <z_to_nrf_flags>
   3df6e:	4603      	mov	r3, r0
   3df70:	2200      	movs	r2, #0
   3df72:	9201      	str	r2, [sp, #4]
   3df74:	9200      	str	r2, [sp, #0]
   3df76:	463a      	mov	r2, r7
   3df78:	4629      	mov	r1, r5
   3df7a:	6820      	ldr	r0, [r4, #0]
   3df7c:	f001 fcf0 	bl	3f960 <nrf_recvfrom>
   3df80:	4605      	mov	r5, r0
   3df82:	e7e5      	b.n	3df50 <nrf91_socket_offload_recvfrom+0x56>
			nrf_to_z_ipv4(from, (struct nrf_sockaddr_in *)cliaddr);
   3df84:	a903      	add	r1, sp, #12
   3df86:	4630      	mov	r0, r6
   3df88:	f7ff fdbd 	bl	3db06 <nrf_to_z_ipv4>
			*fromlen = sizeof(struct sockaddr_in);
   3df8c:	2308      	movs	r3, #8
   3df8e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   3df90:	6013      	str	r3, [r2, #0]
   3df92:	e7dd      	b.n	3df50 <nrf91_socket_offload_recvfrom+0x56>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3df94:	a903      	add	r1, sp, #12
   3df96:	4630      	mov	r0, r6
   3df98:	f7ff fee5 	bl	3dd66 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3df9c:	2318      	movs	r3, #24
   3df9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   3dfa0:	6013      	str	r3, [r2, #0]
   3dfa2:	e7d5      	b.n	3df50 <nrf91_socket_offload_recvfrom+0x56>

0003dfa4 <nrf91_socket_offload_read>:
{
   3dfa4:	b500      	push	{lr}
   3dfa6:	b083      	sub	sp, #12
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3dfa8:	2300      	movs	r3, #0
   3dfaa:	9301      	str	r3, [sp, #4]
   3dfac:	9300      	str	r3, [sp, #0]
   3dfae:	f7ff ffa4 	bl	3defa <nrf91_socket_offload_recvfrom>
}
   3dfb2:	b003      	add	sp, #12
   3dfb4:	f85d fb04 	ldr.w	pc, [sp], #4

0003dfb8 <nrf91_socket_offload_sendto>:
{
   3dfb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3dfbc:	b08d      	sub	sp, #52	; 0x34
   3dfbe:	460f      	mov	r7, r1
   3dfc0:	4616      	mov	r6, r2
   3dfc2:	461d      	mov	r5, r3
   3dfc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
	int sd = OBJ_TO_SD(obj);
   3dfc6:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   3dfca:	b1d4      	cbz	r4, 3e002 <nrf91_socket_offload_sendto+0x4a>
	} else if (to->sa_family == AF_INET) {
   3dfcc:	8820      	ldrh	r0, [r4, #0]
   3dfce:	2801      	cmp	r0, #1
   3dfd0:	d024      	beq.n	3e01c <nrf91_socket_offload_sendto+0x64>
	} else if (to->sa_family == AF_INET6) {
   3dfd2:	2802      	cmp	r0, #2
   3dfd4:	d136      	bne.n	3e044 <nrf91_socket_offload_sendto+0x8c>
		z_to_nrf_ipv6(to, &ipv6);
   3dfd6:	f10d 090c 	add.w	r9, sp, #12
   3dfda:	4649      	mov	r1, r9
   3dfdc:	4620      	mov	r0, r4
   3dfde:	f7ff fed8 	bl	3dd92 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3dfe2:	4628      	mov	r0, r5
   3dfe4:	f7ff fe3e 	bl	3dc64 <z_to_nrf_flags>
   3dfe8:	4603      	mov	r3, r0
   3dfea:	2224      	movs	r2, #36	; 0x24
   3dfec:	9201      	str	r2, [sp, #4]
   3dfee:	f8cd 9000 	str.w	r9, [sp]
   3dff2:	4632      	mov	r2, r6
   3dff4:	4639      	mov	r1, r7
   3dff6:	4640      	mov	r0, r8
   3dff8:	f001 fc97 	bl	3f92a <nrf_sendto>
}
   3dffc:	b00d      	add	sp, #52	; 0x34
   3dffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3e002:	4618      	mov	r0, r3
   3e004:	f7ff fe2e 	bl	3dc64 <z_to_nrf_flags>
   3e008:	4603      	mov	r3, r0
   3e00a:	2200      	movs	r2, #0
   3e00c:	9201      	str	r2, [sp, #4]
   3e00e:	9200      	str	r2, [sp, #0]
   3e010:	4632      	mov	r2, r6
   3e012:	4639      	mov	r1, r7
   3e014:	4640      	mov	r0, r8
   3e016:	f001 fc88 	bl	3f92a <nrf_sendto>
   3e01a:	e7ef      	b.n	3dffc <nrf91_socket_offload_sendto+0x44>
		z_to_nrf_ipv4(to, &ipv4);
   3e01c:	f10d 090c 	add.w	r9, sp, #12
   3e020:	4649      	mov	r1, r9
   3e022:	4620      	mov	r0, r4
   3e024:	f7ff fd66 	bl	3daf4 <z_to_nrf_ipv4>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3e028:	4628      	mov	r0, r5
   3e02a:	f7ff fe1b 	bl	3dc64 <z_to_nrf_flags>
   3e02e:	4603      	mov	r3, r0
   3e030:	2210      	movs	r2, #16
   3e032:	9201      	str	r2, [sp, #4]
   3e034:	f8cd 9000 	str.w	r9, [sp]
   3e038:	4632      	mov	r2, r6
   3e03a:	4639      	mov	r1, r7
   3e03c:	4640      	mov	r0, r8
   3e03e:	f001 fc74 	bl	3f92a <nrf_sendto>
   3e042:	e7db      	b.n	3dffc <nrf91_socket_offload_sendto+0x44>
	errno = ENOTSUP;
   3e044:	f7fe fc18 	bl	3c878 <__errno>
   3e048:	2386      	movs	r3, #134	; 0x86
   3e04a:	6003      	str	r3, [r0, #0]
	return retval;
   3e04c:	f04f 30ff 	mov.w	r0, #4294967295
   3e050:	e7d4      	b.n	3dffc <nrf91_socket_offload_sendto+0x44>

0003e052 <nrf91_socket_offload_write>:
{
   3e052:	b500      	push	{lr}
   3e054:	b083      	sub	sp, #12
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3e056:	2300      	movs	r3, #0
   3e058:	9301      	str	r3, [sp, #4]
   3e05a:	9300      	str	r3, [sp, #0]
   3e05c:	f7ff ffac 	bl	3dfb8 <nrf91_socket_offload_sendto>
}
   3e060:	b003      	add	sp, #12
   3e062:	f85d fb04 	ldr.w	pc, [sp], #4

0003e066 <nrf91_socket_offload_listen>:
{
   3e066:	b508      	push	{r3, lr}
	return nrf_listen(sd, backlog);
   3e068:	6800      	ldr	r0, [r0, #0]
   3e06a:	f001 fca5 	bl	3f9b8 <nrf_listen>
}
   3e06e:	bd08      	pop	{r3, pc}

0003e070 <nrf91_socket_offload_connect>:
{
   3e070:	b510      	push	{r4, lr}
   3e072:	b08a      	sub	sp, #40	; 0x28
   3e074:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   3e076:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3e078:	8809      	ldrh	r1, [r1, #0]
   3e07a:	2901      	cmp	r1, #1
   3e07c:	d009      	beq.n	3e092 <nrf91_socket_offload_connect+0x22>
	} else if (addr->sa_family == AF_INET6) {
   3e07e:	2902      	cmp	r1, #2
   3e080:	d011      	beq.n	3e0a6 <nrf91_socket_offload_connect+0x36>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3e082:	4619      	mov	r1, r3
   3e084:	4620      	mov	r0, r4
   3e086:	f001 fc86 	bl	3f996 <nrf_connect>
		if (retval < 0) {
   3e08a:	2800      	cmp	r0, #0
   3e08c:	db15      	blt.n	3e0ba <nrf91_socket_offload_connect+0x4a>
}
   3e08e:	b00a      	add	sp, #40	; 0x28
   3e090:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   3e092:	a901      	add	r1, sp, #4
   3e094:	4618      	mov	r0, r3
   3e096:	f7ff fd2d 	bl	3daf4 <z_to_nrf_ipv4>
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   3e09a:	2210      	movs	r2, #16
   3e09c:	a901      	add	r1, sp, #4
   3e09e:	4620      	mov	r0, r4
   3e0a0:	f001 fc79 	bl	3f996 <nrf_connect>
   3e0a4:	e7f3      	b.n	3e08e <nrf91_socket_offload_connect+0x1e>
		z_to_nrf_ipv6(addr, &ipv6);
   3e0a6:	a901      	add	r1, sp, #4
   3e0a8:	4618      	mov	r0, r3
   3e0aa:	f7ff fe72 	bl	3dd92 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3e0ae:	2224      	movs	r2, #36	; 0x24
   3e0b0:	a901      	add	r1, sp, #4
   3e0b2:	4620      	mov	r0, r4
   3e0b4:	f001 fc6f 	bl	3f996 <nrf_connect>
   3e0b8:	e7e9      	b.n	3e08e <nrf91_socket_offload_connect+0x1e>
	errno = ENOTSUP;
   3e0ba:	f7fe fbdd 	bl	3c878 <__errno>
   3e0be:	2386      	movs	r3, #134	; 0x86
   3e0c0:	6003      	str	r3, [r0, #0]
	return retval;
   3e0c2:	f04f 30ff 	mov.w	r0, #4294967295
   3e0c6:	e7e2      	b.n	3e08e <nrf91_socket_offload_connect+0x1e>

0003e0c8 <nrf91_socket_offload_bind>:
{
   3e0c8:	b510      	push	{r4, lr}
   3e0ca:	b08a      	sub	sp, #40	; 0x28
   3e0cc:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   3e0ce:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3e0d0:	880a      	ldrh	r2, [r1, #0]
   3e0d2:	2a01      	cmp	r2, #1
   3e0d4:	d00c      	beq.n	3e0f0 <nrf91_socket_offload_bind+0x28>
	} else if (addr->sa_family == AF_INET6) {
   3e0d6:	2a02      	cmp	r2, #2
   3e0d8:	d114      	bne.n	3e104 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   3e0da:	a901      	add	r1, sp, #4
   3e0dc:	4618      	mov	r0, r3
   3e0de:	f7ff fe58 	bl	3dd92 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3e0e2:	2224      	movs	r2, #36	; 0x24
   3e0e4:	a901      	add	r1, sp, #4
   3e0e6:	4620      	mov	r0, r4
   3e0e8:	f001 fc8a 	bl	3fa00 <nrf_bind>
}
   3e0ec:	b00a      	add	sp, #40	; 0x28
   3e0ee:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   3e0f0:	a901      	add	r1, sp, #4
   3e0f2:	4618      	mov	r0, r3
   3e0f4:	f7ff fcfe 	bl	3daf4 <z_to_nrf_ipv4>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   3e0f8:	2210      	movs	r2, #16
   3e0fa:	a901      	add	r1, sp, #4
   3e0fc:	4620      	mov	r0, r4
   3e0fe:	f001 fc7f 	bl	3fa00 <nrf_bind>
   3e102:	e7f3      	b.n	3e0ec <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3e104:	f7fe fbb8 	bl	3c878 <__errno>
   3e108:	2386      	movs	r3, #134	; 0x86
   3e10a:	6003      	str	r3, [r0, #0]
	return retval;
   3e10c:	f04f 30ff 	mov.w	r0, #4294967295
   3e110:	e7ec      	b.n	3e0ec <nrf91_socket_offload_bind+0x24>

0003e112 <nrf91_socket_offload_fcntl>:
{
   3e112:	b500      	push	{lr}
   3e114:	b083      	sub	sp, #12
   3e116:	9201      	str	r2, [sp, #4]
	switch (cmd) {
   3e118:	2903      	cmp	r1, #3
   3e11a:	d00f      	beq.n	3e13c <nrf91_socket_offload_fcntl+0x2a>
   3e11c:	2904      	cmp	r1, #4
   3e11e:	d115      	bne.n	3e14c <nrf91_socket_offload_fcntl+0x3a>
		flags = va_arg(args, int);
   3e120:	4613      	mov	r3, r2
   3e122:	3204      	adds	r2, #4
   3e124:	9201      	str	r2, [sp, #4]
   3e126:	681a      	ldr	r2, [r3, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   3e128:	b112      	cbz	r2, 3e130 <nrf91_socket_offload_fcntl+0x1e>
   3e12a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   3e12e:	d10d      	bne.n	3e14c <nrf91_socket_offload_fcntl+0x3a>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   3e130:	f3c2 3280 	ubfx	r2, r2, #14, #1
   3e134:	2101      	movs	r1, #1
   3e136:	f001 fcb0 	bl	3fa9a <nrf_fcntl>
		break;
   3e13a:	e00d      	b.n	3e158 <nrf91_socket_offload_fcntl+0x46>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   3e13c:	2200      	movs	r2, #0
   3e13e:	2102      	movs	r1, #2
   3e140:	f001 fcab 	bl	3fa9a <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   3e144:	0380      	lsls	r0, r0, #14
   3e146:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
		break;
   3e14a:	e005      	b.n	3e158 <nrf91_socket_offload_fcntl+0x46>
	errno = EINVAL;
   3e14c:	f7fe fb94 	bl	3c878 <__errno>
   3e150:	2316      	movs	r3, #22
   3e152:	6003      	str	r3, [r0, #0]
	return retval;
   3e154:	f04f 30ff 	mov.w	r0, #4294967295
}
   3e158:	b003      	add	sp, #12
   3e15a:	f85d fb04 	ldr.w	pc, [sp], #4

0003e15e <native_socket>:
{
   3e15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e160:	4605      	mov	r5, r0
   3e162:	4617      	mov	r7, r2
   3e164:	461c      	mov	r4, r3
	type = type & ~(SOCK_NATIVE | SOCK_NATIVE_TLS);
   3e166:	f021 4640 	bic.w	r6, r1, #3221225472	; 0xc0000000
	k_sched_lock();
   3e16a:	f7f8 ffed 	bl	37148 <k_sched_lock>
	*offload_lock = true;
   3e16e:	2301      	movs	r3, #1
   3e170:	7023      	strb	r3, [r4, #0]
	return z_impl_zsock_socket(family, type, proto);
   3e172:	463a      	mov	r2, r7
   3e174:	4631      	mov	r1, r6
   3e176:	4628      	mov	r0, r5
   3e178:	f7e8 fca6 	bl	26ac8 <z_impl_zsock_socket>
   3e17c:	4605      	mov	r5, r0
	*offload_lock = false;
   3e17e:	2300      	movs	r3, #0
   3e180:	7023      	strb	r3, [r4, #0]
	k_sched_unlock();
   3e182:	f7f9 fd17 	bl	37bb4 <k_sched_unlock>
}
   3e186:	4628      	mov	r0, r5
   3e188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e18a <nrf91_socket_offload_socket>:
{
   3e18a:	b570      	push	{r4, r5, r6, lr}
   3e18c:	460e      	mov	r6, r1
   3e18e:	4615      	mov	r5, r2
	family = z_to_nrf_family(family);
   3e190:	b280      	uxth	r0, r0
   3e192:	f7ff fd8a 	bl	3dcaa <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3e196:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3e19a:	d010      	beq.n	3e1be <nrf91_socket_offload_socket+0x34>
   3e19c:	4604      	mov	r4, r0
	type = z_to_nrf_socktype(type);
   3e19e:	4630      	mov	r0, r6
   3e1a0:	f7ff fdc3 	bl	3dd2a <z_to_nrf_socktype>
   3e1a4:	4606      	mov	r6, r0
	proto = z_to_nrf_protocol(proto);
   3e1a6:	4628      	mov	r0, r5
   3e1a8:	f7ff fdc0 	bl	3dd2c <z_to_nrf_protocol>
   3e1ac:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   3e1ae:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3e1b2:	d00b      	beq.n	3e1cc <nrf91_socket_offload_socket+0x42>
	retval = nrf_socket(family, type, proto);
   3e1b4:	4631      	mov	r1, r6
   3e1b6:	4620      	mov	r0, r4
   3e1b8:	f001 fb99 	bl	3f8ee <nrf_socket>
}
   3e1bc:	bd70      	pop	{r4, r5, r6, pc}
		errno = EAFNOSUPPORT;
   3e1be:	f7fe fb5b 	bl	3c878 <__errno>
   3e1c2:	236a      	movs	r3, #106	; 0x6a
   3e1c4:	6003      	str	r3, [r0, #0]
		return -1;
   3e1c6:	f04f 30ff 	mov.w	r0, #4294967295
   3e1ca:	e7f7      	b.n	3e1bc <nrf91_socket_offload_socket+0x32>
		errno = EPROTONOSUPPORT;
   3e1cc:	f7fe fb54 	bl	3c878 <__errno>
   3e1d0:	237b      	movs	r3, #123	; 0x7b
   3e1d2:	6003      	str	r3, [r0, #0]
		return -1;
   3e1d4:	f04f 30ff 	mov.w	r0, #4294967295
   3e1d8:	e7f0      	b.n	3e1bc <nrf91_socket_offload_socket+0x32>

0003e1da <nrf91_socket_offload_freeaddrinfo>:
{
   3e1da:	b538      	push	{r3, r4, r5, lr}
   3e1dc:	4604      	mov	r4, r0
	while (next != NULL) {
   3e1de:	b144      	cbz	r4, 3e1f2 <nrf91_socket_offload_freeaddrinfo+0x18>
		next = next->ai_next;
   3e1e0:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3e1e2:	69a0      	ldr	r0, [r4, #24]
   3e1e4:	f001 fe40 	bl	3fe68 <k_free>
		k_free(this);
   3e1e8:	4620      	mov	r0, r4
   3e1ea:	f001 fe3d 	bl	3fe68 <k_free>
		next = next->ai_next;
   3e1ee:	462c      	mov	r4, r5
   3e1f0:	e7f5      	b.n	3e1de <nrf91_socket_offload_freeaddrinfo+0x4>
}
   3e1f2:	bd38      	pop	{r3, r4, r5, pc}

0003e1f4 <nrf_to_z_addrinfo>:
{
   3e1f4:	b538      	push	{r3, r4, r5, lr}
   3e1f6:	4604      	mov	r4, r0
   3e1f8:	460d      	mov	r5, r1
	z_out->ai_next = NULL;
   3e1fa:	2300      	movs	r3, #0
   3e1fc:	6003      	str	r3, [r0, #0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   3e1fe:	61c3      	str	r3, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   3e200:	6808      	ldr	r0, [r1, #0]
   3e202:	f7ff fd50 	bl	3dca6 <nrf_to_z_addrinfo_flags>
   3e206:	6060      	str	r0, [r4, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   3e208:	68ab      	ldr	r3, [r5, #8]
   3e20a:	60e3      	str	r3, [r4, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   3e20c:	6868      	ldr	r0, [r5, #4]
   3e20e:	f7ff fd5d 	bl	3dccc <nrf_to_z_family>
	if (family == -EAFNOSUPPORT) {
   3e212:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3e216:	d017      	beq.n	3e248 <nrf_to_z_addrinfo+0x54>
	z_out->ai_family = family;
   3e218:	60a0      	str	r0, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   3e21a:	68e8      	ldr	r0, [r5, #12]
   3e21c:	f7ff fd69 	bl	3dcf2 <nrf_to_z_protocol>
   3e220:	6120      	str	r0, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   3e222:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3e226:	d010      	beq.n	3e24a <nrf_to_z_addrinfo+0x56>
	if (nrf_in->ai_family == NRF_AF_INET) {
   3e228:	686b      	ldr	r3, [r5, #4]
   3e22a:	2b02      	cmp	r3, #2
   3e22c:	d010      	beq.n	3e250 <nrf_to_z_addrinfo+0x5c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   3e22e:	2b0a      	cmp	r3, #10
   3e230:	d11d      	bne.n	3e26e <nrf_to_z_addrinfo+0x7a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   3e232:	2018      	movs	r0, #24
   3e234:	f001 fe21 	bl	3fe7a <k_malloc>
   3e238:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   3e23a:	b1d8      	cbz	r0, 3e274 <nrf_to_z_addrinfo+0x80>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   3e23c:	2318      	movs	r3, #24
   3e23e:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   3e240:	6969      	ldr	r1, [r5, #20]
   3e242:	f7ff fd90 	bl	3dd66 <nrf_to_z_ipv6>
	return 0;
   3e246:	2000      	movs	r0, #0
}
   3e248:	bd38      	pop	{r3, r4, r5, pc}
		z_out->ai_addr = NULL;
   3e24a:	2300      	movs	r3, #0
   3e24c:	61a3      	str	r3, [r4, #24]
		return -EPROTONOSUPPORT;
   3e24e:	e7fb      	b.n	3e248 <nrf_to_z_addrinfo+0x54>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   3e250:	2008      	movs	r0, #8
   3e252:	f001 fe12 	bl	3fe7a <k_malloc>
   3e256:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   3e258:	b130      	cbz	r0, 3e268 <nrf_to_z_addrinfo+0x74>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   3e25a:	2308      	movs	r3, #8
   3e25c:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv4(z_out->ai_addr,
   3e25e:	6969      	ldr	r1, [r5, #20]
   3e260:	f7ff fc51 	bl	3db06 <nrf_to_z_ipv4>
	return 0;
   3e264:	2000      	movs	r0, #0
   3e266:	e7ef      	b.n	3e248 <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   3e268:	f06f 000b 	mvn.w	r0, #11
   3e26c:	e7ec      	b.n	3e248 <nrf_to_z_addrinfo+0x54>
		return -EPROTONOSUPPORT;
   3e26e:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   3e272:	e7e9      	b.n	3e248 <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   3e274:	f06f 000b 	mvn.w	r0, #11
   3e278:	e7e6      	b.n	3e248 <nrf_to_z_addrinfo+0x54>

0003e27a <z_to_nrf_addrinfo_hints>:
{
   3e27a:	b538      	push	{r3, r4, r5, lr}
   3e27c:	4605      	mov	r5, r0
   3e27e:	460c      	mov	r4, r1
__ssp_bos_icheck3(memset, void *, int)
   3e280:	2220      	movs	r2, #32
   3e282:	2100      	movs	r1, #0
   3e284:	4620      	mov	r0, r4
   3e286:	f001 fe5b 	bl	3ff40 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3e28a:	6868      	ldr	r0, [r5, #4]
   3e28c:	f7ff fcff 	bl	3dc8e <z_to_nrf_addrinfo_flags>
   3e290:	6020      	str	r0, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3e292:	68e8      	ldr	r0, [r5, #12]
   3e294:	f7ff fd49 	bl	3dd2a <z_to_nrf_socktype>
   3e298:	60a0      	str	r0, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3e29a:	8928      	ldrh	r0, [r5, #8]
   3e29c:	f7ff fd05 	bl	3dcaa <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3e2a0:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3e2a4:	d00b      	beq.n	3e2be <z_to_nrf_addrinfo_hints+0x44>
	nrf_out->ai_family = family;
   3e2a6:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3e2a8:	6928      	ldr	r0, [r5, #16]
   3e2aa:	f7ff fd3f 	bl	3dd2c <z_to_nrf_protocol>
   3e2ae:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3e2b0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   3e2b4:	d003      	beq.n	3e2be <z_to_nrf_addrinfo_hints+0x44>
	if (z_in->ai_canonname != NULL) {
   3e2b6:	69eb      	ldr	r3, [r5, #28]
   3e2b8:	b113      	cbz	r3, 3e2c0 <z_to_nrf_addrinfo_hints+0x46>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3e2ba:	61a3      	str	r3, [r4, #24]
	return 0;
   3e2bc:	2000      	movs	r0, #0
}
   3e2be:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   3e2c0:	2000      	movs	r0, #0
   3e2c2:	e7fc      	b.n	3e2be <z_to_nrf_addrinfo_hints+0x44>

0003e2c4 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   3e2c4:	b570      	push	{r4, r5, r6, lr}
   3e2c6:	b082      	sub	sp, #8
   3e2c8:	9001      	str	r0, [sp, #4]
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   3e2ca:	b1a8      	cbz	r0, 3e2f8 <at_parser_max_params_from_str+0x34>
   3e2cc:	460d      	mov	r5, r1
   3e2ce:	4614      	mov	r4, r2
   3e2d0:	461e      	mov	r6, r3
   3e2d2:	b1a2      	cbz	r2, 3e2fe <at_parser_max_params_from_str+0x3a>
   3e2d4:	6853      	ldr	r3, [r2, #4]
   3e2d6:	b1ab      	cbz	r3, 3e304 <at_parser_max_params_from_str+0x40>
		return -EINVAL;
	}

	at_params_list_clear(list);
   3e2d8:	4610      	mov	r0, r2
   3e2da:	f000 f82e 	bl	3e33a <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   3e2de:	6822      	ldr	r2, [r4, #0]

	err = at_parse_param(&at_params_str, list, max_params_count);
   3e2e0:	42b2      	cmp	r2, r6
   3e2e2:	bf28      	it	cs
   3e2e4:	4632      	movcs	r2, r6
   3e2e6:	4621      	mov	r1, r4
   3e2e8:	a801      	add	r0, sp, #4
   3e2ea:	f7ed ffab 	bl	2c244 <at_parse_param>

	if (next_param_str) {
   3e2ee:	b10d      	cbz	r5, 3e2f4 <at_parser_max_params_from_str+0x30>
		*next_param_str = (char *)at_params_str;
   3e2f0:	9b01      	ldr	r3, [sp, #4]
   3e2f2:	602b      	str	r3, [r5, #0]
	}

	return err;
}
   3e2f4:	b002      	add	sp, #8
   3e2f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3e2f8:	f06f 0015 	mvn.w	r0, #21
   3e2fc:	e7fa      	b.n	3e2f4 <at_parser_max_params_from_str+0x30>
   3e2fe:	f06f 0015 	mvn.w	r0, #21
   3e302:	e7f7      	b.n	3e2f4 <at_parser_max_params_from_str+0x30>
   3e304:	f06f 0015 	mvn.w	r0, #21
   3e308:	e7f4      	b.n	3e2f4 <at_parser_max_params_from_str+0x30>

0003e30a <at_parser_params_from_str>:
{
   3e30a:	b508      	push	{r3, lr}
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3e30c:	6813      	ldr	r3, [r2, #0]
   3e30e:	f7ff ffd9 	bl	3e2c4 <at_parser_max_params_from_str>
}
   3e312:	bd08      	pop	{r3, pc}

0003e314 <at_params_list_init>:

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
	if (list == NULL) {
   3e314:	b158      	cbz	r0, 3e32e <at_params_list_init+0x1a>
{
   3e316:	b538      	push	{r3, r4, r5, lr}
   3e318:	460c      	mov	r4, r1
   3e31a:	4605      	mov	r5, r0
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3e31c:	2110      	movs	r1, #16
   3e31e:	4620      	mov	r0, r4
   3e320:	f001 fdb1 	bl	3fe86 <k_calloc>
   3e324:	6068      	str	r0, [r5, #4]
	if (list->params == NULL) {
   3e326:	b128      	cbz	r0, 3e334 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
   3e328:	602c      	str	r4, [r5, #0]
	return 0;
   3e32a:	2000      	movs	r0, #0
}
   3e32c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3e32e:	f06f 0015 	mvn.w	r0, #21
}
   3e332:	4770      	bx	lr
		return -ENOMEM;
   3e334:	f06f 000b 	mvn.w	r0, #11
   3e338:	e7f8      	b.n	3e32c <at_params_list_init+0x18>

0003e33a <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   3e33a:	b198      	cbz	r0, 3e364 <at_params_list_clear+0x2a>
{
   3e33c:	b570      	push	{r4, r5, r6, lr}
   3e33e:	4606      	mov	r6, r0
	if (list == NULL || list->params == NULL) {
   3e340:	6843      	ldr	r3, [r0, #4]
   3e342:	b173      	cbz	r3, 3e362 <at_params_list_clear+0x28>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   3e344:	2500      	movs	r5, #0
   3e346:	e009      	b.n	3e35c <at_params_list_clear+0x22>
		struct at_param *params = list->params;
   3e348:	6874      	ldr	r4, [r6, #4]

		at_param_clear(&params[i]);
   3e34a:	eb04 1405 	add.w	r4, r4, r5, lsl #4
   3e34e:	4620      	mov	r0, r4
   3e350:	f7ee f84a 	bl	2c3e8 <at_param_clear>
		at_param_init(&params[i]);
   3e354:	4620      	mov	r0, r4
   3e356:	f7ee f867 	bl	2c428 <at_param_init>
	for (size_t i = 0; i < list->param_count; ++i) {
   3e35a:	3501      	adds	r5, #1
   3e35c:	6833      	ldr	r3, [r6, #0]
   3e35e:	42ab      	cmp	r3, r5
   3e360:	d8f2      	bhi.n	3e348 <at_params_list_clear+0xe>
	}
}
   3e362:	bd70      	pop	{r4, r5, r6, pc}
   3e364:	4770      	bx	lr

0003e366 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   3e366:	b160      	cbz	r0, 3e382 <at_params_list_free+0x1c>
{
   3e368:	b538      	push	{r3, r4, r5, lr}
   3e36a:	4604      	mov	r4, r0
	if (list == NULL || list->params == NULL) {
   3e36c:	6843      	ldr	r3, [r0, #4]
   3e36e:	b13b      	cbz	r3, 3e380 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);
   3e370:	f7ff ffe3 	bl	3e33a <at_params_list_clear>

	list->param_count = 0;
   3e374:	2500      	movs	r5, #0
   3e376:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3e378:	6860      	ldr	r0, [r4, #4]
   3e37a:	f001 fd75 	bl	3fe68 <k_free>
	list->params = NULL;
   3e37e:	6065      	str	r5, [r4, #4]
}
   3e380:	bd38      	pop	{r3, r4, r5, pc}
   3e382:	4770      	bx	lr

0003e384 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
	if (list == NULL || list->params == NULL) {
   3e384:	b180      	cbz	r0, 3e3a8 <at_params_empty_put+0x24>
   3e386:	6842      	ldr	r2, [r0, #4]
   3e388:	b18a      	cbz	r2, 3e3ae <at_params_empty_put+0x2a>
{
   3e38a:	b510      	push	{r4, lr}
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e38c:	f7ed fff0 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e390:	4604      	mov	r4, r0
   3e392:	b178      	cbz	r0, 3e3b4 <at_params_empty_put+0x30>
		return -EINVAL;
	}

	at_param_clear(param);
   3e394:	f7ee f828 	bl	2c3e8 <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   3e398:	2304      	movs	r3, #4
   3e39a:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3e39c:	2200      	movs	r2, #0
   3e39e:	2300      	movs	r3, #0
   3e3a0:	e9c4 2302 	strd	r2, r3, [r4, #8]

	return 0;
   3e3a4:	2000      	movs	r0, #0
}
   3e3a6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3e3a8:	f06f 0015 	mvn.w	r0, #21
   3e3ac:	4770      	bx	lr
   3e3ae:	f06f 0015 	mvn.w	r0, #21
}
   3e3b2:	4770      	bx	lr
		return -EINVAL;
   3e3b4:	f06f 0015 	mvn.w	r0, #21
   3e3b8:	e7f5      	b.n	3e3a6 <at_params_empty_put+0x22>

0003e3ba <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
	if (list == NULL || list->params == NULL) {
   3e3ba:	b180      	cbz	r0, 3e3de <at_params_int_put+0x24>
{
   3e3bc:	b570      	push	{r4, r5, r6, lr}
   3e3be:	4616      	mov	r6, r2
   3e3c0:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   3e3c2:	6843      	ldr	r3, [r0, #4]
   3e3c4:	b173      	cbz	r3, 3e3e4 <at_params_int_put+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e3c6:	f7ed ffd3 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e3ca:	4604      	mov	r4, r0
   3e3cc:	b168      	cbz	r0, 3e3ea <at_params_int_put+0x30>
		return -EINVAL;
	}

	at_param_clear(param);
   3e3ce:	f7ee f80b 	bl	2c3e8 <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   3e3d2:	2301      	movs	r3, #1
   3e3d4:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   3e3d6:	60a6      	str	r6, [r4, #8]
   3e3d8:	60e5      	str	r5, [r4, #12]
	return 0;
   3e3da:	2000      	movs	r0, #0
}
   3e3dc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3e3de:	f06f 0015 	mvn.w	r0, #21
}
   3e3e2:	4770      	bx	lr
		return -EINVAL;
   3e3e4:	f06f 0015 	mvn.w	r0, #21
   3e3e8:	e7f8      	b.n	3e3dc <at_params_int_put+0x22>
		return -EINVAL;
   3e3ea:	f06f 0015 	mvn.w	r0, #21
   3e3ee:	e7f5      	b.n	3e3dc <at_params_int_put+0x22>

0003e3f0 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
	if (list == NULL || list->params == NULL || str == NULL) {
   3e3f0:	b1d8      	cbz	r0, 3e42a <at_params_string_put+0x3a>
{
   3e3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e3f4:	4615      	mov	r5, r2
   3e3f6:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3e3f8:	6842      	ldr	r2, [r0, #4]
   3e3fa:	b1ca      	cbz	r2, 3e430 <at_params_string_put+0x40>
   3e3fc:	b1dd      	cbz	r5, 3e436 <at_params_string_put+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e3fe:	f7ed ffb7 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e402:	4606      	mov	r6, r0
   3e404:	b1d0      	cbz	r0, 3e43c <at_params_string_put+0x4c>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   3e406:	1c60      	adds	r0, r4, #1
   3e408:	f001 fd37 	bl	3fe7a <k_malloc>

	if (param_value == NULL) {
   3e40c:	4607      	mov	r7, r0
   3e40e:	b1c0      	cbz	r0, 3e442 <at_params_string_put+0x52>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3e410:	4622      	mov	r2, r4
   3e412:	4629      	mov	r1, r5
   3e414:	f001 fd74 	bl	3ff00 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   3e418:	4630      	mov	r0, r6
   3e41a:	f7ed ffe5 	bl	2c3e8 <at_param_clear>
	param->size = str_len;
   3e41e:	6074      	str	r4, [r6, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3e420:	2302      	movs	r3, #2
   3e422:	7033      	strb	r3, [r6, #0]
	param->value.str_val = param_value;
   3e424:	60b7      	str	r7, [r6, #8]

	return 0;
   3e426:	2000      	movs	r0, #0
}
   3e428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3e42a:	f06f 0015 	mvn.w	r0, #21
}
   3e42e:	4770      	bx	lr
		return -EINVAL;
   3e430:	f06f 0015 	mvn.w	r0, #21
   3e434:	e7f8      	b.n	3e428 <at_params_string_put+0x38>
   3e436:	f06f 0015 	mvn.w	r0, #21
   3e43a:	e7f5      	b.n	3e428 <at_params_string_put+0x38>
		return -EINVAL;
   3e43c:	f06f 0015 	mvn.w	r0, #21
   3e440:	e7f2      	b.n	3e428 <at_params_string_put+0x38>
		return -ENOMEM;
   3e442:	f06f 000b 	mvn.w	r0, #11
   3e446:	e7ef      	b.n	3e428 <at_params_string_put+0x38>

0003e448 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
	if (list == NULL || list->params == NULL || array == NULL) {
   3e448:	b1d8      	cbz	r0, 3e482 <at_params_array_put+0x3a>
{
   3e44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e44c:	4615      	mov	r5, r2
   3e44e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3e450:	6842      	ldr	r2, [r0, #4]
   3e452:	b1ca      	cbz	r2, 3e488 <at_params_array_put+0x40>
   3e454:	b1dd      	cbz	r5, 3e48e <at_params_array_put+0x46>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e456:	f7ed ff8b 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e45a:	4606      	mov	r6, r0
   3e45c:	b1d0      	cbz	r0, 3e494 <at_params_array_put+0x4c>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   3e45e:	4620      	mov	r0, r4
   3e460:	f001 fd0b 	bl	3fe7a <k_malloc>

	if (param_value == NULL) {
   3e464:	4607      	mov	r7, r0
   3e466:	b1c0      	cbz	r0, 3e49a <at_params_array_put+0x52>
   3e468:	4622      	mov	r2, r4
   3e46a:	4629      	mov	r1, r5
   3e46c:	f001 fd48 	bl	3ff00 <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   3e470:	4630      	mov	r0, r6
   3e472:	f7ed ffb9 	bl	2c3e8 <at_param_clear>
	param->size = array_len;
   3e476:	6074      	str	r4, [r6, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3e478:	2303      	movs	r3, #3
   3e47a:	7033      	strb	r3, [r6, #0]
	param->value.array_val = param_value;
   3e47c:	60b7      	str	r7, [r6, #8]

	return 0;
   3e47e:	2000      	movs	r0, #0
}
   3e480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3e482:	f06f 0015 	mvn.w	r0, #21
}
   3e486:	4770      	bx	lr
		return -EINVAL;
   3e488:	f06f 0015 	mvn.w	r0, #21
   3e48c:	e7f8      	b.n	3e480 <at_params_array_put+0x38>
   3e48e:	f06f 0015 	mvn.w	r0, #21
   3e492:	e7f5      	b.n	3e480 <at_params_array_put+0x38>
		return -EINVAL;
   3e494:	f06f 0015 	mvn.w	r0, #21
   3e498:	e7f2      	b.n	3e480 <at_params_array_put+0x38>
		return -ENOMEM;
   3e49a:	f06f 000b 	mvn.w	r0, #11
   3e49e:	e7ef      	b.n	3e480 <at_params_array_put+0x38>

0003e4a0 <at_params_short_get>:
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   3e4a0:	b1c0      	cbz	r0, 3e4d4 <at_params_short_get+0x34>
{
   3e4a2:	b5d0      	push	{r4, r6, r7, lr}
   3e4a4:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3e4a6:	6842      	ldr	r2, [r0, #4]
   3e4a8:	b1ba      	cbz	r2, 3e4da <at_params_short_get+0x3a>
   3e4aa:	b1cc      	cbz	r4, 3e4e0 <at_params_short_get+0x40>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e4ac:	f7ed ff60 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e4b0:	b1c8      	cbz	r0, 3e4e6 <at_params_short_get+0x46>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3e4b2:	7803      	ldrb	r3, [r0, #0]
   3e4b4:	2b01      	cmp	r3, #1
   3e4b6:	d119      	bne.n	3e4ec <at_params_short_get+0x4c>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   3e4b8:	6883      	ldr	r3, [r0, #8]
   3e4ba:	68c2      	ldr	r2, [r0, #12]
   3e4bc:	f513 4600 	adds.w	r6, r3, #32768	; 0x8000
   3e4c0:	f142 0700 	adc.w	r7, r2, #0
   3e4c4:	2f00      	cmp	r7, #0
   3e4c6:	bf08      	it	eq
   3e4c8:	f5b6 3f80 	cmpeq.w	r6, #65536	; 0x10000
   3e4cc:	d211      	bcs.n	3e4f2 <at_params_short_get+0x52>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
   3e4ce:	8023      	strh	r3, [r4, #0]
	return 0;
   3e4d0:	2000      	movs	r0, #0
}
   3e4d2:	bdd0      	pop	{r4, r6, r7, pc}
		return -EINVAL;
   3e4d4:	f06f 0015 	mvn.w	r0, #21
}
   3e4d8:	4770      	bx	lr
		return -EINVAL;
   3e4da:	f06f 0015 	mvn.w	r0, #21
   3e4de:	e7f8      	b.n	3e4d2 <at_params_short_get+0x32>
   3e4e0:	f06f 0015 	mvn.w	r0, #21
   3e4e4:	e7f5      	b.n	3e4d2 <at_params_short_get+0x32>
		return -EINVAL;
   3e4e6:	f06f 0015 	mvn.w	r0, #21
   3e4ea:	e7f2      	b.n	3e4d2 <at_params_short_get+0x32>
		return -EINVAL;
   3e4ec:	f06f 0015 	mvn.w	r0, #21
   3e4f0:	e7ef      	b.n	3e4d2 <at_params_short_get+0x32>
		return -EINVAL;
   3e4f2:	f06f 0015 	mvn.w	r0, #21
   3e4f6:	e7ec      	b.n	3e4d2 <at_params_short_get+0x32>

0003e4f8 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   3e4f8:	b1a8      	cbz	r0, 3e526 <at_params_unsigned_short_get+0x2e>
{
   3e4fa:	b510      	push	{r4, lr}
   3e4fc:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3e4fe:	6842      	ldr	r2, [r0, #4]
   3e500:	b1a2      	cbz	r2, 3e52c <at_params_unsigned_short_get+0x34>
   3e502:	b1b4      	cbz	r4, 3e532 <at_params_unsigned_short_get+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e504:	f7ed ff34 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e508:	4603      	mov	r3, r0
   3e50a:	b1a8      	cbz	r0, 3e538 <at_params_unsigned_short_get+0x40>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3e50c:	7802      	ldrb	r2, [r0, #0]
   3e50e:	2a01      	cmp	r2, #1
   3e510:	d115      	bne.n	3e53e <at_params_unsigned_short_get+0x46>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   3e512:	6882      	ldr	r2, [r0, #8]
   3e514:	68d9      	ldr	r1, [r3, #12]
   3e516:	2900      	cmp	r1, #0
   3e518:	bf08      	it	eq
   3e51a:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   3e51e:	d211      	bcs.n	3e544 <at_params_unsigned_short_get+0x4c>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
   3e520:	8022      	strh	r2, [r4, #0]
	return 0;
   3e522:	2000      	movs	r0, #0
}
   3e524:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3e526:	f06f 0015 	mvn.w	r0, #21
}
   3e52a:	4770      	bx	lr
		return -EINVAL;
   3e52c:	f06f 0015 	mvn.w	r0, #21
   3e530:	e7f8      	b.n	3e524 <at_params_unsigned_short_get+0x2c>
   3e532:	f06f 0015 	mvn.w	r0, #21
   3e536:	e7f5      	b.n	3e524 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
   3e538:	f06f 0015 	mvn.w	r0, #21
   3e53c:	e7f2      	b.n	3e524 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
   3e53e:	f06f 0015 	mvn.w	r0, #21
   3e542:	e7ef      	b.n	3e524 <at_params_unsigned_short_get+0x2c>
		return -EINVAL;
   3e544:	f06f 0015 	mvn.w	r0, #21
   3e548:	e7ec      	b.n	3e524 <at_params_unsigned_short_get+0x2c>

0003e54a <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   3e54a:	b1b8      	cbz	r0, 3e57c <at_params_int_get+0x32>
{
   3e54c:	b5d0      	push	{r4, r6, r7, lr}
   3e54e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3e550:	6842      	ldr	r2, [r0, #4]
   3e552:	b1b2      	cbz	r2, 3e582 <at_params_int_get+0x38>
   3e554:	b1c4      	cbz	r4, 3e588 <at_params_int_get+0x3e>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e556:	f7ed ff0b 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e55a:	b1c0      	cbz	r0, 3e58e <at_params_int_get+0x44>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3e55c:	7803      	ldrb	r3, [r0, #0]
   3e55e:	2b01      	cmp	r3, #1
   3e560:	d118      	bne.n	3e594 <at_params_int_get+0x4a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   3e562:	6883      	ldr	r3, [r0, #8]
   3e564:	68c2      	ldr	r2, [r0, #12]
   3e566:	f113 4600 	adds.w	r6, r3, #2147483648	; 0x80000000
   3e56a:	f142 0700 	adc.w	r7, r2, #0
   3e56e:	2f01      	cmp	r7, #1
   3e570:	bf08      	it	eq
   3e572:	2e00      	cmpeq	r6, #0
   3e574:	d211      	bcs.n	3e59a <at_params_int_get+0x50>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
   3e576:	6023      	str	r3, [r4, #0]
	return 0;
   3e578:	2000      	movs	r0, #0
}
   3e57a:	bdd0      	pop	{r4, r6, r7, pc}
		return -EINVAL;
   3e57c:	f06f 0015 	mvn.w	r0, #21
}
   3e580:	4770      	bx	lr
		return -EINVAL;
   3e582:	f06f 0015 	mvn.w	r0, #21
   3e586:	e7f8      	b.n	3e57a <at_params_int_get+0x30>
   3e588:	f06f 0015 	mvn.w	r0, #21
   3e58c:	e7f5      	b.n	3e57a <at_params_int_get+0x30>
		return -EINVAL;
   3e58e:	f06f 0015 	mvn.w	r0, #21
   3e592:	e7f2      	b.n	3e57a <at_params_int_get+0x30>
		return -EINVAL;
   3e594:	f06f 0015 	mvn.w	r0, #21
   3e598:	e7ef      	b.n	3e57a <at_params_int_get+0x30>
		return -EINVAL;
   3e59a:	f06f 0015 	mvn.w	r0, #21
   3e59e:	e7ec      	b.n	3e57a <at_params_int_get+0x30>

0003e5a0 <at_params_int64_get>:
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
	if (list == NULL || list->params == NULL || value == NULL) {
   3e5a0:	b180      	cbz	r0, 3e5c4 <at_params_int64_get+0x24>
{
   3e5a2:	b510      	push	{r4, lr}
   3e5a4:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3e5a6:	6842      	ldr	r2, [r0, #4]
   3e5a8:	b17a      	cbz	r2, 3e5ca <at_params_int64_get+0x2a>
   3e5aa:	b18c      	cbz	r4, 3e5d0 <at_params_int64_get+0x30>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e5ac:	f7ed fee0 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e5b0:	b188      	cbz	r0, 3e5d6 <at_params_int64_get+0x36>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   3e5b2:	7802      	ldrb	r2, [r0, #0]
   3e5b4:	2a01      	cmp	r2, #1
   3e5b6:	d111      	bne.n	3e5dc <at_params_int64_get+0x3c>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   3e5b8:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   3e5bc:	e9c4 2300 	strd	r2, r3, [r4]
	return 0;
   3e5c0:	2000      	movs	r0, #0
}
   3e5c2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3e5c4:	f06f 0015 	mvn.w	r0, #21
}
   3e5c8:	4770      	bx	lr
		return -EINVAL;
   3e5ca:	f06f 0015 	mvn.w	r0, #21
   3e5ce:	e7f8      	b.n	3e5c2 <at_params_int64_get+0x22>
   3e5d0:	f06f 0015 	mvn.w	r0, #21
   3e5d4:	e7f5      	b.n	3e5c2 <at_params_int64_get+0x22>
		return -EINVAL;
   3e5d6:	f06f 0015 	mvn.w	r0, #21
   3e5da:	e7f2      	b.n	3e5c2 <at_params_int64_get+0x22>
		return -EINVAL;
   3e5dc:	f06f 0015 	mvn.w	r0, #21
   3e5e0:	e7ef      	b.n	3e5c2 <at_params_int64_get+0x22>

0003e5e2 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
	if (list == NULL || list->params == NULL || value == NULL ||
   3e5e2:	b1d8      	cbz	r0, 3e61c <at_params_string_get+0x3a>
{
   3e5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e5e6:	4616      	mov	r6, r2
   3e5e8:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3e5ea:	6842      	ldr	r2, [r0, #4]
   3e5ec:	b1ca      	cbz	r2, 3e622 <at_params_string_get+0x40>
   3e5ee:	b1de      	cbz	r6, 3e628 <at_params_string_get+0x46>
	    value == NULL || len == NULL) {
   3e5f0:	b1ec      	cbz	r4, 3e62e <at_params_string_get+0x4c>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   3e5f2:	f7ed febd 	bl	2c370 <at_params_get>

	if (param == NULL) {
   3e5f6:	4607      	mov	r7, r0
   3e5f8:	b1e0      	cbz	r0, 3e634 <at_params_string_get+0x52>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   3e5fa:	7803      	ldrb	r3, [r0, #0]
   3e5fc:	2b02      	cmp	r3, #2
   3e5fe:	d11c      	bne.n	3e63a <at_params_string_get+0x58>
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);
   3e600:	f7ed fed2 	bl	2c3a8 <at_param_size>
   3e604:	4605      	mov	r5, r0

	if (*len < param_len) {
   3e606:	6823      	ldr	r3, [r4, #0]
   3e608:	4283      	cmp	r3, r0
   3e60a:	d319      	bcc.n	3e640 <at_params_string_get+0x5e>
   3e60c:	4602      	mov	r2, r0
   3e60e:	68b9      	ldr	r1, [r7, #8]
   3e610:	4630      	mov	r0, r6
   3e612:	f001 fc75 	bl	3ff00 <memcpy>
		return -ENOMEM;
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;
   3e616:	6025      	str	r5, [r4, #0]

	return 0;
   3e618:	2000      	movs	r0, #0
}
   3e61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   3e61c:	f06f 0015 	mvn.w	r0, #21
}
   3e620:	4770      	bx	lr
		return -EINVAL;
   3e622:	f06f 0015 	mvn.w	r0, #21
   3e626:	e7f8      	b.n	3e61a <at_params_string_get+0x38>
   3e628:	f06f 0015 	mvn.w	r0, #21
   3e62c:	e7f5      	b.n	3e61a <at_params_string_get+0x38>
   3e62e:	f06f 0015 	mvn.w	r0, #21
   3e632:	e7f2      	b.n	3e61a <at_params_string_get+0x38>
		return -EINVAL;
   3e634:	f06f 0015 	mvn.w	r0, #21
   3e638:	e7ef      	b.n	3e61a <at_params_string_get+0x38>
		return -EINVAL;
   3e63a:	f06f 0015 	mvn.w	r0, #21
   3e63e:	e7ec      	b.n	3e61a <at_params_string_get+0x38>
		return -ENOMEM;
   3e640:	f06f 000b 	mvn.w	r0, #11
   3e644:	e7e9      	b.n	3e61a <at_params_string_get+0x38>

0003e646 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3e646:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3e648:	b178      	cbz	r0, 3e66a <at_params_valid_count_get+0x24>
   3e64a:	4605      	mov	r5, r0
   3e64c:	6843      	ldr	r3, [r0, #4]
   3e64e:	b17b      	cbz	r3, 3e670 <at_params_valid_count_get+0x2a>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3e650:	2100      	movs	r1, #0
   3e652:	f7ed fe8d 	bl	2c370 <at_params_get>
	size_t valid_i = 0;
   3e656:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3e658:	b160      	cbz	r0, 3e674 <at_params_valid_count_get+0x2e>
   3e65a:	7803      	ldrb	r3, [r0, #0]
   3e65c:	b153      	cbz	r3, 3e674 <at_params_valid_count_get+0x2e>
		valid_i += 1;
   3e65e:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3e660:	4621      	mov	r1, r4
   3e662:	4628      	mov	r0, r5
   3e664:	f7ed fe84 	bl	2c370 <at_params_get>
   3e668:	e7f6      	b.n	3e658 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3e66a:	f06f 0415 	mvn.w	r4, #21
   3e66e:	e001      	b.n	3e674 <at_params_valid_count_get+0x2e>
   3e670:	f06f 0415 	mvn.w	r4, #21
	}

	return valid_i;
}
   3e674:	4620      	mov	r0, r4
   3e676:	bd38      	pop	{r3, r4, r5, pc}

0003e678 <is_cellid_valid>:
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   3e678:	f1b0 3fff 	cmp.w	r0, #4294967295
   3e67c:	d001      	beq.n	3e682 <is_cellid_valid+0xa>
	return true;
   3e67e:	2001      	movs	r0, #1
   3e680:	4770      	bx	lr
		return false;
   3e682:	2000      	movs	r0, #0
}
   3e684:	4770      	bx	lr

0003e686 <lte_lc_init>:
{
   3e686:	b508      	push	{r3, lr}
	int err = init_and_config();
   3e688:	f7ee fc8e 	bl	2cfa8 <init_and_config>
	return err ? -EFAULT : 0;
   3e68c:	b900      	cbnz	r0, 3e690 <lte_lc_init+0xa>
}
   3e68e:	bd08      	pop	{r3, pc}
	return err ? -EFAULT : 0;
   3e690:	f06f 000d 	mvn.w	r0, #13
   3e694:	e7fb      	b.n	3e68e <lte_lc_init+0x8>

0003e696 <init_and_connect>:
{
   3e696:	b508      	push	{r3, lr}
	err = lte_lc_init();
   3e698:	f7ff fff5 	bl	3e686 <lte_lc_init>
	if (err) {
   3e69c:	b100      	cbz	r0, 3e6a0 <init_and_connect+0xa>
}
   3e69e:	bd08      	pop	{r3, pc}
	return connect_lte(true);
   3e6a0:	2001      	movs	r0, #1
   3e6a2:	f7ee fda1 	bl	2d1e8 <connect_lte>
   3e6a6:	e7fa      	b.n	3e69e <init_and_connect+0x8>

0003e6a8 <lte_lc_init_and_connect>:
{
   3e6a8:	b508      	push	{r3, lr}
	return init_and_connect(x);
   3e6aa:	2000      	movs	r0, #0
   3e6ac:	f7ff fff3 	bl	3e696 <init_and_connect>
}
   3e6b0:	bd08      	pop	{r3, pc}

0003e6b2 <get_char_frequency>:
{
   3e6b2:	4603      	mov	r3, r0
	uint32_t count = 0;
   3e6b4:	2000      	movs	r0, #0
   3e6b6:	e001      	b.n	3e6bc <get_char_frequency+0xa>
	} while (*(str++) != '\0');
   3e6b8:	3301      	adds	r3, #1
   3e6ba:	b122      	cbz	r2, 3e6c6 <get_char_frequency+0x14>
		if (*str == c) {
   3e6bc:	781a      	ldrb	r2, [r3, #0]
   3e6be:	428a      	cmp	r2, r1
   3e6c0:	d1fa      	bne.n	3e6b8 <get_char_frequency+0x6>
			count++;
   3e6c2:	3001      	adds	r0, #1
   3e6c4:	e7f8      	b.n	3e6b8 <get_char_frequency+0x6>
}
   3e6c6:	4770      	bx	lr

0003e6c8 <string_to_int>:
{
   3e6c8:	b570      	push	{r4, r5, r6, lr}
   3e6ca:	b082      	sub	sp, #8
   3e6cc:	4604      	mov	r4, r0
   3e6ce:	460d      	mov	r5, r1
   3e6d0:	4616      	mov	r6, r2
	errno = 0;
   3e6d2:	f7fe f8d1 	bl	3c878 <__errno>
   3e6d6:	2300      	movs	r3, #0
   3e6d8:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   3e6da:	462a      	mov	r2, r5
   3e6dc:	a901      	add	r1, sp, #4
   3e6de:	4620      	mov	r0, r4
   3e6e0:	f7fb ff1c 	bl	3a51c <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3e6e4:	9b01      	ldr	r3, [sp, #4]
   3e6e6:	42a3      	cmp	r3, r4
   3e6e8:	d011      	beq.n	3e70e <string_to_int+0x46>
   3e6ea:	4605      	mov	r5, r0
   3e6ec:	781b      	ldrb	r3, [r3, #0]
   3e6ee:	b973      	cbnz	r3, 3e70e <string_to_int+0x46>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3e6f0:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   3e6f4:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   3e6f6:	f113 0f03 	cmn.w	r3, #3
   3e6fa:	d803      	bhi.n	3e704 <string_to_int+0x3c>
	*output = temp;
   3e6fc:	6035      	str	r5, [r6, #0]
	return 0;
   3e6fe:	2000      	movs	r0, #0
}
   3e700:	b002      	add	sp, #8
   3e702:	bd70      	pop	{r4, r5, r6, pc}
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   3e704:	f7fe f8b8 	bl	3c878 <__errno>
   3e708:	6803      	ldr	r3, [r0, #0]
   3e70a:	2b22      	cmp	r3, #34	; 0x22
   3e70c:	d1f6      	bne.n	3e6fc <string_to_int+0x34>
		return -ENODATA;
   3e70e:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   3e712:	e7f5      	b.n	3e700 <string_to_int+0x38>

0003e714 <string_param_to_int>:
{
   3e714:	b530      	push	{r4, r5, lr}
   3e716:	b087      	sub	sp, #28
   3e718:	4615      	mov	r5, r2
   3e71a:	461c      	mov	r4, r3
	size_t len = sizeof(str_buf);
   3e71c:	2310      	movs	r3, #16
   3e71e:	9301      	str	r3, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   3e720:	ab01      	add	r3, sp, #4
   3e722:	aa02      	add	r2, sp, #8
   3e724:	f7ff ff5d 	bl	3e5e2 <at_params_string_get>
	if (err) {
   3e728:	b108      	cbz	r0, 3e72e <string_param_to_int+0x1a>
}
   3e72a:	b007      	add	sp, #28
   3e72c:	bd30      	pop	{r4, r5, pc}
	str_buf[len] = '\0';
   3e72e:	9b01      	ldr	r3, [sp, #4]
   3e730:	aa06      	add	r2, sp, #24
   3e732:	4413      	add	r3, r2
   3e734:	2200      	movs	r2, #0
   3e736:	f803 2c10 	strb.w	r2, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   3e73a:	462a      	mov	r2, r5
   3e73c:	4621      	mov	r1, r4
   3e73e:	a802      	add	r0, sp, #8
   3e740:	f7ff ffc2 	bl	3e6c8 <string_to_int>
   3e744:	2800      	cmp	r0, #0
   3e746:	d0f0      	beq.n	3e72a <string_param_to_int+0x16>
		return -ENODATA;
   3e748:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   3e74c:	e7ed      	b.n	3e72a <string_param_to_int+0x16>

0003e74e <date_time_init>:

	return 0;
}

static int date_time_init(const struct device *unused)
{
   3e74e:	b508      	push	{r3, lr}
	date_time_core_init();
   3e750:	f7ef fe88 	bl	2e464 <date_time_core_init>

	return 0;
}
   3e754:	2000      	movs	r0, #0
   3e756:	bd08      	pop	{r3, pc}

0003e758 <date_time_is_valid>:
{
   3e758:	b508      	push	{r3, lr}
	return date_time_core_is_valid();
   3e75a:	f7ef fe8b 	bl	2e474 <date_time_core_is_valid>
}
   3e75e:	bd08      	pop	{r3, pc}

0003e760 <semioctet_to_dec>:
	return ((value & 0xf0) >> 4) + ((value & 0x0f) * 10);
   3e760:	f000 030f 	and.w	r3, r0, #15
   3e764:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   3e768:	005b      	lsls	r3, r3, #1
   3e76a:	eb03 1010 	add.w	r0, r3, r0, lsr #4
}
   3e76e:	b2c0      	uxtb	r0, r0
   3e770:	4770      	bx	lr

0003e772 <request_send>:
{
   3e772:	b508      	push	{r3, lr}
	switch (dl->proto) {
   3e774:	f8d0 3828 	ldr.w	r3, [r0, #2088]	; 0x828
   3e778:	2b06      	cmp	r3, #6
   3e77a:	d004      	beq.n	3e786 <request_send+0x14>
   3e77c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3e780:	d001      	beq.n	3e786 <request_send+0x14>
   3e782:	2000      	movs	r0, #0
}
   3e784:	bd08      	pop	{r3, pc}
		return http_get_request_send(dl);
   3e786:	f7f1 f9d9 	bl	2fb3c <http_get_request_send>
   3e78a:	e7fb      	b.n	3e784 <request_send+0x12>

0003e78c <socket_send>:
{
   3e78c:	b570      	push	{r4, r5, r6, lr}
   3e78e:	b082      	sub	sp, #8
   3e790:	4606      	mov	r6, r0
   3e792:	460c      	mov	r4, r1
	size_t off = 0;
   3e794:	2500      	movs	r5, #0
	while (len) {
   3e796:	b19c      	cbz	r4, 3e7c0 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   3e798:	4631      	mov	r1, r6
   3e79a:	f851 0b04 	ldr.w	r0, [r1], #4
   3e79e:	4429      	add	r1, r5
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e7a0:	2300      	movs	r3, #0
   3e7a2:	9301      	str	r3, [sp, #4]
   3e7a4:	9300      	str	r3, [sp, #0]
   3e7a6:	4622      	mov	r2, r4
   3e7a8:	f7fd fdaa 	bl	3c300 <z_impl_zsock_sendto>
		if (sent < 0) {
   3e7ac:	2800      	cmp	r0, #0
   3e7ae:	db02      	blt.n	3e7b6 <socket_send+0x2a>
		off += sent;
   3e7b0:	4405      	add	r5, r0
		len -= sent;
   3e7b2:	1a24      	subs	r4, r4, r0
   3e7b4:	e7ef      	b.n	3e796 <socket_send+0xa>
			return -errno;
   3e7b6:	f7fe f85f 	bl	3c878 <__errno>
   3e7ba:	6800      	ldr	r0, [r0, #0]
   3e7bc:	4240      	negs	r0, r0
   3e7be:	e000      	b.n	3e7c2 <socket_send+0x36>
	return 0;
   3e7c0:	2000      	movs	r0, #0
}
   3e7c2:	b002      	add	sp, #8
   3e7c4:	bd70      	pop	{r4, r5, r6, pc}

0003e7c6 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   3e7c6:	b128      	cbz	r0, 3e7d4 <download_client_file_size_get+0xe>
   3e7c8:	b139      	cbz	r1, 3e7da <download_client_file_size_get+0x14>
		return -EINVAL;
	}

	*size = client->file_size;
   3e7ca:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
   3e7ce:	600b      	str	r3, [r1, #0]

	return 0;
   3e7d0:	2000      	movs	r0, #0
   3e7d2:	4770      	bx	lr
		return -EINVAL;
   3e7d4:	f06f 0015 	mvn.w	r0, #21
   3e7d8:	4770      	bx	lr
   3e7da:	f06f 0015 	mvn.w	r0, #21
}
   3e7de:	4770      	bx	lr

0003e7e0 <swallow>:
{
   3e7e0:	b570      	push	{r4, r5, r6, lr}
   3e7e2:	4604      	mov	r4, r0
   3e7e4:	460d      	mov	r5, r1
	p = strstr(*str, swallow);
   3e7e6:	6800      	ldr	r0, [r0, #0]
   3e7e8:	f001 fd87 	bl	402fa <strstr>
	if (!p) {
   3e7ec:	b138      	cbz	r0, 3e7fe <swallow+0x1e>
   3e7ee:	4606      	mov	r6, r0
	*str = p + strlen(swallow);
   3e7f0:	4628      	mov	r0, r5
   3e7f2:	f7e2 fea3 	bl	2153c <strlen>
   3e7f6:	4406      	add	r6, r0
   3e7f8:	6026      	str	r6, [r4, #0]
	return 0;
   3e7fa:	2000      	movs	r0, #0
}
   3e7fc:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   3e7fe:	2001      	movs	r0, #1
   3e800:	e7fc      	b.n	3e7fc <swallow+0x1c>

0003e802 <http_parse>:
 *  1 if more data is expected
 *  0 if a whole fragment has been received
 * -1 on error
 */
int http_parse(struct download_client *client, size_t len)
{
   3e802:	b570      	push	{r4, r5, r6, lr}
   3e804:	b082      	sub	sp, #8
   3e806:	4604      	mov	r4, r0
   3e808:	460d      	mov	r5, r1
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   3e80a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
   3e80e:	440b      	add	r3, r1
   3e810:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   3e814:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
   3e818:	b1bb      	cbz	r3, 3e84a <http_parse+0x48>
	 * `offset` has been moved at the end of any trailing
	 * payload bytes by http_header_parse(). In this case,
	 * `offset` is less than `len` and it represents
	 * the actual payload bytes.
	 */
	client->progress += MIN(client->offset, len);
   3e81a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   3e81e:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   3e822:	429d      	cmp	r5, r3
   3e824:	bf94      	ite	ls
   3e826:	194d      	addls	r5, r1, r5
   3e828:	18cd      	addhi	r5, r1, r3
   3e82a:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c

	/* Have we received a whole fragment or the whole file? */
	if (client->progress != client->file_size &&
   3e82e:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
   3e832:	4295      	cmp	r5, r2
   3e834:	d028      	beq.n	3e888 <http_parse+0x86>
	    client->offset < (client->config.frag_size_override != 0 ?
   3e836:	f8d4 2820 	ldr.w	r2, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   3e83a:	b90a      	cbnz	r2, 3e840 <http_parse+0x3e>
   3e83c:	f44f 6200 	mov.w	r2, #2048	; 0x800
	if (client->progress != client->file_size &&
   3e840:	429a      	cmp	r2, r3
   3e842:	d823      	bhi.n	3e88c <http_parse+0x8a>
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
   3e844:	2000      	movs	r0, #0
}
   3e846:	b002      	add	sp, #8
   3e848:	bd70      	pop	{r4, r5, r6, pc}
		rc = http_header_parse(client, &hdr_len);
   3e84a:	a901      	add	r1, sp, #4
   3e84c:	f7f1 f87a 	bl	2f944 <http_header_parse>
		if (rc > 0) {
   3e850:	2800      	cmp	r0, #0
   3e852:	dc14      	bgt.n	3e87e <http_parse+0x7c>
		if (rc < 0) {
   3e854:	db15      	blt.n	3e882 <http_parse+0x80>
		if (client->offset != hdr_len) {
   3e856:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
   3e85a:	9e01      	ldr	r6, [sp, #4]
   3e85c:	42b2      	cmp	r2, r6
   3e85e:	d00a      	beq.n	3e876 <http_parse+0x74>
			memcpy(client->buf, client->buf + hdr_len,
   3e860:	1d20      	adds	r0, r4, #4
   3e862:	1b92      	subs	r2, r2, r6
   3e864:	1981      	adds	r1, r0, r6
   3e866:	f001 fb4b 	bl	3ff00 <memcpy>
			client->offset -= hdr_len;
   3e86a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   3e86e:	1b9e      	subs	r6, r3, r6
   3e870:	f8c4 6804 	str.w	r6, [r4, #2052]	; 0x804
   3e874:	e7d1      	b.n	3e81a <http_parse+0x18>
			client->offset = 0;
   3e876:	2300      	movs	r3, #0
   3e878:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
   3e87c:	e7cd      	b.n	3e81a <http_parse+0x18>
			return 1;
   3e87e:	2001      	movs	r0, #1
   3e880:	e7e1      	b.n	3e846 <http_parse+0x44>
			return -1;
   3e882:	f04f 30ff 	mov.w	r0, #4294967295
   3e886:	e7de      	b.n	3e846 <http_parse+0x44>
	return 0;
   3e888:	2000      	movs	r0, #0
   3e88a:	e7dc      	b.n	3e846 <http_parse+0x44>
		return 1;
   3e88c:	2001      	movs	r0, #1
   3e88e:	e7da      	b.n	3e846 <http_parse+0x44>

0003e890 <is_ip_address>:
{
   3e890:	b510      	push	{r4, lr}
   3e892:	b086      	sub	sp, #24
   3e894:	4604      	mov	r4, r0
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, K_SYSCALL_ZSOCK_INET_PTON);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_inet_pton(family, src, dst);
   3e896:	f10d 0202 	add.w	r2, sp, #2
   3e89a:	4601      	mov	r1, r0
   3e89c:	2001      	movs	r0, #1
   3e89e:	f7fd fdb4 	bl	3c40a <z_impl_zsock_inet_pton>
	if (zsock_inet_pton(AF_INET, host, sa.data) == 1) {
   3e8a2:	2801      	cmp	r0, #1
   3e8a4:	d00a      	beq.n	3e8bc <is_ip_address+0x2c>
   3e8a6:	f10d 0202 	add.w	r2, sp, #2
   3e8aa:	4621      	mov	r1, r4
   3e8ac:	2002      	movs	r0, #2
   3e8ae:	f7fd fdac 	bl	3c40a <z_impl_zsock_inet_pton>
	} else if (zsock_inet_pton(AF_INET6, host, sa.data) == 1) {
   3e8b2:	2801      	cmp	r0, #1
   3e8b4:	d004      	beq.n	3e8c0 <is_ip_address+0x30>
	return false;
   3e8b6:	2000      	movs	r0, #0
}
   3e8b8:	b006      	add	sp, #24
   3e8ba:	bd10      	pop	{r4, pc}
		return true;
   3e8bc:	2001      	movs	r0, #1
   3e8be:	e7fb      	b.n	3e8b8 <is_ip_address+0x28>
		return true;
   3e8c0:	2001      	movs	r0, #1
   3e8c2:	e7f9      	b.n	3e8b8 <is_ip_address+0x28>

0003e8c4 <dfu_target_callback_handler>:
{
   3e8c4:	b508      	push	{r3, lr}
	switch (evt) {
   3e8c6:	b128      	cbz	r0, 3e8d4 <dfu_target_callback_handler+0x10>
   3e8c8:	2801      	cmp	r0, #1
   3e8ca:	d007      	beq.n	3e8dc <dfu_target_callback_handler+0x18>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   3e8cc:	2001      	movs	r0, #1
   3e8ce:	f7f1 f9f7 	bl	2fcc0 <send_error_evt>
}
   3e8d2:	e002      	b.n	3e8da <dfu_target_callback_handler+0x16>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   3e8d4:	2002      	movs	r0, #2
   3e8d6:	f7f1 f9c5 	bl	2fc64 <send_evt>
}
   3e8da:	bd08      	pop	{r3, pc}
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   3e8dc:	2003      	movs	r0, #3
   3e8de:	f7f1 f9c1 	bl	2fc64 <send_evt>
		break;
   3e8e2:	e7fa      	b.n	3e8da <dfu_target_callback_handler+0x16>

0003e8e4 <fota_download_start>:
{
   3e8e4:	b510      	push	{r4, lr}
   3e8e6:	b082      	sub	sp, #8
	return fota_download_start_with_image_type(host, file, sec_tag, pdn_id,
   3e8e8:	2400      	movs	r4, #0
   3e8ea:	9401      	str	r4, [sp, #4]
   3e8ec:	9c04      	ldr	r4, [sp, #16]
   3e8ee:	9400      	str	r4, [sp, #0]
   3e8f0:	f7f1 fc1e 	bl	30130 <fota_download_start_with_image_type>
}
   3e8f4:	b002      	add	sp, #8
   3e8f6:	bd10      	pop	{r4, pc}

0003e8f8 <ext_api_satisfies_req>:
{
   3e8f8:	b430      	push	{r4, r5}
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   3e8fa:	690b      	ldr	r3, [r1, #16]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   3e8fc:	694d      	ldr	r5, [r1, #20]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   3e8fe:	698c      	ldr	r4, [r1, #24]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   3e900:	69c9      	ldr	r1, [r1, #28]
	return ((ext_api->ext_api_id == req_id)
   3e902:	6902      	ldr	r2, [r0, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   3e904:	429a      	cmp	r2, r3
   3e906:	d002      	beq.n	3e90e <ext_api_satisfies_req+0x16>
   3e908:	2000      	movs	r0, #0
}
   3e90a:	bc30      	pop	{r4, r5}
   3e90c:	4770      	bx	lr
		&&  (ext_api->ext_api_version >= req_min_version)
   3e90e:	6983      	ldr	r3, [r0, #24]
   3e910:	42a3      	cmp	r3, r4
   3e912:	d307      	bcc.n	3e924 <ext_api_satisfies_req+0x2c>
		&&  (ext_api->ext_api_version <  req_max_version)
   3e914:	428b      	cmp	r3, r1
   3e916:	d207      	bcs.n	3e928 <ext_api_satisfies_req+0x30>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   3e918:	6943      	ldr	r3, [r0, #20]
   3e91a:	ea35 0303 	bics.w	r3, r5, r3
   3e91e:	d005      	beq.n	3e92c <ext_api_satisfies_req+0x34>
   3e920:	2000      	movs	r0, #0
   3e922:	e7f2      	b.n	3e90a <ext_api_satisfies_req+0x12>
   3e924:	2000      	movs	r0, #0
   3e926:	e7f0      	b.n	3e90a <ext_api_satisfies_req+0x12>
   3e928:	2000      	movs	r0, #0
   3e92a:	e7ee      	b.n	3e90a <ext_api_satisfies_req+0x12>
   3e92c:	2001      	movs	r0, #1
   3e92e:	e7ec      	b.n	3e90a <ext_api_satisfies_req+0x12>

0003e930 <skip_ext_apis>:
{
   3e930:	4601      	mov	r1, r0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   3e932:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   3e934:	2300      	movs	r3, #0
   3e936:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   3e938:	429a      	cmp	r2, r3
   3e93a:	d903      	bls.n	3e944 <skip_ext_apis+0x14>
		ADVANCE_EXT_API(ext_api);
   3e93c:	68c2      	ldr	r2, [r0, #12]
   3e93e:	4410      	add	r0, r2
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   3e940:	3301      	adds	r3, #1
   3e942:	e7f8      	b.n	3e936 <skip_ext_apis+0x6>
}
   3e944:	4770      	bx	lr

0003e946 <boot_flag_decode>:
    if (flag != BOOT_FLAG_SET) {
   3e946:	2801      	cmp	r0, #1
   3e948:	d100      	bne.n	3e94c <boot_flag_decode+0x6>
}
   3e94a:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   3e94c:	2002      	movs	r0, #2
   3e94e:	e7fc      	b.n	3e94a <boot_flag_decode+0x4>

0003e950 <boot_swap_info_off>:
   3e950:	6880      	ldr	r0, [r0, #8]
}
   3e952:	3828      	subs	r0, #40	; 0x28
   3e954:	4770      	bx	lr

0003e956 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   3e956:	b189      	cbz	r1, 3e97c <bootutil_buffer_is_erased+0x26>
{
   3e958:	b538      	push	{r3, r4, r5, lr}
   3e95a:	4614      	mov	r4, r2
   3e95c:	460d      	mov	r5, r1
    if (buffer == NULL || len == 0) {
   3e95e:	b90a      	cbnz	r2, 3e964 <bootutil_buffer_is_erased+0xe>
        return false;
   3e960:	2000      	movs	r0, #0
}
   3e962:	bd38      	pop	{r3, r4, r5, pc}
    erased_val = flash_area_erased_val(area);
   3e964:	f7fd fe13 	bl	3c58e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3e968:	2300      	movs	r3, #0
   3e96a:	42a3      	cmp	r3, r4
   3e96c:	d204      	bcs.n	3e978 <bootutil_buffer_is_erased+0x22>
        if (u8b[i] != erased_val) {
   3e96e:	5cea      	ldrb	r2, [r5, r3]
   3e970:	4282      	cmp	r2, r0
   3e972:	d105      	bne.n	3e980 <bootutil_buffer_is_erased+0x2a>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   3e974:	3301      	adds	r3, #1
   3e976:	e7f8      	b.n	3e96a <bootutil_buffer_is_erased+0x14>
    return true;
   3e978:	2001      	movs	r0, #1
   3e97a:	e7f2      	b.n	3e962 <bootutil_buffer_is_erased+0xc>
        return false;
   3e97c:	2000      	movs	r0, #0
}
   3e97e:	4770      	bx	lr
            return false;
   3e980:	2000      	movs	r0, #0
   3e982:	e7ee      	b.n	3e962 <bootutil_buffer_is_erased+0xc>

0003e984 <boot_read_flag>:
{
   3e984:	b538      	push	{r3, r4, r5, lr}
   3e986:	4605      	mov	r5, r0
   3e988:	460c      	mov	r4, r1
   3e98a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   3e98c:	2301      	movs	r3, #1
   3e98e:	4622      	mov	r2, r4
   3e990:	f7fd fd73 	bl	3c47a <flash_area_read>
    if (rc < 0) {
   3e994:	2800      	cmp	r0, #0
   3e996:	db0f      	blt.n	3e9b8 <boot_read_flag+0x34>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   3e998:	2201      	movs	r2, #1
   3e99a:	4621      	mov	r1, r4
   3e99c:	4628      	mov	r0, r5
   3e99e:	f7ff ffda 	bl	3e956 <bootutil_buffer_is_erased>
   3e9a2:	b118      	cbz	r0, 3e9ac <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   3e9a4:	2303      	movs	r3, #3
   3e9a6:	7023      	strb	r3, [r4, #0]
    return 0;
   3e9a8:	2000      	movs	r0, #0
   3e9aa:	e006      	b.n	3e9ba <boot_read_flag+0x36>
        *flag = boot_flag_decode(*flag);
   3e9ac:	7820      	ldrb	r0, [r4, #0]
   3e9ae:	f7ff ffca 	bl	3e946 <boot_flag_decode>
   3e9b2:	7020      	strb	r0, [r4, #0]
    return 0;
   3e9b4:	2000      	movs	r0, #0
   3e9b6:	e000      	b.n	3e9ba <boot_read_flag+0x36>
        return BOOT_EFLASH;
   3e9b8:	2001      	movs	r0, #1
}
   3e9ba:	bd38      	pop	{r3, r4, r5, pc}

0003e9bc <boot_write_trailer>:
{
   3e9bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e9c0:	b083      	sub	sp, #12
   3e9c2:	4606      	mov	r6, r0
   3e9c4:	460f      	mov	r7, r1
   3e9c6:	4690      	mov	r8, r2
   3e9c8:	461d      	mov	r5, r3
    align = flash_area_align(fap);
   3e9ca:	f7fd fdd7 	bl	3c57c <flash_area_align>
   3e9ce:	b2c0      	uxtb	r0, r0
    align = (inlen + align - 1) & ~(align - 1);
   3e9d0:	1944      	adds	r4, r0, r5
   3e9d2:	b264      	sxtb	r4, r4
   3e9d4:	3c01      	subs	r4, #1
   3e9d6:	b264      	sxtb	r4, r4
   3e9d8:	4240      	negs	r0, r0
   3e9da:	4004      	ands	r4, r0
   3e9dc:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
   3e9de:	2c08      	cmp	r4, #8
   3e9e0:	d904      	bls.n	3e9ec <boot_write_trailer+0x30>
        return -1;
   3e9e2:	f04f 30ff 	mov.w	r0, #4294967295
}
   3e9e6:	b003      	add	sp, #12
   3e9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    erased_val = flash_area_erased_val(fap);
   3e9ec:	4630      	mov	r0, r6
   3e9ee:	f7fd fdce 	bl	3c58e <flash_area_erased_val>
   3e9f2:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
   3e9f4:	2308      	movs	r3, #8
   3e9f6:	462a      	mov	r2, r5
   3e9f8:	4641      	mov	r1, r8
   3e9fa:	4668      	mov	r0, sp
   3e9fc:	f001 fa8d 	bl	3ff1a <__memcpy_chk>
__ssp_bos_icheck3(memset, void *, int)
   3ea00:	1b62      	subs	r2, r4, r5
   3ea02:	4649      	mov	r1, r9
   3ea04:	eb0d 0005 	add.w	r0, sp, r5
   3ea08:	f001 fa9a 	bl	3ff40 <memset>
    rc = flash_area_write(fap, off, buf, align);
   3ea0c:	4623      	mov	r3, r4
   3ea0e:	466a      	mov	r2, sp
   3ea10:	4639      	mov	r1, r7
   3ea12:	4630      	mov	r0, r6
   3ea14:	f7fd fd53 	bl	3c4be <flash_area_write>
    if (rc != 0) {
   3ea18:	2800      	cmp	r0, #0
   3ea1a:	d0e4      	beq.n	3e9e6 <boot_write_trailer+0x2a>
        return BOOT_EFLASH;
   3ea1c:	2001      	movs	r0, #1
   3ea1e:	e7e2      	b.n	3e9e6 <boot_write_trailer+0x2a>

0003ea20 <boot_write_trailer_flag>:
{
   3ea20:	b500      	push	{lr}
   3ea22:	b083      	sub	sp, #12
    const uint8_t buf[1] = { flag_val };
   3ea24:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   3ea28:	2301      	movs	r3, #1
   3ea2a:	aa01      	add	r2, sp, #4
   3ea2c:	f7ff ffc6 	bl	3e9bc <boot_write_trailer>
}
   3ea30:	b003      	add	sp, #12
   3ea32:	f85d fb04 	ldr.w	pc, [sp], #4

0003ea36 <boot_write_image_ok>:
{
   3ea36:	b508      	push	{r3, lr}
   3ea38:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   3ea3a:	2201      	movs	r2, #1
   3ea3c:	3918      	subs	r1, #24
   3ea3e:	f7ff ffef 	bl	3ea20 <boot_write_trailer_flag>
}
   3ea42:	bd08      	pop	{r3, pc}

0003ea44 <boot_read_image_ok>:
{
   3ea44:	b508      	push	{r3, lr}
   3ea46:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   3ea48:	3a18      	subs	r2, #24
   3ea4a:	f7ff ff9b 	bl	3e984 <boot_read_flag>
}
   3ea4e:	bd08      	pop	{r3, pc}

0003ea50 <boot_read_swap_state>:
{
   3ea50:	b530      	push	{r4, r5, lr}
   3ea52:	b087      	sub	sp, #28
   3ea54:	4604      	mov	r4, r0
   3ea56:	460d      	mov	r5, r1
   3ea58:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   3ea5a:	2310      	movs	r3, #16
   3ea5c:	aa02      	add	r2, sp, #8
   3ea5e:	3910      	subs	r1, #16
   3ea60:	f7fd fd0b 	bl	3c47a <flash_area_read>
    if (rc < 0) {
   3ea64:	2800      	cmp	r0, #0
   3ea66:	db3b      	blt.n	3eae0 <boot_read_swap_state+0x90>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   3ea68:	2210      	movs	r2, #16
   3ea6a:	a902      	add	r1, sp, #8
   3ea6c:	4620      	mov	r0, r4
   3ea6e:	f7ff ff72 	bl	3e956 <bootutil_buffer_is_erased>
   3ea72:	b358      	cbz	r0, 3eacc <boot_read_swap_state+0x7c>
        state->magic = BOOT_MAGIC_UNSET;
   3ea74:	2303      	movs	r3, #3
   3ea76:	702b      	strb	r3, [r5, #0]
    off = boot_swap_info_off(fap);
   3ea78:	4620      	mov	r0, r4
   3ea7a:	f7ff ff69 	bl	3e950 <boot_swap_info_off>
   3ea7e:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   3ea80:	2301      	movs	r3, #1
   3ea82:	f10d 0207 	add.w	r2, sp, #7
   3ea86:	4620      	mov	r0, r4
   3ea88:	f7fd fcf7 	bl	3c47a <flash_area_read>
    if (rc < 0) {
   3ea8c:	2800      	cmp	r0, #0
   3ea8e:	db2a      	blt.n	3eae6 <boot_read_swap_state+0x96>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   3ea90:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3ea94:	f003 020f 	and.w	r2, r3, #15
   3ea98:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   3ea9a:	091b      	lsrs	r3, r3, #4
   3ea9c:	712b      	strb	r3, [r5, #4]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   3ea9e:	2201      	movs	r2, #1
   3eaa0:	f10d 0107 	add.w	r1, sp, #7
   3eaa4:	4620      	mov	r0, r4
   3eaa6:	f7ff ff56 	bl	3e956 <bootutil_buffer_is_erased>
   3eaaa:	b910      	cbnz	r0, 3eab2 <boot_read_swap_state+0x62>
            state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   3eaac:	786b      	ldrb	r3, [r5, #1]
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   3eaae:	2b04      	cmp	r3, #4
   3eab0:	d903      	bls.n	3eaba <boot_read_swap_state+0x6a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   3eab2:	2301      	movs	r3, #1
   3eab4:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   3eab6:	2300      	movs	r3, #0
   3eab8:	712b      	strb	r3, [r5, #4]
   3eaba:	68a2      	ldr	r2, [r4, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   3eabc:	3a20      	subs	r2, #32
   3eabe:	1ca9      	adds	r1, r5, #2
   3eac0:	4620      	mov	r0, r4
   3eac2:	f7ff ff5f 	bl	3e984 <boot_read_flag>
    if (rc) {
   3eac6:	b130      	cbz	r0, 3ead6 <boot_read_swap_state+0x86>
        return BOOT_EFLASH;
   3eac8:	2001      	movs	r0, #1
   3eaca:	e00a      	b.n	3eae2 <boot_read_swap_state+0x92>
        state->magic = boot_magic_decode(magic);
   3eacc:	a802      	add	r0, sp, #8
   3eace:	f7f2 f905 	bl	30cdc <boot_magic_decode>
   3ead2:	7028      	strb	r0, [r5, #0]
   3ead4:	e7d0      	b.n	3ea78 <boot_read_swap_state+0x28>
    return boot_read_image_ok(fap, &state->image_ok);
   3ead6:	1ce9      	adds	r1, r5, #3
   3ead8:	4620      	mov	r0, r4
   3eada:	f7ff ffb3 	bl	3ea44 <boot_read_image_ok>
   3eade:	e000      	b.n	3eae2 <boot_read_swap_state+0x92>
        return BOOT_EFLASH;
   3eae0:	2001      	movs	r0, #1
}
   3eae2:	b007      	add	sp, #28
   3eae4:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   3eae6:	2001      	movs	r0, #1
   3eae8:	e7fb      	b.n	3eae2 <boot_read_swap_state+0x92>

0003eaea <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   3eaea:	b508      	push	{r3, lr}
   3eaec:	4601      	mov	r1, r0
    return boot_set_pending_multi(0, permanent);
   3eaee:	2000      	movs	r0, #0
   3eaf0:	f7f2 f93a 	bl	30d68 <boot_set_pending_multi>
}
   3eaf4:	bd08      	pop	{r3, pc}

0003eaf6 <boot_set_confirmed_multi>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed_multi(int image_index)
{
   3eaf6:	b510      	push	{r4, lr}
   3eaf8:	b084      	sub	sp, #16
    const struct flash_area *fap = NULL;
   3eafa:	2300      	movs	r3, #0
   3eafc:	9303      	str	r3, [sp, #12]
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap);
   3eafe:	a903      	add	r1, sp, #12
   3eb00:	2003      	movs	r0, #3
   3eb02:	f7e8 f9e7 	bl	26ed4 <flash_area_open>
    if (rc != 0) {
   3eb06:	b118      	cbz	r0, 3eb10 <boot_set_confirmed_multi+0x1a>
        return BOOT_EFLASH;
   3eb08:	2401      	movs	r4, #1
    rc = boot_write_image_ok(fap);

done:
    flash_area_close(fap);
    return rc;
}
   3eb0a:	4620      	mov	r0, r4
   3eb0c:	b004      	add	sp, #16
   3eb0e:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, &state_primary_slot);
   3eb10:	a901      	add	r1, sp, #4
   3eb12:	9803      	ldr	r0, [sp, #12]
   3eb14:	f7ff ff9c 	bl	3ea50 <boot_read_swap_state>
    if (rc != 0) {
   3eb18:	4604      	mov	r4, r0
   3eb1a:	b978      	cbnz	r0, 3eb3c <boot_set_confirmed_multi+0x46>
    switch (state_primary_slot.magic) {
   3eb1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3eb20:	2b02      	cmp	r3, #2
   3eb22:	d00a      	beq.n	3eb3a <boot_set_confirmed_multi+0x44>
   3eb24:	2b03      	cmp	r3, #3
   3eb26:	d009      	beq.n	3eb3c <boot_set_confirmed_multi+0x46>
    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   3eb28:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3eb2c:	2b03      	cmp	r3, #3
   3eb2e:	d105      	bne.n	3eb3c <boot_set_confirmed_multi+0x46>
    rc = boot_write_image_ok(fap);
   3eb30:	9803      	ldr	r0, [sp, #12]
   3eb32:	f7ff ff80 	bl	3ea36 <boot_write_image_ok>
   3eb36:	4604      	mov	r4, r0
   3eb38:	e000      	b.n	3eb3c <boot_set_confirmed_multi+0x46>
        rc = BOOT_EBADVECT;
   3eb3a:	2404      	movs	r4, #4
    flash_area_close(fap);
   3eb3c:	9803      	ldr	r0, [sp, #12]
   3eb3e:	f7fd fc9b 	bl	3c478 <flash_area_close>
    return rc;
   3eb42:	e7e2      	b.n	3eb0a <boot_set_confirmed_multi+0x14>

0003eb44 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   3eb44:	b508      	push	{r3, lr}
    return boot_set_confirmed_multi(0);
   3eb46:	2000      	movs	r0, #0
   3eb48:	f7ff ffd5 	bl	3eaf6 <boot_set_confirmed_multi>
}
   3eb4c:	bd08      	pop	{r3, pc}

0003eb4e <SystemInit>:

void SystemInit(void)
{
   3eb4e:	b508      	push	{r3, lr}
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   3eb50:	f7f2 f950 	bl	30df4 <SystemCoreClockUpdate>
}
   3eb54:	bd08      	pop	{r3, pc}

0003eb56 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   3eb56:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   3eb58:	4780      	blx	r0
}
   3eb5a:	bd08      	pop	{r3, pc}

0003eb5c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   3eb5c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3eb5e:	f001 f8db 	bl	3fd18 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   3eb62:	bd08      	pop	{r3, pc}

0003eb64 <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
   3eb64:	40c8      	lsrs	r0, r1
   3eb66:	f010 0f01 	tst.w	r0, #1
}
   3eb6a:	bf0c      	ite	eq
   3eb6c:	2001      	moveq	r0, #1
   3eb6e:	2000      	movne	r0, #0
   3eb70:	4770      	bx	lr

0003eb72 <pin_is_task_output>:
{
   3eb72:	b510      	push	{r4, lr}
   3eb74:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3eb76:	f7f2 fb55 	bl	31224 <pin_is_output>
   3eb7a:	b128      	cbz	r0, 3eb88 <pin_is_task_output+0x16>
   3eb7c:	4620      	mov	r0, r4
   3eb7e:	f7f2 fb3b 	bl	311f8 <pin_in_use_by_te>
   3eb82:	b118      	cbz	r0, 3eb8c <pin_is_task_output+0x1a>
   3eb84:	2001      	movs	r0, #1
   3eb86:	e000      	b.n	3eb8a <pin_is_task_output+0x18>
   3eb88:	2000      	movs	r0, #0
}
   3eb8a:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3eb8c:	2000      	movs	r0, #0
   3eb8e:	e7fc      	b.n	3eb8a <pin_is_task_output+0x18>

0003eb90 <pin_is_input>:
{
   3eb90:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   3eb92:	f7f2 fb47 	bl	31224 <pin_is_output>
   3eb96:	f080 0001 	eor.w	r0, r0, #1
}
   3eb9a:	b2c0      	uxtb	r0, r0
   3eb9c:	bd08      	pop	{r3, pc}

0003eb9e <gpiote_polarity_to_trigger>:
}
   3eb9e:	4770      	bx	lr

0003eba0 <gpiote_trigger_to_polarity>:
}
   3eba0:	4770      	bx	lr

0003eba2 <is_level>:
}
   3eba2:	2803      	cmp	r0, #3
   3eba4:	bf94      	ite	ls
   3eba6:	2000      	movls	r0, #0
   3eba8:	2001      	movhi	r0, #1
   3ebaa:	4770      	bx	lr

0003ebac <flash_page_size_get>:
}
   3ebac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3ebb0:	4770      	bx	lr

0003ebb2 <flash_page_count_get>:
}
   3ebb2:	f44f 7080 	mov.w	r0, #256	; 0x100
   3ebb6:	4770      	bx	lr

0003ebb8 <flash_total_size_get>:
{
   3ebb8:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   3ebba:	f7ff fff7 	bl	3ebac <flash_page_size_get>
   3ebbe:	4604      	mov	r4, r0
   3ebc0:	f7ff fff7 	bl	3ebb2 <flash_page_count_get>
}
   3ebc4:	fb00 f004 	mul.w	r0, r0, r4
   3ebc8:	bd10      	pop	{r4, pc}

0003ebca <is_page_aligned_check>:
{
   3ebca:	b510      	push	{r4, lr}
   3ebcc:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   3ebce:	f7ff ffed 	bl	3ebac <flash_page_size_get>
   3ebd2:	fbb4 f3f0 	udiv	r3, r4, r0
   3ebd6:	fb00 4013 	mls	r0, r0, r3, r4
}
   3ebda:	fab0 f080 	clz	r0, r0
   3ebde:	0940      	lsrs	r0, r0, #5
   3ebe0:	bd10      	pop	{r4, pc}

0003ebe2 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   3ebe2:	b508      	push	{r3, lr}
    return flash_total_size_get();
   3ebe4:	f7ff ffe8 	bl	3ebb8 <flash_total_size_get>
}
   3ebe8:	bd08      	pop	{r3, pc}

0003ebea <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   3ebea:	b508      	push	{r3, lr}
    return flash_page_size_get();
   3ebec:	f7ff ffde 	bl	3ebac <flash_page_size_get>
}
   3ebf0:	bd08      	pop	{r3, pc}

0003ebf2 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   3ebf2:	b508      	push	{r3, lr}
    return flash_page_count_get();
   3ebf4:	f7ff ffdd 	bl	3ebb2 <flash_page_count_get>
}
   3ebf8:	bd08      	pop	{r3, pc}

0003ebfa <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   3ebfa:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   3ebfc:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   3ebfe:	4293      	cmp	r3, r2
   3ec00:	d804      	bhi.n	3ec0c <_GetAvailWriteSpace+0x12>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   3ec02:	6880      	ldr	r0, [r0, #8]
   3ec04:	1a80      	subs	r0, r0, r2
   3ec06:	4403      	add	r3, r0
   3ec08:	1e58      	subs	r0, r3, #1
   3ec0a:	4770      	bx	lr
    r = RdOff - WrOff - 1u;
   3ec0c:	1a9b      	subs	r3, r3, r2
   3ec0e:	1e58      	subs	r0, r3, #1
}
   3ec10:	4770      	bx	lr

0003ec12 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   3ec12:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ec16:	4604      	mov	r4, r0
   3ec18:	4688      	mov	r8, r1
   3ec1a:	4616      	mov	r6, r2
  WrOff = pRing->WrOff;
   3ec1c:	68c5      	ldr	r5, [r0, #12]
  Rem = pRing->SizeOfBuffer - WrOff;
   3ec1e:	6887      	ldr	r7, [r0, #8]
   3ec20:	eba7 0905 	sub.w	r9, r7, r5
  if (Rem > NumBytes) {
   3ec24:	4591      	cmp	r9, r2
   3ec26:	d907      	bls.n	3ec38 <_WriteNoCheck+0x26>
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3ec28:	6840      	ldr	r0, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3ec2a:	4428      	add	r0, r5
   3ec2c:	f001 f968 	bl	3ff00 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   3ec30:	4435      	add	r5, r6
   3ec32:	60e5      	str	r5, [r4, #12]
}
   3ec34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3ec38:	6840      	ldr	r0, [r0, #4]
   3ec3a:	464a      	mov	r2, r9
   3ec3c:	4428      	add	r0, r5
   3ec3e:	f001 f95f 	bl	3ff00 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
   3ec42:	1bed      	subs	r5, r5, r7
   3ec44:	4435      	add	r5, r6
   3ec46:	462a      	mov	r2, r5
   3ec48:	eb08 0109 	add.w	r1, r8, r9
   3ec4c:	6860      	ldr	r0, [r4, #4]
   3ec4e:	f001 f957 	bl	3ff00 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   3ec52:	60e5      	str	r5, [r4, #12]
}
   3ec54:	e7ee      	b.n	3ec34 <_WriteNoCheck+0x22>

0003ec56 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   3ec56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ec5a:	4606      	mov	r6, r0
   3ec5c:	4688      	mov	r8, r1
   3ec5e:	4617      	mov	r7, r2
  WrOff = pRing->WrOff;
   3ec60:	68c5      	ldr	r5, [r0, #12]
  NumBytesWritten = 0u;
   3ec62:	f04f 0900 	mov.w	r9, #0
   3ec66:	e018      	b.n	3ec9a <_WriteBlocking+0x44>
      NumBytesToWrite = RdOff - WrOff - 1u;
   3ec68:	1b64      	subs	r4, r4, r5
   3ec6a:	1e62      	subs	r2, r4, #1
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   3ec6c:	68b3      	ldr	r3, [r6, #8]
   3ec6e:	1b5c      	subs	r4, r3, r5
   3ec70:	4294      	cmp	r4, r2
   3ec72:	bf28      	it	cs
   3ec74:	4614      	movcs	r4, r2
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   3ec76:	42bc      	cmp	r4, r7
   3ec78:	bf28      	it	cs
   3ec7a:	463c      	movcs	r4, r7
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3ec7c:	6870      	ldr	r0, [r6, #4]
   3ec7e:	4622      	mov	r2, r4
   3ec80:	4641      	mov	r1, r8
   3ec82:	4428      	add	r0, r5
   3ec84:	f001 f93c 	bl	3ff00 <memcpy>
    NumBytesWritten += NumBytesToWrite;
   3ec88:	44a1      	add	r9, r4
    pBuffer         += NumBytesToWrite;
   3ec8a:	44a0      	add	r8, r4
    NumBytes        -= NumBytesToWrite;
   3ec8c:	1b3f      	subs	r7, r7, r4
    WrOff           += NumBytesToWrite;
   3ec8e:	4425      	add	r5, r4
    if (WrOff == pRing->SizeOfBuffer) {
   3ec90:	68b3      	ldr	r3, [r6, #8]
   3ec92:	42ab      	cmp	r3, r5
   3ec94:	d009      	beq.n	3ecaa <_WriteBlocking+0x54>
    pRing->WrOff = WrOff;
   3ec96:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   3ec98:	b14f      	cbz	r7, 3ecae <_WriteBlocking+0x58>
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   3ec9a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   3ec9c:	42a5      	cmp	r5, r4
   3ec9e:	d3e3      	bcc.n	3ec68 <_WriteBlocking+0x12>
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   3eca0:	68b2      	ldr	r2, [r6, #8]
   3eca2:	1b64      	subs	r4, r4, r5
   3eca4:	4414      	add	r4, r2
   3eca6:	1e62      	subs	r2, r4, #1
   3eca8:	e7e0      	b.n	3ec6c <_WriteBlocking+0x16>
      WrOff = 0u;
   3ecaa:	2500      	movs	r5, #0
   3ecac:	e7f3      	b.n	3ec96 <_WriteBlocking+0x40>
}
   3ecae:	4648      	mov	r0, r9
   3ecb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003ecb4 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   3ecb4:	b508      	push	{r3, lr}
  _DoInit();
   3ecb6:	f7f3 fc7b 	bl	325b0 <_DoInit>
}
   3ecba:	bd08      	pop	{r3, pc}

0003ecbc <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   3ecbc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   3ecbe:	f7ff fff9 	bl	3ecb4 <SEGGER_RTT_Init>

	return 0;
}
   3ecc2:	2000      	movs	r0, #0
   3ecc4:	bd08      	pop	{r3, pc}

0003ecc6 <rpc_handle_ctrl_message>:
   3ecc6:	2902      	cmp	r1, #2
   3ecc8:	b510      	push	{r4, lr}
   3ecca:	4604      	mov	r4, r0
   3eccc:	d005      	beq.n	3ecda <rpc_handle_ctrl_message+0x14>
   3ecce:	2904      	cmp	r1, #4
   3ecd0:	d001      	beq.n	3ecd6 <rpc_handle_ctrl_message+0x10>
   3ecd2:	2901      	cmp	r1, #1
   3ecd4:	d107      	bne.n	3ece6 <rpc_handle_ctrl_message+0x20>
   3ecd6:	2000      	movs	r0, #0
   3ecd8:	bd10      	pop	{r4, pc}
   3ecda:	6880      	ldr	r0, [r0, #8]
   3ecdc:	2800      	cmp	r0, #0
   3ecde:	d0fa      	beq.n	3ecd6 <rpc_handle_ctrl_message+0x10>
   3ece0:	f000 f833 	bl	3ed4a <rpc_transport_local_data_free>
   3ece4:	e7f7      	b.n	3ecd6 <rpc_handle_ctrl_message+0x10>
   3ece6:	6880      	ldr	r0, [r0, #8]
   3ece8:	b108      	cbz	r0, 3ecee <rpc_handle_ctrl_message+0x28>
   3ecea:	f000 f82e 	bl	3ed4a <rpc_transport_local_data_free>
   3ecee:	4620      	mov	r0, r4
   3ecf0:	f000 f827 	bl	3ed42 <rpc_transport_msg_free>
   3ecf4:	e7ef      	b.n	3ecd6 <rpc_handle_ctrl_message+0x10>

0003ecf6 <rpc_message_send>:
   3ecf6:	6843      	ldr	r3, [r0, #4]
   3ecf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3ecfc:	f043 0302 	orr.w	r3, r3, #2
   3ed00:	6043      	str	r3, [r0, #4]
   3ed02:	f000 b826 	b.w	3ed52 <rpc_transport_data_msg_send>

0003ed06 <rpc_message_alloc>:
   3ed06:	b570      	push	{r4, r5, r6, lr}
   3ed08:	4606      	mov	r6, r0
   3ed0a:	b130      	cbz	r0, 3ed1a <rpc_message_alloc+0x14>
   3ed0c:	f000 f81b 	bl	3ed46 <rpc_transport_data_alloc>
   3ed10:	4605      	mov	r5, r0
   3ed12:	b918      	cbnz	r0, 3ed1c <rpc_message_alloc+0x16>
   3ed14:	2400      	movs	r4, #0
   3ed16:	4620      	mov	r0, r4
   3ed18:	bd70      	pop	{r4, r5, r6, pc}
   3ed1a:	4605      	mov	r5, r0
   3ed1c:	f000 f80f 	bl	3ed3e <rpc_transport_data_msg_alloc>
   3ed20:	4604      	mov	r4, r0
   3ed22:	b110      	cbz	r0, 3ed2a <rpc_message_alloc+0x24>
   3ed24:	60c6      	str	r6, [r0, #12]
   3ed26:	6085      	str	r5, [r0, #8]
   3ed28:	e7f5      	b.n	3ed16 <rpc_message_alloc+0x10>
   3ed2a:	2d00      	cmp	r5, #0
   3ed2c:	d0f2      	beq.n	3ed14 <rpc_message_alloc+0xe>
   3ed2e:	4628      	mov	r0, r5
   3ed30:	f000 f80b 	bl	3ed4a <rpc_transport_local_data_free>
   3ed34:	e7ef      	b.n	3ed16 <rpc_message_alloc+0x10>

0003ed36 <rpc_message_free>:
   3ed36:	f000 b804 	b.w	3ed42 <rpc_transport_msg_free>

0003ed3a <rpc_message_data_free>:
   3ed3a:	f000 b808 	b.w	3ed4e <rpc_transport_peer_data_free>

0003ed3e <rpc_transport_data_msg_alloc>:
   3ed3e:	f7f3 bf73 	b.w	32c28 <rpc_transport_ipc_data_msg_alloc>

0003ed42 <rpc_transport_msg_free>:
   3ed42:	f7f3 bfbd 	b.w	32cc0 <rpc_transport_ipc_msg_free>

0003ed46 <rpc_transport_data_alloc>:
   3ed46:	f7f3 bfa1 	b.w	32c8c <rpc_transport_ipc_data_alloc>

0003ed4a <rpc_transport_local_data_free>:
   3ed4a:	f000 b804 	b.w	3ed56 <rpc_transport_ipc_local_data_free>

0003ed4e <rpc_transport_peer_data_free>:
   3ed4e:	f000 b809 	b.w	3ed64 <rpc_transport_ipc_peer_data_free>

0003ed52 <rpc_transport_data_msg_send>:
   3ed52:	f7f3 bf2d 	b.w	32bb0 <rpc_transport_ipc_data_msg_send>

0003ed56 <rpc_transport_ipc_local_data_free>:
   3ed56:	b508      	push	{r3, lr}
   3ed58:	f7eb ff84 	bl	2ac64 <nrf_modem_os_shm_tx_free>
   3ed5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3ed60:	f7eb bf44 	b.w	2abec <nrf_modem_os_application_irq_set>

0003ed64 <rpc_transport_ipc_peer_data_free>:
   3ed64:	b510      	push	{r4, lr}
   3ed66:	4604      	mov	r4, r0
   3ed68:	f7f3 ff70 	bl	32c4c <rpc_transport_ipc_ctrl_msg_alloc>
   3ed6c:	2101      	movs	r1, #1
   3ed6e:	2200      	movs	r2, #0
   3ed70:	7001      	strb	r1, [r0, #0]
   3ed72:	2102      	movs	r1, #2
   3ed74:	6084      	str	r4, [r0, #8]
   3ed76:	7042      	strb	r2, [r0, #1]
   3ed78:	7081      	strb	r1, [r0, #2]
   3ed7a:	70c2      	strb	r2, [r0, #3]
   3ed7c:	f7f3 ff36 	bl	32bec <rpc_transport_ipc_ctrl_msg_send>
   3ed80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ed84:	f7eb bf32 	b.w	2abec <nrf_modem_os_application_irq_set>

0003ed88 <rpc_client_request_alloc>:
   3ed88:	b508      	push	{r3, lr}
   3ed8a:	f7ff ffbc 	bl	3ed06 <rpc_message_alloc>
   3ed8e:	b100      	cbz	r0, 3ed92 <rpc_client_request_alloc+0xa>
   3ed90:	3008      	adds	r0, #8
   3ed92:	bd08      	pop	{r3, pc}

0003ed94 <rpc_client_request_send>:
   3ed94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   3ed98:	4610      	mov	r0, r2
   3ed9a:	f840 1d08 	str.w	r1, [r0, #-8]!
   3ed9e:	f7ff bfaa 	b.w	3ecf6 <rpc_message_send>

0003eda2 <rpc_client_message_free>:
   3eda2:	3808      	subs	r0, #8
   3eda4:	f7ff bfc7 	b.w	3ed36 <rpc_message_free>

0003eda8 <rpc_client_data_free>:
   3eda8:	f7ff bfc7 	b.w	3ed3a <rpc_message_data_free>

0003edac <packet_handler_alloc_and_init>:
   3edac:	b538      	push	{r3, r4, r5, lr}
   3edae:	4604      	mov	r4, r0
   3edb0:	4608      	mov	r0, r1
   3edb2:	4611      	mov	r1, r2
   3edb4:	4622      	mov	r2, r4
   3edb6:	f7f6 fbd1 	bl	3555c <packet_handler_create>
   3edba:	61e0      	str	r0, [r4, #28]
   3edbc:	b158      	cbz	r0, 3edd6 <packet_handler_alloc_and_init+0x2a>
   3edbe:	6803      	ldr	r3, [r0, #0]
   3edc0:	681b      	ldr	r3, [r3, #0]
   3edc2:	4798      	blx	r3
   3edc4:	4605      	mov	r5, r0
   3edc6:	b120      	cbz	r0, 3edd2 <packet_handler_alloc_and_init+0x26>
   3edc8:	69e0      	ldr	r0, [r4, #28]
   3edca:	f000 fce3 	bl	3f794 <packet_handler_delete>
   3edce:	2300      	movs	r3, #0
   3edd0:	61e3      	str	r3, [r4, #28]
   3edd2:	4628      	mov	r0, r5
   3edd4:	bd38      	pop	{r3, r4, r5, pc}
   3edd6:	250c      	movs	r5, #12
   3edd8:	e7fb      	b.n	3edd2 <packet_handler_alloc_and_init+0x26>

0003edda <socket_free>:
   3edda:	b510      	push	{r4, lr}
   3eddc:	4604      	mov	r4, r0
   3edde:	69c0      	ldr	r0, [r0, #28]
   3ede0:	b108      	cbz	r0, 3ede6 <socket_free+0xc>
   3ede2:	f000 fcd7 	bl	3f794 <packet_handler_delete>
   3ede6:	4620      	mov	r0, r4
   3ede8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3edec:	222c      	movs	r2, #44	; 0x2c
   3edee:	2100      	movs	r1, #0
   3edf0:	f001 b8a6 	b.w	3ff40 <memset>

0003edf4 <interface_socket_event_get>:
   3edf4:	b510      	push	{r4, lr}
   3edf6:	4604      	mov	r4, r0
   3edf8:	b189      	cbz	r1, 3ee1e <interface_socket_event_get+0x2a>
   3edfa:	f7f4 f9ad 	bl	33158 <interface_socket_from_handle_get>
   3edfe:	b158      	cbz	r0, 3ee18 <interface_socket_event_get+0x24>
   3ee00:	6803      	ldr	r3, [r0, #0]
   3ee02:	0c1b      	lsrs	r3, r3, #16
   3ee04:	f003 020a 	and.w	r2, r3, #10
   3ee08:	2a0a      	cmp	r2, #10
   3ee0a:	bf14      	ite	ne
   3ee0c:	f003 030f 	andne.w	r3, r3, #15
   3ee10:	f003 030d 	andeq.w	r3, r3, #13
   3ee14:	600b      	str	r3, [r1, #0]
   3ee16:	e002      	b.n	3ee1e <interface_socket_event_get+0x2a>
   3ee18:	2c00      	cmp	r4, #0
   3ee1a:	da01      	bge.n	3ee20 <interface_socket_event_get+0x2c>
   3ee1c:	6008      	str	r0, [r1, #0]
   3ee1e:	bd10      	pop	{r4, pc}
   3ee20:	2310      	movs	r3, #16
   3ee22:	e7f7      	b.n	3ee14 <interface_socket_event_get+0x20>

0003ee24 <ip_recvd_packet_free_cb>:
   3ee24:	b510      	push	{r4, lr}
   3ee26:	4604      	mov	r4, r0
   3ee28:	6800      	ldr	r0, [r0, #0]
   3ee2a:	f7ff ffbd 	bl	3eda8 <rpc_client_data_free>
   3ee2e:	68a0      	ldr	r0, [r4, #8]
   3ee30:	b118      	cbz	r0, 3ee3a <ip_recvd_packet_free_cb+0x16>
   3ee32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3ee36:	f7eb bf03 	b.w	2ac40 <nrf_modem_os_free>
   3ee3a:	bd10      	pop	{r4, pc}

0003ee3c <protocol_verify>:
   3ee3c:	b508      	push	{r3, lr}
   3ee3e:	4603      	mov	r3, r0
   3ee40:	4608      	mov	r0, r1
   3ee42:	b169      	cbz	r1, 3ee60 <protocol_verify+0x24>
   3ee44:	2b01      	cmp	r3, #1
   3ee46:	d107      	bne.n	3ee58 <protocol_verify+0x1c>
   3ee48:	2901      	cmp	r1, #1
   3ee4a:	d013      	beq.n	3ee74 <protocol_verify+0x38>
   3ee4c:	206b      	movs	r0, #107	; 0x6b
   3ee4e:	f7fe fe3b 	bl	3dac8 <nrf_modem_os_errno_set>
   3ee52:	f04f 30ff 	mov.w	r0, #4294967295
   3ee56:	bd08      	pop	{r3, pc}
   3ee58:	2b02      	cmp	r3, #2
   3ee5a:	d10b      	bne.n	3ee74 <protocol_verify+0x38>
   3ee5c:	2902      	cmp	r1, #2
   3ee5e:	e7f4      	b.n	3ee4a <protocol_verify+0xe>
   3ee60:	2b01      	cmp	r3, #1
   3ee62:	d101      	bne.n	3ee68 <protocol_verify+0x2c>
   3ee64:	6013      	str	r3, [r2, #0]
   3ee66:	e7f6      	b.n	3ee56 <protocol_verify+0x1a>
   3ee68:	2b03      	cmp	r3, #3
   3ee6a:	d101      	bne.n	3ee70 <protocol_verify+0x34>
   3ee6c:	6011      	str	r1, [r2, #0]
   3ee6e:	e7f2      	b.n	3ee56 <protocol_verify+0x1a>
   3ee70:	2302      	movs	r3, #2
   3ee72:	e7f7      	b.n	3ee64 <protocol_verify+0x28>
   3ee74:	2000      	movs	r0, #0
   3ee76:	e7ee      	b.n	3ee56 <protocol_verify+0x1a>

0003ee78 <ip_addr_parse>:
   3ee78:	b570      	push	{r4, r5, r6, lr}
   3ee7a:	684d      	ldr	r5, [r1, #4]
   3ee7c:	e9dd 6404 	ldrd	r6, r4, [sp, #16]
   3ee80:	4285      	cmp	r5, r0
   3ee82:	d11f      	bne.n	3eec4 <ip_addr_parse+0x4c>
   3ee84:	7808      	ldrb	r0, [r1, #0]
   3ee86:	4290      	cmp	r0, r2
   3ee88:	d11e      	bne.n	3eec8 <ip_addr_parse+0x50>
   3ee8a:	2d02      	cmp	r5, #2
   3ee8c:	d109      	bne.n	3eea2 <ip_addr_parse+0x2a>
   3ee8e:	2810      	cmp	r0, #16
   3ee90:	d11a      	bne.n	3eec8 <ip_addr_parse+0x50>
   3ee92:	890a      	ldrh	r2, [r1, #8]
   3ee94:	8032      	strh	r2, [r6, #0]
   3ee96:	2204      	movs	r2, #4
   3ee98:	801a      	strh	r2, [r3, #0]
   3ee9a:	68cb      	ldr	r3, [r1, #12]
   3ee9c:	6023      	str	r3, [r4, #0]
   3ee9e:	2000      	movs	r0, #0
   3eea0:	bd70      	pop	{r4, r5, r6, pc}
   3eea2:	2d0a      	cmp	r5, #10
   3eea4:	d110      	bne.n	3eec8 <ip_addr_parse+0x50>
   3eea6:	2824      	cmp	r0, #36	; 0x24
   3eea8:	d10e      	bne.n	3eec8 <ip_addr_parse+0x50>
   3eeaa:	890a      	ldrh	r2, [r1, #8]
   3eeac:	8032      	strh	r2, [r6, #0]
   3eeae:	2210      	movs	r2, #16
   3eeb0:	801a      	strh	r2, [r3, #0]
   3eeb2:	188b      	adds	r3, r1, r2
   3eeb4:	3120      	adds	r1, #32
   3eeb6:	f853 2b04 	ldr.w	r2, [r3], #4
   3eeba:	428b      	cmp	r3, r1
   3eebc:	f844 2b04 	str.w	r2, [r4], #4
   3eec0:	d1f9      	bne.n	3eeb6 <ip_addr_parse+0x3e>
   3eec2:	e7ec      	b.n	3ee9e <ip_addr_parse+0x26>
   3eec4:	206a      	movs	r0, #106	; 0x6a
   3eec6:	e7eb      	b.n	3eea0 <ip_addr_parse+0x28>
   3eec8:	2016      	movs	r0, #22
   3eeca:	e7e9      	b.n	3eea0 <ip_addr_parse+0x28>

0003eecc <ip_interface_request_create>:
   3eecc:	b570      	push	{r4, r5, r6, lr}
   3eece:	4606      	mov	r6, r0
   3eed0:	4618      	mov	r0, r3
   3eed2:	460d      	mov	r5, r1
   3eed4:	4614      	mov	r4, r2
   3eed6:	f7ff ff57 	bl	3ed88 <rpc_client_request_alloc>
   3eeda:	b148      	cbz	r0, 3eef0 <ip_interface_request_create+0x24>
   3eedc:	2300      	movs	r3, #0
   3eede:	2208      	movs	r2, #8
   3eee0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   3eee4:	60c4      	str	r4, [r0, #12]
   3eee6:	6105      	str	r5, [r0, #16]
   3eee8:	7202      	strb	r2, [r0, #8]
   3eeea:	7243      	strb	r3, [r0, #9]
   3eeec:	7283      	strb	r3, [r0, #10]
   3eeee:	72c3      	strb	r3, [r0, #11]
   3eef0:	bd70      	pop	{r4, r5, r6, pc}

0003eef2 <ip_interface_wait>:
   3eef2:	b538      	push	{r3, r4, r5, lr}
   3eef4:	4605      	mov	r5, r0
   3eef6:	f7f4 f8b5 	bl	33064 <interface_socket_wait>
   3eefa:	4604      	mov	r4, r0
   3eefc:	b938      	cbnz	r0, 3ef0e <ip_interface_wait+0x1c>
   3eefe:	4628      	mov	r0, r5
   3ef00:	f7f4 f92a 	bl	33158 <interface_socket_from_handle_get>
   3ef04:	b118      	cbz	r0, 3ef0e <ip_interface_wait+0x1c>
   3ef06:	6844      	ldr	r4, [r0, #4]
   3ef08:	b10c      	cbz	r4, 3ef0e <ip_interface_wait+0x1c>
   3ef0a:	2300      	movs	r3, #0
   3ef0c:	6043      	str	r3, [r0, #4]
   3ef0e:	4620      	mov	r0, r4
   3ef10:	bd38      	pop	{r3, r4, r5, pc}

0003ef12 <ip_interface_recvfrom>:
   3ef12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ef16:	b087      	sub	sp, #28
   3ef18:	4681      	mov	r9, r0
   3ef1a:	461e      	mov	r6, r3
   3ef1c:	4690      	mov	r8, r2
   3ef1e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   3ef20:	9101      	str	r1, [sp, #4]
   3ef22:	2a00      	cmp	r2, #0
   3ef24:	f000 80e8 	beq.w	3f0f8 <ip_interface_recvfrom+0x1e6>
   3ef28:	b11b      	cbz	r3, 3ef32 <ip_interface_recvfrom+0x20>
   3ef2a:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   3ef2e:	f000 80e5 	beq.w	3f0fc <ip_interface_recvfrom+0x1ea>
   3ef32:	4648      	mov	r0, r9
   3ef34:	f7f4 f910 	bl	33158 <interface_socket_from_handle_get>
   3ef38:	4604      	mov	r4, r0
   3ef3a:	2800      	cmp	r0, #0
   3ef3c:	f000 80e0 	beq.w	3f100 <ip_interface_recvfrom+0x1ee>
   3ef40:	6803      	ldr	r3, [r0, #0]
   3ef42:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   3ef46:	d10f      	bne.n	3ef68 <ip_interface_recvfrom+0x56>
   3ef48:	6802      	ldr	r2, [r0, #0]
   3ef4a:	b292      	uxth	r2, r2
   3ef4c:	2a06      	cmp	r2, #6
   3ef4e:	f000 809e 	beq.w	3f08e <ip_interface_recvfrom+0x17c>
   3ef52:	6802      	ldr	r2, [r0, #0]
   3ef54:	461e      	mov	r6, r3
   3ef56:	b292      	uxth	r2, r2
   3ef58:	2a07      	cmp	r2, #7
   3ef5a:	469a      	mov	sl, r3
   3ef5c:	f000 8099 	beq.w	3f092 <ip_interface_recvfrom+0x180>
   3ef60:	2280      	movs	r2, #128	; 0x80
   3ef62:	f04f 35ff 	mov.w	r5, #4294967295
   3ef66:	e084      	b.n	3f072 <ip_interface_recvfrom+0x160>
   3ef68:	07b1      	lsls	r1, r6, #30
   3ef6a:	d422      	bmi.n	3efb2 <ip_interface_recvfrom+0xa0>
   3ef6c:	6803      	ldr	r3, [r0, #0]
   3ef6e:	00da      	lsls	r2, r3, #3
   3ef70:	d522      	bpl.n	3efb8 <ip_interface_recvfrom+0xa6>
   3ef72:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   3ef76:	f04f 35ff 	mov.w	r5, #4294967295
   3ef7a:	f006 0b10 	and.w	fp, r6, #16
   3ef7e:	6822      	ldr	r2, [r4, #0]
   3ef80:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   3ef84:	d01b      	beq.n	3efbe <ip_interface_recvfrom+0xac>
   3ef86:	6822      	ldr	r2, [r4, #0]
   3ef88:	69e0      	ldr	r0, [r4, #28]
   3ef8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   3ef8e:	6022      	str	r2, [r4, #0]
   3ef90:	6802      	ldr	r2, [r0, #0]
   3ef92:	68d2      	ldr	r2, [r2, #12]
   3ef94:	4790      	blx	r2
   3ef96:	1c43      	adds	r3, r0, #1
   3ef98:	4605      	mov	r5, r0
   3ef9a:	d029      	beq.n	3eff0 <ip_interface_recvfrom+0xde>
   3ef9c:	4580      	cmp	r8, r0
   3ef9e:	dd05      	ble.n	3efac <ip_interface_recvfrom+0x9a>
   3efa0:	6923      	ldr	r3, [r4, #16]
   3efa2:	2b01      	cmp	r3, #1
   3efa4:	d102      	bne.n	3efac <ip_interface_recvfrom+0x9a>
   3efa6:	f1bb 0f00 	cmp.w	fp, #0
   3efaa:	d125      	bne.n	3eff8 <ip_interface_recvfrom+0xe6>
   3efac:	f04f 0a00 	mov.w	sl, #0
   3efb0:	e04a      	b.n	3f048 <ip_interface_recvfrom+0x136>
   3efb2:	f04f 0a00 	mov.w	sl, #0
   3efb6:	e7de      	b.n	3ef76 <ip_interface_recvfrom+0x64>
   3efb8:	f04f 0a01 	mov.w	sl, #1
   3efbc:	e7db      	b.n	3ef76 <ip_interface_recvfrom+0x64>
   3efbe:	6821      	ldr	r1, [r4, #0]
   3efc0:	0308      	lsls	r0, r1, #12
   3efc2:	d515      	bpl.n	3eff0 <ip_interface_recvfrom+0xde>
   3efc4:	6821      	ldr	r1, [r4, #0]
   3efc6:	b289      	uxth	r1, r1
   3efc8:	290d      	cmp	r1, #13
   3efca:	d011      	beq.n	3eff0 <ip_interface_recvfrom+0xde>
   3efcc:	6923      	ldr	r3, [r4, #16]
   3efce:	2b01      	cmp	r3, #1
   3efd0:	f000 809e 	beq.w	3f110 <ip_interface_recvfrom+0x1fe>
   3efd4:	4692      	mov	sl, r2
   3efd6:	2280      	movs	r2, #128	; 0x80
   3efd8:	6823      	ldr	r3, [r4, #0]
   3efda:	0c1b      	lsrs	r3, r3, #16
   3efdc:	041b      	lsls	r3, r3, #16
   3efde:	f043 030d 	orr.w	r3, r3, #13
   3efe2:	6023      	str	r3, [r4, #0]
   3efe4:	6823      	ldr	r3, [r4, #0]
   3efe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3efea:	6023      	str	r3, [r4, #0]
   3efec:	2600      	movs	r6, #0
   3efee:	e040      	b.n	3f072 <ip_interface_recvfrom+0x160>
   3eff0:	f1ba 0f00 	cmp.w	sl, #0
   3eff4:	f000 808d 	beq.w	3f112 <ip_interface_recvfrom+0x200>
   3eff8:	6a23      	ldr	r3, [r4, #32]
   3effa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3effe:	2b00      	cmp	r3, #0
   3f000:	bf08      	it	eq
   3f002:	f04f 33ff 	moveq.w	r3, #4294967295
   3f006:	4611      	mov	r1, r2
   3f008:	9302      	str	r3, [sp, #8]
   3f00a:	4648      	mov	r0, r9
   3f00c:	ab02      	add	r3, sp, #8
   3f00e:	f7ff ff70 	bl	3eef2 <ip_interface_wait>
   3f012:	6823      	ldr	r3, [r4, #0]
   3f014:	4602      	mov	r2, r0
   3f016:	b29b      	uxth	r3, r3
   3f018:	b933      	cbnz	r3, 3f028 <ip_interface_recvfrom+0x116>
   3f01a:	2204      	movs	r2, #4
   3f01c:	4610      	mov	r0, r2
   3f01e:	f7fe fd53 	bl	3dac8 <nrf_modem_os_errno_set>
   3f022:	f04f 35ff 	mov.w	r5, #4294967295
   3f026:	e046      	b.n	3f0b6 <ip_interface_recvfrom+0x1a4>
   3f028:	2800      	cmp	r0, #0
   3f02a:	d06b      	beq.n	3f104 <ip_interface_recvfrom+0x1f2>
   3f02c:	6823      	ldr	r3, [r4, #0]
   3f02e:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   3f032:	d06a      	beq.n	3f10a <ip_interface_recvfrom+0x1f8>
   3f034:	6823      	ldr	r3, [r4, #0]
   3f036:	b29b      	uxth	r3, r3
   3f038:	2b0d      	cmp	r3, #13
   3f03a:	d066      	beq.n	3f10a <ip_interface_recvfrom+0x1f8>
   3f03c:	6923      	ldr	r3, [r4, #16]
   3f03e:	1e59      	subs	r1, r3, #1
   3f040:	f1d1 0a00 	rsbs	sl, r1, #0
   3f044:	eb4a 0a01 	adc.w	sl, sl, r1
   3f048:	b107      	cbz	r7, 3f04c <ip_interface_recvfrom+0x13a>
   3f04a:	683f      	ldr	r7, [r7, #0]
   3f04c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3f04e:	69e0      	ldr	r0, [r4, #28]
   3f050:	e9cd 2704 	strd	r2, r7, [sp, #16]
   3f054:	9b01      	ldr	r3, [sp, #4]
   3f056:	6802      	ldr	r2, [r0, #0]
   3f058:	e9cd 3802 	strd	r3, r8, [sp, #8]
   3f05c:	6895      	ldr	r5, [r2, #8]
   3f05e:	a902      	add	r1, sp, #8
   3f060:	4632      	mov	r2, r6
   3f062:	47a8      	blx	r5
   3f064:	1c42      	adds	r2, r0, #1
   3f066:	4605      	mov	r5, r0
   3f068:	bf0b      	itete	eq
   3f06a:	2600      	moveq	r6, #0
   3f06c:	2601      	movne	r6, #1
   3f06e:	220b      	moveq	r2, #11
   3f070:	2200      	movne	r2, #0
   3f072:	69e0      	ldr	r0, [r4, #28]
   3f074:	9201      	str	r2, [sp, #4]
   3f076:	6801      	ldr	r1, [r0, #0]
   3f078:	68c9      	ldr	r1, [r1, #12]
   3f07a:	4788      	blx	r1
   3f07c:	3001      	adds	r0, #1
   3f07e:	9a01      	ldr	r2, [sp, #4]
   3f080:	d009      	beq.n	3f096 <ip_interface_recvfrom+0x184>
   3f082:	6823      	ldr	r3, [r4, #0]
   3f084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3f088:	6023      	str	r3, [r4, #0]
   3f08a:	b1a2      	cbz	r2, 3f0b6 <ip_interface_recvfrom+0x1a4>
   3f08c:	e7c6      	b.n	3f01c <ip_interface_recvfrom+0x10a>
   3f08e:	461e      	mov	r6, r3
   3f090:	469a      	mov	sl, r3
   3f092:	2209      	movs	r2, #9
   3f094:	e765      	b.n	3ef62 <ip_interface_recvfrom+0x50>
   3f096:	f1ba 0f00 	cmp.w	sl, #0
   3f09a:	d010      	beq.n	3f0be <ip_interface_recvfrom+0x1ac>
   3f09c:	2e00      	cmp	r6, #0
   3f09e:	d1f4      	bne.n	3f08a <ip_interface_recvfrom+0x178>
   3f0a0:	4635      	mov	r5, r6
   3f0a2:	6823      	ldr	r3, [r4, #0]
   3f0a4:	0c1b      	lsrs	r3, r3, #16
   3f0a6:	041b      	lsls	r3, r3, #16
   3f0a8:	f043 030d 	orr.w	r3, r3, #13
   3f0ac:	6023      	str	r3, [r4, #0]
   3f0ae:	6823      	ldr	r3, [r4, #0]
   3f0b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3f0b4:	6023      	str	r3, [r4, #0]
   3f0b6:	4628      	mov	r0, r5
   3f0b8:	b007      	add	sp, #28
   3f0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f0be:	2e00      	cmp	r6, #0
   3f0c0:	d1e3      	bne.n	3f08a <ip_interface_recvfrom+0x178>
   3f0c2:	6823      	ldr	r3, [r4, #0]
   3f0c4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   3f0c8:	6823      	ldr	r3, [r4, #0]
   3f0ca:	d00a      	beq.n	3f0e2 <ip_interface_recvfrom+0x1d0>
   3f0cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   3f0d0:	6023      	str	r3, [r4, #0]
   3f0d2:	6823      	ldr	r3, [r4, #0]
   3f0d4:	2269      	movs	r2, #105	; 0x69
   3f0d6:	0c1b      	lsrs	r3, r3, #16
   3f0d8:	041b      	lsls	r3, r3, #16
   3f0da:	f043 030d 	orr.w	r3, r3, #13
   3f0de:	6023      	str	r3, [r4, #0]
   3f0e0:	e79c      	b.n	3f01c <ip_interface_recvfrom+0x10a>
   3f0e2:	031b      	lsls	r3, r3, #12
   3f0e4:	d5d1      	bpl.n	3f08a <ip_interface_recvfrom+0x178>
   3f0e6:	6823      	ldr	r3, [r4, #0]
   3f0e8:	b29b      	uxth	r3, r3
   3f0ea:	2b0d      	cmp	r3, #13
   3f0ec:	d1cd      	bne.n	3f08a <ip_interface_recvfrom+0x178>
   3f0ee:	68a3      	ldr	r3, [r4, #8]
   3f0f0:	2b00      	cmp	r3, #0
   3f0f2:	d0ca      	beq.n	3f08a <ip_interface_recvfrom+0x178>
   3f0f4:	68a2      	ldr	r2, [r4, #8]
   3f0f6:	e7c8      	b.n	3f08a <ip_interface_recvfrom+0x178>
   3f0f8:	2216      	movs	r2, #22
   3f0fa:	e78f      	b.n	3f01c <ip_interface_recvfrom+0x10a>
   3f0fc:	225f      	movs	r2, #95	; 0x5f
   3f0fe:	e78d      	b.n	3f01c <ip_interface_recvfrom+0x10a>
   3f100:	2209      	movs	r2, #9
   3f102:	e78b      	b.n	3f01c <ip_interface_recvfrom+0x10a>
   3f104:	f04f 0a01 	mov.w	sl, #1
   3f108:	e739      	b.n	3ef7e <ip_interface_recvfrom+0x6c>
   3f10a:	2600      	movs	r6, #0
   3f10c:	46b2      	mov	sl, r6
   3f10e:	e7b0      	b.n	3f072 <ip_interface_recvfrom+0x160>
   3f110:	469a      	mov	sl, r3
   3f112:	220b      	movs	r2, #11
   3f114:	e76a      	b.n	3efec <ip_interface_recvfrom+0xda>

0003f116 <ip_interface_connect>:
   3f116:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3f11a:	4606      	mov	r6, r0
   3f11c:	4691      	mov	r9, r2
   3f11e:	460f      	mov	r7, r1
   3f120:	b085      	sub	sp, #20
   3f122:	2900      	cmp	r1, #0
   3f124:	d067      	beq.n	3f1f6 <ip_interface_connect+0xe0>
   3f126:	2a00      	cmp	r2, #0
   3f128:	d065      	beq.n	3f1f6 <ip_interface_connect+0xe0>
   3f12a:	f7f4 f815 	bl	33158 <interface_socket_from_handle_get>
   3f12e:	4604      	mov	r4, r0
   3f130:	2800      	cmp	r0, #0
   3f132:	d062      	beq.n	3f1fa <ip_interface_connect+0xe4>
   3f134:	6803      	ldr	r3, [r0, #0]
   3f136:	b29b      	uxth	r3, r3
   3f138:	2b02      	cmp	r3, #2
   3f13a:	d003      	beq.n	3f144 <ip_interface_connect+0x2e>
   3f13c:	6803      	ldr	r3, [r0, #0]
   3f13e:	b29b      	uxth	r3, r3
   3f140:	2b04      	cmp	r3, #4
   3f142:	d151      	bne.n	3f1e8 <ip_interface_connect+0xd2>
   3f144:	6823      	ldr	r3, [r4, #0]
   3f146:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   3f14a:	d158      	bne.n	3f1fe <ip_interface_connect+0xe8>
   3f14c:	f247 0202 	movw	r2, #28674	; 0x7002
   3f150:	4630      	mov	r0, r6
   3f152:	69a1      	ldr	r1, [r4, #24]
   3f154:	f7ff feba 	bl	3eecc <ip_interface_request_create>
   3f158:	4605      	mov	r5, r0
   3f15a:	2800      	cmp	r0, #0
   3f15c:	d051      	beq.n	3f202 <ip_interface_connect+0xec>
   3f15e:	f247 0802 	movw	r8, #28674	; 0x7002
   3f162:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   3f166:	60c3      	str	r3, [r0, #12]
   3f168:	69a3      	ldr	r3, [r4, #24]
   3f16a:	464a      	mov	r2, r9
   3f16c:	6103      	str	r3, [r0, #16]
   3f16e:	6883      	ldr	r3, [r0, #8]
   3f170:	4639      	mov	r1, r7
   3f172:	3304      	adds	r3, #4
   3f174:	6083      	str	r3, [r0, #8]
   3f176:	f100 0318 	add.w	r3, r0, #24
   3f17a:	9301      	str	r3, [sp, #4]
   3f17c:	f10d 030a 	add.w	r3, sp, #10
   3f180:	9300      	str	r3, [sp, #0]
   3f182:	68e0      	ldr	r0, [r4, #12]
   3f184:	ab02      	add	r3, sp, #8
   3f186:	f7ff fe77 	bl	3ee78 <ip_addr_parse>
   3f18a:	bb30      	cbnz	r0, 3f1da <ip_interface_connect+0xc4>
   3f18c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3f190:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   3f194:	82ab      	strh	r3, [r5, #20]
   3f196:	68ab      	ldr	r3, [r5, #8]
   3f198:	6827      	ldr	r7, [r4, #0]
   3f19a:	4413      	add	r3, r2
   3f19c:	60ab      	str	r3, [r5, #8]
   3f19e:	6823      	ldr	r3, [r4, #0]
   3f1a0:	82ea      	strh	r2, [r5, #22]
   3f1a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   3f1a6:	6023      	str	r3, [r4, #0]
   3f1a8:	462a      	mov	r2, r5
   3f1aa:	4641      	mov	r1, r8
   3f1ac:	2004      	movs	r0, #4
   3f1ae:	f7ff fdf1 	bl	3ed94 <rpc_client_request_send>
   3f1b2:	6823      	ldr	r3, [r4, #0]
   3f1b4:	00db      	lsls	r3, r3, #3
   3f1b6:	d426      	bmi.n	3f206 <ip_interface_connect+0xf0>
   3f1b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3f1ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3f1be:	2b00      	cmp	r3, #0
   3f1c0:	bf08      	it	eq
   3f1c2:	f04f 33ff 	moveq.w	r3, #4294967295
   3f1c6:	2105      	movs	r1, #5
   3f1c8:	9303      	str	r3, [sp, #12]
   3f1ca:	4630      	mov	r0, r6
   3f1cc:	ab03      	add	r3, sp, #12
   3f1ce:	f7ff fe90 	bl	3eef2 <ip_interface_wait>
   3f1d2:	b130      	cbz	r0, 3f1e2 <ip_interface_connect+0xcc>
   3f1d4:	2877      	cmp	r0, #119	; 0x77
   3f1d6:	d000      	beq.n	3f1da <ip_interface_connect+0xc4>
   3f1d8:	6027      	str	r7, [r4, #0]
   3f1da:	f7fe fc75 	bl	3dac8 <nrf_modem_os_errno_set>
   3f1de:	f04f 30ff 	mov.w	r0, #4294967295
   3f1e2:	b005      	add	sp, #20
   3f1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3f1e8:	6803      	ldr	r3, [r0, #0]
   3f1ea:	b29b      	uxth	r3, r3
   3f1ec:	2b05      	cmp	r3, #5
   3f1ee:	bf14      	ite	ne
   3f1f0:	2009      	movne	r0, #9
   3f1f2:	207f      	moveq	r0, #127	; 0x7f
   3f1f4:	e7f1      	b.n	3f1da <ip_interface_connect+0xc4>
   3f1f6:	2016      	movs	r0, #22
   3f1f8:	e7ef      	b.n	3f1da <ip_interface_connect+0xc4>
   3f1fa:	2009      	movs	r0, #9
   3f1fc:	e7ed      	b.n	3f1da <ip_interface_connect+0xc4>
   3f1fe:	2078      	movs	r0, #120	; 0x78
   3f200:	e7eb      	b.n	3f1da <ip_interface_connect+0xc4>
   3f202:	200c      	movs	r0, #12
   3f204:	e7e9      	b.n	3f1da <ip_interface_connect+0xc4>
   3f206:	2077      	movs	r0, #119	; 0x77
   3f208:	e7e7      	b.n	3f1da <ip_interface_connect+0xc4>

0003f20a <getopt_check_and_send_int>:
   3f20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f20c:	4604      	mov	r4, r0
   3f20e:	460d      	mov	r5, r1
   3f210:	4618      	mov	r0, r3
   3f212:	4611      	mov	r1, r2
   3f214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3f218:	b18b      	cbz	r3, 3f23e <getopt_check_and_send_int+0x34>
   3f21a:	681e      	ldr	r6, [r3, #0]
   3f21c:	b17e      	cbz	r6, 3f23e <getopt_check_and_send_int+0x34>
   3f21e:	b172      	cbz	r2, 3f23e <getopt_check_and_send_int+0x34>
   3f220:	e9cd 2300 	strd	r2, r3, [sp]
   3f224:	462b      	mov	r3, r5
   3f226:	4622      	mov	r2, r4
   3f228:	f7f4 fa7c 	bl	33724 <ip_interface_socketoption_get>
   3f22c:	4603      	mov	r3, r0
   3f22e:	b118      	cbz	r0, 3f238 <getopt_check_and_send_int+0x2e>
   3f230:	f7fe fc4a 	bl	3dac8 <nrf_modem_os_errno_set>
   3f234:	f04f 33ff 	mov.w	r3, #4294967295
   3f238:	4618      	mov	r0, r3
   3f23a:	b002      	add	sp, #8
   3f23c:	bd70      	pop	{r4, r5, r6, pc}
   3f23e:	2016      	movs	r0, #22
   3f240:	e7f6      	b.n	3f230 <getopt_check_and_send_int+0x26>

0003f242 <ip_interface_socketoption_send>:
   3f242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f246:	4698      	mov	r8, r3
   3f248:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   3f24c:	f04f 33ff 	mov.w	r3, #4294967295
   3f250:	9301      	str	r3, [sp, #4]
   3f252:	680b      	ldr	r3, [r1, #0]
   3f254:	4606      	mov	r6, r0
   3f256:	025d      	lsls	r5, r3, #9
   3f258:	460c      	mov	r4, r1
   3f25a:	4692      	mov	sl, r2
   3f25c:	d43a      	bmi.n	3f2d4 <ip_interface_socketoption_send+0x92>
   3f25e:	680b      	ldr	r3, [r1, #0]
   3f260:	0219      	lsls	r1, r3, #8
   3f262:	d437      	bmi.n	3f2d4 <ip_interface_socketoption_send+0x92>
   3f264:	6823      	ldr	r3, [r4, #0]
   3f266:	01da      	lsls	r2, r3, #7
   3f268:	d434      	bmi.n	3f2d4 <ip_interface_socketoption_send+0x92>
   3f26a:	6823      	ldr	r3, [r4, #0]
   3f26c:	019b      	lsls	r3, r3, #6
   3f26e:	d431      	bmi.n	3f2d4 <ip_interface_socketoption_send+0x92>
   3f270:	f8d4 9000 	ldr.w	r9, [r4]
   3f274:	6823      	ldr	r3, [r4, #0]
   3f276:	f247 0203 	movw	r2, #28675	; 0x7003
   3f27a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3f27e:	6023      	str	r3, [r4, #0]
   3f280:	69a1      	ldr	r1, [r4, #24]
   3f282:	463b      	mov	r3, r7
   3f284:	f7ff fe22 	bl	3eecc <ip_interface_request_create>
   3f288:	4605      	mov	r5, r0
   3f28a:	b308      	cbz	r0, 3f2d0 <ip_interface_socketoption_send+0x8e>
   3f28c:	6883      	ldr	r3, [r0, #8]
   3f28e:	f8c0 a014 	str.w	sl, [r0, #20]
   3f292:	3308      	adds	r3, #8
   3f294:	6083      	str	r3, [r0, #8]
   3f296:	f8c0 8018 	str.w	r8, [r0, #24]
   3f29a:	b13f      	cbz	r7, 3f2ac <ip_interface_socketoption_send+0x6a>
   3f29c:	f1bb 0f00 	cmp.w	fp, #0
   3f2a0:	d004      	beq.n	3f2ac <ip_interface_socketoption_send+0x6a>
   3f2a2:	463a      	mov	r2, r7
   3f2a4:	4659      	mov	r1, fp
   3f2a6:	6800      	ldr	r0, [r0, #0]
   3f2a8:	f000 fe2a 	bl	3ff00 <memcpy>
   3f2ac:	462a      	mov	r2, r5
   3f2ae:	f247 0103 	movw	r1, #28675	; 0x7003
   3f2b2:	2004      	movs	r0, #4
   3f2b4:	f7ff fd6e 	bl	3ed94 <rpc_client_request_send>
   3f2b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3f2bc:	4630      	mov	r0, r6
   3f2be:	4611      	mov	r1, r2
   3f2c0:	ab01      	add	r3, sp, #4
   3f2c2:	f7ff fe16 	bl	3eef2 <ip_interface_wait>
   3f2c6:	f8c4 9000 	str.w	r9, [r4]
   3f2ca:	b003      	add	sp, #12
   3f2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f2d0:	200c      	movs	r0, #12
   3f2d2:	e7f8      	b.n	3f2c6 <ip_interface_socketoption_send+0x84>
   3f2d4:	200b      	movs	r0, #11
   3f2d6:	e7f8      	b.n	3f2ca <ip_interface_socketoption_send+0x88>

0003f2d8 <setopt_check_and_send_int>:
   3f2d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f2da:	4604      	mov	r4, r0
   3f2dc:	460d      	mov	r5, r1
   3f2de:	4618      	mov	r0, r3
   3f2e0:	4611      	mov	r1, r2
   3f2e2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   3f2e6:	2a04      	cmp	r2, #4
   3f2e8:	d10f      	bne.n	3f30a <setopt_check_and_send_int+0x32>
   3f2ea:	b173      	cbz	r3, 3f30a <setopt_check_and_send_int+0x32>
   3f2ec:	e9cd 3200 	strd	r3, r2, [sp]
   3f2f0:	462b      	mov	r3, r5
   3f2f2:	4622      	mov	r2, r4
   3f2f4:	f7ff ffa5 	bl	3f242 <ip_interface_socketoption_send>
   3f2f8:	4603      	mov	r3, r0
   3f2fa:	b118      	cbz	r0, 3f304 <setopt_check_and_send_int+0x2c>
   3f2fc:	f7fe fbe4 	bl	3dac8 <nrf_modem_os_errno_set>
   3f300:	f04f 33ff 	mov.w	r3, #4294967295
   3f304:	4618      	mov	r0, r3
   3f306:	b003      	add	sp, #12
   3f308:	bd30      	pop	{r4, r5, pc}
   3f30a:	2016      	movs	r0, #22
   3f30c:	e7f6      	b.n	3f2fc <setopt_check_and_send_int+0x24>

0003f30e <ip_interface_getopt>:
   3f30e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3f312:	2901      	cmp	r1, #1
   3f314:	4604      	mov	r4, r0
   3f316:	460f      	mov	r7, r1
   3f318:	4616      	mov	r6, r2
   3f31a:	461d      	mov	r5, r3
   3f31c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   3f320:	d007      	beq.n	3f332 <ip_interface_getopt+0x24>
   3f322:	206d      	movs	r0, #109	; 0x6d
   3f324:	f7fe fbd0 	bl	3dac8 <nrf_modem_os_errno_set>
   3f328:	f04f 30ff 	mov.w	r0, #4294967295
   3f32c:	b002      	add	sp, #8
   3f32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f332:	f7f3 ff11 	bl	33158 <interface_socket_from_handle_get>
   3f336:	4602      	mov	r2, r0
   3f338:	b908      	cbnz	r0, 3f33e <ip_interface_getopt+0x30>
   3f33a:	2009      	movs	r0, #9
   3f33c:	e7f2      	b.n	3f324 <ip_interface_getopt+0x16>
   3f33e:	2e28      	cmp	r6, #40	; 0x28
   3f340:	dc0d      	bgt.n	3f35e <ip_interface_getopt+0x50>
   3f342:	2e1d      	cmp	r6, #29
   3f344:	dd0d      	ble.n	3f362 <ip_interface_getopt+0x54>
   3f346:	f1a6 031e 	sub.w	r3, r6, #30
   3f34a:	2b0a      	cmp	r3, #10
   3f34c:	d809      	bhi.n	3f362 <ip_interface_getopt+0x54>
   3f34e:	e8df f003 	tbb	[pc, r3]
   3f352:	1d13      	.short	0x1d13
   3f354:	08080824 	.word	0x08080824
   3f358:	08080808 	.word	0x08080808
   3f35c:	2b          	.byte	0x2b
   3f35d:	00          	.byte	0x00
   3f35e:	2e37      	cmp	r6, #55	; 0x37
   3f360:	d029      	beq.n	3f3b6 <ip_interface_getopt+0xa8>
   3f362:	462b      	mov	r3, r5
   3f364:	4632      	mov	r2, r6
   3f366:	2101      	movs	r1, #1
   3f368:	4620      	mov	r0, r4
   3f36a:	f8cd 8020 	str.w	r8, [sp, #32]
   3f36e:	b002      	add	sp, #8
   3f370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3f374:	f7f3 bf34 	b.w	331e0 <interface_socket_getopt>
   3f378:	4623      	mov	r3, r4
   3f37a:	f248 0101 	movw	r1, #32769	; 0x8001
   3f37e:	f44f 7000 	mov.w	r0, #512	; 0x200
   3f382:	e9cd 5800 	strd	r5, r8, [sp]
   3f386:	f7ff ff40 	bl	3f20a <getopt_check_and_send_int>
   3f38a:	e7cf      	b.n	3f32c <ip_interface_getopt+0x1e>
   3f38c:	4623      	mov	r3, r4
   3f38e:	f244 0110 	movw	r1, #16400	; 0x4010
   3f392:	2004      	movs	r0, #4
   3f394:	e9cd 5800 	strd	r5, r8, [sp]
   3f398:	e7f5      	b.n	3f386 <ip_interface_getopt+0x78>
   3f39a:	4623      	mov	r3, r4
   3f39c:	f246 0110 	movw	r1, #24592	; 0x6010
   3f3a0:	2006      	movs	r0, #6
   3f3a2:	e9cd 5800 	strd	r5, r8, [sp]
   3f3a6:	e7ee      	b.n	3f386 <ip_interface_getopt+0x78>
   3f3a8:	4623      	mov	r3, r4
   3f3aa:	f241 0104 	movw	r1, #4100	; 0x1004
   3f3ae:	2008      	movs	r0, #8
   3f3b0:	e9cd 5800 	strd	r5, r8, [sp]
   3f3b4:	e7e7      	b.n	3f386 <ip_interface_getopt+0x78>
   3f3b6:	4623      	mov	r3, r4
   3f3b8:	f245 0106 	movw	r1, #20486	; 0x5006
   3f3bc:	4638      	mov	r0, r7
   3f3be:	e9cd 5800 	strd	r5, r8, [sp]
   3f3c2:	e7e0      	b.n	3f386 <ip_interface_getopt+0x78>

0003f3c4 <attach_trigger_condition_verify>:
   3f3c4:	6903      	ldr	r3, [r0, #16]
   3f3c6:	2b01      	cmp	r3, #1
   3f3c8:	d105      	bne.n	3f3d6 <attach_trigger_condition_verify+0x12>
   3f3ca:	6800      	ldr	r0, [r0, #0]
   3f3cc:	b280      	uxth	r0, r0
   3f3ce:	1f43      	subs	r3, r0, #5
   3f3d0:	4258      	negs	r0, r3
   3f3d2:	4158      	adcs	r0, r3
   3f3d4:	4770      	bx	lr
   3f3d6:	2b02      	cmp	r3, #2
   3f3d8:	d109      	bne.n	3f3ee <attach_trigger_condition_verify+0x2a>
   3f3da:	6803      	ldr	r3, [r0, #0]
   3f3dc:	b29b      	uxth	r3, r3
   3f3de:	2b02      	cmp	r3, #2
   3f3e0:	d003      	beq.n	3f3ea <attach_trigger_condition_verify+0x26>
   3f3e2:	6803      	ldr	r3, [r0, #0]
   3f3e4:	b29b      	uxth	r3, r3
   3f3e6:	2b04      	cmp	r3, #4
   3f3e8:	d1ef      	bne.n	3f3ca <attach_trigger_condition_verify+0x6>
   3f3ea:	2001      	movs	r0, #1
   3f3ec:	4770      	bx	lr
   3f3ee:	2000      	movs	r0, #0
   3f3f0:	4770      	bx	lr

0003f3f2 <secure_client_socket>:
   3f3f2:	f04f 33ff 	mov.w	r3, #4294967295
   3f3f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3f3f8:	9301      	str	r3, [sp, #4]
   3f3fa:	680b      	ldr	r3, [r1, #0]
   3f3fc:	4606      	mov	r6, r0
   3f3fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3f402:	600b      	str	r3, [r1, #0]
   3f404:	680b      	ldr	r3, [r1, #0]
   3f406:	460c      	mov	r4, r1
   3f408:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3f40c:	600b      	str	r3, [r1, #0]
   3f40e:	680f      	ldr	r7, [r1, #0]
   3f410:	463a      	mov	r2, r7
   3f412:	f7f4 ffeb 	bl	343ec <secure_socket_attach_initiate>
   3f416:	4605      	mov	r5, r0
   3f418:	b950      	cbnz	r0, 3f430 <secure_client_socket+0x3e>
   3f41a:	220c      	movs	r2, #12
   3f41c:	4630      	mov	r0, r6
   3f41e:	4611      	mov	r1, r2
   3f420:	ab01      	add	r3, sp, #4
   3f422:	f7ff fd66 	bl	3eef2 <ip_interface_wait>
   3f426:	4605      	mov	r5, r0
   3f428:	b128      	cbz	r0, 3f436 <secure_client_socket+0x44>
   3f42a:	2877      	cmp	r0, #119	; 0x77
   3f42c:	d000      	beq.n	3f430 <secure_client_socket+0x3e>
   3f42e:	6027      	str	r7, [r4, #0]
   3f430:	4628      	mov	r0, r5
   3f432:	b003      	add	sp, #12
   3f434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3f436:	4630      	mov	r0, r6
   3f438:	f7f4 ffc6 	bl	343c8 <hostname_free>
   3f43c:	6823      	ldr	r3, [r4, #0]
   3f43e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   3f442:	6023      	str	r3, [r4, #0]
   3f444:	6823      	ldr	r3, [r4, #0]
   3f446:	0c1b      	lsrs	r3, r3, #16
   3f448:	041b      	lsls	r3, r3, #16
   3f44a:	f043 030c 	orr.w	r3, r3, #12
   3f44e:	6023      	str	r3, [r4, #0]
   3f450:	6823      	ldr	r3, [r4, #0]
   3f452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3f456:	6023      	str	r3, [r4, #0]
   3f458:	6823      	ldr	r3, [r4, #0]
   3f45a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3f45e:	6023      	str	r3, [r4, #0]
   3f460:	e7e6      	b.n	3f430 <secure_client_socket+0x3e>

0003f462 <tls_interface_close>:
   3f462:	b510      	push	{r4, lr}
   3f464:	4604      	mov	r4, r0
   3f466:	f7f3 fe77 	bl	33158 <interface_socket_from_handle_get>
   3f46a:	b138      	cbz	r0, 3f47c <tls_interface_close+0x1a>
   3f46c:	4620      	mov	r0, r4
   3f46e:	f7f4 ffab 	bl	343c8 <hostname_free>
   3f472:	4620      	mov	r0, r4
   3f474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f478:	f7f3 bff0 	b.w	3345c <ip_interface_close>
   3f47c:	2009      	movs	r0, #9
   3f47e:	f7fe fb23 	bl	3dac8 <nrf_modem_os_errno_set>
   3f482:	f04f 30ff 	mov.w	r0, #4294967295
   3f486:	bd10      	pop	{r4, pc}

0003f488 <null_handler_init>:
   3f488:	2000      	movs	r0, #0
   3f48a:	4770      	bx	lr

0003f48c <null_handler_put>:
   3f48c:	b510      	push	{r4, lr}
   3f48e:	460c      	mov	r4, r1
   3f490:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3f494:	4620      	mov	r0, r4
   3f496:	4798      	blx	r3
   3f498:	6860      	ldr	r0, [r4, #4]
   3f49a:	bd10      	pop	{r4, pc}

0003f49c <null_handler_get>:
   3f49c:	f04f 30ff 	mov.w	r0, #4294967295
   3f4a0:	4770      	bx	lr

0003f4a2 <null_handler_available>:
   3f4a2:	f04f 30ff 	mov.w	r0, #4294967295
   3f4a6:	4770      	bx	lr

0003f4a8 <null_handler_flush>:
   3f4a8:	2000      	movs	r0, #0
   3f4aa:	4770      	bx	lr

0003f4ac <null_handler_free>:
   3f4ac:	4770      	bx	lr

0003f4ae <stream_handler_free_packet>:
   3f4ae:	b530      	push	{r4, r5, lr}
   3f4b0:	4605      	mov	r5, r0
   3f4b2:	b085      	sub	sp, #20
   3f4b4:	68c0      	ldr	r0, [r0, #12]
   3f4b6:	f000 fb0e 	bl	3fad6 <linked_list_pop>
   3f4ba:	4604      	mov	r4, r0
   3f4bc:	b170      	cbz	r0, 3f4dc <stream_handler_free_packet+0x2e>
   3f4be:	6843      	ldr	r3, [r0, #4]
   3f4c0:	9300      	str	r3, [sp, #0]
   3f4c2:	6883      	ldr	r3, [r0, #8]
   3f4c4:	9301      	str	r3, [sp, #4]
   3f4c6:	6903      	ldr	r3, [r0, #16]
   3f4c8:	9302      	str	r3, [sp, #8]
   3f4ca:	68c3      	ldr	r3, [r0, #12]
   3f4cc:	4668      	mov	r0, sp
   3f4ce:	9303      	str	r3, [sp, #12]
   3f4d0:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3f4d4:	4798      	blx	r3
   3f4d6:	4620      	mov	r0, r4
   3f4d8:	f7eb fbb2 	bl	2ac40 <nrf_modem_os_free>
   3f4dc:	b005      	add	sp, #20
   3f4de:	bd30      	pop	{r4, r5, pc}

0003f4e0 <stream_handler_init>:
   3f4e0:	b510      	push	{r4, lr}
   3f4e2:	4604      	mov	r4, r0
   3f4e4:	200c      	movs	r0, #12
   3f4e6:	f7eb fba1 	bl	2ac2c <nrf_modem_os_alloc>
   3f4ea:	60e0      	str	r0, [r4, #12]
   3f4ec:	b128      	cbz	r0, 3f4fa <stream_handler_init+0x1a>
   3f4ee:	2300      	movs	r3, #0
   3f4f0:	6123      	str	r3, [r4, #16]
   3f4f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f4f6:	f000 bad2 	b.w	3fa9e <linked_list_init>
   3f4fa:	200c      	movs	r0, #12
   3f4fc:	bd10      	pop	{r4, pc}

0003f4fe <stream_handler_put>:
   3f4fe:	b570      	push	{r4, r5, r6, lr}
   3f500:	4606      	mov	r6, r0
   3f502:	2014      	movs	r0, #20
   3f504:	460d      	mov	r5, r1
   3f506:	f7eb fb91 	bl	2ac2c <nrf_modem_os_alloc>
   3f50a:	4604      	mov	r4, r0
   3f50c:	b178      	cbz	r0, 3f52e <stream_handler_put+0x30>
   3f50e:	682b      	ldr	r3, [r5, #0]
   3f510:	4601      	mov	r1, r0
   3f512:	6043      	str	r3, [r0, #4]
   3f514:	686b      	ldr	r3, [r5, #4]
   3f516:	6083      	str	r3, [r0, #8]
   3f518:	68eb      	ldr	r3, [r5, #12]
   3f51a:	60c3      	str	r3, [r0, #12]
   3f51c:	68ab      	ldr	r3, [r5, #8]
   3f51e:	6103      	str	r3, [r0, #16]
   3f520:	68f0      	ldr	r0, [r6, #12]
   3f522:	f000 fac5 	bl	3fab0 <linked_list_push>
   3f526:	b128      	cbz	r0, 3f534 <stream_handler_put+0x36>
   3f528:	4620      	mov	r0, r4
   3f52a:	f7eb fb89 	bl	2ac40 <nrf_modem_os_free>
   3f52e:	f04f 30ff 	mov.w	r0, #4294967295
   3f532:	e000      	b.n	3f536 <stream_handler_put+0x38>
   3f534:	6868      	ldr	r0, [r5, #4]
   3f536:	bd70      	pop	{r4, r5, r6, pc}

0003f538 <stream_handler_get>:
   3f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f53c:	4606      	mov	r6, r0
   3f53e:	b085      	sub	sp, #20
   3f540:	68c0      	ldr	r0, [r0, #12]
   3f542:	468a      	mov	sl, r1
   3f544:	4617      	mov	r7, r2
   3f546:	f000 fad0 	bl	3faea <linked_list_peek>
   3f54a:	4604      	mov	r4, r0
   3f54c:	2800      	cmp	r0, #0
   3f54e:	d055      	beq.n	3f5fc <stream_handler_get+0xc4>
   3f550:	f8da 0008 	ldr.w	r0, [sl, #8]
   3f554:	2800      	cmp	r0, #0
   3f556:	d049      	beq.n	3f5ec <stream_handler_get+0xb4>
   3f558:	6921      	ldr	r1, [r4, #16]
   3f55a:	2900      	cmp	r1, #0
   3f55c:	d046      	beq.n	3f5ec <stream_handler_get+0xb4>
   3f55e:	68e2      	ldr	r2, [r4, #12]
   3f560:	2a00      	cmp	r2, #0
   3f562:	d043      	beq.n	3f5ec <stream_handler_get+0xb4>
   3f564:	f8da 500c 	ldr.w	r5, [sl, #12]
   3f568:	42aa      	cmp	r2, r5
   3f56a:	bf28      	it	cs
   3f56c:	462a      	movcs	r2, r5
   3f56e:	f8ca 200c 	str.w	r2, [sl, #12]
   3f572:	f000 fcc5 	bl	3ff00 <memcpy>
   3f576:	2500      	movs	r5, #0
   3f578:	f8da 3004 	ldr.w	r3, [sl, #4]
   3f57c:	6931      	ldr	r1, [r6, #16]
   3f57e:	9301      	str	r3, [sp, #4]
   3f580:	f8da 3000 	ldr.w	r3, [sl]
   3f584:	9302      	str	r3, [sp, #8]
   3f586:	f007 0320 	and.w	r3, r7, #32
   3f58a:	9303      	str	r3, [sp, #12]
   3f58c:	f007 0708 	and.w	r7, r7, #8
   3f590:	9b01      	ldr	r3, [sp, #4]
   3f592:	42ab      	cmp	r3, r5
   3f594:	d924      	bls.n	3f5e0 <stream_handler_get+0xa8>
   3f596:	68a2      	ldr	r2, [r4, #8]
   3f598:	9b01      	ldr	r3, [sp, #4]
   3f59a:	eba2 0801 	sub.w	r8, r2, r1
   3f59e:	eba3 0b05 	sub.w	fp, r3, r5
   3f5a2:	f8da 2000 	ldr.w	r2, [sl]
   3f5a6:	45d8      	cmp	r8, fp
   3f5a8:	46c1      	mov	r9, r8
   3f5aa:	bf28      	it	cs
   3f5ac:	46d9      	movcs	r9, fp
   3f5ae:	b142      	cbz	r2, 3f5c2 <stream_handler_get+0x8a>
   3f5b0:	9b03      	ldr	r3, [sp, #12]
   3f5b2:	b933      	cbnz	r3, 3f5c2 <stream_handler_get+0x8a>
   3f5b4:	6860      	ldr	r0, [r4, #4]
   3f5b6:	9b02      	ldr	r3, [sp, #8]
   3f5b8:	4401      	add	r1, r0
   3f5ba:	464a      	mov	r2, r9
   3f5bc:	1958      	adds	r0, r3, r5
   3f5be:	f000 fc9f 	bl	3ff00 <memcpy>
   3f5c2:	4620      	mov	r0, r4
   3f5c4:	f000 fa98 	bl	3faf8 <linked_list_get_next>
   3f5c8:	4604      	mov	r4, r0
   3f5ca:	b92f      	cbnz	r7, 3f5d8 <stream_handler_get+0xa0>
   3f5cc:	45d8      	cmp	r8, fp
   3f5ce:	d811      	bhi.n	3f5f4 <stream_handler_get+0xbc>
   3f5d0:	4630      	mov	r0, r6
   3f5d2:	f7ff ff6c 	bl	3f4ae <stream_handler_free_packet>
   3f5d6:	6137      	str	r7, [r6, #16]
   3f5d8:	2100      	movs	r1, #0
   3f5da:	444d      	add	r5, r9
   3f5dc:	2c00      	cmp	r4, #0
   3f5de:	d1d7      	bne.n	3f590 <stream_handler_get+0x58>
   3f5e0:	4628      	mov	r0, r5
   3f5e2:	f8ca 5004 	str.w	r5, [sl, #4]
   3f5e6:	b005      	add	sp, #20
   3f5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f5ec:	2200      	movs	r2, #0
   3f5ee:	f8ca 200c 	str.w	r2, [sl, #12]
   3f5f2:	e7c0      	b.n	3f576 <stream_handler_get+0x3e>
   3f5f4:	6932      	ldr	r2, [r6, #16]
   3f5f6:	444a      	add	r2, r9
   3f5f8:	6132      	str	r2, [r6, #16]
   3f5fa:	e7ed      	b.n	3f5d8 <stream_handler_get+0xa0>
   3f5fc:	f04f 30ff 	mov.w	r0, #4294967295
   3f600:	e7f1      	b.n	3f5e6 <stream_handler_get+0xae>

0003f602 <stream_handler_available>:
   3f602:	b510      	push	{r4, lr}
   3f604:	4604      	mov	r4, r0
   3f606:	68c0      	ldr	r0, [r0, #12]
   3f608:	f000 fa6f 	bl	3faea <linked_list_peek>
   3f60c:	b150      	cbz	r0, 3f624 <stream_handler_available+0x22>
   3f60e:	6924      	ldr	r4, [r4, #16]
   3f610:	4264      	negs	r4, r4
   3f612:	6883      	ldr	r3, [r0, #8]
   3f614:	441c      	add	r4, r3
   3f616:	f000 fa6f 	bl	3faf8 <linked_list_get_next>
   3f61a:	2800      	cmp	r0, #0
   3f61c:	d1f9      	bne.n	3f612 <stream_handler_available+0x10>
   3f61e:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   3f622:	bd10      	pop	{r4, pc}
   3f624:	f04f 30ff 	mov.w	r0, #4294967295
   3f628:	e7fb      	b.n	3f622 <stream_handler_available+0x20>

0003f62a <stream_handler_flush>:
   3f62a:	68c3      	ldr	r3, [r0, #12]
   3f62c:	b510      	push	{r4, lr}
   3f62e:	4604      	mov	r4, r0
   3f630:	b923      	cbnz	r3, 3f63c <stream_handler_flush+0x12>
   3f632:	2016      	movs	r0, #22
   3f634:	e007      	b.n	3f646 <stream_handler_flush+0x1c>
   3f636:	4620      	mov	r0, r4
   3f638:	f7ff ff39 	bl	3f4ae <stream_handler_free_packet>
   3f63c:	68e0      	ldr	r0, [r4, #12]
   3f63e:	f000 fa59 	bl	3faf4 <linked_list_size_get>
   3f642:	2800      	cmp	r0, #0
   3f644:	d1f7      	bne.n	3f636 <stream_handler_flush+0xc>
   3f646:	bd10      	pop	{r4, pc}

0003f648 <stream_handler_free>:
   3f648:	68c3      	ldr	r3, [r0, #12]
   3f64a:	b510      	push	{r4, lr}
   3f64c:	4604      	mov	r4, r0
   3f64e:	b133      	cbz	r3, 3f65e <stream_handler_free+0x16>
   3f650:	f7ff ffeb 	bl	3f62a <stream_handler_flush>
   3f654:	68e0      	ldr	r0, [r4, #12]
   3f656:	f7eb faf3 	bl	2ac40 <nrf_modem_os_free>
   3f65a:	2300      	movs	r3, #0
   3f65c:	60e3      	str	r3, [r4, #12]
   3f65e:	bd10      	pop	{r4, pc}

0003f660 <datagram_handler_free_packet>:
   3f660:	b530      	push	{r4, r5, lr}
   3f662:	4605      	mov	r5, r0
   3f664:	b085      	sub	sp, #20
   3f666:	68c0      	ldr	r0, [r0, #12]
   3f668:	f000 fa35 	bl	3fad6 <linked_list_pop>
   3f66c:	4604      	mov	r4, r0
   3f66e:	b170      	cbz	r0, 3f68e <datagram_handler_free_packet+0x2e>
   3f670:	6843      	ldr	r3, [r0, #4]
   3f672:	9300      	str	r3, [sp, #0]
   3f674:	6883      	ldr	r3, [r0, #8]
   3f676:	9301      	str	r3, [sp, #4]
   3f678:	6903      	ldr	r3, [r0, #16]
   3f67a:	9302      	str	r3, [sp, #8]
   3f67c:	68c3      	ldr	r3, [r0, #12]
   3f67e:	4668      	mov	r0, sp
   3f680:	9303      	str	r3, [sp, #12]
   3f682:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3f686:	4798      	blx	r3
   3f688:	4620      	mov	r0, r4
   3f68a:	f7eb fad9 	bl	2ac40 <nrf_modem_os_free>
   3f68e:	b005      	add	sp, #20
   3f690:	bd30      	pop	{r4, r5, pc}

0003f692 <datagram_handler_init>:
   3f692:	b510      	push	{r4, lr}
   3f694:	4604      	mov	r4, r0
   3f696:	200c      	movs	r0, #12
   3f698:	f7eb fac8 	bl	2ac2c <nrf_modem_os_alloc>
   3f69c:	60e0      	str	r0, [r4, #12]
   3f69e:	b118      	cbz	r0, 3f6a8 <datagram_handler_init+0x16>
   3f6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f6a4:	f000 b9fb 	b.w	3fa9e <linked_list_init>
   3f6a8:	200c      	movs	r0, #12
   3f6aa:	bd10      	pop	{r4, pc}

0003f6ac <datagram_handler_put>:
   3f6ac:	b570      	push	{r4, r5, r6, lr}
   3f6ae:	4606      	mov	r6, r0
   3f6b0:	2014      	movs	r0, #20
   3f6b2:	460d      	mov	r5, r1
   3f6b4:	f7eb faba 	bl	2ac2c <nrf_modem_os_alloc>
   3f6b8:	4604      	mov	r4, r0
   3f6ba:	b178      	cbz	r0, 3f6dc <datagram_handler_put+0x30>
   3f6bc:	682b      	ldr	r3, [r5, #0]
   3f6be:	4601      	mov	r1, r0
   3f6c0:	6043      	str	r3, [r0, #4]
   3f6c2:	686b      	ldr	r3, [r5, #4]
   3f6c4:	6083      	str	r3, [r0, #8]
   3f6c6:	68eb      	ldr	r3, [r5, #12]
   3f6c8:	60c3      	str	r3, [r0, #12]
   3f6ca:	68ab      	ldr	r3, [r5, #8]
   3f6cc:	6103      	str	r3, [r0, #16]
   3f6ce:	68f0      	ldr	r0, [r6, #12]
   3f6d0:	f000 f9ee 	bl	3fab0 <linked_list_push>
   3f6d4:	b128      	cbz	r0, 3f6e2 <datagram_handler_put+0x36>
   3f6d6:	4620      	mov	r0, r4
   3f6d8:	f7eb fab2 	bl	2ac40 <nrf_modem_os_free>
   3f6dc:	f04f 30ff 	mov.w	r0, #4294967295
   3f6e0:	e000      	b.n	3f6e4 <datagram_handler_put+0x38>
   3f6e2:	6868      	ldr	r0, [r5, #4]
   3f6e4:	bd70      	pop	{r4, r5, r6, pc}

0003f6e6 <datagram_handler_get>:
   3f6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f6e8:	4607      	mov	r7, r0
   3f6ea:	68c0      	ldr	r0, [r0, #12]
   3f6ec:	460c      	mov	r4, r1
   3f6ee:	4616      	mov	r6, r2
   3f6f0:	f000 f9fb 	bl	3faea <linked_list_peek>
   3f6f4:	4605      	mov	r5, r0
   3f6f6:	b328      	cbz	r0, 3f744 <datagram_handler_get+0x5e>
   3f6f8:	6882      	ldr	r2, [r0, #8]
   3f6fa:	6863      	ldr	r3, [r4, #4]
   3f6fc:	6820      	ldr	r0, [r4, #0]
   3f6fe:	429a      	cmp	r2, r3
   3f700:	bf28      	it	cs
   3f702:	461a      	movcs	r2, r3
   3f704:	6062      	str	r2, [r4, #4]
   3f706:	b110      	cbz	r0, 3f70e <datagram_handler_get+0x28>
   3f708:	6869      	ldr	r1, [r5, #4]
   3f70a:	f000 fbf9 	bl	3ff00 <memcpy>
   3f70e:	68a0      	ldr	r0, [r4, #8]
   3f710:	b1a8      	cbz	r0, 3f73e <datagram_handler_get+0x58>
   3f712:	6929      	ldr	r1, [r5, #16]
   3f714:	b199      	cbz	r1, 3f73e <datagram_handler_get+0x58>
   3f716:	68ea      	ldr	r2, [r5, #12]
   3f718:	b18a      	cbz	r2, 3f73e <datagram_handler_get+0x58>
   3f71a:	68e3      	ldr	r3, [r4, #12]
   3f71c:	429a      	cmp	r2, r3
   3f71e:	bf28      	it	cs
   3f720:	461a      	movcs	r2, r3
   3f722:	60e2      	str	r2, [r4, #12]
   3f724:	f000 fbec 	bl	3ff00 <memcpy>
   3f728:	0732      	lsls	r2, r6, #28
   3f72a:	68ad      	ldr	r5, [r5, #8]
   3f72c:	d402      	bmi.n	3f734 <datagram_handler_get+0x4e>
   3f72e:	4638      	mov	r0, r7
   3f730:	f7ff ff96 	bl	3f660 <datagram_handler_free_packet>
   3f734:	06b3      	lsls	r3, r6, #26
   3f736:	bf4c      	ite	mi
   3f738:	4628      	movmi	r0, r5
   3f73a:	6860      	ldrpl	r0, [r4, #4]
   3f73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f73e:	2300      	movs	r3, #0
   3f740:	60e3      	str	r3, [r4, #12]
   3f742:	e7f1      	b.n	3f728 <datagram_handler_get+0x42>
   3f744:	f04f 30ff 	mov.w	r0, #4294967295
   3f748:	e7f8      	b.n	3f73c <datagram_handler_get+0x56>

0003f74a <datagram_handler_available>:
   3f74a:	b508      	push	{r3, lr}
   3f74c:	68c0      	ldr	r0, [r0, #12]
   3f74e:	f000 f9cc 	bl	3faea <linked_list_peek>
   3f752:	b108      	cbz	r0, 3f758 <datagram_handler_available+0xe>
   3f754:	6880      	ldr	r0, [r0, #8]
   3f756:	bd08      	pop	{r3, pc}
   3f758:	f04f 30ff 	mov.w	r0, #4294967295
   3f75c:	e7fb      	b.n	3f756 <datagram_handler_available+0xc>

0003f75e <datagram_handler_flush>:
   3f75e:	68c3      	ldr	r3, [r0, #12]
   3f760:	b510      	push	{r4, lr}
   3f762:	4604      	mov	r4, r0
   3f764:	b923      	cbnz	r3, 3f770 <datagram_handler_flush+0x12>
   3f766:	2016      	movs	r0, #22
   3f768:	e007      	b.n	3f77a <datagram_handler_flush+0x1c>
   3f76a:	4620      	mov	r0, r4
   3f76c:	f7ff ff78 	bl	3f660 <datagram_handler_free_packet>
   3f770:	68e0      	ldr	r0, [r4, #12]
   3f772:	f000 f9bf 	bl	3faf4 <linked_list_size_get>
   3f776:	2800      	cmp	r0, #0
   3f778:	d1f7      	bne.n	3f76a <datagram_handler_flush+0xc>
   3f77a:	bd10      	pop	{r4, pc}

0003f77c <datagram_handler_free>:
   3f77c:	68c3      	ldr	r3, [r0, #12]
   3f77e:	b510      	push	{r4, lr}
   3f780:	4604      	mov	r4, r0
   3f782:	b133      	cbz	r3, 3f792 <datagram_handler_free+0x16>
   3f784:	f7ff ffeb 	bl	3f75e <datagram_handler_flush>
   3f788:	68e0      	ldr	r0, [r4, #12]
   3f78a:	f7eb fa59 	bl	2ac40 <nrf_modem_os_free>
   3f78e:	2300      	movs	r3, #0
   3f790:	60e3      	str	r3, [r4, #12]
   3f792:	bd10      	pop	{r4, pc}

0003f794 <packet_handler_delete>:
   3f794:	b510      	push	{r4, lr}
   3f796:	4604      	mov	r4, r0
   3f798:	6803      	ldr	r3, [r0, #0]
   3f79a:	691b      	ldr	r3, [r3, #16]
   3f79c:	4798      	blx	r3
   3f79e:	6823      	ldr	r3, [r4, #0]
   3f7a0:	4620      	mov	r0, r4
   3f7a2:	695b      	ldr	r3, [r3, #20]
   3f7a4:	4798      	blx	r3
   3f7a6:	4620      	mov	r0, r4
   3f7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f7ac:	f7eb ba48 	b.w	2ac40 <nrf_modem_os_free>

0003f7b0 <nrf_modem_recoverable_error_handler>:
   3f7b0:	4770      	bx	lr

0003f7b2 <nrf_modem_platform_error_handler>:
   3f7b2:	b508      	push	{r3, lr}
   3f7b4:	f7ff fffc 	bl	3f7b0 <nrf_modem_recoverable_error_handler>
   3f7b8:	bd08      	pop	{r3, pc}

0003f7ba <unimplemented_method>:
   3f7ba:	b40f      	push	{r0, r1, r2, r3}
   3f7bc:	b508      	push	{r3, lr}
   3f7be:	205f      	movs	r0, #95	; 0x5f
   3f7c0:	f7fe f982 	bl	3dac8 <nrf_modem_os_errno_set>
   3f7c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3f7c8:	f04f 30ff 	mov.w	r0, #4294967295
   3f7cc:	b004      	add	sp, #16
   3f7ce:	4770      	bx	lr

0003f7d0 <rpc_transport_ipc_fault_handler>:
   3f7d0:	f7ff bfef 	b.w	3f7b2 <nrf_modem_platform_error_handler>

0003f7d4 <nrf_modem_platform_init>:
   3f7d4:	b513      	push	{r0, r1, r4, lr}
   3f7d6:	4604      	mov	r4, r0
   3f7d8:	f7eb fa4c 	bl	2ac74 <nrf_modem_os_init>
   3f7dc:	6a23      	ldr	r3, [r4, #32]
   3f7de:	4668      	mov	r0, sp
   3f7e0:	9400      	str	r4, [sp, #0]
   3f7e2:	f88d 3004 	strb.w	r3, [sp, #4]
   3f7e6:	f7f3 fa91 	bl	32d0c <rpc_transport_ipc_init>
   3f7ea:	4604      	mov	r4, r0
   3f7ec:	b948      	cbnz	r0, 3f802 <nrf_modem_platform_init+0x2e>
   3f7ee:	f7f3 fbe1 	bl	32fb4 <interface_init>
   3f7f2:	f7f5 fa9f 	bl	34d34 <nrf_modem_at_init>
   3f7f6:	4604      	mov	r4, r0
   3f7f8:	b918      	cbnz	r0, 3f802 <nrf_modem_platform_init+0x2e>
   3f7fa:	f7f3 fd9b 	bl	33334 <ip_interface_init>
   3f7fe:	f7f4 fe47 	bl	34490 <tls_interface_init>
   3f802:	4620      	mov	r0, r4
   3f804:	b002      	add	sp, #8
   3f806:	bd10      	pop	{r4, pc}

0003f808 <nrf_modem_platform_fd_method_table_get>:
   3f808:	b510      	push	{r4, lr}
   3f80a:	f7f3 fca5 	bl	33158 <interface_socket_from_handle_get>
   3f80e:	4604      	mov	r4, r0
   3f810:	b130      	cbz	r0, 3f820 <nrf_modem_platform_fd_method_table_get+0x18>
   3f812:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   3f816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f81a:	68c0      	ldr	r0, [r0, #12]
   3f81c:	f7f5 bf06 	b.w	3562c <nrf_modem_platform_af_method_table_get>
   3f820:	2009      	movs	r0, #9
   3f822:	f7fe f951 	bl	3dac8 <nrf_modem_os_errno_set>
   3f826:	4620      	mov	r0, r4
   3f828:	bd10      	pop	{r4, pc}

0003f82a <internal_poll>:
   3f82a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3f82e:	2600      	movs	r6, #0
   3f830:	4688      	mov	r8, r1
   3f832:	4604      	mov	r4, r0
   3f834:	4637      	mov	r7, r6
   3f836:	4546      	cmp	r6, r8
   3f838:	d103      	bne.n	3f842 <internal_poll+0x18>
   3f83a:	4638      	mov	r0, r7
   3f83c:	b002      	add	sp, #8
   3f83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3f842:	88a5      	ldrh	r5, [r4, #4]
   3f844:	6820      	ldr	r0, [r4, #0]
   3f846:	a901      	add	r1, sp, #4
   3f848:	f7ff fad4 	bl	3edf4 <interface_socket_event_get>
   3f84c:	f005 0503 	and.w	r5, r5, #3
   3f850:	9b01      	ldr	r3, [sp, #4]
   3f852:	f045 051c 	orr.w	r5, r5, #28
   3f856:	401d      	ands	r5, r3
   3f858:	6820      	ldr	r0, [r4, #0]
   3f85a:	80e5      	strh	r5, [r4, #6]
   3f85c:	f7f3 fc7c 	bl	33158 <interface_socket_from_handle_get>
   3f860:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   3f864:	b168      	cbz	r0, 3f882 <internal_poll+0x58>
   3f866:	071a      	lsls	r2, r3, #28
   3f868:	d50b      	bpl.n	3f882 <internal_poll+0x58>
   3f86a:	6942      	ldr	r2, [r0, #20]
   3f86c:	2a01      	cmp	r2, #1
   3f86e:	d003      	beq.n	3f878 <internal_poll+0x4e>
   3f870:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   3f874:	2a01      	cmp	r2, #1
   3f876:	d802      	bhi.n	3f87e <internal_poll+0x54>
   3f878:	f043 0301 	orr.w	r3, r3, #1
   3f87c:	80e3      	strh	r3, [r4, #6]
   3f87e:	3701      	adds	r7, #1
   3f880:	e001      	b.n	3f886 <internal_poll+0x5c>
   3f882:	2b00      	cmp	r3, #0
   3f884:	d1fb      	bne.n	3f87e <internal_poll+0x54>
   3f886:	3601      	adds	r6, #1
   3f888:	3408      	adds	r4, #8
   3f88a:	e7d4      	b.n	3f836 <internal_poll+0xc>

0003f88c <nrf_modem_platform_getaddrinfo>:
   3f88c:	f7f4 b9fe 	b.w	33c8c <ip_interface_getaddrinfo>

0003f890 <nrf_modem_platform_freeaddrinfo>:
   3f890:	f7f4 bafa 	b.w	33e88 <ip_interface_freeaddrinfo>

0003f894 <nrf_modem_platform_poll>:
   3f894:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3f896:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   3f89a:	2908      	cmp	r1, #8
   3f89c:	4605      	mov	r5, r0
   3f89e:	460e      	mov	r6, r1
   3f8a0:	9201      	str	r2, [sp, #4]
   3f8a2:	d906      	bls.n	3f8b2 <nrf_modem_platform_poll+0x1e>
   3f8a4:	2016      	movs	r0, #22
   3f8a6:	f7fe f90f 	bl	3dac8 <nrf_modem_os_errno_set>
   3f8aa:	f04f 30ff 	mov.w	r0, #4294967295
   3f8ae:	b002      	add	sp, #8
   3f8b0:	bd70      	pop	{r4, r5, r6, pc}
   3f8b2:	b910      	cbnz	r0, 3f8ba <nrf_modem_platform_poll+0x26>
   3f8b4:	b109      	cbz	r1, 3f8ba <nrf_modem_platform_poll+0x26>
   3f8b6:	200e      	movs	r0, #14
   3f8b8:	e7f5      	b.n	3f8a6 <nrf_modem_platform_poll+0x12>
   3f8ba:	4631      	mov	r1, r6
   3f8bc:	4628      	mov	r0, r5
   3f8be:	f7ff ffb4 	bl	3f82a <internal_poll>
   3f8c2:	2400      	movs	r4, #0
   3f8c4:	2800      	cmp	r0, #0
   3f8c6:	d1f2      	bne.n	3f8ae <nrf_modem_platform_poll+0x1a>
   3f8c8:	2c00      	cmp	r4, #0
   3f8ca:	d1f0      	bne.n	3f8ae <nrf_modem_platform_poll+0x1a>
   3f8cc:	4628      	mov	r0, r5
   3f8ce:	a901      	add	r1, sp, #4
   3f8d0:	f7fe f862 	bl	3d998 <nrf_modem_os_timedwait>
   3f8d4:	4604      	mov	r4, r0
   3f8d6:	b118      	cbz	r0, 3f8e0 <nrf_modem_platform_poll+0x4c>
   3f8d8:	2874      	cmp	r0, #116	; 0x74
   3f8da:	d001      	beq.n	3f8e0 <nrf_modem_platform_poll+0x4c>
   3f8dc:	200b      	movs	r0, #11
   3f8de:	e7e2      	b.n	3f8a6 <nrf_modem_platform_poll+0x12>
   3f8e0:	4631      	mov	r1, r6
   3f8e2:	4628      	mov	r0, r5
   3f8e4:	f7ff ffa1 	bl	3f82a <internal_poll>
   3f8e8:	e7ec      	b.n	3f8c4 <nrf_modem_platform_poll+0x30>

0003f8ea <nrf_modem_platform_fcntl>:
   3f8ea:	f7f3 bcc7 	b.w	3327c <interface_socket_fcntl>

0003f8ee <nrf_socket>:
   3f8ee:	b570      	push	{r4, r5, r6, lr}
   3f8f0:	4604      	mov	r4, r0
   3f8f2:	460d      	mov	r5, r1
   3f8f4:	4616      	mov	r6, r2
   3f8f6:	f7f5 fe99 	bl	3562c <nrf_modem_platform_af_method_table_get>
   3f8fa:	b130      	cbz	r0, 3f90a <nrf_socket+0x1c>
   3f8fc:	4632      	mov	r2, r6
   3f8fe:	4629      	mov	r1, r5
   3f900:	6803      	ldr	r3, [r0, #0]
   3f902:	4620      	mov	r0, r4
   3f904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3f908:	4718      	bx	r3
   3f90a:	f04f 30ff 	mov.w	r0, #4294967295
   3f90e:	bd70      	pop	{r4, r5, r6, pc}

0003f910 <nrf_close>:
   3f910:	b510      	push	{r4, lr}
   3f912:	4604      	mov	r4, r0
   3f914:	f7ff ff78 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3f918:	b120      	cbz	r0, 3f924 <nrf_close+0x14>
   3f91a:	6843      	ldr	r3, [r0, #4]
   3f91c:	4620      	mov	r0, r4
   3f91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3f922:	4718      	bx	r3
   3f924:	f04f 30ff 	mov.w	r0, #4294967295
   3f928:	bd10      	pop	{r4, pc}

0003f92a <nrf_sendto>:
   3f92a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f92e:	4604      	mov	r4, r0
   3f930:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3f934:	460d      	mov	r5, r1
   3f936:	4616      	mov	r6, r2
   3f938:	461f      	mov	r7, r3
   3f93a:	f7ff ff65 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3f93e:	b158      	cbz	r0, 3f958 <nrf_sendto+0x2e>
   3f940:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3f944:	f8d0 e008 	ldr.w	lr, [r0, #8]
   3f948:	463b      	mov	r3, r7
   3f94a:	4632      	mov	r2, r6
   3f94c:	4629      	mov	r1, r5
   3f94e:	4620      	mov	r0, r4
   3f950:	46f4      	mov	ip, lr
   3f952:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f956:	4760      	bx	ip
   3f958:	f04f 30ff 	mov.w	r0, #4294967295
   3f95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003f960 <nrf_recvfrom>:
   3f960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f964:	4604      	mov	r4, r0
   3f966:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3f96a:	460d      	mov	r5, r1
   3f96c:	4616      	mov	r6, r2
   3f96e:	461f      	mov	r7, r3
   3f970:	f7ff ff4a 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3f974:	b158      	cbz	r0, 3f98e <nrf_recvfrom+0x2e>
   3f976:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3f97a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   3f97e:	463b      	mov	r3, r7
   3f980:	4632      	mov	r2, r6
   3f982:	4629      	mov	r1, r5
   3f984:	4620      	mov	r0, r4
   3f986:	46f4      	mov	ip, lr
   3f988:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f98c:	4760      	bx	ip
   3f98e:	f04f 30ff 	mov.w	r0, #4294967295
   3f992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003f996 <nrf_connect>:
   3f996:	b570      	push	{r4, r5, r6, lr}
   3f998:	4604      	mov	r4, r0
   3f99a:	460d      	mov	r5, r1
   3f99c:	4616      	mov	r6, r2
   3f99e:	f7ff ff33 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3f9a2:	b130      	cbz	r0, 3f9b2 <nrf_connect+0x1c>
   3f9a4:	4632      	mov	r2, r6
   3f9a6:	4629      	mov	r1, r5
   3f9a8:	6943      	ldr	r3, [r0, #20]
   3f9aa:	4620      	mov	r0, r4
   3f9ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3f9b0:	4718      	bx	r3
   3f9b2:	f04f 30ff 	mov.w	r0, #4294967295
   3f9b6:	bd70      	pop	{r4, r5, r6, pc}

0003f9b8 <nrf_listen>:
   3f9b8:	b570      	push	{r4, r5, r6, lr}
   3f9ba:	4604      	mov	r4, r0
   3f9bc:	460d      	mov	r5, r1
   3f9be:	f7ff ff23 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3f9c2:	b128      	cbz	r0, 3f9d0 <nrf_listen+0x18>
   3f9c4:	4629      	mov	r1, r5
   3f9c6:	6983      	ldr	r3, [r0, #24]
   3f9c8:	4620      	mov	r0, r4
   3f9ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3f9ce:	4718      	bx	r3
   3f9d0:	f04f 30ff 	mov.w	r0, #4294967295
   3f9d4:	bd70      	pop	{r4, r5, r6, pc}

0003f9d6 <nrf_accept>:
   3f9d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f9da:	4604      	mov	r4, r0
   3f9dc:	460d      	mov	r5, r1
   3f9de:	4616      	mov	r6, r2
   3f9e0:	f7ff ff12 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3f9e4:	b140      	cbz	r0, 3f9f8 <nrf_accept+0x22>
   3f9e6:	69c7      	ldr	r7, [r0, #28]
   3f9e8:	4632      	mov	r2, r6
   3f9ea:	4629      	mov	r1, r5
   3f9ec:	4620      	mov	r0, r4
   3f9ee:	46bc      	mov	ip, r7
   3f9f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3f9f4:	2300      	movs	r3, #0
   3f9f6:	4760      	bx	ip
   3f9f8:	f04f 30ff 	mov.w	r0, #4294967295
   3f9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003fa00 <nrf_bind>:
   3fa00:	b570      	push	{r4, r5, r6, lr}
   3fa02:	4604      	mov	r4, r0
   3fa04:	460d      	mov	r5, r1
   3fa06:	4616      	mov	r6, r2
   3fa08:	f7ff fefe 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3fa0c:	b130      	cbz	r0, 3fa1c <nrf_bind+0x1c>
   3fa0e:	4632      	mov	r2, r6
   3fa10:	4629      	mov	r1, r5
   3fa12:	6903      	ldr	r3, [r0, #16]
   3fa14:	4620      	mov	r0, r4
   3fa16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3fa1a:	4718      	bx	r3
   3fa1c:	f04f 30ff 	mov.w	r0, #4294967295
   3fa20:	bd70      	pop	{r4, r5, r6, pc}

0003fa22 <nrf_setsockopt>:
   3fa22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fa26:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3fa2a:	4604      	mov	r4, r0
   3fa2c:	460d      	mov	r5, r1
   3fa2e:	4616      	mov	r6, r2
   3fa30:	461f      	mov	r7, r3
   3fa32:	f7ff fee9 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3fa36:	b158      	cbz	r0, 3fa50 <nrf_setsockopt+0x2e>
   3fa38:	f8cd 8018 	str.w	r8, [sp, #24]
   3fa3c:	f8d0 e020 	ldr.w	lr, [r0, #32]
   3fa40:	463b      	mov	r3, r7
   3fa42:	4632      	mov	r2, r6
   3fa44:	4629      	mov	r1, r5
   3fa46:	4620      	mov	r0, r4
   3fa48:	46f4      	mov	ip, lr
   3fa4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3fa4e:	4760      	bx	ip
   3fa50:	f04f 30ff 	mov.w	r0, #4294967295
   3fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003fa58 <nrf_getsockopt>:
   3fa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3fa5c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3fa60:	4604      	mov	r4, r0
   3fa62:	460d      	mov	r5, r1
   3fa64:	4616      	mov	r6, r2
   3fa66:	461f      	mov	r7, r3
   3fa68:	f7ff fece 	bl	3f808 <nrf_modem_platform_fd_method_table_get>
   3fa6c:	b158      	cbz	r0, 3fa86 <nrf_getsockopt+0x2e>
   3fa6e:	f8cd 8018 	str.w	r8, [sp, #24]
   3fa72:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3fa76:	463b      	mov	r3, r7
   3fa78:	4632      	mov	r2, r6
   3fa7a:	4629      	mov	r1, r5
   3fa7c:	4620      	mov	r0, r4
   3fa7e:	46f4      	mov	ip, lr
   3fa80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3fa84:	4760      	bx	ip
   3fa86:	f04f 30ff 	mov.w	r0, #4294967295
   3fa8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003fa8e <nrf_getaddrinfo>:
   3fa8e:	f7ff befd 	b.w	3f88c <nrf_modem_platform_getaddrinfo>

0003fa92 <nrf_freeaddrinfo>:
   3fa92:	f7ff befd 	b.w	3f890 <nrf_modem_platform_freeaddrinfo>

0003fa96 <nrf_poll>:
   3fa96:	f7ff befd 	b.w	3f894 <nrf_modem_platform_poll>

0003fa9a <nrf_fcntl>:
   3fa9a:	f7ff bf26 	b.w	3f8ea <nrf_modem_platform_fcntl>

0003fa9e <linked_list_init>:
   3fa9e:	4603      	mov	r3, r0
   3faa0:	b120      	cbz	r0, 3faac <linked_list_init+0xe>
   3faa2:	2000      	movs	r0, #0
   3faa4:	e9c3 0001 	strd	r0, r0, [r3, #4]
   3faa8:	6018      	str	r0, [r3, #0]
   3faaa:	4770      	bx	lr
   3faac:	2016      	movs	r0, #22
   3faae:	4770      	bx	lr

0003fab0 <linked_list_push>:
   3fab0:	6803      	ldr	r3, [r0, #0]
   3fab2:	3301      	adds	r3, #1
   3fab4:	d00d      	beq.n	3fad2 <linked_list_push+0x22>
   3fab6:	2300      	movs	r3, #0
   3fab8:	600b      	str	r3, [r1, #0]
   3faba:	6803      	ldr	r3, [r0, #0]
   3fabc:	b933      	cbnz	r3, 3facc <linked_list_push+0x1c>
   3fabe:	6041      	str	r1, [r0, #4]
   3fac0:	6803      	ldr	r3, [r0, #0]
   3fac2:	6081      	str	r1, [r0, #8]
   3fac4:	3301      	adds	r3, #1
   3fac6:	6003      	str	r3, [r0, #0]
   3fac8:	2000      	movs	r0, #0
   3faca:	4770      	bx	lr
   3facc:	6883      	ldr	r3, [r0, #8]
   3face:	6019      	str	r1, [r3, #0]
   3fad0:	e7f6      	b.n	3fac0 <linked_list_push+0x10>
   3fad2:	200c      	movs	r0, #12
   3fad4:	4770      	bx	lr

0003fad6 <linked_list_pop>:
   3fad6:	4603      	mov	r3, r0
   3fad8:	6800      	ldr	r0, [r0, #0]
   3fada:	b128      	cbz	r0, 3fae8 <linked_list_pop+0x12>
   3fadc:	6858      	ldr	r0, [r3, #4]
   3fade:	6802      	ldr	r2, [r0, #0]
   3fae0:	605a      	str	r2, [r3, #4]
   3fae2:	681a      	ldr	r2, [r3, #0]
   3fae4:	3a01      	subs	r2, #1
   3fae6:	601a      	str	r2, [r3, #0]
   3fae8:	4770      	bx	lr

0003faea <linked_list_peek>:
   3faea:	4603      	mov	r3, r0
   3faec:	6800      	ldr	r0, [r0, #0]
   3faee:	b100      	cbz	r0, 3faf2 <linked_list_peek+0x8>
   3faf0:	6858      	ldr	r0, [r3, #4]
   3faf2:	4770      	bx	lr

0003faf4 <linked_list_size_get>:
   3faf4:	6800      	ldr	r0, [r0, #0]
   3faf6:	4770      	bx	lr

0003faf8 <linked_list_get_next>:
   3faf8:	6800      	ldr	r0, [r0, #0]
   3fafa:	4770      	bx	lr

0003fafc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3fafc:	b148      	cbz	r0, 3fb12 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3fafe:	68c3      	ldr	r3, [r0, #12]
   3fb00:	8818      	ldrh	r0, [r3, #0]
   3fb02:	f3c0 0008 	ubfx	r0, r0, #0, #9
   3fb06:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   3fb0a:	bf14      	ite	ne
   3fb0c:	2000      	movne	r0, #0
   3fb0e:	2001      	moveq	r0, #1
   3fb10:	4770      	bx	lr
		return false;
   3fb12:	2000      	movs	r0, #0
}
   3fb14:	4770      	bx	lr

0003fb16 <k_heap_init>:
{
   3fb16:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   3fb18:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   3fb1c:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   3fb1e:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   3fb20:	f7e5 fd6c 	bl	255fc <sys_heap_init>
}
   3fb24:	bd10      	pop	{r4, pc}

0003fb26 <k_heap_alloc>:
{
   3fb26:	b500      	push	{lr}
   3fb28:	b083      	sub	sp, #12
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   3fb2a:	e9cd 2300 	strd	r2, r3, [sp]
   3fb2e:	460a      	mov	r2, r1
   3fb30:	2104      	movs	r1, #4
   3fb32:	f7f5 ffdd 	bl	35af0 <k_heap_aligned_alloc>
}
   3fb36:	b003      	add	sp, #12
   3fb38:	f85d fb04 	ldr.w	pc, [sp], #4

0003fb3c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3fb3c:	6902      	ldr	r2, [r0, #16]
   3fb3e:	6943      	ldr	r3, [r0, #20]
   3fb40:	431a      	orrs	r2, r3
   3fb42:	f012 0203 	ands.w	r2, r2, #3
   3fb46:	d10d      	bne.n	3fb64 <create_free_list+0x28>
	slab->free_list = NULL;
   3fb48:	2100      	movs	r1, #0
   3fb4a:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3fb4c:	e005      	b.n	3fb5a <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   3fb4e:	6981      	ldr	r1, [r0, #24]
   3fb50:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   3fb52:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   3fb54:	6901      	ldr	r1, [r0, #16]
   3fb56:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   3fb58:	3201      	adds	r2, #1
   3fb5a:	68c1      	ldr	r1, [r0, #12]
   3fb5c:	4291      	cmp	r1, r2
   3fb5e:	d8f6      	bhi.n	3fb4e <create_free_list+0x12>
	return 0;
   3fb60:	2000      	movs	r0, #0
   3fb62:	4770      	bx	lr
		return -EINVAL;
   3fb64:	f06f 0015 	mvn.w	r0, #21
}
   3fb68:	4770      	bx	lr

0003fb6a <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3fb6a:	3207      	adds	r2, #7
   3fb6c:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   3fb70:	6681      	str	r1, [r0, #104]	; 0x68
	new_thread->stack_info.size = stack_buf_size;
   3fb72:	66c2      	str	r2, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   3fb74:	2300      	movs	r3, #0
   3fb76:	6703      	str	r3, [r0, #112]	; 0x70
}
   3fb78:	1888      	adds	r0, r1, r2
   3fb7a:	4770      	bx	lr

0003fb7c <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3fb7c:	f3ef 8005 	mrs	r0, IPSR
}
   3fb80:	3800      	subs	r0, #0
   3fb82:	bf18      	it	ne
   3fb84:	2001      	movne	r0, #1
   3fb86:	4770      	bx	lr

0003fb88 <z_impl_k_thread_name_set>:
}
   3fb88:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3fb8c:	4770      	bx	lr

0003fb8e <k_thread_name_get>:
}
   3fb8e:	2000      	movs	r0, #0
   3fb90:	4770      	bx	lr

0003fb92 <z_impl_k_thread_start>:
{
   3fb92:	b508      	push	{r3, lr}
	z_sched_start(thread);
   3fb94:	f7f7 fd52 	bl	3763c <z_sched_start>
}
   3fb98:	bd08      	pop	{r3, pc}

0003fb9a <z_init_thread_base>:
{
   3fb9a:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   3fb9c:	2400      	movs	r4, #0
   3fb9e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   3fba0:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3fba2:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   3fba4:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   3fba6:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   3fba8:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   3fbaa:	61c4      	str	r4, [r0, #28]
}
   3fbac:	bc10      	pop	{r4}
   3fbae:	4770      	bx	lr

0003fbb0 <z_pm_save_idle_exit>:
{
   3fbb0:	b508      	push	{r3, lr}
	pm_system_resume();
   3fbb2:	f7e7 fbf3 	bl	2739c <pm_system_resume>
	sys_clock_idle_exit();
   3fbb6:	f7fd fe6a 	bl	3d88e <sys_clock_idle_exit>
}
   3fbba:	bd08      	pop	{r3, pc}

0003fbbc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   3fbbc:	4288      	cmp	r0, r1
   3fbbe:	da00      	bge.n	3fbc2 <new_prio_for_inheritance+0x6>
   3fbc0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   3fbc2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   3fbc6:	db01      	blt.n	3fbcc <new_prio_for_inheritance+0x10>
   3fbc8:	4608      	mov	r0, r1
   3fbca:	4770      	bx	lr
   3fbcc:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   3fbd0:	4770      	bx	lr

0003fbd2 <adjust_owner_prio>:
{
   3fbd2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   3fbd4:	6880      	ldr	r0, [r0, #8]
   3fbd6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3fbda:	428b      	cmp	r3, r1
   3fbdc:	d101      	bne.n	3fbe2 <adjust_owner_prio+0x10>
	return false;
   3fbde:	2000      	movs	r0, #0
}
   3fbe0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   3fbe2:	f7f7 fee1 	bl	379a8 <z_set_prio>
   3fbe6:	e7fb      	b.n	3fbe0 <adjust_owner_prio+0xe>

0003fbe8 <z_impl_k_mutex_init>:
{
   3fbe8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3fbea:	2000      	movs	r0, #0
   3fbec:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   3fbee:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   3fbf0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   3fbf2:	605b      	str	r3, [r3, #4]
}
   3fbf4:	4770      	bx	lr

0003fbf6 <prepare_thread_to_run>:
{
   3fbf6:	b508      	push	{r3, lr}
   3fbf8:	2200      	movs	r2, #0
   3fbfa:	67c2      	str	r2, [r0, #124]	; 0x7c
   3fbfc:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   3fbfe:	f7f7 fcd9 	bl	375b4 <z_ready_thread>
}
   3fc02:	bd08      	pop	{r3, pc}

0003fc04 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3fc04:	b160      	cbz	r0, 3fc20 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3fc06:	6803      	ldr	r3, [r0, #0]
   3fc08:	f013 0f03 	tst.w	r3, #3
   3fc0c:	d008      	beq.n	3fc20 <z_queue_node_peek+0x1c>
{
   3fc0e:	b510      	push	{r4, lr}
		ret = anode->data;
   3fc10:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3fc12:	b909      	cbnz	r1, 3fc18 <z_queue_node_peek+0x14>
		ret = anode->data;
   3fc14:	4620      	mov	r0, r4
}
   3fc16:	bd10      	pop	{r4, pc}
			k_free(anode);
   3fc18:	f000 f926 	bl	3fe68 <k_free>
		ret = anode->data;
   3fc1c:	4620      	mov	r0, r4
   3fc1e:	e7fa      	b.n	3fc16 <z_queue_node_peek+0x12>
}
   3fc20:	4770      	bx	lr

0003fc22 <k_queue_append>:
{
   3fc22:	b500      	push	{lr}
   3fc24:	b083      	sub	sp, #12
   3fc26:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3fc28:	2301      	movs	r3, #1
   3fc2a:	9300      	str	r3, [sp, #0]
   3fc2c:	2300      	movs	r3, #0
   3fc2e:	4619      	mov	r1, r3
   3fc30:	f7f6 fb6e 	bl	36310 <queue_insert>
}
   3fc34:	b003      	add	sp, #12
   3fc36:	f85d fb04 	ldr.w	pc, [sp], #4

0003fc3a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3fc3a:	b15a      	cbz	r2, 3fc54 <z_impl_k_sem_init+0x1a>
   3fc3c:	428a      	cmp	r2, r1
   3fc3e:	d30c      	bcc.n	3fc5a <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   3fc40:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   3fc42:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   3fc44:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   3fc46:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   3fc48:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   3fc4c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   3fc4e:	6143      	str	r3, [r0, #20]
	return 0;
   3fc50:	2000      	movs	r0, #0
   3fc52:	4770      	bx	lr
		return -EINVAL;
   3fc54:	f06f 0015 	mvn.w	r0, #21
   3fc58:	4770      	bx	lr
   3fc5a:	f06f 0015 	mvn.w	r0, #21
}
   3fc5e:	4770      	bx	lr

0003fc60 <thread_active_elsewhere>:
}
   3fc60:	2000      	movs	r0, #0
   3fc62:	4770      	bx	lr

0003fc64 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3fc64:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3fc68:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3fc6c:	4283      	cmp	r3, r0
   3fc6e:	d001      	beq.n	3fc74 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   3fc70:	1ac0      	subs	r0, r0, r3
   3fc72:	4770      	bx	lr
	return 0;
   3fc74:	2000      	movs	r0, #0
}
   3fc76:	4770      	bx	lr

0003fc78 <z_reschedule_irqlock>:
{
   3fc78:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3fc7a:	4603      	mov	r3, r0
   3fc7c:	b920      	cbnz	r0, 3fc88 <z_reschedule_irqlock+0x10>
   3fc7e:	f3ef 8205 	mrs	r2, IPSR
   3fc82:	b942      	cbnz	r2, 3fc96 <z_reschedule_irqlock+0x1e>
   3fc84:	2201      	movs	r2, #1
   3fc86:	e000      	b.n	3fc8a <z_reschedule_irqlock+0x12>
   3fc88:	2200      	movs	r2, #0
	if (resched(key)) {
   3fc8a:	b932      	cbnz	r2, 3fc9a <z_reschedule_irqlock+0x22>
   3fc8c:	f383 8811 	msr	BASEPRI, r3
   3fc90:	f3bf 8f6f 	isb	sy
}
   3fc94:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3fc96:	2200      	movs	r2, #0
   3fc98:	e7f7      	b.n	3fc8a <z_reschedule_irqlock+0x12>
   3fc9a:	4618      	mov	r0, r3
   3fc9c:	f7e7 fe38 	bl	27910 <arch_swap>
	return ret;
   3fca0:	e7f8      	b.n	3fc94 <z_reschedule_irqlock+0x1c>

0003fca2 <z_priq_dumb_best>:
{
   3fca2:	4603      	mov	r3, r0
	return list->head == list;
   3fca4:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3fca6:	4283      	cmp	r3, r0
   3fca8:	d000      	beq.n	3fcac <z_priq_dumb_best+0xa>
}
   3fcaa:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3fcac:	2000      	movs	r0, #0
	return thread;
   3fcae:	e7fc      	b.n	3fcaa <z_priq_dumb_best+0x8>

0003fcb0 <z_unpend_all>:
{
   3fcb0:	b538      	push	{r3, r4, r5, lr}
   3fcb2:	4605      	mov	r5, r0
	int need_sched = 0;
   3fcb4:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3fcb6:	e006      	b.n	3fcc6 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   3fcb8:	4620      	mov	r0, r4
   3fcba:	f7f7 fac7 	bl	3724c <z_unpend_thread>
		z_ready_thread(thread);
   3fcbe:	4620      	mov	r0, r4
   3fcc0:	f7f7 fc78 	bl	375b4 <z_ready_thread>
		need_sched = 1;
   3fcc4:	2001      	movs	r0, #1
	return list->head == list;
   3fcc6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3fcc8:	42a5      	cmp	r5, r4
   3fcca:	d001      	beq.n	3fcd0 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3fccc:	2c00      	cmp	r4, #0
   3fcce:	d1f3      	bne.n	3fcb8 <z_unpend_all+0x8>
}
   3fcd0:	bd38      	pop	{r3, r4, r5, pc}

0003fcd2 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   3fcd2:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   3fcd4:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   3fcd6:	6083      	str	r3, [r0, #8]
}
   3fcd8:	4770      	bx	lr

0003fcda <remove_timeout>:
{
   3fcda:	b538      	push	{r3, r4, r5, lr}
   3fcdc:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   3fcde:	f7f8 fb71 	bl	383c4 <next>
   3fce2:	b148      	cbz	r0, 3fcf8 <remove_timeout+0x1e>
   3fce4:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   3fce6:	6920      	ldr	r0, [r4, #16]
   3fce8:	6965      	ldr	r5, [r4, #20]
   3fcea:	6913      	ldr	r3, [r2, #16]
   3fcec:	6951      	ldr	r1, [r2, #20]
   3fcee:	181b      	adds	r3, r3, r0
   3fcf0:	eb45 0101 	adc.w	r1, r5, r1
   3fcf4:	6113      	str	r3, [r2, #16]
   3fcf6:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   3fcf8:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   3fcfa:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   3fcfc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3fcfe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3fd00:	2300      	movs	r3, #0
   3fd02:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   3fd04:	6063      	str	r3, [r4, #4]
}
   3fd06:	bd38      	pop	{r3, r4, r5, pc}

0003fd08 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3fd08:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3fd0a:	f7f8 fe05 	bl	38918 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3fd0e:	bd08      	pop	{r3, pc}

0003fd10 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   3fd10:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   3fd12:	f7f8 fe01 	bl	38918 <sys_clock_tick_get>
}
   3fd16:	bd08      	pop	{r3, pc}

0003fd18 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3fd18:	b900      	cbnz	r0, 3fd1c <z_impl_k_busy_wait+0x4>
   3fd1a:	4770      	bx	lr
{
   3fd1c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3fd1e:	f7e6 fa91 	bl	26244 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3fd22:	bd08      	pop	{r3, pc}

0003fd24 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   3fd24:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3fd26:	f1b1 3fff 	cmp.w	r1, #4294967295
   3fd2a:	bf08      	it	eq
   3fd2c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   3fd30:	d024      	beq.n	3fd7c <sys_clock_timeout_end_calc+0x58>
   3fd32:	4604      	mov	r4, r0
   3fd34:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3fd36:	ea54 0105 	orrs.w	r1, r4, r5
   3fd3a:	d00d      	beq.n	3fd58 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3fd3c:	f06f 0101 	mvn.w	r1, #1
   3fd40:	1a0a      	subs	r2, r1, r0
   3fd42:	f04f 31ff 	mov.w	r1, #4294967295
   3fd46:	eb61 0305 	sbc.w	r3, r1, r5
   3fd4a:	2a00      	cmp	r2, #0
   3fd4c:	f173 0100 	sbcs.w	r1, r3, #0
   3fd50:	db05      	blt.n	3fd5e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3fd52:	4610      	mov	r0, r2
   3fd54:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3fd56:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   3fd58:	f7f8 fdde 	bl	38918 <sys_clock_tick_get>
   3fd5c:	e7fb      	b.n	3fd56 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   3fd5e:	f7f8 fddb 	bl	38918 <sys_clock_tick_get>
   3fd62:	4623      	mov	r3, r4
   3fd64:	462a      	mov	r2, r5
   3fd66:	2c01      	cmp	r4, #1
   3fd68:	f175 0400 	sbcs.w	r4, r5, #0
   3fd6c:	db03      	blt.n	3fd76 <sys_clock_timeout_end_calc+0x52>
   3fd6e:	18c0      	adds	r0, r0, r3
   3fd70:	eb42 0101 	adc.w	r1, r2, r1
   3fd74:	e7ef      	b.n	3fd56 <sys_clock_timeout_end_calc+0x32>
   3fd76:	2301      	movs	r3, #1
   3fd78:	2200      	movs	r2, #0
   3fd7a:	e7f8      	b.n	3fd6e <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   3fd7c:	f04f 30ff 	mov.w	r0, #4294967295
   3fd80:	4601      	mov	r1, r0
   3fd82:	e7e8      	b.n	3fd56 <sys_clock_timeout_end_calc+0x32>

0003fd84 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   3fd84:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   3fd86:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   3fd88:	2300      	movs	r3, #0
   3fd8a:	6303      	str	r3, [r0, #48]	; 0x30
   3fd8c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   3fd90:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   3fd92:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   3fd94:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3fd96:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   3fd98:	6343      	str	r3, [r0, #52]	; 0x34
}
   3fd9a:	4770      	bx	lr

0003fd9c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3fd9c:	b510      	push	{r4, lr}
   3fd9e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   3fda0:	f7f8 fc32 	bl	38608 <z_abort_timeout>

	if (inactive) {
   3fda4:	b9a0      	cbnz	r0, 3fdd0 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   3fda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3fda8:	b10b      	cbz	r3, 3fdae <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3fdaa:	4620      	mov	r0, r4
   3fdac:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3fdae:	f104 0018 	add.w	r0, r4, #24
   3fdb2:	f7f7 ffbd 	bl	37d30 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3fdb6:	b158      	cbz	r0, 3fdd0 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   3fdb8:	f7f7 fbfc 	bl	375b4 <z_ready_thread>
	__asm__ volatile(
   3fdbc:	f04f 0320 	mov.w	r3, #32
   3fdc0:	f3ef 8011 	mrs	r0, BASEPRI
   3fdc4:	f383 8812 	msr	BASEPRI_MAX, r3
   3fdc8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3fdcc:	f7ff ff54 	bl	3fc78 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   3fdd0:	bd10      	pop	{r4, pc}

0003fdd2 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3fdd2:	b108      	cbz	r0, 3fdd8 <poller_thread+0x6>
   3fdd4:	3860      	subs	r0, #96	; 0x60
   3fdd6:	4770      	bx	lr
}
   3fdd8:	4770      	bx	lr

0003fdda <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   3fdda:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   3fddc:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3fdde:	7823      	ldrb	r3, [r4, #0]
   3fde0:	b173      	cbz	r3, 3fe00 <signal_triggered_work+0x26>
   3fde2:	f854 5c04 	ldr.w	r5, [r4, #-4]
   3fde6:	b15d      	cbz	r5, 3fe00 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   3fde8:	f1a4 0614 	sub.w	r6, r4, #20
   3fdec:	f104 0014 	add.w	r0, r4, #20
   3fdf0:	f7f8 fc0a 	bl	38608 <z_abort_timeout>
		twork->poll_result = 0;
   3fdf4:	2300      	movs	r3, #0
   3fdf6:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   3fdf8:	4631      	mov	r1, r6
   3fdfa:	4628      	mov	r0, r5
   3fdfc:	f7f6 fe68 	bl	36ad0 <k_work_submit_to_queue>
	}

	return 0;
}
   3fe00:	2000      	movs	r0, #0
   3fe02:	bd70      	pop	{r4, r5, r6, pc}

0003fe04 <signal_poll_event>:
{
   3fe04:	b570      	push	{r4, r5, r6, lr}
   3fe06:	4604      	mov	r4, r0
   3fe08:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   3fe0a:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   3fe0c:	b1d6      	cbz	r6, 3fe44 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   3fe0e:	7873      	ldrb	r3, [r6, #1]
   3fe10:	2b01      	cmp	r3, #1
   3fe12:	d00d      	beq.n	3fe30 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   3fe14:	2b02      	cmp	r3, #2
   3fe16:	d012      	beq.n	3fe3e <signal_poll_event+0x3a>
		poller->is_polling = false;
   3fe18:	2000      	movs	r0, #0
   3fe1a:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   3fe1c:	2300      	movs	r3, #0
   3fe1e:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   3fe20:	68e3      	ldr	r3, [r4, #12]
   3fe22:	f3c3 3145 	ubfx	r1, r3, #13, #6
   3fe26:	430d      	orrs	r5, r1
   3fe28:	f365 3352 	bfi	r3, r5, #13, #6
   3fe2c:	60e3      	str	r3, [r4, #12]
}
   3fe2e:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   3fe30:	f7f8 fed0 	bl	38bd4 <signal_poller>
		poller->is_polling = false;
   3fe34:	2300      	movs	r3, #0
   3fe36:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   3fe38:	4298      	cmp	r0, r3
   3fe3a:	daef      	bge.n	3fe1c <signal_poll_event+0x18>
   3fe3c:	e7f7      	b.n	3fe2e <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   3fe3e:	f7ff ffcc 	bl	3fdda <signal_triggered_work>
   3fe42:	e7f7      	b.n	3fe34 <signal_poll_event+0x30>
	int retcode = 0;
   3fe44:	2000      	movs	r0, #0
   3fe46:	e7e9      	b.n	3fe1c <signal_poll_event+0x18>

0003fe48 <z_handle_obj_poll_events>:
{
   3fe48:	b508      	push	{r3, lr}
   3fe4a:	4603      	mov	r3, r0
	return list->head == list;
   3fe4c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3fe4e:	4283      	cmp	r3, r0
   3fe50:	d009      	beq.n	3fe66 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   3fe52:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   3fe54:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   3fe56:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3fe58:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3fe5a:	2300      	movs	r3, #0
   3fe5c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3fe5e:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   3fe60:	b108      	cbz	r0, 3fe66 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   3fe62:	f7ff ffcf 	bl	3fe04 <signal_poll_event>
}
   3fe66:	bd08      	pop	{r3, pc}

0003fe68 <k_free>:
	if (ptr != NULL) {
   3fe68:	b130      	cbz	r0, 3fe78 <k_free+0x10>
{
   3fe6a:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   3fe6c:	1f01      	subs	r1, r0, #4
   3fe6e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3fe72:	f7f5 fed3 	bl	35c1c <k_heap_free>
}
   3fe76:	bd08      	pop	{r3, pc}
   3fe78:	4770      	bx	lr

0003fe7a <k_malloc>:
{
   3fe7a:	b508      	push	{r3, lr}
   3fe7c:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   3fe7e:	2004      	movs	r0, #4
   3fe80:	f7f9 fc26 	bl	396d0 <k_aligned_alloc>
}
   3fe84:	bd08      	pop	{r3, pc}

0003fe86 <k_calloc>:
{
   3fe86:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   3fe88:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   3fe8c:	b138      	cbz	r0, 3fe9e <k_calloc+0x18>
   3fe8e:	fbb4 f0f0 	udiv	r0, r4, r0
   3fe92:	4281      	cmp	r1, r0
   3fe94:	d001      	beq.n	3fe9a <k_calloc+0x14>
   3fe96:	2301      	movs	r3, #1
   3fe98:	e002      	b.n	3fea0 <k_calloc+0x1a>
   3fe9a:	2300      	movs	r3, #0
   3fe9c:	e000      	b.n	3fea0 <k_calloc+0x1a>
   3fe9e:	2300      	movs	r3, #0
	if (size_mul_overflow(nmemb, size, &bounds)) {
   3fea0:	b953      	cbnz	r3, 3feb8 <k_calloc+0x32>
	ret = k_malloc(bounds);
   3fea2:	4620      	mov	r0, r4
   3fea4:	f7ff ffe9 	bl	3fe7a <k_malloc>
	if (ret != NULL) {
   3fea8:	4605      	mov	r5, r0
   3feaa:	b118      	cbz	r0, 3feb4 <k_calloc+0x2e>
__ssp_bos_icheck3(memset, void *, int)
   3feac:	4622      	mov	r2, r4
   3feae:	2100      	movs	r1, #0
   3feb0:	f000 f846 	bl	3ff40 <memset>
}
   3feb4:	4628      	mov	r0, r5
   3feb6:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   3feb8:	2500      	movs	r5, #0
   3feba:	e7fb      	b.n	3feb4 <k_calloc+0x2e>

0003febc <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   3febc:	4770      	bx	lr

0003febe <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3febe:	4770      	bx	lr

0003fec0 <atoi>:
   3fec0:	220a      	movs	r2, #10
   3fec2:	2100      	movs	r1, #0
   3fec4:	f7fa bb2a 	b.w	3a51c <strtol>

0003fec8 <memchr>:
   3fec8:	b2c9      	uxtb	r1, r1
   3feca:	4603      	mov	r3, r0
   3fecc:	4402      	add	r2, r0
   3fece:	b510      	push	{r4, lr}
   3fed0:	4293      	cmp	r3, r2
   3fed2:	4618      	mov	r0, r3
   3fed4:	d101      	bne.n	3feda <memchr+0x12>
   3fed6:	2000      	movs	r0, #0
   3fed8:	e003      	b.n	3fee2 <memchr+0x1a>
   3feda:	7804      	ldrb	r4, [r0, #0]
   3fedc:	3301      	adds	r3, #1
   3fede:	428c      	cmp	r4, r1
   3fee0:	d1f6      	bne.n	3fed0 <memchr+0x8>
   3fee2:	bd10      	pop	{r4, pc}

0003fee4 <memcmp>:
   3fee4:	b530      	push	{r4, r5, lr}
   3fee6:	3901      	subs	r1, #1
   3fee8:	2400      	movs	r4, #0
   3feea:	42a2      	cmp	r2, r4
   3feec:	d101      	bne.n	3fef2 <memcmp+0xe>
   3feee:	2000      	movs	r0, #0
   3fef0:	e005      	b.n	3fefe <memcmp+0x1a>
   3fef2:	5d03      	ldrb	r3, [r0, r4]
   3fef4:	3401      	adds	r4, #1
   3fef6:	5d0d      	ldrb	r5, [r1, r4]
   3fef8:	42ab      	cmp	r3, r5
   3fefa:	d0f6      	beq.n	3feea <memcmp+0x6>
   3fefc:	1b58      	subs	r0, r3, r5
   3fefe:	bd30      	pop	{r4, r5, pc}

0003ff00 <memcpy>:
   3ff00:	440a      	add	r2, r1
   3ff02:	1e43      	subs	r3, r0, #1
   3ff04:	4291      	cmp	r1, r2
   3ff06:	d100      	bne.n	3ff0a <memcpy+0xa>
   3ff08:	4770      	bx	lr
   3ff0a:	b510      	push	{r4, lr}
   3ff0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   3ff10:	4291      	cmp	r1, r2
   3ff12:	f803 4f01 	strb.w	r4, [r3, #1]!
   3ff16:	d1f9      	bne.n	3ff0c <memcpy+0xc>
   3ff18:	bd10      	pop	{r4, pc}

0003ff1a <__memcpy_chk>:
   3ff1a:	429a      	cmp	r2, r3
   3ff1c:	b508      	push	{r3, lr}
   3ff1e:	d901      	bls.n	3ff24 <__memcpy_chk+0xa>
   3ff20:	f7e8 fd8c 	bl	28a3c <__chk_fail>
   3ff24:	4281      	cmp	r1, r0
   3ff26:	d804      	bhi.n	3ff32 <__memcpy_chk+0x18>
   3ff28:	188b      	adds	r3, r1, r2
   3ff2a:	4298      	cmp	r0, r3
   3ff2c:	d3f8      	bcc.n	3ff20 <__memcpy_chk+0x6>
   3ff2e:	4281      	cmp	r1, r0
   3ff30:	d102      	bne.n	3ff38 <__memcpy_chk+0x1e>
   3ff32:	1883      	adds	r3, r0, r2
   3ff34:	4299      	cmp	r1, r3
   3ff36:	d3f3      	bcc.n	3ff20 <__memcpy_chk+0x6>
   3ff38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3ff3c:	f7ff bfe0 	b.w	3ff00 <memcpy>

0003ff40 <memset>:
   3ff40:	4402      	add	r2, r0
   3ff42:	4603      	mov	r3, r0
   3ff44:	4293      	cmp	r3, r2
   3ff46:	d100      	bne.n	3ff4a <memset+0xa>
   3ff48:	4770      	bx	lr
   3ff4a:	f803 1b01 	strb.w	r1, [r3], #1
   3ff4e:	e7f9      	b.n	3ff44 <memset+0x4>

0003ff50 <__sfputc_r>:
   3ff50:	6893      	ldr	r3, [r2, #8]
   3ff52:	3b01      	subs	r3, #1
   3ff54:	2b00      	cmp	r3, #0
   3ff56:	6093      	str	r3, [r2, #8]
   3ff58:	b410      	push	{r4}
   3ff5a:	da07      	bge.n	3ff6c <__sfputc_r+0x1c>
   3ff5c:	6994      	ldr	r4, [r2, #24]
   3ff5e:	42a3      	cmp	r3, r4
   3ff60:	db01      	blt.n	3ff66 <__sfputc_r+0x16>
   3ff62:	290a      	cmp	r1, #10
   3ff64:	d102      	bne.n	3ff6c <__sfputc_r+0x1c>
   3ff66:	bc10      	pop	{r4}
   3ff68:	f7fa bc42 	b.w	3a7f0 <__swbuf_r>
   3ff6c:	6813      	ldr	r3, [r2, #0]
   3ff6e:	1c58      	adds	r0, r3, #1
   3ff70:	6010      	str	r0, [r2, #0]
   3ff72:	4608      	mov	r0, r1
   3ff74:	7019      	strb	r1, [r3, #0]
   3ff76:	bc10      	pop	{r4}
   3ff78:	4770      	bx	lr

0003ff7a <__sfputs_r>:
   3ff7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ff7c:	4606      	mov	r6, r0
   3ff7e:	460f      	mov	r7, r1
   3ff80:	4614      	mov	r4, r2
   3ff82:	18d5      	adds	r5, r2, r3
   3ff84:	42ac      	cmp	r4, r5
   3ff86:	d101      	bne.n	3ff8c <__sfputs_r+0x12>
   3ff88:	2000      	movs	r0, #0
   3ff8a:	e007      	b.n	3ff9c <__sfputs_r+0x22>
   3ff8c:	463a      	mov	r2, r7
   3ff8e:	f814 1b01 	ldrb.w	r1, [r4], #1
   3ff92:	4630      	mov	r0, r6
   3ff94:	f7ff ffdc 	bl	3ff50 <__sfputc_r>
   3ff98:	1c43      	adds	r3, r0, #1
   3ff9a:	d1f3      	bne.n	3ff84 <__sfputs_r+0xa>
   3ff9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003ff9e <__cvt>:
   3ff9e:	2b00      	cmp	r3, #0
   3ffa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ffa4:	461f      	mov	r7, r3
   3ffa6:	b088      	sub	sp, #32
   3ffa8:	bfb4      	ite	lt
   3ffaa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   3ffae:	2300      	movge	r3, #0
   3ffb0:	4614      	mov	r4, r2
   3ffb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   3ffb4:	bfbc      	itt	lt
   3ffb6:	461f      	movlt	r7, r3
   3ffb8:	232d      	movlt	r3, #45	; 0x2d
   3ffba:	9d10      	ldr	r5, [sp, #64]	; 0x40
   3ffbc:	7013      	strb	r3, [r2, #0]
   3ffbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3ffc0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   3ffc4:	f023 0820 	bic.w	r8, r3, #32
   3ffc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   3ffcc:	d005      	beq.n	3ffda <__cvt+0x3c>
   3ffce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   3ffd2:	d100      	bne.n	3ffd6 <__cvt+0x38>
   3ffd4:	3501      	adds	r5, #1
   3ffd6:	2302      	movs	r3, #2
   3ffd8:	e000      	b.n	3ffdc <__cvt+0x3e>
   3ffda:	2303      	movs	r3, #3
   3ffdc:	aa07      	add	r2, sp, #28
   3ffde:	9204      	str	r2, [sp, #16]
   3ffe0:	aa06      	add	r2, sp, #24
   3ffe2:	e9cd 3500 	strd	r3, r5, [sp]
   3ffe6:	e9cd a202 	strd	sl, r2, [sp, #8]
   3ffea:	463b      	mov	r3, r7
   3ffec:	4622      	mov	r2, r4
   3ffee:	f7e1 fbe3 	bl	217b8 <_dtoa_r>
   3fff2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   3fff6:	4606      	mov	r6, r0
   3fff8:	d102      	bne.n	40000 <CONFIG_PM_SRAM_SIZE>
   3fffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3fffc:	07db      	lsls	r3, r3, #31
   3fffe:	d522      	bpl.n	40046 <CONFIG_PM_SRAM_SIZE+0x46>
   40000:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   40004:	eb06 0905 	add.w	r9, r6, r5
   40008:	d110      	bne.n	4002c <CONFIG_PM_SRAM_SIZE+0x2c>
   4000a:	7833      	ldrb	r3, [r6, #0]
   4000c:	2b30      	cmp	r3, #48	; 0x30
   4000e:	d10a      	bne.n	40026 <CONFIG_PM_SRAM_SIZE+0x26>
   40010:	2200      	movs	r2, #0
   40012:	2300      	movs	r3, #0
   40014:	4620      	mov	r0, r4
   40016:	4639      	mov	r1, r7
   40018:	f7e1 fa16 	bl	21448 <__aeabi_dcmpeq>
   4001c:	b918      	cbnz	r0, 40026 <CONFIG_PM_SRAM_SIZE+0x26>
   4001e:	f1c5 0501 	rsb	r5, r5, #1
   40022:	f8ca 5000 	str.w	r5, [sl]
   40026:	f8da 3000 	ldr.w	r3, [sl]
   4002a:	4499      	add	r9, r3
   4002c:	2200      	movs	r2, #0
   4002e:	2300      	movs	r3, #0
   40030:	4620      	mov	r0, r4
   40032:	4639      	mov	r1, r7
   40034:	f7e1 fa08 	bl	21448 <__aeabi_dcmpeq>
   40038:	b108      	cbz	r0, 4003e <CONFIG_PM_SRAM_SIZE+0x3e>
   4003a:	f8cd 901c 	str.w	r9, [sp, #28]
   4003e:	2230      	movs	r2, #48	; 0x30
   40040:	9b07      	ldr	r3, [sp, #28]
   40042:	454b      	cmp	r3, r9
   40044:	d307      	bcc.n	40056 <CONFIG_PM_SRAM_SIZE+0x56>
   40046:	9b07      	ldr	r3, [sp, #28]
   40048:	4630      	mov	r0, r6
   4004a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   4004c:	1b9b      	subs	r3, r3, r6
   4004e:	6013      	str	r3, [r2, #0]
   40050:	b008      	add	sp, #32
   40052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40056:	1c59      	adds	r1, r3, #1
   40058:	9107      	str	r1, [sp, #28]
   4005a:	701a      	strb	r2, [r3, #0]
   4005c:	e7f0      	b.n	40040 <CONFIG_PM_SRAM_SIZE+0x40>

0004005e <__exponent>:
   4005e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40060:	2900      	cmp	r1, #0
   40062:	4603      	mov	r3, r0
   40064:	bfb8      	it	lt
   40066:	4249      	neglt	r1, r1
   40068:	f803 2b02 	strb.w	r2, [r3], #2
   4006c:	bfb4      	ite	lt
   4006e:	222d      	movlt	r2, #45	; 0x2d
   40070:	222b      	movge	r2, #43	; 0x2b
   40072:	2909      	cmp	r1, #9
   40074:	7042      	strb	r2, [r0, #1]
   40076:	dd2a      	ble.n	400ce <__exponent+0x70>
   40078:	f10d 0407 	add.w	r4, sp, #7
   4007c:	270a      	movs	r7, #10
   4007e:	46a4      	mov	ip, r4
   40080:	460a      	mov	r2, r1
   40082:	46a6      	mov	lr, r4
   40084:	3c01      	subs	r4, #1
   40086:	2a63      	cmp	r2, #99	; 0x63
   40088:	fb91 f6f7 	sdiv	r6, r1, r7
   4008c:	fb07 1516 	mls	r5, r7, r6, r1
   40090:	4631      	mov	r1, r6
   40092:	f105 0530 	add.w	r5, r5, #48	; 0x30
   40096:	f80e 5c01 	strb.w	r5, [lr, #-1]
   4009a:	dcf1      	bgt.n	40080 <__exponent+0x22>
   4009c:	3130      	adds	r1, #48	; 0x30
   4009e:	f1ae 0502 	sub.w	r5, lr, #2
   400a2:	f804 1c01 	strb.w	r1, [r4, #-1]
   400a6:	1c44      	adds	r4, r0, #1
   400a8:	4629      	mov	r1, r5
   400aa:	4561      	cmp	r1, ip
   400ac:	d30a      	bcc.n	400c4 <__exponent+0x66>
   400ae:	f10d 0209 	add.w	r2, sp, #9
   400b2:	eba2 020e 	sub.w	r2, r2, lr
   400b6:	4565      	cmp	r5, ip
   400b8:	bf88      	it	hi
   400ba:	2200      	movhi	r2, #0
   400bc:	4413      	add	r3, r2
   400be:	1a18      	subs	r0, r3, r0
   400c0:	b003      	add	sp, #12
   400c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   400c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   400c8:	f804 2f01 	strb.w	r2, [r4, #1]!
   400cc:	e7ed      	b.n	400aa <__exponent+0x4c>
   400ce:	2330      	movs	r3, #48	; 0x30
   400d0:	3130      	adds	r1, #48	; 0x30
   400d2:	7083      	strb	r3, [r0, #2]
   400d4:	1d03      	adds	r3, r0, #4
   400d6:	70c1      	strb	r1, [r0, #3]
   400d8:	e7f1      	b.n	400be <__exponent+0x60>

000400da <_printf_common>:
   400da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   400de:	4616      	mov	r6, r2
   400e0:	4699      	mov	r9, r3
   400e2:	688a      	ldr	r2, [r1, #8]
   400e4:	4607      	mov	r7, r0
   400e6:	690b      	ldr	r3, [r1, #16]
   400e8:	460c      	mov	r4, r1
   400ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
   400ee:	4293      	cmp	r3, r2
   400f0:	bfb8      	it	lt
   400f2:	4613      	movlt	r3, r2
   400f4:	6033      	str	r3, [r6, #0]
   400f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   400fa:	b10a      	cbz	r2, 40100 <_printf_common+0x26>
   400fc:	3301      	adds	r3, #1
   400fe:	6033      	str	r3, [r6, #0]
   40100:	6823      	ldr	r3, [r4, #0]
   40102:	0699      	lsls	r1, r3, #26
   40104:	bf42      	ittt	mi
   40106:	6833      	ldrmi	r3, [r6, #0]
   40108:	3302      	addmi	r3, #2
   4010a:	6033      	strmi	r3, [r6, #0]
   4010c:	6825      	ldr	r5, [r4, #0]
   4010e:	f015 0506 	ands.w	r5, r5, #6
   40112:	d106      	bne.n	40122 <_printf_common+0x48>
   40114:	f104 0a19 	add.w	sl, r4, #25
   40118:	68e3      	ldr	r3, [r4, #12]
   4011a:	6832      	ldr	r2, [r6, #0]
   4011c:	1a9b      	subs	r3, r3, r2
   4011e:	42ab      	cmp	r3, r5
   40120:	dc29      	bgt.n	40176 <_printf_common+0x9c>
   40122:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   40126:	1e13      	subs	r3, r2, #0
   40128:	6822      	ldr	r2, [r4, #0]
   4012a:	bf18      	it	ne
   4012c:	2301      	movne	r3, #1
   4012e:	0692      	lsls	r2, r2, #26
   40130:	d42e      	bmi.n	40190 <_printf_common+0xb6>
   40132:	f104 0243 	add.w	r2, r4, #67	; 0x43
   40136:	4649      	mov	r1, r9
   40138:	4638      	mov	r0, r7
   4013a:	47c0      	blx	r8
   4013c:	3001      	adds	r0, #1
   4013e:	d021      	beq.n	40184 <_printf_common+0xaa>
   40140:	6823      	ldr	r3, [r4, #0]
   40142:	341a      	adds	r4, #26
   40144:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   40148:	f003 0306 	and.w	r3, r3, #6
   4014c:	6832      	ldr	r2, [r6, #0]
   4014e:	2600      	movs	r6, #0
   40150:	2b04      	cmp	r3, #4
   40152:	f854 3c12 	ldr.w	r3, [r4, #-18]
   40156:	bf08      	it	eq
   40158:	1aad      	subeq	r5, r5, r2
   4015a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   4015e:	bf14      	ite	ne
   40160:	2500      	movne	r5, #0
   40162:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   40166:	4293      	cmp	r3, r2
   40168:	bfc4      	itt	gt
   4016a:	1a9b      	subgt	r3, r3, r2
   4016c:	18ed      	addgt	r5, r5, r3
   4016e:	42b5      	cmp	r5, r6
   40170:	d11a      	bne.n	401a8 <_printf_common+0xce>
   40172:	2000      	movs	r0, #0
   40174:	e008      	b.n	40188 <_printf_common+0xae>
   40176:	2301      	movs	r3, #1
   40178:	4652      	mov	r2, sl
   4017a:	4649      	mov	r1, r9
   4017c:	4638      	mov	r0, r7
   4017e:	47c0      	blx	r8
   40180:	3001      	adds	r0, #1
   40182:	d103      	bne.n	4018c <_printf_common+0xb2>
   40184:	f04f 30ff 	mov.w	r0, #4294967295
   40188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4018c:	3501      	adds	r5, #1
   4018e:	e7c3      	b.n	40118 <_printf_common+0x3e>
   40190:	18e1      	adds	r1, r4, r3
   40192:	1c5a      	adds	r2, r3, #1
   40194:	2030      	movs	r0, #48	; 0x30
   40196:	3302      	adds	r3, #2
   40198:	4422      	add	r2, r4
   4019a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   4019e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   401a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   401a6:	e7c4      	b.n	40132 <_printf_common+0x58>
   401a8:	2301      	movs	r3, #1
   401aa:	4622      	mov	r2, r4
   401ac:	4649      	mov	r1, r9
   401ae:	4638      	mov	r0, r7
   401b0:	47c0      	blx	r8
   401b2:	3001      	adds	r0, #1
   401b4:	d0e6      	beq.n	40184 <_printf_common+0xaa>
   401b6:	3601      	adds	r6, #1
   401b8:	e7d9      	b.n	4016e <_printf_common+0x94>

000401ba <__sread>:
   401ba:	b510      	push	{r4, lr}
   401bc:	460c      	mov	r4, r1
   401be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   401c2:	f7fb f9ed 	bl	3b5a0 <_read_r>
   401c6:	2800      	cmp	r0, #0
   401c8:	bfab      	itete	ge
   401ca:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   401cc:	89a3      	ldrhlt	r3, [r4, #12]
   401ce:	181b      	addge	r3, r3, r0
   401d0:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   401d4:	bfac      	ite	ge
   401d6:	6563      	strge	r3, [r4, #84]	; 0x54
   401d8:	81a3      	strhlt	r3, [r4, #12]
   401da:	bd10      	pop	{r4, pc}

000401dc <__seofread>:
   401dc:	2000      	movs	r0, #0
   401de:	4770      	bx	lr

000401e0 <__swrite>:
   401e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   401e4:	461f      	mov	r7, r3
   401e6:	898b      	ldrh	r3, [r1, #12]
   401e8:	4605      	mov	r5, r0
   401ea:	460c      	mov	r4, r1
   401ec:	05db      	lsls	r3, r3, #23
   401ee:	4616      	mov	r6, r2
   401f0:	d505      	bpl.n	401fe <__swrite+0x1e>
   401f2:	2302      	movs	r3, #2
   401f4:	2200      	movs	r2, #0
   401f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   401fa:	f7fa fd5f 	bl	3acbc <_lseek_r>
   401fe:	89a3      	ldrh	r3, [r4, #12]
   40200:	4632      	mov	r2, r6
   40202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   40206:	4628      	mov	r0, r5
   40208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   4020c:	81a3      	strh	r3, [r4, #12]
   4020e:	463b      	mov	r3, r7
   40210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   40214:	f7fa bb3e 	b.w	3a894 <_write_r>

00040218 <__sseek>:
   40218:	b510      	push	{r4, lr}
   4021a:	460c      	mov	r4, r1
   4021c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40220:	f7fa fd4c 	bl	3acbc <_lseek_r>
   40224:	1c43      	adds	r3, r0, #1
   40226:	89a3      	ldrh	r3, [r4, #12]
   40228:	bf15      	itete	ne
   4022a:	6560      	strne	r0, [r4, #84]	; 0x54
   4022c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   40230:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   40234:	81a3      	strheq	r3, [r4, #12]
   40236:	bf18      	it	ne
   40238:	81a3      	strhne	r3, [r4, #12]
   4023a:	bd10      	pop	{r4, pc}

0004023c <__sclose>:
   4023c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40240:	f7fa bba8 	b.w	3a994 <_close_r>

00040244 <strchr>:
   40244:	b2c9      	uxtb	r1, r1
   40246:	4603      	mov	r3, r0
   40248:	4618      	mov	r0, r3
   4024a:	f813 2b01 	ldrb.w	r2, [r3], #1
   4024e:	b112      	cbz	r2, 40256 <strchr+0x12>
   40250:	428a      	cmp	r2, r1
   40252:	d1f9      	bne.n	40248 <strchr+0x4>
   40254:	4770      	bx	lr
   40256:	2900      	cmp	r1, #0
   40258:	bf18      	it	ne
   4025a:	2000      	movne	r0, #0
   4025c:	4770      	bx	lr

0004025e <strcpy>:
   4025e:	4603      	mov	r3, r0
   40260:	f811 2b01 	ldrb.w	r2, [r1], #1
   40264:	f803 2b01 	strb.w	r2, [r3], #1
   40268:	2a00      	cmp	r2, #0
   4026a:	d1f9      	bne.n	40260 <strcpy+0x2>
   4026c:	4770      	bx	lr

0004026e <strncmp>:
   4026e:	b510      	push	{r4, lr}
   40270:	b16a      	cbz	r2, 4028e <strncmp+0x20>
   40272:	3901      	subs	r1, #1
   40274:	1884      	adds	r4, r0, r2
   40276:	f810 3b01 	ldrb.w	r3, [r0], #1
   4027a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4027e:	4293      	cmp	r3, r2
   40280:	d103      	bne.n	4028a <strncmp+0x1c>
   40282:	42a0      	cmp	r0, r4
   40284:	d001      	beq.n	4028a <strncmp+0x1c>
   40286:	2b00      	cmp	r3, #0
   40288:	d1f5      	bne.n	40276 <strncmp+0x8>
   4028a:	1a98      	subs	r0, r3, r2
   4028c:	bd10      	pop	{r4, pc}
   4028e:	4610      	mov	r0, r2
   40290:	e7fc      	b.n	4028c <strncmp+0x1e>

00040292 <strncpy>:
   40292:	3901      	subs	r1, #1
   40294:	4603      	mov	r3, r0
   40296:	b510      	push	{r4, lr}
   40298:	b132      	cbz	r2, 402a8 <strncpy+0x16>
   4029a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4029e:	3a01      	subs	r2, #1
   402a0:	f803 4b01 	strb.w	r4, [r3], #1
   402a4:	2c00      	cmp	r4, #0
   402a6:	d1f7      	bne.n	40298 <strncpy+0x6>
   402a8:	441a      	add	r2, r3
   402aa:	2100      	movs	r1, #0
   402ac:	4293      	cmp	r3, r2
   402ae:	d100      	bne.n	402b2 <strncpy+0x20>
   402b0:	bd10      	pop	{r4, pc}
   402b2:	f803 1b01 	strb.w	r1, [r3], #1
   402b6:	e7f9      	b.n	402ac <strncpy+0x1a>

000402b8 <strnlen>:
   402b8:	4602      	mov	r2, r0
   402ba:	4401      	add	r1, r0
   402bc:	b510      	push	{r4, lr}
   402be:	428a      	cmp	r2, r1
   402c0:	4613      	mov	r3, r2
   402c2:	d101      	bne.n	402c8 <strnlen+0x10>
   402c4:	1a18      	subs	r0, r3, r0
   402c6:	bd10      	pop	{r4, pc}
   402c8:	781c      	ldrb	r4, [r3, #0]
   402ca:	3201      	adds	r2, #1
   402cc:	2c00      	cmp	r4, #0
   402ce:	d1f6      	bne.n	402be <strnlen+0x6>
   402d0:	e7f8      	b.n	402c4 <strnlen+0xc>

000402d2 <strrchr>:
   402d2:	b538      	push	{r3, r4, r5, lr}
   402d4:	4603      	mov	r3, r0
   402d6:	460c      	mov	r4, r1
   402d8:	b969      	cbnz	r1, 402f6 <strrchr+0x24>
   402da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   402de:	f7ff bfb1 	b.w	40244 <strchr>
   402e2:	1c43      	adds	r3, r0, #1
   402e4:	4605      	mov	r5, r0
   402e6:	4621      	mov	r1, r4
   402e8:	4618      	mov	r0, r3
   402ea:	f7ff ffab 	bl	40244 <strchr>
   402ee:	2800      	cmp	r0, #0
   402f0:	d1f7      	bne.n	402e2 <strrchr+0x10>
   402f2:	4628      	mov	r0, r5
   402f4:	bd38      	pop	{r3, r4, r5, pc}
   402f6:	2500      	movs	r5, #0
   402f8:	e7f5      	b.n	402e6 <strrchr+0x14>

000402fa <strstr>:
   402fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   402fc:	780c      	ldrb	r4, [r1, #0]
   402fe:	b164      	cbz	r4, 4031a <strstr+0x20>
   40300:	4603      	mov	r3, r0
   40302:	781a      	ldrb	r2, [r3, #0]
   40304:	4618      	mov	r0, r3
   40306:	1c5e      	adds	r6, r3, #1
   40308:	b90a      	cbnz	r2, 4030e <strstr+0x14>
   4030a:	4610      	mov	r0, r2
   4030c:	e005      	b.n	4031a <strstr+0x20>
   4030e:	4294      	cmp	r4, r2
   40310:	d108      	bne.n	40324 <strstr+0x2a>
   40312:	460d      	mov	r5, r1
   40314:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   40318:	b902      	cbnz	r2, 4031c <strstr+0x22>
   4031a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4031c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   40320:	4297      	cmp	r7, r2
   40322:	d0f7      	beq.n	40314 <strstr+0x1a>
   40324:	4633      	mov	r3, r6
   40326:	e7ec      	b.n	40302 <strstr+0x8>

00040328 <_strtol_r>:
   40328:	f7fa b880 	b.w	3a42c <_strtol_l.isra.0>

0004032c <_strtoul_r>:
   4032c:	f7fa b9a0 	b.w	3a670 <_strtoul_l.isra.0>

00040330 <_vsniprintf_r>:
   40330:	b530      	push	{r4, r5, lr}
   40332:	1e14      	subs	r4, r2, #0
   40334:	4605      	mov	r5, r0
   40336:	b09b      	sub	sp, #108	; 0x6c
   40338:	4618      	mov	r0, r3
   4033a:	da05      	bge.n	40348 <_vsniprintf_r+0x18>
   4033c:	238b      	movs	r3, #139	; 0x8b
   4033e:	f04f 30ff 	mov.w	r0, #4294967295
   40342:	602b      	str	r3, [r5, #0]
   40344:	b01b      	add	sp, #108	; 0x6c
   40346:	bd30      	pop	{r4, r5, pc}
   40348:	f44f 7302 	mov.w	r3, #520	; 0x208
   4034c:	4602      	mov	r2, r0
   4034e:	9100      	str	r1, [sp, #0]
   40350:	4628      	mov	r0, r5
   40352:	f8ad 300c 	strh.w	r3, [sp, #12]
   40356:	bf14      	ite	ne
   40358:	f104 33ff 	addne.w	r3, r4, #4294967295
   4035c:	4623      	moveq	r3, r4
   4035e:	9104      	str	r1, [sp, #16]
   40360:	4669      	mov	r1, sp
   40362:	9302      	str	r3, [sp, #8]
   40364:	9305      	str	r3, [sp, #20]
   40366:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4036a:	f8ad 300e 	strh.w	r3, [sp, #14]
   4036e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   40370:	f7fa fd50 	bl	3ae14 <_svfiprintf_r>
   40374:	1c43      	adds	r3, r0, #1
   40376:	bfbc      	itt	lt
   40378:	238b      	movlt	r3, #139	; 0x8b
   4037a:	602b      	strlt	r3, [r5, #0]
   4037c:	2c00      	cmp	r4, #0
   4037e:	d0e1      	beq.n	40344 <_vsniprintf_r+0x14>
   40380:	9b00      	ldr	r3, [sp, #0]
   40382:	2200      	movs	r2, #0
   40384:	701a      	strb	r2, [r3, #0]
   40386:	e7dd      	b.n	40344 <_vsniprintf_r+0x14>

00040388 <abort>:
   40388:	2006      	movs	r0, #6
   4038a:	b508      	push	{r3, lr}
   4038c:	f7fb f91a 	bl	3b5c4 <raise>
   40390:	2001      	movs	r0, #1
   40392:	f7e8 fad5 	bl	28940 <_exit>

00040396 <quorem>:
   40396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4039a:	6903      	ldr	r3, [r0, #16]
   4039c:	4607      	mov	r7, r0
   4039e:	690c      	ldr	r4, [r1, #16]
   403a0:	42a3      	cmp	r3, r4
   403a2:	f2c0 8085 	blt.w	404b0 <quorem+0x11a>
   403a6:	3c01      	subs	r4, #1
   403a8:	f100 0514 	add.w	r5, r0, #20
   403ac:	f101 0814 	add.w	r8, r1, #20
   403b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   403b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   403b8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   403bc:	9301      	str	r3, [sp, #4]
   403be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   403c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   403c6:	3301      	adds	r3, #1
   403c8:	429a      	cmp	r2, r3
   403ca:	fbb2 f6f3 	udiv	r6, r2, r3
   403ce:	d333      	bcc.n	40438 <quorem+0xa2>
   403d0:	f04f 0e00 	mov.w	lr, #0
   403d4:	4640      	mov	r0, r8
   403d6:	46ac      	mov	ip, r5
   403d8:	46f2      	mov	sl, lr
   403da:	f850 2b04 	ldr.w	r2, [r0], #4
   403de:	b293      	uxth	r3, r2
   403e0:	4581      	cmp	r9, r0
   403e2:	ea4f 4212 	mov.w	r2, r2, lsr #16
   403e6:	fb06 e303 	mla	r3, r6, r3, lr
   403ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   403ee:	b29b      	uxth	r3, r3
   403f0:	fb06 e202 	mla	r2, r6, r2, lr
   403f4:	ebaa 0303 	sub.w	r3, sl, r3
   403f8:	f8dc a000 	ldr.w	sl, [ip]
   403fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   40400:	fa1f fa8a 	uxth.w	sl, sl
   40404:	4453      	add	r3, sl
   40406:	fa1f fa82 	uxth.w	sl, r2
   4040a:	f8dc 2000 	ldr.w	r2, [ip]
   4040e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   40412:	eb02 4223 	add.w	r2, r2, r3, asr #16
   40416:	b29b      	uxth	r3, r3
   40418:	ea4f 4a22 	mov.w	sl, r2, asr #16
   4041c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   40420:	f84c 3b04 	str.w	r3, [ip], #4
   40424:	d2d9      	bcs.n	403da <quorem+0x44>
   40426:	f855 300b 	ldr.w	r3, [r5, fp]
   4042a:	b92b      	cbnz	r3, 40438 <quorem+0xa2>
   4042c:	9b01      	ldr	r3, [sp, #4]
   4042e:	3b04      	subs	r3, #4
   40430:	429d      	cmp	r5, r3
   40432:	461a      	mov	r2, r3
   40434:	d330      	bcc.n	40498 <quorem+0x102>
   40436:	613c      	str	r4, [r7, #16]
   40438:	4638      	mov	r0, r7
   4043a:	f000 fa89 	bl	40950 <__mcmp>
   4043e:	2800      	cmp	r0, #0
   40440:	db26      	blt.n	40490 <quorem+0xfa>
   40442:	3601      	adds	r6, #1
   40444:	4628      	mov	r0, r5
   40446:	f04f 0c00 	mov.w	ip, #0
   4044a:	f858 1b04 	ldr.w	r1, [r8], #4
   4044e:	f8d0 e000 	ldr.w	lr, [r0]
   40452:	b28b      	uxth	r3, r1
   40454:	45c1      	cmp	r9, r8
   40456:	fa1f f28e 	uxth.w	r2, lr
   4045a:	ebac 0303 	sub.w	r3, ip, r3
   4045e:	4413      	add	r3, r2
   40460:	ea4f 4211 	mov.w	r2, r1, lsr #16
   40464:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   40468:	eb02 4223 	add.w	r2, r2, r3, asr #16
   4046c:	b29b      	uxth	r3, r3
   4046e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   40472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   40476:	f840 3b04 	str.w	r3, [r0], #4
   4047a:	d2e6      	bcs.n	4044a <quorem+0xb4>
   4047c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   40480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   40484:	b922      	cbnz	r2, 40490 <quorem+0xfa>
   40486:	3b04      	subs	r3, #4
   40488:	429d      	cmp	r5, r3
   4048a:	461a      	mov	r2, r3
   4048c:	d30a      	bcc.n	404a4 <quorem+0x10e>
   4048e:	613c      	str	r4, [r7, #16]
   40490:	4630      	mov	r0, r6
   40492:	b003      	add	sp, #12
   40494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40498:	6812      	ldr	r2, [r2, #0]
   4049a:	3b04      	subs	r3, #4
   4049c:	2a00      	cmp	r2, #0
   4049e:	d1ca      	bne.n	40436 <quorem+0xa0>
   404a0:	3c01      	subs	r4, #1
   404a2:	e7c5      	b.n	40430 <quorem+0x9a>
   404a4:	6812      	ldr	r2, [r2, #0]
   404a6:	3b04      	subs	r3, #4
   404a8:	2a00      	cmp	r2, #0
   404aa:	d1f0      	bne.n	4048e <quorem+0xf8>
   404ac:	3c01      	subs	r4, #1
   404ae:	e7eb      	b.n	40488 <quorem+0xf2>
   404b0:	2000      	movs	r0, #0
   404b2:	e7ee      	b.n	40492 <quorem+0xfc>

000404b4 <__sfmoreglue>:
   404b4:	b570      	push	{r4, r5, r6, lr}
   404b6:	1e4a      	subs	r2, r1, #1
   404b8:	2568      	movs	r5, #104	; 0x68
   404ba:	460e      	mov	r6, r1
   404bc:	4355      	muls	r5, r2
   404be:	f105 0174 	add.w	r1, r5, #116	; 0x74
   404c2:	f7f9 fa95 	bl	399f0 <_malloc_r>
   404c6:	4604      	mov	r4, r0
   404c8:	b140      	cbz	r0, 404dc <__sfmoreglue+0x28>
   404ca:	2100      	movs	r1, #0
   404cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
   404d0:	e9c0 1600 	strd	r1, r6, [r0]
   404d4:	300c      	adds	r0, #12
   404d6:	60a0      	str	r0, [r4, #8]
   404d8:	f7ff fd32 	bl	3ff40 <memset>
   404dc:	4620      	mov	r0, r4
   404de:	bd70      	pop	{r4, r5, r6, pc}

000404e0 <_fwalk_reent>:
   404e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   404e4:	4606      	mov	r6, r0
   404e6:	4688      	mov	r8, r1
   404e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
   404ec:	2700      	movs	r7, #0
   404ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   404f2:	f1b9 0901 	subs.w	r9, r9, #1
   404f6:	d505      	bpl.n	40504 <_fwalk_reent+0x24>
   404f8:	6824      	ldr	r4, [r4, #0]
   404fa:	2c00      	cmp	r4, #0
   404fc:	d1f7      	bne.n	404ee <_fwalk_reent+0xe>
   404fe:	4638      	mov	r0, r7
   40500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   40504:	89ab      	ldrh	r3, [r5, #12]
   40506:	2b01      	cmp	r3, #1
   40508:	d907      	bls.n	4051a <_fwalk_reent+0x3a>
   4050a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   4050e:	3301      	adds	r3, #1
   40510:	d003      	beq.n	4051a <_fwalk_reent+0x3a>
   40512:	4629      	mov	r1, r5
   40514:	4630      	mov	r0, r6
   40516:	47c0      	blx	r8
   40518:	4307      	orrs	r7, r0
   4051a:	3568      	adds	r5, #104	; 0x68
   4051c:	e7e9      	b.n	404f2 <_fwalk_reent+0x12>

0004051e <__swhatbuf_r>:
   4051e:	b570      	push	{r4, r5, r6, lr}
   40520:	460e      	mov	r6, r1
   40522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   40526:	b096      	sub	sp, #88	; 0x58
   40528:	4614      	mov	r4, r2
   4052a:	2900      	cmp	r1, #0
   4052c:	461d      	mov	r5, r3
   4052e:	da07      	bge.n	40540 <__swhatbuf_r+0x22>
   40530:	2300      	movs	r3, #0
   40532:	602b      	str	r3, [r5, #0]
   40534:	89b3      	ldrh	r3, [r6, #12]
   40536:	061a      	lsls	r2, r3, #24
   40538:	d410      	bmi.n	4055c <__swhatbuf_r+0x3e>
   4053a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   4053e:	e00e      	b.n	4055e <__swhatbuf_r+0x40>
   40540:	466a      	mov	r2, sp
   40542:	f7fb f859 	bl	3b5f8 <_fstat_r>
   40546:	2800      	cmp	r0, #0
   40548:	dbf2      	blt.n	40530 <__swhatbuf_r+0x12>
   4054a:	9a01      	ldr	r2, [sp, #4]
   4054c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   40550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   40554:	425a      	negs	r2, r3
   40556:	415a      	adcs	r2, r3
   40558:	602a      	str	r2, [r5, #0]
   4055a:	e7ee      	b.n	4053a <__swhatbuf_r+0x1c>
   4055c:	2340      	movs	r3, #64	; 0x40
   4055e:	2000      	movs	r0, #0
   40560:	6023      	str	r3, [r4, #0]
   40562:	b016      	add	sp, #88	; 0x58
   40564:	bd70      	pop	{r4, r5, r6, pc}

00040566 <memmove>:
   40566:	4288      	cmp	r0, r1
   40568:	b510      	push	{r4, lr}
   4056a:	eb01 0402 	add.w	r4, r1, r2
   4056e:	d902      	bls.n	40576 <memmove+0x10>
   40570:	4284      	cmp	r4, r0
   40572:	4623      	mov	r3, r4
   40574:	d807      	bhi.n	40586 <memmove+0x20>
   40576:	1e43      	subs	r3, r0, #1
   40578:	42a1      	cmp	r1, r4
   4057a:	d008      	beq.n	4058e <memmove+0x28>
   4057c:	f811 2b01 	ldrb.w	r2, [r1], #1
   40580:	f803 2f01 	strb.w	r2, [r3, #1]!
   40584:	e7f8      	b.n	40578 <memmove+0x12>
   40586:	4402      	add	r2, r0
   40588:	4601      	mov	r1, r0
   4058a:	428a      	cmp	r2, r1
   4058c:	d100      	bne.n	40590 <memmove+0x2a>
   4058e:	bd10      	pop	{r4, pc}
   40590:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   40594:	f802 4d01 	strb.w	r4, [r2, #-1]!
   40598:	e7f7      	b.n	4058a <memmove+0x24>

0004059a <_Balloc>:
   4059a:	b570      	push	{r4, r5, r6, lr}
   4059c:	6a46      	ldr	r6, [r0, #36]	; 0x24
   4059e:	4604      	mov	r4, r0
   405a0:	460d      	mov	r5, r1
   405a2:	b93e      	cbnz	r6, 405b4 <_Balloc+0x1a>
   405a4:	2010      	movs	r0, #16
   405a6:	f7f9 f9cd 	bl	39944 <malloc>
   405aa:	6260      	str	r0, [r4, #36]	; 0x24
   405ac:	6006      	str	r6, [r0, #0]
   405ae:	60c6      	str	r6, [r0, #12]
   405b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   405b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   405b6:	68f3      	ldr	r3, [r6, #12]
   405b8:	b183      	cbz	r3, 405dc <_Balloc+0x42>
   405ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   405bc:	68db      	ldr	r3, [r3, #12]
   405be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   405c2:	b9b8      	cbnz	r0, 405f4 <_Balloc+0x5a>
   405c4:	2101      	movs	r1, #1
   405c6:	4620      	mov	r0, r4
   405c8:	fa01 f605 	lsl.w	r6, r1, r5
   405cc:	1d72      	adds	r2, r6, #5
   405ce:	0092      	lsls	r2, r2, #2
   405d0:	f000 faa5 	bl	40b1e <_calloc_r>
   405d4:	b160      	cbz	r0, 405f0 <_Balloc+0x56>
   405d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   405da:	e00e      	b.n	405fa <_Balloc+0x60>
   405dc:	2221      	movs	r2, #33	; 0x21
   405de:	2104      	movs	r1, #4
   405e0:	4620      	mov	r0, r4
   405e2:	f000 fa9c 	bl	40b1e <_calloc_r>
   405e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   405e8:	60f0      	str	r0, [r6, #12]
   405ea:	68db      	ldr	r3, [r3, #12]
   405ec:	2b00      	cmp	r3, #0
   405ee:	d1e4      	bne.n	405ba <_Balloc+0x20>
   405f0:	2000      	movs	r0, #0
   405f2:	bd70      	pop	{r4, r5, r6, pc}
   405f4:	6802      	ldr	r2, [r0, #0]
   405f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   405fa:	2300      	movs	r3, #0
   405fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   40600:	e7f7      	b.n	405f2 <_Balloc+0x58>

00040602 <_Bfree>:
   40602:	b570      	push	{r4, r5, r6, lr}
   40604:	6a46      	ldr	r6, [r0, #36]	; 0x24
   40606:	4605      	mov	r5, r0
   40608:	460c      	mov	r4, r1
   4060a:	b93e      	cbnz	r6, 4061c <_Bfree+0x1a>
   4060c:	2010      	movs	r0, #16
   4060e:	f7f9 f999 	bl	39944 <malloc>
   40612:	6268      	str	r0, [r5, #36]	; 0x24
   40614:	6006      	str	r6, [r0, #0]
   40616:	60c6      	str	r6, [r0, #12]
   40618:	e9c0 6601 	strd	r6, r6, [r0, #4]
   4061c:	b13c      	cbz	r4, 4062e <_Bfree+0x2c>
   4061e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   40620:	6862      	ldr	r2, [r4, #4]
   40622:	68db      	ldr	r3, [r3, #12]
   40624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   40628:	6021      	str	r1, [r4, #0]
   4062a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   4062e:	bd70      	pop	{r4, r5, r6, pc}

00040630 <__multadd>:
   40630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40634:	4607      	mov	r7, r0
   40636:	4698      	mov	r8, r3
   40638:	460c      	mov	r4, r1
   4063a:	690e      	ldr	r6, [r1, #16]
   4063c:	f101 0014 	add.w	r0, r1, #20
   40640:	2300      	movs	r3, #0
   40642:	6805      	ldr	r5, [r0, #0]
   40644:	3301      	adds	r3, #1
   40646:	b2a9      	uxth	r1, r5
   40648:	429e      	cmp	r6, r3
   4064a:	ea4f 4515 	mov.w	r5, r5, lsr #16
   4064e:	fb02 8101 	mla	r1, r2, r1, r8
   40652:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   40656:	b289      	uxth	r1, r1
   40658:	fb02 c505 	mla	r5, r2, r5, ip
   4065c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   40660:	ea4f 4815 	mov.w	r8, r5, lsr #16
   40664:	f840 1b04 	str.w	r1, [r0], #4
   40668:	dceb      	bgt.n	40642 <__multadd+0x12>
   4066a:	f1b8 0f00 	cmp.w	r8, #0
   4066e:	d01b      	beq.n	406a8 <__multadd+0x78>
   40670:	68a3      	ldr	r3, [r4, #8]
   40672:	42b3      	cmp	r3, r6
   40674:	dc12      	bgt.n	4069c <__multadd+0x6c>
   40676:	6861      	ldr	r1, [r4, #4]
   40678:	4638      	mov	r0, r7
   4067a:	3101      	adds	r1, #1
   4067c:	f7ff ff8d 	bl	4059a <_Balloc>
   40680:	6922      	ldr	r2, [r4, #16]
   40682:	4605      	mov	r5, r0
   40684:	f104 010c 	add.w	r1, r4, #12
   40688:	3202      	adds	r2, #2
   4068a:	300c      	adds	r0, #12
   4068c:	0092      	lsls	r2, r2, #2
   4068e:	f7ff fc37 	bl	3ff00 <memcpy>
   40692:	4621      	mov	r1, r4
   40694:	462c      	mov	r4, r5
   40696:	4638      	mov	r0, r7
   40698:	f7ff ffb3 	bl	40602 <_Bfree>
   4069c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   406a0:	3601      	adds	r6, #1
   406a2:	f8c3 8014 	str.w	r8, [r3, #20]
   406a6:	6126      	str	r6, [r4, #16]
   406a8:	4620      	mov	r0, r4
   406aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000406ae <__hi0bits>:
   406ae:	0c02      	lsrs	r2, r0, #16
   406b0:	4603      	mov	r3, r0
   406b2:	0412      	lsls	r2, r2, #16
   406b4:	b9ca      	cbnz	r2, 406ea <__hi0bits+0x3c>
   406b6:	0403      	lsls	r3, r0, #16
   406b8:	2010      	movs	r0, #16
   406ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   406be:	bf04      	itt	eq
   406c0:	021b      	lsleq	r3, r3, #8
   406c2:	3008      	addeq	r0, #8
   406c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   406c8:	bf04      	itt	eq
   406ca:	011b      	lsleq	r3, r3, #4
   406cc:	3004      	addeq	r0, #4
   406ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   406d2:	bf04      	itt	eq
   406d4:	009b      	lsleq	r3, r3, #2
   406d6:	3002      	addeq	r0, #2
   406d8:	2b00      	cmp	r3, #0
   406da:	db05      	blt.n	406e8 <__hi0bits+0x3a>
   406dc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   406e0:	f100 0001 	add.w	r0, r0, #1
   406e4:	bf08      	it	eq
   406e6:	2020      	moveq	r0, #32
   406e8:	4770      	bx	lr
   406ea:	2000      	movs	r0, #0
   406ec:	e7e5      	b.n	406ba <__hi0bits+0xc>

000406ee <__lo0bits>:
   406ee:	6803      	ldr	r3, [r0, #0]
   406f0:	4602      	mov	r2, r0
   406f2:	f013 0007 	ands.w	r0, r3, #7
   406f6:	d00b      	beq.n	40710 <__lo0bits+0x22>
   406f8:	07d9      	lsls	r1, r3, #31
   406fa:	d422      	bmi.n	40742 <__lo0bits+0x54>
   406fc:	0798      	lsls	r0, r3, #30
   406fe:	bf47      	ittee	mi
   40700:	085b      	lsrmi	r3, r3, #1
   40702:	2001      	movmi	r0, #1
   40704:	089b      	lsrpl	r3, r3, #2
   40706:	2002      	movpl	r0, #2
   40708:	bf4c      	ite	mi
   4070a:	6013      	strmi	r3, [r2, #0]
   4070c:	6013      	strpl	r3, [r2, #0]
   4070e:	4770      	bx	lr
   40710:	b299      	uxth	r1, r3
   40712:	b909      	cbnz	r1, 40718 <__lo0bits+0x2a>
   40714:	0c1b      	lsrs	r3, r3, #16
   40716:	2010      	movs	r0, #16
   40718:	f013 0fff 	tst.w	r3, #255	; 0xff
   4071c:	bf04      	itt	eq
   4071e:	0a1b      	lsreq	r3, r3, #8
   40720:	3008      	addeq	r0, #8
   40722:	0719      	lsls	r1, r3, #28
   40724:	bf04      	itt	eq
   40726:	091b      	lsreq	r3, r3, #4
   40728:	3004      	addeq	r0, #4
   4072a:	0799      	lsls	r1, r3, #30
   4072c:	bf04      	itt	eq
   4072e:	089b      	lsreq	r3, r3, #2
   40730:	3002      	addeq	r0, #2
   40732:	07d9      	lsls	r1, r3, #31
   40734:	d403      	bmi.n	4073e <__lo0bits+0x50>
   40736:	085b      	lsrs	r3, r3, #1
   40738:	f100 0001 	add.w	r0, r0, #1
   4073c:	d003      	beq.n	40746 <__lo0bits+0x58>
   4073e:	6013      	str	r3, [r2, #0]
   40740:	4770      	bx	lr
   40742:	2000      	movs	r0, #0
   40744:	4770      	bx	lr
   40746:	2020      	movs	r0, #32
   40748:	4770      	bx	lr

0004074a <__i2b>:
   4074a:	b510      	push	{r4, lr}
   4074c:	460c      	mov	r4, r1
   4074e:	2101      	movs	r1, #1
   40750:	f7ff ff23 	bl	4059a <_Balloc>
   40754:	2201      	movs	r2, #1
   40756:	6144      	str	r4, [r0, #20]
   40758:	6102      	str	r2, [r0, #16]
   4075a:	bd10      	pop	{r4, pc}

0004075c <__multiply>:
   4075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40760:	4615      	mov	r5, r2
   40762:	690a      	ldr	r2, [r1, #16]
   40764:	460c      	mov	r4, r1
   40766:	b085      	sub	sp, #20
   40768:	692b      	ldr	r3, [r5, #16]
   4076a:	429a      	cmp	r2, r3
   4076c:	bfbe      	ittt	lt
   4076e:	460b      	movlt	r3, r1
   40770:	462c      	movlt	r4, r5
   40772:	461d      	movlt	r5, r3
   40774:	6927      	ldr	r7, [r4, #16]
   40776:	68a3      	ldr	r3, [r4, #8]
   40778:	f8d5 9010 	ldr.w	r9, [r5, #16]
   4077c:	6861      	ldr	r1, [r4, #4]
   4077e:	eb07 0609 	add.w	r6, r7, r9
   40782:	42b3      	cmp	r3, r6
   40784:	bfb8      	it	lt
   40786:	3101      	addlt	r1, #1
   40788:	f7ff ff07 	bl	4059a <_Balloc>
   4078c:	f100 0114 	add.w	r1, r0, #20
   40790:	2200      	movs	r2, #0
   40792:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   40796:	460b      	mov	r3, r1
   40798:	4543      	cmp	r3, r8
   4079a:	d31d      	bcc.n	407d8 <__multiply+0x7c>
   4079c:	f104 0314 	add.w	r3, r4, #20
   407a0:	f105 0214 	add.w	r2, r5, #20
   407a4:	f104 0515 	add.w	r5, r4, #21
   407a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   407ac:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   407b0:	9302      	str	r3, [sp, #8]
   407b2:	1b3b      	subs	r3, r7, r4
   407b4:	3b15      	subs	r3, #21
   407b6:	f023 0303 	bic.w	r3, r3, #3
   407ba:	3304      	adds	r3, #4
   407bc:	42af      	cmp	r7, r5
   407be:	bf38      	it	cc
   407c0:	2304      	movcc	r3, #4
   407c2:	9301      	str	r3, [sp, #4]
   407c4:	9b02      	ldr	r3, [sp, #8]
   407c6:	9203      	str	r2, [sp, #12]
   407c8:	4293      	cmp	r3, r2
   407ca:	d808      	bhi.n	407de <__multiply+0x82>
   407cc:	2e00      	cmp	r6, #0
   407ce:	dc5a      	bgt.n	40886 <__multiply+0x12a>
   407d0:	6106      	str	r6, [r0, #16]
   407d2:	b005      	add	sp, #20
   407d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   407d8:	f843 2b04 	str.w	r2, [r3], #4
   407dc:	e7dc      	b.n	40798 <__multiply+0x3c>
   407de:	f8b2 a000 	ldrh.w	sl, [r2]
   407e2:	f1ba 0f00 	cmp.w	sl, #0
   407e6:	d024      	beq.n	40832 <__multiply+0xd6>
   407e8:	f104 0e14 	add.w	lr, r4, #20
   407ec:	4689      	mov	r9, r1
   407ee:	f04f 0c00 	mov.w	ip, #0
   407f2:	f85e 5b04 	ldr.w	r5, [lr], #4
   407f6:	f8d9 b000 	ldr.w	fp, [r9]
   407fa:	b2ab      	uxth	r3, r5
   407fc:	4577      	cmp	r7, lr
   407fe:	fa1f fb8b 	uxth.w	fp, fp
   40802:	fb0a b303 	mla	r3, sl, r3, fp
   40806:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   4080a:	f8d9 5000 	ldr.w	r5, [r9]
   4080e:	4463      	add	r3, ip
   40810:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   40814:	fb0a c50b 	mla	r5, sl, fp, ip
   40818:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   4081c:	b29b      	uxth	r3, r3
   4081e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   40822:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   40826:	f849 3b04 	str.w	r3, [r9], #4
   4082a:	d8e2      	bhi.n	407f2 <__multiply+0x96>
   4082c:	9b01      	ldr	r3, [sp, #4]
   4082e:	f841 c003 	str.w	ip, [r1, r3]
   40832:	9b03      	ldr	r3, [sp, #12]
   40834:	3204      	adds	r2, #4
   40836:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   4083a:	f1b9 0f00 	cmp.w	r9, #0
   4083e:	d020      	beq.n	40882 <__multiply+0x126>
   40840:	680b      	ldr	r3, [r1, #0]
   40842:	f104 0c14 	add.w	ip, r4, #20
   40846:	468e      	mov	lr, r1
   40848:	f04f 0a00 	mov.w	sl, #0
   4084c:	f8bc 5000 	ldrh.w	r5, [ip]
   40850:	b29b      	uxth	r3, r3
   40852:	f8be b002 	ldrh.w	fp, [lr, #2]
   40856:	fb09 b505 	mla	r5, r9, r5, fp
   4085a:	44aa      	add	sl, r5
   4085c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   40860:	f84e 3b04 	str.w	r3, [lr], #4
   40864:	f85c 3b04 	ldr.w	r3, [ip], #4
   40868:	f8be 5000 	ldrh.w	r5, [lr]
   4086c:	0c1b      	lsrs	r3, r3, #16
   4086e:	4567      	cmp	r7, ip
   40870:	fb09 5303 	mla	r3, r9, r3, r5
   40874:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   40878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   4087c:	d8e6      	bhi.n	4084c <__multiply+0xf0>
   4087e:	9d01      	ldr	r5, [sp, #4]
   40880:	514b      	str	r3, [r1, r5]
   40882:	3104      	adds	r1, #4
   40884:	e79e      	b.n	407c4 <__multiply+0x68>
   40886:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   4088a:	2b00      	cmp	r3, #0
   4088c:	d1a0      	bne.n	407d0 <__multiply+0x74>
   4088e:	3e01      	subs	r6, #1
   40890:	e79c      	b.n	407cc <__multiply+0x70>

00040892 <__lshift>:
   40892:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40896:	460c      	mov	r4, r1
   40898:	4607      	mov	r7, r0
   4089a:	4691      	mov	r9, r2
   4089c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   408a0:	6923      	ldr	r3, [r4, #16]
   408a2:	6849      	ldr	r1, [r1, #4]
   408a4:	eb03 1862 	add.w	r8, r3, r2, asr #5
   408a8:	68a3      	ldr	r3, [r4, #8]
   408aa:	f108 0601 	add.w	r6, r8, #1
   408ae:	42b3      	cmp	r3, r6
   408b0:	db3f      	blt.n	40932 <__lshift+0xa0>
   408b2:	4638      	mov	r0, r7
   408b4:	f7ff fe71 	bl	4059a <_Balloc>
   408b8:	2300      	movs	r3, #0
   408ba:	4605      	mov	r5, r0
   408bc:	f100 0114 	add.w	r1, r0, #20
   408c0:	f100 0210 	add.w	r2, r0, #16
   408c4:	4618      	mov	r0, r3
   408c6:	4553      	cmp	r3, sl
   408c8:	db36      	blt.n	40938 <__lshift+0xa6>
   408ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   408ce:	f104 0314 	add.w	r3, r4, #20
   408d2:	6920      	ldr	r0, [r4, #16]
   408d4:	f019 091f 	ands.w	r9, r9, #31
   408d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   408dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   408e0:	d02e      	beq.n	40940 <__lshift+0xae>
   408e2:	f1c9 0e20 	rsb	lr, r9, #32
   408e6:	468a      	mov	sl, r1
   408e8:	2200      	movs	r2, #0
   408ea:	6818      	ldr	r0, [r3, #0]
   408ec:	fa00 f009 	lsl.w	r0, r0, r9
   408f0:	4302      	orrs	r2, r0
   408f2:	f84a 2b04 	str.w	r2, [sl], #4
   408f6:	f853 2b04 	ldr.w	r2, [r3], #4
   408fa:	459c      	cmp	ip, r3
   408fc:	fa22 f20e 	lsr.w	r2, r2, lr
   40900:	d8f3      	bhi.n	408ea <__lshift+0x58>
   40902:	ebac 0304 	sub.w	r3, ip, r4
   40906:	f104 0015 	add.w	r0, r4, #21
   4090a:	3b15      	subs	r3, #21
   4090c:	f023 0303 	bic.w	r3, r3, #3
   40910:	3304      	adds	r3, #4
   40912:	4560      	cmp	r0, ip
   40914:	bf88      	it	hi
   40916:	2304      	movhi	r3, #4
   40918:	50ca      	str	r2, [r1, r3]
   4091a:	b10a      	cbz	r2, 40920 <__lshift+0x8e>
   4091c:	f108 0602 	add.w	r6, r8, #2
   40920:	3e01      	subs	r6, #1
   40922:	4638      	mov	r0, r7
   40924:	4621      	mov	r1, r4
   40926:	612e      	str	r6, [r5, #16]
   40928:	f7ff fe6b 	bl	40602 <_Bfree>
   4092c:	4628      	mov	r0, r5
   4092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40932:	3101      	adds	r1, #1
   40934:	005b      	lsls	r3, r3, #1
   40936:	e7ba      	b.n	408ae <__lshift+0x1c>
   40938:	3301      	adds	r3, #1
   4093a:	f842 0f04 	str.w	r0, [r2, #4]!
   4093e:	e7c2      	b.n	408c6 <__lshift+0x34>
   40940:	3904      	subs	r1, #4
   40942:	f853 2b04 	ldr.w	r2, [r3], #4
   40946:	459c      	cmp	ip, r3
   40948:	f841 2f04 	str.w	r2, [r1, #4]!
   4094c:	d8f9      	bhi.n	40942 <__lshift+0xb0>
   4094e:	e7e7      	b.n	40920 <__lshift+0x8e>

00040950 <__mcmp>:
   40950:	4603      	mov	r3, r0
   40952:	690a      	ldr	r2, [r1, #16]
   40954:	6900      	ldr	r0, [r0, #16]
   40956:	1a80      	subs	r0, r0, r2
   40958:	b530      	push	{r4, r5, lr}
   4095a:	d10d      	bne.n	40978 <__mcmp+0x28>
   4095c:	3314      	adds	r3, #20
   4095e:	3114      	adds	r1, #20
   40960:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   40964:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   40968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   4096c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   40970:	4295      	cmp	r5, r2
   40972:	d002      	beq.n	4097a <__mcmp+0x2a>
   40974:	d304      	bcc.n	40980 <__mcmp+0x30>
   40976:	2001      	movs	r0, #1
   40978:	bd30      	pop	{r4, r5, pc}
   4097a:	42a3      	cmp	r3, r4
   4097c:	d3f4      	bcc.n	40968 <__mcmp+0x18>
   4097e:	e7fb      	b.n	40978 <__mcmp+0x28>
   40980:	f04f 30ff 	mov.w	r0, #4294967295
   40984:	e7f8      	b.n	40978 <__mcmp+0x28>

00040986 <__mdiff>:
   40986:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4098a:	460c      	mov	r4, r1
   4098c:	4606      	mov	r6, r0
   4098e:	4611      	mov	r1, r2
   40990:	4692      	mov	sl, r2
   40992:	4620      	mov	r0, r4
   40994:	f7ff ffdc 	bl	40950 <__mcmp>
   40998:	1e05      	subs	r5, r0, #0
   4099a:	d108      	bne.n	409ae <__mdiff+0x28>
   4099c:	4629      	mov	r1, r5
   4099e:	4630      	mov	r0, r6
   409a0:	f7ff fdfb 	bl	4059a <_Balloc>
   409a4:	2301      	movs	r3, #1
   409a6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   409aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   409ae:	bfa3      	ittte	ge
   409b0:	4653      	movge	r3, sl
   409b2:	46a2      	movge	sl, r4
   409b4:	2500      	movge	r5, #0
   409b6:	2501      	movlt	r5, #1
   409b8:	bfa8      	it	ge
   409ba:	461c      	movge	r4, r3
   409bc:	f8da 1004 	ldr.w	r1, [sl, #4]
   409c0:	4630      	mov	r0, r6
   409c2:	f7ff fdea 	bl	4059a <_Balloc>
   409c6:	f104 0914 	add.w	r9, r4, #20
   409ca:	f8da 7010 	ldr.w	r7, [sl, #16]
   409ce:	f100 0814 	add.w	r8, r0, #20
   409d2:	6926      	ldr	r6, [r4, #16]
   409d4:	f10a 0210 	add.w	r2, sl, #16
   409d8:	60c5      	str	r5, [r0, #12]
   409da:	f10a 0514 	add.w	r5, sl, #20
   409de:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   409e2:	46c2      	mov	sl, r8
   409e4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   409e8:	f04f 0c00 	mov.w	ip, #0
   409ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
   409f0:	f859 3b04 	ldr.w	r3, [r9], #4
   409f4:	fa1f f18b 	uxth.w	r1, fp
   409f8:	454e      	cmp	r6, r9
   409fa:	4461      	add	r1, ip
   409fc:	fa1f fc83 	uxth.w	ip, r3
   40a00:	ea4f 4313 	mov.w	r3, r3, lsr #16
   40a04:	eba1 010c 	sub.w	r1, r1, ip
   40a08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   40a0c:	eb03 4321 	add.w	r3, r3, r1, asr #16
   40a10:	b289      	uxth	r1, r1
   40a12:	ea4f 4c23 	mov.w	ip, r3, asr #16
   40a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   40a1a:	f84a 3b04 	str.w	r3, [sl], #4
   40a1e:	d8e5      	bhi.n	409ec <__mdiff+0x66>
   40a20:	1b33      	subs	r3, r6, r4
   40a22:	3415      	adds	r4, #21
   40a24:	3b15      	subs	r3, #21
   40a26:	f023 0303 	bic.w	r3, r3, #3
   40a2a:	3304      	adds	r3, #4
   40a2c:	42a6      	cmp	r6, r4
   40a2e:	bf38      	it	cc
   40a30:	2304      	movcc	r3, #4
   40a32:	441d      	add	r5, r3
   40a34:	4443      	add	r3, r8
   40a36:	462c      	mov	r4, r5
   40a38:	461e      	mov	r6, r3
   40a3a:	4574      	cmp	r4, lr
   40a3c:	d30e      	bcc.n	40a5c <__mdiff+0xd6>
   40a3e:	f10e 0203 	add.w	r2, lr, #3
   40a42:	1b52      	subs	r2, r2, r5
   40a44:	3d03      	subs	r5, #3
   40a46:	f022 0203 	bic.w	r2, r2, #3
   40a4a:	45ae      	cmp	lr, r5
   40a4c:	bf38      	it	cc
   40a4e:	2200      	movcc	r2, #0
   40a50:	441a      	add	r2, r3
   40a52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   40a56:	b18b      	cbz	r3, 40a7c <__mdiff+0xf6>
   40a58:	6107      	str	r7, [r0, #16]
   40a5a:	e7a6      	b.n	409aa <__mdiff+0x24>
   40a5c:	f854 8b04 	ldr.w	r8, [r4], #4
   40a60:	fa1f f288 	uxth.w	r2, r8
   40a64:	4462      	add	r2, ip
   40a66:	1411      	asrs	r1, r2, #16
   40a68:	b292      	uxth	r2, r2
   40a6a:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   40a6e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   40a72:	ea4f 4c21 	mov.w	ip, r1, asr #16
   40a76:	f846 2b04 	str.w	r2, [r6], #4
   40a7a:	e7de      	b.n	40a3a <__mdiff+0xb4>
   40a7c:	3f01      	subs	r7, #1
   40a7e:	e7e8      	b.n	40a52 <__mdiff+0xcc>

00040a80 <__d2b>:
   40a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   40a84:	461c      	mov	r4, r3
   40a86:	2101      	movs	r1, #1
   40a88:	4690      	mov	r8, r2
   40a8a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
   40a8e:	f7ff fd84 	bl	4059a <_Balloc>
   40a92:	f3c4 0313 	ubfx	r3, r4, #0, #20
   40a96:	f3c4 540a 	ubfx	r4, r4, #20, #11
   40a9a:	4607      	mov	r7, r0
   40a9c:	bb2c      	cbnz	r4, 40aea <__d2b+0x6a>
   40a9e:	9301      	str	r3, [sp, #4]
   40aa0:	f1b8 0300 	subs.w	r3, r8, #0
   40aa4:	d026      	beq.n	40af4 <__d2b+0x74>
   40aa6:	4668      	mov	r0, sp
   40aa8:	9300      	str	r3, [sp, #0]
   40aaa:	f7ff fe20 	bl	406ee <__lo0bits>
   40aae:	9900      	ldr	r1, [sp, #0]
   40ab0:	b1f0      	cbz	r0, 40af0 <__d2b+0x70>
   40ab2:	9a01      	ldr	r2, [sp, #4]
   40ab4:	f1c0 0320 	rsb	r3, r0, #32
   40ab8:	fa02 f303 	lsl.w	r3, r2, r3
   40abc:	40c2      	lsrs	r2, r0
   40abe:	430b      	orrs	r3, r1
   40ac0:	9201      	str	r2, [sp, #4]
   40ac2:	617b      	str	r3, [r7, #20]
   40ac4:	9b01      	ldr	r3, [sp, #4]
   40ac6:	2b00      	cmp	r3, #0
   40ac8:	61bb      	str	r3, [r7, #24]
   40aca:	bf14      	ite	ne
   40acc:	2102      	movne	r1, #2
   40ace:	2101      	moveq	r1, #1
   40ad0:	6139      	str	r1, [r7, #16]
   40ad2:	b1c4      	cbz	r4, 40b06 <__d2b+0x86>
   40ad4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   40ad8:	4404      	add	r4, r0
   40ada:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   40ade:	6034      	str	r4, [r6, #0]
   40ae0:	6028      	str	r0, [r5, #0]
   40ae2:	4638      	mov	r0, r7
   40ae4:	b002      	add	sp, #8
   40ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   40aee:	e7d6      	b.n	40a9e <__d2b+0x1e>
   40af0:	6179      	str	r1, [r7, #20]
   40af2:	e7e7      	b.n	40ac4 <__d2b+0x44>
   40af4:	a801      	add	r0, sp, #4
   40af6:	f7ff fdfa 	bl	406ee <__lo0bits>
   40afa:	9b01      	ldr	r3, [sp, #4]
   40afc:	2101      	movs	r1, #1
   40afe:	3020      	adds	r0, #32
   40b00:	617b      	str	r3, [r7, #20]
   40b02:	6139      	str	r1, [r7, #16]
   40b04:	e7e5      	b.n	40ad2 <__d2b+0x52>
   40b06:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   40b0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   40b0e:	6030      	str	r0, [r6, #0]
   40b10:	6918      	ldr	r0, [r3, #16]
   40b12:	f7ff fdcc 	bl	406ae <__hi0bits>
   40b16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   40b1a:	6029      	str	r1, [r5, #0]
   40b1c:	e7e1      	b.n	40ae2 <__d2b+0x62>

00040b1e <_calloc_r>:
   40b1e:	b538      	push	{r3, r4, r5, lr}
   40b20:	fb02 f501 	mul.w	r5, r2, r1
   40b24:	4629      	mov	r1, r5
   40b26:	f7f8 ff63 	bl	399f0 <_malloc_r>
   40b2a:	4604      	mov	r4, r0
   40b2c:	b118      	cbz	r0, 40b36 <_calloc_r+0x18>
   40b2e:	462a      	mov	r2, r5
   40b30:	2100      	movs	r1, #0
   40b32:	f7ff fa05 	bl	3ff40 <memset>
   40b36:	4620      	mov	r0, r4
   40b38:	bd38      	pop	{r3, r4, r5, pc}

00040b3a <_realloc_r>:
   40b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40b3c:	4607      	mov	r7, r0
   40b3e:	4614      	mov	r4, r2
   40b40:	460e      	mov	r6, r1
   40b42:	b921      	cbnz	r1, 40b4e <_realloc_r+0x14>
   40b44:	4611      	mov	r1, r2
   40b46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   40b4a:	f7f8 bf51 	b.w	399f0 <_malloc_r>
   40b4e:	b922      	cbnz	r2, 40b5a <_realloc_r+0x20>
   40b50:	4625      	mov	r5, r4
   40b52:	f7f8 feff 	bl	39954 <_free_r>
   40b56:	4628      	mov	r0, r5
   40b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40b5a:	f000 f975 	bl	40e48 <_malloc_usable_size_r>
   40b5e:	42a0      	cmp	r0, r4
   40b60:	d20f      	bcs.n	40b82 <_realloc_r+0x48>
   40b62:	4621      	mov	r1, r4
   40b64:	4638      	mov	r0, r7
   40b66:	f7f8 ff43 	bl	399f0 <_malloc_r>
   40b6a:	4605      	mov	r5, r0
   40b6c:	2800      	cmp	r0, #0
   40b6e:	d0f2      	beq.n	40b56 <_realloc_r+0x1c>
   40b70:	4631      	mov	r1, r6
   40b72:	4622      	mov	r2, r4
   40b74:	f7ff f9c4 	bl	3ff00 <memcpy>
   40b78:	4631      	mov	r1, r6
   40b7a:	4638      	mov	r0, r7
   40b7c:	f7f8 feea 	bl	39954 <_free_r>
   40b80:	e7e9      	b.n	40b56 <_realloc_r+0x1c>
   40b82:	4635      	mov	r5, r6
   40b84:	e7e7      	b.n	40b56 <_realloc_r+0x1c>

00040b86 <__ssputs_r>:
   40b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40b8a:	688e      	ldr	r6, [r1, #8]
   40b8c:	4682      	mov	sl, r0
   40b8e:	460c      	mov	r4, r1
   40b90:	4690      	mov	r8, r2
   40b92:	429e      	cmp	r6, r3
   40b94:	461f      	mov	r7, r3
   40b96:	d838      	bhi.n	40c0a <__ssputs_r+0x84>
   40b98:	898a      	ldrh	r2, [r1, #12]
   40b9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
   40b9e:	d032      	beq.n	40c06 <__ssputs_r+0x80>
   40ba0:	6825      	ldr	r5, [r4, #0]
   40ba2:	3301      	adds	r3, #1
   40ba4:	6909      	ldr	r1, [r1, #16]
   40ba6:	eba5 0901 	sub.w	r9, r5, r1
   40baa:	6965      	ldr	r5, [r4, #20]
   40bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   40bb0:	444b      	add	r3, r9
   40bb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   40bb6:	106d      	asrs	r5, r5, #1
   40bb8:	429d      	cmp	r5, r3
   40bba:	bf38      	it	cc
   40bbc:	461d      	movcc	r5, r3
   40bbe:	0553      	lsls	r3, r2, #21
   40bc0:	d531      	bpl.n	40c26 <__ssputs_r+0xa0>
   40bc2:	4629      	mov	r1, r5
   40bc4:	f7f8 ff14 	bl	399f0 <_malloc_r>
   40bc8:	4606      	mov	r6, r0
   40bca:	b950      	cbnz	r0, 40be2 <__ssputs_r+0x5c>
   40bcc:	230c      	movs	r3, #12
   40bce:	f04f 30ff 	mov.w	r0, #4294967295
   40bd2:	f8ca 3000 	str.w	r3, [sl]
   40bd6:	89a3      	ldrh	r3, [r4, #12]
   40bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40bdc:	81a3      	strh	r3, [r4, #12]
   40bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40be2:	464a      	mov	r2, r9
   40be4:	6921      	ldr	r1, [r4, #16]
   40be6:	f7ff f98b 	bl	3ff00 <memcpy>
   40bea:	89a3      	ldrh	r3, [r4, #12]
   40bec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   40bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   40bf4:	81a3      	strh	r3, [r4, #12]
   40bf6:	6126      	str	r6, [r4, #16]
   40bf8:	444e      	add	r6, r9
   40bfa:	6165      	str	r5, [r4, #20]
   40bfc:	eba5 0509 	sub.w	r5, r5, r9
   40c00:	6026      	str	r6, [r4, #0]
   40c02:	463e      	mov	r6, r7
   40c04:	60a5      	str	r5, [r4, #8]
   40c06:	42be      	cmp	r6, r7
   40c08:	d900      	bls.n	40c0c <__ssputs_r+0x86>
   40c0a:	463e      	mov	r6, r7
   40c0c:	4632      	mov	r2, r6
   40c0e:	4641      	mov	r1, r8
   40c10:	6820      	ldr	r0, [r4, #0]
   40c12:	f7ff fca8 	bl	40566 <memmove>
   40c16:	68a3      	ldr	r3, [r4, #8]
   40c18:	6822      	ldr	r2, [r4, #0]
   40c1a:	2000      	movs	r0, #0
   40c1c:	1b9b      	subs	r3, r3, r6
   40c1e:	4432      	add	r2, r6
   40c20:	60a3      	str	r3, [r4, #8]
   40c22:	6022      	str	r2, [r4, #0]
   40c24:	e7db      	b.n	40bde <__ssputs_r+0x58>
   40c26:	462a      	mov	r2, r5
   40c28:	f7ff ff87 	bl	40b3a <_realloc_r>
   40c2c:	4606      	mov	r6, r0
   40c2e:	2800      	cmp	r0, #0
   40c30:	d1e1      	bne.n	40bf6 <__ssputs_r+0x70>
   40c32:	6921      	ldr	r1, [r4, #16]
   40c34:	4650      	mov	r0, sl
   40c36:	f7f8 fe8d 	bl	39954 <_free_r>
   40c3a:	e7c7      	b.n	40bcc <__ssputs_r+0x46>

00040c3c <_sungetc_r>:
   40c3c:	b538      	push	{r3, r4, r5, lr}
   40c3e:	1c4b      	adds	r3, r1, #1
   40c40:	4614      	mov	r4, r2
   40c42:	d103      	bne.n	40c4c <_sungetc_r+0x10>
   40c44:	f04f 35ff 	mov.w	r5, #4294967295
   40c48:	4628      	mov	r0, r5
   40c4a:	bd38      	pop	{r3, r4, r5, pc}
   40c4c:	8993      	ldrh	r3, [r2, #12]
   40c4e:	b2cd      	uxtb	r5, r1
   40c50:	f023 0320 	bic.w	r3, r3, #32
   40c54:	8193      	strh	r3, [r2, #12]
   40c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
   40c58:	6852      	ldr	r2, [r2, #4]
   40c5a:	b18b      	cbz	r3, 40c80 <_sungetc_r+0x44>
   40c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   40c5e:	4293      	cmp	r3, r2
   40c60:	dd08      	ble.n	40c74 <_sungetc_r+0x38>
   40c62:	6823      	ldr	r3, [r4, #0]
   40c64:	1e5a      	subs	r2, r3, #1
   40c66:	6022      	str	r2, [r4, #0]
   40c68:	f803 5c01 	strb.w	r5, [r3, #-1]
   40c6c:	6863      	ldr	r3, [r4, #4]
   40c6e:	3301      	adds	r3, #1
   40c70:	6063      	str	r3, [r4, #4]
   40c72:	e7e9      	b.n	40c48 <_sungetc_r+0xc>
   40c74:	4621      	mov	r1, r4
   40c76:	f000 f89e 	bl	40db6 <__submore>
   40c7a:	2800      	cmp	r0, #0
   40c7c:	d0f1      	beq.n	40c62 <_sungetc_r+0x26>
   40c7e:	e7e1      	b.n	40c44 <_sungetc_r+0x8>
   40c80:	6921      	ldr	r1, [r4, #16]
   40c82:	6823      	ldr	r3, [r4, #0]
   40c84:	b151      	cbz	r1, 40c9c <_sungetc_r+0x60>
   40c86:	4299      	cmp	r1, r3
   40c88:	d208      	bcs.n	40c9c <_sungetc_r+0x60>
   40c8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   40c8e:	42a9      	cmp	r1, r5
   40c90:	d104      	bne.n	40c9c <_sungetc_r+0x60>
   40c92:	3b01      	subs	r3, #1
   40c94:	3201      	adds	r2, #1
   40c96:	6023      	str	r3, [r4, #0]
   40c98:	6062      	str	r2, [r4, #4]
   40c9a:	e7d5      	b.n	40c48 <_sungetc_r+0xc>
   40c9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   40ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   40ca4:	6363      	str	r3, [r4, #52]	; 0x34
   40ca6:	2303      	movs	r3, #3
   40ca8:	63a3      	str	r3, [r4, #56]	; 0x38
   40caa:	4623      	mov	r3, r4
   40cac:	f803 5f46 	strb.w	r5, [r3, #70]!
   40cb0:	6023      	str	r3, [r4, #0]
   40cb2:	2301      	movs	r3, #1
   40cb4:	e7dc      	b.n	40c70 <_sungetc_r+0x34>

00040cb6 <__ssrefill_r>:
   40cb6:	b510      	push	{r4, lr}
   40cb8:	460c      	mov	r4, r1
   40cba:	6b49      	ldr	r1, [r1, #52]	; 0x34
   40cbc:	b169      	cbz	r1, 40cda <__ssrefill_r+0x24>
   40cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   40cc2:	4299      	cmp	r1, r3
   40cc4:	d001      	beq.n	40cca <__ssrefill_r+0x14>
   40cc6:	f7f8 fe45 	bl	39954 <_free_r>
   40cca:	2000      	movs	r0, #0
   40ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
   40cce:	6360      	str	r0, [r4, #52]	; 0x34
   40cd0:	6063      	str	r3, [r4, #4]
   40cd2:	b113      	cbz	r3, 40cda <__ssrefill_r+0x24>
   40cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   40cd6:	6023      	str	r3, [r4, #0]
   40cd8:	bd10      	pop	{r4, pc}
   40cda:	6923      	ldr	r3, [r4, #16]
   40cdc:	f04f 30ff 	mov.w	r0, #4294967295
   40ce0:	6023      	str	r3, [r4, #0]
   40ce2:	2300      	movs	r3, #0
   40ce4:	6063      	str	r3, [r4, #4]
   40ce6:	89a3      	ldrh	r3, [r4, #12]
   40ce8:	f043 0320 	orr.w	r3, r3, #32
   40cec:	81a3      	strh	r3, [r4, #12]
   40cee:	e7f3      	b.n	40cd8 <__ssrefill_r+0x22>

00040cf0 <__sccl>:
   40cf0:	b570      	push	{r4, r5, r6, lr}
   40cf2:	780b      	ldrb	r3, [r1, #0]
   40cf4:	4604      	mov	r4, r0
   40cf6:	2b5e      	cmp	r3, #94	; 0x5e
   40cf8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   40cfc:	bf13      	iteet	ne
   40cfe:	1c48      	addne	r0, r1, #1
   40d00:	1c88      	addeq	r0, r1, #2
   40d02:	784b      	ldrbeq	r3, [r1, #1]
   40d04:	2200      	movne	r2, #0
   40d06:	bf08      	it	eq
   40d08:	2201      	moveq	r2, #1
   40d0a:	1e61      	subs	r1, r4, #1
   40d0c:	f801 2f01 	strb.w	r2, [r1, #1]!
   40d10:	42a9      	cmp	r1, r5
   40d12:	d1fb      	bne.n	40d0c <__sccl+0x1c>
   40d14:	b90b      	cbnz	r3, 40d1a <__sccl+0x2a>
   40d16:	3801      	subs	r0, #1
   40d18:	bd70      	pop	{r4, r5, r6, pc}
   40d1a:	f082 0101 	eor.w	r1, r2, #1
   40d1e:	1c42      	adds	r2, r0, #1
   40d20:	54e1      	strb	r1, [r4, r3]
   40d22:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   40d26:	1e56      	subs	r6, r2, #1
   40d28:	4610      	mov	r0, r2
   40d2a:	2d2d      	cmp	r5, #45	; 0x2d
   40d2c:	d006      	beq.n	40d3c <__sccl+0x4c>
   40d2e:	2d5d      	cmp	r5, #93	; 0x5d
   40d30:	d0f2      	beq.n	40d18 <__sccl+0x28>
   40d32:	b90d      	cbnz	r5, 40d38 <__sccl+0x48>
   40d34:	4630      	mov	r0, r6
   40d36:	e7ef      	b.n	40d18 <__sccl+0x28>
   40d38:	462b      	mov	r3, r5
   40d3a:	e7f0      	b.n	40d1e <__sccl+0x2e>
   40d3c:	7816      	ldrb	r6, [r2, #0]
   40d3e:	2e5d      	cmp	r6, #93	; 0x5d
   40d40:	d0fa      	beq.n	40d38 <__sccl+0x48>
   40d42:	42b3      	cmp	r3, r6
   40d44:	dcf8      	bgt.n	40d38 <__sccl+0x48>
   40d46:	4618      	mov	r0, r3
   40d48:	3001      	adds	r0, #1
   40d4a:	4286      	cmp	r6, r0
   40d4c:	5421      	strb	r1, [r4, r0]
   40d4e:	dcfb      	bgt.n	40d48 <__sccl+0x58>
   40d50:	43d8      	mvns	r0, r3
   40d52:	1c5d      	adds	r5, r3, #1
   40d54:	3202      	adds	r2, #2
   40d56:	4430      	add	r0, r6
   40d58:	42b3      	cmp	r3, r6
   40d5a:	bfa8      	it	ge
   40d5c:	2000      	movge	r0, #0
   40d5e:	182b      	adds	r3, r5, r0
   40d60:	e7df      	b.n	40d22 <__sccl+0x32>

00040d62 <_raise_r>:
   40d62:	291f      	cmp	r1, #31
   40d64:	b538      	push	{r3, r4, r5, lr}
   40d66:	4604      	mov	r4, r0
   40d68:	460d      	mov	r5, r1
   40d6a:	d904      	bls.n	40d76 <_raise_r+0x14>
   40d6c:	2316      	movs	r3, #22
   40d6e:	6003      	str	r3, [r0, #0]
   40d70:	f04f 30ff 	mov.w	r0, #4294967295
   40d74:	bd38      	pop	{r3, r4, r5, pc}
   40d76:	6c42      	ldr	r2, [r0, #68]	; 0x44
   40d78:	b112      	cbz	r2, 40d80 <_raise_r+0x1e>
   40d7a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   40d7e:	b94b      	cbnz	r3, 40d94 <_raise_r+0x32>
   40d80:	4620      	mov	r0, r4
   40d82:	f000 f816 	bl	40db2 <_getpid_r>
   40d86:	462a      	mov	r2, r5
   40d88:	4601      	mov	r1, r0
   40d8a:	4620      	mov	r0, r4
   40d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   40d90:	f7fa bc20 	b.w	3b5d4 <_kill_r>
   40d94:	2b01      	cmp	r3, #1
   40d96:	d00a      	beq.n	40dae <_raise_r+0x4c>
   40d98:	1c59      	adds	r1, r3, #1
   40d9a:	d103      	bne.n	40da4 <_raise_r+0x42>
   40d9c:	2316      	movs	r3, #22
   40d9e:	6003      	str	r3, [r0, #0]
   40da0:	2001      	movs	r0, #1
   40da2:	e7e7      	b.n	40d74 <_raise_r+0x12>
   40da4:	2400      	movs	r4, #0
   40da6:	4628      	mov	r0, r5
   40da8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   40dac:	4798      	blx	r3
   40dae:	2000      	movs	r0, #0
   40db0:	e7e0      	b.n	40d74 <_raise_r+0x12>

00040db2 <_getpid_r>:
   40db2:	f7fb bd5a 	b.w	3c86a <_getpid>

00040db6 <__submore>:
   40db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40dba:	460c      	mov	r4, r1
   40dbc:	6b49      	ldr	r1, [r1, #52]	; 0x34
   40dbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   40dc2:	4299      	cmp	r1, r3
   40dc4:	d11a      	bne.n	40dfc <__submore+0x46>
   40dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   40dca:	f7f8 fe11 	bl	399f0 <_malloc_r>
   40dce:	b918      	cbnz	r0, 40dd8 <__submore+0x22>
   40dd0:	f04f 30ff 	mov.w	r0, #4294967295
   40dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   40ddc:	6360      	str	r0, [r4, #52]	; 0x34
   40dde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   40de2:	63a3      	str	r3, [r4, #56]	; 0x38
   40de4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   40de8:	7083      	strb	r3, [r0, #2]
   40dea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   40dee:	7043      	strb	r3, [r0, #1]
   40df0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   40df4:	7003      	strb	r3, [r0, #0]
   40df6:	6020      	str	r0, [r4, #0]
   40df8:	2000      	movs	r0, #0
   40dfa:	e7eb      	b.n	40dd4 <__submore+0x1e>
   40dfc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   40dfe:	0077      	lsls	r7, r6, #1
   40e00:	463a      	mov	r2, r7
   40e02:	f7ff fe9a 	bl	40b3a <_realloc_r>
   40e06:	4605      	mov	r5, r0
   40e08:	2800      	cmp	r0, #0
   40e0a:	d0e1      	beq.n	40dd0 <__submore+0x1a>
   40e0c:	eb00 0806 	add.w	r8, r0, r6
   40e10:	4601      	mov	r1, r0
   40e12:	4632      	mov	r2, r6
   40e14:	4640      	mov	r0, r8
   40e16:	f7ff f873 	bl	3ff00 <memcpy>
   40e1a:	f8c4 8000 	str.w	r8, [r4]
   40e1e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   40e22:	e7e9      	b.n	40df8 <__submore+0x42>

00040e24 <__ascii_mbtowc>:
   40e24:	b082      	sub	sp, #8
   40e26:	b901      	cbnz	r1, 40e2a <__ascii_mbtowc+0x6>
   40e28:	a901      	add	r1, sp, #4
   40e2a:	b142      	cbz	r2, 40e3e <__ascii_mbtowc+0x1a>
   40e2c:	b14b      	cbz	r3, 40e42 <__ascii_mbtowc+0x1e>
   40e2e:	7813      	ldrb	r3, [r2, #0]
   40e30:	600b      	str	r3, [r1, #0]
   40e32:	7812      	ldrb	r2, [r2, #0]
   40e34:	1e10      	subs	r0, r2, #0
   40e36:	bf18      	it	ne
   40e38:	2001      	movne	r0, #1
   40e3a:	b002      	add	sp, #8
   40e3c:	4770      	bx	lr
   40e3e:	4610      	mov	r0, r2
   40e40:	e7fb      	b.n	40e3a <__ascii_mbtowc+0x16>
   40e42:	f06f 0001 	mvn.w	r0, #1
   40e46:	e7f8      	b.n	40e3a <__ascii_mbtowc+0x16>

00040e48 <_malloc_usable_size_r>:
   40e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
   40e4c:	1f18      	subs	r0, r3, #4
   40e4e:	2b00      	cmp	r3, #0
   40e50:	bfbc      	itt	lt
   40e52:	580b      	ldrlt	r3, [r1, r0]
   40e54:	18c0      	addlt	r0, r0, r3
   40e56:	4770      	bx	lr

00040e58 <__ascii_wctomb>:
   40e58:	4603      	mov	r3, r0
   40e5a:	4608      	mov	r0, r1
   40e5c:	b141      	cbz	r1, 40e70 <__ascii_wctomb+0x18>
   40e5e:	2aff      	cmp	r2, #255	; 0xff
   40e60:	d904      	bls.n	40e6c <__ascii_wctomb+0x14>
   40e62:	228a      	movs	r2, #138	; 0x8a
   40e64:	f04f 30ff 	mov.w	r0, #4294967295
   40e68:	601a      	str	r2, [r3, #0]
   40e6a:	4770      	bx	lr
   40e6c:	2001      	movs	r0, #1
   40e6e:	700a      	strb	r2, [r1, #0]
   40e70:	4770      	bx	lr
	...

00040e74 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   40e74:	f7fd be6b 	b.w	3eb4e <SystemInit>
