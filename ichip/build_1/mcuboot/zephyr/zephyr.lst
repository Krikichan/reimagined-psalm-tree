
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	2000fce8 	.word	0x2000fce8
   4:	00002121 	.word	0x00002121
   8:	00006553 	.word	0x00006553
   c:	000020f5 	.word	0x000020f5
  10:	000020f5 	.word	0x000020f5
  14:	000020f5 	.word	0x000020f5
  18:	000020f5 	.word	0x000020f5
  1c:	000020f5 	.word	0x000020f5
	...
  2c:	00001cad 	.word	0x00001cad
  30:	000020f5 	.word	0x000020f5
  34:	00000000 	.word	0x00000000
  38:	000020f5 	.word	0x000020f5
  3c:	000020f5 	.word	0x000020f5

00000040 <_irq_vector_table>:
  40:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  50:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  60:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  70:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  80:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  90:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  a0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  b0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  c0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  d0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  e0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
  f0:	00001d0d 00001d0d 00001d0d 00001d0d     ................
 100:	00001d0d 00001d0d 00001d0d 00001d0d     ................
 110:	00001d0d 00001d0d 00001d0d 00001d0d     ................
 120:	00001d0d 00001d0d 00001d0d 00001d0d     ................
 130:	00001d0d 00001d0d 00001d0d 00001d0d     ................
 140:	00001d0d                                ....

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b96c 	b.w	434 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9d08      	ldr	r5, [sp, #32]
     17a:	4604      	mov	r4, r0
     17c:	4688      	mov	r8, r1
     17e:	2b00      	cmp	r3, #0
     180:	d17d      	bne.n	27e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7e>
     182:	428a      	cmp	r2, r1
     184:	4617      	mov	r7, r2
     186:	d93f      	bls.n	208 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x8>
     188:	fab2 f282 	clz	r2, r2
     18c:	b142      	cbz	r2, 1a0 <__udivmoddi4+0x2c>
     18e:	f1c2 0020 	rsb	r0, r2, #32
     192:	4091      	lsls	r1, r2
     194:	4097      	lsls	r7, r2
     196:	fa24 f000 	lsr.w	r0, r4, r0
     19a:	4094      	lsls	r4, r2
     19c:	ea40 0801 	orr.w	r8, r0, r1
     1a0:	ea4f 4c17 	mov.w	ip, r7, lsr #16
     1a4:	0c23      	lsrs	r3, r4, #16
     1a6:	fa1f fe87 	uxth.w	lr, r7
     1aa:	fbb8 f6fc 	udiv	r6, r8, ip
     1ae:	fb0c 8116 	mls	r1, ip, r6, r8
     1b2:	fb06 f00e 	mul.w	r0, r6, lr
     1b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     1ba:	4298      	cmp	r0, r3
     1bc:	d905      	bls.n	1ca <__udivmoddi4+0x56>
     1be:	18fb      	adds	r3, r7, r3
     1c0:	d202      	bcs.n	1c8 <__udivmoddi4+0x54>
     1c2:	4298      	cmp	r0, r3
     1c4:	f200 8124 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1c8:	3e01      	subs	r6, #1
     1ca:	1a19      	subs	r1, r3, r0
     1cc:	b2a3      	uxth	r3, r4
     1ce:	fbb1 f0fc 	udiv	r0, r1, ip
     1d2:	fb0c 1110 	mls	r1, ip, r0, r1
     1d6:	fb00 fe0e 	mul.w	lr, r0, lr
     1da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1de:	45a6      	cmp	lr, r4
     1e0:	d905      	bls.n	1ee <__udivmoddi4+0x7a>
     1e2:	193c      	adds	r4, r7, r4
     1e4:	d202      	bcs.n	1ec <__udivmoddi4+0x78>
     1e6:	45a6      	cmp	lr, r4
     1e8:	f200 810f 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     1ec:	3801      	subs	r0, #1
     1ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1f2:	eba4 040e 	sub.w	r4, r4, lr
     1f6:	2600      	movs	r6, #0
     1f8:	b11d      	cbz	r5, 202 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2>
     1fa:	40d4      	lsrs	r4, r2
     1fc:	2300      	movs	r3, #0
     1fe:	e9c5 4300 	strd	r4, r3, [r5]
     202:	4631      	mov	r1, r6
     204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     208:	b902      	cbnz	r2, 20c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xc>
     20a:	deff      	udf	#255	; 0xff
     20c:	fab2 f282 	clz	r2, r2
     210:	2a00      	cmp	r2, #0
     212:	d150      	bne.n	2b6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x36>
     214:	1bcb      	subs	r3, r1, r7
     216:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     21a:	fa1f f887 	uxth.w	r8, r7
     21e:	2601      	movs	r6, #1
     220:	0c21      	lsrs	r1, r4, #16
     222:	fbb3 fcfe 	udiv	ip, r3, lr
     226:	fb0e 301c 	mls	r0, lr, ip, r3
     22a:	460b      	mov	r3, r1
     22c:	fb08 f90c 	mul.w	r9, r8, ip
     230:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     234:	4589      	cmp	r9, r1
     236:	d90a      	bls.n	24e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x4e>
     238:	1879      	adds	r1, r7, r1
     23a:	bf2c      	ite	cs
     23c:	2301      	movcs	r3, #1
     23e:	2300      	movcc	r3, #0
     240:	4589      	cmp	r9, r1
     242:	d902      	bls.n	24a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x4a>
     244:	2b00      	cmp	r3, #0
     246:	f000 80d9 	beq.w	3fc <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xfc>
     24a:	f10c 3cff 	add.w	ip, ip, #4294967295
     24e:	eba1 0109 	sub.w	r1, r1, r9
     252:	b2a3      	uxth	r3, r4
     254:	fbb1 f0fe 	udiv	r0, r1, lr
     258:	fb0e 1110 	mls	r1, lr, r0, r1
     25c:	fb08 f800 	mul.w	r8, r8, r0
     260:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     264:	45a0      	cmp	r8, r4
     266:	d905      	bls.n	274 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x74>
     268:	193c      	adds	r4, r7, r4
     26a:	d202      	bcs.n	272 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x72>
     26c:	45a0      	cmp	r8, r4
     26e:	f200 80c9 	bhi.w	404 <CONFIG_FLASH_SIZE+0x4>
     272:	3801      	subs	r0, #1
     274:	eba4 0408 	sub.w	r4, r4, r8
     278:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     27c:	e7bc      	b.n	1f8 <__udivmoddi4+0x84>
     27e:	428b      	cmp	r3, r1
     280:	d909      	bls.n	296 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x16>
     282:	2d00      	cmp	r5, #0
     284:	f000 80b1 	beq.w	3ea <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xea>
     288:	2600      	movs	r6, #0
     28a:	e9c5 0100 	strd	r0, r1, [r5]
     28e:	4630      	mov	r0, r6
     290:	4631      	mov	r1, r6
     292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     296:	fab3 f683 	clz	r6, r3
     29a:	2e00      	cmp	r6, #0
     29c:	d146      	bne.n	32c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2c>
     29e:	428b      	cmp	r3, r1
     2a0:	f0c0 80a6 	bcc.w	3f0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf0>
     2a4:	4282      	cmp	r2, r0
     2a6:	f240 80a3 	bls.w	3f0 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf0>
     2aa:	4630      	mov	r0, r6
     2ac:	2d00      	cmp	r5, #0
     2ae:	d0a8      	beq.n	202 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2>
     2b0:	e9c5 4800 	strd	r4, r8, [r5]
     2b4:	e7a5      	b.n	202 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2>
     2b6:	4097      	lsls	r7, r2
     2b8:	f1c2 0320 	rsb	r3, r2, #32
     2bc:	fa01 f002 	lsl.w	r0, r1, r2
     2c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c4:	40d9      	lsrs	r1, r3
     2c6:	fa24 f303 	lsr.w	r3, r4, r3
     2ca:	fa1f f887 	uxth.w	r8, r7
     2ce:	4094      	lsls	r4, r2
     2d0:	4303      	orrs	r3, r0
     2d2:	fbb1 f0fe 	udiv	r0, r1, lr
     2d6:	0c1e      	lsrs	r6, r3, #16
     2d8:	fb0e 1110 	mls	r1, lr, r0, r1
     2dc:	fb00 fc08 	mul.w	ip, r0, r8
     2e0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
     2e4:	458c      	cmp	ip, r1
     2e6:	d909      	bls.n	2fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7c>
     2e8:	1879      	adds	r1, r7, r1
     2ea:	bf2c      	ite	cs
     2ec:	2601      	movcs	r6, #1
     2ee:	2600      	movcc	r6, #0
     2f0:	458c      	cmp	ip, r1
     2f2:	d902      	bls.n	2fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7a>
     2f4:	2e00      	cmp	r6, #0
     2f6:	f000 8093 	beq.w	420 <CONFIG_FLASH_SIZE+0x20>
     2fa:	3801      	subs	r0, #1
     2fc:	eba1 010c 	sub.w	r1, r1, ip
     300:	b29b      	uxth	r3, r3
     302:	fbb1 f6fe 	udiv	r6, r1, lr
     306:	fb0e 1116 	mls	r1, lr, r6, r1
     30a:	fb06 fc08 	mul.w	ip, r6, r8
     30e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
     312:	458c      	cmp	ip, r1
     314:	d905      	bls.n	322 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x22>
     316:	1879      	adds	r1, r7, r1
     318:	d202      	bcs.n	320 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x20>
     31a:	458c      	cmp	ip, r1
     31c:	f200 8087 	bhi.w	42e <CONFIG_FLASH_SIZE+0x2e>
     320:	3e01      	subs	r6, #1
     322:	eba1 030c 	sub.w	r3, r1, ip
     326:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     32a:	e779      	b.n	220 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x20>
     32c:	f1c6 0720 	rsb	r7, r6, #32
     330:	fa03 f406 	lsl.w	r4, r3, r6
     334:	fa02 fc06 	lsl.w	ip, r2, r6
     338:	fa01 fe06 	lsl.w	lr, r1, r6
     33c:	40fa      	lsrs	r2, r7
     33e:	fa20 f807 	lsr.w	r8, r0, r7
     342:	40f9      	lsrs	r1, r7
     344:	fa00 f306 	lsl.w	r3, r0, r6
     348:	4322      	orrs	r2, r4
     34a:	ea48 040e 	orr.w	r4, r8, lr
     34e:	ea4f 4812 	mov.w	r8, r2, lsr #16
     352:	ea4f 4e14 	mov.w	lr, r4, lsr #16
     356:	fa1f f982 	uxth.w	r9, r2
     35a:	fbb1 faf8 	udiv	sl, r1, r8
     35e:	fb08 111a 	mls	r1, r8, sl, r1
     362:	fb0a f009 	mul.w	r0, sl, r9
     366:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
     36a:	4570      	cmp	r0, lr
     36c:	d90a      	bls.n	384 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x84>
     36e:	eb12 0e0e 	adds.w	lr, r2, lr
     372:	bf2c      	ite	cs
     374:	2101      	movcs	r1, #1
     376:	2100      	movcc	r1, #0
     378:	4570      	cmp	r0, lr
     37a:	d901      	bls.n	380 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x80>
     37c:	2900      	cmp	r1, #0
     37e:	d052      	beq.n	426 <CONFIG_FLASH_SIZE+0x26>
     380:	f10a 3aff 	add.w	sl, sl, #4294967295
     384:	ebae 0e00 	sub.w	lr, lr, r0
     388:	b2a4      	uxth	r4, r4
     38a:	fbbe f0f8 	udiv	r0, lr, r8
     38e:	fb08 ee10 	mls	lr, r8, r0, lr
     392:	fb00 f909 	mul.w	r9, r0, r9
     396:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
     39a:	45f1      	cmp	r9, lr
     39c:	d905      	bls.n	3aa <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xaa>
     39e:	eb12 0e0e 	adds.w	lr, r2, lr
     3a2:	d201      	bcs.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     3a4:	45f1      	cmp	r9, lr
     3a6:	d838      	bhi.n	41a <CONFIG_FLASH_SIZE+0x1a>
     3a8:	3801      	subs	r0, #1
     3aa:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3ae:	ebae 0e09 	sub.w	lr, lr, r9
     3b2:	fba0 890c 	umull	r8, r9, r0, ip
     3b6:	45ce      	cmp	lr, r9
     3b8:	4641      	mov	r1, r8
     3ba:	464c      	mov	r4, r9
     3bc:	d302      	bcc.n	3c4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xc4>
     3be:	d106      	bne.n	3ce <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xce>
     3c0:	4543      	cmp	r3, r8
     3c2:	d204      	bcs.n	3ce <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xce>
     3c4:	3801      	subs	r0, #1
     3c6:	ebb8 010c 	subs.w	r1, r8, ip
     3ca:	eb69 0402 	sbc.w	r4, r9, r2
     3ce:	b315      	cbz	r5, 416 <CONFIG_FLASH_SIZE+0x16>
     3d0:	1a5a      	subs	r2, r3, r1
     3d2:	eb6e 0e04 	sbc.w	lr, lr, r4
     3d6:	40f2      	lsrs	r2, r6
     3d8:	fa0e f707 	lsl.w	r7, lr, r7
     3dc:	fa2e f306 	lsr.w	r3, lr, r6
     3e0:	2600      	movs	r6, #0
     3e2:	4317      	orrs	r7, r2
     3e4:	e9c5 7300 	strd	r7, r3, [r5]
     3e8:	e70b      	b.n	202 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2>
     3ea:	462e      	mov	r6, r5
     3ec:	4628      	mov	r0, r5
     3ee:	e708      	b.n	202 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2>
     3f0:	1a84      	subs	r4, r0, r2
     3f2:	eb61 0103 	sbc.w	r1, r1, r3
     3f6:	2001      	movs	r0, #1
     3f8:	4688      	mov	r8, r1
     3fa:	e757      	b.n	2ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x2c>
     3fc:	f1ac 0c02 	sub.w	ip, ip, #2
     400:	4439      	add	r1, r7
     402:	e724      	b.n	24e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x4e>
     404:	3802      	subs	r0, #2
     406:	443c      	add	r4, r7
     408:	e734      	b.n	274 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x74>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e6ee      	b.n	1ee <__udivmoddi4+0x7a>
     410:	3e02      	subs	r6, #2
     412:	443b      	add	r3, r7
     414:	e6d9      	b.n	1ca <__udivmoddi4+0x56>
     416:	462e      	mov	r6, r5
     418:	e6f3      	b.n	202 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x2>
     41a:	3802      	subs	r0, #2
     41c:	4496      	add	lr, r2
     41e:	e7c4      	b.n	3aa <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xaa>
     420:	3802      	subs	r0, #2
     422:	4439      	add	r1, r7
     424:	e76a      	b.n	2fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7c>
     426:	f1aa 0a02 	sub.w	sl, sl, #2
     42a:	4496      	add	lr, r2
     42c:	e7aa      	b.n	384 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x84>
     42e:	3e02      	subs	r6, #2
     430:	4439      	add	r1, r7
     432:	e776      	b.n	322 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x22>

00000434 <__aeabi_idiv0>:
     434:	4770      	bx	lr
     436:	bf00      	nop

00000438 <main>:
    return detect_value == expected;
}
#endif

void main(void)
{
     438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     43a:	4b30      	ldr	r3, [pc, #192]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     43c:	4a30      	ldr	r2, [pc, #192]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     43e:	4831      	ldr	r0, [pc, #196]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     440:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     444:	2149      	movs	r1, #73	; 0x49
     446:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     44a:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     44e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     452:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     456:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     45a:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     45e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     462:	f005 ffb2 	bl	63ca <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     466:	f005 fb68 	bl	5b3a <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     46a:	4827      	ldr	r0, [pc, #156]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     46c:	f000 f85c 	bl	528 <flash_device_get_binding>
     470:	b928      	cbnz	r0, 47e <FIH_LABEL_FIH_CALL_START_249>
        BOOT_LOG_ERR("Flash device %s not found",
     472:	2145      	movs	r1, #69	; 0x45
     474:	4a24      	ldr	r2, [pc, #144]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     476:	4825      	ldr	r0, [pc, #148]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     478:	f005 ffa7 	bl	63ca <z_log_minimal_printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     47c:	e7fe      	b.n	47c <main+0x44>

0000047e <FIH_LABEL_FIH_CALL_START_249>:
        wait_for_usb_dfu(K_MSEC(CONFIG_BOOT_USB_DFU_WAIT_DELAY_MS));
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     47e:	a801      	add	r0, sp, #4
     480:	f000 fc6e 	bl	d60 <boot_go>

00000484 <FIH_LABEL_FIH_CALL_END_262>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     484:	4b22      	ldr	r3, [pc, #136]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     486:	681b      	ldr	r3, [r3, #0]
     488:	4283      	cmp	r3, r0
     48a:	d004      	beq.n	496 <FIH_LABEL_FIH_CALL_END_262+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     48c:	2145      	movs	r1, #69	; 0x45
     48e:	4821      	ldr	r0, [pc, #132]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     490:	f005 ff9b 	bl	63ca <z_log_minimal_printk>
        FIH_PANIC;
     494:	e7fe      	b.n	494 <FIH_LABEL_FIH_CALL_END_262+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     496:	2149      	movs	r1, #73	; 0x49
     498:	9a03      	ldr	r2, [sp, #12]
     49a:	481f      	ldr	r0, [pc, #124]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     49c:	f005 ff95 	bl	63ca <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     4a0:	2149      	movs	r1, #73	; 0x49
     4a2:	481e      	ldr	r0, [pc, #120]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4a4:	f005 ff91 	bl	63ca <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4ac:	2000      	movs	r0, #0
     4ae:	f002 ff79 	bl	33a4 <fprotect_area>

    if (rc != 0) {
     4b2:	b120      	cbz	r0, 4be <FIH_LABEL_FIH_CALL_END_262+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     4b4:	2145      	movs	r1, #69	; 0x45
     4b6:	481a      	ldr	r0, [pc, #104]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4b8:	f005 ff87 	bl	63ca <z_log_minimal_printk>
        while (1)
     4bc:	e7fe      	b.n	4bc <FIH_LABEL_FIH_CALL_END_262+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4be:	4669      	mov	r1, sp
     4c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4c4:	f000 f83c 	bl	540 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4c8:	9b00      	ldr	r3, [sp, #0]
     4ca:	9c03      	ldr	r4, [sp, #12]
     4cc:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4ce:	9b01      	ldr	r3, [sp, #4]
     4d0:	891d      	ldrh	r5, [r3, #8]
    nrf_cleanup_peripheral();
     4d2:	f000 ff29 	bl	1328 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     4d6:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4d8:	f04f 0220 	mov.w	r2, #32
     4dc:	f3ef 8311 	mrs	r3, BASEPRI
     4e0:	f382 8812 	msr	BASEPRI_MAX, r2
     4e4:	f3bf 8f6f 	isb	sy
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4e8:	5963      	ldr	r3, [r4, r5]
     4ea:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4ee:	6873      	ldr	r3, [r6, #4]
     4f0:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     4f2:	2145      	movs	r1, #69	; 0x45
     4f4:	480b      	ldr	r0, [pc, #44]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     4f6:	f005 ff68 	bl	63ca <z_log_minimal_printk>
    while (1)
     4fa:	e7fe      	b.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     4fc:	50018000 	.word	0x50018000
     500:	6e524635 	.word	0x6e524635
     504:	000071f8 	.word	0x000071f8
     508:	00007211 	.word	0x00007211
     50c:	00007224 	.word	0x00007224
     510:	2000c6cc 	.word	0x2000c6cc
     514:	00007243 	.word	0x00007243
     518:	00007266 	.word	0x00007266
     51c:	00007295 	.word	0x00007295
     520:	000072ba 	.word	0x000072ba
     524:	000072ed 	.word	0x000072ed

00000528 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     528:	b510      	push	{r4, lr}
    if (!flash_dev) {
     52a:	4c04      	ldr	r4, [pc, #16]	; (53c <flash_device_get_binding+0x14>)
     52c:	6823      	ldr	r3, [r4, #0]
     52e:	b913      	cbnz	r3, 536 <flash_device_get_binding+0xe>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     530:	f003 fda6 	bl	4080 <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     534:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     536:	6820      	ldr	r0, [r4, #0]
     538:	bd10      	pop	{r4, pc}
     53a:	bf00      	nop
     53c:	2000c6c8 	.word	0x2000c6c8

00000540 <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     540:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     542:	b140      	cbz	r0, 556 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     544:	4602      	mov	r2, r0
     546:	2300      	movs	r3, #0
     548:	4804      	ldr	r0, [pc, #16]	; (55c <flash_device_base+0x1c>)
     54a:	2145      	movs	r1, #69	; 0x45
     54c:	f005 ff3d 	bl	63ca <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     550:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     554:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     556:	6008      	str	r0, [r1, #0]
    return 0;
     558:	e7fc      	b.n	554 <flash_device_base+0x14>
     55a:	bf00      	nop
     55c:	00007310 	.word	0x00007310

00000560 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     564:	f8df 921c 	ldr.w	r9, [pc, #540]	; 784 <FIH_LABEL_FIH_CALL_END_933+0x2e>
{
     568:	b0dd      	sub	sp, #372	; 0x174
     56a:	4615      	mov	r5, r2
     56c:	e9dd 4868 	ldrd	r4, r8, [sp, #416]	; 0x1a0
     570:	461e      	mov	r6, r3
     572:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     576:	f8d9 7000 	ldr.w	r7, [r9]
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     57a:	f000 fea3 	bl	12c4 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     57e:	2201      	movs	r2, #1
     580:	4b7e      	ldr	r3, [pc, #504]	; (77c <FIH_LABEL_FIH_CALL_END_933+0x26>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     582:	a83c      	add	r0, sp, #240	; 0xf0
    NRF_CRYPTOCELL->ENABLE=1;
     584:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     588:	f004 fa06 	bl	4998 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     58c:	f8cd 9014 	str.w	r9, [sp, #20]
     590:	b13c      	cbz	r4, 5a2 <bootutil_img_validate+0x42>
     592:	f1b8 0f00 	cmp.w	r8, #0
     596:	dd04      	ble.n	5a2 <bootutil_img_validate+0x42>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     598:	4642      	mov	r2, r8
     59a:	4621      	mov	r1, r4
     59c:	a83c      	add	r0, sp, #240	; 0xf0
     59e:	f005 fe20 	bl	61e2 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     5a2:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     5a6:	896b      	ldrh	r3, [r5, #10]
    size = hdr_size = hdr->ih_hdr_size;
     5a8:	f8b5 8008 	ldrh.w	r8, [r5, #8]
     5ac:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     5ae:	68eb      	ldr	r3, [r5, #12]
     5b0:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     5b2:	45c8      	cmp	r8, r9
     5b4:	d84e      	bhi.n	654 <FIH_LABEL_FIH_CALL_END_387+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     5b6:	a90f      	add	r1, sp, #60	; 0x3c
     5b8:	a83c      	add	r0, sp, #240	; 0xf0
     5ba:	f004 fa5f 	bl	4a7c <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     5be:	2200      	movs	r2, #0
     5c0:	4b6e      	ldr	r3, [pc, #440]	; (77c <FIH_LABEL_FIH_CALL_END_933+0x26>)
     5c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     5c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     5ca:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
     5cc:	b123      	cbz	r3, 5d8 <bootutil_img_validate+0x78>
        memcpy(out_hash, hash, 32);
     5ce:	2220      	movs	r2, #32
     5d0:	4618      	mov	r0, r3
     5d2:	a90f      	add	r1, sp, #60	; 0x3c
     5d4:	f005 fff1 	bl	65ba <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     5d8:	2300      	movs	r3, #0
     5da:	4632      	mov	r2, r6
     5dc:	9300      	str	r3, [sp, #0]
     5de:	4629      	mov	r1, r5
     5e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5e4:	a809      	add	r0, sp, #36	; 0x24
     5e6:	f005 faa9 	bl	5b3c <bootutil_tlv_iter_begin>
    if (rc) {
     5ea:	4604      	mov	r4, r0
     5ec:	2800      	cmp	r0, #0
     5ee:	d144      	bne.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
    int key_id = -1;
     5f0:	f04f 35ff 	mov.w	r5, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5f4:	f8df a190 	ldr.w	sl, [pc, #400]	; 788 <FIH_LABEL_FIH_CALL_END_933+0x32>
     5f8:	f8df 8180 	ldr.w	r8, [pc, #384]	; 77c <FIH_LABEL_FIH_CALL_END_933+0x26>
    int sha256_valid = 0;
     5fc:	9003      	str	r0, [sp, #12]
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5fe:	f10d 031e 	add.w	r3, sp, #30
     602:	aa07      	add	r2, sp, #28
     604:	a908      	add	r1, sp, #32
     606:	a809      	add	r0, sp, #36	; 0x24
     608:	f005 fae4 	bl	5bd4 <bootutil_tlv_iter_next>
        if (rc < 0) {
     60c:	1e04      	subs	r4, r0, #0
     60e:	db34      	blt.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
        } else if (rc > 0) {
     610:	f040 80a4 	bne.w	75c <FIH_LABEL_FIH_CALL_END_933+0x6>
        if (type == IMAGE_TLV_SHA256) {
     614:	f8bd 901e 	ldrh.w	r9, [sp, #30]
     618:	f1b9 0f10 	cmp.w	r9, #16
     61c:	d138      	bne.n	690 <FIH_LABEL_FIH_CALL_END_387+0x4a>
            if (len != sizeof(hash)) {
     61e:	f8bd 901c 	ldrh.w	r9, [sp, #28]
     622:	f1b9 0f20 	cmp.w	r9, #32
     626:	f040 80a3 	bne.w	770 <FIH_LABEL_FIH_CALL_END_933+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     62a:	464b      	mov	r3, r9
     62c:	4630      	mov	r0, r6
     62e:	9908      	ldr	r1, [sp, #32]
     630:	aa3c      	add	r2, sp, #240	; 0xf0
     632:	f005 fed8 	bl	63e6 <flash_area_read>
            if (rc) {
     636:	4604      	mov	r4, r0
     638:	b9f8      	cbnz	r0, 67a <FIH_LABEL_FIH_CALL_END_387+0x34>

0000063a <FIH_LABEL_FIH_CALL_START_368>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     63a:	464a      	mov	r2, r9
     63c:	a93c      	add	r1, sp, #240	; 0xf0
     63e:	a80f      	add	r0, sp, #60	; 0x3c
     640:	f005 fb3f 	bl	5cc2 <boot_fih_memequal>
     644:	4604      	mov	r4, r0

00000646 <FIH_LABEL_FIH_CALL_END_387>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     646:	4b4e      	ldr	r3, [pc, #312]	; (780 <FIH_LABEL_FIH_CALL_END_933+0x2a>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	4283      	cmp	r3, r0
     64c:	d115      	bne.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
            sha256_valid = 1;
     64e:	2301      	movs	r3, #1
     650:	9303      	str	r3, [sp, #12]
     652:	e7d4      	b.n	5fe <bootutil_img_validate+0x9e>
        blk_sz = size - off;
     654:	9a67      	ldr	r2, [sp, #412]	; 0x19c
     656:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     65a:	429a      	cmp	r2, r3
     65c:	bf28      	it	cs
     65e:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     660:	4649      	mov	r1, r9
     662:	4613      	mov	r3, r2
     664:	4692      	mov	sl, r2
     666:	4630      	mov	r0, r6
     668:	465a      	mov	r2, fp
     66a:	f005 febc 	bl	63e6 <flash_area_read>
        if (rc) {
     66e:	4604      	mov	r4, r0
     670:	b138      	cbz	r0, 682 <FIH_LABEL_FIH_CALL_END_387+0x3c>
     672:	2200      	movs	r2, #0
     674:	4b41      	ldr	r3, [pc, #260]	; (77c <FIH_LABEL_FIH_CALL_END_933+0x26>)
     676:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     67a:	4620      	mov	r0, r4
     67c:	b05d      	add	sp, #372	; 0x174
     67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     682:	4652      	mov	r2, sl
     684:	4659      	mov	r1, fp
     686:	a83c      	add	r0, sp, #240	; 0xf0
     688:	f005 fdab 	bl	61e2 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     68c:	44d1      	add	r9, sl
     68e:	e790      	b.n	5b2 <bootutil_img_validate+0x52>
        } else if (type == IMAGE_TLV_KEYHASH) {
     690:	f1b9 0f01 	cmp.w	r9, #1
     694:	d13f      	bne.n	716 <FIH_LABEL_FIH_CALL_END_387+0xd0>
            if (len > 32) {
     696:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     69a:	2b20      	cmp	r3, #32
     69c:	d868      	bhi.n	770 <FIH_LABEL_FIH_CALL_END_933+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     69e:	4630      	mov	r0, r6
     6a0:	9908      	ldr	r1, [sp, #32]
     6a2:	aa3c      	add	r2, sp, #240	; 0xf0
     6a4:	f005 fe9f 	bl	63e6 <flash_area_read>
            if (rc) {
     6a8:	4604      	mov	r4, r0
     6aa:	2800      	cmp	r0, #0
     6ac:	d1e5      	bne.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
            key_id = bootutil_find_key(buf, len);
     6ae:	f89d 501c 	ldrb.w	r5, [sp, #28]
    if (keyhash_len > 32) {
     6b2:	2d20      	cmp	r5, #32
     6b4:	d80a      	bhi.n	6cc <FIH_LABEL_FIH_CALL_END_387+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6b6:	f8da 3000 	ldr.w	r3, [sl]
     6ba:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 78c <FIH_LABEL_FIH_CALL_END_933+0x36>
     6be:	9304      	str	r3, [sp, #16]
     6c0:	9b04      	ldr	r3, [sp, #16]
     6c2:	429c      	cmp	r4, r3
     6c4:	db05      	blt.n	6d2 <FIH_LABEL_FIH_CALL_END_387+0x8c>
     6c6:	2300      	movs	r3, #0
     6c8:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     6cc:	f04f 34ff 	mov.w	r4, #4294967295
     6d0:	e01d      	b.n	70e <FIH_LABEL_FIH_CALL_END_387+0xc8>
    cc310_init();
     6d2:	f000 fdf7 	bl	12c4 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     6d6:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     6da:	a81f      	add	r0, sp, #124	; 0x7c
     6dc:	f004 f95c 	bl	4998 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     6e0:	f8db 2004 	ldr.w	r2, [fp, #4]
     6e4:	a81f      	add	r0, sp, #124	; 0x7c
     6e6:	6812      	ldr	r2, [r2, #0]
     6e8:	f85b 1b08 	ldr.w	r1, [fp], #8
     6ec:	f005 fd79 	bl	61e2 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     6f0:	a917      	add	r1, sp, #92	; 0x5c
     6f2:	a81f      	add	r0, sp, #124	; 0x7c
     6f4:	f004 f9c2 	bl	4a7c <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     6f8:	2200      	movs	r2, #0
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6fa:	a93c      	add	r1, sp, #240	; 0xf0
     6fc:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
     700:	a817      	add	r0, sp, #92	; 0x5c
     702:	462a      	mov	r2, r5
     704:	f005 ff49 	bl	659a <memcmp>
     708:	b918      	cbnz	r0, 712 <FIH_LABEL_FIH_CALL_END_387+0xcc>
     70a:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     70e:	4625      	mov	r5, r4
     710:	e775      	b.n	5fe <bootutil_img_validate+0x9e>
    for (i = 0; i < bootutil_key_cnt; i++) {
     712:	3401      	adds	r4, #1
     714:	e7d4      	b.n	6c0 <FIH_LABEL_FIH_CALL_END_387+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     716:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     71a:	f47f af70 	bne.w	5fe <bootutil_img_validate+0x9e>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     71e:	2d00      	cmp	r5, #0
     720:	db19      	blt.n	756 <FIH_LABEL_FIH_CALL_END_933>
     722:	f8da 3000 	ldr.w	r3, [sl]
     726:	42ab      	cmp	r3, r5
     728:	dd15      	ble.n	756 <FIH_LABEL_FIH_CALL_END_933>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     72a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     72e:	2b80      	cmp	r3, #128	; 0x80
     730:	d81e      	bhi.n	770 <FIH_LABEL_FIH_CALL_END_933+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     732:	4630      	mov	r0, r6
     734:	9908      	ldr	r1, [sp, #32]
     736:	aa3c      	add	r2, sp, #240	; 0xf0
     738:	f005 fe55 	bl	63e6 <flash_area_read>
            if (rc) {
     73c:	4604      	mov	r4, r0
     73e:	2800      	cmp	r0, #0
     740:	d19b      	bne.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>

00000742 <FIH_LABEL_FIH_CALL_START_911>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     742:	b2ed      	uxtb	r5, r5
     744:	2120      	movs	r1, #32
     746:	f8bd 301c 	ldrh.w	r3, [sp, #28]
     74a:	9500      	str	r5, [sp, #0]
     74c:	aa3c      	add	r2, sp, #240	; 0xf0
     74e:	a80f      	add	r0, sp, #60	; 0x3c
     750:	f000 f81e 	bl	790 <bootutil_verify_sig>
     754:	4607      	mov	r7, r0

00000756 <FIH_LABEL_FIH_CALL_END_933>:
                key_id = -1;
     756:	f04f 35ff 	mov.w	r5, #4294967295
     75a:	e750      	b.n	5fe <bootutil_img_validate+0x9e>
    if (rc) {
     75c:	9b03      	ldr	r3, [sp, #12]
     75e:	b153      	cbz	r3, 776 <FIH_LABEL_FIH_CALL_END_933+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <FIH_LABEL_FIH_CALL_END_933+0x2a>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     762:	681b      	ldr	r3, [r3, #0]
     764:	42bb      	cmp	r3, r7
     766:	d001      	beq.n	76c <FIH_LABEL_FIH_CALL_END_933+0x16>
        return FIH_FAILURE;
     768:	9b05      	ldr	r3, [sp, #20]
     76a:	681f      	ldr	r7, [r3, #0]
                rc = -1;
     76c:	463c      	mov	r4, r7
     76e:	e784      	b.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
     770:	f04f 34ff 	mov.w	r4, #4294967295
     774:	e781      	b.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
     776:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     778:	e77f      	b.n	67a <FIH_LABEL_FIH_CALL_END_387+0x34>
     77a:	bf00      	nop
     77c:	50840000 	.word	0x50840000
     780:	2000c6cc 	.word	0x2000c6cc
     784:	2000c500 	.word	0x2000c500
     788:	00006ea8 	.word	0x00006ea8
     78c:	00006eac 	.word	0x00006eac

00000790 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     794:	b096      	sub	sp, #88	; 0x58
     796:	4617      	mov	r7, r2
     798:	461d      	mov	r5, r3
     79a:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     79e:	4b35      	ldr	r3, [pc, #212]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
{
     7a0:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     7a2:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     7a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     7aa:	685b      	ldr	r3, [r3, #4]
{
     7ac:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     7ae:	6818      	ldr	r0, [r3, #0]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     7b0:	9101      	str	r1, [sp, #4]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     7b2:	2330      	movs	r3, #48	; 0x30
     7b4:	4401      	add	r1, r0
     7b6:	aa02      	add	r2, sp, #8
     7b8:	a801      	add	r0, sp, #4
     7ba:	f005 fc9f 	bl	60fc <mbedtls_asn1_get_tag>
     7be:	b110      	cbz	r0, 7c6 <bootutil_verify_sig+0x36>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     7c0:	f04f 30ff 	mov.w	r0, #4294967295
     7c4:	e053      	b.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
    end = *cp + len;
     7c6:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     7ca:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     7cc:	4621      	mov	r1, r4
     7ce:	ab06      	add	r3, sp, #24
     7d0:	aa03      	add	r2, sp, #12
     7d2:	a801      	add	r0, sp, #4
     7d4:	f005 fcba 	bl	614c <mbedtls_asn1_get_alg>
     7d8:	2800      	cmp	r0, #0
     7da:	d1f1      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7dc:	9a04      	ldr	r2, [sp, #16]
     7de:	2a07      	cmp	r2, #7
     7e0:	d1ee      	bne.n	7c0 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     7e2:	4925      	ldr	r1, [pc, #148]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     7e4:	9805      	ldr	r0, [sp, #20]
     7e6:	f005 fed8 	bl	659a <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7ea:	2800      	cmp	r0, #0
     7ec:	d1e8      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7ee:	9a07      	ldr	r2, [sp, #28]
     7f0:	2a08      	cmp	r2, #8
     7f2:	d1e5      	bne.n	7c0 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     7f4:	4921      	ldr	r1, [pc, #132]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     7f6:	9808      	ldr	r0, [sp, #32]
     7f8:	f005 fecf 	bl	659a <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7fc:	2800      	cmp	r0, #0
     7fe:	d1df      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     800:	4621      	mov	r1, r4
     802:	aa02      	add	r2, sp, #8
     804:	a801      	add	r0, sp, #4
     806:	f005 fc8d 	bl	6124 <mbedtls_asn1_get_bitstring_null>
     80a:	2800      	cmp	r0, #0
     80c:	d1d8      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     80e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     812:	4413      	add	r3, r2
     814:	429c      	cmp	r4, r3
     816:	d1d3      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     818:	2a41      	cmp	r2, #65	; 0x41
     81a:	d1d1      	bne.n	7c0 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     81c:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     81e:	2330      	movs	r3, #48	; 0x30
     820:	4629      	mov	r1, r5
     822:	aa03      	add	r2, sp, #12
     824:	a802      	add	r0, sp, #8
     826:	9702      	str	r7, [sp, #8]
     828:	f005 fc68 	bl	60fc <mbedtls_asn1_get_tag>
    if (rc) {
     82c:	2800      	cmp	r0, #0
     82e:	d1c7      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     830:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     834:	4413      	add	r3, r2
     836:	429d      	cmp	r5, r3
     838:	d3c2      	bcc.n	7c0 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     83a:	462a      	mov	r2, r5
     83c:	a902      	add	r1, sp, #8
     83e:	a806      	add	r0, sp, #24
     840:	f005 fa13 	bl	5c6a <bootutil_read_bigint>
    if (rc) {
     844:	2800      	cmp	r0, #0
     846:	d1bb      	bne.n	7c0 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     848:	462a      	mov	r2, r5
     84a:	a902      	add	r1, sp, #8
     84c:	a80e      	add	r0, sp, #56	; 0x38
     84e:	f005 fa0c 	bl	5c6a <bootutil_read_bigint>
    if (rc) {
     852:	2800      	cmp	r0, #0
     854:	d1b4      	bne.n	7c0 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     856:	2e20      	cmp	r6, #32
     858:	d1b2      	bne.n	7c0 <bootutil_verify_sig+0x30>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     85a:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     85c:	780b      	ldrb	r3, [r1, #0]
     85e:	2b04      	cmp	r3, #4
     860:	d1ae      	bne.n	7c0 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     862:	4633      	mov	r3, r6
     864:	4640      	mov	r0, r8
     866:	aa06      	add	r2, sp, #24
     868:	3101      	adds	r1, #1
     86a:	f000 fd43 	bl	12f4 <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     86e:	b016      	add	sp, #88	; 0x58
     870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     874:	00006eac 	.word	0x00006eac
     878:	00007336 	.word	0x00007336
     87c:	0000733e 	.word	0x0000733e

00000880 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     884:	2303      	movs	r3, #3
{
     886:	b086      	sub	sp, #24
     888:	460d      	mov	r5, r1
     88a:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     88c:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     88e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8f8 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     892:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     896:	f817 0b01 	ldrb.w	r0, [r7], #1
     89a:	a901      	add	r1, sp, #4
     89c:	f001 f8fc 	bl	1a98 <flash_area_open>
        if (rc != 0) {
     8a0:	4604      	mov	r4, r0
     8a2:	b9a0      	cbnz	r0, 8ce <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     8a4:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     8a6:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     8a8:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     8aa:	aa02      	add	r2, sp, #8
     8ac:	3910      	subs	r1, #16
     8ae:	f005 fd9a 	bl	63e6 <flash_area_read>
     8b2:	4604      	mov	r4, r0
        flash_area_close(*fap);
     8b4:	9801      	ldr	r0, [sp, #4]
     8b6:	f005 fd95 	bl	63e4 <flash_area_close>
        if (rc != 0) {
     8ba:	b944      	cbnz	r4, 8ce <boot_read_swap_size+0x4e>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     8bc:	2210      	movs	r2, #16
     8be:	4641      	mov	r1, r8
     8c0:	a802      	add	r0, sp, #8
     8c2:	f005 fe6a 	bl	659a <memcmp>
     8c6:	b140      	cbz	r0, 8da <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     8c8:	b12e      	cbz	r6, 8d6 <boot_read_swap_size+0x56>
    return -1;
     8ca:	f04f 34ff 	mov.w	r4, #4294967295
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     8ce:	4620      	mov	r0, r4
     8d0:	b006      	add	sp, #24
     8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     8d6:	2601      	movs	r6, #1
     8d8:	e7dd      	b.n	896 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     8da:	9801      	ldr	r0, [sp, #4]
     8dc:	f006 f848 	bl	6970 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     8e0:	2304      	movs	r3, #4
     8e2:	f1a0 0108 	sub.w	r1, r0, #8
     8e6:	462a      	mov	r2, r5
     8e8:	9801      	ldr	r0, [sp, #4]
     8ea:	f005 fd7c 	bl	63e6 <flash_area_read>
     8ee:	4604      	mov	r4, r0
        flash_area_close(fap);
     8f0:	9801      	ldr	r0, [sp, #4]
     8f2:	f005 fd77 	bl	63e4 <flash_area_close>
     8f6:	e7ea      	b.n	8ce <boot_read_swap_size+0x4e>
     8f8:	0000704c 	.word	0x0000704c

000008fc <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     900:	4b38      	ldr	r3, [pc, #224]	; (9e4 <FIH_LABEL_FIH_CALL_END_477+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     902:	b088      	sub	sp, #32
     904:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     906:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     908:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     90a:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     90c:	f005 f90a 	bl	5b24 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     910:	a906      	add	r1, sp, #24
     912:	b2c0      	uxtb	r0, r0
     914:	f001 f8c0 	bl	1a98 <flash_area_open>
    if (rc != 0) {
     918:	2800      	cmp	r0, #0
     91a:	d157      	bne.n	9cc <FIH_LABEL_FIH_CALL_END_477+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     91c:	4629      	mov	r1, r5
     91e:	f005 f901 	bl	5b24 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     922:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     924:	a907      	add	r1, sp, #28
     926:	b2c0      	uxtb	r0, r0
     928:	fb04 6405 	mla	r4, r4, r5, r6
     92c:	f001 f8b4 	bl	1a98 <flash_area_open>
    if (rc != 0) {
     930:	2800      	cmp	r0, #0
     932:	d036      	beq.n	9a2 <FIH_LABEL_FIH_CALL_END_477+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     934:	f04f 082c 	mov.w	r8, #44	; 0x2c
     938:	fb08 f805 	mul.w	r8, r8, r5
     93c:	eb06 0708 	add.w	r7, r6, r8
     940:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     942:	f011 0110 	ands.w	r1, r1, #16
     946:	d137      	bne.n	9b8 <FIH_LABEL_FIH_CALL_END_477+0x54>

00000948 <FIH_LABEL_FIH_CALL_START_421>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     948:	f44f 7380 	mov.w	r3, #256	; 0x100
     94c:	9301      	str	r3, [sp, #4]
     94e:	4b26      	ldr	r3, [pc, #152]	; (9e8 <FIH_LABEL_FIH_CALL_END_477+0x84>)
     950:	4622      	mov	r2, r4
     952:	9300      	str	r3, [sp, #0]
     954:	4608      	mov	r0, r1
     956:	e9cd 1103 	strd	r1, r1, [sp, #12]
     95a:	9b06      	ldr	r3, [sp, #24]
     95c:	9102      	str	r1, [sp, #8]
     95e:	f7ff fdff 	bl	560 <bootutil_img_validate>
     962:	4604      	mov	r4, r0

00000964 <FIH_LABEL_FIH_CALL_END_477>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     964:	4b21      	ldr	r3, [pc, #132]	; (9ec <FIH_LABEL_FIH_CALL_END_477+0x88>)
     966:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     96a:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     96c:	429a      	cmp	r2, r3
     96e:	d10c      	bne.n	98a <FIH_LABEL_FIH_CALL_END_477+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     970:	893a      	ldrh	r2, [r7, #8]
     972:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     974:	43d1      	mvns	r1, r2
     976:	428b      	cmp	r3, r1
     978:	d807      	bhi.n	98a <FIH_LABEL_FIH_CALL_END_477+0x26>
        *dest = a + b;
     97a:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     97c:	6882      	ldr	r2, [r0, #8]
     97e:	4293      	cmp	r3, r2
     980:	d203      	bcs.n	98a <FIH_LABEL_FIH_CALL_END_477+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     982:	4b1b      	ldr	r3, [pc, #108]	; (9f0 <FIH_LABEL_FIH_CALL_END_477+0x8c>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	42a3      	cmp	r3, r4
     988:	d01d      	beq.n	9c6 <FIH_LABEL_FIH_CALL_END_477+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     98a:	b345      	cbz	r5, 9de <FIH_LABEL_FIH_CALL_END_477+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     98c:	6882      	ldr	r2, [r0, #8]
     98e:	2100      	movs	r1, #0
     990:	f005 fd73 	bl	647a <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     994:	4a17      	ldr	r2, [pc, #92]	; (9f4 <FIH_LABEL_FIH_CALL_END_477+0x90>)
     996:	2145      	movs	r1, #69	; 0x45
     998:	4817      	ldr	r0, [pc, #92]	; (9f8 <FIH_LABEL_FIH_CALL_END_477+0x94>)
     99a:	f005 fd16 	bl	63ca <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     99e:	2401      	movs	r4, #1
     9a0:	e011      	b.n	9c6 <FIH_LABEL_FIH_CALL_END_477+0x62>
    erased_val = flash_area_erased_val(fap);
     9a2:	9807      	ldr	r0, [sp, #28]
     9a4:	f005 fda1 	bl	64ea <flash_area_erased_val>
     9a8:	4607      	mov	r7, r0
    flash_area_close(fap);
     9aa:	9807      	ldr	r0, [sp, #28]
     9ac:	f005 fd1a 	bl	63e4 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     9b0:	1e63      	subs	r3, r4, #1
     9b2:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     9b4:	4293      	cmp	r3, r2
     9b6:	d10d      	bne.n	9d4 <FIH_LABEL_FIH_CALL_END_477+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     9b8:	2d00      	cmp	r5, #0
     9ba:	d0f0      	beq.n	99e <FIH_LABEL_FIH_CALL_END_477+0x3a>
            swap_erase_trailer_sectors(state, fap);
     9bc:	4630      	mov	r0, r6
     9be:	9906      	ldr	r1, [sp, #24]
     9c0:	f005 fa7c 	bl	5ebc <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     9c4:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     9c6:	9806      	ldr	r0, [sp, #24]
     9c8:	f005 fd0c 	bl	63e4 <flash_area_close>

    FIH_RET(fih_rc);
}
     9cc:	4620      	mov	r0, r4
     9ce:	b008      	add	sp, #32
     9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     9d4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     9d8:	42b9      	cmp	r1, r7
     9da:	d0eb      	beq.n	9b4 <FIH_LABEL_FIH_CALL_END_477+0x50>
     9dc:	e7aa      	b.n	934 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     9de:	4a07      	ldr	r2, [pc, #28]	; (9fc <FIH_LABEL_FIH_CALL_END_477+0x98>)
     9e0:	e7d9      	b.n	996 <FIH_LABEL_FIH_CALL_END_477+0x32>
     9e2:	bf00      	nop
     9e4:	2000c500 	.word	0x2000c500
     9e8:	2000d3e4 	.word	0x2000d3e4
     9ec:	96f3b83d 	.word	0x96f3b83d
     9f0:	2000c6cc 	.word	0x2000c6cc
     9f4:	00007347 	.word	0x00007347
     9f8:	00007359 	.word	0x00007359
     9fc:	00007351 	.word	0x00007351

00000a00 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
     a02:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     a04:	2100      	movs	r1, #0
{
     a06:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     a08:	4628      	mov	r0, r5
    size = copy_size = 0;
     a0a:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     a0e:	f005 fa14 	bl	5e3a <boot_status_is_reset>
     a12:	b330      	cbz	r0, a62 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a14:	4e16      	ldr	r6, [pc, #88]	; (a70 <boot_swap_image+0x70>)
     a16:	6822      	ldr	r2, [r4, #0]
     a18:	42b2      	cmp	r2, r6
     a1a:	d103      	bne.n	a24 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     a1c:	4620      	mov	r0, r4
     a1e:	aa01      	add	r2, sp, #4
     a20:	f005 f980 	bl	5d24 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     a26:	42b3      	cmp	r3, r6
     a28:	d104      	bne.n	a34 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     a2a:	466a      	mov	r2, sp
     a2c:	2101      	movs	r1, #1
     a2e:	4620      	mov	r0, r4
     a30:	f005 f978 	bl	5d24 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     a34:	e9dd 3200 	ldrd	r3, r2, [sp]
     a38:	4293      	cmp	r3, r2
            copy_size = size;
     a3a:	bf88      	it	hi
     a3c:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     a3e:	9b01      	ldr	r3, [sp, #4]
     a40:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     a42:	9a01      	ldr	r2, [sp, #4]
     a44:	4629      	mov	r1, r5
     a46:	4620      	mov	r0, r4
     a48:	f000 fb34 	bl	10b4 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     a4c:	4b09      	ldr	r3, [pc, #36]	; (a74 <boot_swap_image+0x74>)
     a4e:	681a      	ldr	r2, [r3, #0]
     a50:	2a00      	cmp	r2, #0
     a52:	dd03      	ble.n	a5c <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     a54:	2157      	movs	r1, #87	; 0x57
     a56:	4808      	ldr	r0, [pc, #32]	; (a78 <boot_swap_image+0x78>)
     a58:	f005 fcb7 	bl	63ca <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     a5c:	2000      	movs	r0, #0
     a5e:	b002      	add	sp, #8
     a60:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a62:	f105 0108 	add.w	r1, r5, #8
     a66:	f7ff ff0b 	bl	880 <boot_read_swap_size>
        copy_size = bs->swap_size;
     a6a:	68ab      	ldr	r3, [r5, #8]
     a6c:	9301      	str	r3, [sp, #4]
     a6e:	e7e8      	b.n	a42 <boot_swap_image+0x42>
     a70:	96f3b83d 	.word	0x96f3b83d
     a74:	2000d330 	.word	0x2000d330
     a78:	00007381 	.word	0x00007381

00000a7c <boot_copy_region>:
{
     a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a80:	468a      	mov	sl, r1
     a82:	4690      	mov	r8, r2
     a84:	4699      	mov	r9, r3
    bytes_copied = 0;
     a86:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a88:	f8df b070 	ldr.w	fp, [pc, #112]	; afc <boot_copy_region+0x80>
     a8c:	4c19      	ldr	r4, [pc, #100]	; (af4 <boot_copy_region+0x78>)
     a8e:	4d1a      	ldr	r5, [pc, #104]	; (af8 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a92:	429e      	cmp	r6, r3
     a94:	d301      	bcc.n	a9a <boot_copy_region+0x1e>
    return 0;
     a96:	2000      	movs	r0, #0
     a98:	e00f      	b.n	aba <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a9c:	4650      	mov	r0, sl
        if (sz - bytes_copied > sizeof buf) {
     a9e:	1b9f      	subs	r7, r3, r6
     aa0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     aa4:	bf28      	it	cs
     aa6:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     aaa:	4a14      	ldr	r2, [pc, #80]	; (afc <boot_copy_region+0x80>)
     aac:	463b      	mov	r3, r7
     aae:	eb06 0109 	add.w	r1, r6, r9
     ab2:	f005 fc98 	bl	63e6 <flash_area_read>
        if (rc != 0) {
     ab6:	b110      	cbz	r0, abe <boot_copy_region+0x42>
            return BOOT_EFLASH;
     ab8:	2001      	movs	r0, #1
}
     aba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     abe:	990a      	ldr	r1, [sp, #40]	; 0x28
     ac0:	463b      	mov	r3, r7
     ac2:	465a      	mov	r2, fp
     ac4:	4640      	mov	r0, r8
     ac6:	1871      	adds	r1, r6, r1
     ac8:	f005 fca9 	bl	641e <flash_area_write>
        if (rc != 0) {
     acc:	2800      	cmp	r0, #0
     ace:	d1f3      	bne.n	ab8 <boot_copy_region+0x3c>
     ad0:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     ad4:	443e      	add	r6, r7
     ad6:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     ada:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     ade:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     ae2:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     ae6:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     aea:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     aee:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     af2:	e7cd      	b.n	a90 <boot_copy_region+0x14>
     af4:	50018000 	.word	0x50018000
     af8:	6e524635 	.word	0x6e524635
     afc:	2000c730 	.word	0x2000c730

00000b00 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     b04:	460f      	mov	r7, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b06:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     b08:	4b8d      	ldr	r3, [pc, #564]	; (d40 <FIH_LABEL_FIH_CALL_END_2437+0x46>)
{
     b0a:	b085      	sub	sp, #20
    fih_int fih_rc = FIH_FAILURE;
     b0c:	681e      	ldr	r6, [r3, #0]
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b0e:	4b8d      	ldr	r3, [pc, #564]	; (d44 <FIH_LABEL_FIH_CALL_END_2437+0x4a>)
{
     b10:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     b12:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     b14:	4b8c      	ldr	r3, [pc, #560]	; (d48 <FIH_LABEL_FIH_CALL_END_2437+0x4e>)
     b16:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b18:	4608      	mov	r0, r1
     b1a:	f005 f803 	bl	5b24 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b1e:	f104 0120 	add.w	r1, r4, #32
     b22:	b2c0      	uxtb	r0, r0
     b24:	f000 ffb8 	bl	1a98 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     b28:	2101      	movs	r1, #1
     b2a:	2000      	movs	r0, #0
     b2c:	f004 fffa 	bl	5b24 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     b30:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     b34:	b2c0      	uxtb	r0, r0
     b36:	f000 ffaf 	bl	1a98 <flash_area_open>
     b3a:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     b3c:	4620      	mov	r0, r4
     b3e:	f005 f952 	bl	5de6 <boot_read_sectors>
    if (rc != 0) {
     b42:	4680      	mov	r8, r0
     b44:	b968      	cbnz	r0, b62 <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     b46:	2200      	movs	r2, #0
     b48:	4620      	mov	r0, r4
     b4a:	4611      	mov	r1, r2
     b4c:	f005 f932 	bl	5db4 <boot_read_image_headers>
    if (rc != 0) {
     b50:	4680      	mov	r8, r0
     b52:	b300      	cbz	r0, b96 <context_boot_go+0x96>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b54:	2200      	movs	r2, #0
     b56:	2157      	movs	r1, #87	; 0x57
     b58:	487c      	ldr	r0, [pc, #496]	; (d4c <FIH_LABEL_FIH_CALL_END_2437+0x52>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b5a:	f005 fc36 	bl	63ca <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b5e:	2301      	movs	r3, #1
     b60:	e091      	b.n	c86 <FIH_LABEL_FIH_CALL_END_2224+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b62:	2280      	movs	r2, #128	; 0x80
     b64:	2157      	movs	r1, #87	; 0x57
     b66:	487a      	ldr	r0, [pc, #488]	; (d50 <FIH_LABEL_FIH_CALL_END_2437+0x56>)
     b68:	f005 fc2f 	bl	63ca <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b6c:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b6e:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b70:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b74:	d1e7      	bne.n	b46 <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b76:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     b7a:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b7c:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     b80:	f200 8084 	bhi.w	c8c <FIH_LABEL_FIH_CALL_END_2224+0x14>
     b84:	2b01      	cmp	r3, #1
     b86:	f200 8088 	bhi.w	c9a <FIH_LABEL_FIH_CALL_END_2224+0x22>
     b8a:	f000 809f 	beq.w	ccc <FIH_LABEL_FIH_CALL_END_2224+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b8e:	23ff      	movs	r3, #255	; 0xff
     b90:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b94:	e09a      	b.n	ccc <FIH_LABEL_FIH_CALL_END_2224+0x54>
    if (boot_slots_compatible(state)) {
     b96:	4620      	mov	r0, r4
     b98:	f000 f9a4 	bl	ee4 <boot_slots_compatible>
     b9c:	2800      	cmp	r0, #0
     b9e:	d0de      	beq.n	b5e <context_boot_go+0x5e>
        boot_status_reset(bs);
     ba0:	4668      	mov	r0, sp
     ba2:	f005 f941 	bl	5e28 <boot_status_reset>
        rc = swap_read_status(state, bs);
     ba6:	4669      	mov	r1, sp
     ba8:	4620      	mov	r0, r4
     baa:	f005 f9dc 	bl	5f66 <swap_read_status>
        if (rc != 0) {
     bae:	b118      	cbz	r0, bb8 <context_boot_go+0xb8>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     bb0:	4642      	mov	r2, r8
     bb2:	2157      	movs	r1, #87	; 0x57
     bb4:	4867      	ldr	r0, [pc, #412]	; (d54 <FIH_LABEL_FIH_CALL_END_2437+0x5a>)
     bb6:	e7d0      	b.n	b5a <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     bb8:	4668      	mov	r0, sp
     bba:	f005 f93e 	bl	5e3a <boot_status_is_reset>
     bbe:	f080 0001 	eor.w	r0, r0, #1
     bc2:	466a      	mov	r2, sp
     bc4:	b2c1      	uxtb	r1, r0
     bc6:	4620      	mov	r0, r4
     bc8:	f005 f8f4 	bl	5db4 <boot_read_image_headers>
        if (rc != 0) {
     bcc:	4602      	mov	r2, r0
     bce:	2800      	cmp	r0, #0
     bd0:	d1c0      	bne.n	b54 <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     bd2:	4668      	mov	r0, sp
     bd4:	f005 f931 	bl	5e3a <boot_status_is_reset>
     bd8:	4680      	mov	r8, r0
     bda:	bb60      	cbnz	r0, c36 <context_boot_go+0x136>
    rc = boot_swap_image(state, bs);
     bdc:	4669      	mov	r1, sp
     bde:	4620      	mov	r0, r4
     be0:	f7ff ff0e 	bl	a00 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     be4:	f89d 3007 	ldrb.w	r3, [sp, #7]
     be8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     bec:	3b03      	subs	r3, #3
     bee:	2b01      	cmp	r3, #1
     bf0:	d806      	bhi.n	c00 <context_boot_go+0x100>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     bf2:	4640      	mov	r0, r8
     bf4:	f005 fa06 	bl	6004 <swap_set_image_ok>
        if (rc != 0) {
     bf8:	b110      	cbz	r0, c00 <context_boot_go+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bfa:	23ff      	movs	r3, #255	; 0xff
     bfc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     c00:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c04:	3b02      	subs	r3, #2
     c06:	2b02      	cmp	r3, #2
     c08:	d80b      	bhi.n	c22 <context_boot_go+0x122>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c0a:	2000      	movs	r0, #0
     c0c:	f005 f9e8 	bl	5fe0 <swap_set_copy_done>
        if (rc != 0) {
     c10:	b138      	cbz	r0, c22 <context_boot_go+0x122>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c12:	23ff      	movs	r3, #255	; 0xff
     c14:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     c18:	2145      	movs	r1, #69	; 0x45
     c1a:	484f      	ldr	r0, [pc, #316]	; (d58 <FIH_LABEL_FIH_CALL_END_2437+0x5e>)
     c1c:	f005 fbd5 	bl	63ca <z_log_minimal_printk>
        while (1) {}
     c20:	e7fe      	b.n	c20 <context_boot_go+0x120>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c22:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c26:	2bff      	cmp	r3, #255	; 0xff
     c28:	d0f6      	beq.n	c18 <context_boot_go+0x118>
            rc = boot_read_image_headers(state, false, bs);
     c2a:	466a      	mov	r2, sp
     c2c:	2100      	movs	r1, #0
     c2e:	4620      	mov	r0, r4
     c30:	f005 f8c0 	bl	5db4 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c34:	e793      	b.n	b5e <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     c36:	f89d 9007 	ldrb.w	r9, [sp, #7]
     c3a:	f1b9 0f01 	cmp.w	r9, #1
     c3e:	d117      	bne.n	c70 <FIH_LABEL_FIH_CALL_START_2204>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c40:	4610      	mov	r0, r2
     c42:	f002 fc35 	bl	34b0 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c46:	1e83      	subs	r3, r0, #2
     c48:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c4a:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c4c:	d80d      	bhi.n	c6a <FIH_LABEL_FIH_CALL_END_2139+0x14>

00000c4e <FIH_LABEL_FIH_CALL_START_2115>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c4e:	4649      	mov	r1, r9
     c50:	4620      	mov	r0, r4
     c52:	f7ff fe53 	bl	8fc <boot_validate_slot.isra.0>

00000c56 <FIH_LABEL_FIH_CALL_END_2139>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c56:	4b41      	ldr	r3, [pc, #260]	; (d5c <FIH_LABEL_FIH_CALL_END_2437+0x62>)
     c58:	681b      	ldr	r3, [r3, #0]
     c5a:	4298      	cmp	r0, r3
     c5c:	d005      	beq.n	c6a <FIH_LABEL_FIH_CALL_END_2139+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c5e:	2801      	cmp	r0, #1
     c60:	bf0c      	ite	eq
     c62:	f04f 0801 	moveq.w	r8, #1
     c66:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c6a:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     c6e:	e782      	b.n	b76 <context_boot_go+0x76>

00000c70 <FIH_LABEL_FIH_CALL_START_2204>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c70:	2101      	movs	r1, #1
     c72:	4620      	mov	r0, r4
     c74:	f7ff fe42 	bl	8fc <boot_validate_slot.isra.0>

00000c78 <FIH_LABEL_FIH_CALL_END_2224>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c78:	4b38      	ldr	r3, [pc, #224]	; (d5c <FIH_LABEL_FIH_CALL_END_2437+0x62>)
     c7a:	681b      	ldr	r3, [r3, #0]
     c7c:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c7e:	bf14      	ite	ne
     c80:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c82:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c86:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c8a:	e774      	b.n	b76 <context_boot_go+0x76>
        switch (BOOT_SWAP_TYPE(state)) {
     c8c:	2b05      	cmp	r3, #5
     c8e:	f47f af7e 	bne.w	b8e <context_boot_go+0x8e>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c92:	2000      	movs	r0, #0
     c94:	f005 f9b6 	bl	6004 <swap_set_image_ok>
     c98:	e013      	b.n	cc2 <FIH_LABEL_FIH_CALL_END_2224+0x4a>
        rc = boot_swap_image(state, bs);
     c9a:	4669      	mov	r1, sp
     c9c:	4620      	mov	r0, r4
     c9e:	f7ff feaf 	bl	a00 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     ca2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     ca6:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     ca8:	1eda      	subs	r2, r3, #3
     caa:	2a01      	cmp	r2, #1
     cac:	d80c      	bhi.n	cc8 <FIH_LABEL_FIH_CALL_END_2224+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cae:	2000      	movs	r0, #0
     cb0:	f005 f9a8 	bl	6004 <swap_set_image_ok>
        if (rc != 0) {
     cb4:	4605      	mov	r5, r0
     cb6:	2800      	cmp	r0, #0
     cb8:	f47f af69 	bne.w	b8e <context_boot_go+0x8e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cbc:	2000      	movs	r0, #0
     cbe:	f005 f98f 	bl	5fe0 <swap_set_copy_done>
            if (rc != 0) {
     cc2:	4605      	mov	r5, r0
     cc4:	b110      	cbz	r0, ccc <FIH_LABEL_FIH_CALL_END_2224+0x54>
     cc6:	e762      	b.n	b8e <context_boot_go+0x8e>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cc8:	2b02      	cmp	r3, #2
     cca:	d0f7      	beq.n	cbc <FIH_LABEL_FIH_CALL_END_2224+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     ccc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cd0:	2bff      	cmp	r3, #255	; 0xff
     cd2:	d104      	bne.n	cde <FIH_LABEL_FIH_CALL_END_2224+0x66>
            BOOT_LOG_ERR("panic!");
     cd4:	2145      	movs	r1, #69	; 0x45
     cd6:	4820      	ldr	r0, [pc, #128]	; (d58 <FIH_LABEL_FIH_CALL_END_2437+0x5e>)
     cd8:	f005 fb77 	bl	63ca <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     cdc:	e7fe      	b.n	cdc <FIH_LABEL_FIH_CALL_END_2224+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     cde:	2b01      	cmp	r3, #1
     ce0:	d006      	beq.n	cf0 <FIH_LABEL_FIH_CALL_START_2421>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     ce2:	466a      	mov	r2, sp
     ce4:	2100      	movs	r1, #0
     ce6:	4620      	mov	r0, r4
     ce8:	f005 f864 	bl	5db4 <boot_read_image_headers>
            if (rc != 0) {
     cec:	4605      	mov	r5, r0
     cee:	b9d0      	cbnz	r0, d26 <FIH_LABEL_FIH_CALL_END_2437+0x2c>

00000cf0 <FIH_LABEL_FIH_CALL_START_2421>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     cf0:	2100      	movs	r1, #0
     cf2:	4620      	mov	r0, r4
     cf4:	f7ff fe02 	bl	8fc <boot_validate_slot.isra.0>
     cf8:	4606      	mov	r6, r0

00000cfa <FIH_LABEL_FIH_CALL_END_2437>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cfa:	f8df 8060 	ldr.w	r8, [pc, #96]	; d5c <FIH_LABEL_FIH_CALL_END_2437+0x62>
     cfe:	f8d8 3000 	ldr.w	r3, [r8]
     d02:	4298      	cmp	r0, r3
     d04:	d10f      	bne.n	d26 <FIH_LABEL_FIH_CALL_END_2437+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     d06:	2210      	movs	r2, #16
     d08:	2100      	movs	r1, #0
     d0a:	4668      	mov	r0, sp
     d0c:	f005 fc60 	bl	65d0 <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     d10:	6a20      	ldr	r0, [r4, #32]
     d12:	f004 ff10 	bl	5b36 <flash_area_get_device_id>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     d16:	2500      	movs	r5, #0
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     d18:	7138      	strb	r0, [r7, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return flash_area_get_off(BOOT_IMG(state, slot).area);
     d1a:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     d1c:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d20:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     d22:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     d24:	60bb      	str	r3, [r7, #8]
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     d26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     d28:	f005 fb5c 	bl	63e4 <flash_area_close>
     d2c:	6a20      	ldr	r0, [r4, #32]
     d2e:	f005 fb59 	bl	63e4 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     d32:	2d00      	cmp	r5, #0
     d34:	bf14      	ite	ne
     d36:	4628      	movne	r0, r5
     d38:	4630      	moveq	r0, r6
     d3a:	b005      	add	sp, #20
     d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     d40:	2000c500 	.word	0x2000c500
     d44:	2000cb30 	.word	0x2000cb30
     d48:	2000cf30 	.word	0x2000cf30
     d4c:	000073f2 	.word	0x000073f2
     d50:	000073b0 	.word	0x000073b0
     d54:	0000741e 	.word	0x0000741e
     d58:	00007448 	.word	0x00007448
     d5c:	2000c6cc 	.word	0x2000c6cc

00000d60 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d60:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d62:	4d06      	ldr	r5, [pc, #24]	; (d7c <FIH_LABEL_FIH_CALL_END_3121+0x4>)
{
     d64:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d66:	2260      	movs	r2, #96	; 0x60
     d68:	2100      	movs	r1, #0
     d6a:	4628      	mov	r0, r5
     d6c:	f005 fc30 	bl	65d0 <memset>

00000d70 <FIH_LABEL_FIH_CALL_START_3106>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d70:	4621      	mov	r1, r4
     d72:	4628      	mov	r0, r5
     d74:	f7ff fec4 	bl	b00 <context_boot_go>

00000d78 <FIH_LABEL_FIH_CALL_END_3121>:
}
     d78:	bd38      	pop	{r3, r4, r5, pc}
     d7a:	bf00      	nop
     d7c:	2000c6d0 	.word	0x2000c6d0

00000d80 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d82:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d84:	461c      	mov	r4, r3
     d86:	b333      	cbz	r3, dd6 <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     d88:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d8a:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d8c:	7963      	ldrb	r3, [r4, #5]
     d8e:	2b01      	cmp	r3, #1
     d90:	d115      	bne.n	dbe <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d92:	bb01      	cbnz	r1, dd6 <boot_read_image_header+0x56>
     d94:	4b1f      	ldr	r3, [pc, #124]	; (e14 <boot_read_image_header+0x94>)
     d96:	6822      	ldr	r2, [r4, #0]
     d98:	681b      	ldr	r3, [r3, #0]
    off = 0;
     d9a:	429a      	cmp	r2, r3
     d9c:	bf98      	it	ls
     d9e:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     da0:	2000      	movs	r0, #0
     da2:	f004 febf 	bl	5b24 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     da6:	a901      	add	r1, sp, #4
     da8:	b2c0      	uxtb	r0, r0
     daa:	f000 fe75 	bl	1a98 <flash_area_open>
    if (rc != 0) {
     dae:	b1f0      	cbz	r0, dee <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     db0:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     db2:	9801      	ldr	r0, [sp, #4]
     db4:	f005 fb16 	bl	63e4 <flash_area_close>
    return rc;
}
     db8:	4628      	mov	r0, r5
     dba:	b002      	add	sp, #8
     dbc:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     dbe:	2b02      	cmp	r3, #2
     dc0:	d109      	bne.n	dd6 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     dc2:	6823      	ldr	r3, [r4, #0]
     dc4:	2b01      	cmp	r3, #1
     dc6:	d908      	bls.n	dda <boot_read_image_header+0x5a>
     dc8:	4a12      	ldr	r2, [pc, #72]	; (e14 <boot_read_image_header+0x94>)
     dca:	6812      	ldr	r2, [r2, #0]
     dcc:	4293      	cmp	r3, r2
     dce:	d802      	bhi.n	dd6 <boot_read_image_header+0x56>
                if (slot == 0) {
     dd0:	fab1 f181 	clz	r1, r1
     dd4:	0949      	lsrs	r1, r1, #5
    off = 0;
     dd6:	2500      	movs	r5, #0
     dd8:	e7e2      	b.n	da0 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     dda:	d1fc      	bne.n	dd6 <boot_read_image_header+0x56>
                if (slot == 0) {
     ddc:	2900      	cmp	r1, #0
     dde:	d0df      	beq.n	da0 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     de0:	2901      	cmp	r1, #1
     de2:	d1f8      	bne.n	dd6 <boot_read_image_header+0x56>
     de4:	7921      	ldrb	r1, [r4, #4]
     de6:	3902      	subs	r1, #2
     de8:	bf18      	it	ne
     dea:	2101      	movne	r1, #1
     dec:	e7f3      	b.n	dd6 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     dee:	4629      	mov	r1, r5
     df0:	2320      	movs	r3, #32
     df2:	4632      	mov	r2, r6
     df4:	9801      	ldr	r0, [sp, #4]
     df6:	f005 faf6 	bl	63e6 <flash_area_read>
    if (rc != 0) {
     dfa:	4605      	mov	r5, r0
     dfc:	2800      	cmp	r0, #0
     dfe:	d1d7      	bne.n	db0 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     e00:	2c00      	cmp	r4, #0
     e02:	d0d6      	beq.n	db2 <boot_read_image_header+0x32>
     e04:	6835      	ldr	r5, [r6, #0]
     e06:	4804      	ldr	r0, [pc, #16]	; (e18 <boot_read_image_header+0x98>)
     e08:	1a2d      	subs	r5, r5, r0
     e0a:	bf18      	it	ne
     e0c:	f04f 35ff 	movne.w	r5, #4294967295
     e10:	e7cf      	b.n	db2 <boot_read_image_header+0x32>
     e12:	bf00      	nop
     e14:	2000c504 	.word	0x2000c504
     e18:	96f3b83d 	.word	0x96f3b83d

00000e1c <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e20:	4607      	mov	r7, r0
     e22:	460c      	mov	r4, r1
     e24:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e26:	4601      	mov	r1, r0
     e28:	2000      	movs	r0, #0
{
     e2a:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     e2c:	f004 ff50 	bl	5cd0 <boot_status_entries>
    if (max_entries < 0) {
     e30:	1e05      	subs	r5, r0, #0
     e32:	db51      	blt.n	ed8 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     e34:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     e36:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     e38:	f004 ff54 	bl	5ce4 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     e3c:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     e40:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e44:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e48:	f04f 34ff 	mov.w	r4, #4294967295
     e4c:	f105 38ff 	add.w	r8, r5, #4294967295
     e50:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     e54:	b99d      	cbnz	r5, e7e <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     e56:	f1ba 0f01 	cmp.w	sl, #1
     e5a:	dd03      	ble.n	e64 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     e5c:	2145      	movs	r1, #69	; 0x45
     e5e:	4820      	ldr	r0, [pc, #128]	; (ee0 <swap_read_status_bytes+0xc4>)
     e60:	f005 fab3 	bl	63ca <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e64:	1c63      	adds	r3, r4, #1
     e66:	d006      	beq.n	e76 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e68:	2c7f      	cmp	r4, #127	; 0x7f
     e6a:	dc2a      	bgt.n	ec2 <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e6c:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e70:	3401      	adds	r4, #1
     e72:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e74:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     e76:	4628      	mov	r0, r5
     e78:	b005      	add	sp, #20
     e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     e7e:	1e6b      	subs	r3, r5, #1
     e80:	9300      	str	r3, [sp, #0]
     e82:	4641      	mov	r1, r8
     e84:	2301      	movs	r3, #1
     e86:	4638      	mov	r0, r7
     e88:	f10d 020f 	add.w	r2, sp, #15
     e8c:	f005 faab 	bl	63e6 <flash_area_read>
        if (rc < 0) {
     e90:	1e03      	subs	r3, r0, #0
     e92:	9301      	str	r3, [sp, #4]
     e94:	db22      	blt.n	edc <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e96:	2201      	movs	r2, #1
     e98:	4638      	mov	r0, r7
     e9a:	f10d 010f 	add.w	r1, sp, #15
     e9e:	f005 fd78 	bl	6992 <bootutil_buffer_is_erased>
     ea2:	9b01      	ldr	r3, [sp, #4]
     ea4:	b140      	cbz	r0, eb8 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     ea6:	455b      	cmp	r3, fp
     ea8:	d001      	beq.n	eae <swap_read_status_bytes+0x92>
                erased_sections++;
     eaa:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     eae:	469b      	mov	fp, r3
     eb0:	9d00      	ldr	r5, [sp, #0]
     eb2:	eba8 0809 	sub.w	r8, r8, r9
     eb6:	e7cd      	b.n	e54 <swap_read_status_bytes+0x38>
     eb8:	f1b4 3fff 	cmp.w	r4, #4294967295
     ebc:	bf08      	it	eq
     ebe:	462c      	moveq	r4, r5
     ec0:	e7f5      	b.n	eae <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     ec2:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ec4:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     ec6:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ec8:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     eca:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ece:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ed0:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     ed2:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     ed4:	7134      	strb	r4, [r6, #4]
     ed6:	e7ce      	b.n	e76 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     ed8:	2507      	movs	r5, #7
     eda:	e7cc      	b.n	e76 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     edc:	2501      	movs	r5, #1
     ede:	e7ca      	b.n	e76 <swap_read_status_bytes+0x5a>
     ee0:	00007454 	.word	0x00007454

00000ee4 <boot_slots_compatible>:
    return BOOT_IMG(state, slot).num_sectors;
     ee4:	6a81      	ldr	r1, [r0, #40]	; 0x28
     ee6:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     ee8:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     eea:	428a      	cmp	r2, r1
     eec:	d008      	beq.n	f00 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     eee:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     ef0:	428b      	cmp	r3, r1
     ef2:	d005      	beq.n	f00 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     ef4:	2157      	movs	r1, #87	; 0x57
     ef6:	4813      	ldr	r0, [pc, #76]	; (f44 <boot_slots_compatible+0x60>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ef8:	f005 fa67 	bl	63ca <z_log_minimal_printk>
            return 0;
     efc:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     efe:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     f00:	2980      	cmp	r1, #128	; 0x80
     f02:	d91c      	bls.n	f3e <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     f04:	2157      	movs	r1, #87	; 0x57
     f06:	4810      	ldr	r0, [pc, #64]	; (f48 <boot_slots_compatible+0x64>)
     f08:	e7f6      	b.n	ef8 <boot_slots_compatible+0x14>
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
     f0a:	6a44      	ldr	r4, [r0, #36]	; 0x24
     f0c:	6d05      	ldr	r5, [r0, #80]	; 0x50
     f0e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     f12:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     f16:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     f18:	686d      	ldr	r5, [r5, #4]
     f1a:	42ac      	cmp	r4, r5
     f1c:	d002      	beq.n	f24 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     f1e:	2157      	movs	r1, #87	; 0x57
     f20:	480a      	ldr	r0, [pc, #40]	; (f4c <boot_slots_compatible+0x68>)
     f22:	e7e9      	b.n	ef8 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     f24:	3301      	adds	r3, #1
     f26:	429a      	cmp	r2, r3
     f28:	d1ef      	bne.n	f0a <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     f2a:	4291      	cmp	r1, r2
     f2c:	d905      	bls.n	f3a <boot_slots_compatible+0x56>
     f2e:	6a43      	ldr	r3, [r0, #36]	; 0x24
     f30:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     f34:	6853      	ldr	r3, [r2, #4]
     f36:	42a3      	cmp	r3, r4
     f38:	d1f1      	bne.n	f1e <boot_slots_compatible+0x3a>
    return 1;
     f3a:	2001      	movs	r0, #1
     f3c:	e7df      	b.n	efe <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     f3e:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     f40:	461c      	mov	r4, r3
     f42:	e7f0      	b.n	f26 <boot_slots_compatible+0x42>
     f44:	00007477 	.word	0x00007477
     f48:	000074af 	.word	0x000074af
     f4c:	000074de 	.word	0x000074de

00000f50 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     f50:	b500      	push	{lr}
     f52:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f54:	2003      	movs	r0, #3
     f56:	a904      	add	r1, sp, #16
     f58:	f005 fd80 	bl	6a5c <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f5c:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f60:	2a01      	cmp	r2, #1
     f62:	d041      	beq.n	fe8 <swap_status_source+0x98>
     f64:	4b25      	ldr	r3, [pc, #148]	; (ffc <swap_status_source+0xac>)
     f66:	4926      	ldr	r1, [pc, #152]	; (1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>)
     f68:	2a03      	cmp	r2, #3
     f6a:	bf18      	it	ne
     f6c:	460b      	movne	r3, r1
     f6e:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f72:	2149      	movs	r1, #73	; 0x49
     f74:	9202      	str	r2, [sp, #8]
     f76:	f89d 2012 	ldrb.w	r2, [sp, #18]
     f7a:	4822      	ldr	r0, [pc, #136]	; (1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>)
     f7c:	9201      	str	r2, [sp, #4]
     f7e:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f82:	9200      	str	r2, [sp, #0]
     f84:	4a20      	ldr	r2, [pc, #128]	; (1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>)
     f86:	f005 fa20 	bl	63ca <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f8a:	2007      	movs	r0, #7
     f8c:	a906      	add	r1, sp, #24
     f8e:	f005 fd65 	bl	6a5c <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f92:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f96:	2a01      	cmp	r2, #1
     f98:	d028      	beq.n	fec <swap_status_source+0x9c>
     f9a:	4b18      	ldr	r3, [pc, #96]	; (ffc <swap_status_source+0xac>)
     f9c:	4918      	ldr	r1, [pc, #96]	; (1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>)
     f9e:	2a03      	cmp	r2, #3
     fa0:	bf18      	it	ne
     fa2:	460b      	movne	r3, r1
     fa4:	f89d 201b 	ldrb.w	r2, [sp, #27]
     fa8:	2149      	movs	r1, #73	; 0x49
     faa:	9202      	str	r2, [sp, #8]
     fac:	f89d 201a 	ldrb.w	r2, [sp, #26]
     fb0:	4814      	ldr	r0, [pc, #80]	; (1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>)
     fb2:	9201      	str	r2, [sp, #4]
     fb4:	f89d 2019 	ldrb.w	r2, [sp, #25]
     fb8:	9200      	str	r2, [sp, #0]
     fba:	4a14      	ldr	r2, [pc, #80]	; (100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>)
     fbc:	f005 fa05 	bl	63ca <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     fc0:	f89d 3010 	ldrb.w	r3, [sp, #16]
     fc4:	2b01      	cmp	r3, #1
     fc6:	d113      	bne.n	ff0 <swap_status_source+0xa0>
     fc8:	f89d 3012 	ldrb.w	r3, [sp, #18]
     fcc:	2b03      	cmp	r3, #3
     fce:	d10f      	bne.n	ff0 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     fd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
     fd4:	2b01      	cmp	r3, #1
     fd6:	d00b      	beq.n	ff0 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
     fd8:	480d      	ldr	r0, [pc, #52]	; (1010 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x10>)
     fda:	2149      	movs	r1, #73	; 0x49
     fdc:	f005 f9f5 	bl	63ca <z_log_minimal_printk>
        return source;
     fe0:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
     fe2:	b009      	add	sp, #36	; 0x24
     fe4:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fe8:	4b0a      	ldr	r3, [pc, #40]	; (1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>)
     fea:	e7c0      	b.n	f6e <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fec:	4b09      	ldr	r3, [pc, #36]	; (1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>)
     fee:	e7d9      	b.n	fa4 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
     ff0:	4809      	ldr	r0, [pc, #36]	; (1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>)
     ff2:	2149      	movs	r1, #73	; 0x49
     ff4:	f005 f9e9 	bl	63ca <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
     ff8:	2000      	movs	r0, #0
     ffa:	e7f2      	b.n	fe2 <swap_status_source+0x92>
     ffc:	0000750f 	.word	0x0000750f
    1000:	00007515 	.word	0x00007515
    1004:	00007527 	.word	0x00007527
    1008:	00007519 	.word	0x00007519
    100c:	00007568 	.word	0x00007568
    1010:	00007578 	.word	0x00007578
    1014:	0000750a 	.word	0x0000750a
    1018:	00007597 	.word	0x00007597

0000101c <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    101c:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    101e:	684b      	ldr	r3, [r1, #4]
{
    1020:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1022:	4a1e      	ldr	r2, [pc, #120]	; (109c <fixup_revert+0x80>)
    1024:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1028:	4293      	cmp	r3, r2
{
    102a:	4606      	mov	r6, r0
    102c:	460d      	mov	r5, r1
    102e:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1030:	d12f      	bne.n	1092 <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1032:	680b      	ldr	r3, [r1, #0]
    1034:	2b01      	cmp	r3, #1
    1036:	d12c      	bne.n	1092 <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1038:	4620      	mov	r0, r4
    103a:	a904      	add	r1, sp, #16
    103c:	f002 f9e8 	bl	3410 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1040:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1044:	2a01      	cmp	r2, #1
    1046:	d026      	beq.n	1096 <fixup_revert+0x7a>
    1048:	4b15      	ldr	r3, [pc, #84]	; (10a0 <fixup_revert+0x84>)
    104a:	4916      	ldr	r1, [pc, #88]	; (10a4 <fixup_revert+0x88>)
    104c:	2a03      	cmp	r2, #3
    104e:	bf18      	it	ne
    1050:	460b      	movne	r3, r1
    1052:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1056:	2149      	movs	r1, #73	; 0x49
    1058:	9202      	str	r2, [sp, #8]
    105a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    105e:	4812      	ldr	r0, [pc, #72]	; (10a8 <fixup_revert+0x8c>)
    1060:	9201      	str	r2, [sp, #4]
    1062:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1066:	9200      	str	r2, [sp, #0]
    1068:	4a10      	ldr	r2, [pc, #64]	; (10ac <fixup_revert+0x90>)
    106a:	f005 f9ae 	bl	63ca <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    106e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1072:	2b03      	cmp	r3, #3
    1074:	d10d      	bne.n	1092 <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1076:	4621      	mov	r1, r4
    1078:	4630      	mov	r0, r6
    107a:	f004 ff1f 	bl	5ebc <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    107e:	4620      	mov	r0, r4
    1080:	f005 fce3 	bl	6a4a <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1084:	4620      	mov	r0, r4
    1086:	68a9      	ldr	r1, [r5, #8]
    1088:	f004 fe3d 	bl	5d06 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    108c:	4620      	mov	r0, r4
    108e:	f002 f9b1 	bl	33f4 <boot_write_magic>
        assert(rc == 0);
    }
}
    1092:	b006      	add	sp, #24
    1094:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1096:	4b06      	ldr	r3, [pc, #24]	; (10b0 <fixup_revert+0x94>)
    1098:	e7db      	b.n	1052 <fixup_revert+0x36>
    109a:	bf00      	nop
    109c:	04000100 	.word	0x04000100
    10a0:	0000750f 	.word	0x0000750f
    10a4:	00007515 	.word	0x00007515
    10a8:	00007527 	.word	0x00007527
    10ac:	00007568 	.word	0x00007568
    10b0:	0000750a 	.word	0x0000750a

000010b4 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    10b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    10ba:	ed2d 8b02 	vpush	{d8}
    10be:	460c      	mov	r4, r1
    10c0:	685e      	ldr	r6, [r3, #4]
    10c2:	4605      	mov	r5, r0
    10c4:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    10c6:	2300      	movs	r3, #0
{
    10c8:	b08b      	sub	sp, #44	; 0x2c
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    10ca:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    10cc:	429a      	cmp	r2, r3
    10ce:	4608      	mov	r0, r1
    10d0:	f101 0101 	add.w	r1, r1, #1
    10d4:	d8f9      	bhi.n	10ca <swap_run+0x16>
    10d6:	4f78      	ldr	r7, [pc, #480]	; (12b8 <swap_run+0x204>)
    10d8:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    10da:	4620      	mov	r0, r4
    10dc:	f004 fead 	bl	5e3a <boot_status_is_reset>
    10e0:	46bb      	mov	fp, r7
    10e2:	b1c8      	cbz	r0, 1118 <swap_run+0x64>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    10e4:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    10e6:	f004 fdee 	bl	5cc6 <boot_trailer_sz>
        sz = 0;
    10ea:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    10ee:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    10f0:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    10f2:	4290      	cmp	r0, r2
    10f4:	d901      	bls.n	10fa <swap_run+0x46>
                break;
            }
            first_trailer_idx--;
    10f6:	3b01      	subs	r3, #1
            sz += sector_sz;
    10f8:	e7fa      	b.n	10f0 <swap_run+0x3c>
        }

        if (g_last_idx >= first_trailer_idx) {
    10fa:	f8db 2000 	ldr.w	r2, [fp]
    10fe:	429a      	cmp	r2, r3
    1100:	d30a      	bcc.n	1118 <swap_run+0x64>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    1102:	2157      	movs	r1, #87	; 0x57
    1104:	486d      	ldr	r0, [pc, #436]	; (12bc <swap_run+0x208>)
    1106:	f005 f960 	bl	63ca <z_log_minimal_printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    110a:	2301      	movs	r3, #1
    110c:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    110e:	b00b      	add	sp, #44	; 0x2c
    1110:	ecbd 8b02 	vpop	{d8}
    1114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1118:	a908      	add	r1, sp, #32
    111a:	2003      	movs	r0, #3
    111c:	f000 fcbc 	bl	1a98 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1120:	a909      	add	r1, sp, #36	; 0x24
    1122:	2007      	movs	r0, #7
    1124:	f000 fcb8 	bl	1a98 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1128:	4621      	mov	r1, r4
    112a:	4628      	mov	r0, r5
    112c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    112e:	f7ff ff75 	bl	101c <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1132:	7963      	ldrb	r3, [r4, #5]
    1134:	2b01      	cmp	r3, #1
    1136:	d108      	bne.n	114a <swap_run+0x96>
        idx = g_last_idx;
    1138:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    113c:	f8df a180 	ldr.w	sl, [pc, #384]	; 12c0 <swap_run+0x20c>
        while (idx > 0) {
    1140:	f8db 3000 	ldr.w	r3, [fp]
    1144:	b9a7      	cbnz	r7, 1170 <swap_run+0xbc>
        bs->idx = BOOT_STATUS_IDX_0;
    1146:	2301      	movs	r3, #1
    1148:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    114a:	2302      	movs	r3, #2
    idx = 1;
    114c:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    114e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 12c0 <swap_run+0x20c>
    bs->op = BOOT_STATUS_OP_SWAP;
    1152:	7163      	strb	r3, [r4, #5]
        bs->state = BOOT_STATUS_STATE_1;
    1154:	9305      	str	r3, [sp, #20]
    while (idx <= g_last_idx) {
    1156:	f8db 3000 	ldr.w	r3, [fp]
    115a:	f8dd 9020 	ldr.w	r9, [sp, #32]
    115e:	429f      	cmp	r7, r3
    1160:	d94d      	bls.n	11fe <swap_run+0x14a>
    flash_area_close(fap_pri);
    1162:	4648      	mov	r0, r9
    1164:	f005 f93e 	bl	63e4 <flash_area_close>
    flash_area_close(fap_sec);
    1168:	9809      	ldr	r0, [sp, #36]	; 0x24
    116a:	f005 f93b 	bl	63e4 <flash_area_close>
    116e:	e7ce      	b.n	110e <swap_run+0x5a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1170:	6822      	ldr	r2, [r4, #0]
    1172:	3301      	adds	r3, #1
    1174:	1a9b      	subs	r3, r3, r2
    1176:	429f      	cmp	r7, r3
    1178:	d83f      	bhi.n	11fa <swap_run+0x146>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    117a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    117c:	2a01      	cmp	r2, #1
 */
uint8_t flash_area_erased_val(const struct flash_area *fap);

static inline uint32_t flash_sector_get_off(const struct flash_sector *fs)
{
	return fs->fs_off;
    117e:	6819      	ldr	r1, [r3, #0]
    1180:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1184:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1188:	f853 3c08 	ldr.w	r3, [r3, #-8]
    118c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1190:	eba3 0301 	sub.w	r3, r3, r1
    1194:	ee08 3a10 	vmov	s16, r3
    1198:	eba0 0901 	sub.w	r9, r0, r1
    119c:	d112      	bne.n	11c4 <swap_run+0x110>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    119e:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    11a2:	2a02      	cmp	r2, #2
    11a4:	d00a      	beq.n	11bc <swap_run+0x108>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    11a6:	4641      	mov	r1, r8
    11a8:	4628      	mov	r0, r5
    11aa:	9303      	str	r3, [sp, #12]
    11ac:	f004 fe86 	bl	5ebc <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    11b0:	4622      	mov	r2, r4
    11b2:	4641      	mov	r1, r8
    11b4:	4628      	mov	r0, r5
    11b6:	f004 feb7 	bl	5f28 <swap_status_init>
    11ba:	9b03      	ldr	r3, [sp, #12]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    11bc:	4619      	mov	r1, r3
    11be:	4628      	mov	r0, r5
    11c0:	f004 fe7c 	bl	5ebc <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    11c4:	4632      	mov	r2, r6
    11c6:	4649      	mov	r1, r9
    11c8:	4640      	mov	r0, r8
    11ca:	f004 fe75 	bl	5eb8 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    11ce:	ee18 3a10 	vmov	r3, s16
    11d2:	4642      	mov	r2, r8
    11d4:	4641      	mov	r1, r8
    11d6:	4628      	mov	r0, r5
    11d8:	e9cd 9600 	strd	r9, r6, [sp]
    11dc:	f7ff fc4e 	bl	a7c <boot_copy_region>
    rc = boot_write_status(state, bs);
    11e0:	4621      	mov	r1, r4
    11e2:	4628      	mov	r0, r5
    11e4:	f004 fe36 	bl	5e54 <boot_write_status>
    bs->idx++;
    11e8:	6823      	ldr	r3, [r4, #0]
    11ea:	3301      	adds	r3, #1
    11ec:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    11ee:	b120      	cbz	r0, 11fa <swap_run+0x146>
    11f0:	f8da 3000 	ldr.w	r3, [sl]
    11f4:	3301      	adds	r3, #1
    11f6:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    11fa:	3f01      	subs	r7, #1
    11fc:	e7a0      	b.n	1140 <swap_run+0x8c>
        if (idx >= bs->idx) {
    11fe:	6823      	ldr	r3, [r4, #0]
    1200:	429f      	cmp	r7, r3
    1202:	d356      	bcc.n	12b2 <swap_run+0x1fe>
    1204:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1206:	6d28      	ldr	r0, [r5, #80]	; 0x50
    1208:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    120c:	00fa      	lsls	r2, r7, #3
    120e:	9304      	str	r3, [sp, #16]
    1210:	680b      	ldr	r3, [r1, #0]
    1212:	3a08      	subs	r2, #8
    1214:	f850 c002 	ldr.w	ip, [r0, r2]
    1218:	9303      	str	r3, [sp, #12]
    121a:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    121c:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    121e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    if (bs->state == BOOT_STATUS_STATE_0) {
    1222:	2801      	cmp	r0, #1
    1224:	ebac 0303 	sub.w	r3, ip, r3
    1228:	d141      	bne.n	12ae <swap_run+0x1fa>
    122a:	5889      	ldr	r1, [r1, r2]
    122c:	9307      	str	r3, [sp, #28]
    122e:	9b03      	ldr	r3, [sp, #12]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1230:	4632      	mov	r2, r6
    1232:	1ac9      	subs	r1, r1, r3
    1234:	4648      	mov	r0, r9
    1236:	9106      	str	r1, [sp, #24]
    1238:	f004 fe3e 	bl	5eb8 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    123c:	9906      	ldr	r1, [sp, #24]
    123e:	9b07      	ldr	r3, [sp, #28]
    1240:	464a      	mov	r2, r9
    1242:	9100      	str	r1, [sp, #0]
    1244:	4628      	mov	r0, r5
    1246:	4651      	mov	r1, sl
    1248:	9601      	str	r6, [sp, #4]
    124a:	9306      	str	r3, [sp, #24]
    124c:	f7ff fc16 	bl	a7c <boot_copy_region>
        rc = boot_write_status(state, bs);
    1250:	4621      	mov	r1, r4
    1252:	4628      	mov	r0, r5
    1254:	f004 fdfe 	bl	5e54 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1258:	9b05      	ldr	r3, [sp, #20]
    125a:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    125c:	9b06      	ldr	r3, [sp, #24]
    125e:	b120      	cbz	r0, 126a <swap_run+0x1b6>
    1260:	f8d8 2000 	ldr.w	r2, [r8]
    1264:	3201      	adds	r2, #1
    1266:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    126a:	4619      	mov	r1, r3
    126c:	4632      	mov	r2, r6
    126e:	4650      	mov	r0, sl
    1270:	9306      	str	r3, [sp, #24]
    1272:	f004 fe21 	bl	5eb8 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1276:	9b06      	ldr	r3, [sp, #24]
    1278:	4649      	mov	r1, r9
    127a:	9300      	str	r3, [sp, #0]
    127c:	4628      	mov	r0, r5
    127e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    1282:	9601      	str	r6, [sp, #4]
    1284:	1a9b      	subs	r3, r3, r2
    1286:	4652      	mov	r2, sl
    1288:	f7ff fbf8 	bl	a7c <boot_copy_region>
        rc = boot_write_status(state, bs);
    128c:	4621      	mov	r1, r4
    128e:	4628      	mov	r0, r5
    1290:	f004 fde0 	bl	5e54 <boot_write_status>
        bs->idx++;
    1294:	6823      	ldr	r3, [r4, #0]
    1296:	3301      	adds	r3, #1
    1298:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    129a:	f04f 0301 	mov.w	r3, #1
    129e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12a0:	b138      	cbz	r0, 12b2 <swap_run+0x1fe>
    12a2:	f8d8 3000 	ldr.w	r3, [r8]
    12a6:	3301      	adds	r3, #1
    12a8:	f8c8 3000 	str.w	r3, [r8]
    12ac:	e001      	b.n	12b2 <swap_run+0x1fe>
    if (bs->state == BOOT_STATUS_STATE_1) {
    12ae:	2802      	cmp	r0, #2
    12b0:	d0db      	beq.n	126a <swap_run+0x1b6>
        idx++;
    12b2:	3701      	adds	r7, #1
    12b4:	e74f      	b.n	1156 <swap_run+0xa2>
    12b6:	bf00      	nop
    12b8:	2000c504 	.word	0x2000c504
    12bc:	000075ae 	.word	0x000075ae
    12c0:	2000d330 	.word	0x2000d330

000012c4 <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    12c4:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    12c6:	4d09      	ldr	r5, [pc, #36]	; (12ec <cc310_init+0x28>)
    12c8:	782b      	ldrb	r3, [r5, #0]
    12ca:	b953      	cbnz	r3, 12e2 <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    12cc:	2601      	movs	r6, #1
    12ce:	4c08      	ldr	r4, [pc, #32]	; (12f0 <cc310_init+0x2c>)
    12d0:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    12d4:	f003 fc02 	bl	4adc <nrf_cc310_bl_init>
    12d8:	b928      	cbnz	r0, 12e6 <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    12da:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    12dc:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    12e0:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    12e2:	2000      	movs	r0, #0
    12e4:	e7fc      	b.n	12e0 <cc310_init+0x1c>
            return -1;
    12e6:	f04f 30ff 	mov.w	r0, #4294967295
    12ea:	e7f9      	b.n	12e0 <cc310_init+0x1c>
    12ec:	2000d4e4 	.word	0x2000d4e4
    12f0:	50840000 	.word	0x50840000

000012f4 <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    12f4:	b570      	push	{r4, r5, r6, lr}
    12f6:	b0ae      	sub	sp, #184	; 0xb8
    12f8:	461d      	mov	r5, r3
    12fa:	4604      	mov	r4, r0
    12fc:	e9cd 2102 	strd	r2, r1, [sp, #8]
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    1300:	f7ff ffe0 	bl	12c4 <cc310_init>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    1304:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    NRF_CRYPTOCELL->ENABLE=1;
    1308:	2301      	movs	r3, #1
    130a:	4e06      	ldr	r6, [pc, #24]	; (1324 <cc310_ecdsa_verify_secp256r1+0x30>)
    130c:	a805      	add	r0, sp, #20
    130e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    1312:	4623      	mov	r3, r4
    1314:	9500      	str	r5, [sp, #0]
    1316:	f005 fbf1 	bl	6afc <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    131a:	2300      	movs	r3, #0
    131c:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1320:	b02e      	add	sp, #184	; 0xb8
    1322:	bd70      	pop	{r4, r5, r6, pc}
    1324:	50840000 	.word	0x50840000

00001328 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1328:	b510      	push	{r4, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    132a:	2301      	movs	r3, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    132c:	f04f 34ff 	mov.w	r4, #4294967295
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1330:	2100      	movs	r1, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1332:	4a1a      	ldr	r2, [pc, #104]	; (139c <nrf_cleanup_peripheral+0x74>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1334:	481a      	ldr	r0, [pc, #104]	; (13a0 <nrf_cleanup_peripheral+0x78>)
    1336:	6013      	str	r3, [r2, #0]
    p_reg->EVTENCLR = mask;
    1338:	f8c2 4344 	str.w	r4, [r2, #836]	; 0x344
    p_reg->INTENCLR = mask;
    133c:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1340:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    1344:	6013      	str	r3, [r2, #0]
    p_reg->EVTENCLR = mask;
    1346:	4b17      	ldr	r3, [pc, #92]	; (13a4 <nrf_cleanup_peripheral+0x7c>)
    1348:	2280      	movs	r2, #128	; 0x80
    134a:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    134e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1352:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    1356:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    135a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    135e:	f005 f937 	bl	65d0 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1362:	2280      	movs	r2, #128	; 0x80
    1364:	2100      	movs	r1, #0
    1366:	4810      	ldr	r0, [pc, #64]	; (13a8 <nrf_cleanup_peripheral+0x80>)
    1368:	f005 f932 	bl	65d0 <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    136c:	2100      	movs	r1, #0
    136e:	4b0f      	ldr	r3, [pc, #60]	; (13ac <nrf_cleanup_peripheral+0x84>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1370:	2280      	movs	r2, #128	; 0x80
    1372:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    1376:	480e      	ldr	r0, [pc, #56]	; (13b0 <nrf_cleanup_peripheral+0x88>)
    p_reg->INTENCLR = mask;
    1378:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    137c:	f005 f928 	bl	65d0 <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    1380:	2280      	movs	r2, #128	; 0x80
    1382:	2100      	movs	r1, #0
    1384:	480b      	ldr	r0, [pc, #44]	; (13b4 <nrf_cleanup_peripheral+0x8c>)
    1386:	f005 f923 	bl	65d0 <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    138a:	4b0b      	ldr	r3, [pc, #44]	; (13b8 <nrf_cleanup_peripheral+0x90>)
    138c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1390:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1394:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    1398:	bd10      	pop	{r4, pc}
    139a:	bf00      	nop
    139c:	50014004 	.word	0x50014004
    13a0:	50008080 	.word	0x50008080
    13a4:	50015000 	.word	0x50015000
    13a8:	50008180 	.word	0x50008180
    13ac:	50009000 	.word	0x50009000
    13b0:	50009080 	.word	0x50009080
    13b4:	50009180 	.word	0x50009180
    13b8:	50017000 	.word	0x50017000

000013bc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    13bc:	680b      	ldr	r3, [r1, #0]
    13be:	3301      	adds	r3, #1
    13c0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    13c2:	4b01      	ldr	r3, [pc, #4]	; (13c8 <char_out+0xc>)
    13c4:	681b      	ldr	r3, [r3, #0]
    13c6:	4718      	bx	r3
    13c8:	2000c508 	.word	0x2000c508

000013cc <__printk_hook_install>:
	_char_out = fn;
    13cc:	4b01      	ldr	r3, [pc, #4]	; (13d4 <__printk_hook_install+0x8>)
    13ce:	6018      	str	r0, [r3, #0]
}
    13d0:	4770      	bx	lr
    13d2:	bf00      	nop
    13d4:	2000c508 	.word	0x2000c508

000013d8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    13d8:	b507      	push	{r0, r1, r2, lr}
    13da:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    13dc:	2100      	movs	r1, #0
{
    13de:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    13e0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    13e2:	4803      	ldr	r0, [pc, #12]	; (13f0 <vprintk+0x18>)
    13e4:	a901      	add	r1, sp, #4
    13e6:	f000 f8ed 	bl	15c4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    13ea:	b003      	add	sp, #12
    13ec:	f85d fb04 	ldr.w	pc, [sp], #4
    13f0:	000013bd 	.word	0x000013bd

000013f4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13f8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    13fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13fe:	f019 0808 	ands.w	r8, r9, #8
{
    1402:	4693      	mov	fp, r2
	if (processing) {
    1404:	d00e      	beq.n	1424 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    1406:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1408:	bf0c      	ite	eq
    140a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    140e:	f049 0920 	orrne.w	r9, r9, #32
    1412:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1416:	f38b 8811 	msr	BASEPRI, fp
    141a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    141e:	b003      	add	sp, #12
    1420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    1424:	f8df a198 	ldr.w	sl, [pc, #408]	; 15c0 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1428:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    142c:	2902      	cmp	r1, #2
    142e:	d107      	bne.n	1440 <process_event+0x4c>
			evt = process_recheck(mgr);
    1430:	4620      	mov	r0, r4
    1432:	f004 ff1d 	bl	6270 <process_recheck>
		if (evt == EVT_NOP) {
    1436:	2800      	cmp	r0, #0
    1438:	d0ed      	beq.n	1416 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    143a:	2801      	cmp	r0, #1
    143c:	8b23      	ldrh	r3, [r4, #24]
    143e:	d14d      	bne.n	14dc <process_event+0xe8>
			res = mgr->last_res;
    1440:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1442:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1444:	2f00      	cmp	r7, #0
    1446:	da15      	bge.n	1474 <process_event+0x80>
		*clients = mgr->clients;
    1448:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    144a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    144e:	e9c4 8800 	strd	r8, r8, [r4]
    1452:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1456:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1458:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    145a:	8b21      	ldrh	r1, [r4, #24]
    145c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1460:	454a      	cmp	r2, r9
    1462:	d002      	beq.n	146a <process_event+0x76>
		if (do_monitors
    1464:	68a3      	ldr	r3, [r4, #8]
    1466:	2b00      	cmp	r3, #0
    1468:	d159      	bne.n	151e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    146a:	b90d      	cbnz	r5, 1470 <process_event+0x7c>
		    || (transit != NULL)) {
    146c:	2e00      	cmp	r6, #0
    146e:	d071      	beq.n	1554 <process_event+0x160>
    1470:	2300      	movs	r3, #0
    1472:	e055      	b.n	1520 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1474:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1478:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    147a:	2a01      	cmp	r2, #1
    147c:	d81f      	bhi.n	14be <process_event+0xca>
		*clients = mgr->clients;
    147e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1482:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1484:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1486:	b289      	uxth	r1, r1
	list->tail = NULL;
    1488:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    148c:	d10c      	bne.n	14a8 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    148e:	2d00      	cmp	r5, #0
    1490:	462b      	mov	r3, r5
    1492:	bf38      	it	cc
    1494:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1496:	b12b      	cbz	r3, 14a4 <process_event+0xb0>
				mgr->refs += 1U;
    1498:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    149a:	681b      	ldr	r3, [r3, #0]
    149c:	3201      	adds	r2, #1
    149e:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14a0:	2b00      	cmp	r3, #0
    14a2:	d1f8      	bne.n	1496 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14a4:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    14a8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14aa:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14ac:	f004 fee0 	bl	6270 <process_recheck>
    14b0:	2800      	cmp	r0, #0
    14b2:	d0d1      	beq.n	1458 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14b4:	8b23      	ldrh	r3, [r4, #24]
    14b6:	f043 0320 	orr.w	r3, r3, #32
    14ba:	8323      	strh	r3, [r4, #24]
    14bc:	e7cc      	b.n	1458 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14be:	2b04      	cmp	r3, #4
    14c0:	d10a      	bne.n	14d8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14c2:	f021 0107 	bic.w	r1, r1, #7
    14c6:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    14c8:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14ca:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14cc:	f004 fed0 	bl	6270 <process_recheck>
    14d0:	b110      	cbz	r0, 14d8 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14d2:	f041 0120 	orr.w	r1, r1, #32
    14d6:	8321      	strh	r1, [r4, #24]
    14d8:	2500      	movs	r5, #0
    14da:	e7bd      	b.n	1458 <process_event+0x64>
		} else if (evt == EVT_START) {
    14dc:	2803      	cmp	r0, #3
    14de:	d109      	bne.n	14f4 <process_event+0x100>
			transit = mgr->transitions->start;
    14e0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14e2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    14e6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14e8:	f043 0306 	orr.w	r3, r3, #6
}
    14ec:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    14ee:	8323      	strh	r3, [r4, #24]
		res = 0;
    14f0:	462f      	mov	r7, r5
    14f2:	e7b2      	b.n	145a <process_event+0x66>
		} else if (evt == EVT_STOP) {
    14f4:	2804      	cmp	r0, #4
    14f6:	d106      	bne.n	1506 <process_event+0x112>
			transit = mgr->transitions->stop;
    14f8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14fa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    14fe:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1500:	f043 0304 	orr.w	r3, r3, #4
    1504:	e7f2      	b.n	14ec <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    1506:	2805      	cmp	r0, #5
    1508:	d106      	bne.n	1518 <process_event+0x124>
			transit = mgr->transitions->reset;
    150a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    150c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1510:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1512:	f043 0305 	orr.w	r3, r3, #5
    1516:	e7e9      	b.n	14ec <process_event+0xf8>
    1518:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    151a:	462e      	mov	r6, r5
    151c:	e7e8      	b.n	14f0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    151e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1520:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1524:	8321      	strh	r1, [r4, #24]
    1526:	f38b 8811 	msr	BASEPRI, fp
    152a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    152e:	bb03      	cbnz	r3, 1572 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1530:	2d00      	cmp	r5, #0
    1532:	d134      	bne.n	159e <process_event+0x1aa>
			if (transit != NULL) {
    1534:	b116      	cbz	r6, 153c <process_event+0x148>
				transit(mgr, transition_complete);
    1536:	4651      	mov	r1, sl
    1538:	4620      	mov	r0, r4
    153a:	47b0      	blx	r6
	__asm__ volatile(
    153c:	f04f 0320 	mov.w	r3, #32
    1540:	f3ef 8b11 	mrs	fp, BASEPRI
    1544:	f383 8812 	msr	BASEPRI_MAX, r3
    1548:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    154c:	8b23      	ldrh	r3, [r4, #24]
    154e:	f023 0308 	bic.w	r3, r3, #8
    1552:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1554:	8b23      	ldrh	r3, [r4, #24]
    1556:	06da      	lsls	r2, r3, #27
    1558:	d52a      	bpl.n	15b0 <process_event+0x1bc>
			evt = EVT_COMPLETE;
    155a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    155c:	f023 0310 	bic.w	r3, r3, #16
    1560:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1562:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1566:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    156a:	2900      	cmp	r1, #0
    156c:	f47f af5e 	bne.w	142c <process_event+0x38>
out:
    1570:	e751      	b.n	1416 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1572:	68a1      	ldr	r1, [r4, #8]
    1574:	2900      	cmp	r1, #0
    1576:	d0db      	beq.n	1530 <process_event+0x13c>
	return node->next;
    1578:	680b      	ldr	r3, [r1, #0]
    157a:	2b00      	cmp	r3, #0
    157c:	bf38      	it	cc
    157e:	2300      	movcc	r3, #0
    1580:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    1582:	4620      	mov	r0, r4
    1584:	463b      	mov	r3, r7
    1586:	f8d1 b004 	ldr.w	fp, [r1, #4]
    158a:	9201      	str	r2, [sp, #4]
    158c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    158e:	9a01      	ldr	r2, [sp, #4]
    1590:	f1b9 0f00 	cmp.w	r9, #0
    1594:	d0cc      	beq.n	1530 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1596:	4649      	mov	r1, r9
    1598:	f8d9 3000 	ldr.w	r3, [r9]
    159c:	e7ed      	b.n	157a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    159e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    15a0:	463b      	mov	r3, r7
    15a2:	4620      	mov	r0, r4
    15a4:	9201      	str	r2, [sp, #4]
    15a6:	682d      	ldr	r5, [r5, #0]
    15a8:	f004 fe7e 	bl	62a8 <notify_one>
	while (!sys_slist_is_empty(list)) {
    15ac:	9a01      	ldr	r2, [sp, #4]
    15ae:	e7bf      	b.n	1530 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    15b0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15b4:	bf1e      	ittt	ne
    15b6:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    15ba:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15bc:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    15be:	e7d0      	b.n	1562 <process_event+0x16e>
    15c0:	000062d5 	.word	0x000062d5

000015c4 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    15c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15c8:	468b      	mov	fp, r1
	size_t count = 0;
    15ca:	f04f 0a00 	mov.w	sl, #0
{
    15ce:	b08f      	sub	sp, #60	; 0x3c
    15d0:	461f      	mov	r7, r3
	char *prefix, *data;
	int min_width, precision, data_len;
	char padding_mode, length_mod, special;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    15d2:	1e53      	subs	r3, r2, #1
{
    15d4:	9000      	str	r0, [sp, #0]
	fmt--;
    15d6:	9301      	str	r3, [sp, #4]

start:
	while (*++fmt != '%') {
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	7858      	ldrb	r0, [r3, #1]
    15dc:	1c5c      	adds	r4, r3, #1
    15de:	2825      	cmp	r0, #37	; 0x25
    15e0:	d122      	bne.n	1628 <cbvprintf+0x64>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    15e2:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    15e6:	f04f 36ff 	mov.w	r6, #4294967295

	for (fmt++ ; ; fmt++) {
    15ea:	4618      	mov	r0, r3
	length_mod = 0;
    15ec:	4661      	mov	r1, ip
	min_width = -1;
    15ee:	4634      	mov	r4, r6
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    15f0:	f04f 0e0a 	mov.w	lr, #10
	for (fmt++ ; ; fmt++) {
    15f4:	3002      	adds	r0, #2
	padding_mode = 0;
    15f6:	f8cd c008 	str.w	ip, [sp, #8]
		switch (*fmt) {
    15fa:	7802      	ldrb	r2, [r0, #0]
    15fc:	9001      	str	r0, [sp, #4]
    15fe:	2a39      	cmp	r2, #57	; 0x39
    1600:	f100 0001 	add.w	r0, r0, #1
    1604:	d858      	bhi.n	16b8 <cbvprintf+0xf4>
    1606:	2a1f      	cmp	r2, #31
    1608:	d818      	bhi.n	163c <cbvprintf+0x78>
    160a:	2a00      	cmp	r2, #0
    160c:	f000 81ff 	beq.w	1a0e <cbvprintf+0x44a>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1610:	4659      	mov	r1, fp
    1612:	9b00      	ldr	r3, [sp, #0]
    1614:	2025      	movs	r0, #37	; 0x25
    1616:	4798      	blx	r3
			OUTC(*fmt);
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	4659      	mov	r1, fp
    161c:	7818      	ldrb	r0, [r3, #0]
    161e:	9b00      	ldr	r3, [sp, #0]
    1620:	4798      	blx	r3
    1622:	f10a 0a02 	add.w	sl, sl, #2
			goto start;
    1626:	e7d7      	b.n	15d8 <cbvprintf+0x14>
		if (*fmt == '\0') {
    1628:	2800      	cmp	r0, #0
    162a:	f000 81f0 	beq.w	1a0e <cbvprintf+0x44a>
		OUTC(*fmt);
    162e:	4659      	mov	r1, fp
    1630:	9b00      	ldr	r3, [sp, #0]
    1632:	4798      	blx	r3
    1634:	f10a 0a01 	add.w	sl, sl, #1
	while (*++fmt != '%') {
    1638:	9401      	str	r4, [sp, #4]
    163a:	e7cd      	b.n	15d8 <cbvprintf+0x14>
    163c:	f1a2 0320 	sub.w	r3, r2, #32
    1640:	2b19      	cmp	r3, #25
    1642:	d8e5      	bhi.n	1610 <cbvprintf+0x4c>
    1644:	a501      	add	r5, pc, #4	; (adr r5, 164c <cbvprintf+0x88>)
    1646:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    164a:	bf00      	nop
    164c:	000016b5 	.word	0x000016b5
    1650:	00001611 	.word	0x00001611
    1654:	00001611 	.word	0x00001611
    1658:	000016b5 	.word	0x000016b5
    165c:	00001611 	.word	0x00001611
    1660:	00001735 	.word	0x00001735
    1664:	00001611 	.word	0x00001611
    1668:	00001611 	.word	0x00001611
    166c:	00001611 	.word	0x00001611
    1670:	00001611 	.word	0x00001611
    1674:	00001777 	.word	0x00001777
    1678:	000016b5 	.word	0x000016b5
    167c:	00001611 	.word	0x00001611
    1680:	0000178b 	.word	0x0000178b
    1684:	00001743 	.word	0x00001743
    1688:	00001611 	.word	0x00001611
    168c:	0000174f 	.word	0x0000174f
    1690:	0000176b 	.word	0x0000176b
    1694:	0000176b 	.word	0x0000176b
    1698:	0000176b 	.word	0x0000176b
    169c:	0000176b 	.word	0x0000176b
    16a0:	0000176b 	.word	0x0000176b
    16a4:	0000176b 	.word	0x0000176b
    16a8:	0000176b 	.word	0x0000176b
    16ac:	0000176b 	.word	0x0000176b
    16b0:	0000176b 	.word	0x0000176b
		switch (*fmt) {
    16b4:	4694      	mov	ip, r2
    16b6:	e7a0      	b.n	15fa <cbvprintf+0x36>
    16b8:	2a58      	cmp	r2, #88	; 0x58
    16ba:	f000 8140 	beq.w	193e <cbvprintf+0x37a>
    16be:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    16c2:	b2dd      	uxtb	r5, r3
    16c4:	2d17      	cmp	r5, #23
    16c6:	d8a3      	bhi.n	1610 <cbvprintf+0x4c>
    16c8:	2b17      	cmp	r3, #23
    16ca:	d8a1      	bhi.n	1610 <cbvprintf+0x4c>
    16cc:	a501      	add	r5, pc, #4	; (adr r5, 16d4 <cbvprintf+0x110>)
    16ce:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
    16d2:	bf00      	nop
    16d4:	00001999 	.word	0x00001999
    16d8:	000017b1 	.word	0x000017b1
    16dc:	00001611 	.word	0x00001611
    16e0:	00001611 	.word	0x00001611
    16e4:	00001611 	.word	0x00001611
    16e8:	00001791 	.word	0x00001791
    16ec:	000017b1 	.word	0x000017b1
    16f0:	00001611 	.word	0x00001611
    16f4:	00001611 	.word	0x00001611
    16f8:	00001791 	.word	0x00001791
    16fc:	00001611 	.word	0x00001611
    1700:	00001611 	.word	0x00001611
    1704:	00001611 	.word	0x00001611
    1708:	000018e9 	.word	0x000018e9
    170c:	00001611 	.word	0x00001611
    1710:	00001611 	.word	0x00001611
    1714:	0000197b 	.word	0x0000197b
    1718:	00001611 	.word	0x00001611
    171c:	000017b1 	.word	0x000017b1
    1720:	00001611 	.word	0x00001611
    1724:	00001611 	.word	0x00001611
    1728:	000018e9 	.word	0x000018e9
    172c:	00001611 	.word	0x00001611
    1730:	00001791 	.word	0x00001791
			OUTC('%');
    1734:	4659      	mov	r1, fp
    1736:	2025      	movs	r0, #37	; 0x25
    1738:	9b00      	ldr	r3, [sp, #0]
    173a:	4798      	blx	r3
    173c:	f10a 0a01 	add.w	sl, sl, #1
			goto start;
    1740:	e74a      	b.n	15d8 <cbvprintf+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1742:	9b02      	ldr	r3, [sp, #8]
			precision = 0;
    1744:	2600      	movs	r6, #0
			padding_mode &= (char)~PAD_ZERO;
    1746:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    174a:	9302      	str	r3, [sp, #8]
			continue;
    174c:	e755      	b.n	15fa <cbvprintf+0x36>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    174e:	2c00      	cmp	r4, #0
    1750:	da0b      	bge.n	176a <cbvprintf+0x1a6>
    1752:	2e00      	cmp	r6, #0
    1754:	da0b      	bge.n	176e <cbvprintf+0x1aa>
    1756:	9b02      	ldr	r3, [sp, #8]
    1758:	2b00      	cmp	r3, #0
    175a:	f000 8154 	beq.w	1a06 <cbvprintf+0x442>
				min_width = 10 * min_width + *fmt - '0';
    175e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1762:	fb0e 2404 	mla	r4, lr, r4, r2
    1766:	3c30      	subs	r4, #48	; 0x30
    1768:	e747      	b.n	15fa <cbvprintf+0x36>
			if (precision >= 0) {
    176a:	2e00      	cmp	r6, #0
    176c:	dbf7      	blt.n	175e <cbvprintf+0x19a>
				precision = 10 * precision + *fmt - '0';
    176e:	fb0e 2606 	mla	r6, lr, r6, r2
    1772:	3e30      	subs	r6, #48	; 0x30
    1774:	e741      	b.n	15fa <cbvprintf+0x36>
			if (precision >= 0) {
    1776:	2e00      	cmp	r6, #0
    1778:	f857 3b04 	ldr.w	r3, [r7], #4
    177c:	db01      	blt.n	1782 <cbvprintf+0x1be>
				precision = va_arg(ap, int);
    177e:	461e      	mov	r6, r3
    1780:	e73b      	b.n	15fa <cbvprintf+0x36>
				if (min_width < 0) {
    1782:	1e1c      	subs	r4, r3, #0
    1784:	f6bf af39 	bge.w	15fa <cbvprintf+0x36>
					min_width = -min_width;
    1788:	4264      	negs	r4, r4
		switch (*fmt) {
    178a:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    178c:	9302      	str	r3, [sp, #8]
    178e:	e734      	b.n	15fa <cbvprintf+0x36>
			if (*fmt == 'h' && length_mod == 'h') {
    1790:	2a68      	cmp	r2, #104	; 0x68
    1792:	d103      	bne.n	179c <cbvprintf+0x1d8>
    1794:	2968      	cmp	r1, #104	; 0x68
    1796:	d106      	bne.n	17a6 <cbvprintf+0x1e2>
				length_mod = 'H';
    1798:	2148      	movs	r1, #72	; 0x48
    179a:	e72e      	b.n	15fa <cbvprintf+0x36>
			} else if (*fmt == 'l' && length_mod == 'l') {
    179c:	2a6c      	cmp	r2, #108	; 0x6c
    179e:	d102      	bne.n	17a6 <cbvprintf+0x1e2>
    17a0:	296c      	cmp	r1, #108	; 0x6c
    17a2:	f000 8132 	beq.w	1a0a <cbvprintf+0x446>
			} else if (length_mod == '\0') {
    17a6:	2900      	cmp	r1, #0
    17a8:	f47f af32 	bne.w	1610 <cbvprintf+0x4c>
    17ac:	4611      	mov	r1, r2
		switch (*fmt) {
    17ae:	e724      	b.n	15fa <cbvprintf+0x36>
			if (length_mod == 'z') {
    17b0:	297a      	cmp	r1, #122	; 0x7a
    17b2:	d10f      	bne.n	17d4 <cbvprintf+0x210>
				d = va_arg(ap, unsigned int);
    17b4:	683b      	ldr	r3, [r7, #0]
			} else if (*fmt == 'u') {
    17b6:	2a75      	cmp	r2, #117	; 0x75
				d = va_arg(ap, unsigned int);
    17b8:	4698      	mov	r8, r3
    17ba:	f107 0504 	add.w	r5, r7, #4
			} else if (*fmt == 'u') {
    17be:	f040 8088 	bne.w	18d2 <cbvprintf+0x30e>
				d = va_arg(ap, unsigned int);
    17c2:	f04f 0900 	mov.w	r9, #0
			} else if (special == ' ') {
    17c6:	f1bc 0f20 	cmp.w	ip, #32
    17ca:	f040 8085 	bne.w	18d8 <cbvprintf+0x314>
				prefix = " ";
    17ce:	4f92      	ldr	r7, [pc, #584]	; (1a18 <cbvprintf+0x454>)
				min_width--;
    17d0:	3c01      	subs	r4, #1
    17d2:	e015      	b.n	1800 <cbvprintf+0x23c>
			} else if (length_mod == 'l') {
    17d4:	296c      	cmp	r1, #108	; 0x6c
    17d6:	d0ed      	beq.n	17b4 <cbvprintf+0x1f0>
			} else if (length_mod == 'L') {
    17d8:	294c      	cmp	r1, #76	; 0x4c
    17da:	d1eb      	bne.n	17b4 <cbvprintf+0x1f0>
				if (*fmt == 'u') {
    17dc:	1dfd      	adds	r5, r7, #7
    17de:	f025 0507 	bic.w	r5, r5, #7
    17e2:	2a75      	cmp	r2, #117	; 0x75
    17e4:	e8f5 8902 	ldrd	r8, r9, [r5], #8
    17e8:	d0ed      	beq.n	17c6 <cbvprintf+0x202>
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17ea:	f1b8 0f00 	cmp.w	r8, #0
    17ee:	f179 0300 	sbcs.w	r3, r9, #0
    17f2:	dae8      	bge.n	17c6 <cbvprintf+0x202>
				d = -d;
    17f4:	f1d8 0800 	rsbs	r8, r8, #0
				prefix = "-";
    17f8:	4f88      	ldr	r7, [pc, #544]	; (1a1c <cbvprintf+0x458>)
				d = -d;
    17fa:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
				min_width--;
    17fe:	3c01      	subs	r4, #1
	int i = 0;
    1800:	ab0d      	add	r3, sp, #52	; 0x34
    1802:	9305      	str	r3, [sp, #20]
    1804:	2300      	movs	r3, #0
    1806:	9303      	str	r3, [sp, #12]
		buftop[--i] = c + '0';
    1808:	9b03      	ldr	r3, [sp, #12]
		unsigned int c = num % base;
    180a:	4640      	mov	r0, r8
    180c:	9304      	str	r3, [sp, #16]
		buftop[--i] = c + '0';
    180e:	3b01      	subs	r3, #1
		unsigned int c = num % base;
    1810:	4649      	mov	r1, r9
		buftop[--i] = c + '0';
    1812:	9303      	str	r3, [sp, #12]
		unsigned int c = num % base;
    1814:	220a      	movs	r2, #10
    1816:	2300      	movs	r3, #0
    1818:	f7fe fc94 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    181c:	9b05      	ldr	r3, [sp, #20]
    181e:	3230      	adds	r2, #48	; 0x30
    1820:	f803 2901 	strb.w	r2, [r3], #-1
		num /= base;
    1824:	4640      	mov	r0, r8
    1826:	220a      	movs	r2, #10
    1828:	4649      	mov	r1, r9
		buftop[--i] = c + '0';
    182a:	9305      	str	r3, [sp, #20]
		num /= base;
    182c:	2300      	movs	r3, #0
    182e:	e9cd 8906 	strd	r8, r9, [sp, #24]
    1832:	f7fe fc87 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    183a:	2b00      	cmp	r3, #0
    183c:	bf08      	it	eq
    183e:	2a0a      	cmpeq	r2, #10
		num /= base;
    1840:	4680      	mov	r8, r0
    1842:	4689      	mov	r9, r1
	} while (num);
    1844:	d2e0      	bcs.n	1808 <cbvprintf+0x244>
	return -i;
    1846:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    1848:	aa0e      	add	r2, sp, #56	; 0x38
	return -i;
    184a:	f1c3 0901 	rsb	r9, r3, #1
			data = buf + sizeof(buf) - data_len;
    184e:	eb02 0803 	add.w	r8, r2, r3
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1852:	2e00      	cmp	r6, #0
			data = buf + sizeof(buf) - data_len;
    1854:	f1a8 0804 	sub.w	r8, r8, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1858:	da04      	bge.n	1864 <cbvprintf+0x2a0>
    185a:	9b02      	ldr	r3, [sp, #8]
    185c:	f013 0f01 	tst.w	r3, #1
    1860:	bf18      	it	ne
    1862:	4626      	movne	r6, r4
			precision = min_width;
		}
		min_width -= data_len;
		precision -= data_len;
    1864:	eba6 0309 	sub.w	r3, r6, r9
		if (precision > 0) {
    1868:	2b00      	cmp	r3, #0
		precision -= data_len;
    186a:	9303      	str	r3, [sp, #12]
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    186c:	9b02      	ldr	r3, [sp, #8]
		min_width -= data_len;
    186e:	bfd4      	ite	le
    1870:	eba4 0409 	suble.w	r4, r4, r9
			min_width -= precision;
    1874:	1ba4      	subgt	r4, r4, r6
		if (!(padding_mode & PAD_TAIL)) {
    1876:	079a      	lsls	r2, r3, #30
    1878:	f140 80af 	bpl.w	19da <cbvprintf+0x416>
    187c:	ebaa 0607 	sub.w	r6, sl, r7
    1880:	eb06 0a07 	add.w	sl, r6, r7
			while (--min_width >= 0) {
				OUTC(' ');
			}
		}
		while (*prefix) {
    1884:	f817 0b01 	ldrb.w	r0, [r7], #1
    1888:	2800      	cmp	r0, #0
    188a:	f040 80a8 	bne.w	19de <cbvprintf+0x41a>
		precision -= data_len;
    188e:	9e03      	ldr	r6, [sp, #12]
			OUTC(*prefix++);
		}
		while (--precision >= 0) {
    1890:	3e01      	subs	r6, #1
    1892:	f140 80a8 	bpl.w	19e6 <cbvprintf+0x422>
    1896:	9b03      	ldr	r3, [sp, #12]
    1898:	464e      	mov	r6, r9
    189a:	1e5a      	subs	r2, r3, #1
    189c:	3201      	adds	r2, #1
    189e:	bfac      	ite	ge
    18a0:	461f      	movge	r7, r3
    18a2:	2700      	movlt	r7, #0
			OUTC('0');
		}
		while (--data_len >= 0) {
    18a4:	3e01      	subs	r6, #1
    18a6:	f140 80a3 	bpl.w	19f0 <cbvprintf+0x42c>
    18aa:	f109 32ff 	add.w	r2, r9, #4294967295
    18ae:	3201      	adds	r2, #1
    18b0:	bfac      	ite	ge
    18b2:	464b      	movge	r3, r9
    18b4:	2300      	movlt	r3, #0
    18b6:	4626      	mov	r6, r4
    18b8:	eb03 0907 	add.w	r9, r3, r7
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    18bc:	3e01      	subs	r6, #1
    18be:	f140 809d 	bpl.w	19fc <cbvprintf+0x438>
    18c2:	1e63      	subs	r3, r4, #1
    18c4:	3301      	adds	r3, #1
    18c6:	bfb8      	it	lt
    18c8:	2400      	movlt	r4, #0
    18ca:	44a1      	add	r9, r4
    18cc:	462f      	mov	r7, r5
    18ce:	44ca      	add	sl, r9
    18d0:	e682      	b.n	15d8 <cbvprintf+0x14>
				d = va_arg(ap, int);
    18d2:	ea4f 79e3 	mov.w	r9, r3, asr #31
    18d6:	e788      	b.n	17ea <cbvprintf+0x226>
			} else if (special == '+') {
    18d8:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    18dc:	bf0a      	itet	eq
    18de:	4f50      	ldreq	r7, [pc, #320]	; (1a20 <cbvprintf+0x45c>)
	prefix = "";
    18e0:	4f50      	ldrne	r7, [pc, #320]	; (1a24 <cbvprintf+0x460>)
				min_width--;
    18e2:	f104 34ff 	addeq.w	r4, r4, #4294967295
    18e6:	e78b      	b.n	1800 <cbvprintf+0x23c>
			if (*fmt == 'p') {
    18e8:	2a70      	cmp	r2, #112	; 0x70
    18ea:	d128      	bne.n	193e <cbvprintf+0x37a>
				x = (uintptr_t)va_arg(ap, void *);
    18ec:	463d      	mov	r5, r7
    18ee:	f855 0b04 	ldr.w	r0, [r5], #4
				if (x == (uint_value_type)0) {
    18f2:	2800      	cmp	r0, #0
    18f4:	d05a      	beq.n	19ac <cbvprintf+0x3e8>
				x = (uintptr_t)va_arg(ap, void *);
    18f6:	2100      	movs	r1, #0
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18f8:	4f4b      	ldr	r7, [pc, #300]	; (1a28 <cbvprintf+0x464>)
				min_width -= 2;
    18fa:	3c02      	subs	r4, #2
	int i = 0;
    18fc:	f04f 0800 	mov.w	r8, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1900:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1904:	f1a2 0939 	sub.w	r9, r2, #57	; 0x39
	int i = 0;
    1908:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    190c:	f000 030f 	and.w	r3, r0, #15
		if (c >= 10) {
    1910:	2b09      	cmp	r3, #9
			c += alpha;
    1912:	bf88      	it	hi
    1914:	444b      	addhi	r3, r9
		buftop[--i] = c + '0';
    1916:	3330      	adds	r3, #48	; 0x30
	} while (num);
    1918:	2900      	cmp	r1, #0
		buftop[--i] = c + '0';
    191a:	f80e 3901 	strb.w	r3, [lr], #-1
	} while (num);
    191e:	bf08      	it	eq
    1920:	2810      	cmpeq	r0, #16
		num /= base;
    1922:	ea4f 1310 	mov.w	r3, r0, lsr #4
		buftop[--i] = c + '0';
    1926:	f108 3cff 	add.w	ip, r8, #4294967295
		num /= base;
    192a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    192e:	ea4f 1211 	mov.w	r2, r1, lsr #4
	} while (num);
    1932:	d21e      	bcs.n	1972 <cbvprintf+0x3ae>
			data = buf + sizeof(buf) - data_len;
    1934:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    1936:	f1c8 0901 	rsb	r9, r8, #1
			data = buf + sizeof(buf) - data_len;
    193a:	4498      	add	r8, r3
    193c:	e789      	b.n	1852 <cbvprintf+0x28e>
			} else if (length_mod == 'l') {
    193e:	296c      	cmp	r1, #108	; 0x6c
    1940:	d104      	bne.n	194c <cbvprintf+0x388>
				x = va_arg(ap, unsigned int);
    1942:	463d      	mov	r5, r7
    1944:	2100      	movs	r1, #0
    1946:	f855 0b04 	ldr.w	r0, [r5], #4
    194a:	e006      	b.n	195a <cbvprintf+0x396>
			} else if (length_mod == 'L') {
    194c:	294c      	cmp	r1, #76	; 0x4c
    194e:	d1f8      	bne.n	1942 <cbvprintf+0x37e>
				unsigned long long llx =
    1950:	1dfd      	adds	r5, r7, #7
    1952:	f025 0507 	bic.w	r5, r5, #7
    1956:	e8f5 0102 	ldrd	r0, r1, [r5], #8
			if (special == '#') {
    195a:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    195e:	d106      	bne.n	196e <cbvprintf+0x3aa>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1960:	4b31      	ldr	r3, [pc, #196]	; (1a28 <cbvprintf+0x464>)
    1962:	f012 0f20 	tst.w	r2, #32
    1966:	4f31      	ldr	r7, [pc, #196]	; (1a2c <cbvprintf+0x468>)
    1968:	bf18      	it	ne
    196a:	461f      	movne	r7, r3
    196c:	e7c5      	b.n	18fa <cbvprintf+0x336>
	prefix = "";
    196e:	4f2d      	ldr	r7, [pc, #180]	; (1a24 <cbvprintf+0x460>)
    1970:	e7c4      	b.n	18fc <cbvprintf+0x338>
		buftop[--i] = c + '0';
    1972:	46e0      	mov	r8, ip
		num /= base;
    1974:	4618      	mov	r0, r3
    1976:	4611      	mov	r1, r2
    1978:	e7c8      	b.n	190c <cbvprintf+0x348>
			data = va_arg(ap, char *);
    197a:	463d      	mov	r5, r7
    197c:	f855 8b04 	ldr.w	r8, [r5], #4
			data_len = strlen(data);
    1980:	4640      	mov	r0, r8
    1982:	f004 fdf7 	bl	6574 <strlen>
			if (precision >= 0 && data_len > precision) {
    1986:	2e00      	cmp	r6, #0
			data_len = strlen(data);
    1988:	4681      	mov	r9, r0
			if (precision >= 0 && data_len > precision) {
    198a:	db02      	blt.n	1992 <cbvprintf+0x3ce>
    198c:	42b0      	cmp	r0, r6
    198e:	bfa8      	it	ge
    1990:	46b1      	movge	r9, r6
    1992:	2600      	movs	r6, #0
    1994:	4f23      	ldr	r7, [pc, #140]	; (1a24 <cbvprintf+0x460>)
    1996:	e765      	b.n	1864 <cbvprintf+0x2a0>
			int c = va_arg(ap, int);
    1998:	463d      	mov	r5, r7
			buf[0] = c;
    199a:	f855 3b04 	ldr.w	r3, [r5], #4
			data_len = 1;
    199e:	f04f 0901 	mov.w	r9, #1
			buf[0] = c;
    19a2:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    19a6:	f10d 0820 	add.w	r8, sp, #32
    19aa:	e7f2      	b.n	1992 <cbvprintf+0x3ce>
					data_len = 5;
    19ac:	f04f 0905 	mov.w	r9, #5
					data = "(nil)";
    19b0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1a30 <cbvprintf+0x46c>
    19b4:	e7ed      	b.n	1992 <cbvprintf+0x3ce>
				OUTC(' ');
    19b6:	4659      	mov	r1, fp
    19b8:	2020      	movs	r0, #32
    19ba:	9b00      	ldr	r3, [sp, #0]
    19bc:	4798      	blx	r3
			while (--min_width >= 0) {
    19be:	3e01      	subs	r6, #1
    19c0:	d5f9      	bpl.n	19b6 <cbvprintf+0x3f2>
    19c2:	1e62      	subs	r2, r4, #1
    19c4:	1c53      	adds	r3, r2, #1
    19c6:	bfac      	ite	ge
    19c8:	4621      	movge	r1, r4
    19ca:	2100      	movlt	r1, #0
    19cc:	f1c4 0400 	rsb	r4, r4, #0
    19d0:	bfb8      	it	lt
    19d2:	2400      	movlt	r4, #0
    19d4:	448a      	add	sl, r1
    19d6:	4414      	add	r4, r2
    19d8:	e750      	b.n	187c <cbvprintf+0x2b8>
    19da:	4626      	mov	r6, r4
    19dc:	e7ef      	b.n	19be <cbvprintf+0x3fa>
			OUTC(*prefix++);
    19de:	4659      	mov	r1, fp
    19e0:	9b00      	ldr	r3, [sp, #0]
    19e2:	4798      	blx	r3
    19e4:	e74c      	b.n	1880 <cbvprintf+0x2bc>
			OUTC('0');
    19e6:	4659      	mov	r1, fp
    19e8:	9b00      	ldr	r3, [sp, #0]
    19ea:	2030      	movs	r0, #48	; 0x30
    19ec:	4798      	blx	r3
    19ee:	e74f      	b.n	1890 <cbvprintf+0x2cc>
			OUTC(*data++);
    19f0:	4659      	mov	r1, fp
    19f2:	f818 0b01 	ldrb.w	r0, [r8], #1
    19f6:	9b00      	ldr	r3, [sp, #0]
    19f8:	4798      	blx	r3
    19fa:	e753      	b.n	18a4 <cbvprintf+0x2e0>
			OUTC(' ');
    19fc:	4659      	mov	r1, fp
    19fe:	9b00      	ldr	r3, [sp, #0]
    1a00:	2020      	movs	r0, #32
    1a02:	4798      	blx	r3
    1a04:	e75a      	b.n	18bc <cbvprintf+0x2f8>
				padding_mode = PAD_ZERO;
    1a06:	2301      	movs	r3, #1
    1a08:	e6c0      	b.n	178c <cbvprintf+0x1c8>
				length_mod = 'L';
    1a0a:	214c      	movs	r1, #76	; 0x4c
    1a0c:	e5f5      	b.n	15fa <cbvprintf+0x36>
		}

		goto start;
	}
}
    1a0e:	4650      	mov	r0, sl
    1a10:	b00f      	add	sp, #60	; 0x3c
    1a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a16:	bf00      	nop
    1a18:	00007a10 	.word	0x00007a10
    1a1c:	00007638 	.word	0x00007638
    1a20:	0000763a 	.word	0x0000763a
    1a24:	00007db1 	.word	0x00007db1
    1a28:	0000763c 	.word	0x0000763c
    1a2c:	0000763f 	.word	0x0000763f
    1a30:	00007642 	.word	0x00007642

00001a34 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1a34:	b508      	push	{r3, lr}
    1a36:	f04f 0220 	mov.w	r2, #32
    1a3a:	f3ef 8311 	mrs	r3, BASEPRI
    1a3e:	f382 8812 	msr	BASEPRI_MAX, r2
    1a42:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1a46:	f000 fb9b 	bl	2180 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a4a:	4803      	ldr	r0, [pc, #12]	; (1a58 <sys_reboot+0x24>)
    1a4c:	f004 fc03 	bl	6256 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a50:	f000 f880 	bl	1b54 <arch_cpu_idle>
    1a54:	e7fc      	b.n	1a50 <sys_reboot+0x1c>
    1a56:	bf00      	nop
    1a58:	00007648 	.word	0x00007648

00001a5c <nordicsemi_nrf91_init>:
    1a5c:	f04f 0220 	mov.w	r2, #32
    1a60:	f3ef 8311 	mrs	r3, BASEPRI
    1a64:	f382 8812 	msr	BASEPRI_MAX, r2
    1a68:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1a6c:	2101      	movs	r1, #1
    1a6e:	4a04      	ldr	r2, [pc, #16]	; (1a80 <nordicsemi_nrf91_init+0x24>)
    1a70:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1a74:	f383 8811 	msr	BASEPRI, r3
    1a78:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1a7c:	2000      	movs	r0, #0
    1a7e:	4770      	bx	lr
    1a80:	50039000 	.word	0x50039000

00001a84 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a84:	b120      	cbz	r0, 1a90 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1a86:	4b03      	ldr	r3, [pc, #12]	; (1a94 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a88:	0180      	lsls	r0, r0, #6
    1a8a:	f043 0301 	orr.w	r3, r3, #1
    1a8e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1a90:	4770      	bx	lr
    1a92:	bf00      	nop
    1a94:	00006ea0 	.word	0x00006ea0

00001a98 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1a98:	4b0c      	ldr	r3, [pc, #48]	; (1acc <flash_area_open+0x34>)
{
    1a9a:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1a9c:	681b      	ldr	r3, [r3, #0]
    1a9e:	b173      	cbz	r3, 1abe <flash_area_open+0x26>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1aa0:	4a0b      	ldr	r2, [pc, #44]	; (1ad0 <flash_area_open+0x38>)
    1aa2:	6815      	ldr	r5, [r2, #0]
    1aa4:	2200      	movs	r2, #0
    1aa6:	42aa      	cmp	r2, r5
    1aa8:	db02      	blt.n	1ab0 <flash_area_open+0x18>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1aaa:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;
	return 0;
}
    1aae:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1ab0:	461c      	mov	r4, r3
    1ab2:	f813 6b10 	ldrb.w	r6, [r3], #16
    1ab6:	4286      	cmp	r6, r0
    1ab8:	d004      	beq.n	1ac4 <flash_area_open+0x2c>
	for (int i = 0; i < flash_map_entries; i++) {
    1aba:	3201      	adds	r2, #1
    1abc:	e7f3      	b.n	1aa6 <flash_area_open+0xe>
		return -EACCES;
    1abe:	f06f 000c 	mvn.w	r0, #12
    1ac2:	e7f4      	b.n	1aae <flash_area_open+0x16>
	return 0;
    1ac4:	2000      	movs	r0, #0
	*fap = area;
    1ac6:	600c      	str	r4, [r1, #0]
	return 0;
    1ac8:	e7f1      	b.n	1aae <flash_area_open+0x16>
    1aca:	bf00      	nop
    1acc:	2000c50c 	.word	0x2000c50c
    1ad0:	00006f28 	.word	0x00006f28

00001ad4 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1ad4:	b570      	push	{r4, r5, r6, lr}
    1ad6:	b088      	sub	sp, #32
    1ad8:	4605      	mov	r5, r0
    1ada:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1adc:	b2c0      	uxtb	r0, r0
    1ade:	4669      	mov	r1, sp
{
    1ae0:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1ae2:	f7ff ffd9 	bl	1a98 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1ae6:	2800      	cmp	r0, #0
    1ae8:	db1f      	blt.n	1b2a <flash_area_get_sectors+0x56>
    1aea:	9b00      	ldr	r3, [sp, #0]
    1aec:	b1eb      	cbz	r3, 1b2a <flash_area_get_sectors+0x56>
	cb_data->area_off = fa->fa_off;
    1aee:	685a      	ldr	r2, [r3, #4]
	cb_data->ret_len = *cnt;
    1af0:	6821      	ldr	r1, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1af2:	9202      	str	r2, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1af4:	689a      	ldr	r2, [r3, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1af6:	68d8      	ldr	r0, [r3, #12]
	cb_data->ret = ret;
    1af8:	e9cd 2603 	strd	r2, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1afc:	2200      	movs	r2, #0
	cb_data->area_idx = idx;
    1afe:	9501      	str	r5, [sp, #4]
	cb_data->status = 0;
    1b00:	e9cd 1206 	strd	r1, r2, [sp, #24]
	cb_data->ret_idx = 0U;
    1b04:	9205      	str	r2, [sp, #20]
    1b06:	f002 fabb 	bl	4080 <z_impl_device_get_binding>
    1b0a:	4605      	mov	r5, r0
	flash_area_close(fa);
    1b0c:	9800      	ldr	r0, [sp, #0]
    1b0e:	f004 fc69 	bl	63e4 <flash_area_close>
	if (flash_dev == NULL) {
    1b12:	b16d      	cbz	r5, 1b30 <flash_area_get_sectors+0x5c>
	flash_page_foreach(flash_dev, cb, cb_data);
    1b14:	4628      	mov	r0, r5
    1b16:	4908      	ldr	r1, [pc, #32]	; (1b38 <flash_area_get_sectors+0x64>)
    1b18:	aa01      	add	r2, sp, #4
    1b1a:	f004 fe57 	bl	67cc <flash_page_foreach>
	if (cb_data->status == 0) {
    1b1e:	9807      	ldr	r0, [sp, #28]
    1b20:	b908      	cbnz	r0, 1b26 <flash_area_get_sectors+0x52>
		*cnt = cb_data->ret_idx;
    1b22:	9b05      	ldr	r3, [sp, #20]
    1b24:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1b26:	b008      	add	sp, #32
    1b28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1b2a:	f06f 0015 	mvn.w	r0, #21
    1b2e:	e7fa      	b.n	1b26 <flash_area_get_sectors+0x52>
		return -ENODEV;
    1b30:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1b34:	e7f7      	b.n	1b26 <flash_area_get_sectors+0x52>
    1b36:	bf00      	nop
    1b38:	000064fd 	.word	0x000064fd

00001b3c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1b3c:	4801      	ldr	r0, [pc, #4]	; (1b44 <nrf_cc3xx_platform_abort_init+0x8>)
    1b3e:	f002 bc83 	b.w	4448 <nrf_cc3xx_platform_set_abort>
    1b42:	bf00      	nop
    1b44:	00006f2c 	.word	0x00006f2c

00001b48 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1b48:	4901      	ldr	r1, [pc, #4]	; (1b50 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1b4a:	2210      	movs	r2, #16
	str	r2, [r1]
    1b4c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1b4e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1b50:	e000ed10 	.word	0xe000ed10

00001b54 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1b54:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1b56:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1b58:	f380 8811 	msr	BASEPRI, r0
	isb
    1b5c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1b60:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1b64:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1b66:	b662      	cpsie	i
	isb
    1b68:	f3bf 8f6f 	isb	sy

	bx	lr
    1b6c:	4770      	bx	lr
    1b6e:	bf00      	nop

00001b70 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1b70:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1b72:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1b74:	f381 8811 	msr	BASEPRI, r1

	wfe
    1b78:	bf20      	wfe

	msr	BASEPRI, r0
    1b7a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1b7e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1b80:	4770      	bx	lr
    1b82:	bf00      	nop

00001b84 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b86:	4605      	mov	r5, r0

	if (esf != NULL) {
    1b88:	460c      	mov	r4, r1
    1b8a:	b1c9      	cbz	r1, 1bc0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1b8c:	688b      	ldr	r3, [r1, #8]
    1b8e:	4810      	ldr	r0, [pc, #64]	; (1bd0 <z_arm_fatal_error+0x4c>)
    1b90:	9300      	str	r3, [sp, #0]
    1b92:	e9d1 2300 	ldrd	r2, r3, [r1]
    1b96:	2145      	movs	r1, #69	; 0x45
    1b98:	f004 fc17 	bl	63ca <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1b9c:	6963      	ldr	r3, [r4, #20]
    1b9e:	2145      	movs	r1, #69	; 0x45
    1ba0:	9300      	str	r3, [sp, #0]
    1ba2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1ba6:	480b      	ldr	r0, [pc, #44]	; (1bd4 <z_arm_fatal_error+0x50>)
    1ba8:	f004 fc0f 	bl	63ca <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1bac:	2145      	movs	r1, #69	; 0x45
    1bae:	69e2      	ldr	r2, [r4, #28]
    1bb0:	4809      	ldr	r0, [pc, #36]	; (1bd8 <z_arm_fatal_error+0x54>)
    1bb2:	f004 fc0a 	bl	63ca <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1bb6:	2145      	movs	r1, #69	; 0x45
    1bb8:	69a2      	ldr	r2, [r4, #24]
    1bba:	4808      	ldr	r0, [pc, #32]	; (1bdc <z_arm_fatal_error+0x58>)
    1bbc:	f004 fc05 	bl	63ca <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1bc0:	4621      	mov	r1, r4
    1bc2:	4628      	mov	r0, r5
}
    1bc4:	b003      	add	sp, #12
    1bc6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1bca:	f002 ba85 	b.w	40d8 <z_fatal_error>
    1bce:	bf00      	nop
    1bd0:	00007675 	.word	0x00007675
    1bd4:	000076a9 	.word	0x000076a9
    1bd8:	000076dd 	.word	0x000076dd
    1bdc:	000076f1 	.word	0x000076f1

00001be0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1be0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1be2:	2b00      	cmp	r3, #0
    1be4:	db08      	blt.n	1bf8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1be6:	2201      	movs	r2, #1
    1be8:	f000 001f 	and.w	r0, r0, #31
    1bec:	fa02 f000 	lsl.w	r0, r2, r0
    1bf0:	4a02      	ldr	r2, [pc, #8]	; (1bfc <arch_irq_enable+0x1c>)
    1bf2:	095b      	lsrs	r3, r3, #5
    1bf4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1bf8:	4770      	bx	lr
    1bfa:	bf00      	nop
    1bfc:	e000e100 	.word	0xe000e100

00001c00 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1c00:	4b05      	ldr	r3, [pc, #20]	; (1c18 <arch_irq_is_enabled+0x18>)
    1c02:	0942      	lsrs	r2, r0, #5
    1c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1c08:	2301      	movs	r3, #1
    1c0a:	f000 001f 	and.w	r0, r0, #31
    1c0e:	fa03 f000 	lsl.w	r0, r3, r0
}
    1c12:	4010      	ands	r0, r2
    1c14:	4770      	bx	lr
    1c16:	bf00      	nop
    1c18:	e000e100 	.word	0xe000e100

00001c1c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c1c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1c1e:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    1c20:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c24:	bfac      	ite	ge
    1c26:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c2a:	4b06      	ldrlt	r3, [pc, #24]	; (1c44 <z_arm_irq_priority_set+0x28>)
    1c2c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c30:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c32:	bfab      	itete	ge
    1c34:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c38:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c3c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c40:	5419      	strblt	r1, [r3, r0]
}
    1c42:	4770      	bx	lr
    1c44:	e000ed14 	.word	0xe000ed14

00001c48 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1c48:	bf30      	wfi
    b z_SysNmiOnReset
    1c4a:	f7ff bffd 	b.w	1c48 <z_SysNmiOnReset>
    1c4e:	bf00      	nop

00001c50 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c50:	4a14      	ldr	r2, [pc, #80]	; (1ca4 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1c52:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c54:	4b14      	ldr	r3, [pc, #80]	; (1ca8 <z_arm_prep_c+0x58>)
    1c56:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c5a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c60:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c68:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1c6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1c70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1c7c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1c80:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1c84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c88:	f3bf 8f6f 	isb	sy
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1c8c:	2300      	movs	r3, #0
    1c8e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1c92:	f002 fa77 	bl	4184 <z_bss_zero>
	z_data_copy();
    1c96:	f002 fab9 	bl	420c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1c9a:	f000 fa35 	bl	2108 <z_arm_interrupt_init>
	z_cstart();
    1c9e:	f002 fa7b 	bl	4198 <z_cstart>
    1ca2:	bf00      	nop
    1ca4:	00000000 	.word	0x00000000
    1ca8:	e000ed00 	.word	0xe000ed00

00001cac <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1cac:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1cb0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1cb2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1cb6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1cba:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1cbc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1cc0:	2902      	cmp	r1, #2
    beq _oops
    1cc2:	d0ff      	beq.n	1cc4 <_oops>

00001cc4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1cc4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1cc6:	f004 fc3c 	bl	6542 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1cca:	bd01      	pop	{r0, pc}

00001ccc <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1ccc:	4604      	mov	r4, r0
    1cce:	4608      	mov	r0, r1
    1cd0:	4611      	mov	r1, r2
    1cd2:	461a      	mov	r2, r3
    1cd4:	2300      	movs	r3, #0
    1cd6:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1cda:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1cde:	4b0a      	ldr	r3, [pc, #40]	; (1d08 <loop+0x2>)
    1ce0:	2520      	movs	r5, #32
    1ce2:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    1ce6:	f386 880b 	msr	PSPLIM, r6
    1cea:	f383 8809 	msr	PSP, r3
    1cee:	b663      	cpsie	if
    1cf0:	f04f 0300 	mov.w	r3, #0
    1cf4:	f383 8811 	msr	BASEPRI, r3
    1cf8:	f3bf 8f6f 	isb	sy
    1cfc:	47a0      	blx	r4
    1cfe:	f385 8811 	msr	BASEPRI, r5
    1d02:	f3bf 8f6f 	isb	sy

00001d06 <loop>:
    1d06:	e7fe      	b.n	1d06 <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1d08:	2000fce8 	.word	0x2000fce8

00001d0c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d0c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d0e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d12:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d16:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d1a:	4904      	ldr	r1, [pc, #16]	; (1d2c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d1c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d1e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d20:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d22:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d26:	4902      	ldr	r1, [pc, #8]	; (1d30 <_isr_wrapper+0x24>)
	bx r1
    1d28:	4708      	bx	r1
    1d2a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1d2c:	00006c28 	.word	0x00006c28
	ldr r1, =z_arm_int_exit
    1d30:	00001d35 	.word	0x00001d35

00001d34 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d34:	4770      	bx	lr
    1d36:	bf00      	nop

00001d38 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1d38:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d3a:	4c22      	ldr	r4, [pc, #136]	; (1dc4 <mem_manage_fault.isra.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1d3c:	4606      	mov	r6, r0
    1d3e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1d40:	4821      	ldr	r0, [pc, #132]	; (1dc8 <mem_manage_fault.isra.0+0x90>)
    1d42:	2145      	movs	r1, #69	; 0x45
    1d44:	f004 fb41 	bl	63ca <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1d48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d4a:	06d0      	lsls	r0, r2, #27
    1d4c:	d503      	bpl.n	1d56 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1d4e:	2145      	movs	r1, #69	; 0x45
    1d50:	481e      	ldr	r0, [pc, #120]	; (1dcc <mem_manage_fault.isra.0+0x94>)
    1d52:	f004 fb3a 	bl	63ca <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d58:	0719      	lsls	r1, r3, #28
    1d5a:	d503      	bpl.n	1d64 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1d5c:	2145      	movs	r1, #69	; 0x45
    1d5e:	481c      	ldr	r0, [pc, #112]	; (1dd0 <mem_manage_fault.isra.0+0x98>)
    1d60:	f004 fb33 	bl	63ca <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1d64:	4c17      	ldr	r4, [pc, #92]	; (1dc4 <mem_manage_fault.isra.0+0x8c>)
    1d66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d68:	079a      	lsls	r2, r3, #30
    1d6a:	d510      	bpl.n	1d8e <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1d6c:	2145      	movs	r1, #69	; 0x45
    1d6e:	4819      	ldr	r0, [pc, #100]	; (1dd4 <mem_manage_fault.isra.0+0x9c>)
    1d70:	f004 fb2b 	bl	63ca <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1d74:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1d76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d78:	061b      	lsls	r3, r3, #24
    1d7a:	d508      	bpl.n	1d8e <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1d7c:	2145      	movs	r1, #69	; 0x45
    1d7e:	4816      	ldr	r0, [pc, #88]	; (1dd8 <mem_manage_fault.isra.0+0xa0>)
    1d80:	f004 fb23 	bl	63ca <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1d84:	b11e      	cbz	r6, 1d8e <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1d8c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1d8e:	4c0d      	ldr	r4, [pc, #52]	; (1dc4 <mem_manage_fault.isra.0+0x8c>)
    1d90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d92:	07d0      	lsls	r0, r2, #31
    1d94:	d503      	bpl.n	1d9e <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    1d96:	2145      	movs	r1, #69	; 0x45
    1d98:	4810      	ldr	r0, [pc, #64]	; (1ddc <mem_manage_fault.isra.0+0xa4>)
    1d9a:	f004 fb16 	bl	63ca <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1da0:	0699      	lsls	r1, r3, #26
    1da2:	d503      	bpl.n	1dac <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    1da4:	2145      	movs	r1, #69	; 0x45
    1da6:	480e      	ldr	r0, [pc, #56]	; (1de0 <mem_manage_fault.isra.0+0xa8>)
    1da8:	f004 fb0f 	bl	63ca <z_log_minimal_printk>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1dac:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1dae:	4b05      	ldr	r3, [pc, #20]	; (1dc4 <mem_manage_fault.isra.0+0x8c>)
    1db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1db2:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1db4:	bf58      	it	pl
    1db6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1dba:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1dbe:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1dc0:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1dc2:	bd70      	pop	{r4, r5, r6, pc}
    1dc4:	e000ed00 	.word	0xe000ed00
    1dc8:	00007724 	.word	0x00007724
    1dcc:	0000773f 	.word	0x0000773f
    1dd0:	00007777 	.word	0x00007777
    1dd4:	0000778f 	.word	0x0000778f
    1dd8:	000077ac 	.word	0x000077ac
    1ddc:	000077c7 	.word	0x000077c7
    1de0:	000077eb 	.word	0x000077eb

00001de4 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1de4:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1de6:	4c23      	ldr	r4, [pc, #140]	; (1e74 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1de8:	4606      	mov	r6, r0
    1dea:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1dec:	4822      	ldr	r0, [pc, #136]	; (1e78 <bus_fault.isra.0+0x94>)
    1dee:	2145      	movs	r1, #69	; 0x45
    1df0:	f004 faeb 	bl	63ca <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1df4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1df6:	04d1      	lsls	r1, r2, #19
    1df8:	d503      	bpl.n	1e02 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1dfa:	2145      	movs	r1, #69	; 0x45
    1dfc:	481f      	ldr	r0, [pc, #124]	; (1e7c <bus_fault.isra.0+0x98>)
    1dfe:	f004 fae4 	bl	63ca <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1e02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e04:	051a      	lsls	r2, r3, #20
    1e06:	d503      	bpl.n	1e10 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1e08:	2145      	movs	r1, #69	; 0x45
    1e0a:	481d      	ldr	r0, [pc, #116]	; (1e80 <bus_fault.isra.0+0x9c>)
    1e0c:	f004 fadd 	bl	63ca <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1e10:	4c18      	ldr	r4, [pc, #96]	; (1e74 <bus_fault.isra.0+0x90>)
    1e12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e14:	059b      	lsls	r3, r3, #22
    1e16:	d510      	bpl.n	1e3a <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1e18:	481a      	ldr	r0, [pc, #104]	; (1e84 <bus_fault.isra.0+0xa0>)
    1e1a:	2145      	movs	r1, #69	; 0x45
    1e1c:	f004 fad5 	bl	63ca <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1e20:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1e22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e24:	0418      	lsls	r0, r3, #16
    1e26:	d508      	bpl.n	1e3a <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1e28:	2145      	movs	r1, #69	; 0x45
    1e2a:	4817      	ldr	r0, [pc, #92]	; (1e88 <bus_fault.isra.0+0xa4>)
    1e2c:	f004 facd 	bl	63ca <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1e30:	b11e      	cbz	r6, 1e3a <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1e32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1e38:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1e3a:	4c0e      	ldr	r4, [pc, #56]	; (1e74 <bus_fault.isra.0+0x90>)
    1e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e3e:	0559      	lsls	r1, r3, #21
    1e40:	d503      	bpl.n	1e4a <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1e42:	2145      	movs	r1, #69	; 0x45
    1e44:	4811      	ldr	r0, [pc, #68]	; (1e8c <bus_fault.isra.0+0xa8>)
    1e46:	f004 fac0 	bl	63ca <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e4c:	05da      	lsls	r2, r3, #23
    1e4e:	d50b      	bpl.n	1e68 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1e50:	2145      	movs	r1, #69	; 0x45
    1e52:	480f      	ldr	r0, [pc, #60]	; (1e90 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e54:	f004 fab9 	bl	63ca <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    1e58:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e5a:	4a06      	ldr	r2, [pc, #24]	; (1e74 <bus_fault.isra.0+0x90>)
    1e5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e5e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e62:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e64:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1e66:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e6a:	049b      	lsls	r3, r3, #18
    1e6c:	d5f4      	bpl.n	1e58 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e6e:	2145      	movs	r1, #69	; 0x45
    1e70:	4808      	ldr	r0, [pc, #32]	; (1e94 <bus_fault.isra.0+0xb0>)
    1e72:	e7ef      	b.n	1e54 <bus_fault.isra.0+0x70>
    1e74:	e000ed00 	.word	0xe000ed00
    1e78:	0000781f 	.word	0x0000781f
    1e7c:	0000783a 	.word	0x0000783a
    1e80:	00007777 	.word	0x00007777
    1e84:	00007850 	.word	0x00007850
    1e88:	0000786e 	.word	0x0000786e
    1e8c:	00007888 	.word	0x00007888
    1e90:	000078a8 	.word	0x000078a8
    1e94:	000077eb 	.word	0x000077eb

00001e98 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1e98:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e9a:	4c21      	ldr	r4, [pc, #132]	; (1f20 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1e9c:	2145      	movs	r1, #69	; 0x45
    1e9e:	4821      	ldr	r0, [pc, #132]	; (1f24 <usage_fault.isra.0+0x8c>)
    1ea0:	f004 fa93 	bl	63ca <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1ea4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ea6:	0195      	lsls	r5, r2, #6
    1ea8:	d503      	bpl.n	1eb2 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1eaa:	2145      	movs	r1, #69	; 0x45
    1eac:	481e      	ldr	r0, [pc, #120]	; (1f28 <usage_fault.isra.0+0x90>)
    1eae:	f004 fa8c 	bl	63ca <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eb4:	01dc      	lsls	r4, r3, #7
    1eb6:	d503      	bpl.n	1ec0 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1eb8:	2145      	movs	r1, #69	; 0x45
    1eba:	481c      	ldr	r0, [pc, #112]	; (1f2c <usage_fault.isra.0+0x94>)
    1ebc:	f004 fa85 	bl	63ca <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1ec0:	4d17      	ldr	r5, [pc, #92]	; (1f20 <usage_fault.isra.0+0x88>)
    1ec2:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1ec4:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1ec8:	d004      	beq.n	1ed4 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1eca:	2145      	movs	r1, #69	; 0x45
    1ecc:	4818      	ldr	r0, [pc, #96]	; (1f30 <usage_fault.isra.0+0x98>)
    1ece:	f004 fa7c 	bl	63ca <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1ed2:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1ed4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ed6:	0318      	lsls	r0, r3, #12
    1ed8:	d503      	bpl.n	1ee2 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1eda:	2145      	movs	r1, #69	; 0x45
    1edc:	4815      	ldr	r0, [pc, #84]	; (1f34 <usage_fault.isra.0+0x9c>)
    1ede:	f004 fa74 	bl	63ca <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ee2:	4d0f      	ldr	r5, [pc, #60]	; (1f20 <usage_fault.isra.0+0x88>)
    1ee4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1ee6:	0351      	lsls	r1, r2, #13
    1ee8:	d503      	bpl.n	1ef2 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1eea:	2145      	movs	r1, #69	; 0x45
    1eec:	4812      	ldr	r0, [pc, #72]	; (1f38 <usage_fault.isra.0+0xa0>)
    1eee:	f004 fa6c 	bl	63ca <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1ef2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ef4:	039a      	lsls	r2, r3, #14
    1ef6:	d503      	bpl.n	1f00 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1ef8:	2145      	movs	r1, #69	; 0x45
    1efa:	4810      	ldr	r0, [pc, #64]	; (1f3c <usage_fault.isra.0+0xa4>)
    1efc:	f004 fa65 	bl	63ca <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1f00:	4d07      	ldr	r5, [pc, #28]	; (1f20 <usage_fault.isra.0+0x88>)
    1f02:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f04:	03db      	lsls	r3, r3, #15
    1f06:	d503      	bpl.n	1f10 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1f08:	2145      	movs	r1, #69	; 0x45
    1f0a:	480d      	ldr	r0, [pc, #52]	; (1f40 <usage_fault.isra.0+0xa8>)
    1f0c:	f004 fa5d 	bl	63ca <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1f10:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1f12:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1f14:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1f18:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1f1c:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1f1e:	bd38      	pop	{r3, r4, r5, pc}
    1f20:	e000ed00 	.word	0xe000ed00
    1f24:	000078c5 	.word	0x000078c5
    1f28:	000078e2 	.word	0x000078e2
    1f2c:	000078fa 	.word	0x000078fa
    1f30:	00007919 	.word	0x00007919
    1f34:	00007948 	.word	0x00007948
    1f38:	0000796b 	.word	0x0000796b
    1f3c:	00007995 	.word	0x00007995
    1f40:	000079b4 	.word	0x000079b4

00001f44 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f48:	4b57      	ldr	r3, [pc, #348]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
    1f4a:	2500      	movs	r5, #0
    1f4c:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    1f50:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f52:	f3c9 0808 	ubfx	r8, r9, #0, #9
    1f56:	f385 8811 	msr	BASEPRI, r5
    1f5a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1f5e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1f62:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1f66:	d107      	bne.n	1f78 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1f68:	f002 030c 	and.w	r3, r2, #12
    1f6c:	2b08      	cmp	r3, #8
    1f6e:	d105      	bne.n	1f7c <z_arm_fault+0x38>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1f70:	2145      	movs	r1, #69	; 0x45
    1f72:	484e      	ldr	r0, [pc, #312]	; (20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>)
    1f74:	f004 fa29 	bl	63ca <z_log_minimal_printk>
		return NULL;
    1f78:	462f      	mov	r7, r5
    1f7a:	e004      	b.n	1f86 <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1f7c:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1f7e:	bf4e      	itee	mi
    1f80:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1f82:	4607      	movpl	r7, r0
			*nested_exc = true;
    1f84:	2501      	movpl	r5, #1
	*recoverable = false;
    1f86:	2200      	movs	r2, #0
    1f88:	f1a8 0603 	sub.w	r6, r8, #3
    1f8c:	4614      	mov	r4, r2
    1f8e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1f92:	2e09      	cmp	r6, #9
    1f94:	d876      	bhi.n	2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>
    1f96:	e8df f006 	tbb	[pc, r6]
    1f9a:	6a05      	.short	0x6a05
    1f9c:	7575676e 	.word	0x7575676e
    1fa0:	72757575 	.word	0x72757575
	PR_FAULT_INFO("***** HARD FAULT *****");
    1fa4:	2145      	movs	r1, #69	; 0x45
    1fa6:	4842      	ldr	r0, [pc, #264]	; (20b0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb0>)
    1fa8:	f004 fa0f 	bl	63ca <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fac:	4b3e      	ldr	r3, [pc, #248]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
	*recoverable = false;
    1fae:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fb2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1fb4:	f014 0402 	ands.w	r4, r4, #2
    1fb8:	d005      	beq.n	1fc6 <z_arm_fault+0x82>
		PR_EXC("  Bus fault on vector table read");
    1fba:	2145      	movs	r1, #69	; 0x45
    1fbc:	483d      	ldr	r0, [pc, #244]	; (20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>)
	PR_FAULT_INFO(
    1fbe:	f004 fa04 	bl	63ca <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1fc2:	2400      	movs	r4, #0
}
    1fc4:	e006      	b.n	1fd4 <z_arm_fault+0x90>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1fc8:	2a00      	cmp	r2, #0
    1fca:	da1d      	bge.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
		PR_EXC("  Debug event");
    1fcc:	2145      	movs	r1, #69	; 0x45
    1fce:	483a      	ldr	r0, [pc, #232]	; (20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>)
    1fd0:	f004 f9fb 	bl	63ca <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1fd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1fd8:	b99b      	cbnz	r3, 2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1fda:	2220      	movs	r2, #32
    1fdc:	4639      	mov	r1, r7
    1fde:	a802      	add	r0, sp, #8
    1fe0:	f004 faeb 	bl	65ba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fe6:	2d00      	cmp	r5, #0
    1fe8:	d059      	beq.n	209e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1fee:	b922      	cbnz	r2, 1ffa <z_arm_fault+0xb6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1ff0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1ff4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1ff8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1ffa:	4620      	mov	r0, r4
    1ffc:	a902      	add	r1, sp, #8
    1ffe:	f7ff fdc1 	bl	1b84 <z_arm_fatal_error>
}
    2002:	b00b      	add	sp, #44	; 0x2c
    2004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    200a:	005b      	lsls	r3, r3, #1
    200c:	d5e2      	bpl.n	1fd4 <z_arm_fault+0x90>
		PR_EXC("  Fault escalation (see below)");
    200e:	2145      	movs	r1, #69	; 0x45
    2010:	482a      	ldr	r0, [pc, #168]	; (20bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbc>)
    2012:	f004 f9da 	bl	63ca <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    2016:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2018:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    201c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2020:	429a      	cmp	r2, r3
    2022:	d00c      	beq.n	203e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3e>
		} else if (SCB_MMFSR != 0) {
    2024:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2028:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	b16b      	cbz	r3, 204c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4c>
			reason = mem_manage_fault(esf, 1, recoverable);
    2030:	2001      	movs	r0, #1
    2032:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2036:	f7ff fe7f 	bl	1d38 <mem_manage_fault.isra.0>
    203a:	4604      	mov	r4, r0
		break;
    203c:	e7ca      	b.n	1fd4 <z_arm_fault+0x90>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    203e:	2145      	movs	r1, #69	; 0x45
    2040:	683a      	ldr	r2, [r7, #0]
    2042:	481f      	ldr	r0, [pc, #124]	; (20c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc0>)
    2044:	f004 f9c1 	bl	63ca <z_log_minimal_printk>
			reason = esf->basic.r0;
    2048:	683c      	ldr	r4, [r7, #0]
    204a:	e7c3      	b.n	1fd4 <z_arm_fault+0x90>
		} else if (SCB_BFSR != 0) {
    204c:	4b1d      	ldr	r3, [pc, #116]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    204e:	781b      	ldrb	r3, [r3, #0]
    2050:	b12b      	cbz	r3, 205e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5e>
			reason = bus_fault(esf, 1, recoverable);
    2052:	2001      	movs	r0, #1
    2054:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2058:	f7ff fec4 	bl	1de4 <bus_fault.isra.0>
    205c:	e7ed      	b.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
		} else if (SCB_UFSR != 0) {
    205e:	4b1a      	ldr	r3, [pc, #104]	; (20c8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc8>)
    2060:	881b      	ldrh	r3, [r3, #0]
    2062:	b29b      	uxth	r3, r3
    2064:	2b00      	cmp	r3, #0
    2066:	d0b5      	beq.n	1fd4 <z_arm_fault+0x90>
		reason = usage_fault(esf);
    2068:	f7ff ff16 	bl	1e98 <usage_fault.isra.0>
    206c:	e7e5      	b.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
		reason = mem_manage_fault(esf, 0, recoverable);
    206e:	2000      	movs	r0, #0
    2070:	f10d 0107 	add.w	r1, sp, #7
    2074:	e7df      	b.n	2036 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x36>
		reason = bus_fault(esf, 0, recoverable);
    2076:	2000      	movs	r0, #0
    2078:	f10d 0107 	add.w	r1, sp, #7
    207c:	e7ec      	b.n	2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
	PR_FAULT_INFO(
    207e:	2145      	movs	r1, #69	; 0x45
    2080:	4812      	ldr	r0, [pc, #72]	; (20cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xcc>)
    2082:	e79c      	b.n	1fbe <z_arm_fault+0x7a>
	PR_FAULT_INFO("***** %s %d) *****",
    2084:	4912      	ldr	r1, [pc, #72]	; (20d0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd0>)
    2086:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    208a:	4a12      	ldr	r2, [pc, #72]	; (20d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd4>)
    208c:	4812      	ldr	r0, [pc, #72]	; (20d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd8>)
    208e:	bf08      	it	eq
    2090:	460a      	moveq	r2, r1
    2092:	f1a8 0310 	sub.w	r3, r8, #16
    2096:	2145      	movs	r1, #69	; 0x45
    2098:	f004 f997 	bl	63ca <z_log_minimal_printk>
    209c:	e791      	b.n	1fc2 <z_arm_fault+0x7e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    209e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    20a2:	f023 0301 	bic.w	r3, r3, #1
    20a6:	e7a7      	b.n	1ff8 <z_arm_fault+0xb4>
    20a8:	e000ed00 	.word	0xe000ed00
    20ac:	00007a12 	.word	0x00007a12
    20b0:	00007a42 	.word	0x00007a42
    20b4:	00007a5e 	.word	0x00007a5e
    20b8:	00007a84 	.word	0x00007a84
    20bc:	00007a97 	.word	0x00007a97
    20c0:	00007abb 	.word	0x00007abb
    20c4:	e000ed29 	.word	0xe000ed29
    20c8:	e000ed2a 	.word	0xe000ed2a
    20cc:	00007adc 	.word	0x00007adc
    20d0:	000079e4 	.word	0x000079e4
    20d4:	000079f9 	.word	0x000079f9
    20d8:	00007b05 	.word	0x00007b05

000020dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <z_arm_fault_init+0x14>)
    20de:	695a      	ldr	r2, [r3, #20]
    20e0:	f042 0210 	orr.w	r2, r2, #16
    20e4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    20e6:	695a      	ldr	r2, [r3, #20]
    20e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    20ec:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    20ee:	4770      	bx	lr
    20f0:	e000ed00 	.word	0xe000ed00

000020f4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    20f4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    20f8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    20fc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    20fe:	4672      	mov	r2, lr
	bl z_arm_fault
    2100:	f7ff ff20 	bl	1f44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2104:	bd01      	pop	{r0, pc}
    2106:	bf00      	nop

00002108 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2108:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    210a:	2120      	movs	r1, #32
    210c:	4803      	ldr	r0, [pc, #12]	; (211c <z_arm_interrupt_init+0x14>)
    210e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2110:	3301      	adds	r3, #1
    2112:	2b41      	cmp	r3, #65	; 0x41
    2114:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2118:	d1f9      	bne.n	210e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    211a:	4770      	bx	lr
    211c:	e000e100 	.word	0xe000e100

00002120 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2120:	2000      	movs	r0, #0
    msr CONTROL, r0
    2122:	f380 8814 	msr	CONTROL, r0
    isb
    2126:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    212a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    212c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2130:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2134:	f004 fd0e 	bl	6b54 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2138:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    213a:	490e      	ldr	r1, [pc, #56]	; (2174 <__start+0x54>)
    str r0, [r1]
    213c:	6008      	str	r0, [r1, #0]
    dsb
    213e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2142:	480d      	ldr	r0, [pc, #52]	; (2178 <__start+0x58>)
    msr msp, r0
    2144:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2148:	f000 f83c 	bl	21c4 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    214c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    214e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2152:	480a      	ldr	r0, [pc, #40]	; (217c <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2154:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    2158:	1840      	adds	r0, r0, r1
    msr PSP, r0
    215a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    215e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2162:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2164:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2166:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    216a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    216e:	f7ff fd6f 	bl	1c50 <z_arm_prep_c>
    2172:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2174:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2178:	2000fce8 	.word	0x2000fce8
    ldr r0, =z_interrupt_stacks
    217c:	2000fce8 	.word	0x2000fce8

00002180 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2180:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2184:	4905      	ldr	r1, [pc, #20]	; (219c <sys_arch_reboot+0x1c>)
    2186:	4b06      	ldr	r3, [pc, #24]	; (21a0 <sys_arch_reboot+0x20>)
    2188:	68ca      	ldr	r2, [r1, #12]
    218a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    218e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2190:	60cb      	str	r3, [r1, #12]
    2192:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2196:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2198:	e7fd      	b.n	2196 <sys_arch_reboot+0x16>
    219a:	bf00      	nop
    219c:	e000ed00 	.word	0xe000ed00
    21a0:	05fa0004 	.word	0x05fa0004

000021a4 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    21a4:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    21a6:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    21a8:	4a05      	ldr	r2, [pc, #20]	; (21c0 <z_arm_clear_arm_mpu_config+0x1c>)
    21aa:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    21ac:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    21b0:	428b      	cmp	r3, r1
    21b2:	d100      	bne.n	21b6 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    21b4:	4770      	bx	lr
  mpu->RNR = rnr;
    21b6:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    21b8:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    21ba:	3301      	adds	r3, #1
    21bc:	e7f8      	b.n	21b0 <z_arm_clear_arm_mpu_config+0xc>
    21be:	bf00      	nop
    21c0:	e000ed90 	.word	0xe000ed90

000021c4 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    21c4:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    21c6:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    21c8:	2400      	movs	r4, #0
    21ca:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    21ce:	f7ff ffe9 	bl	21a4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    21d2:	4a0e      	ldr	r2, [pc, #56]	; (220c <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    21d4:	4623      	mov	r3, r4
    21d6:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    21d8:	f04f 34ff 	mov.w	r4, #4294967295
    21dc:	f103 0020 	add.w	r0, r3, #32
    21e0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    21e2:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    21e4:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    21e8:	d1f8      	bne.n	21dc <z_arm_init_arch_hw_at_boot+0x18>
    21ea:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    21ec:	f04f 30ff 	mov.w	r0, #4294967295
    21f0:	f103 0260 	add.w	r2, r3, #96	; 0x60
    21f4:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    21f6:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    21f8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    21fc:	d1f8      	bne.n	21f0 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    21fe:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2200:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2204:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2208:	bd10      	pop	{r4, pc}
    220a:	bf00      	nop
    220c:	e000e100 	.word	0xe000e100

00002210 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2210:	2101      	movs	r1, #1
    2212:	4b02      	ldr	r3, [pc, #8]	; (221c <z_arm_configure_static_mpu_regions+0xc>)
    2214:	4a02      	ldr	r2, [pc, #8]	; (2220 <z_arm_configure_static_mpu_regions+0x10>)
    2216:	4803      	ldr	r0, [pc, #12]	; (2224 <z_arm_configure_static_mpu_regions+0x14>)
    2218:	f000 b90c 	b.w	2434 <arm_core_mpu_configure_static_mpu_regions>
    221c:	20040000 	.word	0x20040000
    2220:	2000c500 	.word	0x2000c500
    2224:	00006f34 	.word	0x00006f34

00002228 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2228:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    222a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    222c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    222e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2232:	f004 031f 	and.w	r3, r4, #31
    2236:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2238:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    223a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    223c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2240:	4904      	ldr	r1, [pc, #16]	; (2254 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2242:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2246:	f043 0301 	orr.w	r3, r3, #1
    224a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    224c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    224e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2250:	bd10      	pop	{r4, pc}
    2252:	bf00      	nop
    2254:	e000ed90 	.word	0xe000ed90

00002258 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2258:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    225a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    225c:	680c      	ldr	r4, [r1, #0]
{
    225e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2260:	890a      	ldrh	r2, [r1, #8]
    2262:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2264:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2266:	3b01      	subs	r3, #1
    2268:	f024 041f 	bic.w	r4, r4, #31
    226c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    226e:	f002 021f 	and.w	r2, r2, #31
    2272:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2276:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    227a:	280f      	cmp	r0, #15
    227c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    227e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2282:	9303      	str	r3, [sp, #12]
    2284:	d909      	bls.n	229a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2286:	4602      	mov	r2, r0
    2288:	2145      	movs	r1, #69	; 0x45
    228a:	4806      	ldr	r0, [pc, #24]	; (22a4 <mpu_configure_region+0x4c>)
    228c:	f004 f89d 	bl	63ca <z_log_minimal_printk>
    2290:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2294:	4620      	mov	r0, r4
    2296:	b005      	add	sp, #20
    2298:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    229a:	4669      	mov	r1, sp
    229c:	f7ff ffc4 	bl	2228 <region_init>
	return region_allocate_and_init(index,
    22a0:	e7f8      	b.n	2294 <mpu_configure_region+0x3c>
    22a2:	bf00      	nop
    22a4:	00007b21 	.word	0x00007b21

000022a8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    22a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22ac:	4689      	mov	r9, r1
    22ae:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    22b0:	4606      	mov	r6, r0
    22b2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    22b6:	4d52      	ldr	r5, [pc, #328]	; (2400 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    22b8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    22ba:	45c8      	cmp	r8, r9
    22bc:	da23      	bge.n	2306 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    22be:	6877      	ldr	r7, [r6, #4]
    22c0:	2f00      	cmp	r7, #0
    22c2:	d042      	beq.n	234a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    22c4:	2f1f      	cmp	r7, #31
    22c6:	d917      	bls.n	22f8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    22c8:	06fb      	lsls	r3, r7, #27
    22ca:	d115      	bne.n	22f8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    22cc:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    22d0:	f01a 0f1f 	tst.w	sl, #31
    22d4:	d110      	bne.n	22f8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22d6:	4650      	mov	r0, sl
    22d8:	f004 f942 	bl	6560 <arm_cmse_mpu_region_get>
    22dc:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    22de:	eb07 000a 	add.w	r0, r7, sl
    22e2:	3801      	subs	r0, #1
    22e4:	f004 f93c 	bl	6560 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    22e8:	4583      	cmp	fp, r0
    22ea:	d010      	beq.n	230e <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    22ec:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    22f0:	465a      	mov	r2, fp
    22f2:	2145      	movs	r1, #69	; 0x45
    22f4:	4843      	ldr	r0, [pc, #268]	; (2404 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    22f6:	e002      	b.n	22fe <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    22f8:	4642      	mov	r2, r8
    22fa:	2145      	movs	r1, #69	; 0x45
    22fc:	4842      	ldr	r0, [pc, #264]	; (2408 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    22fe:	f004 f864 	bl	63ca <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2302:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2306:	4620      	mov	r0, r4
    2308:	b005      	add	sp, #20
    230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    230e:	f11b 0f16 	cmn.w	fp, #22
    2312:	d0ed      	beq.n	22f0 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2314:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2316:	455b      	cmp	r3, fp
    2318:	dbea      	blt.n	22f0 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    231a:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    231e:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2320:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2324:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2326:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    232a:	e9d6 3200 	ldrd	r3, r2, [r6]
    232e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2330:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2332:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2336:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    233a:	d11c      	bne.n	2376 <mpu_configure_regions_and_partition.constprop.0+0xce>
    233c:	4557      	cmp	r7, sl
    233e:	d108      	bne.n	2352 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    2340:	4631      	mov	r1, r6
    2342:	fa5f f08b 	uxtb.w	r0, fp
    2346:	f7ff ff87 	bl	2258 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    234a:	f108 0801 	add.w	r8, r8, #1
    234e:	360c      	adds	r6, #12
    2350:	e7b3      	b.n	22ba <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2352:	4631      	mov	r1, r6
	MPU->RNR = index;
    2354:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2358:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    235a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    235e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2362:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2364:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    2366:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2368:	f7ff ff76 	bl	2258 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    236c:	f110 0f16 	cmn.w	r0, #22
    2370:	d0c7      	beq.n	2302 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2372:	1c44      	adds	r4, r0, #1
    2374:	e7e9      	b.n	234a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    2376:	3b01      	subs	r3, #1
    2378:	4557      	cmp	r7, sl
    237a:	b2e0      	uxtb	r0, r4
    237c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2380:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2384:	d106      	bne.n	2394 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2386:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2388:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    238a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    238e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2390:	612b      	str	r3, [r5, #16]
			reg_index =
    2392:	e7e9      	b.n	2368 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2394:	6929      	ldr	r1, [r5, #16]
    2396:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    239a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    239c:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    239e:	4631      	mov	r1, r6
    23a0:	f7ff ff5a 	bl	2258 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    23a4:	f110 0f16 	cmn.w	r0, #22
    23a8:	d0ab      	beq.n	2302 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    23aa:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    23ae:	68ea      	ldr	r2, [r5, #12]
    23b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    23b4:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    23b6:	f362 0304 	bfi	r3, r2, #0, #5
    23ba:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    23be:	692b      	ldr	r3, [r5, #16]
    23c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    23c4:	085b      	lsrs	r3, r3, #1
    23c6:	f363 1247 	bfi	r2, r3, #5, #3
    23ca:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    23ce:	e9d6 3200 	ldrd	r3, r2, [r6]
    23d2:	4413      	add	r3, r2
    23d4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    23d6:	f023 031f 	bic.w	r3, r3, #31
    23da:	443b      	add	r3, r7
			reg_index++;
    23dc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    23de:	eba3 0a0a 	sub.w	sl, r3, sl
    23e2:	b2e0      	uxtb	r0, r4
    23e4:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    23e8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    23ea:	9303      	str	r3, [sp, #12]
    23ec:	d903      	bls.n	23f6 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    23ee:	4602      	mov	r2, r0
    23f0:	2145      	movs	r1, #69	; 0x45
    23f2:	4806      	ldr	r0, [pc, #24]	; (240c <mpu_configure_regions_and_partition.constprop.0+0x164>)
    23f4:	e783      	b.n	22fe <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    23f6:	4669      	mov	r1, sp
    23f8:	f7ff ff16 	bl	2228 <region_init>
    23fc:	e7b9      	b.n	2372 <mpu_configure_regions_and_partition.constprop.0+0xca>
    23fe:	bf00      	nop
    2400:	e000ed90 	.word	0xe000ed90
    2404:	00007b74 	.word	0x00007b74
    2408:	00007b4c 	.word	0x00007b4c
    240c:	00007b21 	.word	0x00007b21

00002410 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2410:	2205      	movs	r2, #5
    2412:	4b03      	ldr	r3, [pc, #12]	; (2420 <arm_core_mpu_enable+0x10>)
    2414:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    241a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    241e:	4770      	bx	lr
    2420:	e000ed90 	.word	0xe000ed90

00002424 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2424:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2428:	2200      	movs	r2, #0
    242a:	4b01      	ldr	r3, [pc, #4]	; (2430 <arm_core_mpu_disable+0xc>)
    242c:	605a      	str	r2, [r3, #4]
}
    242e:	4770      	bx	lr
    2430:	e000ed90 	.word	0xe000ed90

00002434 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2434:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2436:	4c03      	ldr	r4, [pc, #12]	; (2444 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2438:	7822      	ldrb	r2, [r4, #0]
    243a:	f7ff ff35 	bl	22a8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    243e:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2440:	bd10      	pop	{r4, pc}
    2442:	bf00      	nop
    2444:	2000d4e5 	.word	0x2000d4e5

00002448 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2448:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    244a:	4c0e      	ldr	r4, [pc, #56]	; (2484 <z_arm_mpu_init+0x3c>)
    244c:	6825      	ldr	r5, [r4, #0]
    244e:	2d10      	cmp	r5, #16
    2450:	d814      	bhi.n	247c <z_arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2452:	f7ff ffe7 	bl	2424 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2456:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2458:	4b0b      	ldr	r3, [pc, #44]	; (2488 <z_arm_mpu_init+0x40>)
    245a:	4a0c      	ldr	r2, [pc, #48]	; (248c <z_arm_mpu_init+0x44>)
    245c:	631a      	str	r2, [r3, #48]	; 0x30
    245e:	4285      	cmp	r5, r0
    2460:	d105      	bne.n	246e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2462:	4b0b      	ldr	r3, [pc, #44]	; (2490 <z_arm_mpu_init+0x48>)
    2464:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2466:	f7ff ffd3 	bl	2410 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    246a:	2000      	movs	r0, #0
}
    246c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    246e:	6861      	ldr	r1, [r4, #4]
    2470:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2474:	f7ff fed8 	bl	2228 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2478:	3001      	adds	r0, #1
    247a:	e7f0      	b.n	245e <z_arm_mpu_init+0x16>
		return -1;
    247c:	f04f 30ff 	mov.w	r0, #4294967295
    2480:	e7f4      	b.n	246c <z_arm_mpu_init+0x24>
    2482:	bf00      	nop
    2484:	00006f40 	.word	0x00006f40
    2488:	e000ed90 	.word	0xe000ed90
    248c:	0044ffaa 	.word	0x0044ffaa
    2490:	2000d4e5 	.word	0x2000d4e5

00002494 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2494:	4b01      	ldr	r3, [pc, #4]	; (249c <__stdout_hook_install+0x8>)
    2496:	6018      	str	r0, [r3, #0]
}
    2498:	4770      	bx	lr
    249a:	bf00      	nop
    249c:	2000c510 	.word	0x2000c510

000024a0 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    24a0:	b570      	push	{r4, r5, r6, lr}
    24a2:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    24a4:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    24a6:	480d      	ldr	r0, [pc, #52]	; (24dc <onoff_stop+0x3c>)
{
    24a8:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    24aa:	1a23      	subs	r3, r4, r0
    24ac:	109a      	asrs	r2, r3, #2
    24ae:	4b0c      	ldr	r3, [pc, #48]	; (24e0 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    24b0:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    24b2:	4353      	muls	r3, r2
    24b4:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    24b6:	435d      	muls	r5, r3
    24b8:	f105 0340 	add.w	r3, r5, #64	; 0x40
    24bc:	4418      	add	r0, r3
    24be:	f004 f89c 	bl	65fa <set_off_state>
	if (err < 0) {
    24c2:	1e01      	subs	r1, r0, #0
    24c4:	db04      	blt.n	24d0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    24c6:	4b07      	ldr	r3, [pc, #28]	; (24e4 <onoff_stop+0x44>)
    24c8:	442b      	add	r3, r5
    24ca:	685b      	ldr	r3, [r3, #4]
    24cc:	4798      	blx	r3
	return 0;
    24ce:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    24d0:	4620      	mov	r0, r4
    24d2:	4633      	mov	r3, r6
}
    24d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    24d8:	4718      	bx	r3
    24da:	bf00      	nop
    24dc:	2000d344 	.word	0x2000d344
    24e0:	b6db6db7 	.word	0xb6db6db7
    24e4:	00006f80 	.word	0x00006f80

000024e8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    24e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    24ec:	4c0f      	ldr	r4, [pc, #60]	; (252c <onoff_start+0x44>)
    24ee:	4d10      	ldr	r5, [pc, #64]	; (2530 <onoff_start+0x48>)
    24f0:	1b03      	subs	r3, r0, r4
    24f2:	109b      	asrs	r3, r3, #2
    24f4:	435d      	muls	r5, r3
    24f6:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    24f8:	250c      	movs	r5, #12
    24fa:	435d      	muls	r5, r3
{
    24fc:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    24fe:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    2502:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    2504:	4420      	add	r0, r4
    2506:	2140      	movs	r1, #64	; 0x40
    2508:	f004 f890 	bl	662c <set_starting_state>
	if (err < 0) {
    250c:	1e01      	subs	r1, r0, #0
    250e:	db08      	blt.n	2522 <onoff_start+0x3a>
	subdata->cb = cb;
    2510:	4b08      	ldr	r3, [pc, #32]	; (2534 <onoff_start+0x4c>)
    2512:	442c      	add	r4, r5
	subdata->user_data = user_data;
    2514:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    2518:	4b07      	ldr	r3, [pc, #28]	; (2538 <onoff_start+0x50>)
    251a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    251c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2520:	4718      	bx	r3
		notify(mgr, err);
    2522:	4638      	mov	r0, r7
    2524:	4633      	mov	r3, r6
}
    2526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    252a:	4718      	bx	r3
    252c:	2000d344 	.word	0x2000d344
    2530:	b6db6db7 	.word	0xb6db6db7
    2534:	00006695 	.word	0x00006695
    2538:	00006f80 	.word	0x00006f80

0000253c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    253c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    253e:	2200      	movs	r2, #0
    2540:	2101      	movs	r1, #1
{
    2542:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2544:	2005      	movs	r0, #5
    2546:	f7ff fb69 	bl	1c1c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    254a:	2005      	movs	r0, #5
    254c:	f7ff fb48 	bl	1be0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2550:	480f      	ldr	r0, [pc, #60]	; (2590 <clk_init+0x54>)
    2552:	f001 f947 	bl	37e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2556:	4b0f      	ldr	r3, [pc, #60]	; (2594 <clk_init+0x58>)
    2558:	4298      	cmp	r0, r3
    255a:	d115      	bne.n	2588 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    255c:	f004 faa4 	bl	6aa8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2560:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2562:	490d      	ldr	r1, [pc, #52]	; (2598 <clk_init+0x5c>)
    2564:	4630      	mov	r0, r6
    2566:	f003 fed3 	bl	6310 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    256a:	2800      	cmp	r0, #0
    256c:	db0b      	blt.n	2586 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    256e:	2501      	movs	r5, #1
    2570:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2572:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2574:	4908      	ldr	r1, [pc, #32]	; (2598 <clk_init+0x5c>)
    2576:	f104 001c 	add.w	r0, r4, #28
    257a:	f003 fec9 	bl	6310 <onoff_manager_init>
		if (err < 0) {
    257e:	2800      	cmp	r0, #0
    2580:	db01      	blt.n	2586 <clk_init+0x4a>
	}

	return 0;
    2582:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2584:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    2586:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2588:	f06f 0004 	mvn.w	r0, #4
    258c:	e7fb      	b.n	2586 <clk_init+0x4a>
    258e:	bf00      	nop
    2590:	000025d9 	.word	0x000025d9
    2594:	0bad0000 	.word	0x0bad0000
    2598:	00006f98 	.word	0x00006f98

0000259c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    259c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    259e:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    25a0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    25a2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    25a4:	434b      	muls	r3, r1
    25a6:	480a      	ldr	r0, [pc, #40]	; (25d0 <clkstarted_handle.constprop.0+0x34>)
    25a8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    25aa:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    25ac:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    25b0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    25b2:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    25b4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    25b6:	f004 f857 	bl	6668 <set_on_state>
	if (callback) {
    25ba:	b135      	cbz	r5, 25ca <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    25bc:	462b      	mov	r3, r5
    25be:	9a01      	ldr	r2, [sp, #4]
    25c0:	4804      	ldr	r0, [pc, #16]	; (25d4 <clkstarted_handle.constprop.0+0x38>)
}
    25c2:	b002      	add	sp, #8
    25c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    25c8:	4718      	bx	r3
}
    25ca:	b002      	add	sp, #8
    25cc:	bd70      	pop	{r4, r5, r6, pc}
    25ce:	bf00      	nop
    25d0:	2000d344 	.word	0x2000d344
    25d4:	00006bb0 	.word	0x00006bb0

000025d8 <clock_event_handler>:
	switch (event) {
    25d8:	b110      	cbz	r0, 25e0 <clock_event_handler+0x8>
    25da:	2801      	cmp	r0, #1
    25dc:	d004      	beq.n	25e8 <clock_event_handler+0x10>
    25de:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    25e0:	4b03      	ldr	r3, [pc, #12]	; (25f0 <clock_event_handler+0x18>)
    25e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    25e4:	075b      	lsls	r3, r3, #29
    25e6:	d101      	bne.n	25ec <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    25e8:	f7ff bfd8 	b.w	259c <clkstarted_handle.constprop.0>
}
    25ec:	4770      	bx	lr
    25ee:	bf00      	nop
    25f0:	2000d344 	.word	0x2000d344

000025f4 <generic_hfclk_start>:
{
    25f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    25f6:	f04f 0320 	mov.w	r3, #32
    25fa:	f3ef 8111 	mrs	r1, BASEPRI
    25fe:	f383 8812 	msr	BASEPRI_MAX, r3
    2602:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2606:	4a12      	ldr	r2, [pc, #72]	; (2650 <generic_hfclk_start+0x5c>)
    2608:	6813      	ldr	r3, [r2, #0]
    260a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    260e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2612:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2614:	d00c      	beq.n	2630 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2616:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    261a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    261e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2622:	f013 0301 	ands.w	r3, r3, #1
    2626:	d003      	beq.n	2630 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2628:	480a      	ldr	r0, [pc, #40]	; (2654 <generic_hfclk_start+0x60>)
    262a:	f004 f81d 	bl	6668 <set_on_state>
			already_started = true;
    262e:	2301      	movs	r3, #1
	__asm__ volatile(
    2630:	f381 8811 	msr	BASEPRI, r1
    2634:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2638:	b123      	cbz	r3, 2644 <generic_hfclk_start+0x50>
}
    263a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    263e:	2000      	movs	r0, #0
    2640:	f7ff bfac 	b.w	259c <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2644:	2001      	movs	r0, #1
}
    2646:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    264a:	f001 b8db 	b.w	3804 <nrfx_clock_start>
    264e:	bf00      	nop
    2650:	2000d394 	.word	0x2000d394
    2654:	2000d384 	.word	0x2000d384

00002658 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2658:	4b07      	ldr	r3, [pc, #28]	; (2678 <generic_hfclk_stop+0x20>)
    265a:	e8d3 2fef 	ldaex	r2, [r3]
    265e:	f022 0102 	bic.w	r1, r2, #2
    2662:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2666:	2800      	cmp	r0, #0
    2668:	d1f7      	bne.n	265a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    266a:	07d3      	lsls	r3, r2, #31
    266c:	d402      	bmi.n	2674 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    266e:	2001      	movs	r0, #1
    2670:	f001 b8fa 	b.w	3868 <nrfx_clock_stop>
}
    2674:	4770      	bx	lr
    2676:	bf00      	nop
    2678:	2000d394 	.word	0x2000d394

0000267c <z_nrf_clock_control_lf_on>:
{
    267c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2680:	2201      	movs	r2, #1
    2682:	4606      	mov	r6, r0
    2684:	4936      	ldr	r1, [pc, #216]	; (2760 <z_nrf_clock_control_lf_on+0xe4>)
    2686:	e8d1 3fef 	ldaex	r3, [r1]
    268a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    268e:	2800      	cmp	r0, #0
    2690:	d1f9      	bne.n	2686 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    2692:	b933      	cbnz	r3, 26a2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2694:	4933      	ldr	r1, [pc, #204]	; (2764 <z_nrf_clock_control_lf_on+0xe8>)
		err = onoff_request(mgr, &cli);
    2696:	4834      	ldr	r0, [pc, #208]	; (2768 <z_nrf_clock_control_lf_on+0xec>)
    2698:	604b      	str	r3, [r1, #4]
    269a:	60cb      	str	r3, [r1, #12]
    269c:	608a      	str	r2, [r1, #8]
    269e:	f003 fe4a 	bl	6336 <onoff_request>
	switch (start_mode) {
    26a2:	1e73      	subs	r3, r6, #1
    26a4:	2b01      	cmp	r3, #1
    26a6:	d832      	bhi.n	270e <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    26a8:	2e01      	cmp	r6, #1
    26aa:	d107      	bne.n	26bc <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    26ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    26b0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    26b4:	f003 0303 	and.w	r3, r3, #3
    26b8:	2b02      	cmp	r3, #2
    26ba:	d028      	beq.n	270e <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    26bc:	f004 fa13 	bl	6ae6 <k_is_in_isr>
    26c0:	4604      	mov	r4, r0
    26c2:	b918      	cbnz	r0, 26cc <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    26c4:	4b29      	ldr	r3, [pc, #164]	; (276c <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
    26c6:	781b      	ldrb	r3, [r3, #0]
    26c8:	2b00      	cmp	r3, #0
    26ca:	d141      	bne.n	2750 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    26cc:	f04f 0320 	mov.w	r3, #32
    26d0:	f3ef 8511 	mrs	r5, BASEPRI
    26d4:	f383 8812 	msr	BASEPRI_MAX, r3
    26d8:	f3bf 8f6f 	isb	sy
    26dc:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26de:	4f24      	ldr	r7, [pc, #144]	; (2770 <z_nrf_clock_control_lf_on+0xf4>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    26e0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2774 <z_nrf_clock_control_lf_on+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26e4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2778 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    26e8:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    26ec:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26f0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    26f4:	03d2      	lsls	r2, r2, #15
    26f6:	d50c      	bpl.n	2712 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    26f8:	f003 0303 	and.w	r3, r3, #3
    26fc:	2b02      	cmp	r3, #2
    26fe:	d001      	beq.n	2704 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2700:	2e01      	cmp	r6, #1
    2702:	d106      	bne.n	2712 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    2704:	b1f4      	cbz	r4, 2744 <z_nrf_clock_control_lf_on+0xc8>
	__asm__ volatile(
    2706:	f385 8811 	msr	BASEPRI, r5
    270a:	f3bf 8f6f 	isb	sy
}
    270e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2712:	4628      	mov	r0, r5
    2714:	f7ff fa2c 	bl	1b70 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2718:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    271c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2720:	b2db      	uxtb	r3, r3
    2722:	2b01      	cmp	r3, #1
    2724:	d1e0      	bne.n	26e8 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2726:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2728:	2900      	cmp	r1, #0
    272a:	d0dd      	beq.n	26e8 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    272c:	2100      	movs	r1, #0
    272e:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2730:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2732:	2102      	movs	r1, #2
    2734:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    2738:	2220      	movs	r2, #32
    273a:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    273e:	f8c9 3000 	str.w	r3, [r9]
}
    2742:	e7d1      	b.n	26e8 <z_nrf_clock_control_lf_on+0x6c>
    p_reg->INTENSET = mask;
    2744:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2748:	2202      	movs	r2, #2
    274a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    274e:	e7de      	b.n	270e <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    2750:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2754:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2756:	4605      	mov	r5, r0
    2758:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    275c:	e7bf      	b.n	26de <z_nrf_clock_control_lf_on+0x62>
    275e:	bf00      	nop
    2760:	2000d398 	.word	0x2000d398
    2764:	2000d334 	.word	0x2000d334
    2768:	2000d360 	.word	0x2000d360
    276c:	2000d4e6 	.word	0x2000d4e6
    2770:	50005104 	.word	0x50005104
    2774:	e000e100 	.word	0xe000e100
    2778:	50005008 	.word	0x50005008

0000277c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    277c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    277e:	4808      	ldr	r0, [pc, #32]	; (27a0 <uart_console_init+0x24>)
    2780:	4b08      	ldr	r3, [pc, #32]	; (27a4 <uart_console_init+0x28>)
    2782:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    2784:	f004 f9a5 	bl	6ad2 <z_device_ready>
    2788:	b138      	cbz	r0, 279a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    278a:	4807      	ldr	r0, [pc, #28]	; (27a8 <uart_console_init+0x2c>)
    278c:	f7ff fe82 	bl	2494 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2790:	4805      	ldr	r0, [pc, #20]	; (27a8 <uart_console_init+0x2c>)
    2792:	f7fe fe1b 	bl	13cc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2796:	2000      	movs	r0, #0
}
    2798:	bd08      	pop	{r3, pc}
		return -ENODEV;
    279a:	f06f 0012 	mvn.w	r0, #18
    279e:	e7fb      	b.n	2798 <uart_console_init+0x1c>
    27a0:	00006bf8 	.word	0x00006bf8
    27a4:	2000d39c 	.word	0x2000d39c
    27a8:	000027ad 	.word	0x000027ad

000027ac <console_out>:
	if ('\n' == c) {
    27ac:	280a      	cmp	r0, #10
{
    27ae:	b538      	push	{r3, r4, r5, lr}
    27b0:	4604      	mov	r4, r0
    27b2:	4d07      	ldr	r5, [pc, #28]	; (27d0 <console_out+0x24>)
	if ('\n' == c) {
    27b4:	d104      	bne.n	27c0 <console_out+0x14>
    27b6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    27b8:	6883      	ldr	r3, [r0, #8]
    27ba:	210d      	movs	r1, #13
    27bc:	685b      	ldr	r3, [r3, #4]
    27be:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    27c0:	6828      	ldr	r0, [r5, #0]
    27c2:	6883      	ldr	r3, [r0, #8]
    27c4:	b2e1      	uxtb	r1, r4
    27c6:	685b      	ldr	r3, [r3, #4]
    27c8:	4798      	blx	r3
}
    27ca:	4620      	mov	r0, r4
    27cc:	bd38      	pop	{r3, r4, r5, pc}
    27ce:	bf00      	nop
    27d0:	2000d39c 	.word	0x2000d39c

000027d4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    27d4:	b530      	push	{r4, r5, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27d6:	6840      	ldr	r0, [r0, #4]
    27d8:	f001 051f 	and.w	r5, r1, #31
    27dc:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    27de:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    27e2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    27e6:	b085      	sub	sp, #20
    27e8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    27ec:	d104      	bne.n	27f8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    27ee:	4628      	mov	r0, r5
    27f0:	f001 fb00 	bl	3df4 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    27f4:	2000      	movs	r0, #0
    27f6:	e02c      	b.n	2852 <CONFIG_MAIN_STACK_SIZE+0x52>
	if (mode == GPIO_INT_MODE_LEVEL) {
    27f8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    27fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2800:	d129      	bne.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2806:	bf0c      	ite	eq
    2808:	2304      	moveq	r3, #4
    280a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    280c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2810:	6883      	ldr	r3, [r0, #8]
    2812:	fa23 f101 	lsr.w	r1, r3, r1
    2816:	07c9      	lsls	r1, r1, #31
    2818:	d429      	bmi.n	286e <CONFIG_MAIN_STACK_SIZE+0x6e>
    281a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    281e:	d126      	bne.n	286e <CONFIG_MAIN_STACK_SIZE+0x6e>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2820:	4a1b      	ldr	r2, [pc, #108]	; (2890 <CONFIG_MAIN_STACK_SIZE+0x90>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2822:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2826:	3380      	adds	r3, #128	; 0x80
    2828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    282c:	07db      	lsls	r3, r3, #31
    282e:	d41e      	bmi.n	286e <CONFIG_MAIN_STACK_SIZE+0x6e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2830:	f10d 0407 	add.w	r4, sp, #7
    2834:	4621      	mov	r1, r4
    2836:	4628      	mov	r0, r5
    2838:	f001 fa48 	bl	3ccc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    283c:	4b15      	ldr	r3, [pc, #84]	; (2894 <CONFIG_MAIN_STACK_SIZE+0x94>)
    283e:	4298      	cmp	r0, r3
    2840:	d114      	bne.n	286c <CONFIG_MAIN_STACK_SIZE+0x6c>
			err = nrfx_gpiote_channel_alloc(&ch);
    2842:	4620      	mov	r0, r4
    2844:	f001 fa8c 	bl	3d60 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2848:	4b13      	ldr	r3, [pc, #76]	; (2898 <CONFIG_MAIN_STACK_SIZE+0x98>)
    284a:	4298      	cmp	r0, r3
    284c:	d00e      	beq.n	286c <CONFIG_MAIN_STACK_SIZE+0x6c>
				return -ENOMEM;
    284e:	f06f 000b 	mvn.w	r0, #11
}
    2852:	b005      	add	sp, #20
    2854:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2856:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    285a:	d005      	beq.n	2868 <CONFIG_MAIN_STACK_SIZE+0x68>
    285c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2860:	bf0c      	ite	eq
    2862:	2302      	moveq	r3, #2
    2864:	2301      	movne	r3, #1
    2866:	e7d1      	b.n	280c <CONFIG_MAIN_STACK_SIZE+0xc>
    2868:	2303      	movs	r3, #3
    286a:	e7cf      	b.n	280c <CONFIG_MAIN_STACK_SIZE+0xc>
		trigger_config.p_in_channel = &ch;
    286c:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    286e:	2300      	movs	r3, #0
    2870:	4628      	mov	r0, r5
    2872:	4619      	mov	r1, r3
    2874:	aa02      	add	r2, sp, #8
    2876:	f001 f8e9 	bl	3a4c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    287a:	4b07      	ldr	r3, [pc, #28]	; (2898 <CONFIG_MAIN_STACK_SIZE+0x98>)
    287c:	4298      	cmp	r0, r3
    287e:	d104      	bne.n	288a <CONFIG_MAIN_STACK_SIZE+0x8a>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2880:	2101      	movs	r1, #1
    2882:	4628      	mov	r0, r5
    2884:	f001 fa72 	bl	3d6c <nrfx_gpiote_trigger_enable>
    2888:	e7b4      	b.n	27f4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    288a:	f06f 0004 	mvn.w	r0, #4
    288e:	e7e0      	b.n	2852 <CONFIG_MAIN_STACK_SIZE+0x52>
    2890:	50842500 	.word	0x50842500
    2894:	0bad0004 	.word	0x0bad0004
    2898:	0bad0000 	.word	0x0bad0000

0000289c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    289c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    289e:	f001 fa4f 	bl	3d40 <nrfx_gpiote_is_init>
    28a2:	4604      	mov	r4, r0
    28a4:	b968      	cbnz	r0, 28c2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    28a6:	f001 fa23 	bl	3cf0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    28aa:	4b08      	ldr	r3, [pc, #32]	; (28cc <gpio_nrfx_init+0x30>)
    28ac:	4298      	cmp	r0, r3
    28ae:	d10a      	bne.n	28c6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    28b0:	4621      	mov	r1, r4
    28b2:	4807      	ldr	r0, [pc, #28]	; (28d0 <gpio_nrfx_init+0x34>)
    28b4:	f001 fa04 	bl	3cc0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    28b8:	4622      	mov	r2, r4
    28ba:	2105      	movs	r1, #5
    28bc:	200d      	movs	r0, #13
    28be:	f7ff f9ad 	bl	1c1c <z_arm_irq_priority_set>
		return 0;
    28c2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    28c4:	bd10      	pop	{r4, pc}
		return -EIO;
    28c6:	f06f 0004 	mvn.w	r0, #4
    28ca:	e7fb      	b.n	28c4 <gpio_nrfx_init+0x28>
    28cc:	0bad0000 	.word	0x0bad0000
    28d0:	000028d5 	.word	0x000028d5

000028d4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28d4:	0943      	lsrs	r3, r0, #5
{
    28d6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28d8:	d118      	bne.n	290c <nrfx_gpio_handler+0x38>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28da:	4b0d      	ldr	r3, [pc, #52]	; (2910 <nrfx_gpio_handler+0x3c>)
    28dc:	6859      	ldr	r1, [r3, #4]
    28de:	b1a9      	cbz	r1, 290c <nrfx_gpio_handler+0x38>
    28e0:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
    28e2:	2301      	movs	r3, #1
    28e4:	2c00      	cmp	r4, #0
    28e6:	bf38      	it	cc
    28e8:	2400      	movcc	r4, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    28ea:	4e0a      	ldr	r6, [pc, #40]	; (2914 <nrfx_gpio_handler+0x40>)
    28ec:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
    28f0:	688a      	ldr	r2, [r1, #8]
    28f2:	402a      	ands	r2, r5
    28f4:	d002      	beq.n	28fc <nrfx_gpio_handler+0x28>
			cb->handler(port, cb, cb->pin_mask & pins);
    28f6:	4630      	mov	r0, r6
    28f8:	684b      	ldr	r3, [r1, #4]
    28fa:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28fc:	b134      	cbz	r4, 290c <nrfx_gpio_handler+0x38>
	return node->next;
    28fe:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2900:	4621      	mov	r1, r4
    2902:	2b00      	cmp	r3, #0
    2904:	bf38      	it	cc
    2906:	2300      	movcc	r3, #0
    2908:	461c      	mov	r4, r3
    290a:	e7f1      	b.n	28f0 <nrfx_gpio_handler+0x1c>
}
    290c:	bd70      	pop	{r4, r5, r6, pc}
    290e:	bf00      	nop
    2910:	2000d3a0 	.word	0x2000d3a0
    2914:	00006bc8 	.word	0x00006bc8

00002918 <gpio_nrfx_pin_configure>:
{
    2918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    291c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    291e:	f001 051f 	and.w	r5, r1, #31
    2922:	7b3b      	ldrb	r3, [r7, #12]
{
    2924:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    2926:	4614      	mov	r4, r2
{
    2928:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    292a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    292e:	b9ca      	cbnz	r2, 2964 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    2930:	a902      	add	r1, sp, #8
    2932:	4628      	mov	r0, r5
    2934:	f001 f9ca 	bl	3ccc <nrfx_gpiote_channel_get>
    2938:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    293a:	4628      	mov	r0, r5
    293c:	f001 fa7c 	bl	3e38 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    2940:	4b47      	ldr	r3, [pc, #284]	; (2a60 <gpio_nrfx_pin_configure+0x148>)
    2942:	4298      	cmp	r0, r3
    2944:	d004      	beq.n	2950 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2946:	f06f 0004 	mvn.w	r0, #4
}
    294a:	b005      	add	sp, #20
    294c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    2950:	4284      	cmp	r4, r0
    2952:	d105      	bne.n	2960 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2954:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2958:	f001 f9fc 	bl	3d54 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    295c:	42a0      	cmp	r0, r4
    295e:	d1f2      	bne.n	2946 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2960:	2000      	movs	r0, #0
    2962:	e7f2      	b.n	294a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2964:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2968:	f10d 0103 	add.w	r1, sp, #3
    296c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    296e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    2972:	f001 f9ab 	bl	3ccc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2976:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2978:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    297a:	4649      	mov	r1, r9
    297c:	4628      	mov	r0, r5
    297e:	aa02      	add	r2, sp, #8
    2980:	f001 f864 	bl	3a4c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2984:	4b36      	ldr	r3, [pc, #216]	; (2a60 <gpio_nrfx_pin_configure+0x148>)
    2986:	4298      	cmp	r0, r3
    2988:	d002      	beq.n	2990 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    298a:	f06f 0015 	mvn.w	r0, #21
    298e:	e7dc      	b.n	294a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    2990:	4580      	cmp	r8, r0
    2992:	d103      	bne.n	299c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    2994:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2998:	f001 f9dc 	bl	3d54 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    299c:	05a3      	lsls	r3, r4, #22
    299e:	d54c      	bpl.n	2a3a <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29a0:	4b30      	ldr	r3, [pc, #192]	; (2a64 <gpio_nrfx_pin_configure+0x14c>)
    29a2:	4a31      	ldr	r2, [pc, #196]	; (2a68 <gpio_nrfx_pin_configure+0x150>)
    29a4:	4023      	ands	r3, r4
    29a6:	4293      	cmp	r3, r2
    29a8:	d039      	beq.n	2a1e <gpio_nrfx_pin_configure+0x106>
    29aa:	d80c      	bhi.n	29c6 <gpio_nrfx_pin_configure+0xae>
    29ac:	2b06      	cmp	r3, #6
    29ae:	d014      	beq.n	29da <gpio_nrfx_pin_configure+0xc2>
    29b0:	d804      	bhi.n	29bc <gpio_nrfx_pin_configure+0xa4>
    29b2:	b193      	cbz	r3, 29da <gpio_nrfx_pin_configure+0xc2>
    29b4:	2b02      	cmp	r3, #2
    29b6:	d1e8      	bne.n	298a <gpio_nrfx_pin_configure+0x72>
    29b8:	2304      	movs	r3, #4
    29ba:	e00e      	b.n	29da <gpio_nrfx_pin_configure+0xc2>
    29bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    29c0:	d1e3      	bne.n	298a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    29c2:	2301      	movs	r3, #1
    29c4:	e009      	b.n	29da <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29c6:	4a29      	ldr	r2, [pc, #164]	; (2a6c <gpio_nrfx_pin_configure+0x154>)
    29c8:	4293      	cmp	r3, r2
    29ca:	d02a      	beq.n	2a22 <gpio_nrfx_pin_configure+0x10a>
    29cc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    29d0:	d029      	beq.n	2a26 <gpio_nrfx_pin_configure+0x10e>
    29d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    29d6:	d1d8      	bne.n	298a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    29d8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    29da:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    29de:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    29e2:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    29e6:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    29e8:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    29ec:	bf4c      	ite	mi
    29ee:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    29f0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29f4:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    29f6:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29fa:	d516      	bpl.n	2a2a <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    29fc:	2101      	movs	r1, #1
    29fe:	687b      	ldr	r3, [r7, #4]
    2a00:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2a04:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2a06:	2200      	movs	r2, #0
    2a08:	4628      	mov	r0, r5
    2a0a:	a901      	add	r1, sp, #4
    2a0c:	f001 f8c4 	bl	3b98 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a10:	4b13      	ldr	r3, [pc, #76]	; (2a60 <gpio_nrfx_pin_configure+0x148>)
    2a12:	4298      	cmp	r0, r3
    2a14:	bf14      	ite	ne
    2a16:	f06f 0015 	mvnne.w	r0, #21
    2a1a:	2000      	moveq	r0, #0
    2a1c:	e795      	b.n	294a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2a1e:	2307      	movs	r3, #7
    2a20:	e7db      	b.n	29da <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2a22:	2305      	movs	r3, #5
    2a24:	e7d9      	b.n	29da <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2a26:	2303      	movs	r3, #3
    2a28:	e7d7      	b.n	29da <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2a2a:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2a2c:	bf41      	itttt	mi
    2a2e:	2101      	movmi	r1, #1
    2a30:	687b      	ldrmi	r3, [r7, #4]
    2a32:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2a36:	60de      	strmi	r6, [r3, #12]
}
    2a38:	e7e5      	b.n	2a06 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
    2a3a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a3c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2a40:	bf4c      	ite	mi
    2a42:	2403      	movmi	r4, #3
    2a44:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a48:	461a      	mov	r2, r3
    2a4a:	4628      	mov	r0, r5
    2a4c:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2a4e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a52:	f000 fffb 	bl	3a4c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a56:	4b02      	ldr	r3, [pc, #8]	; (2a60 <gpio_nrfx_pin_configure+0x148>)
    2a58:	4298      	cmp	r0, r3
    2a5a:	d081      	beq.n	2960 <gpio_nrfx_pin_configure+0x48>
    2a5c:	e795      	b.n	298a <gpio_nrfx_pin_configure+0x72>
    2a5e:	bf00      	nop
    2a60:	0bad0000 	.word	0x0bad0000
    2a64:	00f00006 	.word	0x00f00006
    2a68:	00100006 	.word	0x00100006
    2a6c:	00400002 	.word	0x00400002

00002a70 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2a70:	4b02      	ldr	r3, [pc, #8]	; (2a7c <flash_nrf_pages_layout+0xc>)
    2a72:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2a74:	2301      	movs	r3, #1
    2a76:	6013      	str	r3, [r2, #0]
}
    2a78:	4770      	bx	lr
    2a7a:	bf00      	nop
    2a7c:	2000d3ac 	.word	0x2000d3ac

00002a80 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2a80:	4800      	ldr	r0, [pc, #0]	; (2a84 <flash_nrf_get_parameters+0x4>)
    2a82:	4770      	bx	lr
    2a84:	00006ff0 	.word	0x00006ff0

00002a88 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2a88:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2a8a:	f004 f81e 	bl	6aca <nrfx_nvmc_flash_page_count_get>
    2a8e:	4c03      	ldr	r4, [pc, #12]	; (2a9c <nrf_flash_init+0x14>)
    2a90:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2a92:	f004 f817 	bl	6ac4 <nrfx_nvmc_flash_page_size_get>
    2a96:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2a98:	2000      	movs	r0, #0
    2a9a:	bd10      	pop	{r4, pc}
    2a9c:	2000d3ac 	.word	0x2000d3ac

00002aa0 <flash_nrf_erase>:
{
    2aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aa2:	460e      	mov	r6, r1
    2aa4:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2aa6:	f004 f80d 	bl	6ac4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2aaa:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2aac:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    2aae:	4630      	mov	r0, r6
    2ab0:	f003 fe79 	bl	67a6 <is_regular_addr_valid>
    2ab4:	4637      	mov	r7, r6
    2ab6:	b1f8      	cbz	r0, 2af8 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2ab8:	fbb6 f3f5 	udiv	r3, r6, r5
    2abc:	fb05 6313 	mls	r3, r5, r3, r6
    2ac0:	b923      	cbnz	r3, 2acc <flash_nrf_erase+0x2c>
    2ac2:	fbb4 f3f5 	udiv	r3, r4, r5
    2ac6:	fb05 4013 	mls	r0, r5, r3, r4
    2aca:	b140      	cbz	r0, 2ade <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    2acc:	4623      	mov	r3, r4
    2ace:	4632      	mov	r2, r6
    2ad0:	2145      	movs	r1, #69	; 0x45
    2ad2:	480c      	ldr	r0, [pc, #48]	; (2b04 <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2ad4:	f003 fc79 	bl	63ca <z_log_minimal_printk>
    2ad8:	f06f 0015 	mvn.w	r0, #21
    2adc:	e00b      	b.n	2af6 <flash_nrf_erase+0x56>
		if (!n_pages) {
    2ade:	42a5      	cmp	r5, r4
    2ae0:	d809      	bhi.n	2af6 <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2ae2:	f003 ffef 	bl	6ac4 <nrfx_nvmc_flash_page_size_get>
    2ae6:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2ae8:	4638      	mov	r0, r7
    2aea:	f001 fa79 	bl	3fe0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    2aee:	1b64      	subs	r4, r4, r5
    2af0:	442f      	add	r7, r5
    2af2:	d1f9      	bne.n	2ae8 <flash_nrf_erase+0x48>
	return ret;
    2af4:	4620      	mov	r0, r4
}
    2af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2af8:	4623      	mov	r3, r4
    2afa:	4632      	mov	r2, r6
    2afc:	2145      	movs	r1, #69	; 0x45
    2afe:	4802      	ldr	r0, [pc, #8]	; (2b08 <flash_nrf_erase+0x68>)
    2b00:	e7e8      	b.n	2ad4 <flash_nrf_erase+0x34>
    2b02:	bf00      	nop
    2b04:	00007bd2 	.word	0x00007bd2
    2b08:	00007bf6 	.word	0x00007bf6

00002b0c <flash_nrf_read>:
{
    2b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b0e:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    2b10:	4619      	mov	r1, r3
    2b12:	4620      	mov	r0, r4
    2b14:	9301      	str	r3, [sp, #4]
{
    2b16:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    2b18:	f003 fe45 	bl	67a6 <is_regular_addr_valid>
    2b1c:	9b01      	ldr	r3, [sp, #4]
    2b1e:	b940      	cbnz	r0, 2b32 <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2b20:	4809      	ldr	r0, [pc, #36]	; (2b48 <flash_nrf_read+0x3c>)
    2b22:	4622      	mov	r2, r4
    2b24:	2145      	movs	r1, #69	; 0x45
    2b26:	f003 fc50 	bl	63ca <z_log_minimal_printk>
    2b2a:	f06f 0015 	mvn.w	r0, #21
}
    2b2e:	b003      	add	sp, #12
    2b30:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    2b32:	b133      	cbz	r3, 2b42 <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    2b34:	461a      	mov	r2, r3
    2b36:	4621      	mov	r1, r4
    2b38:	4628      	mov	r0, r5
    2b3a:	f003 fd3e 	bl	65ba <memcpy>
	return 0;
    2b3e:	2000      	movs	r0, #0
    2b40:	e7f5      	b.n	2b2e <flash_nrf_read+0x22>
		return 0;
    2b42:	4618      	mov	r0, r3
    2b44:	e7f3      	b.n	2b2e <flash_nrf_read+0x22>
    2b46:	bf00      	nop
    2b48:	00007bf6 	.word	0x00007bf6

00002b4c <flash_nrf_write>:
{
    2b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b4e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2b50:	4619      	mov	r1, r3
    2b52:	4630      	mov	r0, r6
{
    2b54:	4617      	mov	r7, r2
    2b56:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2b58:	f003 fe25 	bl	67a6 <is_regular_addr_valid>
    2b5c:	b940      	cbnz	r0, 2b70 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2b5e:	4623      	mov	r3, r4
    2b60:	4632      	mov	r2, r6
    2b62:	2145      	movs	r1, #69	; 0x45
    2b64:	4812      	ldr	r0, [pc, #72]	; (2bb0 <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2b66:	f003 fc30 	bl	63ca <z_log_minimal_printk>
		return -EINVAL;
    2b6a:	f06f 0015 	mvn.w	r0, #21
}
    2b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    2b70:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2b74:	f015 0503 	ands.w	r5, r5, #3
    2b78:	d004      	beq.n	2b84 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2b7a:	4623      	mov	r3, r4
    2b7c:	4632      	mov	r2, r6
    2b7e:	2145      	movs	r1, #69	; 0x45
    2b80:	480c      	ldr	r0, [pc, #48]	; (2bb4 <flash_nrf_write+0x68>)
    2b82:	e7f0      	b.n	2b66 <flash_nrf_write+0x1a>
	if (!len) {
    2b84:	b18c      	cbz	r4, 2baa <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2b86:	192b      	adds	r3, r5, r4
    2b88:	2b03      	cmp	r3, #3
    2b8a:	eba6 0005 	sub.w	r0, r6, r5
    2b8e:	d806      	bhi.n	2b9e <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2b90:	4a09      	ldr	r2, [pc, #36]	; (2bb8 <flash_nrf_write+0x6c>)
    2b92:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2b96:	07db      	lsls	r3, r3, #31
    2b98:	d5fb      	bpl.n	2b92 <flash_nrf_write+0x46>
	return ret;
    2b9a:	2000      	movs	r0, #0
    2b9c:	e7e7      	b.n	2b6e <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    2b9e:	1b7b      	subs	r3, r7, r5
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2ba0:	6819      	ldr	r1, [r3, #0]
    2ba2:	f001 fa3b 	bl	401c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2ba6:	3d04      	subs	r5, #4
}
    2ba8:	e7ed      	b.n	2b86 <flash_nrf_write+0x3a>
		return 0;
    2baa:	4620      	mov	r0, r4
    2bac:	e7df      	b.n	2b6e <flash_nrf_write+0x22>
    2bae:	bf00      	nop
    2bb0:	00007bf6 	.word	0x00007bf6
    2bb4:	00007c18 	.word	0x00007c18
    2bb8:	50039000 	.word	0x50039000

00002bbc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2bbe:	794b      	ldrb	r3, [r1, #5]
    2bc0:	2b01      	cmp	r3, #1
    2bc2:	d026      	beq.n	2c12 <uarte_nrfx_configure+0x56>
    2bc4:	2b03      	cmp	r3, #3
    2bc6:	d121      	bne.n	2c0c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2bc8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2bca:	798b      	ldrb	r3, [r1, #6]
    2bcc:	2b03      	cmp	r3, #3
    2bce:	d11d      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2bd0:	79cc      	ldrb	r4, [r1, #7]
    2bd2:	b10c      	cbz	r4, 2bd8 <uarte_nrfx_configure+0x1c>
    2bd4:	2c01      	cmp	r4, #1
    2bd6:	d119      	bne.n	2c0c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2bd8:	790a      	ldrb	r2, [r1, #4]
    2bda:	b112      	cbz	r2, 2be2 <uarte_nrfx_configure+0x26>
    2bdc:	2a02      	cmp	r2, #2
    2bde:	d115      	bne.n	2c0c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2be0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2be2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2be4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2be6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2bea:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2bec:	d065      	beq.n	2cba <uarte_nrfx_configure+0xfe>
    2bee:	d82d      	bhi.n	2c4c <uarte_nrfx_configure+0x90>
    2bf0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2bf4:	d064      	beq.n	2cc0 <uarte_nrfx_configure+0x104>
    2bf6:	d816      	bhi.n	2c26 <uarte_nrfx_configure+0x6a>
    2bf8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2bfc:	d062      	beq.n	2cc4 <uarte_nrfx_configure+0x108>
    2bfe:	d80a      	bhi.n	2c16 <uarte_nrfx_configure+0x5a>
    2c00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2c04:	d061      	beq.n	2cca <uarte_nrfx_configure+0x10e>
    2c06:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2c0a:	d061      	beq.n	2cd0 <uarte_nrfx_configure+0x114>
    2c0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c10:	e052      	b.n	2cb8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    2c12:	2600      	movs	r6, #0
    2c14:	e7d9      	b.n	2bca <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2c16:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c1a:	d05c      	beq.n	2cd6 <uarte_nrfx_configure+0x11a>
    2c1c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c20:	d1f4      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c22:	4b37      	ldr	r3, [pc, #220]	; (2d00 <uarte_nrfx_configure+0x144>)
    2c24:	e03c      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c26:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c2a:	d057      	beq.n	2cdc <uarte_nrfx_configure+0x120>
    2c2c:	d807      	bhi.n	2c3e <uarte_nrfx_configure+0x82>
    2c2e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c32:	d055      	beq.n	2ce0 <uarte_nrfx_configure+0x124>
    2c34:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2c38:	d1e8      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2c3a:	4b32      	ldr	r3, [pc, #200]	; (2d04 <uarte_nrfx_configure+0x148>)
    2c3c:	e030      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c3e:	f647 2712 	movw	r7, #31250	; 0x7a12
    2c42:	42bb      	cmp	r3, r7
    2c44:	d1e2      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2c46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2c4a:	e029      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c4c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2c50:	d048      	beq.n	2ce4 <uarte_nrfx_configure+0x128>
    2c52:	d813      	bhi.n	2c7c <uarte_nrfx_configure+0xc0>
    2c54:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2c58:	d047      	beq.n	2cea <uarte_nrfx_configure+0x12e>
    2c5a:	d809      	bhi.n	2c70 <uarte_nrfx_configure+0xb4>
    2c5c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2c60:	42bb      	cmp	r3, r7
    2c62:	d044      	beq.n	2cee <uarte_nrfx_configure+0x132>
    2c64:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2c68:	d1d0      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2c6a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2c6e:	e017      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c70:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2c74:	d1ca      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2c76:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2c7a:	e011      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c7c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2c80:	d038      	beq.n	2cf4 <uarte_nrfx_configure+0x138>
    2c82:	d808      	bhi.n	2c96 <uarte_nrfx_configure+0xda>
    2c84:	4f20      	ldr	r7, [pc, #128]	; (2d08 <uarte_nrfx_configure+0x14c>)
    2c86:	42bb      	cmp	r3, r7
    2c88:	d037      	beq.n	2cfa <uarte_nrfx_configure+0x13e>
    2c8a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2c8e:	d1bd      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2c90:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2c94:	e004      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c96:	4f1d      	ldr	r7, [pc, #116]	; (2d0c <uarte_nrfx_configure+0x150>)
    2c98:	42bb      	cmp	r3, r7
    2c9a:	d1b7      	bne.n	2c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2ca0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2ca4:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2ca6:	4334      	orrs	r4, r6
    2ca8:	4322      	orrs	r2, r4
    2caa:	3304      	adds	r3, #4
    2cac:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2cae:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2cb2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2cb6:	2000      	movs	r0, #0
}
    2cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2cba:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2cbe:	e7ef      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2cc0:	4b13      	ldr	r3, [pc, #76]	; (2d10 <uarte_nrfx_configure+0x154>)
    2cc2:	e7ed      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2cc4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2cc8:	e7ea      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2cca:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2cce:	e7e7      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cd0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2cd4:	e7e4      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2cd6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2cda:	e7e1      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2cdc:	4b0d      	ldr	r3, [pc, #52]	; (2d14 <uarte_nrfx_configure+0x158>)
    2cde:	e7df      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2ce0:	4b0d      	ldr	r3, [pc, #52]	; (2d18 <uarte_nrfx_configure+0x15c>)
    2ce2:	e7dd      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2ce4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2ce8:	e7da      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2cea:	4b0c      	ldr	r3, [pc, #48]	; (2d1c <uarte_nrfx_configure+0x160>)
    2cec:	e7d8      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2cee:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2cf2:	e7d5      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2cf4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2cf8:	e7d2      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2cfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2cfe:	e7cf      	b.n	2ca0 <uarte_nrfx_configure+0xe4>
    2d00:	0013b000 	.word	0x0013b000
    2d04:	004ea000 	.word	0x004ea000
    2d08:	0003d090 	.word	0x0003d090
    2d0c:	000f4240 	.word	0x000f4240
    2d10:	00275000 	.word	0x00275000
    2d14:	0075c000 	.word	0x0075c000
    2d18:	003af000 	.word	0x003af000
    2d1c:	013a9000 	.word	0x013a9000

00002d20 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d22:	4605      	mov	r5, r0
    2d24:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2d26:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2d28:	f003 fedd 	bl	6ae6 <k_is_in_isr>
    2d2c:	b910      	cbnz	r0, 2d34 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2d2e:	4b29      	ldr	r3, [pc, #164]	; (2dd4 <uarte_nrfx_poll_out+0xb4>)
	int key;

	if (isr_mode) {
    2d30:	781b      	ldrb	r3, [r3, #0]
    2d32:	b9a3      	cbnz	r3, 2d5e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2d34:	f04f 0320 	mov.w	r3, #32
    2d38:	f3ef 8411 	mrs	r4, BASEPRI
    2d3c:	f383 8812 	msr	BASEPRI_MAX, r3
    2d40:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2d44:	4628      	mov	r0, r5
    2d46:	f003 fdb6 	bl	68b6 <is_tx_ready>
    2d4a:	bb00      	cbnz	r0, 2d8e <uarte_nrfx_poll_out+0x6e>
	__asm__ volatile(
    2d4c:	f384 8811 	msr	BASEPRI, r4
    2d50:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2d54:	e7ee      	b.n	2d34 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2d56:	f384 8811 	msr	BASEPRI, r4
    2d5a:	f3bf 8f6f 	isb	sy
{
    2d5e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2d60:	4628      	mov	r0, r5
    2d62:	f003 fda8 	bl	68b6 <is_tx_ready>
    2d66:	b928      	cbnz	r0, 2d74 <uarte_nrfx_poll_out+0x54>
    2d68:	2001      	movs	r0, #1
    2d6a:	f003 fe9b 	bl	6aa4 <nrfx_busy_wait>
    2d6e:	3c01      	subs	r4, #1
    2d70:	d1f6      	bne.n	2d60 <uarte_nrfx_poll_out+0x40>
    2d72:	e7f4      	b.n	2d5e <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2d74:	f04f 0320 	mov.w	r3, #32
    2d78:	f3ef 8411 	mrs	r4, BASEPRI
    2d7c:	f383 8812 	msr	BASEPRI_MAX, r3
    2d80:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2d84:	4628      	mov	r0, r5
    2d86:	f003 fd96 	bl	68b6 <is_tx_ready>
    2d8a:	2800      	cmp	r0, #0
    2d8c:	d0e3      	beq.n	2d56 <uarte_nrfx_poll_out+0x36>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2d8e:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    2d90:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2d94:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2d96:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2d98:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2d9c:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2da0:	2200      	movs	r2, #0
    2da2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2da6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    2daa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2dae:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2db2:	684a      	ldr	r2, [r1, #4]
    2db4:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2db6:	bf41      	itttt	mi
    2db8:	2208      	movmi	r2, #8
    2dba:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2dbe:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2dc2:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dc6:	2201      	movs	r2, #1
    2dc8:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2dca:	f384 8811 	msr	BASEPRI, r4
    2dce:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    2dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd4:	2000d4e6 	.word	0x2000d4e6

00002dd8 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2ddc:	2300      	movs	r3, #0
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    2dde:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2de0:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    2de2:	683c      	ldr	r4, [r7, #0]
    2de4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2de8:	6028      	str	r0, [r5, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    2dea:	6843      	ldr	r3, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2dec:	68de      	ldr	r6, [r3, #12]
    2dee:	1c71      	adds	r1, r6, #1
    2df0:	d00b      	beq.n	2e0a <uarte_instance_init.isra.0+0x32>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2df2:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    2df4:	f8df c13c 	ldr.w	ip, [pc, #316]	; 2f34 <uarte_instance_init.isra.0+0x15c>
    *p_pin = pin_number & 0x1F;
    2df8:	f006 021f 	and.w	r2, r6, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2dfc:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    2dfe:	f8cc 1008 	str.w	r1, [ip, #8]
    reg->PIN_CNF[pin_number] = cnf;
    2e02:	2103      	movs	r1, #3
    2e04:	3280      	adds	r2, #128	; 0x80
    2e06:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2e0a:	6919      	ldr	r1, [r3, #16]
    2e0c:	1c4a      	adds	r2, r1, #1
    2e0e:	d00d      	beq.n	2e2c <uarte_instance_init.isra.0+0x54>
			nrf_gpio_cfg_input(cfg->rx_pin,
    2e10:	7f1a      	ldrb	r2, [r3, #28]
    2e12:	f8df c120 	ldr.w	ip, [pc, #288]	; 2f34 <uarte_instance_init.isra.0+0x15c>
    2e16:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2e18:	bf14      	ite	ne
    2e1a:	f04f 0e0c 	movne.w	lr, #12
    2e1e:	f04f 0e00 	moveq.w	lr, #0
    *p_pin = pin_number & 0x1F;
    2e22:	f001 021f 	and.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = cnf;
    2e26:	3280      	adds	r2, #128	; 0x80
    2e28:	f84c e022 	str.w	lr, [ip, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2e2c:	f8d3 c014 	ldr.w	ip, [r3, #20]
    2e30:	f1bc 3fff 	cmp.w	ip, #4294967295
    2e34:	d00e      	beq.n	2e54 <uarte_instance_init.isra.0+0x7c>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e36:	f04f 0e01 	mov.w	lr, #1
    p_reg->OUTSET = set_mask;
    2e3a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 2f34 <uarte_instance_init.isra.0+0x15c>
    *p_pin = pin_number & 0x1F;
    2e3e:	f00c 021f 	and.w	r2, ip, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2e42:	fa0e fe02 	lsl.w	lr, lr, r2
    p_reg->OUTSET = set_mask;
    2e46:	f8c8 e008 	str.w	lr, [r8, #8]
    reg->PIN_CNF[pin_number] = cnf;
    2e4a:	f04f 0e03 	mov.w	lr, #3
    2e4e:	3280      	adds	r2, #128	; 0x80
    2e50:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    2e54:	f8d3 e018 	ldr.w	lr, [r3, #24]
    2e58:	f1be 3fff 	cmp.w	lr, #4294967295
    2e5c:	d00d      	beq.n	2e7a <uarte_instance_init.isra.0+0xa2>
			nrf_gpio_cfg_input(cfg->cts_pin,
    2e5e:	7f5a      	ldrb	r2, [r3, #29]
    2e60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 2f34 <uarte_instance_init.isra.0+0x15c>
    2e64:	2a00      	cmp	r2, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2e66:	bf14      	ite	ne
    2e68:	f04f 090c 	movne.w	r9, #12
    2e6c:	f04f 0900 	moveq.w	r9, #0
    *p_pin = pin_number & 0x1F;
    2e70:	f00e 021f 	and.w	r2, lr, #31
    reg->PIN_CNF[pin_number] = cnf;
    2e74:	3280      	adds	r2, #128	; 0x80
    2e76:	f848 9022 	str.w	r9, [r8, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    2e7a:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
    2e7c:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2e80:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2e84:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.RTS = pselrts;
    2e86:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
    2e8a:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    2e8c:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
    2e90:	f7ff fe94 	bl	2bbc <uarte_nrfx_configure>
	if (err) {
    2e94:	4606      	mov	r6, r0
    2e96:	b978      	cbnz	r0, 2eb8 <uarte_instance_init.isra.0+0xe0>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2e98:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2e9a:	0799      	lsls	r1, r3, #30
    2e9c:	d51c      	bpl.n	2ed8 <uarte_instance_init.isra.0+0x100>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2e9e:	f105 0012 	add.w	r0, r5, #18
    2ea2:	f000 fd57 	bl	3954 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2ea6:	4b20      	ldr	r3, [pc, #128]	; (2f28 <uarte_instance_init.isra.0+0x150>)
    2ea8:	4298      	cmp	r0, r3
    2eaa:	d008      	beq.n	2ebe <uarte_instance_init.isra.0+0xe6>
		LOG_ERR("Failed to allocate PPI Channel");
    2eac:	2145      	movs	r1, #69	; 0x45
    2eae:	481f      	ldr	r0, [pc, #124]	; (2f2c <uarte_instance_init.isra.0+0x154>)
    2eb0:	f003 fa8b 	bl	63ca <z_log_minimal_printk>
		return -EIO;
    2eb4:	f06f 0604 	mvn.w	r6, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2eb8:	4630      	mov	r0, r6
    2eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2ebe:	7cab      	ldrb	r3, [r5, #18]
    2ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2ec4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2ec8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2ecc:	2301      	movs	r3, #1
    2ece:	7caa      	ldrb	r2, [r5, #18]
    2ed0:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2ed2:	4a17      	ldr	r2, [pc, #92]	; (2f30 <uarte_instance_init.isra.0+0x158>)
    2ed4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2ed8:	2308      	movs	r3, #8
    2eda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2ede:	7a3b      	ldrb	r3, [r7, #8]
    2ee0:	b95b      	cbnz	r3, 2efa <uarte_instance_init.isra.0+0x122>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ee2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2ee6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2eea:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2eee:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2ef2:	2301      	movs	r3, #1
    2ef4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ef8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2efa:	687b      	ldr	r3, [r7, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2efc:	3510      	adds	r5, #16
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2efe:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2f00:	bf5c      	itt	pl
    2f02:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2f06:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2f0a:	06db      	lsls	r3, r3, #27
    2f0c:	bf44      	itt	mi
    2f0e:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2f12:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    2f16:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2f18:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2f1c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f20:	2301      	movs	r3, #1
    2f22:	60a3      	str	r3, [r4, #8]
    2f24:	60e3      	str	r3, [r4, #12]
	return 0;
    2f26:	e7c7      	b.n	2eb8 <uarte_instance_init.isra.0+0xe0>
    2f28:	0bad0000 	.word	0x0bad0000
    2f2c:	00007c45 	.word	0x00007c45
    2f30:	50017000 	.word	0x50017000
    2f34:	50842500 	.word	0x50842500

00002f38 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f38:	4919      	ldr	r1, [pc, #100]	; (2fa0 <sys_clock_timeout_handler+0x68>)
{
    2f3a:	b570      	push	{r4, r5, r6, lr}
    2f3c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2f3e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f42:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2f44:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2f48:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2f4c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2f4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2f52:	f04f 0500 	mov.w	r5, #0
    2f56:	d20a      	bcs.n	2f6e <sys_clock_timeout_handler+0x36>
		return true;
    2f58:	2501      	movs	r5, #1
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2f5a:	4b12      	ldr	r3, [pc, #72]	; (2fa4 <sys_clock_timeout_handler+0x6c>)
    2f5c:	6819      	ldr	r1, [r3, #0]
    2f5e:	060a      	lsls	r2, r1, #24
    2f60:	0a0b      	lsrs	r3, r1, #8
    2f62:	1992      	adds	r2, r2, r6
    2f64:	4910      	ldr	r1, [pc, #64]	; (2fa8 <sys_clock_timeout_handler+0x70>)
    2f66:	f143 0300 	adc.w	r3, r3, #0
    2f6a:	e9c1 2300 	strd	r2, r3, [r1]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2f6e:	f001 f9af 	bl	42d0 <sys_clock_announce>
    return p_reg->CC[ch];
    2f72:	00a3      	lsls	r3, r4, #2
    2f74:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2f78:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2f7c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2f80:	42b2      	cmp	r2, r6
    2f82:	d10b      	bne.n	2f9c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2f84:	b91d      	cbnz	r5, 2f8e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    2f86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2f8a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2f8e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    2f92:	4b06      	ldr	r3, [pc, #24]	; (2fac <sys_clock_timeout_handler+0x74>)
    2f94:	fa00 f404 	lsl.w	r4, r0, r4
    2f98:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2f9c:	bd70      	pop	{r4, r5, r6, pc}
    2f9e:	bf00      	nop
    2fa0:	2000c638 	.word	0x2000c638
    2fa4:	2000d3bc 	.word	0x2000d3bc
    2fa8:	2000c620 	.word	0x2000c620
    2fac:	50015000 	.word	0x50015000

00002fb0 <compare_int_lock>:
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2fb0:	2301      	movs	r3, #1
    2fb2:	4083      	lsls	r3, r0
{
    2fb4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2fb6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2fb8:	4a0d      	ldr	r2, [pc, #52]	; (2ff0 <compare_int_lock+0x40>)
    2fba:	e8d2 1fef 	ldaex	r1, [r2]
    2fbe:	ea01 0c04 	and.w	ip, r1, r4
    2fc2:	e8c2 cfee 	stlex	lr, ip, [r2]
    2fc6:	f1be 0f00 	cmp.w	lr, #0
    2fca:	d1f6      	bne.n	2fba <compare_int_lock+0xa>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2fcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2fd0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    2fd4:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    2fd8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    2fdc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fe0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    2fe4:	420b      	tst	r3, r1
}
    2fe6:	bf14      	ite	ne
    2fe8:	2001      	movne	r0, #1
    2fea:	2000      	moveq	r0, #0
    2fec:	bd10      	pop	{r4, pc}
    2fee:	bf00      	nop
    2ff0:	2000d3b8 	.word	0x2000d3b8

00002ff4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    2ff4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2ff6:	4a0e      	ldr	r2, [pc, #56]	; (3030 <compare_int_unlock.part.0+0x3c>)
    2ff8:	4083      	lsls	r3, r0
    2ffa:	e8d2 1fef 	ldaex	r1, [r2]
    2ffe:	4319      	orrs	r1, r3
    3000:	e8c2 1fec 	stlex	ip, r1, [r2]
    3004:	f1bc 0f00 	cmp.w	ip, #0
    3008:	d1f7      	bne.n	2ffa <compare_int_unlock.part.0+0x6>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    300a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    300e:	4a09      	ldr	r2, [pc, #36]	; (3034 <compare_int_unlock.part.0+0x40>)
    3010:	4083      	lsls	r3, r0
    3012:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3016:	4b08      	ldr	r3, [pc, #32]	; (3038 <compare_int_unlock.part.0+0x44>)
    3018:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    301c:	fa23 f000 	lsr.w	r0, r3, r0
    3020:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3022:	bf42      	ittt	mi
    3024:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3028:	4b04      	ldrmi	r3, [pc, #16]	; (303c <compare_int_unlock.part.0+0x48>)
    302a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    302e:	4770      	bx	lr
    3030:	2000d3b8 	.word	0x2000d3b8
    3034:	50015000 	.word	0x50015000
    3038:	2000d3b4 	.word	0x2000d3b4
    303c:	e000e100 	.word	0xe000e100

00003040 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3040:	4b0d      	ldr	r3, [pc, #52]	; (3078 <z_nrf_rtc_timer_read+0x38>)
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	0a19      	lsrs	r1, r3, #8
    3046:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3048:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    304c:	4b0b      	ldr	r3, [pc, #44]	; (307c <z_nrf_rtc_timer_read+0x3c>)
    304e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3052:	18c0      	adds	r0, r0, r3
    3054:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    305c:	d20a      	bcs.n	3074 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    305e:	4b08      	ldr	r3, [pc, #32]	; (3080 <z_nrf_rtc_timer_read+0x40>)
    3060:	e9d3 2300 	ldrd	r2, r3, [r3]
    3064:	4299      	cmp	r1, r3
    3066:	bf08      	it	eq
    3068:	4290      	cmpeq	r0, r2
    306a:	d203      	bcs.n	3074 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    306c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3070:	f141 0100 	adc.w	r1, r1, #0
}
    3074:	4770      	bx	lr
    3076:	bf00      	nop
    3078:	2000d3bc 	.word	0x2000d3bc
    307c:	50015000 	.word	0x50015000
    3080:	2000c620 	.word	0x2000c620

00003084 <compare_set>:
{
    3084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3088:	4616      	mov	r6, r2
    308a:	461f      	mov	r7, r3
    308c:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    308e:	f7ff ff8f 	bl	2fb0 <compare_int_lock>
    3092:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3094:	f7ff ffd4 	bl	3040 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3098:	42b9      	cmp	r1, r7
    309a:	bf08      	it	eq
    309c:	42b0      	cmpeq	r0, r6
    309e:	d27b      	bcs.n	3198 <compare_set+0x114>
		if (target_time - curr_time > COUNTER_SPAN) {
    30a0:	2300      	movs	r3, #0
    30a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    30a6:	ebb6 0800 	subs.w	r8, r6, r0
    30aa:	eb67 0901 	sbc.w	r9, r7, r1
    30ae:	454b      	cmp	r3, r9
    30b0:	bf08      	it	eq
    30b2:	4542      	cmpeq	r2, r8
    30b4:	d37d      	bcc.n	31b2 <compare_set+0x12e>
		if (target_time != cc_data[chan].target_time) {
    30b6:	4b40      	ldr	r3, [pc, #256]	; (31b8 <compare_set+0x134>)
    30b8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    30bc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    30c0:	429f      	cmp	r7, r3
    30c2:	bf08      	it	eq
    30c4:	4296      	cmpeq	r6, r2
    30c6:	d051      	beq.n	316c <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30c8:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    30cc:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    30d0:	4614      	mov	r4, r2
    30d2:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    30d6:	f105 0850 	add.w	r8, r5, #80	; 0x50
    30da:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    30de:	ea4f 0888 	mov.w	r8, r8, lsl #2
    30e2:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30e6:	fa1f f888 	uxth.w	r8, r8
    30ea:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    30ee:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    30f2:	4b32      	ldr	r3, [pc, #200]	; (31bc <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30f4:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    30f8:	fa0b fb05 	lsl.w	fp, fp, r5
     return p_reg->COUNTER;
    30fc:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3100:	eba0 000a 	sub.w	r0, r0, sl
    3104:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3108:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    310c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    310e:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    3112:	d105      	bne.n	3120 <compare_set+0x9c>
    3114:	9201      	str	r2, [sp, #4]
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    3116:	2013      	movs	r0, #19
    3118:	f003 fceb 	bl	6af2 <z_impl_k_busy_wait>
    311c:	4b27      	ldr	r3, [pc, #156]	; (31bc <compare_set+0x138>)
    311e:	9a01      	ldr	r2, [sp, #4]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3120:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    3124:	eba4 000c 	sub.w	r0, r4, ip
    3128:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    312c:	2100      	movs	r1, #0
			cc_val = now + 2;
    312e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3132:	bf88      	it	hi
    3134:	4664      	movhi	r4, ip
    3136:	f8c8 1000 	str.w	r1, [r8]
    313a:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    313e:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    3142:	f8c3 b344 	str.w	fp, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    3146:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    314a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    314e:	4582      	cmp	sl, r0
    3150:	d006      	beq.n	3160 <compare_set+0xdc>
	return (a - b) & COUNTER_MAX;
    3152:	1a20      	subs	r0, r4, r0
    3154:	3802      	subs	r0, #2
    3156:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    315a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    315e:	d819      	bhi.n	3194 <compare_set+0x110>
	return (a - b) & COUNTER_MAX;
    3160:	1aa4      	subs	r4, r4, r2
    3162:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3166:	1932      	adds	r2, r6, r4
    3168:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    316c:	4c12      	ldr	r4, [pc, #72]	; (31b8 <compare_set+0x134>)
    316e:	0129      	lsls	r1, r5, #4
    3170:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    3174:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    3178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cc_data[chan].user_context = user_data;
    317a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	cc_data[chan].callback = handler;
    317c:	5062      	str	r2, [r4, r1]
	return ret;
    317e:	2400      	movs	r4, #0
	cc_data[chan].user_context = user_data;
    3180:	6043      	str	r3, [r0, #4]
	if (key) {
    3182:	9b00      	ldr	r3, [sp, #0]
    3184:	b113      	cbz	r3, 318c <compare_set+0x108>
    3186:	4628      	mov	r0, r5
    3188:	f7ff ff34 	bl	2ff4 <compare_int_unlock.part.0>
}
    318c:	4620      	mov	r0, r4
    318e:	b003      	add	sp, #12
    3190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3194:	4620      	mov	r0, r4
    3196:	e7b1      	b.n	30fc <compare_set+0x78>
		atomic_or(&force_isr_mask, BIT(chan));
    3198:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    319a:	4a09      	ldr	r2, [pc, #36]	; (31c0 <compare_set+0x13c>)
    319c:	40ab      	lsls	r3, r5
    319e:	e8d2 1fef 	ldaex	r1, [r2]
    31a2:	4319      	orrs	r1, r3
    31a4:	e8c2 1fe0 	stlex	r0, r1, [r2]
    31a8:	2800      	cmp	r0, #0
    31aa:	d1f8      	bne.n	319e <compare_set+0x11a>
    31ac:	4632      	mov	r2, r6
    31ae:	463b      	mov	r3, r7
    31b0:	e7dc      	b.n	316c <compare_set+0xe8>
			return -EINVAL;
    31b2:	f06f 0415 	mvn.w	r4, #21
    31b6:	e7e4      	b.n	3182 <compare_set+0xfe>
    31b8:	2000c628 	.word	0x2000c628
    31bc:	50015000 	.word	0x50015000
    31c0:	2000d3b4 	.word	0x2000d3b4

000031c4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    31c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    31c6:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    31c8:	f04f 30ff 	mov.w	r0, #4294967295
    31cc:	f04f 31ff 	mov.w	r1, #4294967295
    31d0:	4d16      	ldr	r5, [pc, #88]	; (322c <sys_clock_driver_init+0x68>)
    31d2:	4b17      	ldr	r3, [pc, #92]	; (3230 <sys_clock_driver_init+0x6c>)
    31d4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    31d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    31dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    31e0:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    31e6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    31ea:	4b12      	ldr	r3, [pc, #72]	; (3234 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    31ec:	2101      	movs	r1, #1
    31ee:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    31f2:	2015      	movs	r0, #21
    31f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    31f8:	4622      	mov	r2, r4
    31fa:	f7fe fd0f 	bl	1c1c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    31fe:	2015      	movs	r0, #21
    3200:	f7fe fcee 	bl	1be0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3204:	2301      	movs	r3, #1
    3206:	4a0c      	ldr	r2, [pc, #48]	; (3238 <sys_clock_driver_init+0x74>)

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3208:	4620      	mov	r0, r4
    320a:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    320c:	4a0b      	ldr	r2, [pc, #44]	; (323c <sys_clock_driver_init+0x78>)
    320e:	602b      	str	r3, [r5, #0]
    3210:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3212:	4b0b      	ldr	r3, [pc, #44]	; (3240 <sys_clock_driver_init+0x7c>)
    3214:	4a0b      	ldr	r2, [pc, #44]	; (3244 <sys_clock_driver_init+0x80>)
    3216:	9300      	str	r3, [sp, #0]
    3218:	9401      	str	r4, [sp, #4]
    321a:	2300      	movs	r3, #0
    321c:	f7ff ff32 	bl	3084 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3220:	4630      	mov	r0, r6
    3222:	f7ff fa2b 	bl	267c <z_nrf_clock_control_lf_on>

	return 0;
}
    3226:	4620      	mov	r0, r4
    3228:	b002      	add	sp, #8
    322a:	bd70      	pop	{r4, r5, r6, pc}
    322c:	50015000 	.word	0x50015000
    3230:	2000c628 	.word	0x2000c628
    3234:	e000e100 	.word	0xe000e100
    3238:	50015008 	.word	0x50015008
    323c:	2000d3b8 	.word	0x2000d3b8
    3240:	00002f39 	.word	0x00002f39
    3244:	007fffff 	.word	0x007fffff

00003248 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    3248:	4b33      	ldr	r3, [pc, #204]	; (3318 <rtc_nrf_isr+0xd0>)
{
    324a:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
    324e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3252:	079a      	lsls	r2, r3, #30
    3254:	d509      	bpl.n	326a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3256:	4b31      	ldr	r3, [pc, #196]	; (331c <rtc_nrf_isr+0xd4>)
    3258:	681a      	ldr	r2, [r3, #0]
    325a:	b132      	cbz	r2, 326a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    325c:	2200      	movs	r2, #0
    325e:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    3260:	4a2f      	ldr	r2, [pc, #188]	; (3320 <rtc_nrf_isr+0xd8>)
    3262:	681b      	ldr	r3, [r3, #0]
    3264:	6813      	ldr	r3, [r2, #0]
    3266:	3301      	adds	r3, #1
    3268:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    326a:	f04f 0320 	mov.w	r3, #32
    326e:	f3ef 8211 	mrs	r2, BASEPRI
    3272:	f383 8812 	msr	BASEPRI_MAX, r3
    3276:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    327a:	4b27      	ldr	r3, [pc, #156]	; (3318 <rtc_nrf_isr+0xd0>)
    327c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3280:	03db      	lsls	r3, r3, #15
    3282:	d50d      	bpl.n	32a0 <rtc_nrf_isr+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3284:	4b27      	ldr	r3, [pc, #156]	; (3324 <rtc_nrf_isr+0xdc>)
    3286:	e8d3 1fef 	ldaex	r1, [r3]
    328a:	f021 0001 	bic.w	r0, r1, #1
    328e:	e8c3 0fe4 	stlex	r4, r0, [r3]
    3292:	2c00      	cmp	r4, #0
    3294:	d1f7      	bne.n	3286 <rtc_nrf_isr+0x3e>
    3296:	4b24      	ldr	r3, [pc, #144]	; (3328 <rtc_nrf_isr+0xe0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3298:	2900      	cmp	r1, #0
    329a:	d135      	bne.n	3308 <rtc_nrf_isr+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    329c:	6819      	ldr	r1, [r3, #0]
		if (result) {
    329e:	bb99      	cbnz	r1, 3308 <rtc_nrf_isr+0xc0>
{
    32a0:	2300      	movs	r3, #0
	__asm__ volatile(
    32a2:	f382 8811 	msr	BASEPRI, r2
    32a6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    32aa:	b353      	cbz	r3, 3302 <rtc_nrf_isr+0xba>
		curr_time = z_nrf_rtc_timer_read();
    32ac:	f7ff fec8 	bl	3040 <z_nrf_rtc_timer_read>
    32b0:	4604      	mov	r4, r0
	__asm__ volatile(
    32b2:	f04f 0320 	mov.w	r3, #32
    32b6:	f3ef 8011 	mrs	r0, BASEPRI
    32ba:	f383 8812 	msr	BASEPRI_MAX, r3
    32be:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    32c2:	4b1a      	ldr	r3, [pc, #104]	; (332c <rtc_nrf_isr+0xe4>)
    32c4:	2200      	movs	r2, #0
    32c6:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    32ca:	4549      	cmp	r1, r9
    32cc:	bf08      	it	eq
    32ce:	4544      	cmpeq	r4, r8
    32d0:	d31f      	bcc.n	3312 <rtc_nrf_isr+0xca>
			user_context = cc_data[chan].user_context;
    32d2:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    32d6:	f04f 34ff 	mov.w	r4, #4294967295
    32da:	f04f 35ff 	mov.w	r5, #4294967295
			cc_data[chan].callback = NULL;
    32de:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    32e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    32e4:	e9c3 4502 	strd	r4, r5, [r3, #8]
    32e8:	4b0b      	ldr	r3, [pc, #44]	; (3318 <rtc_nrf_isr+0xd0>)
    32ea:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    32ee:	f380 8811 	msr	BASEPRI, r0
    32f2:	f3bf 8f6f 	isb	sy
		if (handler) {
    32f6:	b121      	cbz	r1, 3302 <rtc_nrf_isr+0xba>
			handler(chan, expire_time, user_context);
    32f8:	4642      	mov	r2, r8
    32fa:	464b      	mov	r3, r9
    32fc:	2000      	movs	r0, #0
    32fe:	9600      	str	r6, [sp, #0]
    3300:	4788      	blx	r1
}
    3302:	b002      	add	sp, #8
    3304:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3308:	2100      	movs	r1, #0
    330a:	6019      	str	r1, [r3, #0]
    330c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    330e:	2301      	movs	r3, #1
}
    3310:	e7c7      	b.n	32a2 <rtc_nrf_isr+0x5a>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3312:	4611      	mov	r1, r2
    3314:	e7eb      	b.n	32ee <rtc_nrf_isr+0xa6>
    3316:	bf00      	nop
    3318:	50015000 	.word	0x50015000
    331c:	50015104 	.word	0x50015104
    3320:	2000d3bc 	.word	0x2000d3bc
    3324:	2000d3b4 	.word	0x2000d3b4
    3328:	50015140 	.word	0x50015140
    332c:	2000c628 	.word	0x2000c628

00003330 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3330:	4b14      	ldr	r3, [pc, #80]	; (3384 <sys_clock_set_timeout+0x54>)
{
    3332:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3334:	f1b0 3fff 	cmp.w	r0, #4294967295
    3338:	bf08      	it	eq
    333a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    333c:	1e44      	subs	r4, r0, #1
    333e:	2c00      	cmp	r4, #0
    3340:	dd1d      	ble.n	337e <sys_clock_set_timeout+0x4e>
    3342:	429c      	cmp	r4, r3
    3344:	bfa8      	it	ge
    3346:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3348:	f7ff fe7a 	bl	3040 <z_nrf_rtc_timer_read>
    334c:	4b0e      	ldr	r3, [pc, #56]	; (3388 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    334e:	490f      	ldr	r1, [pc, #60]	; (338c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3350:	e9d3 2300 	ldrd	r2, r3, [r3]
    3354:	1a80      	subs	r0, r0, r2
		ticks = 0;
    3356:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    335a:	bf28      	it	cs
    335c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    335e:	3001      	adds	r0, #1
    3360:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    3362:	4808      	ldr	r0, [pc, #32]	; (3384 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3364:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    3366:	4284      	cmp	r4, r0
    3368:	bf28      	it	cs
    336a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    336c:	2000      	movs	r0, #0
    336e:	1912      	adds	r2, r2, r4
    3370:	9001      	str	r0, [sp, #4]
    3372:	f143 0300 	adc.w	r3, r3, #0
    3376:	f7ff fe85 	bl	3084 <compare_set>
}
    337a:	b002      	add	sp, #8
    337c:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    337e:	2400      	movs	r4, #0
    3380:	e7e2      	b.n	3348 <sys_clock_set_timeout+0x18>
    3382:	bf00      	nop
    3384:	007fffff 	.word	0x007fffff
    3388:	2000c638 	.word	0x2000c638
    338c:	00002f39 	.word	0x00002f39

00003390 <sys_clock_elapsed>:
{
    3390:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3392:	f7ff fe55 	bl	3040 <z_nrf_rtc_timer_read>
    3396:	4b02      	ldr	r3, [pc, #8]	; (33a0 <sys_clock_elapsed+0x10>)
    3398:	681b      	ldr	r3, [r3, #0]
}
    339a:	1ac0      	subs	r0, r0, r3
    339c:	bd08      	pop	{r3, pc}
    339e:	bf00      	nop
    33a0:	2000c638 	.word	0x2000c638

000033a4 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    33a4:	ea40 0301 	orr.w	r3, r0, r1
    33a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    33ac:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    33ae:	b98b      	cbnz	r3, 33d4 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    33b0:	f240 1515 	movw	r5, #277	; 0x115
    33b4:	4c09      	ldr	r4, [pc, #36]	; (33dc <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    33b6:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    33b8:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    33bc:	4299      	cmp	r1, r3
    33be:	d101      	bne.n	33c4 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    33c0:	2000      	movs	r0, #0
}
    33c2:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    33c4:	18c2      	adds	r2, r0, r3
    33c6:	b2d2      	uxtb	r2, r2
    33c8:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    33cc:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    33d0:	3301      	adds	r3, #1
    33d2:	e7f3      	b.n	33bc <fprotect_area+0x18>
		return -EINVAL;
    33d4:	f06f 0015 	mvn.w	r0, #21
    33d8:	e7f3      	b.n	33c2 <fprotect_area+0x1e>
    33da:	bf00      	nop
    33dc:	50003000 	.word	0x50003000

000033e0 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    33e0:	4803      	ldr	r0, [pc, #12]	; (33f0 <k_sys_fatal_error_handler+0x10>)
    33e2:	2145      	movs	r1, #69	; 0x45
{
    33e4:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    33e6:	f002 fff0 	bl	63ca <z_log_minimal_printk>
		sys_arch_reboot(0);
    33ea:	2000      	movs	r0, #0
    33ec:	f7fe fec8 	bl	2180 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    33f0:	00007c87 	.word	0x00007c87

000033f4 <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    33f4:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    33f6:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    33f8:	4a04      	ldr	r2, [pc, #16]	; (340c <boot_write_magic+0x18>)
    33fa:	2310      	movs	r3, #16
    33fc:	3910      	subs	r1, #16
    33fe:	f003 f80e 	bl	641e <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    3402:	3800      	subs	r0, #0
    3404:	bf18      	it	ne
    3406:	2001      	movne	r0, #1
    3408:	bd08      	pop	{r3, pc}
    340a:	bf00      	nop
    340c:	0000704c 	.word	0x0000704c

00003410 <boot_read_swap_state>:
{
    3410:	b530      	push	{r4, r5, lr}
    3412:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3414:	6881      	ldr	r1, [r0, #8]
{
    3416:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3418:	2310      	movs	r3, #16
    341a:	aa02      	add	r2, sp, #8
    341c:	3910      	subs	r1, #16
{
    341e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3420:	f002 ffe1 	bl	63e6 <flash_area_read>
    if (rc < 0) {
    3424:	2800      	cmp	r0, #0
    3426:	db11      	blt.n	344c <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    3428:	2210      	movs	r2, #16
    342a:	4628      	mov	r0, r5
    342c:	a902      	add	r1, sp, #8
    342e:	f003 fa8e 	bl	694e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3432:	b168      	cbz	r0, 3450 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    3434:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    3436:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    3438:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    343a:	2301      	movs	r3, #1
    343c:	4628      	mov	r0, r5
    343e:	f10d 0207 	add.w	r2, sp, #7
    3442:	3928      	subs	r1, #40	; 0x28
    3444:	f002 ffcf 	bl	63e6 <flash_area_read>
    if (rc < 0) {
    3448:	2800      	cmp	r0, #0
    344a:	da0b      	bge.n	3464 <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    344c:	2001      	movs	r0, #1
    344e:	e02a      	b.n	34a6 <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    3450:	2210      	movs	r2, #16
    3452:	4916      	ldr	r1, [pc, #88]	; (34ac <boot_read_swap_state+0x9c>)
    3454:	a802      	add	r0, sp, #8
    3456:	f003 f8a0 	bl	659a <memcmp>
    345a:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    345c:	bf14      	ite	ne
    345e:	2302      	movne	r3, #2
    3460:	2301      	moveq	r3, #1
    3462:	e7e8      	b.n	3436 <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3464:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3468:	4628      	mov	r0, r5
    346a:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    346e:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3470:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    3472:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    3474:	2201      	movs	r2, #1
    3476:	f10d 0107 	add.w	r1, sp, #7
    347a:	f003 fa68 	bl	694e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    347e:	b910      	cbnz	r0, 3486 <boot_read_swap_state+0x76>
    3480:	7863      	ldrb	r3, [r4, #1]
    3482:	2b04      	cmp	r3, #4
    3484:	d903      	bls.n	348e <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    3486:	2301      	movs	r3, #1
    3488:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    348a:	2300      	movs	r3, #0
    348c:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    348e:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3490:	4628      	mov	r0, r5
    3492:	3a20      	subs	r2, #32
    3494:	1ca1      	adds	r1, r4, #2
    3496:	f003 fa82 	bl	699e <boot_read_flag>
    if (rc) {
    349a:	2800      	cmp	r0, #0
    349c:	d1d6      	bne.n	344c <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    349e:	4628      	mov	r0, r5
    34a0:	1ce1      	adds	r1, r4, #3
    34a2:	f003 fad7 	bl	6a54 <boot_read_image_ok>
}
    34a6:	b007      	add	sp, #28
    34a8:	bd30      	pop	{r4, r5, pc}
    34aa:	bf00      	nop
    34ac:	0000704c 	.word	0x0000704c

000034b0 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    34b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    34b4:	b085      	sub	sp, #20
    34b6:	4605      	mov	r5, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    34b8:	4669      	mov	r1, sp
    34ba:	2003      	movs	r0, #3
    34bc:	f003 face 	bl	6a5c <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    34c0:	4604      	mov	r4, r0
    34c2:	b118      	cbz	r0, 34cc <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    34c4:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    34c6:	b005      	add	sp, #20
    34c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    34cc:	2007      	movs	r0, #7
    34ce:	a902      	add	r1, sp, #8
    34d0:	f003 fac4 	bl	6a5c <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    34d4:	2801      	cmp	r0, #1
    34d6:	d138      	bne.n	354a <boot_swap_type_multi+0x9a>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    34d8:	462a      	mov	r2, r5
    34da:	2149      	movs	r1, #73	; 0x49
    34dc:	4828      	ldr	r0, [pc, #160]	; (3580 <boot_swap_type_multi+0xd0>)
    34de:	f002 ff74 	bl	63ca <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    34e2:	4b28      	ldr	r3, [pc, #160]	; (3584 <boot_swap_type_multi+0xd4>)
        secondary_slot.image_num = 0;
    34e4:	f88d 400c 	strb.w	r4, [sp, #12]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    34e8:	9302      	str	r3, [sp, #8]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    34ea:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    34ec:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    34f0:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    34f4:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    34f8:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    34fc:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3500:	4c21      	ldr	r4, [pc, #132]	; (3588 <boot_swap_type_multi+0xd8>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3502:	4629      	mov	r1, r5
    3504:	7820      	ldrb	r0, [r4, #0]
    3506:	f003 fa36 	bl	6976 <boot_magic_compatible_check>
    350a:	b318      	cbz	r0, 3554 <boot_swap_type_multi+0xa4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    350c:	4631      	mov	r1, r6
    350e:	7860      	ldrb	r0, [r4, #1]
    3510:	f003 fa31 	bl	6976 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3514:	b1f0      	cbz	r0, 3554 <boot_swap_type_multi+0xa4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3516:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    3518:	2b04      	cmp	r3, #4
    351a:	d001      	beq.n	3520 <boot_swap_type_multi+0x70>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    351c:	42bb      	cmp	r3, r7
    351e:	d119      	bne.n	3554 <boot_swap_type_multi+0xa4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3520:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3522:	2b04      	cmp	r3, #4
    3524:	d001      	beq.n	352a <boot_swap_type_multi+0x7a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3526:	4543      	cmp	r3, r8
    3528:	d114      	bne.n	3554 <boot_swap_type_multi+0xa4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    352a:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    352c:	2b04      	cmp	r3, #4
    352e:	d10f      	bne.n	3550 <boot_swap_type_multi+0xa0>
            BOOT_LOG_INF("Swap type: %s",
    3530:	7963      	ldrb	r3, [r4, #5]
    3532:	2b02      	cmp	r3, #2
    3534:	d119      	bne.n	356a <boot_swap_type_multi+0xba>
    3536:	4a15      	ldr	r2, [pc, #84]	; (358c <boot_swap_type_multi+0xdc>)
    3538:	4815      	ldr	r0, [pc, #84]	; (3590 <boot_swap_type_multi+0xe0>)
    353a:	2149      	movs	r1, #73	; 0x49
    353c:	f002 ff45 	bl	63ca <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    3540:	7960      	ldrb	r0, [r4, #5]
    3542:	1e83      	subs	r3, r0, #2
    3544:	2b02      	cmp	r3, #2
    3546:	d9be      	bls.n	34c6 <boot_swap_type_multi+0x16>
    3548:	e7bc      	b.n	34c4 <boot_swap_type_multi+0x14>
    } else if (rc) {
    354a:	2800      	cmp	r0, #0
    354c:	d0cd      	beq.n	34ea <boot_swap_type_multi+0x3a>
    354e:	e7b9      	b.n	34c4 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    3550:	454b      	cmp	r3, r9
    3552:	d0ed      	beq.n	3530 <boot_swap_type_multi+0x80>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    3554:	3201      	adds	r2, #1
    3556:	2a03      	cmp	r2, #3
    3558:	f104 0406 	add.w	r4, r4, #6
    355c:	d1d1      	bne.n	3502 <boot_swap_type_multi+0x52>
    BOOT_LOG_INF("Swap type: none");
    355e:	480d      	ldr	r0, [pc, #52]	; (3594 <boot_swap_type_multi+0xe4>)
    3560:	2149      	movs	r1, #73	; 0x49
    3562:	f002 ff32 	bl	63ca <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    3566:	2001      	movs	r0, #1
    3568:	e7ad      	b.n	34c6 <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    356a:	2b03      	cmp	r3, #3
    356c:	d005      	beq.n	357a <boot_swap_type_multi+0xca>
    356e:	4a0a      	ldr	r2, [pc, #40]	; (3598 <boot_swap_type_multi+0xe8>)
    3570:	490a      	ldr	r1, [pc, #40]	; (359c <boot_swap_type_multi+0xec>)
    3572:	2b04      	cmp	r3, #4
    3574:	bf18      	it	ne
    3576:	460a      	movne	r2, r1
    3578:	e7de      	b.n	3538 <boot_swap_type_multi+0x88>
    357a:	4a09      	ldr	r2, [pc, #36]	; (35a0 <boot_swap_type_multi+0xf0>)
    357c:	e7dc      	b.n	3538 <boot_swap_type_multi+0x88>
    357e:	bf00      	nop
    3580:	00007ccc 	.word	0x00007ccc
    3584:	03030103 	.word	0x03030103
    3588:	00007d3f 	.word	0x00007d3f
    358c:	00007cb0 	.word	0x00007cb0
    3590:	00007d17 	.word	0x00007d17
    3594:	00007d2a 	.word	0x00007d2a
    3598:	00007ca9 	.word	0x00007ca9
    359c:	00007cba 	.word	0x00007cba
    35a0:	00007cb5 	.word	0x00007cb5

000035a4 <nrf91_errata_14>:
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    35a4:	4a06      	ldr	r2, [pc, #24]	; (35c0 <nrf91_errata_14+0x1c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    35a6:	4b07      	ldr	r3, [pc, #28]	; (35c4 <nrf91_errata_14+0x20>)
    35a8:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    35aa:	6810      	ldr	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    35ac:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    35b0:	2b09      	cmp	r3, #9
    35b2:	d103      	bne.n	35bc <nrf91_errata_14+0x18>
            {
                switch(var2)
    35b4:	1e43      	subs	r3, r0, #1
    35b6:	4258      	negs	r0, r3
    35b8:	4158      	adcs	r0, r3
    35ba:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    35bc:	2000      	movs	r0, #0
    #endif
}
    35be:	4770      	bx	lr
    35c0:	00ff0134 	.word	0x00ff0134
    35c4:	00ff0130 	.word	0x00ff0130

000035c8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    35c8:	b508      	push	{r3, lr}
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    35ca:	4a5a      	ldr	r2, [pc, #360]	; (3734 <SystemInit+0x16c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    35cc:	4b5a      	ldr	r3, [pc, #360]	; (3738 <SystemInit+0x170>)
    35ce:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    35d0:	6812      	ldr	r2, [r2, #0]
    35d2:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    35d6:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    35d8:	bf01      	itttt	eq
    35da:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    35de:	2200      	moveq	r2, #0
    35e0:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    35e4:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    35e8:	f7ff ffdc 	bl	35a4 <nrf91_errata_14>
    35ec:	b130      	cbz	r0, 35fc <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    35ee:	2301      	movs	r3, #1
    35f0:	4a52      	ldr	r2, [pc, #328]	; (373c <SystemInit+0x174>)
    35f2:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    35f4:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    35f8:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    35fc:	4b4e      	ldr	r3, [pc, #312]	; (3738 <SystemInit+0x170>)
    35fe:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3600:	3304      	adds	r3, #4
    3602:	681b      	ldr	r3, [r3, #0]
    3604:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    3608:	2a09      	cmp	r2, #9
    360a:	d105      	bne.n	3618 <SystemInit+0x50>
            {
                switch(var2)
    360c:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    360e:	bf1e      	ittt	ne
    3610:	2201      	movne	r2, #1
    3612:	4b4b      	ldrne	r3, [pc, #300]	; (3740 <SystemInit+0x178>)
    3614:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    3618:	f7ff ffc4 	bl	35a4 <nrf91_errata_14>
    361c:	b110      	cbz	r0, 3624 <SystemInit+0x5c>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    361e:	220e      	movs	r2, #14
    3620:	4b48      	ldr	r3, [pc, #288]	; (3744 <SystemInit+0x17c>)
    3622:	601a      	str	r2, [r3, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3624:	4b44      	ldr	r3, [pc, #272]	; (3738 <SystemInit+0x170>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3626:	4a43      	ldr	r2, [pc, #268]	; (3734 <SystemInit+0x16c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3628:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    362a:	6812      	ldr	r2, [r2, #0]
    362c:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    3630:	2b09      	cmp	r3, #9
    3632:	d104      	bne.n	363e <SystemInit+0x76>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    3634:	2200      	movs	r2, #0
    3636:	4b44      	ldr	r3, [pc, #272]	; (3748 <SystemInit+0x180>)
    3638:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    363a:	2201      	movs	r2, #1
    363c:	605a      	str	r2, [r3, #4]
{
    363e:	2200      	movs	r2, #0
    3640:	00d3      	lsls	r3, r2, #3
    3642:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    3646:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    364a:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    364e:	3101      	adds	r1, #1
    3650:	d008      	beq.n	3664 <SystemInit+0x9c>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3652:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    3656:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3658:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    365c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3660:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    3662:	d1ed      	bne.n	3640 <SystemInit+0x78>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    3664:	4b39      	ldr	r3, [pc, #228]	; (374c <SystemInit+0x184>)
    3666:	69db      	ldr	r3, [r3, #28]
    3668:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    366c:	07d9      	lsls	r1, r3, #31
    366e:	d545      	bpl.n	36fc <SystemInit+0x134>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3670:	4b37      	ldr	r3, [pc, #220]	; (3750 <SystemInit+0x188>)
    3672:	4619      	mov	r1, r3
    3674:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3678:	2a01      	cmp	r2, #1
    367a:	d1fb      	bne.n	3674 <SystemInit+0xac>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    367c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3680:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    3684:	2b01      	cmp	r3, #1
    3686:	d1fb      	bne.n	3680 <SystemInit+0xb8>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    3688:	4b30      	ldr	r3, [pc, #192]	; (374c <SystemInit+0x184>)
    368a:	69da      	ldr	r2, [r3, #28]
    368c:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    3690:	07d2      	lsls	r2, r2, #31
    3692:	d50a      	bpl.n	36aa <SystemInit+0xe2>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    3694:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    3696:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    369a:	61da      	str	r2, [r3, #28]
    369c:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    36a0:	4a2b      	ldr	r2, [pc, #172]	; (3750 <SystemInit+0x188>)
    36a2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    36a6:	2b01      	cmp	r3, #1
    36a8:	d1fb      	bne.n	36a2 <SystemInit+0xda>
        uint32_t val = *word;
    36aa:	4b2a      	ldr	r3, [pc, #168]	; (3754 <SystemInit+0x18c>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    36b2:	3301      	adds	r3, #1
    36b4:	d10d      	bne.n	36d2 <SystemInit+0x10a>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    36b6:	4a25      	ldr	r2, [pc, #148]	; (374c <SystemInit+0x184>)
    36b8:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    36ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    36be:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    36c2:	6213      	str	r3, [r2, #32]
    36c4:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    36c8:	4a21      	ldr	r2, [pc, #132]	; (3750 <SystemInit+0x188>)
    36ca:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    36ce:	2b01      	cmp	r3, #1
    36d0:	d1fb      	bne.n	36ca <SystemInit+0x102>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    36d2:	2200      	movs	r2, #0
    36d4:	4b1e      	ldr	r3, [pc, #120]	; (3750 <SystemInit+0x188>)
    36d6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    36da:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    36de:	2a01      	cmp	r2, #1
    36e0:	d1fb      	bne.n	36da <SystemInit+0x112>
    36e2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    36e6:	491c      	ldr	r1, [pc, #112]	; (3758 <SystemInit+0x190>)
    36e8:	4b1c      	ldr	r3, [pc, #112]	; (375c <SystemInit+0x194>)
    36ea:	68ca      	ldr	r2, [r1, #12]
    36ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    36f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    36f2:	60cb      	str	r3, [r1, #12]
    36f4:	f3bf 8f4f 	dsb	sy
    __NOP();
    36f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    36fa:	e7fd      	b.n	36f8 <SystemInit+0x130>
        uint32_t val = *word;
    36fc:	4b15      	ldr	r3, [pc, #84]	; (3754 <SystemInit+0x18c>)
    36fe:	681b      	ldr	r3, [r3, #0]
    3700:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    3704:	3301      	adds	r3, #1
    3706:	d0b3      	beq.n	3670 <SystemInit+0xa8>
        SCB->NSACR |= (3UL << 10);
    3708:	4b13      	ldr	r3, [pc, #76]	; (3758 <SystemInit+0x190>)
    370a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    370e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    3712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    3716:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    371a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    371e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3722:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3726:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    372a:	4b0d      	ldr	r3, [pc, #52]	; (3760 <SystemInit+0x198>)
    372c:	4a0d      	ldr	r2, [pc, #52]	; (3764 <SystemInit+0x19c>)
    372e:	601a      	str	r2, [r3, #0]
}
    3730:	bd08      	pop	{r3, pc}
    3732:	bf00      	nop
    3734:	00ff0134 	.word	0x00ff0134
    3738:	00ff0130 	.word	0x00ff0130
    373c:	50004a38 	.word	0x50004a38
    3740:	50004000 	.word	0x50004000
    3744:	5003aee4 	.word	0x5003aee4
    3748:	5000470c 	.word	0x5000470c
    374c:	00ff8000 	.word	0x00ff8000
    3750:	50039000 	.word	0x50039000
    3754:	00ff8020 	.word	0x00ff8020
    3758:	e000ed00 	.word	0xe000ed00
    375c:	05fa0004 	.word	0x05fa0004
    3760:	2000c53c 	.word	0x2000c53c
    3764:	03d09000 	.word	0x03d09000

00003768 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3768:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    376a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    376c:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    376e:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    3772:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    3774:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    3778:	d010      	beq.n	379c <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    377a:	fa05 f204 	lsl.w	r2, r5, r4
    377e:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3782:	e8d0 6fef 	ldaex	r6, [r0]
    3786:	429e      	cmp	r6, r3
    3788:	d104      	bne.n	3794 <nrfx_flag32_alloc+0x2c>
    378a:	e8c0 2fec 	stlex	ip, r2, [r0]
    378e:	f1bc 0f00 	cmp.w	ip, #0
    3792:	d1f6      	bne.n	3782 <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3794:	d1ea      	bne.n	376c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    3796:	4802      	ldr	r0, [pc, #8]	; (37a0 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
    3798:	700c      	strb	r4, [r1, #0]
}
    379a:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    379c:	4801      	ldr	r0, [pc, #4]	; (37a4 <nrfx_flag32_alloc+0x3c>)
    379e:	e7fc      	b.n	379a <nrfx_flag32_alloc+0x32>
    37a0:	0bad0000 	.word	0x0bad0000
    37a4:	0bad0002 	.word	0x0bad0002

000037a8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    37a8:	6803      	ldr	r3, [r0, #0]
{
    37aa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    37ac:	40cb      	lsrs	r3, r1
    37ae:	07db      	lsls	r3, r3, #31
    37b0:	d411      	bmi.n	37d6 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    37b2:	2301      	movs	r3, #1
    37b4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    37b8:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    37ba:	ea41 0203 	orr.w	r2, r1, r3
    37be:	e8d0 4fef 	ldaex	r4, [r0]
    37c2:	429c      	cmp	r4, r3
    37c4:	d104      	bne.n	37d0 <nrfx_flag32_free+0x28>
    37c6:	e8c0 2fec 	stlex	ip, r2, [r0]
    37ca:	f1bc 0f00 	cmp.w	ip, #0
    37ce:	d1f6      	bne.n	37be <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    37d0:	d1f2      	bne.n	37b8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    37d2:	4802      	ldr	r0, [pc, #8]	; (37dc <nrfx_flag32_free+0x34>)
}
    37d4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    37d6:	4802      	ldr	r0, [pc, #8]	; (37e0 <nrfx_flag32_free+0x38>)
    37d8:	e7fc      	b.n	37d4 <nrfx_flag32_free+0x2c>
    37da:	bf00      	nop
    37dc:	0bad0000 	.word	0x0bad0000
    37e0:	0bad0004 	.word	0x0bad0004

000037e4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    37e4:	4b04      	ldr	r3, [pc, #16]	; (37f8 <nrfx_clock_init+0x14>)
    37e6:	791a      	ldrb	r2, [r3, #4]
    37e8:	b922      	cbnz	r2, 37f4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    37ea:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    37ec:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    37ee:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    37f0:	4802      	ldr	r0, [pc, #8]	; (37fc <nrfx_clock_init+0x18>)
    37f2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    37f4:	4802      	ldr	r0, [pc, #8]	; (3800 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37f6:	4770      	bx	lr
    37f8:	2000d3c0 	.word	0x2000d3c0
    37fc:	0bad0000 	.word	0x0bad0000
    3800:	0bad000c 	.word	0x0bad000c

00003804 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3804:	b110      	cbz	r0, 380c <nrfx_clock_start+0x8>
    3806:	2801      	cmp	r0, #1
    3808:	d020      	beq.n	384c <nrfx_clock_start+0x48>
    380a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    380c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3810:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3814:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3818:	03c9      	lsls	r1, r1, #15
    381a:	d511      	bpl.n	3840 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    381c:	f003 0303 	and.w	r3, r3, #3
    3820:	2b02      	cmp	r3, #2
    3822:	d10d      	bne.n	3840 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3824:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3828:	2200      	movs	r2, #0
    382a:	4b0d      	ldr	r3, [pc, #52]	; (3860 <nrfx_clock_start+0x5c>)
    382c:	601a      	str	r2, [r3, #0]
    382e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3830:	2202      	movs	r2, #2
    3832:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3836:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    383a:	2201      	movs	r2, #1
    383c:	609a      	str	r2, [r3, #8]
}
    383e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    3840:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3844:	2201      	movs	r2, #1
    3846:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    384a:	e7ed      	b.n	3828 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    384c:	2200      	movs	r2, #0
    384e:	4b05      	ldr	r3, [pc, #20]	; (3864 <nrfx_clock_start+0x60>)
    3850:	601a      	str	r2, [r3, #0]
    3852:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3854:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3858:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    385c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    385e:	4770      	bx	lr
    3860:	50005104 	.word	0x50005104
    3864:	50005100 	.word	0x50005100

00003868 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    3868:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    386a:	b110      	cbz	r0, 3872 <nrfx_clock_stop+0xa>
    386c:	2801      	cmp	r0, #1
    386e:	d018      	beq.n	38a2 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3870:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    3872:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3876:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3878:	2101      	movs	r1, #1
    387a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    387e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    3880:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3884:	4a15      	ldr	r2, [pc, #84]	; (38dc <nrfx_clock_stop+0x74>)
    3886:	6010      	str	r0, [r2, #0]
    3888:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    388a:	4a15      	ldr	r2, [pc, #84]	; (38e0 <nrfx_clock_stop+0x78>)
    388c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    388e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3892:	03db      	lsls	r3, r3, #15
    3894:	d5ec      	bpl.n	3870 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3896:	2001      	movs	r0, #1
    3898:	f003 f904 	bl	6aa4 <nrfx_busy_wait>
    389c:	3d01      	subs	r5, #1
    389e:	d1f6      	bne.n	388e <nrfx_clock_stop+0x26>
    38a0:	e7e6      	b.n	3870 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    38a2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38a6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38a8:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38ac:	4b0d      	ldr	r3, [pc, #52]	; (38e4 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    38ae:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38b2:	601a      	str	r2, [r3, #0]
    38b4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38b6:	4b0c      	ldr	r3, [pc, #48]	; (38e8 <nrfx_clock_stop+0x80>)
    38b8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    38ba:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    38be:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    38c2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    38c6:	03d2      	lsls	r2, r2, #15
    38c8:	d5d2      	bpl.n	3870 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    38ca:	2b00      	cmp	r3, #0
    38cc:	d0d0      	beq.n	3870 <nrfx_clock_stop+0x8>
    38ce:	2001      	movs	r0, #1
    38d0:	f003 f8e8 	bl	6aa4 <nrfx_busy_wait>
    38d4:	3d01      	subs	r5, #1
    38d6:	d1f0      	bne.n	38ba <nrfx_clock_stop+0x52>
    38d8:	e7ca      	b.n	3870 <nrfx_clock_stop+0x8>
    38da:	bf00      	nop
    38dc:	50005104 	.word	0x50005104
    38e0:	5000500c 	.word	0x5000500c
    38e4:	50005100 	.word	0x50005100
    38e8:	50005004 	.word	0x50005004

000038ec <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38ec:	4b16      	ldr	r3, [pc, #88]	; (3948 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    38ee:	b510      	push	{r4, lr}
    38f0:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    38f2:	b152      	cbz	r2, 390a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38f4:	2000      	movs	r0, #0
    38f6:	6018      	str	r0, [r3, #0]
    38f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    38fa:	2201      	movs	r2, #1
    38fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3900:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3904:	4b11      	ldr	r3, [pc, #68]	; (394c <nrfx_power_clock_irq_handler+0x60>)
    3906:	681b      	ldr	r3, [r3, #0]
    3908:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    390a:	4b11      	ldr	r3, [pc, #68]	; (3950 <nrfx_power_clock_irq_handler+0x64>)
    390c:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    390e:	b18a      	cbz	r2, 3934 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3910:	2200      	movs	r2, #0
    3912:	601a      	str	r2, [r3, #0]
    3914:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3916:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    391a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    391e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3922:	f002 0203 	and.w	r2, r2, #3
    3926:	2a01      	cmp	r2, #1
    3928:	f04f 0102 	mov.w	r1, #2
    392c:	d103      	bne.n	3936 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    392e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3932:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3934:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    3936:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    393a:	4b04      	ldr	r3, [pc, #16]	; (394c <nrfx_power_clock_irq_handler+0x60>)
    393c:	2001      	movs	r0, #1
}
    393e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3942:	681b      	ldr	r3, [r3, #0]
    3944:	4718      	bx	r3
    3946:	bf00      	nop
    3948:	50005100 	.word	0x50005100
    394c:	2000d3c0 	.word	0x2000d3c0
    3950:	50005104 	.word	0x50005104

00003954 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    3954:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    3956:	4801      	ldr	r0, [pc, #4]	; (395c <nrfx_dppi_channel_alloc+0x8>)
    3958:	f7ff bf06 	b.w	3768 <nrfx_flag32_alloc>
    395c:	2000c540 	.word	0x2000c540

00003960 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3960:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3962:	4c0d      	ldr	r4, [pc, #52]	; (3998 <call_handler+0x38>)
    3964:	f100 0308 	add.w	r3, r0, #8
    3968:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    396c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    396e:	05da      	lsls	r2, r3, #23
{
    3970:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3972:	d507      	bpl.n	3984 <call_handler+0x24>
    3974:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3978:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    397c:	6852      	ldr	r2, [r2, #4]
    397e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3982:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3984:	68a3      	ldr	r3, [r4, #8]
    3986:	b12b      	cbz	r3, 3994 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3988:	4631      	mov	r1, r6
    398a:	4628      	mov	r0, r5
    398c:	68e2      	ldr	r2, [r4, #12]
    }
}
    398e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3992:	4718      	bx	r3
}
    3994:	bd70      	pop	{r4, r5, r6, pc}
    3996:	bf00      	nop
    3998:	2000c544 	.word	0x2000c544

0000399c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    399c:	4b13      	ldr	r3, [pc, #76]	; (39ec <release_handler+0x50>)
    399e:	3008      	adds	r0, #8
    39a0:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
    39a4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    39a6:	05d1      	lsls	r1, r2, #23
    39a8:	d51c      	bpl.n	39e4 <release_handler+0x48>
    39aa:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    39ae:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    39b2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    39b6:	2000      	movs	r0, #0
    39b8:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    39bc:	f834 2b02 	ldrh.w	r2, [r4], #2
    39c0:	f412 7f80 	tst.w	r2, #256	; 0x100
    39c4:	d003      	beq.n	39ce <release_handler+0x32>
    39c6:	f3c2 2243 	ubfx	r2, r2, #9, #4
    39ca:	4291      	cmp	r1, r2
    39cc:	d00a      	beq.n	39e4 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    39ce:	3001      	adds	r0, #1
    39d0:	2820      	cmp	r0, #32
    39d2:	d1f3      	bne.n	39bc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    39d4:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    39d6:	4806      	ldr	r0, [pc, #24]	; (39f0 <release_handler+0x54>)
}
    39d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
    39dc:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    39e0:	f7ff bee2 	b.w	37a8 <nrfx_flag32_free>
}
    39e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    39e8:	4770      	bx	lr
    39ea:	bf00      	nop
    39ec:	2000c544 	.word	0x2000c544
    39f0:	2000c598 	.word	0x2000c598

000039f4 <pin_handler_trigger_uninit>:
{
    39f4:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    39f6:	4c0c      	ldr	r4, [pc, #48]	; (3a28 <pin_handler_trigger_uninit+0x34>)
    39f8:	f100 0508 	add.w	r5, r0, #8
    39fc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    3a00:	069a      	lsls	r2, r3, #26
    3a02:	d50a      	bpl.n	3a1a <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3a04:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3a06:	0b5b      	lsrs	r3, r3, #13
    3a08:	009b      	lsls	r3, r3, #2
    3a0a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3a0e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3a12:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3a16:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
    3a1a:	f7ff ffbf 	bl	399c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3a1e:	2300      	movs	r3, #0
    3a20:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3a24:	bd38      	pop	{r3, r4, r5, pc}
    3a26:	bf00      	nop
    3a28:	2000c544 	.word	0x2000c544

00003a2c <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3a2c:	4a06      	ldr	r2, [pc, #24]	; (3a48 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    3a2e:	f000 001f 	and.w	r0, r0, #31
    3a32:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3a36:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    3a3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3a3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    3a42:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    3a46:	4770      	bx	lr
    3a48:	50842500 	.word	0x50842500

00003a4c <nrfx_gpiote_input_configure>:
{
    3a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a4e:	4604      	mov	r4, r0
    if (p_input_config)
    3a50:	b1f9      	cbz	r1, 3a92 <nrfx_gpiote_input_configure+0x46>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a52:	4f4c      	ldr	r7, [pc, #304]	; (3b84 <nrfx_gpiote_input_configure+0x138>)
    3a54:	f100 0c08 	add.w	ip, r0, #8
    3a58:	f837 001c 	ldrh.w	r0, [r7, ip, lsl #1]
        if (pin_is_task_output(pin))
    3a5c:	f000 0522 	and.w	r5, r0, #34	; 0x22
    3a60:	2d22      	cmp	r5, #34	; 0x22
    3a62:	d102      	bne.n	3a6a <nrfx_gpiote_input_configure+0x1e>
            return NRFX_ERROR_INVALID_PARAM;
    3a64:	4848      	ldr	r0, [pc, #288]	; (3b88 <nrfx_gpiote_input_configure+0x13c>)
}
    3a66:	b003      	add	sp, #12
    3a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3a6a:	4d48      	ldr	r5, [pc, #288]	; (3b8c <nrfx_gpiote_input_configure+0x140>)
    *p_pin = pin_number & 0x1F;
    3a6c:	f004 061f 	and.w	r6, r4, #31
    3a70:	eb05 0686 	add.w	r6, r5, r6, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3a74:	f8d6 5200 	ldr.w	r5, [r6, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3a78:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    3a7a:	f025 050f 	bic.w	r5, r5, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3a7e:	f020 0002 	bic.w	r0, r0, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3a82:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3a86:	f040 0001 	orr.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf;
    3a8a:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    3a8e:	f827 001c 	strh.w	r0, [r7, ip, lsl #1]
    if (p_trigger_config)
    3a92:	b192      	cbz	r2, 3aba <nrfx_gpiote_input_configure+0x6e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3a94:	483b      	ldr	r0, [pc, #236]	; (3b84 <nrfx_gpiote_input_configure+0x138>)
    3a96:	f104 0608 	add.w	r6, r4, #8
    3a9a:	f830 1016 	ldrh.w	r1, [r0, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3a9e:	7815      	ldrb	r5, [r2, #0]
        if (pin_is_output(pin))
    3aa0:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3aa2:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    3aa4:	d50c      	bpl.n	3ac0 <nrfx_gpiote_input_configure+0x74>
            if (use_evt)
    3aa6:	2a00      	cmp	r2, #0
    3aa8:	d1dc      	bne.n	3a64 <nrfx_gpiote_input_configure+0x18>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3aaa:	f830 2016 	ldrh.w	r2, [r0, r6, lsl #1]
    3aae:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3ab2:	ea42 0585 	orr.w	r5, r2, r5, lsl #2
    3ab6:	f820 5016 	strh.w	r5, [r0, r6, lsl #1]
    if (p_handler_config)
    3aba:	bbd3      	cbnz	r3, 3b32 <nrfx_gpiote_input_configure+0xe6>
    return NRFX_SUCCESS;
    3abc:	4834      	ldr	r0, [pc, #208]	; (3b90 <nrfx_gpiote_input_configure+0x144>)
    3abe:	e7d2      	b.n	3a66 <nrfx_gpiote_input_configure+0x1a>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3ac0:	f021 0120 	bic.w	r1, r1, #32
    3ac4:	04c9      	lsls	r1, r1, #19
    3ac6:	0cc9      	lsrs	r1, r1, #19
    3ac8:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
            if (use_evt)
    3acc:	2a00      	cmp	r2, #0
    3ace:	d0ec      	beq.n	3aaa <nrfx_gpiote_input_configure+0x5e>
                if (!edge)
    3ad0:	2d03      	cmp	r5, #3
    3ad2:	d8c7      	bhi.n	3a64 <nrfx_gpiote_input_configure+0x18>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3ad4:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3ad8:	4662      	mov	r2, ip
    3ada:	0092      	lsls	r2, r2, #2
    3adc:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    3ae0:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3ae4:	b925      	cbnz	r5, 3af0 <nrfx_gpiote_input_configure+0xa4>
    p_reg->CONFIG[idx] = 0;
    3ae6:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    3aea:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
#endif
}
    3aee:	e7dc      	b.n	3aaa <nrfx_gpiote_input_configure+0x5e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3af0:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3af4:	ea4f 2e04 	mov.w	lr, r4, lsl #8
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3af8:	f027 0703 	bic.w	r7, r7, #3
    3afc:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3b00:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3b04:	f40e 5ef8 	and.w	lr, lr, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3b08:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    3b0c:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    3b10:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3b14:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3b18:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3b1c:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
    3b20:	ea47 070e 	orr.w	r7, r7, lr
    3b24:	f041 0120 	orr.w	r1, r1, #32
    3b28:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    3b2c:	f820 1016 	strh.w	r1, [r0, r6, lsl #1]
    3b30:	e7bb      	b.n	3aaa <nrfx_gpiote_input_configure+0x5e>
    release_handler(pin);
    3b32:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3b34:	e9d3 6700 	ldrd	r6, r7, [r3]
    release_handler(pin);
    3b38:	f7ff ff30 	bl	399c <release_handler>
    if (!handler)
    3b3c:	2e00      	cmp	r6, #0
    3b3e:	d0bd      	beq.n	3abc <nrfx_gpiote_input_configure+0x70>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3b40:	4d10      	ldr	r5, [pc, #64]	; (3b84 <nrfx_gpiote_input_configure+0x138>)
    3b42:	682b      	ldr	r3, [r5, #0]
    3b44:	429e      	cmp	r6, r3
    3b46:	d104      	bne.n	3b52 <nrfx_gpiote_input_configure+0x106>
    3b48:	686b      	ldr	r3, [r5, #4]
    3b4a:	429f      	cmp	r7, r3
    3b4c:	d101      	bne.n	3b52 <nrfx_gpiote_input_configure+0x106>
    3b4e:	2200      	movs	r2, #0
    3b50:	e009      	b.n	3b66 <nrfx_gpiote_input_configure+0x11a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3b52:	4810      	ldr	r0, [pc, #64]	; (3b94 <nrfx_gpiote_input_configure+0x148>)
    3b54:	f10d 0107 	add.w	r1, sp, #7
    3b58:	f7ff fe06 	bl	3768 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3b5c:	4b0c      	ldr	r3, [pc, #48]	; (3b90 <nrfx_gpiote_input_configure+0x144>)
    3b5e:	4298      	cmp	r0, r3
    3b60:	d181      	bne.n	3a66 <nrfx_gpiote_input_configure+0x1a>
        handler_id = (int32_t)id;
    3b62:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    3b66:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b6a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3b6c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b6e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    3b72:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b76:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b7e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    3b82:	e79b      	b.n	3abc <nrfx_gpiote_input_configure+0x70>
    3b84:	2000c544 	.word	0x2000c544
    3b88:	0bad0004 	.word	0x0bad0004
    3b8c:	50842500 	.word	0x50842500
    3b90:	0bad0000 	.word	0x0bad0000
    3b94:	2000c598 	.word	0x2000c598

00003b98 <nrfx_gpiote_output_configure>:
{
    3b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_config)
    3b9c:	2900      	cmp	r1, #0
    3b9e:	d044      	beq.n	3c2a <nrfx_gpiote_output_configure+0x92>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ba0:	4e43      	ldr	r6, [pc, #268]	; (3cb0 <nrfx_gpiote_output_configure+0x118>)
    3ba2:	f100 0c08 	add.w	ip, r0, #8
    3ba6:	f836 501c 	ldrh.w	r5, [r6, ip, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3baa:	07ab      	lsls	r3, r5, #30
    3bac:	d404      	bmi.n	3bb8 <nrfx_gpiote_output_configure+0x20>
    3bae:	06af      	lsls	r7, r5, #26
    3bb0:	d502      	bpl.n	3bb8 <nrfx_gpiote_output_configure+0x20>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3bb2:	4840      	ldr	r0, [pc, #256]	; (3cb4 <nrfx_gpiote_output_configure+0x11c>)
}
    3bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3bb8:	f015 0f1c 	tst.w	r5, #28
    3bbc:	d002      	beq.n	3bc4 <nrfx_gpiote_output_configure+0x2c>
    3bbe:	784b      	ldrb	r3, [r1, #1]
    3bc0:	2b01      	cmp	r3, #1
    3bc2:	d0f6      	beq.n	3bb2 <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3bc4:	4b3c      	ldr	r3, [pc, #240]	; (3cb8 <nrfx_gpiote_output_configure+0x120>)
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3bc6:	f111 0e01 	adds.w	lr, r1, #1
    *p_pin = pin_number & 0x1F;
    3bca:	f000 071f 	and.w	r7, r0, #31
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3bce:	bf14      	ite	ne
    3bd0:	2402      	movne	r4, #2
    3bd2:	2400      	moveq	r4, #0
    3bd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3bd8:	1c8b      	adds	r3, r1, #2
    3bda:	bf14      	ite	ne
    3bdc:	f04f 090c 	movne.w	r9, #12
    3be0:	f04f 0900 	moveq.w	r9, #0
    3be4:	ea44 0409 	orr.w	r4, r4, r9
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3be8:	f8d7 8200 	ldr.w	r8, [r7, #512]	; 0x200
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3bec:	f444 64e0 	orr.w	r4, r4, #1792	; 0x700
    3bf0:	f044 0401 	orr.w	r4, r4, #1
    cnf &= ~to_update;
    3bf4:	ea28 0804 	bic.w	r8, r8, r4
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3bf8:	f1be 0f00 	cmp.w	lr, #0
    3bfc:	d003      	beq.n	3c06 <nrfx_gpiote_output_configure+0x6e>
    3bfe:	f891 e001 	ldrb.w	lr, [r1, #1]
    3c02:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3c06:	b10b      	cbz	r3, 3c0c <nrfx_gpiote_output_configure+0x74>
    3c08:	788c      	ldrb	r4, [r1, #2]
    3c0a:	00a3      	lsls	r3, r4, #2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3c0c:	7809      	ldrb	r1, [r1, #0]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3c0e:	f045 0503 	orr.w	r5, r5, #3
    3c12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    3c16:	ea43 0308 	orr.w	r3, r3, r8
    3c1a:	ea43 030e 	orr.w	r3, r3, lr
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3c1e:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    3c22:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    3c26:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
    if (p_task_config)
    3c2a:	b90a      	cbnz	r2, 3c30 <nrfx_gpiote_output_configure+0x98>
    return NRFX_SUCCESS;
    3c2c:	4823      	ldr	r0, [pc, #140]	; (3cbc <nrfx_gpiote_output_configure+0x124>)
    3c2e:	e7c1      	b.n	3bb4 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3c30:	4d1f      	ldr	r5, [pc, #124]	; (3cb0 <nrfx_gpiote_output_configure+0x118>)
    3c32:	f100 0608 	add.w	r6, r0, #8
    3c36:	f835 4016 	ldrh.w	r4, [r5, r6, lsl #1]
        if (pin_is_input(pin))
    3c3a:	07a3      	lsls	r3, r4, #30
    3c3c:	d5b9      	bpl.n	3bb2 <nrfx_gpiote_output_configure+0x1a>
    p_reg->CONFIG[idx] = 0;
    3c3e:	2300      	movs	r3, #0
        uint32_t ch = p_task_config->task_ch;
    3c40:	7817      	ldrb	r7, [r2, #0]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3c42:	f024 0420 	bic.w	r4, r4, #32
    3c46:	00b9      	lsls	r1, r7, #2
    3c48:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3c4c:	04e4      	lsls	r4, r4, #19
    3c4e:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3c52:	0ce4      	lsrs	r4, r4, #19
    3c54:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3c58:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3c5c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3c60:	f892 c001 	ldrb.w	ip, [r2, #1]
    3c64:	f1bc 0f00 	cmp.w	ip, #0
    3c68:	d0e0      	beq.n	3c2c <nrfx_gpiote_output_configure+0x94>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3c6a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3c6e:	7892      	ldrb	r2, [r2, #2]
    3c70:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3c74:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3c78:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c7c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3c80:	0203      	lsls	r3, r0, #8
    3c82:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3c86:	ea4f 400c 	mov.w	r0, ip, lsl #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c8a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3c8e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3c92:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c94:	4303      	orrs	r3, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3c96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3c9a:	ea44 3447 	orr.w	r4, r4, r7, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c9e:	4313      	orrs	r3, r2
    3ca0:	f044 0420 	orr.w	r4, r4, #32
    3ca4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3ca8:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
    3cac:	e7be      	b.n	3c2c <nrfx_gpiote_output_configure+0x94>
    3cae:	bf00      	nop
    3cb0:	2000c544 	.word	0x2000c544
    3cb4:	0bad0004 	.word	0x0bad0004
    3cb8:	50842500 	.word	0x50842500
    3cbc:	0bad0000 	.word	0x0bad0000

00003cc0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3cc0:	4b01      	ldr	r3, [pc, #4]	; (3cc8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3cc2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3cc6:	4770      	bx	lr
    3cc8:	2000c544 	.word	0x2000c544

00003ccc <nrfx_gpiote_channel_get>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3ccc:	4b05      	ldr	r3, [pc, #20]	; (3ce4 <nrfx_gpiote_channel_get+0x18>)
    3cce:	3008      	adds	r0, #8
    3cd0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    if (pin_in_use_by_te(pin))
    3cd4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3cd6:	bf43      	ittte	mi
    3cd8:	0b5b      	lsrmi	r3, r3, #13
        return NRFX_SUCCESS;
    3cda:	4803      	ldrmi	r0, [pc, #12]	; (3ce8 <nrfx_gpiote_channel_get+0x1c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3cdc:	700b      	strbmi	r3, [r1, #0]
        return NRFX_ERROR_INVALID_PARAM;
    3cde:	4803      	ldrpl	r0, [pc, #12]	; (3cec <nrfx_gpiote_channel_get+0x20>)
}
    3ce0:	4770      	bx	lr
    3ce2:	bf00      	nop
    3ce4:	2000c544 	.word	0x2000c544
    3ce8:	0bad0000 	.word	0x0bad0000
    3cec:	0bad0004 	.word	0x0bad0004

00003cf0 <nrfx_gpiote_init>:
{
    3cf0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3cf2:	4c0e      	ldr	r4, [pc, #56]	; (3d2c <nrfx_gpiote_init+0x3c>)
    3cf4:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3cf8:	b9b5      	cbnz	r5, 3d28 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3cfa:	2240      	movs	r2, #64	; 0x40
    3cfc:	4629      	mov	r1, r5
    3cfe:	f104 0010 	add.w	r0, r4, #16
    3d02:	f002 fc65 	bl	65d0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3d06:	200d      	movs	r0, #13
    3d08:	f7fd ff6a 	bl	1be0 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3d0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d10:	4b07      	ldr	r3, [pc, #28]	; (3d30 <nrfx_gpiote_init+0x40>)
    return err_code;
    3d12:	4808      	ldr	r0, [pc, #32]	; (3d34 <nrfx_gpiote_init+0x44>)
    3d14:	601d      	str	r5, [r3, #0]
    3d16:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3d18:	4b07      	ldr	r3, [pc, #28]	; (3d38 <nrfx_gpiote_init+0x48>)
    3d1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3d1e:	2301      	movs	r3, #1
    3d20:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3d24:	6563      	str	r3, [r4, #84]	; 0x54
}
    3d26:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3d28:	4804      	ldr	r0, [pc, #16]	; (3d3c <nrfx_gpiote_init+0x4c>)
    3d2a:	e7fc      	b.n	3d26 <nrfx_gpiote_init+0x36>
    3d2c:	2000c544 	.word	0x2000c544
    3d30:	5000d17c 	.word	0x5000d17c
    3d34:	0bad0000 	.word	0x0bad0000
    3d38:	5000d000 	.word	0x5000d000
    3d3c:	0bad0005 	.word	0x0bad0005

00003d40 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3d40:	4b03      	ldr	r3, [pc, #12]	; (3d50 <nrfx_gpiote_is_init+0x10>)
    3d42:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3d46:	3800      	subs	r0, #0
    3d48:	bf18      	it	ne
    3d4a:	2001      	movne	r0, #1
    3d4c:	4770      	bx	lr
    3d4e:	bf00      	nop
    3d50:	2000c544 	.word	0x2000c544

00003d54 <nrfx_gpiote_channel_free>:
{
    3d54:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3d56:	4801      	ldr	r0, [pc, #4]	; (3d5c <nrfx_gpiote_channel_free+0x8>)
    3d58:	f7ff bd26 	b.w	37a8 <nrfx_flag32_free>
    3d5c:	2000c594 	.word	0x2000c594

00003d60 <nrfx_gpiote_channel_alloc>:
{
    3d60:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3d62:	4801      	ldr	r0, [pc, #4]	; (3d68 <nrfx_gpiote_channel_alloc+0x8>)
    3d64:	f7ff bd00 	b.w	3768 <nrfx_flag32_alloc>
    3d68:	2000c594 	.word	0x2000c594

00003d6c <nrfx_gpiote_trigger_enable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3d6c:	4b1e      	ldr	r3, [pc, #120]	; (3de8 <nrfx_gpiote_trigger_enable+0x7c>)
    3d6e:	f100 0208 	add.w	r2, r0, #8
    3d72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3d76:	b410      	push	{r4}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d78:	069a      	lsls	r2, r3, #26
    3d7a:	d51e      	bpl.n	3dba <nrfx_gpiote_trigger_enable+0x4e>
    3d7c:	f013 0402 	ands.w	r4, r3, #2
    3d80:	d11b      	bne.n	3dba <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d82:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3d84:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3d86:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    3d8a:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    3d8e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d92:	6004      	str	r4, [r0, #0]
    3d94:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3d98:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3d9a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3d9e:	f040 0001 	orr.w	r0, r0, #1
    3da2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3da6:	b129      	cbz	r1, 3db4 <nrfx_gpiote_trigger_enable+0x48>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3da8:	2201      	movs	r2, #1
    3daa:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3dae:	4a0f      	ldr	r2, [pc, #60]	; (3dec <nrfx_gpiote_trigger_enable+0x80>)
    3db0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3db4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3db8:	4770      	bx	lr
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3dba:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3dbe:	2b04      	cmp	r3, #4
    3dc0:	d00d      	beq.n	3dde <nrfx_gpiote_trigger_enable+0x72>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3dc2:	2b05      	cmp	r3, #5
    3dc4:	d00d      	beq.n	3de2 <nrfx_gpiote_trigger_enable+0x76>
    return p_reg->IN;
    3dc6:	4b0a      	ldr	r3, [pc, #40]	; (3df0 <nrfx_gpiote_trigger_enable+0x84>)
    3dc8:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    3dca:	f000 031f 	and.w	r3, r0, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3dce:	40d9      	lsrs	r1, r3
    3dd0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3dd4:	3102      	adds	r1, #2
}
    3dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3dda:	f7ff be27 	b.w	3a2c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3dde:	2103      	movs	r1, #3
    3de0:	e7f9      	b.n	3dd6 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3de2:	2102      	movs	r1, #2
    3de4:	e7f7      	b.n	3dd6 <nrfx_gpiote_trigger_enable+0x6a>
    3de6:	bf00      	nop
    3de8:	2000c544 	.word	0x2000c544
    3dec:	5000d000 	.word	0x5000d000
    3df0:	50842500 	.word	0x50842500

00003df4 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3df4:	4b0e      	ldr	r3, [pc, #56]	; (3e30 <nrfx_gpiote_trigger_disable+0x3c>)
    3df6:	f100 0208 	add.w	r2, r0, #8
    3dfa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3dfe:	0699      	lsls	r1, r3, #26
    3e00:	d513      	bpl.n	3e2a <nrfx_gpiote_trigger_disable+0x36>
    3e02:	079a      	lsls	r2, r3, #30
    3e04:	d411      	bmi.n	3e2a <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3e06:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e08:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3e0a:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3e0c:	4909      	ldr	r1, [pc, #36]	; (3e34 <nrfx_gpiote_trigger_disable+0x40>)
    3e0e:	009b      	lsls	r3, r3, #2
    3e10:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3e14:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3e18:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3e1c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3e20:	f022 0203 	bic.w	r2, r2, #3
    3e24:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3e28:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3e2a:	2100      	movs	r1, #0
    3e2c:	f7ff bdfe 	b.w	3a2c <nrf_gpio_cfg_sense_set>
    3e30:	2000c544 	.word	0x2000c544
    3e34:	5000d000 	.word	0x5000d000

00003e38 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3e38:	4b0c      	ldr	r3, [pc, #48]	; (3e6c <nrfx_gpiote_pin_uninit+0x34>)
    3e3a:	f100 0208 	add.w	r2, r0, #8
    3e3e:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
    3e42:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    3e44:	07db      	lsls	r3, r3, #31
{
    3e46:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3e48:	d50d      	bpl.n	3e66 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    3e4a:	f7ff ffd3 	bl	3df4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3e4e:	4620      	mov	r0, r4
    3e50:	f7ff fdd0 	bl	39f4 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3e54:	2202      	movs	r2, #2
    3e56:	4b06      	ldr	r3, [pc, #24]	; (3e70 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    3e58:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    3e5c:	3480      	adds	r4, #128	; 0x80
    3e5e:	4805      	ldr	r0, [pc, #20]	; (3e74 <nrfx_gpiote_pin_uninit+0x3c>)
    3e60:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    3e64:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3e66:	4804      	ldr	r0, [pc, #16]	; (3e78 <nrfx_gpiote_pin_uninit+0x40>)
    3e68:	e7fc      	b.n	3e64 <nrfx_gpiote_pin_uninit+0x2c>
    3e6a:	bf00      	nop
    3e6c:	2000c544 	.word	0x2000c544
    3e70:	50842500 	.word	0x50842500
    3e74:	0bad0000 	.word	0x0bad0000
    3e78:	0bad0004 	.word	0x0bad0004

00003e7c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3e80:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3e82:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e84:	4634      	mov	r4, r6
{
    3e86:	4b4b      	ldr	r3, [pc, #300]	; (3fb4 <nrfx_gpiote_irq_handler+0x138>)
    return p_reg->INTENSET & mask;
    3e88:	484b      	ldr	r0, [pc, #300]	; (3fb8 <nrfx_gpiote_irq_handler+0x13c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e8a:	494c      	ldr	r1, [pc, #304]	; (3fbc <nrfx_gpiote_irq_handler+0x140>)
{
    3e8c:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e8e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3e90:	b135      	cbz	r5, 3ea0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3e92:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3e96:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e98:	bf1e      	ittt	ne
    3e9a:	601c      	strne	r4, [r3, #0]
    3e9c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3e9e:	4316      	orrne	r6, r2
        }
        mask <<= 1;
    3ea0:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ea2:	428b      	cmp	r3, r1
        mask <<= 1;
    3ea4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ea8:	d1f1      	bne.n	3e8e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3eaa:	4f45      	ldr	r7, [pc, #276]	; (3fc0 <nrfx_gpiote_irq_handler+0x144>)
    3eac:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3eae:	b183      	cbz	r3, 3ed2 <nrfx_gpiote_irq_handler+0x56>
        *p_masks = gpio_regs[i]->LATCH;
    3eb0:	4d44      	ldr	r5, [pc, #272]	; (3fc4 <nrfx_gpiote_irq_handler+0x148>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3eb2:	f10d 080c 	add.w	r8, sp, #12
    3eb6:	6a2b      	ldr	r3, [r5, #32]
    3eb8:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3eba:	622b      	str	r3, [r5, #32]
    3ebc:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
    3ec0:	9803      	ldr	r0, [sp, #12]
    3ec2:	b940      	cbnz	r0, 3ed6 <nrfx_gpiote_irq_handler+0x5a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ec4:	6038      	str	r0, [r7, #0]
    3ec6:	683b      	ldr	r3, [r7, #0]
        *p_masks = gpio_regs[i]->LATCH;
    3ec8:	6a2b      	ldr	r3, [r5, #32]
    3eca:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3ecc:	622b      	str	r3, [r5, #32]
        if (latch[port_idx])
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d1f4      	bne.n	3ebc <nrfx_gpiote_irq_handler+0x40>
        mask &= ~NRFX_BIT(ch);
    3ed2:	2401      	movs	r4, #1
    3ed4:	e069      	b.n	3faa <nrfx_gpiote_irq_handler+0x12e>
                uint32_t pin = NRF_CTZ(latch[i]);
    3ed6:	fa90 faa0 	rbit	sl, r0
    3eda:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ede:	4a3a      	ldr	r2, [pc, #232]	; (3fc8 <nrfx_gpiote_irq_handler+0x14c>)
    3ee0:	f10a 0308 	add.w	r3, sl, #8
    3ee4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3ee8:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    3eec:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3ef0:	fa09 f403 	lsl.w	r4, r9, r3
    3ef4:	f818 300c 	ldrb.w	r3, [r8, ip]
    3ef8:	f3c1 0282 	ubfx	r2, r1, #2, #3
    3efc:	ea23 0304 	bic.w	r3, r3, r4
    3f00:	f808 300c 	strb.w	r3, [r8, ip]
    3f04:	eb05 038a 	add.w	r3, r5, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3f08:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    3f0c:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3f0e:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3f10:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    3f14:	d518      	bpl.n	3f48 <nrfx_gpiote_irq_handler+0xcc>
        call_handler(pin, trigger);
    3f16:	4611      	mov	r1, r2
    3f18:	4650      	mov	r0, sl
    3f1a:	9301      	str	r3, [sp, #4]
    3f1c:	f7ff fd20 	bl	3960 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3f20:	9b01      	ldr	r3, [sp, #4]
    3f22:	b2e4      	uxtb	r4, r4
    3f24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3f28:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3f2c:	429c      	cmp	r4, r3
    3f2e:	d107      	bne.n	3f40 <nrfx_gpiote_irq_handler+0xc4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3f30:	2100      	movs	r1, #0
    3f32:	4650      	mov	r0, sl
    3f34:	f7ff fd7a 	bl	3a2c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3f38:	4621      	mov	r1, r4
    3f3a:	4650      	mov	r0, sl
    3f3c:	f7ff fd76 	bl	3a2c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3f40:	fa09 f00a 	lsl.w	r0, r9, sl
    3f44:	6228      	str	r0, [r5, #32]
}
    3f46:	e7bb      	b.n	3ec0 <nrfx_gpiote_irq_handler+0x44>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3f48:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3f4a:	bf0c      	ite	eq
    3f4c:	2103      	moveq	r1, #3
    3f4e:	2102      	movne	r1, #2
    3f50:	4650      	mov	r0, sl
    3f52:	9201      	str	r2, [sp, #4]
    3f54:	f7ff fd6a 	bl	3a2c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3f58:	9a01      	ldr	r2, [sp, #4]
    3f5a:	2a03      	cmp	r2, #3
    3f5c:	d004      	beq.n	3f68 <nrfx_gpiote_irq_handler+0xec>
    3f5e:	2c02      	cmp	r4, #2
    3f60:	d107      	bne.n	3f72 <nrfx_gpiote_irq_handler+0xf6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3f62:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f66:	d1eb      	bne.n	3f40 <nrfx_gpiote_irq_handler+0xc4>
            call_handler(pin, trigger);
    3f68:	4659      	mov	r1, fp
    3f6a:	4650      	mov	r0, sl
    3f6c:	f7ff fcf8 	bl	3960 <call_handler>
    3f70:	e7e6      	b.n	3f40 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3f72:	2c03      	cmp	r4, #3
    3f74:	d1e4      	bne.n	3f40 <nrfx_gpiote_irq_handler+0xc4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3f76:	f1bb 0f02 	cmp.w	fp, #2
    3f7a:	e7f4      	b.n	3f66 <nrfx_gpiote_irq_handler+0xea>
        uint32_t ch = NRF_CTZ(mask);
    3f7c:	fa96 f3a6 	rbit	r3, r6
    3f80:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3f84:	fa04 f203 	lsl.w	r2, r4, r3
    3f88:	009b      	lsls	r3, r3, #2
    3f8a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3f8e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3f92:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3f96:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3f9a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3f9e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3fa2:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3fa6:	f7ff fcdb 	bl	3960 <call_handler>
    while (mask)
    3faa:	2e00      	cmp	r6, #0
    3fac:	d1e6      	bne.n	3f7c <nrfx_gpiote_irq_handler+0x100>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3fae:	b005      	add	sp, #20
    3fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fb4:	5000d100 	.word	0x5000d100
    3fb8:	5000d000 	.word	0x5000d000
    3fbc:	5000d120 	.word	0x5000d120
    3fc0:	5000d17c 	.word	0x5000d17c
    3fc4:	50842500 	.word	0x50842500
    3fc8:	2000c544 	.word	0x2000c544

00003fcc <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    3fcc:	2200      	movs	r2, #0
    3fce:	4b03      	ldr	r3, [pc, #12]	; (3fdc <nvmc_readonly_mode_set+0x10>)
    3fd0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3fd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	50039000 	.word	0x50039000

00003fe0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3fe0:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    3fe2:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    3fe6:	b983      	cbnz	r3, 400a <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    3fe8:	2202      	movs	r2, #2
    3fea:	4b09      	ldr	r3, [pc, #36]	; (4010 <nrfx_nvmc_page_erase+0x30>)
    3fec:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3ff0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    3ff4:	f04f 32ff 	mov.w	r2, #4294967295
    3ff8:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3ffa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3ffe:	07d2      	lsls	r2, r2, #31
    4000:	d5fb      	bpl.n	3ffa <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    4002:	f7ff ffe3 	bl	3fcc <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    4006:	4803      	ldr	r0, [pc, #12]	; (4014 <nrfx_nvmc_page_erase+0x34>)
}
    4008:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    400a:	4803      	ldr	r0, [pc, #12]	; (4018 <nrfx_nvmc_page_erase+0x38>)
    400c:	e7fc      	b.n	4008 <nrfx_nvmc_page_erase+0x28>
    400e:	bf00      	nop
    4010:	50039000 	.word	0x50039000
    4014:	0bad0000 	.word	0x0bad0000
    4018:	0bad000a 	.word	0x0bad000a

0000401c <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    401c:	2201      	movs	r2, #1
    401e:	4b07      	ldr	r3, [pc, #28]	; (403c <nrfx_nvmc_word_write+0x20>)
    4020:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4024:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    4028:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    402c:	07d2      	lsls	r2, r2, #31
    402e:	d5fb      	bpl.n	4028 <nrfx_nvmc_word_write+0xc>
    *(volatile uint32_t *)addr = value;
    4030:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4032:	f3bf 8f5f 	dmb	sy

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
    4036:	f7ff bfc9 	b.w	3fcc <nvmc_readonly_mode_set>
    403a:	bf00      	nop
    403c:	50039000 	.word	0x50039000

00004040 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4040:	4b0e      	ldr	r3, [pc, #56]	; (407c <z_sys_init_run_level+0x3c>)
{
    4042:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4044:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4048:	3001      	adds	r0, #1
    404a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    404e:	42a6      	cmp	r6, r4
    4050:	d800      	bhi.n	4054 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4052:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4054:	e9d4 3500 	ldrd	r3, r5, [r4]
    4058:	4628      	mov	r0, r5
    405a:	4798      	blx	r3
		if (dev != NULL) {
    405c:	b165      	cbz	r5, 4078 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    405e:	68eb      	ldr	r3, [r5, #12]
    4060:	b130      	cbz	r0, 4070 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4062:	2800      	cmp	r0, #0
    4064:	bfb8      	it	lt
    4066:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4068:	28ff      	cmp	r0, #255	; 0xff
    406a:	bfa8      	it	ge
    406c:	20ff      	movge	r0, #255	; 0xff
    406e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4070:	785a      	ldrb	r2, [r3, #1]
    4072:	f042 0201 	orr.w	r2, r2, #1
    4076:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4078:	3408      	adds	r4, #8
    407a:	e7e8      	b.n	404e <z_sys_init_run_level+0xe>
    407c:	0000705c 	.word	0x0000705c

00004080 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    4080:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    4082:	4605      	mov	r5, r0
    4084:	b910      	cbnz	r0, 408c <z_impl_device_get_binding+0xc>
		return NULL;
    4086:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    4088:	4620      	mov	r0, r4
    408a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    408c:	7803      	ldrb	r3, [r0, #0]
    408e:	2b00      	cmp	r3, #0
    4090:	d0f9      	beq.n	4086 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    4092:	4a0f      	ldr	r2, [pc, #60]	; (40d0 <z_impl_device_get_binding+0x50>)
    4094:	4c0f      	ldr	r4, [pc, #60]	; (40d4 <z_impl_device_get_binding+0x54>)
    4096:	4616      	mov	r6, r2
    4098:	4294      	cmp	r4, r2
    409a:	d108      	bne.n	40ae <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    409c:	4c0d      	ldr	r4, [pc, #52]	; (40d4 <z_impl_device_get_binding+0x54>)
    409e:	42b4      	cmp	r4, r6
    40a0:	d0f1      	beq.n	4086 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    40a2:	4620      	mov	r0, r4
    40a4:	f002 fd15 	bl	6ad2 <z_device_ready>
    40a8:	b950      	cbnz	r0, 40c0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    40aa:	3418      	adds	r4, #24
    40ac:	e7f7      	b.n	409e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    40ae:	4620      	mov	r0, r4
    40b0:	f002 fd0f 	bl	6ad2 <z_device_ready>
    40b4:	b110      	cbz	r0, 40bc <z_impl_device_get_binding+0x3c>
    40b6:	6823      	ldr	r3, [r4, #0]
    40b8:	42ab      	cmp	r3, r5
    40ba:	d0e5      	beq.n	4088 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    40bc:	3418      	adds	r4, #24
    40be:	e7eb      	b.n	4098 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    40c0:	4628      	mov	r0, r5
    40c2:	6821      	ldr	r1, [r4, #0]
    40c4:	f002 fa5d 	bl	6582 <strcmp>
    40c8:	2800      	cmp	r0, #0
    40ca:	d1ee      	bne.n	40aa <z_impl_device_get_binding+0x2a>
    40cc:	e7dc      	b.n	4088 <z_impl_device_get_binding+0x8>
    40ce:	bf00      	nop
    40d0:	00006c28 	.word	0x00006c28
    40d4:	00006bb0 	.word	0x00006bb0

000040d8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    40d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    40da:	4604      	mov	r4, r0
    40dc:	460d      	mov	r5, r1
	__asm__ volatile(
    40de:	f04f 0320 	mov.w	r3, #32
    40e2:	f3ef 8611 	mrs	r6, BASEPRI
    40e6:	f383 8812 	msr	BASEPRI_MAX, r3
    40ea:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    40ee:	2200      	movs	r2, #0
    40f0:	2804      	cmp	r0, #4
    40f2:	bf96      	itet	ls
    40f4:	4b11      	ldrls	r3, [pc, #68]	; (413c <z_fatal_error+0x64>)
    40f6:	4b12      	ldrhi	r3, [pc, #72]	; (4140 <z_fatal_error+0x68>)
	return 0;
    40f8:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    40fc:	9200      	str	r2, [sp, #0]
    40fe:	2145      	movs	r1, #69	; 0x45
    4100:	4602      	mov	r2, r0
    4102:	4810      	ldr	r0, [pc, #64]	; (4144 <z_fatal_error+0x6c>)
    4104:	f002 f961 	bl	63ca <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4108:	b13d      	cbz	r5, 411a <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    410a:	69eb      	ldr	r3, [r5, #28]
    410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4110:	b11b      	cbz	r3, 411a <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    4112:	2145      	movs	r1, #69	; 0x45
    4114:	480c      	ldr	r0, [pc, #48]	; (4148 <z_fatal_error+0x70>)
    4116:	f002 f958 	bl	63ca <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    411a:	2200      	movs	r2, #0
    411c:	4b0b      	ldr	r3, [pc, #44]	; (414c <z_fatal_error+0x74>)
    411e:	2145      	movs	r1, #69	; 0x45
    4120:	480b      	ldr	r0, [pc, #44]	; (4150 <z_fatal_error+0x78>)
    4122:	f002 f952 	bl	63ca <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4126:	4629      	mov	r1, r5
    4128:	4620      	mov	r0, r4
    412a:	f7ff f959 	bl	33e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    412e:	f386 8811 	msr	BASEPRI, r6
    4132:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4136:	b002      	add	sp, #8
    4138:	bd70      	pop	{r4, r5, r6, pc}
    413a:	bf00      	nop
    413c:	00007070 	.word	0x00007070
    4140:	00007d51 	.word	0x00007d51
    4144:	00007d5f 	.word	0x00007d5f
    4148:	00007d8c 	.word	0x00007d8c
    414c:	00007db2 	.word	0x00007db2
    4150:	00007dba 	.word	0x00007dba

00004154 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4154:	2201      	movs	r2, #1
{
    4156:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    4158:	4b08      	ldr	r3, [pc, #32]	; (417c <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    415a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    415c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    415e:	f7ff ff6f 	bl	4040 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4162:	f000 f91b 	bl	439c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4166:	2003      	movs	r0, #3
    4168:	f7ff ff6a 	bl	4040 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    416c:	f7fc f964 	bl	438 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4170:	4a03      	ldr	r2, [pc, #12]	; (4180 <bg_thread_main+0x2c>)
    4172:	7b13      	ldrb	r3, [r2, #12]
    4174:	f023 0301 	bic.w	r3, r3, #1
    4178:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    417a:	bd08      	pop	{r3, pc}
    417c:	2000d4e6 	.word	0x2000d4e6
    4180:	2000c640 	.word	0x2000c640

00004184 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4184:	4802      	ldr	r0, [pc, #8]	; (4190 <z_bss_zero+0xc>)
    4186:	4a03      	ldr	r2, [pc, #12]	; (4194 <z_bss_zero+0x10>)
    4188:	2100      	movs	r1, #0
    418a:	1a12      	subs	r2, r2, r0
    418c:	f002 ba20 	b.w	65d0 <memset>
    4190:	2000c620 	.word	0x2000c620
    4194:	2000d4e8 	.word	0x2000d4e8

00004198 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4198:	b508      	push	{r3, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    419a:	4b19      	ldr	r3, [pc, #100]	; (4200 <z_cstart+0x68>)
	uint32_t msp =
    419c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    41a0:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    41a4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    41a8:	2500      	movs	r5, #0
    41aa:	23e0      	movs	r3, #224	; 0xe0
    41ac:	4c15      	ldr	r4, [pc, #84]	; (4204 <z_cstart+0x6c>)
    41ae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    41b2:	77e5      	strb	r5, [r4, #31]
    41b4:	7625      	strb	r5, [r4, #24]
    41b6:	7665      	strb	r5, [r4, #25]
    41b8:	76a5      	strb	r5, [r4, #26]
    41ba:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    41be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    41c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    41c4:	6263      	str	r3, [r4, #36]	; 0x24
    41c6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    41ca:	f7fd ff87 	bl	20dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    41ce:	f7fd fcbb 	bl	1b48 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    41d2:	f04f 33ff 	mov.w	r3, #4294967295
    41d6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    41d8:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    41da:	f7fe f935 	bl	2448 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    41de:	f7fe f817 	bl	2210 <z_arm_configure_static_mpu_regions>
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    41e2:	f002 fc75 	bl	6ad0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    41e6:	4628      	mov	r0, r5
    41e8:	f7ff ff2a 	bl	4040 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    41ec:	2001      	movs	r0, #1
    41ee:	f7ff ff27 	bl	4040 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    41f2:	462b      	mov	r3, r5
    41f4:	462a      	mov	r2, r5
    41f6:	4629      	mov	r1, r5
    41f8:	4803      	ldr	r0, [pc, #12]	; (4208 <z_cstart+0x70>)
    41fa:	f7fd fd67 	bl	1ccc <z_arm_switch_to_main_no_multithreading>
    41fe:	bf00      	nop
    4200:	2000fce8 	.word	0x2000fce8
    4204:	e000ed00 	.word	0xe000ed00
    4208:	00004155 	.word	0x00004155

0000420c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    420c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    420e:	4806      	ldr	r0, [pc, #24]	; (4228 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    4210:	4a06      	ldr	r2, [pc, #24]	; (422c <z_data_copy+0x20>)
    4212:	4907      	ldr	r1, [pc, #28]	; (4230 <z_data_copy+0x24>)
    4214:	1a12      	subs	r2, r2, r0
    4216:	f002 f9d0 	bl	65ba <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    421a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    421e:	4a05      	ldr	r2, [pc, #20]	; (4234 <z_data_copy+0x28>)
    4220:	4905      	ldr	r1, [pc, #20]	; (4238 <z_data_copy+0x2c>)
    4222:	4806      	ldr	r0, [pc, #24]	; (423c <z_data_copy+0x30>)
    4224:	f002 b9c9 	b.w	65ba <memcpy>
    4228:	2000c500 	.word	0x2000c500
    422c:	2000c61c 	.word	0x2000c61c
    4230:	00007e74 	.word	0x00007e74
    4234:	00000000 	.word	0x00000000
    4238:	00007e5c 	.word	0x00007e5c
    423c:	2000c500 	.word	0x2000c500

00004240 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4240:	4b03      	ldr	r3, [pc, #12]	; (4250 <elapsed+0x10>)
    4242:	681b      	ldr	r3, [r3, #0]
    4244:	b90b      	cbnz	r3, 424a <elapsed+0xa>
    4246:	f7ff b8a3 	b.w	3390 <sys_clock_elapsed>
}
    424a:	2000      	movs	r0, #0
    424c:	4770      	bx	lr
    424e:	bf00      	nop
    4250:	2000d3c8 	.word	0x2000d3c8

00004254 <remove_timeout>:
{
    4254:	b530      	push	{r4, r5, lr}
    4256:	6803      	ldr	r3, [r0, #0]
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4258:	b168      	cbz	r0, 4276 <remove_timeout+0x22>
    425a:	4a0a      	ldr	r2, [pc, #40]	; (4284 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    425c:	6852      	ldr	r2, [r2, #4]
    425e:	4290      	cmp	r0, r2
    4260:	d009      	beq.n	4276 <remove_timeout+0x22>
	if (next(t) != NULL) {
    4262:	b143      	cbz	r3, 4276 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4264:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4268:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    426c:	1912      	adds	r2, r2, r4
    426e:	eb45 0101 	adc.w	r1, r5, r1
    4272:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    4276:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4278:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    427a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    427c:	2300      	movs	r3, #0
	node->prev = NULL;
    427e:	e9c0 3300 	strd	r3, r3, [r0]
}
    4282:	bd30      	pop	{r4, r5, pc}
    4284:	2000c5a0 	.word	0x2000c5a0

00004288 <next_timeout>:
	return list->head == list;
    4288:	4b10      	ldr	r3, [pc, #64]	; (42cc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    428a:	b510      	push	{r4, lr}
    428c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    428e:	429c      	cmp	r4, r3
    4290:	bf08      	it	eq
    4292:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4294:	f7ff ffd4 	bl	4240 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    4298:	b19c      	cbz	r4, 42c2 <next_timeout+0x3a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    429a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    429e:	1a12      	subs	r2, r2, r0
    42a0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    42a4:	2a01      	cmp	r2, #1
    42a6:	f173 0100 	sbcs.w	r1, r3, #0
    42aa:	db0d      	blt.n	42c8 <next_timeout+0x40>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    42ac:	4610      	mov	r0, r2
    42ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    42b2:	4619      	mov	r1, r3
    42b4:	2300      	movs	r3, #0
    42b6:	4282      	cmp	r2, r0
    42b8:	eb73 0401 	sbcs.w	r4, r3, r1
    42bc:	da00      	bge.n	42c0 <next_timeout+0x38>
    42be:	4610      	mov	r0, r2
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    42c0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    42c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    42c6:	e7fb      	b.n	42c0 <next_timeout+0x38>
    42c8:	2000      	movs	r0, #0
	return ret;
    42ca:	e7f9      	b.n	42c0 <next_timeout+0x38>
    42cc:	2000c5a0 	.word	0x2000c5a0

000042d0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    42d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    42d4:	f04f 0320 	mov.w	r3, #32
    42d8:	f3ef 8411 	mrs	r4, BASEPRI
    42dc:	f383 8812 	msr	BASEPRI_MAX, r3
    42e0:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    42e4:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 4394 <sys_clock_announce+0xc4>
    42e8:	4d29      	ldr	r5, [pc, #164]	; (4390 <sys_clock_announce+0xc0>)
    42ea:	4651      	mov	r1, sl
	return list->head == list;
    42ec:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4398 <sys_clock_announce+0xc8>
    42f0:	6028      	str	r0, [r5, #0]
    42f2:	f8d5 c000 	ldr.w	ip, [r5]
    42f6:	f8db 0000 	ldr.w	r0, [fp]
    42fa:	4662      	mov	r2, ip
    42fc:	e9da 8900 	ldrd	r8, r9, [sl]
    4300:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4302:	4558      	cmp	r0, fp
    4304:	e9cd 2300 	strd	r2, r3, [sp]
    4308:	d00d      	beq.n	4326 <sys_clock_announce+0x56>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    430a:	b160      	cbz	r0, 4326 <sys_clock_announce+0x56>
    430c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4310:	45b4      	cmp	ip, r6
    4312:	41bb      	sbcs	r3, r7
    4314:	da1d      	bge.n	4352 <sys_clock_announce+0x82>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4316:	9b00      	ldr	r3, [sp, #0]
    4318:	ebb6 0c03 	subs.w	ip, r6, r3
    431c:	9b01      	ldr	r3, [sp, #4]
    431e:	eb67 0603 	sbc.w	r6, r7, r3
    4322:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4326:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    4328:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    432a:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    432c:	eb13 0208 	adds.w	r2, r3, r8
    4330:	9b01      	ldr	r3, [sp, #4]
    4332:	eb43 0309 	adc.w	r3, r3, r9
    4336:	e9c1 2300 	strd	r2, r3, [r1]

	sys_clock_set_timeout(next_timeout(), false);
    433a:	f7ff ffa5 	bl	4288 <next_timeout>
    433e:	4631      	mov	r1, r6
    4340:	f7fe fff6 	bl	3330 <sys_clock_set_timeout>
	__asm__ volatile(
    4344:	f384 8811 	msr	BASEPRI, r4
    4348:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    434c:	b003      	add	sp, #12
    434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    4352:	2200      	movs	r2, #0
    4354:	2300      	movs	r3, #0
		curr_tick += dt;
    4356:	eb18 0806 	adds.w	r8, r8, r6
    435a:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    435e:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    4362:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    4366:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    436a:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    436c:	f7ff ff72 	bl	4254 <remove_timeout>
    4370:	f384 8811 	msr	BASEPRI, r4
    4374:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4378:	6883      	ldr	r3, [r0, #8]
    437a:	4798      	blx	r3
	__asm__ volatile(
    437c:	f04f 0320 	mov.w	r3, #32
    4380:	f3ef 8411 	mrs	r4, BASEPRI
    4384:	f383 8812 	msr	BASEPRI_MAX, r3
    4388:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    438c:	4901      	ldr	r1, [pc, #4]	; (4394 <sys_clock_announce+0xc4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    438e:	e7b0      	b.n	42f2 <sys_clock_announce+0x22>
    4390:	2000d3c8 	.word	0x2000d3c8
    4394:	2000c6c0 	.word	0x2000c6c0
    4398:	2000c5a0 	.word	0x2000c5a0

0000439c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    439c:	4a02      	ldr	r2, [pc, #8]	; (43a8 <boot_banner+0xc>)
    439e:	4903      	ldr	r1, [pc, #12]	; (43ac <boot_banner+0x10>)
    43a0:	4803      	ldr	r0, [pc, #12]	; (43b0 <boot_banner+0x14>)
    43a2:	f001 bf58 	b.w	6256 <printk>
    43a6:	bf00      	nop
    43a8:	00007db1 	.word	0x00007db1
    43ac:	00007e24 	.word	0x00007e24
    43b0:	00007e33 	.word	0x00007e33

000043b4 <nrf_cc3xx_platform_init_no_rng>:
    43b4:	b510      	push	{r4, lr}
    43b6:	4c0a      	ldr	r4, [pc, #40]	; (43e0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    43b8:	6823      	ldr	r3, [r4, #0]
    43ba:	b11b      	cbz	r3, 43c4 <nrf_cc3xx_platform_init_no_rng+0x10>
    43bc:	2301      	movs	r3, #1
    43be:	2000      	movs	r0, #0
    43c0:	6023      	str	r3, [r4, #0]
    43c2:	bd10      	pop	{r4, pc}
    43c4:	f000 f852 	bl	446c <CC_LibInitNoRng>
    43c8:	2800      	cmp	r0, #0
    43ca:	d0f7      	beq.n	43bc <nrf_cc3xx_platform_init_no_rng+0x8>
    43cc:	3801      	subs	r0, #1
    43ce:	2806      	cmp	r0, #6
    43d0:	d803      	bhi.n	43da <nrf_cc3xx_platform_init_no_rng+0x26>
    43d2:	4b04      	ldr	r3, [pc, #16]	; (43e4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    43d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    43d8:	bd10      	pop	{r4, pc}
    43da:	4803      	ldr	r0, [pc, #12]	; (43e8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    43dc:	bd10      	pop	{r4, pc}
    43de:	bf00      	nop
    43e0:	2000d3cc 	.word	0x2000d3cc
    43e4:	00007084 	.word	0x00007084
    43e8:	ffff8ffe 	.word	0xffff8ffe

000043ec <nrf_cc3xx_platform_abort>:
    43ec:	f3bf 8f4f 	dsb	sy
    43f0:	4905      	ldr	r1, [pc, #20]	; (4408 <nrf_cc3xx_platform_abort+0x1c>)
    43f2:	4b06      	ldr	r3, [pc, #24]	; (440c <nrf_cc3xx_platform_abort+0x20>)
    43f4:	68ca      	ldr	r2, [r1, #12]
    43f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    43fa:	4313      	orrs	r3, r2
    43fc:	60cb      	str	r3, [r1, #12]
    43fe:	f3bf 8f4f 	dsb	sy
    4402:	bf00      	nop
    4404:	e7fd      	b.n	4402 <nrf_cc3xx_platform_abort+0x16>
    4406:	bf00      	nop
    4408:	e000ed00 	.word	0xe000ed00
    440c:	05fa0004 	.word	0x05fa0004

00004410 <CC_PalAbort>:
    4410:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4414:	2100      	movs	r1, #0
    4416:	b430      	push	{r4, r5}
    4418:	4a06      	ldr	r2, [pc, #24]	; (4434 <CC_PalAbort+0x24>)
    441a:	4d07      	ldr	r5, [pc, #28]	; (4438 <CC_PalAbort+0x28>)
    441c:	4c07      	ldr	r4, [pc, #28]	; (443c <CC_PalAbort+0x2c>)
    441e:	602b      	str	r3, [r5, #0]
    4420:	6013      	str	r3, [r2, #0]
    4422:	6023      	str	r3, [r4, #0]
    4424:	4a06      	ldr	r2, [pc, #24]	; (4440 <CC_PalAbort+0x30>)
    4426:	4c07      	ldr	r4, [pc, #28]	; (4444 <CC_PalAbort+0x34>)
    4428:	60eb      	str	r3, [r5, #12]
    442a:	6863      	ldr	r3, [r4, #4]
    442c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4430:	bc30      	pop	{r4, r5}
    4432:	4718      	bx	r3
    4434:	50841404 	.word	0x50841404
    4438:	50841400 	.word	0x50841400
    443c:	50841408 	.word	0x50841408
    4440:	50840000 	.word	0x50840000
    4444:	2000c5a8 	.word	0x2000c5a8

00004448 <nrf_cc3xx_platform_set_abort>:
    4448:	4b02      	ldr	r3, [pc, #8]	; (4454 <nrf_cc3xx_platform_set_abort+0xc>)
    444a:	e9d0 1200 	ldrd	r1, r2, [r0]
    444e:	e9c3 1200 	strd	r1, r2, [r3]
    4452:	4770      	bx	lr
    4454:	2000c5a8 	.word	0x2000c5a8

00004458 <mbedtls_platform_zeroize>:
    4458:	b138      	cbz	r0, 446a <mbedtls_platform_zeroize+0x12>
    445a:	b131      	cbz	r1, 446a <mbedtls_platform_zeroize+0x12>
    445c:	2200      	movs	r2, #0
    445e:	4401      	add	r1, r0
    4460:	4603      	mov	r3, r0
    4462:	3001      	adds	r0, #1
    4464:	4288      	cmp	r0, r1
    4466:	701a      	strb	r2, [r3, #0]
    4468:	d1fa      	bne.n	4460 <mbedtls_platform_zeroize+0x8>
    446a:	4770      	bx	lr

0000446c <CC_LibInitNoRng>:
    446c:	b510      	push	{r4, lr}
    446e:	f000 f833 	bl	44d8 <CC_HalInit>
    4472:	b120      	cbz	r0, 447e <CC_LibInitNoRng+0x12>
    4474:	2403      	movs	r4, #3
    4476:	f000 f867 	bl	4548 <CC_PalTerminate>
    447a:	4620      	mov	r0, r4
    447c:	bd10      	pop	{r4, pc}
    447e:	f000 f835 	bl	44ec <CC_PalInit>
    4482:	b990      	cbnz	r0, 44aa <CC_LibInitNoRng+0x3e>
    4484:	f000 f8b0 	bl	45e8 <CC_PalPowerSaveModeSelect>
    4488:	b990      	cbnz	r0, 44b0 <CC_LibInitNoRng+0x44>
    448a:	4b0f      	ldr	r3, [pc, #60]	; (44c8 <CC_LibInitNoRng+0x5c>)
    448c:	681b      	ldr	r3, [r3, #0]
    448e:	0e1b      	lsrs	r3, r3, #24
    4490:	2bf0      	cmp	r3, #240	; 0xf0
    4492:	d108      	bne.n	44a6 <CC_LibInitNoRng+0x3a>
    4494:	4a0d      	ldr	r2, [pc, #52]	; (44cc <CC_LibInitNoRng+0x60>)
    4496:	4b0e      	ldr	r3, [pc, #56]	; (44d0 <CC_LibInitNoRng+0x64>)
    4498:	6812      	ldr	r2, [r2, #0]
    449a:	429a      	cmp	r2, r3
    449c:	d00a      	beq.n	44b4 <CC_LibInitNoRng+0x48>
    449e:	2407      	movs	r4, #7
    44a0:	f000 f81c 	bl	44dc <CC_HalTerminate>
    44a4:	e7e7      	b.n	4476 <CC_LibInitNoRng+0xa>
    44a6:	2406      	movs	r4, #6
    44a8:	e7fa      	b.n	44a0 <CC_LibInitNoRng+0x34>
    44aa:	2404      	movs	r4, #4
    44ac:	4620      	mov	r0, r4
    44ae:	bd10      	pop	{r4, pc}
    44b0:	2400      	movs	r4, #0
    44b2:	e7f5      	b.n	44a0 <CC_LibInitNoRng+0x34>
    44b4:	2001      	movs	r0, #1
    44b6:	f000 f897 	bl	45e8 <CC_PalPowerSaveModeSelect>
    44ba:	4604      	mov	r4, r0
    44bc:	2800      	cmp	r0, #0
    44be:	d1f7      	bne.n	44b0 <CC_LibInitNoRng+0x44>
    44c0:	4b04      	ldr	r3, [pc, #16]	; (44d4 <CC_LibInitNoRng+0x68>)
    44c2:	6018      	str	r0, [r3, #0]
    44c4:	e7d9      	b.n	447a <CC_LibInitNoRng+0xe>
    44c6:	bf00      	nop
    44c8:	50841928 	.word	0x50841928
    44cc:	50841a24 	.word	0x50841a24
    44d0:	20e00000 	.word	0x20e00000
    44d4:	50841a0c 	.word	0x50841a0c

000044d8 <CC_HalInit>:
    44d8:	2000      	movs	r0, #0
    44da:	4770      	bx	lr

000044dc <CC_HalTerminate>:
    44dc:	2000      	movs	r0, #0
    44de:	4770      	bx	lr

000044e0 <CC_HalMaskInterrupt>:
    44e0:	4b01      	ldr	r3, [pc, #4]	; (44e8 <CC_HalMaskInterrupt+0x8>)
    44e2:	6018      	str	r0, [r3, #0]
    44e4:	4770      	bx	lr
    44e6:	bf00      	nop
    44e8:	50841a04 	.word	0x50841a04

000044ec <CC_PalInit>:
    44ec:	b510      	push	{r4, lr}
    44ee:	4811      	ldr	r0, [pc, #68]	; (4534 <CC_PalInit+0x48>)
    44f0:	f000 f848 	bl	4584 <CC_PalMutexCreate>
    44f4:	b100      	cbz	r0, 44f8 <CC_PalInit+0xc>
    44f6:	bd10      	pop	{r4, pc}
    44f8:	480f      	ldr	r0, [pc, #60]	; (4538 <CC_PalInit+0x4c>)
    44fa:	f000 f843 	bl	4584 <CC_PalMutexCreate>
    44fe:	2800      	cmp	r0, #0
    4500:	d1f9      	bne.n	44f6 <CC_PalInit+0xa>
    4502:	4c0e      	ldr	r4, [pc, #56]	; (453c <CC_PalInit+0x50>)
    4504:	4620      	mov	r0, r4
    4506:	f000 f83d 	bl	4584 <CC_PalMutexCreate>
    450a:	2800      	cmp	r0, #0
    450c:	d1f3      	bne.n	44f6 <CC_PalInit+0xa>
    450e:	4b0c      	ldr	r3, [pc, #48]	; (4540 <CC_PalInit+0x54>)
    4510:	480c      	ldr	r0, [pc, #48]	; (4544 <CC_PalInit+0x58>)
    4512:	601c      	str	r4, [r3, #0]
    4514:	f000 f836 	bl	4584 <CC_PalMutexCreate>
    4518:	4601      	mov	r1, r0
    451a:	2800      	cmp	r0, #0
    451c:	d1eb      	bne.n	44f6 <CC_PalInit+0xa>
    451e:	f000 f82d 	bl	457c <CC_PalDmaInit>
    4522:	4604      	mov	r4, r0
    4524:	b108      	cbz	r0, 452a <CC_PalInit+0x3e>
    4526:	4620      	mov	r0, r4
    4528:	bd10      	pop	{r4, pc}
    452a:	f000 f83f 	bl	45ac <CC_PalPowerSaveModeInit>
    452e:	4620      	mov	r0, r4
    4530:	e7fa      	b.n	4528 <CC_PalInit+0x3c>
    4532:	bf00      	nop
    4534:	2000c5bc 	.word	0x2000c5bc
    4538:	2000c5b0 	.word	0x2000c5b0
    453c:	2000c5b8 	.word	0x2000c5b8
    4540:	2000c5c0 	.word	0x2000c5c0
    4544:	2000c5b4 	.word	0x2000c5b4

00004548 <CC_PalTerminate>:
    4548:	b508      	push	{r3, lr}
    454a:	4808      	ldr	r0, [pc, #32]	; (456c <CC_PalTerminate+0x24>)
    454c:	f000 f824 	bl	4598 <CC_PalMutexDestroy>
    4550:	4807      	ldr	r0, [pc, #28]	; (4570 <CC_PalTerminate+0x28>)
    4552:	f000 f821 	bl	4598 <CC_PalMutexDestroy>
    4556:	4807      	ldr	r0, [pc, #28]	; (4574 <CC_PalTerminate+0x2c>)
    4558:	f000 f81e 	bl	4598 <CC_PalMutexDestroy>
    455c:	4806      	ldr	r0, [pc, #24]	; (4578 <CC_PalTerminate+0x30>)
    455e:	f000 f81b 	bl	4598 <CC_PalMutexDestroy>
    4562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4566:	f000 b80b 	b.w	4580 <CC_PalDmaTerminate>
    456a:	bf00      	nop
    456c:	2000c5bc 	.word	0x2000c5bc
    4570:	2000c5b0 	.word	0x2000c5b0
    4574:	2000c5b8 	.word	0x2000c5b8
    4578:	2000c5b4 	.word	0x2000c5b4

0000457c <CC_PalDmaInit>:
    457c:	2000      	movs	r0, #0
    457e:	4770      	bx	lr

00004580 <CC_PalDmaTerminate>:
    4580:	4770      	bx	lr
    4582:	bf00      	nop

00004584 <CC_PalMutexCreate>:
    4584:	b508      	push	{r3, lr}
    4586:	4b03      	ldr	r3, [pc, #12]	; (4594 <CC_PalMutexCreate+0x10>)
    4588:	6802      	ldr	r2, [r0, #0]
    458a:	681b      	ldr	r3, [r3, #0]
    458c:	6810      	ldr	r0, [r2, #0]
    458e:	4798      	blx	r3
    4590:	2000      	movs	r0, #0
    4592:	bd08      	pop	{r3, pc}
    4594:	2000c5cc 	.word	0x2000c5cc

00004598 <CC_PalMutexDestroy>:
    4598:	b508      	push	{r3, lr}
    459a:	4b03      	ldr	r3, [pc, #12]	; (45a8 <CC_PalMutexDestroy+0x10>)
    459c:	6802      	ldr	r2, [r0, #0]
    459e:	685b      	ldr	r3, [r3, #4]
    45a0:	6810      	ldr	r0, [r2, #0]
    45a2:	4798      	blx	r3
    45a4:	2000      	movs	r0, #0
    45a6:	bd08      	pop	{r3, pc}
    45a8:	2000c5cc 	.word	0x2000c5cc

000045ac <CC_PalPowerSaveModeInit>:
    45ac:	b570      	push	{r4, r5, r6, lr}
    45ae:	4c09      	ldr	r4, [pc, #36]	; (45d4 <CC_PalPowerSaveModeInit+0x28>)
    45b0:	4d09      	ldr	r5, [pc, #36]	; (45d8 <CC_PalPowerSaveModeInit+0x2c>)
    45b2:	6920      	ldr	r0, [r4, #16]
    45b4:	68ab      	ldr	r3, [r5, #8]
    45b6:	4798      	blx	r3
    45b8:	b118      	cbz	r0, 45c2 <CC_PalPowerSaveModeInit+0x16>
    45ba:	4b08      	ldr	r3, [pc, #32]	; (45dc <CC_PalPowerSaveModeInit+0x30>)
    45bc:	4808      	ldr	r0, [pc, #32]	; (45e0 <CC_PalPowerSaveModeInit+0x34>)
    45be:	685b      	ldr	r3, [r3, #4]
    45c0:	4798      	blx	r3
    45c2:	2100      	movs	r1, #0
    45c4:	4a07      	ldr	r2, [pc, #28]	; (45e4 <CC_PalPowerSaveModeInit+0x38>)
    45c6:	68eb      	ldr	r3, [r5, #12]
    45c8:	6011      	str	r1, [r2, #0]
    45ca:	6920      	ldr	r0, [r4, #16]
    45cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45d0:	4718      	bx	r3
    45d2:	bf00      	nop
    45d4:	2000c5dc 	.word	0x2000c5dc
    45d8:	2000c5cc 	.word	0x2000c5cc
    45dc:	2000c5a8 	.word	0x2000c5a8
    45e0:	000070a0 	.word	0x000070a0
    45e4:	2000d3d0 	.word	0x2000d3d0

000045e8 <CC_PalPowerSaveModeSelect>:
    45e8:	b570      	push	{r4, r5, r6, lr}
    45ea:	4d1a      	ldr	r5, [pc, #104]	; (4654 <CC_PalPowerSaveModeSelect+0x6c>)
    45ec:	4e1a      	ldr	r6, [pc, #104]	; (4658 <CC_PalPowerSaveModeSelect+0x70>)
    45ee:	4604      	mov	r4, r0
    45f0:	68b2      	ldr	r2, [r6, #8]
    45f2:	6928      	ldr	r0, [r5, #16]
    45f4:	4790      	blx	r2
    45f6:	b9f0      	cbnz	r0, 4636 <CC_PalPowerSaveModeSelect+0x4e>
    45f8:	b15c      	cbz	r4, 4612 <CC_PalPowerSaveModeSelect+0x2a>
    45fa:	4c18      	ldr	r4, [pc, #96]	; (465c <CC_PalPowerSaveModeSelect+0x74>)
    45fc:	6823      	ldr	r3, [r4, #0]
    45fe:	b1ab      	cbz	r3, 462c <CC_PalPowerSaveModeSelect+0x44>
    4600:	2b01      	cmp	r3, #1
    4602:	d01a      	beq.n	463a <CC_PalPowerSaveModeSelect+0x52>
    4604:	3b01      	subs	r3, #1
    4606:	6023      	str	r3, [r4, #0]
    4608:	6928      	ldr	r0, [r5, #16]
    460a:	68f3      	ldr	r3, [r6, #12]
    460c:	4798      	blx	r3
    460e:	2000      	movs	r0, #0
    4610:	bd70      	pop	{r4, r5, r6, pc}
    4612:	4c12      	ldr	r4, [pc, #72]	; (465c <CC_PalPowerSaveModeSelect+0x74>)
    4614:	6821      	ldr	r1, [r4, #0]
    4616:	b939      	cbnz	r1, 4628 <CC_PalPowerSaveModeSelect+0x40>
    4618:	2001      	movs	r0, #1
    461a:	4b11      	ldr	r3, [pc, #68]	; (4660 <CC_PalPowerSaveModeSelect+0x78>)
    461c:	4a11      	ldr	r2, [pc, #68]	; (4664 <CC_PalPowerSaveModeSelect+0x7c>)
    461e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    4622:	6813      	ldr	r3, [r2, #0]
    4624:	2b00      	cmp	r3, #0
    4626:	d1fc      	bne.n	4622 <CC_PalPowerSaveModeSelect+0x3a>
    4628:	3101      	adds	r1, #1
    462a:	6021      	str	r1, [r4, #0]
    462c:	68f3      	ldr	r3, [r6, #12]
    462e:	6928      	ldr	r0, [r5, #16]
    4630:	4798      	blx	r3
    4632:	2000      	movs	r0, #0
    4634:	bd70      	pop	{r4, r5, r6, pc}
    4636:	480c      	ldr	r0, [pc, #48]	; (4668 <CC_PalPowerSaveModeSelect+0x80>)
    4638:	bd70      	pop	{r4, r5, r6, pc}
    463a:	4a0a      	ldr	r2, [pc, #40]	; (4664 <CC_PalPowerSaveModeSelect+0x7c>)
    463c:	6813      	ldr	r3, [r2, #0]
    463e:	2b00      	cmp	r3, #0
    4640:	d1fc      	bne.n	463c <CC_PalPowerSaveModeSelect+0x54>
    4642:	4a07      	ldr	r2, [pc, #28]	; (4660 <CC_PalPowerSaveModeSelect+0x78>)
    4644:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4648:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    464c:	f7ff ff48 	bl	44e0 <CC_HalMaskInterrupt>
    4650:	6823      	ldr	r3, [r4, #0]
    4652:	e7d7      	b.n	4604 <CC_PalPowerSaveModeSelect+0x1c>
    4654:	2000c5dc 	.word	0x2000c5dc
    4658:	2000c5cc 	.word	0x2000c5cc
    465c:	2000d3d0 	.word	0x2000d3d0
    4660:	50840000 	.word	0x50840000
    4664:	50841910 	.word	0x50841910
    4668:	ffff8fe9 	.word	0xffff8fe9

0000466c <mutex_free>:
    466c:	b510      	push	{r4, lr}
    466e:	4604      	mov	r4, r0
    4670:	b130      	cbz	r0, 4680 <mutex_free+0x14>
    4672:	6863      	ldr	r3, [r4, #4]
    4674:	06db      	lsls	r3, r3, #27
    4676:	d502      	bpl.n	467e <mutex_free+0x12>
    4678:	2300      	movs	r3, #0
    467a:	6023      	str	r3, [r4, #0]
    467c:	6063      	str	r3, [r4, #4]
    467e:	bd10      	pop	{r4, pc}
    4680:	4b02      	ldr	r3, [pc, #8]	; (468c <mutex_free+0x20>)
    4682:	4803      	ldr	r0, [pc, #12]	; (4690 <mutex_free+0x24>)
    4684:	685b      	ldr	r3, [r3, #4]
    4686:	4798      	blx	r3
    4688:	e7f3      	b.n	4672 <mutex_free+0x6>
    468a:	bf00      	nop
    468c:	2000c5a8 	.word	0x2000c5a8
    4690:	000070c0 	.word	0x000070c0

00004694 <mutex_unlock>:
    4694:	b168      	cbz	r0, 46b2 <mutex_unlock+0x1e>
    4696:	6843      	ldr	r3, [r0, #4]
    4698:	b13b      	cbz	r3, 46aa <mutex_unlock+0x16>
    469a:	06db      	lsls	r3, r3, #27
    469c:	d507      	bpl.n	46ae <mutex_unlock+0x1a>
    469e:	f3bf 8f5f 	dmb	sy
    46a2:	2300      	movs	r3, #0
    46a4:	6003      	str	r3, [r0, #0]
    46a6:	4618      	mov	r0, r3
    46a8:	4770      	bx	lr
    46aa:	4803      	ldr	r0, [pc, #12]	; (46b8 <mutex_unlock+0x24>)
    46ac:	4770      	bx	lr
    46ae:	4803      	ldr	r0, [pc, #12]	; (46bc <mutex_unlock+0x28>)
    46b0:	4770      	bx	lr
    46b2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    46b6:	4770      	bx	lr
    46b8:	ffff8fea 	.word	0xffff8fea
    46bc:	ffff8fe9 	.word	0xffff8fe9

000046c0 <mutex_init>:
    46c0:	b510      	push	{r4, lr}
    46c2:	4604      	mov	r4, r0
    46c4:	b120      	cbz	r0, 46d0 <mutex_init+0x10>
    46c6:	2200      	movs	r2, #0
    46c8:	2311      	movs	r3, #17
    46ca:	6022      	str	r2, [r4, #0]
    46cc:	6063      	str	r3, [r4, #4]
    46ce:	bd10      	pop	{r4, pc}
    46d0:	4801      	ldr	r0, [pc, #4]	; (46d8 <mutex_init+0x18>)
    46d2:	f7ff fe9d 	bl	4410 <CC_PalAbort>
    46d6:	e7f6      	b.n	46c6 <mutex_init+0x6>
    46d8:	000070e8 	.word	0x000070e8

000046dc <mutex_lock>:
    46dc:	b1a0      	cbz	r0, 4708 <mutex_lock+0x2c>
    46de:	6843      	ldr	r3, [r0, #4]
    46e0:	b183      	cbz	r3, 4704 <mutex_lock+0x28>
    46e2:	06db      	lsls	r3, r3, #27
    46e4:	d50c      	bpl.n	4700 <mutex_lock+0x24>
    46e6:	2201      	movs	r2, #1
    46e8:	e8d0 3fef 	ldaex	r3, [r0]
    46ec:	e8c0 2fe1 	stlex	r1, r2, [r0]
    46f0:	2900      	cmp	r1, #0
    46f2:	d1f9      	bne.n	46e8 <mutex_lock+0xc>
    46f4:	2b01      	cmp	r3, #1
    46f6:	d0f7      	beq.n	46e8 <mutex_lock+0xc>
    46f8:	f3bf 8f5f 	dmb	sy
    46fc:	2000      	movs	r0, #0
    46fe:	4770      	bx	lr
    4700:	4803      	ldr	r0, [pc, #12]	; (4710 <mutex_lock+0x34>)
    4702:	4770      	bx	lr
    4704:	4803      	ldr	r0, [pc, #12]	; (4714 <mutex_lock+0x38>)
    4706:	4770      	bx	lr
    4708:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    470c:	4770      	bx	lr
    470e:	bf00      	nop
    4710:	ffff8fe9 	.word	0xffff8fe9
    4714:	ffff8fea 	.word	0xffff8fea

00004718 <verify_context_ecdsa_verify_secp256r1>:
    4718:	b130      	cbz	r0, 4728 <verify_context_ecdsa_verify_secp256r1+0x10>
    471a:	6802      	ldr	r2, [r0, #0]
    471c:	4b03      	ldr	r3, [pc, #12]	; (472c <verify_context_ecdsa_verify_secp256r1+0x14>)
    471e:	4804      	ldr	r0, [pc, #16]	; (4730 <verify_context_ecdsa_verify_secp256r1+0x18>)
    4720:	429a      	cmp	r2, r3
    4722:	bf08      	it	eq
    4724:	2000      	moveq	r0, #0
    4726:	4770      	bx	lr
    4728:	4802      	ldr	r0, [pc, #8]	; (4734 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    472a:	4770      	bx	lr
    472c:	bbaa55dd 	.word	0xbbaa55dd
    4730:	00f00882 	.word	0x00f00882
    4734:	00f00871 	.word	0x00f00871

00004738 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    4738:	b538      	push	{r3, r4, r5, lr}
    473a:	460d      	mov	r5, r1
    473c:	4604      	mov	r4, r0
    473e:	b1b0      	cbz	r0, 476e <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    4740:	22a0      	movs	r2, #160	; 0xa0
    4742:	2100      	movs	r1, #0
    4744:	3004      	adds	r0, #4
    4746:	f002 f9f2 	bl	6b2e <SaSi_PalMemSet>
    474a:	b195      	cbz	r5, 4772 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    474c:	2208      	movs	r2, #8
    474e:	4629      	mov	r1, r5
    4750:	f104 0064 	add.w	r0, r4, #100	; 0x64
    4754:	f002 f9f1 	bl	6b3a <CRYS_COMMON_ReverseMemcpy32>
    4758:	2208      	movs	r2, #8
    475a:	f105 0120 	add.w	r1, r5, #32
    475e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    4762:	f002 f9ea 	bl	6b3a <CRYS_COMMON_ReverseMemcpy32>
    4766:	2000      	movs	r0, #0
    4768:	4b03      	ldr	r3, [pc, #12]	; (4778 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    476a:	6023      	str	r3, [r4, #0]
    476c:	bd38      	pop	{r3, r4, r5, pc}
    476e:	4803      	ldr	r0, [pc, #12]	; (477c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    4770:	e7fc      	b.n	476c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    4772:	4803      	ldr	r0, [pc, #12]	; (4780 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    4774:	e7fa      	b.n	476c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    4776:	bf00      	nop
    4778:	bbaa55dd 	.word	0xbbaa55dd
    477c:	00f00871 	.word	0x00f00871
    4780:	00f00883 	.word	0x00f00883

00004784 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    4784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4788:	4605      	mov	r5, r0
    478a:	460e      	mov	r6, r1
    478c:	4699      	mov	r9, r3
    478e:	4611      	mov	r1, r2
    4790:	f7ff ffc2 	bl	4718 <verify_context_ecdsa_verify_secp256r1>
    4794:	4604      	mov	r4, r0
    4796:	2800      	cmp	r0, #0
    4798:	f040 8084 	bne.w	48a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    479c:	2e00      	cmp	r6, #0
    479e:	f000 8085 	beq.w	48ac <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    47a2:	2900      	cmp	r1, #0
    47a4:	f000 8084 	beq.w	48b0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    47a8:	f1b9 0f20 	cmp.w	r9, #32
    47ac:	f040 8082 	bne.w	48b4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    47b0:	f105 0444 	add.w	r4, r5, #68	; 0x44
    47b4:	2208      	movs	r2, #8
    47b6:	f105 0804 	add.w	r8, r5, #4
    47ba:	4620      	mov	r0, r4
    47bc:	f002 f9bd 	bl	6b3a <CRYS_COMMON_ReverseMemcpy32>
    47c0:	f105 0724 	add.w	r7, r5, #36	; 0x24
    47c4:	2208      	movs	r2, #8
    47c6:	4631      	mov	r1, r6
    47c8:	4640      	mov	r0, r8
    47ca:	f002 f9b6 	bl	6b3a <CRYS_COMMON_ReverseMemcpy32>
    47ce:	f106 0120 	add.w	r1, r6, #32
    47d2:	2208      	movs	r2, #8
    47d4:	4638      	mov	r0, r7
    47d6:	f002 f9b0 	bl	6b3a <CRYS_COMMON_ReverseMemcpy32>
    47da:	a902      	add	r1, sp, #8
    47dc:	f841 9d04 	str.w	r9, [r1, #-4]!
    47e0:	f44f 7080 	mov.w	r0, #256	; 0x100
    47e4:	f002 f99d 	bl	6b22 <PkaInitAndMutexLock>
    47e8:	2800      	cmp	r0, #0
    47ea:	d165      	bne.n	48b8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    47ec:	f44f 7380 	mov.w	r3, #256	; 0x100
    47f0:	4a32      	ldr	r2, [pc, #200]	; (48bc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    47f2:	2101      	movs	r1, #1
    47f4:	6013      	str	r3, [r2, #0]
    47f6:	6093      	str	r3, [r2, #8]
    47f8:	2308      	movs	r3, #8
    47fa:	4a31      	ldr	r2, [pc, #196]	; (48c0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    47fc:	f000 fb34 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4800:	2101      	movs	r1, #1
    4802:	2305      	movs	r3, #5
    4804:	4608      	mov	r0, r1
    4806:	4a2f      	ldr	r2, [pc, #188]	; (48c4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    4808:	f000 fb2e 	bl	4e68 <PkaCopyDataIntoPkaReg>
    480c:	2308      	movs	r3, #8
    480e:	4642      	mov	r2, r8
    4810:	2101      	movs	r1, #1
    4812:	201c      	movs	r0, #28
    4814:	f000 fb28 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4818:	2308      	movs	r3, #8
    481a:	463a      	mov	r2, r7
    481c:	2101      	movs	r1, #1
    481e:	2003      	movs	r0, #3
    4820:	f000 fb22 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4824:	4622      	mov	r2, r4
    4826:	2308      	movs	r3, #8
    4828:	2101      	movs	r1, #1
    482a:	2002      	movs	r0, #2
    482c:	f000 fb1c 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4830:	2308      	movs	r3, #8
    4832:	4a25      	ldr	r2, [pc, #148]	; (48c8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    4834:	2101      	movs	r1, #1
    4836:	201a      	movs	r0, #26
    4838:	f000 fb16 	bl	4e68 <PkaCopyDataIntoPkaReg>
    483c:	2305      	movs	r3, #5
    483e:	4a23      	ldr	r2, [pc, #140]	; (48cc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    4840:	2101      	movs	r1, #1
    4842:	201b      	movs	r0, #27
    4844:	f000 fb10 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4848:	2308      	movs	r3, #8
    484a:	4a21      	ldr	r2, [pc, #132]	; (48d0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    484c:	2101      	movs	r1, #1
    484e:	2014      	movs	r0, #20
    4850:	f000 fb0a 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4854:	2308      	movs	r3, #8
    4856:	4a1f      	ldr	r2, [pc, #124]	; (48d4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    4858:	2101      	movs	r1, #1
    485a:	2015      	movs	r0, #21
    485c:	f000 fb04 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4860:	2308      	movs	r3, #8
    4862:	f105 0264 	add.w	r2, r5, #100	; 0x64
    4866:	2101      	movs	r1, #1
    4868:	2016      	movs	r0, #22
    486a:	f000 fafd 	bl	4e68 <PkaCopyDataIntoPkaReg>
    486e:	2308      	movs	r3, #8
    4870:	f105 0284 	add.w	r2, r5, #132	; 0x84
    4874:	2101      	movs	r1, #1
    4876:	2017      	movs	r0, #23
    4878:	f000 faf6 	bl	4e68 <PkaCopyDataIntoPkaReg>
    487c:	2308      	movs	r3, #8
    487e:	4a16      	ldr	r2, [pc, #88]	; (48d8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    4880:	2101      	movs	r1, #1
    4882:	200b      	movs	r0, #11
    4884:	f000 faf0 	bl	4e68 <PkaCopyDataIntoPkaReg>
    4888:	f000 fb4a 	bl	4f20 <PkaEcdsaVerify>
    488c:	4604      	mov	r4, r0
    488e:	9801      	ldr	r0, [sp, #4]
    4890:	f000 fad8 	bl	4e44 <PkaFinishAndMutexUnlock>
    4894:	4b11      	ldr	r3, [pc, #68]	; (48dc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4896:	2c00      	cmp	r4, #0
    4898:	bf18      	it	ne
    489a:	461c      	movne	r4, r3
    489c:	21a4      	movs	r1, #164	; 0xa4
    489e:	4628      	mov	r0, r5
    48a0:	f002 f947 	bl	6b32 <SaSi_PalMemSetZero>
    48a4:	4620      	mov	r0, r4
    48a6:	b003      	add	sp, #12
    48a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    48ac:	4c0c      	ldr	r4, [pc, #48]	; (48e0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    48ae:	e7f9      	b.n	48a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    48b0:	4c0c      	ldr	r4, [pc, #48]	; (48e4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    48b2:	e7f7      	b.n	48a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    48b4:	4c0c      	ldr	r4, [pc, #48]	; (48e8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    48b6:	e7f5      	b.n	48a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    48b8:	4c08      	ldr	r4, [pc, #32]	; (48dc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    48ba:	e7ef      	b.n	489c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    48bc:	50841090 	.word	0x50841090
    48c0:	0000714c 	.word	0x0000714c
    48c4:	000071c4 	.word	0x000071c4
    48c8:	0000710c 	.word	0x0000710c
    48cc:	000071b0 	.word	0x000071b0
    48d0:	00007170 	.word	0x00007170
    48d4:	00007190 	.word	0x00007190
    48d8:	0000712c 	.word	0x0000712c
    48dc:	00f00884 	.word	0x00f00884
    48e0:	00f00876 	.word	0x00f00876
    48e4:	00f00880 	.word	0x00f00880
    48e8:	00f00881 	.word	0x00f00881

000048ec <set_digest_in_hw_sha256>:
    48ec:	69c2      	ldr	r2, [r0, #28]
    48ee:	4b0c      	ldr	r3, [pc, #48]	; (4920 <set_digest_in_hw_sha256+0x34>)
    48f0:	601a      	str	r2, [r3, #0]
    48f2:	6982      	ldr	r2, [r0, #24]
    48f4:	f843 2c04 	str.w	r2, [r3, #-4]
    48f8:	6942      	ldr	r2, [r0, #20]
    48fa:	f843 2c08 	str.w	r2, [r3, #-8]
    48fe:	6902      	ldr	r2, [r0, #16]
    4900:	f843 2c0c 	str.w	r2, [r3, #-12]
    4904:	68c2      	ldr	r2, [r0, #12]
    4906:	f843 2c10 	str.w	r2, [r3, #-16]
    490a:	6882      	ldr	r2, [r0, #8]
    490c:	f843 2c14 	str.w	r2, [r3, #-20]
    4910:	6842      	ldr	r2, [r0, #4]
    4912:	f843 2c18 	str.w	r2, [r3, #-24]
    4916:	6802      	ldr	r2, [r0, #0]
    4918:	f843 2c1c 	str.w	r2, [r3, #-28]
    491c:	4770      	bx	lr
    491e:	bf00      	nop
    4920:	5084165c 	.word	0x5084165c

00004924 <read_digest_in_hw_sha256>:
    4924:	4b0c      	ldr	r3, [pc, #48]	; (4958 <read_digest_in_hw_sha256+0x34>)
    4926:	681b      	ldr	r3, [r3, #0]
    4928:	61c3      	str	r3, [r0, #28]
    492a:	4b0c      	ldr	r3, [pc, #48]	; (495c <read_digest_in_hw_sha256+0x38>)
    492c:	681b      	ldr	r3, [r3, #0]
    492e:	6183      	str	r3, [r0, #24]
    4930:	4b0b      	ldr	r3, [pc, #44]	; (4960 <read_digest_in_hw_sha256+0x3c>)
    4932:	681b      	ldr	r3, [r3, #0]
    4934:	6143      	str	r3, [r0, #20]
    4936:	4b0b      	ldr	r3, [pc, #44]	; (4964 <read_digest_in_hw_sha256+0x40>)
    4938:	681b      	ldr	r3, [r3, #0]
    493a:	6103      	str	r3, [r0, #16]
    493c:	4b0a      	ldr	r3, [pc, #40]	; (4968 <read_digest_in_hw_sha256+0x44>)
    493e:	681b      	ldr	r3, [r3, #0]
    4940:	60c3      	str	r3, [r0, #12]
    4942:	4b0a      	ldr	r3, [pc, #40]	; (496c <read_digest_in_hw_sha256+0x48>)
    4944:	681b      	ldr	r3, [r3, #0]
    4946:	6083      	str	r3, [r0, #8]
    4948:	4b09      	ldr	r3, [pc, #36]	; (4970 <read_digest_in_hw_sha256+0x4c>)
    494a:	681b      	ldr	r3, [r3, #0]
    494c:	6043      	str	r3, [r0, #4]
    494e:	4b09      	ldr	r3, [pc, #36]	; (4974 <read_digest_in_hw_sha256+0x50>)
    4950:	681b      	ldr	r3, [r3, #0]
    4952:	6003      	str	r3, [r0, #0]
    4954:	4770      	bx	lr
    4956:	bf00      	nop
    4958:	5084165c 	.word	0x5084165c
    495c:	50841658 	.word	0x50841658
    4960:	50841654 	.word	0x50841654
    4964:	50841650 	.word	0x50841650
    4968:	5084164c 	.word	0x5084164c
    496c:	50841648 	.word	0x50841648
    4970:	50841644 	.word	0x50841644
    4974:	50841640 	.word	0x50841640

00004978 <verify_context_hash_sha256>:
    4978:	b130      	cbz	r0, 4988 <verify_context_hash_sha256+0x10>
    497a:	6802      	ldr	r2, [r0, #0]
    497c:	4b03      	ldr	r3, [pc, #12]	; (498c <verify_context_hash_sha256+0x14>)
    497e:	4804      	ldr	r0, [pc, #16]	; (4990 <verify_context_hash_sha256+0x18>)
    4980:	429a      	cmp	r2, r3
    4982:	bf08      	it	eq
    4984:	2000      	moveq	r0, #0
    4986:	4770      	bx	lr
    4988:	4802      	ldr	r0, [pc, #8]	; (4994 <verify_context_hash_sha256+0x1c>)
    498a:	4770      	bx	lr
    498c:	bbaa55dd 	.word	0xbbaa55dd
    4990:	00f00202 	.word	0x00f00202
    4994:	00f00200 	.word	0x00f00200

00004998 <nrf_cc310_bl_hash_sha256_init>:
    4998:	b538      	push	{r3, r4, r5, lr}
    499a:	4604      	mov	r4, r0
    499c:	b168      	cbz	r0, 49ba <nrf_cc310_bl_hash_sha256_init+0x22>
    499e:	1d05      	adds	r5, r0, #4
    49a0:	2170      	movs	r1, #112	; 0x70
    49a2:	4628      	mov	r0, r5
    49a4:	f002 f8c5 	bl	6b32 <SaSi_PalMemSetZero>
    49a8:	4628      	mov	r0, r5
    49aa:	2220      	movs	r2, #32
    49ac:	4904      	ldr	r1, [pc, #16]	; (49c0 <nrf_cc310_bl_hash_sha256_init+0x28>)
    49ae:	f002 f8bc 	bl	6b2a <SaSi_PalMemCopy>
    49b2:	2000      	movs	r0, #0
    49b4:	4b03      	ldr	r3, [pc, #12]	; (49c4 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    49b6:	6023      	str	r3, [r4, #0]
    49b8:	bd38      	pop	{r3, r4, r5, pc}
    49ba:	4803      	ldr	r0, [pc, #12]	; (49c8 <nrf_cc310_bl_hash_sha256_init+0x30>)
    49bc:	e7fc      	b.n	49b8 <nrf_cc310_bl_hash_sha256_init+0x20>
    49be:	bf00      	nop
    49c0:	000071d8 	.word	0x000071d8
    49c4:	bbaa55dd 	.word	0xbbaa55dd
    49c8:	00f00200 	.word	0x00f00200

000049cc <nrf_cc310_bl_hash_sha256_update>:
    49cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    49d0:	b085      	sub	sp, #20
    49d2:	4615      	mov	r5, r2
    49d4:	466f      	mov	r7, sp
    49d6:	4b27      	ldr	r3, [pc, #156]	; (4a74 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    49d8:	4604      	mov	r4, r0
    49da:	460e      	mov	r6, r1
    49dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    49de:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    49e2:	b92d      	cbnz	r5, 49f0 <nrf_cc310_bl_hash_sha256_update+0x24>
    49e4:	f04f 0900 	mov.w	r9, #0
    49e8:	4648      	mov	r0, r9
    49ea:	b005      	add	sp, #20
    49ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    49f0:	4620      	mov	r0, r4
    49f2:	f7ff ffc1 	bl	4978 <verify_context_hash_sha256>
    49f6:	4681      	mov	r9, r0
    49f8:	2800      	cmp	r0, #0
    49fa:	d1f5      	bne.n	49e8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    49fc:	1d23      	adds	r3, r4, #4
    49fe:	9301      	str	r3, [sp, #4]
    4a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a02:	bba3      	cbnz	r3, 4a6e <nrf_cc310_bl_hash_sha256_update+0xa2>
    4a04:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4a06:	b18b      	cbz	r3, 4a2c <nrf_cc310_bl_hash_sha256_update+0x60>
    4a08:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    4a0c:	45a8      	cmp	r8, r5
    4a0e:	bf28      	it	cs
    4a10:	46a8      	movcs	r8, r5
    4a12:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4a16:	4631      	mov	r1, r6
    4a18:	4418      	add	r0, r3
    4a1a:	4642      	mov	r2, r8
    4a1c:	f002 f885 	bl	6b2a <SaSi_PalMemCopy>
    4a20:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4a22:	4446      	add	r6, r8
    4a24:	4443      	add	r3, r8
    4a26:	6723      	str	r3, [r4, #112]	; 0x70
    4a28:	eba5 0508 	sub.w	r5, r5, r8
    4a2c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4a2e:	2a40      	cmp	r2, #64	; 0x40
    4a30:	d106      	bne.n	4a40 <nrf_cc310_bl_hash_sha256_update+0x74>
    4a32:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4a36:	4638      	mov	r0, r7
    4a38:	f000 fbb4 	bl	51a4 <nrf_cc310_bl_hash_update_internal>
    4a3c:	2300      	movs	r3, #0
    4a3e:	6723      	str	r3, [r4, #112]	; 0x70
    4a40:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    4a44:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    4a48:	d005      	beq.n	4a56 <nrf_cc310_bl_hash_sha256_update+0x8a>
    4a4a:	4631      	mov	r1, r6
    4a4c:	462a      	mov	r2, r5
    4a4e:	4638      	mov	r0, r7
    4a50:	f000 fba8 	bl	51a4 <nrf_cc310_bl_hash_update_internal>
    4a54:	442e      	add	r6, r5
    4a56:	f1b8 0f00 	cmp.w	r8, #0
    4a5a:	d0c3      	beq.n	49e4 <nrf_cc310_bl_hash_sha256_update+0x18>
    4a5c:	4642      	mov	r2, r8
    4a5e:	4631      	mov	r1, r6
    4a60:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4a64:	f002 f861 	bl	6b2a <SaSi_PalMemCopy>
    4a68:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    4a6c:	e7bc      	b.n	49e8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4a6e:	f8df 9008 	ldr.w	r9, [pc, #8]	; 4a78 <nrf_cc310_bl_hash_sha256_update+0xac>
    4a72:	e7b9      	b.n	49e8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4a74:	00006e90 	.word	0x00006e90
    4a78:	00f0020c 	.word	0x00f0020c

00004a7c <nrf_cc310_bl_hash_sha256_finalize>:
    4a7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4a80:	4604      	mov	r4, r0
    4a82:	466f      	mov	r7, sp
    4a84:	4b13      	ldr	r3, [pc, #76]	; (4ad4 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    4a86:	460e      	mov	r6, r1
    4a88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    4a8a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    4a8e:	4620      	mov	r0, r4
    4a90:	f7ff ff72 	bl	4978 <verify_context_hash_sha256>
    4a94:	4680      	mov	r8, r0
    4a96:	b9b0      	cbnz	r0, 4ac6 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4a98:	b1ce      	cbz	r6, 4ace <nrf_cc310_bl_hash_sha256_finalize+0x52>
    4a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a9c:	1d25      	adds	r5, r4, #4
    4a9e:	9501      	str	r5, [sp, #4]
    4aa0:	b93b      	cbnz	r3, 4ab2 <nrf_cc310_bl_hash_sha256_finalize+0x36>
    4aa2:	2301      	movs	r3, #1
    4aa4:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4aa6:	6263      	str	r3, [r4, #36]	; 0x24
    4aa8:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4aac:	4638      	mov	r0, r7
    4aae:	f000 fb79 	bl	51a4 <nrf_cc310_bl_hash_update_internal>
    4ab2:	462b      	mov	r3, r5
    4ab4:	3e04      	subs	r6, #4
    4ab6:	3424      	adds	r4, #36	; 0x24
    4ab8:	f853 2b04 	ldr.w	r2, [r3], #4
    4abc:	ba12      	rev	r2, r2
    4abe:	42a3      	cmp	r3, r4
    4ac0:	f846 2f04 	str.w	r2, [r6, #4]!
    4ac4:	d1f8      	bne.n	4ab8 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    4ac6:	4640      	mov	r0, r8
    4ac8:	b004      	add	sp, #16
    4aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ace:	f8df 8008 	ldr.w	r8, [pc, #8]	; 4ad8 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    4ad2:	e7f8      	b.n	4ac6 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4ad4:	00006e90 	.word	0x00006e90
    4ad8:	00f00205 	.word	0x00f00205

00004adc <nrf_cc310_bl_init>:
    4adc:	4b08      	ldr	r3, [pc, #32]	; (4b00 <nrf_cc310_bl_init+0x24>)
    4ade:	681b      	ldr	r3, [r3, #0]
    4ae0:	0e1b      	lsrs	r3, r3, #24
    4ae2:	2bf0      	cmp	r3, #240	; 0xf0
    4ae4:	d108      	bne.n	4af8 <nrf_cc310_bl_init+0x1c>
    4ae6:	4b07      	ldr	r3, [pc, #28]	; (4b04 <nrf_cc310_bl_init+0x28>)
    4ae8:	681a      	ldr	r2, [r3, #0]
    4aea:	4b07      	ldr	r3, [pc, #28]	; (4b08 <nrf_cc310_bl_init+0x2c>)
    4aec:	429a      	cmp	r2, r3
    4aee:	d105      	bne.n	4afc <nrf_cc310_bl_init+0x20>
    4af0:	2000      	movs	r0, #0
    4af2:	4b06      	ldr	r3, [pc, #24]	; (4b0c <nrf_cc310_bl_init+0x30>)
    4af4:	6018      	str	r0, [r3, #0]
    4af6:	4770      	bx	lr
    4af8:	2005      	movs	r0, #5
    4afa:	4770      	bx	lr
    4afc:	2006      	movs	r0, #6
    4afe:	4770      	bx	lr
    4b00:	50841928 	.word	0x50841928
    4b04:	50841a24 	.word	0x50841a24
    4b08:	20e00000 	.word	0x20e00000
    4b0c:	50841a0c 	.word	0x50841a0c

00004b10 <PkaSetRegsMapTab>:
    4b10:	2200      	movs	r2, #0
    4b12:	b530      	push	{r4, r5, lr}
    4b14:	4613      	mov	r3, r2
    4b16:	f640 75fc 	movw	r5, #4092	; 0xffc
    4b1a:	0049      	lsls	r1, r1, #1
    4b1c:	3802      	subs	r0, #2
    4b1e:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    4b22:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    4b26:	4290      	cmp	r0, r2
    4b28:	ea4f 0484 	mov.w	r4, r4, lsl #2
    4b2c:	f102 0201 	add.w	r2, r2, #1
    4b30:	bfca      	itet	gt
    4b32:	6023      	strgt	r3, [r4, #0]
    4b34:	6025      	strle	r5, [r4, #0]
    4b36:	185b      	addgt	r3, r3, r1
    4b38:	2a1e      	cmp	r2, #30
    4b3a:	d1f0      	bne.n	4b1e <PkaSetRegsMapTab+0xe>
    4b3c:	4a03      	ldr	r2, [pc, #12]	; (4b4c <PkaSetRegsMapTab+0x3c>)
    4b3e:	6013      	str	r3, [r2, #0]
    4b40:	440b      	add	r3, r1
    4b42:	6053      	str	r3, [r2, #4]
    4b44:	4b02      	ldr	r3, [pc, #8]	; (4b50 <PkaSetRegsMapTab+0x40>)
    4b46:	4a03      	ldr	r2, [pc, #12]	; (4b54 <PkaSetRegsMapTab+0x44>)
    4b48:	601a      	str	r2, [r3, #0]
    4b4a:	bd30      	pop	{r4, r5, pc}
    4b4c:	50841078 	.word	0x50841078
    4b50:	50841084 	.word	0x50841084
    4b54:	000ff820 	.word	0x000ff820

00004b58 <PkaGetRegEffectiveSizeInBits>:
    4b58:	4b1e      	ldr	r3, [pc, #120]	; (4bd4 <PkaGetRegEffectiveSizeInBits+0x7c>)
    4b5a:	b530      	push	{r4, r5, lr}
    4b5c:	461a      	mov	r2, r3
    4b5e:	b085      	sub	sp, #20
    4b60:	6819      	ldr	r1, [r3, #0]
    4b62:	9100      	str	r1, [sp, #0]
    4b64:	9900      	ldr	r1, [sp, #0]
    4b66:	07cc      	lsls	r4, r1, #31
    4b68:	d5fa      	bpl.n	4b60 <PkaGetRegEffectiveSizeInBits+0x8>
    4b6a:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4b6e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4b72:	0080      	lsls	r0, r0, #2
    4b74:	6801      	ldr	r1, [r0, #0]
    4b76:	6813      	ldr	r3, [r2, #0]
    4b78:	9301      	str	r3, [sp, #4]
    4b7a:	9b01      	ldr	r3, [sp, #4]
    4b7c:	07d8      	lsls	r0, r3, #31
    4b7e:	d5fa      	bpl.n	4b76 <PkaGetRegEffectiveSizeInBits+0x1e>
    4b80:	4b15      	ldr	r3, [pc, #84]	; (4bd8 <PkaGetRegEffectiveSizeInBits+0x80>)
    4b82:	4c16      	ldr	r4, [pc, #88]	; (4bdc <PkaGetRegEffectiveSizeInBits+0x84>)
    4b84:	6818      	ldr	r0, [r3, #0]
    4b86:	2320      	movs	r3, #32
    4b88:	301f      	adds	r0, #31
    4b8a:	fb90 f0f3 	sdiv	r0, r0, r3
    4b8e:	4d14      	ldr	r5, [pc, #80]	; (4be0 <PkaGetRegEffectiveSizeInBits+0x88>)
    4b90:	3801      	subs	r0, #1
    4b92:	2800      	cmp	r0, #0
    4b94:	da10      	bge.n	4bb8 <PkaGetRegEffectiveSizeInBits+0x60>
    4b96:	2300      	movs	r3, #0
    4b98:	3001      	adds	r0, #1
    4b9a:	0140      	lsls	r0, r0, #5
    4b9c:	b153      	cbz	r3, 4bb4 <PkaGetRegEffectiveSizeInBits+0x5c>
    4b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4ba2:	f1a0 0120 	sub.w	r1, r0, #32
    4ba6:	4213      	tst	r3, r2
    4ba8:	d104      	bne.n	4bb4 <PkaGetRegEffectiveSizeInBits+0x5c>
    4baa:	3801      	subs	r0, #1
    4bac:	4288      	cmp	r0, r1
    4bae:	ea4f 0252 	mov.w	r2, r2, lsr #1
    4bb2:	d1f8      	bne.n	4ba6 <PkaGetRegEffectiveSizeInBits+0x4e>
    4bb4:	b005      	add	sp, #20
    4bb6:	bd30      	pop	{r4, r5, pc}
    4bb8:	6813      	ldr	r3, [r2, #0]
    4bba:	9303      	str	r3, [sp, #12]
    4bbc:	9b03      	ldr	r3, [sp, #12]
    4bbe:	07db      	lsls	r3, r3, #31
    4bc0:	d5fa      	bpl.n	4bb8 <PkaGetRegEffectiveSizeInBits+0x60>
    4bc2:	1843      	adds	r3, r0, r1
    4bc4:	6023      	str	r3, [r4, #0]
    4bc6:	682b      	ldr	r3, [r5, #0]
    4bc8:	9302      	str	r3, [sp, #8]
    4bca:	9b02      	ldr	r3, [sp, #8]
    4bcc:	2b00      	cmp	r3, #0
    4bce:	d1e3      	bne.n	4b98 <PkaGetRegEffectiveSizeInBits+0x40>
    4bd0:	3801      	subs	r0, #1
    4bd2:	e7de      	b.n	4b92 <PkaGetRegEffectiveSizeInBits+0x3a>
    4bd4:	508410b4 	.word	0x508410b4
    4bd8:	508410ac 	.word	0x508410ac
    4bdc:	508410e4 	.word	0x508410e4
    4be0:	508410dc 	.word	0x508410dc

00004be4 <PkaGetNextMsBit>:
    4be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4be6:	681d      	ldr	r5, [r3, #0]
    4be8:	b085      	sub	sp, #20
    4bea:	f001 041f 	and.w	r4, r1, #31
    4bee:	b90d      	cbnz	r5, 4bf4 <PkaGetNextMsBit+0x10>
    4bf0:	2c1f      	cmp	r4, #31
    4bf2:	d128      	bne.n	4c46 <PkaGetNextMsBit+0x62>
    4bf4:	4d17      	ldr	r5, [pc, #92]	; (4c54 <PkaGetNextMsBit+0x70>)
    4bf6:	462e      	mov	r6, r5
    4bf8:	682f      	ldr	r7, [r5, #0]
    4bfa:	9701      	str	r7, [sp, #4]
    4bfc:	9f01      	ldr	r7, [sp, #4]
    4bfe:	07ff      	lsls	r7, r7, #31
    4c00:	d5fa      	bpl.n	4bf8 <PkaGetNextMsBit+0x14>
    4c02:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4c06:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4c0a:	0080      	lsls	r0, r0, #2
    4c0c:	6800      	ldr	r0, [r0, #0]
    4c0e:	6835      	ldr	r5, [r6, #0]
    4c10:	9503      	str	r5, [sp, #12]
    4c12:	9d03      	ldr	r5, [sp, #12]
    4c14:	07ed      	lsls	r5, r5, #31
    4c16:	d5fa      	bpl.n	4c0e <PkaGetNextMsBit+0x2a>
    4c18:	2c1f      	cmp	r4, #31
    4c1a:	eb00 1061 	add.w	r0, r0, r1, asr #5
    4c1e:	bf18      	it	ne
    4c20:	43c9      	mvnne	r1, r1
    4c22:	4d0d      	ldr	r5, [pc, #52]	; (4c58 <PkaGetNextMsBit+0x74>)
    4c24:	bf18      	it	ne
    4c26:	f001 011f 	andne.w	r1, r1, #31
    4c2a:	6028      	str	r0, [r5, #0]
    4c2c:	480b      	ldr	r0, [pc, #44]	; (4c5c <PkaGetNextMsBit+0x78>)
    4c2e:	6800      	ldr	r0, [r0, #0]
    4c30:	9002      	str	r0, [sp, #8]
    4c32:	9802      	ldr	r0, [sp, #8]
    4c34:	bf1c      	itt	ne
    4c36:	fa00 f101 	lslne.w	r1, r0, r1
    4c3a:	6011      	strne	r1, [r2, #0]
    4c3c:	f04f 0100 	mov.w	r1, #0
    4c40:	bf08      	it	eq
    4c42:	6010      	streq	r0, [r2, #0]
    4c44:	6019      	str	r1, [r3, #0]
    4c46:	6810      	ldr	r0, [r2, #0]
    4c48:	0043      	lsls	r3, r0, #1
    4c4a:	0fc0      	lsrs	r0, r0, #31
    4c4c:	6013      	str	r3, [r2, #0]
    4c4e:	b005      	add	sp, #20
    4c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c52:	bf00      	nop
    4c54:	508410b4 	.word	0x508410b4
    4c58:	508410e4 	.word	0x508410e4
    4c5c:	508410dc 	.word	0x508410dc

00004c60 <PkaSetRegsSizesTab>:
    4c60:	4b0c      	ldr	r3, [pc, #48]	; (4c94 <PkaSetRegsSizesTab+0x34>)
    4c62:	0189      	lsls	r1, r1, #6
    4c64:	6018      	str	r0, [r3, #0]
    4c66:	303f      	adds	r0, #63	; 0x3f
    4c68:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    4c6c:	3040      	adds	r0, #64	; 0x40
    4c6e:	6058      	str	r0, [r3, #4]
    4c70:	6099      	str	r1, [r3, #8]
    4c72:	4809      	ldr	r0, [pc, #36]	; (4c98 <PkaSetRegsSizesTab+0x38>)
    4c74:	60d9      	str	r1, [r3, #12]
    4c76:	6119      	str	r1, [r3, #16]
    4c78:	6159      	str	r1, [r3, #20]
    4c7a:	6199      	str	r1, [r3, #24]
    4c7c:	331c      	adds	r3, #28
    4c7e:	b082      	sub	sp, #8
    4c80:	6019      	str	r1, [r3, #0]
    4c82:	6802      	ldr	r2, [r0, #0]
    4c84:	9201      	str	r2, [sp, #4]
    4c86:	9a01      	ldr	r2, [sp, #4]
    4c88:	07d2      	lsls	r2, r2, #31
    4c8a:	d5fa      	bpl.n	4c82 <PkaSetRegsSizesTab+0x22>
    4c8c:	6019      	str	r1, [r3, #0]
    4c8e:	b002      	add	sp, #8
    4c90:	4770      	bx	lr
    4c92:	bf00      	nop
    4c94:	50841090 	.word	0x50841090
    4c98:	508410b4 	.word	0x508410b4

00004c9c <PkaInitPka>:
    4c9c:	b538      	push	{r3, r4, r5, lr}
    4c9e:	f1a0 0320 	sub.w	r3, r0, #32
    4ca2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    4ca6:	4605      	mov	r5, r0
    4ca8:	d82c      	bhi.n	4d04 <PkaInitPka+0x68>
    4caa:	288f      	cmp	r0, #143	; 0x8f
    4cac:	d826      	bhi.n	4cfc <PkaInitPka+0x60>
    4cae:	f100 0347 	add.w	r3, r0, #71	; 0x47
    4cb2:	f100 0466 	add.w	r4, r0, #102	; 0x66
    4cb6:	06db      	lsls	r3, r3, #27
    4cb8:	ea4f 1454 	mov.w	r4, r4, lsr #5
    4cbc:	d000      	beq.n	4cc0 <PkaInitPka+0x24>
    4cbe:	3401      	adds	r4, #1
    4cc0:	0164      	lsls	r4, r4, #5
    4cc2:	343f      	adds	r4, #63	; 0x3f
    4cc4:	09a4      	lsrs	r4, r4, #6
    4cc6:	3401      	adds	r4, #1
    4cc8:	b111      	cbz	r1, 4cd0 <PkaInitPka+0x34>
    4cca:	42a1      	cmp	r1, r4
    4ccc:	d31a      	bcc.n	4d04 <PkaInitPka+0x68>
    4cce:	460c      	mov	r4, r1
    4cd0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    4cd4:	00e3      	lsls	r3, r4, #3
    4cd6:	fbb0 f0f3 	udiv	r0, r0, r3
    4cda:	2820      	cmp	r0, #32
    4cdc:	bf28      	it	cs
    4cde:	2020      	movcs	r0, #32
    4ce0:	b102      	cbz	r2, 4ce4 <PkaInitPka+0x48>
    4ce2:	6010      	str	r0, [r2, #0]
    4ce4:	2201      	movs	r2, #1
    4ce6:	4b08      	ldr	r3, [pc, #32]	; (4d08 <PkaInitPka+0x6c>)
    4ce8:	4621      	mov	r1, r4
    4cea:	601a      	str	r2, [r3, #0]
    4cec:	f7ff ff10 	bl	4b10 <PkaSetRegsMapTab>
    4cf0:	4628      	mov	r0, r5
    4cf2:	4621      	mov	r1, r4
    4cf4:	f7ff ffb4 	bl	4c60 <PkaSetRegsSizesTab>
    4cf8:	2000      	movs	r0, #0
    4cfa:	bd38      	pop	{r3, r4, r5, pc}
    4cfc:	f100 041f 	add.w	r4, r0, #31
    4d00:	0964      	lsrs	r4, r4, #5
    4d02:	e7dd      	b.n	4cc0 <PkaInitPka+0x24>
    4d04:	4801      	ldr	r0, [pc, #4]	; (4d0c <PkaInitPka+0x70>)
    4d06:	e7f8      	b.n	4cfa <PkaInitPka+0x5e>
    4d08:	5084181c 	.word	0x5084181c
    4d0c:	00f02122 	.word	0x00f02122

00004d10 <PkaClearBlockOfRegs>:
    4d10:	4b46      	ldr	r3, [pc, #280]	; (4e2c <PkaClearBlockOfRegs+0x11c>)
    4d12:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d14:	461d      	mov	r5, r3
    4d16:	b089      	sub	sp, #36	; 0x24
    4d18:	681c      	ldr	r4, [r3, #0]
    4d1a:	9401      	str	r4, [sp, #4]
    4d1c:	9c01      	ldr	r4, [sp, #4]
    4d1e:	07e4      	lsls	r4, r4, #31
    4d20:	d5fa      	bpl.n	4d18 <PkaClearBlockOfRegs+0x8>
    4d22:	4b43      	ldr	r3, [pc, #268]	; (4e30 <PkaClearBlockOfRegs+0x120>)
    4d24:	2400      	movs	r4, #0
    4d26:	4413      	add	r3, r2
    4d28:	009b      	lsls	r3, r3, #2
    4d2a:	681a      	ldr	r2, [r3, #0]
    4d2c:	180b      	adds	r3, r1, r0
    4d2e:	2b1e      	cmp	r3, #30
    4d30:	bf88      	it	hi
    4d32:	f1c0 011e 	rsbhi	r1, r0, #30
    4d36:	321f      	adds	r2, #31
    4d38:	180b      	adds	r3, r1, r0
    4d3a:	0952      	lsrs	r2, r2, #5
    4d3c:	4353      	muls	r3, r2
    4d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4d42:	bf84      	itt	hi
    4d44:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    4d48:	fbb1 f1f2 	udivhi	r1, r1, r2
    4d4c:	4627      	mov	r7, r4
    4d4e:	bf88      	it	hi
    4d50:	1a09      	subhi	r1, r1, r0
    4d52:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 4e38 <PkaClearBlockOfRegs+0x128>
    4d56:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4d5a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 4e3c <PkaClearBlockOfRegs+0x12c>
    4d5e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4d62:	42a1      	cmp	r1, r4
    4d64:	dc33      	bgt.n	4dce <PkaClearBlockOfRegs+0xbe>
    4d66:	682b      	ldr	r3, [r5, #0]
    4d68:	9304      	str	r3, [sp, #16]
    4d6a:	9b04      	ldr	r3, [sp, #16]
    4d6c:	07db      	lsls	r3, r3, #31
    4d6e:	d5fa      	bpl.n	4d66 <PkaClearBlockOfRegs+0x56>
    4d70:	4b30      	ldr	r3, [pc, #192]	; (4e34 <PkaClearBlockOfRegs+0x124>)
    4d72:	681b      	ldr	r3, [r3, #0]
    4d74:	6829      	ldr	r1, [r5, #0]
    4d76:	9105      	str	r1, [sp, #20]
    4d78:	9905      	ldr	r1, [sp, #20]
    4d7a:	07cf      	lsls	r7, r1, #31
    4d7c:	d5fa      	bpl.n	4d74 <PkaClearBlockOfRegs+0x64>
    4d7e:	4c2e      	ldr	r4, [pc, #184]	; (4e38 <PkaClearBlockOfRegs+0x128>)
    4d80:	492e      	ldr	r1, [pc, #184]	; (4e3c <PkaClearBlockOfRegs+0x12c>)
    4d82:	6023      	str	r3, [r4, #0]
    4d84:	2300      	movs	r3, #0
    4d86:	461e      	mov	r6, r3
    4d88:	4293      	cmp	r3, r2
    4d8a:	f103 0001 	add.w	r0, r3, #1
    4d8e:	d140      	bne.n	4e12 <PkaClearBlockOfRegs+0x102>
    4d90:	4619      	mov	r1, r3
    4d92:	2600      	movs	r6, #0
    4d94:	f020 0201 	bic.w	r2, r0, #1
    4d98:	4828      	ldr	r0, [pc, #160]	; (4e3c <PkaClearBlockOfRegs+0x12c>)
    4d9a:	428a      	cmp	r2, r1
    4d9c:	d83c      	bhi.n	4e18 <PkaClearBlockOfRegs+0x108>
    4d9e:	6829      	ldr	r1, [r5, #0]
    4da0:	9106      	str	r1, [sp, #24]
    4da2:	9906      	ldr	r1, [sp, #24]
    4da4:	07ce      	lsls	r6, r1, #31
    4da6:	d5fa      	bpl.n	4d9e <PkaClearBlockOfRegs+0x8e>
    4da8:	4925      	ldr	r1, [pc, #148]	; (4e40 <PkaClearBlockOfRegs+0x130>)
    4daa:	6809      	ldr	r1, [r1, #0]
    4dac:	6828      	ldr	r0, [r5, #0]
    4dae:	9007      	str	r0, [sp, #28]
    4db0:	9807      	ldr	r0, [sp, #28]
    4db2:	07c0      	lsls	r0, r0, #31
    4db4:	d5fa      	bpl.n	4dac <PkaClearBlockOfRegs+0x9c>
    4db6:	6021      	str	r1, [r4, #0]
    4db8:	2100      	movs	r1, #0
    4dba:	460c      	mov	r4, r1
    4dbc:	481f      	ldr	r0, [pc, #124]	; (4e3c <PkaClearBlockOfRegs+0x12c>)
    4dbe:	428b      	cmp	r3, r1
    4dc0:	d12d      	bne.n	4e1e <PkaClearBlockOfRegs+0x10e>
    4dc2:	2000      	movs	r0, #0
    4dc4:	491d      	ldr	r1, [pc, #116]	; (4e3c <PkaClearBlockOfRegs+0x12c>)
    4dc6:	429a      	cmp	r2, r3
    4dc8:	d82c      	bhi.n	4e24 <PkaClearBlockOfRegs+0x114>
    4dca:	b009      	add	sp, #36	; 0x24
    4dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dce:	682b      	ldr	r3, [r5, #0]
    4dd0:	9302      	str	r3, [sp, #8]
    4dd2:	9b02      	ldr	r3, [sp, #8]
    4dd4:	07db      	lsls	r3, r3, #31
    4dd6:	d5fa      	bpl.n	4dce <PkaClearBlockOfRegs+0xbe>
    4dd8:	1903      	adds	r3, r0, r4
    4dda:	009b      	lsls	r3, r3, #2
    4ddc:	681b      	ldr	r3, [r3, #0]
    4dde:	682e      	ldr	r6, [r5, #0]
    4de0:	9603      	str	r6, [sp, #12]
    4de2:	9e03      	ldr	r6, [sp, #12]
    4de4:	07f6      	lsls	r6, r6, #31
    4de6:	d5fa      	bpl.n	4dde <PkaClearBlockOfRegs+0xce>
    4de8:	f8ce 3000 	str.w	r3, [lr]
    4dec:	2300      	movs	r3, #0
    4dee:	4293      	cmp	r3, r2
    4df0:	f103 0301 	add.w	r3, r3, #1
    4df4:	d106      	bne.n	4e04 <PkaClearBlockOfRegs+0xf4>
    4df6:	4616      	mov	r6, r2
    4df8:	f023 0301 	bic.w	r3, r3, #1
    4dfc:	42b3      	cmp	r3, r6
    4dfe:	d804      	bhi.n	4e0a <PkaClearBlockOfRegs+0xfa>
    4e00:	3401      	adds	r4, #1
    4e02:	e7ae      	b.n	4d62 <PkaClearBlockOfRegs+0x52>
    4e04:	f8cc 7000 	str.w	r7, [ip]
    4e08:	e7f1      	b.n	4dee <PkaClearBlockOfRegs+0xde>
    4e0a:	f8cc 7000 	str.w	r7, [ip]
    4e0e:	3601      	adds	r6, #1
    4e10:	e7f4      	b.n	4dfc <PkaClearBlockOfRegs+0xec>
    4e12:	600e      	str	r6, [r1, #0]
    4e14:	4603      	mov	r3, r0
    4e16:	e7b7      	b.n	4d88 <PkaClearBlockOfRegs+0x78>
    4e18:	6006      	str	r6, [r0, #0]
    4e1a:	3101      	adds	r1, #1
    4e1c:	e7bd      	b.n	4d9a <PkaClearBlockOfRegs+0x8a>
    4e1e:	6004      	str	r4, [r0, #0]
    4e20:	3101      	adds	r1, #1
    4e22:	e7cc      	b.n	4dbe <PkaClearBlockOfRegs+0xae>
    4e24:	6008      	str	r0, [r1, #0]
    4e26:	3301      	adds	r3, #1
    4e28:	e7cd      	b.n	4dc6 <PkaClearBlockOfRegs+0xb6>
    4e2a:	bf00      	nop
    4e2c:	508410b4 	.word	0x508410b4
    4e30:	14210424 	.word	0x14210424
    4e34:	5084107c 	.word	0x5084107c
    4e38:	508410d4 	.word	0x508410d4
    4e3c:	508410d8 	.word	0x508410d8
    4e40:	50841078 	.word	0x50841078

00004e44 <PkaFinishAndMutexUnlock>:
    4e44:	b508      	push	{r3, lr}
    4e46:	b140      	cbz	r0, 4e5a <PkaFinishAndMutexUnlock+0x16>
    4e48:	2820      	cmp	r0, #32
    4e4a:	4601      	mov	r1, r0
    4e4c:	f04f 0207 	mov.w	r2, #7
    4e50:	bf28      	it	cs
    4e52:	2120      	movcs	r1, #32
    4e54:	2000      	movs	r0, #0
    4e56:	f7ff ff5b 	bl	4d10 <PkaClearBlockOfRegs>
    4e5a:	2200      	movs	r2, #0
    4e5c:	4b01      	ldr	r3, [pc, #4]	; (4e64 <PkaFinishAndMutexUnlock+0x20>)
    4e5e:	601a      	str	r2, [r3, #0]
    4e60:	bd08      	pop	{r3, pc}
    4e62:	bf00      	nop
    4e64:	5084181c 	.word	0x5084181c

00004e68 <PkaCopyDataIntoPkaReg>:
    4e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6a:	4d29      	ldr	r5, [pc, #164]	; (4f10 <PkaCopyDataIntoPkaReg+0xa8>)
    4e6c:	b085      	sub	sp, #20
    4e6e:	462c      	mov	r4, r5
    4e70:	682e      	ldr	r6, [r5, #0]
    4e72:	9600      	str	r6, [sp, #0]
    4e74:	9e00      	ldr	r6, [sp, #0]
    4e76:	07f6      	lsls	r6, r6, #31
    4e78:	d5fa      	bpl.n	4e70 <PkaCopyDataIntoPkaReg+0x8>
    4e7a:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4e7e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4e82:	0080      	lsls	r0, r0, #2
    4e84:	6805      	ldr	r5, [r0, #0]
    4e86:	6820      	ldr	r0, [r4, #0]
    4e88:	9001      	str	r0, [sp, #4]
    4e8a:	9801      	ldr	r0, [sp, #4]
    4e8c:	07c7      	lsls	r7, r0, #31
    4e8e:	d5fa      	bpl.n	4e86 <PkaCopyDataIntoPkaReg+0x1e>
    4e90:	4820      	ldr	r0, [pc, #128]	; (4f14 <PkaCopyDataIntoPkaReg+0xac>)
    4e92:	4f21      	ldr	r7, [pc, #132]	; (4f18 <PkaCopyDataIntoPkaReg+0xb0>)
    4e94:	6005      	str	r5, [r0, #0]
    4e96:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    4e9a:	42b2      	cmp	r2, r6
    4e9c:	d129      	bne.n	4ef2 <PkaCopyDataIntoPkaReg+0x8a>
    4e9e:	2700      	movs	r7, #0
    4ea0:	1c5a      	adds	r2, r3, #1
    4ea2:	4e1d      	ldr	r6, [pc, #116]	; (4f18 <PkaCopyDataIntoPkaReg+0xb0>)
    4ea4:	f022 0201 	bic.w	r2, r2, #1
    4ea8:	429a      	cmp	r2, r3
    4eaa:	d827      	bhi.n	4efc <PkaCopyDataIntoPkaReg+0x94>
    4eac:	6823      	ldr	r3, [r4, #0]
    4eae:	9302      	str	r3, [sp, #8]
    4eb0:	9b02      	ldr	r3, [sp, #8]
    4eb2:	07de      	lsls	r6, r3, #31
    4eb4:	d5fa      	bpl.n	4eac <PkaCopyDataIntoPkaReg+0x44>
    4eb6:	4b19      	ldr	r3, [pc, #100]	; (4f1c <PkaCopyDataIntoPkaReg+0xb4>)
    4eb8:	440b      	add	r3, r1
    4eba:	009b      	lsls	r3, r3, #2
    4ebc:	681b      	ldr	r3, [r3, #0]
    4ebe:	331f      	adds	r3, #31
    4ec0:	095b      	lsrs	r3, r3, #5
    4ec2:	429a      	cmp	r2, r3
    4ec4:	d213      	bcs.n	4eee <PkaCopyDataIntoPkaReg+0x86>
    4ec6:	6821      	ldr	r1, [r4, #0]
    4ec8:	9103      	str	r1, [sp, #12]
    4eca:	9903      	ldr	r1, [sp, #12]
    4ecc:	07c9      	lsls	r1, r1, #31
    4ece:	d5fa      	bpl.n	4ec6 <PkaCopyDataIntoPkaReg+0x5e>
    4ed0:	2100      	movs	r1, #0
    4ed2:	4415      	add	r5, r2
    4ed4:	6005      	str	r5, [r0, #0]
    4ed6:	4608      	mov	r0, r1
    4ed8:	1a9b      	subs	r3, r3, r2
    4eda:	4a0f      	ldr	r2, [pc, #60]	; (4f18 <PkaCopyDataIntoPkaReg+0xb0>)
    4edc:	428b      	cmp	r3, r1
    4ede:	d810      	bhi.n	4f02 <PkaCopyDataIntoPkaReg+0x9a>
    4ee0:	2000      	movs	r0, #0
    4ee2:	1c5a      	adds	r2, r3, #1
    4ee4:	490c      	ldr	r1, [pc, #48]	; (4f18 <PkaCopyDataIntoPkaReg+0xb0>)
    4ee6:	f022 0201 	bic.w	r2, r2, #1
    4eea:	429a      	cmp	r2, r3
    4eec:	d80c      	bhi.n	4f08 <PkaCopyDataIntoPkaReg+0xa0>
    4eee:	b005      	add	sp, #20
    4ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ef2:	f852 cb04 	ldr.w	ip, [r2], #4
    4ef6:	f8c7 c000 	str.w	ip, [r7]
    4efa:	e7ce      	b.n	4e9a <PkaCopyDataIntoPkaReg+0x32>
    4efc:	6037      	str	r7, [r6, #0]
    4efe:	3301      	adds	r3, #1
    4f00:	e7d2      	b.n	4ea8 <PkaCopyDataIntoPkaReg+0x40>
    4f02:	6010      	str	r0, [r2, #0]
    4f04:	3101      	adds	r1, #1
    4f06:	e7e9      	b.n	4edc <PkaCopyDataIntoPkaReg+0x74>
    4f08:	6008      	str	r0, [r1, #0]
    4f0a:	3301      	adds	r3, #1
    4f0c:	e7ed      	b.n	4eea <PkaCopyDataIntoPkaReg+0x82>
    4f0e:	bf00      	nop
    4f10:	508410b4 	.word	0x508410b4
    4f14:	508410d4 	.word	0x508410d4
    4f18:	508410d8 	.word	0x508410d8
    4f1c:	14210424 	.word	0x14210424

00004f20 <PkaEcdsaVerify>:
    4f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f24:	4b81      	ldr	r3, [pc, #516]	; (512c <PkaEcdsaVerify+0x20c>)
    4f26:	b0a0      	sub	sp, #128	; 0x80
    4f28:	681d      	ldr	r5, [r3, #0]
    4f2a:	6898      	ldr	r0, [r3, #8]
    4f2c:	3320      	adds	r3, #32
    4f2e:	461e      	mov	r6, r3
    4f30:	681a      	ldr	r2, [r3, #0]
    4f32:	9201      	str	r2, [sp, #4]
    4f34:	9a01      	ldr	r2, [sp, #4]
    4f36:	07d7      	lsls	r7, r2, #31
    4f38:	d5fa      	bpl.n	4f30 <PkaEcdsaVerify+0x10>
    4f3a:	4b7d      	ldr	r3, [pc, #500]	; (5130 <PkaEcdsaVerify+0x210>)
    4f3c:	4a7d      	ldr	r2, [pc, #500]	; (5134 <PkaEcdsaVerify+0x214>)
    4f3e:	601a      	str	r2, [r3, #0]
    4f40:	6832      	ldr	r2, [r6, #0]
    4f42:	9202      	str	r2, [sp, #8]
    4f44:	9a02      	ldr	r2, [sp, #8]
    4f46:	07d4      	lsls	r4, r2, #31
    4f48:	d5fa      	bpl.n	4f40 <PkaEcdsaVerify+0x20>
    4f4a:	4a7b      	ldr	r2, [pc, #492]	; (5138 <PkaEcdsaVerify+0x218>)
    4f4c:	601a      	str	r2, [r3, #0]
    4f4e:	4a7b      	ldr	r2, [pc, #492]	; (513c <PkaEcdsaVerify+0x21c>)
    4f50:	4614      	mov	r4, r2
    4f52:	6811      	ldr	r1, [r2, #0]
    4f54:	9103      	str	r1, [sp, #12]
    4f56:	9903      	ldr	r1, [sp, #12]
    4f58:	07c9      	lsls	r1, r1, #31
    4f5a:	d5fa      	bpl.n	4f52 <PkaEcdsaVerify+0x32>
    4f5c:	4a78      	ldr	r2, [pc, #480]	; (5140 <PkaEcdsaVerify+0x220>)
    4f5e:	6811      	ldr	r1, [r2, #0]
    4f60:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4f64:	6837      	ldr	r7, [r6, #0]
    4f66:	9704      	str	r7, [sp, #16]
    4f68:	9f04      	ldr	r7, [sp, #16]
    4f6a:	07ff      	lsls	r7, r7, #31
    4f6c:	d5fa      	bpl.n	4f64 <PkaEcdsaVerify+0x44>
    4f6e:	4f75      	ldr	r7, [pc, #468]	; (5144 <PkaEcdsaVerify+0x224>)
    4f70:	601f      	str	r7, [r3, #0]
    4f72:	6827      	ldr	r7, [r4, #0]
    4f74:	9705      	str	r7, [sp, #20]
    4f76:	9f05      	ldr	r7, [sp, #20]
    4f78:	07ff      	lsls	r7, r7, #31
    4f7a:	d5fa      	bpl.n	4f72 <PkaEcdsaVerify+0x52>
    4f7c:	6817      	ldr	r7, [r2, #0]
    4f7e:	2900      	cmp	r1, #0
    4f80:	f000 80cf 	beq.w	5122 <PkaEcdsaVerify+0x202>
    4f84:	05b9      	lsls	r1, r7, #22
    4f86:	f140 80cc 	bpl.w	5122 <PkaEcdsaVerify+0x202>
    4f8a:	6831      	ldr	r1, [r6, #0]
    4f8c:	9106      	str	r1, [sp, #24]
    4f8e:	9906      	ldr	r1, [sp, #24]
    4f90:	07cf      	lsls	r7, r1, #31
    4f92:	d5fa      	bpl.n	4f8a <PkaEcdsaVerify+0x6a>
    4f94:	496c      	ldr	r1, [pc, #432]	; (5148 <PkaEcdsaVerify+0x228>)
    4f96:	6019      	str	r1, [r3, #0]
    4f98:	6821      	ldr	r1, [r4, #0]
    4f9a:	9107      	str	r1, [sp, #28]
    4f9c:	9907      	ldr	r1, [sp, #28]
    4f9e:	07c9      	lsls	r1, r1, #31
    4fa0:	d5fa      	bpl.n	4f98 <PkaEcdsaVerify+0x78>
    4fa2:	6811      	ldr	r1, [r2, #0]
    4fa4:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4fa8:	6837      	ldr	r7, [r6, #0]
    4faa:	9708      	str	r7, [sp, #32]
    4fac:	9f08      	ldr	r7, [sp, #32]
    4fae:	07ff      	lsls	r7, r7, #31
    4fb0:	d5fa      	bpl.n	4fa8 <PkaEcdsaVerify+0x88>
    4fb2:	4f66      	ldr	r7, [pc, #408]	; (514c <PkaEcdsaVerify+0x22c>)
    4fb4:	601f      	str	r7, [r3, #0]
    4fb6:	6827      	ldr	r7, [r4, #0]
    4fb8:	9709      	str	r7, [sp, #36]	; 0x24
    4fba:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4fbc:	07ff      	lsls	r7, r7, #31
    4fbe:	d5fa      	bpl.n	4fb6 <PkaEcdsaVerify+0x96>
    4fc0:	6812      	ldr	r2, [r2, #0]
    4fc2:	2900      	cmp	r1, #0
    4fc4:	f000 80af 	beq.w	5126 <PkaEcdsaVerify+0x206>
    4fc8:	0591      	lsls	r1, r2, #22
    4fca:	f140 80ac 	bpl.w	5126 <PkaEcdsaVerify+0x206>
    4fce:	6832      	ldr	r2, [r6, #0]
    4fd0:	920a      	str	r2, [sp, #40]	; 0x28
    4fd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4fd4:	07d2      	lsls	r2, r2, #31
    4fd6:	d5fa      	bpl.n	4fce <PkaEcdsaVerify+0xae>
    4fd8:	4a56      	ldr	r2, [pc, #344]	; (5134 <PkaEcdsaVerify+0x214>)
    4fda:	601a      	str	r2, [r3, #0]
    4fdc:	6832      	ldr	r2, [r6, #0]
    4fde:	920b      	str	r2, [sp, #44]	; 0x2c
    4fe0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4fe2:	07d7      	lsls	r7, r2, #31
    4fe4:	d5fa      	bpl.n	4fdc <PkaEcdsaVerify+0xbc>
    4fe6:	4a5a      	ldr	r2, [pc, #360]	; (5150 <PkaEcdsaVerify+0x230>)
    4fe8:	601a      	str	r2, [r3, #0]
    4fea:	6831      	ldr	r1, [r6, #0]
    4fec:	910c      	str	r1, [sp, #48]	; 0x30
    4fee:	990c      	ldr	r1, [sp, #48]	; 0x30
    4ff0:	07cc      	lsls	r4, r1, #31
    4ff2:	d5fa      	bpl.n	4fea <PkaEcdsaVerify+0xca>
    4ff4:	4957      	ldr	r1, [pc, #348]	; (5154 <PkaEcdsaVerify+0x234>)
    4ff6:	6019      	str	r1, [r3, #0]
    4ff8:	6831      	ldr	r1, [r6, #0]
    4ffa:	910d      	str	r1, [sp, #52]	; 0x34
    4ffc:	990d      	ldr	r1, [sp, #52]	; 0x34
    4ffe:	07c9      	lsls	r1, r1, #31
    5000:	d5fa      	bpl.n	4ff8 <PkaEcdsaVerify+0xd8>
    5002:	4955      	ldr	r1, [pc, #340]	; (5158 <PkaEcdsaVerify+0x238>)
    5004:	6019      	str	r1, [r3, #0]
    5006:	6831      	ldr	r1, [r6, #0]
    5008:	910e      	str	r1, [sp, #56]	; 0x38
    500a:	990e      	ldr	r1, [sp, #56]	; 0x38
    500c:	07cf      	lsls	r7, r1, #31
    500e:	d5fa      	bpl.n	5006 <PkaEcdsaVerify+0xe6>
    5010:	4952      	ldr	r1, [pc, #328]	; (515c <PkaEcdsaVerify+0x23c>)
    5012:	6019      	str	r1, [r3, #0]
    5014:	6831      	ldr	r1, [r6, #0]
    5016:	910f      	str	r1, [sp, #60]	; 0x3c
    5018:	990f      	ldr	r1, [sp, #60]	; 0x3c
    501a:	07cc      	lsls	r4, r1, #31
    501c:	d5fa      	bpl.n	5014 <PkaEcdsaVerify+0xf4>
    501e:	4950      	ldr	r1, [pc, #320]	; (5160 <PkaEcdsaVerify+0x240>)
    5020:	6019      	str	r1, [r3, #0]
    5022:	4b50      	ldr	r3, [pc, #320]	; (5164 <PkaEcdsaVerify+0x244>)
    5024:	461e      	mov	r6, r3
    5026:	6819      	ldr	r1, [r3, #0]
    5028:	9110      	str	r1, [sp, #64]	; 0x40
    502a:	9910      	ldr	r1, [sp, #64]	; 0x40
    502c:	07c9      	lsls	r1, r1, #31
    502e:	d5fa      	bpl.n	5026 <PkaEcdsaVerify+0x106>
    5030:	4c3f      	ldr	r4, [pc, #252]	; (5130 <PkaEcdsaVerify+0x210>)
    5032:	4b4d      	ldr	r3, [pc, #308]	; (5168 <PkaEcdsaVerify+0x248>)
    5034:	6023      	str	r3, [r4, #0]
    5036:	6833      	ldr	r3, [r6, #0]
    5038:	9311      	str	r3, [sp, #68]	; 0x44
    503a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    503c:	07db      	lsls	r3, r3, #31
    503e:	d5fa      	bpl.n	5036 <PkaEcdsaVerify+0x116>
    5040:	4b4a      	ldr	r3, [pc, #296]	; (516c <PkaEcdsaVerify+0x24c>)
    5042:	6023      	str	r3, [r4, #0]
    5044:	6833      	ldr	r3, [r6, #0]
    5046:	9312      	str	r3, [sp, #72]	; 0x48
    5048:	9b12      	ldr	r3, [sp, #72]	; 0x48
    504a:	07df      	lsls	r7, r3, #31
    504c:	d5fa      	bpl.n	5044 <PkaEcdsaVerify+0x124>
    504e:	4b48      	ldr	r3, [pc, #288]	; (5170 <PkaEcdsaVerify+0x250>)
    5050:	6023      	str	r3, [r4, #0]
    5052:	4b3a      	ldr	r3, [pc, #232]	; (513c <PkaEcdsaVerify+0x21c>)
    5054:	4698      	mov	r8, r3
    5056:	6819      	ldr	r1, [r3, #0]
    5058:	9113      	str	r1, [sp, #76]	; 0x4c
    505a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    505c:	07c9      	lsls	r1, r1, #31
    505e:	d5fa      	bpl.n	5056 <PkaEcdsaVerify+0x136>
    5060:	4f32      	ldr	r7, [pc, #200]	; (512c <PkaEcdsaVerify+0x20c>)
    5062:	6038      	str	r0, [r7, #0]
    5064:	6833      	ldr	r3, [r6, #0]
    5066:	9314      	str	r3, [sp, #80]	; 0x50
    5068:	9b14      	ldr	r3, [sp, #80]	; 0x50
    506a:	07db      	lsls	r3, r3, #31
    506c:	d5fa      	bpl.n	5064 <PkaEcdsaVerify+0x144>
    506e:	6022      	str	r2, [r4, #0]
    5070:	6833      	ldr	r3, [r6, #0]
    5072:	9315      	str	r3, [sp, #84]	; 0x54
    5074:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5076:	07d8      	lsls	r0, r3, #31
    5078:	d5fa      	bpl.n	5070 <PkaEcdsaVerify+0x150>
    507a:	4b3e      	ldr	r3, [pc, #248]	; (5174 <PkaEcdsaVerify+0x254>)
    507c:	6023      	str	r3, [r4, #0]
    507e:	6833      	ldr	r3, [r6, #0]
    5080:	9316      	str	r3, [sp, #88]	; 0x58
    5082:	9b16      	ldr	r3, [sp, #88]	; 0x58
    5084:	07d9      	lsls	r1, r3, #31
    5086:	d5fa      	bpl.n	507e <PkaEcdsaVerify+0x15e>
    5088:	4b3b      	ldr	r3, [pc, #236]	; (5178 <PkaEcdsaVerify+0x258>)
    508a:	6023      	str	r3, [r4, #0]
    508c:	6833      	ldr	r3, [r6, #0]
    508e:	9317      	str	r3, [sp, #92]	; 0x5c
    5090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5092:	07da      	lsls	r2, r3, #31
    5094:	d5fa      	bpl.n	508c <PkaEcdsaVerify+0x16c>
    5096:	4b39      	ldr	r3, [pc, #228]	; (517c <PkaEcdsaVerify+0x25c>)
    5098:	6023      	str	r3, [r4, #0]
    509a:	6833      	ldr	r3, [r6, #0]
    509c:	9318      	str	r3, [sp, #96]	; 0x60
    509e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    50a0:	07db      	lsls	r3, r3, #31
    50a2:	d5fa      	bpl.n	509a <PkaEcdsaVerify+0x17a>
    50a4:	4b36      	ldr	r3, [pc, #216]	; (5180 <PkaEcdsaVerify+0x260>)
    50a6:	6023      	str	r3, [r4, #0]
    50a8:	6833      	ldr	r3, [r6, #0]
    50aa:	9319      	str	r3, [sp, #100]	; 0x64
    50ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
    50ae:	07d8      	lsls	r0, r3, #31
    50b0:	d5fa      	bpl.n	50a8 <PkaEcdsaVerify+0x188>
    50b2:	4b34      	ldr	r3, [pc, #208]	; (5184 <PkaEcdsaVerify+0x264>)
    50b4:	6023      	str	r3, [r4, #0]
    50b6:	6833      	ldr	r3, [r6, #0]
    50b8:	931a      	str	r3, [sp, #104]	; 0x68
    50ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    50bc:	07d9      	lsls	r1, r3, #31
    50be:	d5fa      	bpl.n	50b6 <PkaEcdsaVerify+0x196>
    50c0:	4b31      	ldr	r3, [pc, #196]	; (5188 <PkaEcdsaVerify+0x268>)
    50c2:	6023      	str	r3, [r4, #0]
    50c4:	6833      	ldr	r3, [r6, #0]
    50c6:	931b      	str	r3, [sp, #108]	; 0x6c
    50c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    50ca:	07da      	lsls	r2, r3, #31
    50cc:	d5fa      	bpl.n	50c4 <PkaEcdsaVerify+0x1a4>
    50ce:	4b2f      	ldr	r3, [pc, #188]	; (518c <PkaEcdsaVerify+0x26c>)
    50d0:	6023      	str	r3, [r4, #0]
    50d2:	f000 fc1d 	bl	5910 <PkaSum2ScalarMullt>
    50d6:	bb08      	cbnz	r0, 511c <PkaEcdsaVerify+0x1fc>
    50d8:	f8d8 3000 	ldr.w	r3, [r8]
    50dc:	931c      	str	r3, [sp, #112]	; 0x70
    50de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    50e0:	07db      	lsls	r3, r3, #31
    50e2:	d5f9      	bpl.n	50d8 <PkaEcdsaVerify+0x1b8>
    50e4:	603d      	str	r5, [r7, #0]
    50e6:	6833      	ldr	r3, [r6, #0]
    50e8:	931d      	str	r3, [sp, #116]	; 0x74
    50ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    50ec:	07d9      	lsls	r1, r3, #31
    50ee:	d5fa      	bpl.n	50e6 <PkaEcdsaVerify+0x1c6>
    50f0:	4b27      	ldr	r3, [pc, #156]	; (5190 <PkaEcdsaVerify+0x270>)
    50f2:	6023      	str	r3, [r4, #0]
    50f4:	6833      	ldr	r3, [r6, #0]
    50f6:	931e      	str	r3, [sp, #120]	; 0x78
    50f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    50fa:	07da      	lsls	r2, r3, #31
    50fc:	d5fa      	bpl.n	50f4 <PkaEcdsaVerify+0x1d4>
    50fe:	4b25      	ldr	r3, [pc, #148]	; (5194 <PkaEcdsaVerify+0x274>)
    5100:	6023      	str	r3, [r4, #0]
    5102:	f8d8 3000 	ldr.w	r3, [r8]
    5106:	931f      	str	r3, [sp, #124]	; 0x7c
    5108:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    510a:	07db      	lsls	r3, r3, #31
    510c:	d5f9      	bpl.n	5102 <PkaEcdsaVerify+0x1e2>
    510e:	4b0c      	ldr	r3, [pc, #48]	; (5140 <PkaEcdsaVerify+0x220>)
    5110:	681b      	ldr	r3, [r3, #0]
    5112:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5116:	4b20      	ldr	r3, [pc, #128]	; (5198 <PkaEcdsaVerify+0x278>)
    5118:	bf08      	it	eq
    511a:	4618      	moveq	r0, r3
    511c:	b020      	add	sp, #128	; 0x80
    511e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5122:	481e      	ldr	r0, [pc, #120]	; (519c <PkaEcdsaVerify+0x27c>)
    5124:	e7fa      	b.n	511c <PkaEcdsaVerify+0x1fc>
    5126:	481e      	ldr	r0, [pc, #120]	; (51a0 <PkaEcdsaVerify+0x280>)
    5128:	e7f8      	b.n	511c <PkaEcdsaVerify+0x1fc>
    512a:	bf00      	nop
    512c:	50841090 	.word	0x50841090
    5130:	50841080 	.word	0x50841080
    5134:	51021000 	.word	0x51021000
    5138:	29721fc0 	.word	0x29721fc0
    513c:	508410b4 	.word	0x508410b4
    5140:	50841088 	.word	0x50841088
    5144:	2901cfc0 	.word	0x2901cfc0
    5148:	290e1fc0 	.word	0x290e1fc0
    514c:	29003fc0 	.word	0x29003fc0
    5150:	49020140 	.word	0x49020140
    5154:	a8843100 	.word	0xa8843100
    5158:	49160000 	.word	0x49160000
    515c:	a1080140 	.word	0xa1080140
    5160:	88084480 	.word	0x88084480
    5164:	508410b0 	.word	0x508410b0
    5168:	887044c0 	.word	0x887044c0
    516c:	417a0780 	.word	0x417a0780
    5170:	417e07c0 	.word	0x417e07c0
    5174:	496a0000 	.word	0x496a0000
    5178:	49160680 	.word	0x49160680
    517c:	496e0040 	.word	0x496e0040
    5180:	21000200 	.word	0x21000200
    5184:	21208200 	.word	0x21208200
    5188:	21208240 	.word	0x21208240
    518c:	21248280 	.word	0x21248280
    5190:	a161a140 	.word	0xa161a140
    5194:	5161c800 	.word	0x5161c800
    5198:	00f10803 	.word	0x00f10803
    519c:	00f10801 	.word	0x00f10801
    51a0:	00f10802 	.word	0x00f10802

000051a4 <nrf_cc310_bl_hash_update_internal>:
    51a4:	4b32      	ldr	r3, [pc, #200]	; (5270 <nrf_cc310_bl_hash_update_internal+0xcc>)
    51a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51aa:	4680      	mov	r8, r0
    51ac:	4692      	mov	sl, r2
    51ae:	4699      	mov	r9, r3
    51b0:	6844      	ldr	r4, [r0, #4]
    51b2:	681a      	ldr	r2, [r3, #0]
    51b4:	2a00      	cmp	r2, #0
    51b6:	d1fc      	bne.n	51b2 <nrf_cc310_bl_hash_update_internal+0xe>
    51b8:	4b2e      	ldr	r3, [pc, #184]	; (5274 <nrf_cc310_bl_hash_update_internal+0xd0>)
    51ba:	469b      	mov	fp, r3
    51bc:	681a      	ldr	r2, [r3, #0]
    51be:	2a00      	cmp	r2, #0
    51c0:	d1fc      	bne.n	51bc <nrf_cc310_bl_hash_update_internal+0x18>
    51c2:	f04f 30ff 	mov.w	r0, #4294967295
    51c6:	9101      	str	r1, [sp, #4]
    51c8:	f000 fc94 	bl	5af4 <SaSi_HalClearInterruptBit>
    51cc:	2080      	movs	r0, #128	; 0x80
    51ce:	f000 fc97 	bl	5b00 <SaSi_HalMaskInterrupt>
    51d2:	2301      	movs	r3, #1
    51d4:	2007      	movs	r0, #7
    51d6:	4a28      	ldr	r2, [pc, #160]	; (5278 <nrf_cc310_bl_hash_update_internal+0xd4>)
    51d8:	4d28      	ldr	r5, [pc, #160]	; (527c <nrf_cc310_bl_hash_update_internal+0xd8>)
    51da:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    51de:	602b      	str	r3, [r5, #0]
    51e0:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    51e4:	6013      	str	r3, [r2, #0]
    51e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51e8:	4f25      	ldr	r7, [pc, #148]	; (5280 <nrf_cc310_bl_hash_update_internal+0xdc>)
    51ea:	4e26      	ldr	r6, [pc, #152]	; (5284 <nrf_cc310_bl_hash_update_internal+0xe0>)
    51ec:	603b      	str	r3, [r7, #0]
    51ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    51f0:	4620      	mov	r0, r4
    51f2:	6033      	str	r3, [r6, #0]
    51f4:	f8d8 3000 	ldr.w	r3, [r8]
    51f8:	f842 3c04 	str.w	r3, [r2, #-4]
    51fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5200:	4798      	blx	r3
    5202:	9901      	ldr	r1, [sp, #4]
    5204:	f8d9 3000 	ldr.w	r3, [r9]
    5208:	2b00      	cmp	r3, #0
    520a:	d1fb      	bne.n	5204 <nrf_cc310_bl_hash_update_internal+0x60>
    520c:	f1ba 0f00 	cmp.w	sl, #0
    5210:	d120      	bne.n	5254 <nrf_cc310_bl_hash_update_internal+0xb0>
    5212:	2204      	movs	r2, #4
    5214:	4b1c      	ldr	r3, [pc, #112]	; (5288 <nrf_cc310_bl_hash_update_internal+0xe4>)
    5216:	601a      	str	r2, [r3, #0]
    5218:	f8d9 3000 	ldr.w	r3, [r9]
    521c:	2b00      	cmp	r3, #0
    521e:	d1fb      	bne.n	5218 <nrf_cc310_bl_hash_update_internal+0x74>
    5220:	f8db a000 	ldr.w	sl, [fp]
    5224:	f1ba 0f00 	cmp.w	sl, #0
    5228:	d1fa      	bne.n	5220 <nrf_cc310_bl_hash_update_internal+0x7c>
    522a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    522e:	4620      	mov	r0, r4
    5230:	4798      	blx	r3
    5232:	683b      	ldr	r3, [r7, #0]
    5234:	6263      	str	r3, [r4, #36]	; 0x24
    5236:	6833      	ldr	r3, [r6, #0]
    5238:	62a3      	str	r3, [r4, #40]	; 0x28
    523a:	4b14      	ldr	r3, [pc, #80]	; (528c <nrf_cc310_bl_hash_update_internal+0xe8>)
    523c:	f8c3 a000 	str.w	sl, [r3]
    5240:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    5244:	f8d9 3000 	ldr.w	r3, [r9]
    5248:	2b00      	cmp	r3, #0
    524a:	d1fb      	bne.n	5244 <nrf_cc310_bl_hash_update_internal+0xa0>
    524c:	602b      	str	r3, [r5, #0]
    524e:	b003      	add	sp, #12
    5250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5254:	6a23      	ldr	r3, [r4, #32]
    5256:	2040      	movs	r0, #64	; 0x40
    5258:	2b01      	cmp	r3, #1
    525a:	bf04      	itt	eq
    525c:	4a0b      	ldreq	r2, [pc, #44]	; (528c <nrf_cc310_bl_hash_update_internal+0xe8>)
    525e:	6013      	streq	r3, [r2, #0]
    5260:	4b0b      	ldr	r3, [pc, #44]	; (5290 <nrf_cc310_bl_hash_update_internal+0xec>)
    5262:	6019      	str	r1, [r3, #0]
    5264:	f8c3 a004 	str.w	sl, [r3, #4]
    5268:	f000 fc50 	bl	5b0c <SaSi_HalWaitInterrupt>
    526c:	e7d4      	b.n	5218 <nrf_cc310_bl_hash_update_internal+0x74>
    526e:	bf00      	nop
    5270:	50841910 	.word	0x50841910
    5274:	50841c20 	.word	0x50841c20
    5278:	50841900 	.word	0x50841900
    527c:	50841818 	.word	0x50841818
    5280:	508417cc 	.word	0x508417cc
    5284:	508417d0 	.word	0x508417d0
    5288:	508417c8 	.word	0x508417c8
    528c:	50841684 	.word	0x50841684
    5290:	50841c28 	.word	0x50841c28

00005294 <PkaDoubleMdf2Mdf>:
    5294:	4b54      	ldr	r3, [pc, #336]	; (53e8 <PkaDoubleMdf2Mdf+0x154>)
    5296:	b510      	push	{r4, lr}
    5298:	4619      	mov	r1, r3
    529a:	b098      	sub	sp, #96	; 0x60
    529c:	681a      	ldr	r2, [r3, #0]
    529e:	9201      	str	r2, [sp, #4]
    52a0:	9a01      	ldr	r2, [sp, #4]
    52a2:	07d2      	lsls	r2, r2, #31
    52a4:	d5fa      	bpl.n	529c <PkaDoubleMdf2Mdf+0x8>
    52a6:	4b51      	ldr	r3, [pc, #324]	; (53ec <PkaDoubleMdf2Mdf+0x158>)
    52a8:	4a51      	ldr	r2, [pc, #324]	; (53f0 <PkaDoubleMdf2Mdf+0x15c>)
    52aa:	601a      	str	r2, [r3, #0]
    52ac:	680a      	ldr	r2, [r1, #0]
    52ae:	9202      	str	r2, [sp, #8]
    52b0:	9a02      	ldr	r2, [sp, #8]
    52b2:	07d4      	lsls	r4, r2, #31
    52b4:	d5fa      	bpl.n	52ac <PkaDoubleMdf2Mdf+0x18>
    52b6:	4a4f      	ldr	r2, [pc, #316]	; (53f4 <PkaDoubleMdf2Mdf+0x160>)
    52b8:	601a      	str	r2, [r3, #0]
    52ba:	680a      	ldr	r2, [r1, #0]
    52bc:	9203      	str	r2, [sp, #12]
    52be:	9a03      	ldr	r2, [sp, #12]
    52c0:	07d0      	lsls	r0, r2, #31
    52c2:	d5fa      	bpl.n	52ba <PkaDoubleMdf2Mdf+0x26>
    52c4:	484c      	ldr	r0, [pc, #304]	; (53f8 <PkaDoubleMdf2Mdf+0x164>)
    52c6:	6018      	str	r0, [r3, #0]
    52c8:	680a      	ldr	r2, [r1, #0]
    52ca:	9204      	str	r2, [sp, #16]
    52cc:	9a04      	ldr	r2, [sp, #16]
    52ce:	07d2      	lsls	r2, r2, #31
    52d0:	d5fa      	bpl.n	52c8 <PkaDoubleMdf2Mdf+0x34>
    52d2:	4a4a      	ldr	r2, [pc, #296]	; (53fc <PkaDoubleMdf2Mdf+0x168>)
    52d4:	601a      	str	r2, [r3, #0]
    52d6:	680a      	ldr	r2, [r1, #0]
    52d8:	9205      	str	r2, [sp, #20]
    52da:	9a05      	ldr	r2, [sp, #20]
    52dc:	07d4      	lsls	r4, r2, #31
    52de:	d5fa      	bpl.n	52d6 <PkaDoubleMdf2Mdf+0x42>
    52e0:	4a47      	ldr	r2, [pc, #284]	; (5400 <PkaDoubleMdf2Mdf+0x16c>)
    52e2:	601a      	str	r2, [r3, #0]
    52e4:	680a      	ldr	r2, [r1, #0]
    52e6:	9206      	str	r2, [sp, #24]
    52e8:	9a06      	ldr	r2, [sp, #24]
    52ea:	07d2      	lsls	r2, r2, #31
    52ec:	d5fa      	bpl.n	52e4 <PkaDoubleMdf2Mdf+0x50>
    52ee:	4a45      	ldr	r2, [pc, #276]	; (5404 <PkaDoubleMdf2Mdf+0x170>)
    52f0:	601a      	str	r2, [r3, #0]
    52f2:	680a      	ldr	r2, [r1, #0]
    52f4:	9207      	str	r2, [sp, #28]
    52f6:	9a07      	ldr	r2, [sp, #28]
    52f8:	07d4      	lsls	r4, r2, #31
    52fa:	d5fa      	bpl.n	52f2 <PkaDoubleMdf2Mdf+0x5e>
    52fc:	4a42      	ldr	r2, [pc, #264]	; (5408 <PkaDoubleMdf2Mdf+0x174>)
    52fe:	601a      	str	r2, [r3, #0]
    5300:	680a      	ldr	r2, [r1, #0]
    5302:	9208      	str	r2, [sp, #32]
    5304:	9a08      	ldr	r2, [sp, #32]
    5306:	07d2      	lsls	r2, r2, #31
    5308:	d5fa      	bpl.n	5300 <PkaDoubleMdf2Mdf+0x6c>
    530a:	4a40      	ldr	r2, [pc, #256]	; (540c <PkaDoubleMdf2Mdf+0x178>)
    530c:	601a      	str	r2, [r3, #0]
    530e:	680a      	ldr	r2, [r1, #0]
    5310:	9209      	str	r2, [sp, #36]	; 0x24
    5312:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5314:	07d4      	lsls	r4, r2, #31
    5316:	d5fa      	bpl.n	530e <PkaDoubleMdf2Mdf+0x7a>
    5318:	4a3d      	ldr	r2, [pc, #244]	; (5410 <PkaDoubleMdf2Mdf+0x17c>)
    531a:	601a      	str	r2, [r3, #0]
    531c:	680a      	ldr	r2, [r1, #0]
    531e:	920a      	str	r2, [sp, #40]	; 0x28
    5320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5322:	07d2      	lsls	r2, r2, #31
    5324:	d5fa      	bpl.n	531c <PkaDoubleMdf2Mdf+0x88>
    5326:	4a3b      	ldr	r2, [pc, #236]	; (5414 <PkaDoubleMdf2Mdf+0x180>)
    5328:	601a      	str	r2, [r3, #0]
    532a:	680a      	ldr	r2, [r1, #0]
    532c:	920b      	str	r2, [sp, #44]	; 0x2c
    532e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5330:	07d4      	lsls	r4, r2, #31
    5332:	d5fa      	bpl.n	532a <PkaDoubleMdf2Mdf+0x96>
    5334:	4a38      	ldr	r2, [pc, #224]	; (5418 <PkaDoubleMdf2Mdf+0x184>)
    5336:	601a      	str	r2, [r3, #0]
    5338:	680a      	ldr	r2, [r1, #0]
    533a:	920c      	str	r2, [sp, #48]	; 0x30
    533c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    533e:	07d2      	lsls	r2, r2, #31
    5340:	d5fa      	bpl.n	5338 <PkaDoubleMdf2Mdf+0xa4>
    5342:	4a36      	ldr	r2, [pc, #216]	; (541c <PkaDoubleMdf2Mdf+0x188>)
    5344:	601a      	str	r2, [r3, #0]
    5346:	680a      	ldr	r2, [r1, #0]
    5348:	920d      	str	r2, [sp, #52]	; 0x34
    534a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    534c:	07d4      	lsls	r4, r2, #31
    534e:	d5fa      	bpl.n	5346 <PkaDoubleMdf2Mdf+0xb2>
    5350:	4a33      	ldr	r2, [pc, #204]	; (5420 <PkaDoubleMdf2Mdf+0x18c>)
    5352:	601a      	str	r2, [r3, #0]
    5354:	680a      	ldr	r2, [r1, #0]
    5356:	920e      	str	r2, [sp, #56]	; 0x38
    5358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    535a:	07d2      	lsls	r2, r2, #31
    535c:	d5fa      	bpl.n	5354 <PkaDoubleMdf2Mdf+0xc0>
    535e:	4a31      	ldr	r2, [pc, #196]	; (5424 <PkaDoubleMdf2Mdf+0x190>)
    5360:	601a      	str	r2, [r3, #0]
    5362:	680a      	ldr	r2, [r1, #0]
    5364:	920f      	str	r2, [sp, #60]	; 0x3c
    5366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5368:	07d4      	lsls	r4, r2, #31
    536a:	d5fa      	bpl.n	5362 <PkaDoubleMdf2Mdf+0xce>
    536c:	4a2e      	ldr	r2, [pc, #184]	; (5428 <PkaDoubleMdf2Mdf+0x194>)
    536e:	601a      	str	r2, [r3, #0]
    5370:	680a      	ldr	r2, [r1, #0]
    5372:	9210      	str	r2, [sp, #64]	; 0x40
    5374:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5376:	07d2      	lsls	r2, r2, #31
    5378:	d5fa      	bpl.n	5370 <PkaDoubleMdf2Mdf+0xdc>
    537a:	4a2c      	ldr	r2, [pc, #176]	; (542c <PkaDoubleMdf2Mdf+0x198>)
    537c:	601a      	str	r2, [r3, #0]
    537e:	4b1a      	ldr	r3, [pc, #104]	; (53e8 <PkaDoubleMdf2Mdf+0x154>)
    5380:	4619      	mov	r1, r3
    5382:	681c      	ldr	r4, [r3, #0]
    5384:	9411      	str	r4, [sp, #68]	; 0x44
    5386:	9c11      	ldr	r4, [sp, #68]	; 0x44
    5388:	07e4      	lsls	r4, r4, #31
    538a:	d5fa      	bpl.n	5382 <PkaDoubleMdf2Mdf+0xee>
    538c:	4b17      	ldr	r3, [pc, #92]	; (53ec <PkaDoubleMdf2Mdf+0x158>)
    538e:	6018      	str	r0, [r3, #0]
    5390:	6808      	ldr	r0, [r1, #0]
    5392:	9012      	str	r0, [sp, #72]	; 0x48
    5394:	9812      	ldr	r0, [sp, #72]	; 0x48
    5396:	07c4      	lsls	r4, r0, #31
    5398:	d5fa      	bpl.n	5390 <PkaDoubleMdf2Mdf+0xfc>
    539a:	601a      	str	r2, [r3, #0]
    539c:	680a      	ldr	r2, [r1, #0]
    539e:	9213      	str	r2, [sp, #76]	; 0x4c
    53a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    53a2:	07d0      	lsls	r0, r2, #31
    53a4:	d5fa      	bpl.n	539c <PkaDoubleMdf2Mdf+0x108>
    53a6:	4a12      	ldr	r2, [pc, #72]	; (53f0 <PkaDoubleMdf2Mdf+0x15c>)
    53a8:	601a      	str	r2, [r3, #0]
    53aa:	680a      	ldr	r2, [r1, #0]
    53ac:	9214      	str	r2, [sp, #80]	; 0x50
    53ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
    53b0:	07d2      	lsls	r2, r2, #31
    53b2:	d5fa      	bpl.n	53aa <PkaDoubleMdf2Mdf+0x116>
    53b4:	4a1e      	ldr	r2, [pc, #120]	; (5430 <PkaDoubleMdf2Mdf+0x19c>)
    53b6:	601a      	str	r2, [r3, #0]
    53b8:	680a      	ldr	r2, [r1, #0]
    53ba:	9215      	str	r2, [sp, #84]	; 0x54
    53bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    53be:	07d4      	lsls	r4, r2, #31
    53c0:	d5fa      	bpl.n	53b8 <PkaDoubleMdf2Mdf+0x124>
    53c2:	4a1c      	ldr	r2, [pc, #112]	; (5434 <PkaDoubleMdf2Mdf+0x1a0>)
    53c4:	601a      	str	r2, [r3, #0]
    53c6:	680a      	ldr	r2, [r1, #0]
    53c8:	9216      	str	r2, [sp, #88]	; 0x58
    53ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
    53cc:	07d0      	lsls	r0, r2, #31
    53ce:	d5fa      	bpl.n	53c6 <PkaDoubleMdf2Mdf+0x132>
    53d0:	4a19      	ldr	r2, [pc, #100]	; (5438 <PkaDoubleMdf2Mdf+0x1a4>)
    53d2:	601a      	str	r2, [r3, #0]
    53d4:	680a      	ldr	r2, [r1, #0]
    53d6:	9217      	str	r2, [sp, #92]	; 0x5c
    53d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    53da:	07d2      	lsls	r2, r2, #31
    53dc:	d5fa      	bpl.n	53d4 <PkaDoubleMdf2Mdf+0x140>
    53de:	4a17      	ldr	r2, [pc, #92]	; (543c <PkaDoubleMdf2Mdf+0x1a8>)
    53e0:	601a      	str	r2, [r3, #0]
    53e2:	b018      	add	sp, #96	; 0x60
    53e4:	bd10      	pop	{r4, pc}
    53e6:	bf00      	nop
    53e8:	508410b0 	.word	0x508410b0
    53ec:	50841080 	.word	0x50841080
    53f0:	21659300 	.word	0x21659300
    53f4:	90310400 	.word	0x90310400
    53f8:	90659640 	.word	0x90659640
    53fc:	21618300 	.word	0x21618300
    5400:	2130c300 	.word	0x2130c300
    5404:	9064c300 	.word	0x9064c300
    5408:	90618100 	.word	0x90618100
    540c:	21104600 	.word	0x21104600
    5410:	21118100 	.word	0x21118100
    5414:	21444100 	.word	0x21444100
    5418:	2920c300 	.word	0x2920c300
    541c:	c810460c 	.word	0xc810460c
    5420:	21318600 	.word	0x21318600
    5424:	2160c300 	.word	0x2160c300
    5428:	2928c140 	.word	0x2928c140
    542c:	21659640 	.word	0x21659640
    5430:	90311300 	.word	0x90311300
    5434:	29259640 	.word	0x29259640
    5438:	c8144659 	.word	0xc8144659
    543c:	49320440 	.word	0x49320440

00005440 <PkaDoubleMdf2Jcb>:
    5440:	4b49      	ldr	r3, [pc, #292]	; (5568 <PkaDoubleMdf2Jcb+0x128>)
    5442:	b510      	push	{r4, lr}
    5444:	4619      	mov	r1, r3
    5446:	b094      	sub	sp, #80	; 0x50
    5448:	681a      	ldr	r2, [r3, #0]
    544a:	9200      	str	r2, [sp, #0]
    544c:	9a00      	ldr	r2, [sp, #0]
    544e:	07d2      	lsls	r2, r2, #31
    5450:	d5fa      	bpl.n	5448 <PkaDoubleMdf2Jcb+0x8>
    5452:	4b46      	ldr	r3, [pc, #280]	; (556c <PkaDoubleMdf2Jcb+0x12c>)
    5454:	4a46      	ldr	r2, [pc, #280]	; (5570 <PkaDoubleMdf2Jcb+0x130>)
    5456:	601a      	str	r2, [r3, #0]
    5458:	680a      	ldr	r2, [r1, #0]
    545a:	9201      	str	r2, [sp, #4]
    545c:	9a01      	ldr	r2, [sp, #4]
    545e:	07d4      	lsls	r4, r2, #31
    5460:	d5fa      	bpl.n	5458 <PkaDoubleMdf2Jcb+0x18>
    5462:	4a44      	ldr	r2, [pc, #272]	; (5574 <PkaDoubleMdf2Jcb+0x134>)
    5464:	601a      	str	r2, [r3, #0]
    5466:	680a      	ldr	r2, [r1, #0]
    5468:	9202      	str	r2, [sp, #8]
    546a:	9a02      	ldr	r2, [sp, #8]
    546c:	07d0      	lsls	r0, r2, #31
    546e:	d5fa      	bpl.n	5466 <PkaDoubleMdf2Jcb+0x26>
    5470:	4841      	ldr	r0, [pc, #260]	; (5578 <PkaDoubleMdf2Jcb+0x138>)
    5472:	6018      	str	r0, [r3, #0]
    5474:	680a      	ldr	r2, [r1, #0]
    5476:	9203      	str	r2, [sp, #12]
    5478:	9a03      	ldr	r2, [sp, #12]
    547a:	07d2      	lsls	r2, r2, #31
    547c:	d5fa      	bpl.n	5474 <PkaDoubleMdf2Jcb+0x34>
    547e:	4a3f      	ldr	r2, [pc, #252]	; (557c <PkaDoubleMdf2Jcb+0x13c>)
    5480:	601a      	str	r2, [r3, #0]
    5482:	680a      	ldr	r2, [r1, #0]
    5484:	9204      	str	r2, [sp, #16]
    5486:	9a04      	ldr	r2, [sp, #16]
    5488:	07d4      	lsls	r4, r2, #31
    548a:	d5fa      	bpl.n	5482 <PkaDoubleMdf2Jcb+0x42>
    548c:	4a3c      	ldr	r2, [pc, #240]	; (5580 <PkaDoubleMdf2Jcb+0x140>)
    548e:	601a      	str	r2, [r3, #0]
    5490:	680a      	ldr	r2, [r1, #0]
    5492:	9205      	str	r2, [sp, #20]
    5494:	9a05      	ldr	r2, [sp, #20]
    5496:	07d2      	lsls	r2, r2, #31
    5498:	d5fa      	bpl.n	5490 <PkaDoubleMdf2Jcb+0x50>
    549a:	4a3a      	ldr	r2, [pc, #232]	; (5584 <PkaDoubleMdf2Jcb+0x144>)
    549c:	601a      	str	r2, [r3, #0]
    549e:	680a      	ldr	r2, [r1, #0]
    54a0:	9206      	str	r2, [sp, #24]
    54a2:	9a06      	ldr	r2, [sp, #24]
    54a4:	07d4      	lsls	r4, r2, #31
    54a6:	d5fa      	bpl.n	549e <PkaDoubleMdf2Jcb+0x5e>
    54a8:	4a37      	ldr	r2, [pc, #220]	; (5588 <PkaDoubleMdf2Jcb+0x148>)
    54aa:	601a      	str	r2, [r3, #0]
    54ac:	680a      	ldr	r2, [r1, #0]
    54ae:	9207      	str	r2, [sp, #28]
    54b0:	9a07      	ldr	r2, [sp, #28]
    54b2:	07d2      	lsls	r2, r2, #31
    54b4:	d5fa      	bpl.n	54ac <PkaDoubleMdf2Jcb+0x6c>
    54b6:	4a35      	ldr	r2, [pc, #212]	; (558c <PkaDoubleMdf2Jcb+0x14c>)
    54b8:	601a      	str	r2, [r3, #0]
    54ba:	680a      	ldr	r2, [r1, #0]
    54bc:	9208      	str	r2, [sp, #32]
    54be:	9a08      	ldr	r2, [sp, #32]
    54c0:	07d4      	lsls	r4, r2, #31
    54c2:	d5fa      	bpl.n	54ba <PkaDoubleMdf2Jcb+0x7a>
    54c4:	4a32      	ldr	r2, [pc, #200]	; (5590 <PkaDoubleMdf2Jcb+0x150>)
    54c6:	601a      	str	r2, [r3, #0]
    54c8:	680a      	ldr	r2, [r1, #0]
    54ca:	9209      	str	r2, [sp, #36]	; 0x24
    54cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    54ce:	07d2      	lsls	r2, r2, #31
    54d0:	d5fa      	bpl.n	54c8 <PkaDoubleMdf2Jcb+0x88>
    54d2:	4a30      	ldr	r2, [pc, #192]	; (5594 <PkaDoubleMdf2Jcb+0x154>)
    54d4:	601a      	str	r2, [r3, #0]
    54d6:	680a      	ldr	r2, [r1, #0]
    54d8:	920a      	str	r2, [sp, #40]	; 0x28
    54da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    54dc:	07d4      	lsls	r4, r2, #31
    54de:	d5fa      	bpl.n	54d6 <PkaDoubleMdf2Jcb+0x96>
    54e0:	4a2d      	ldr	r2, [pc, #180]	; (5598 <PkaDoubleMdf2Jcb+0x158>)
    54e2:	601a      	str	r2, [r3, #0]
    54e4:	680a      	ldr	r2, [r1, #0]
    54e6:	920b      	str	r2, [sp, #44]	; 0x2c
    54e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    54ea:	07d2      	lsls	r2, r2, #31
    54ec:	d5fa      	bpl.n	54e4 <PkaDoubleMdf2Jcb+0xa4>
    54ee:	4a2b      	ldr	r2, [pc, #172]	; (559c <PkaDoubleMdf2Jcb+0x15c>)
    54f0:	601a      	str	r2, [r3, #0]
    54f2:	680a      	ldr	r2, [r1, #0]
    54f4:	920c      	str	r2, [sp, #48]	; 0x30
    54f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    54f8:	07d4      	lsls	r4, r2, #31
    54fa:	d5fa      	bpl.n	54f2 <PkaDoubleMdf2Jcb+0xb2>
    54fc:	4a28      	ldr	r2, [pc, #160]	; (55a0 <PkaDoubleMdf2Jcb+0x160>)
    54fe:	601a      	str	r2, [r3, #0]
    5500:	680a      	ldr	r2, [r1, #0]
    5502:	920d      	str	r2, [sp, #52]	; 0x34
    5504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5506:	07d2      	lsls	r2, r2, #31
    5508:	d5fa      	bpl.n	5500 <PkaDoubleMdf2Jcb+0xc0>
    550a:	4a26      	ldr	r2, [pc, #152]	; (55a4 <PkaDoubleMdf2Jcb+0x164>)
    550c:	601a      	str	r2, [r3, #0]
    550e:	680a      	ldr	r2, [r1, #0]
    5510:	920e      	str	r2, [sp, #56]	; 0x38
    5512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5514:	07d4      	lsls	r4, r2, #31
    5516:	d5fa      	bpl.n	550e <PkaDoubleMdf2Jcb+0xce>
    5518:	4a23      	ldr	r2, [pc, #140]	; (55a8 <PkaDoubleMdf2Jcb+0x168>)
    551a:	601a      	str	r2, [r3, #0]
    551c:	680a      	ldr	r2, [r1, #0]
    551e:	920f      	str	r2, [sp, #60]	; 0x3c
    5520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5522:	07d2      	lsls	r2, r2, #31
    5524:	d5fa      	bpl.n	551c <PkaDoubleMdf2Jcb+0xdc>
    5526:	4a21      	ldr	r2, [pc, #132]	; (55ac <PkaDoubleMdf2Jcb+0x16c>)
    5528:	601a      	str	r2, [r3, #0]
    552a:	4b0f      	ldr	r3, [pc, #60]	; (5568 <PkaDoubleMdf2Jcb+0x128>)
    552c:	4619      	mov	r1, r3
    552e:	681c      	ldr	r4, [r3, #0]
    5530:	9410      	str	r4, [sp, #64]	; 0x40
    5532:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5534:	07e4      	lsls	r4, r4, #31
    5536:	d5fa      	bpl.n	552e <PkaDoubleMdf2Jcb+0xee>
    5538:	4b0c      	ldr	r3, [pc, #48]	; (556c <PkaDoubleMdf2Jcb+0x12c>)
    553a:	6018      	str	r0, [r3, #0]
    553c:	6808      	ldr	r0, [r1, #0]
    553e:	9011      	str	r0, [sp, #68]	; 0x44
    5540:	9811      	ldr	r0, [sp, #68]	; 0x44
    5542:	07c4      	lsls	r4, r0, #31
    5544:	d5fa      	bpl.n	553c <PkaDoubleMdf2Jcb+0xfc>
    5546:	601a      	str	r2, [r3, #0]
    5548:	680a      	ldr	r2, [r1, #0]
    554a:	9212      	str	r2, [sp, #72]	; 0x48
    554c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    554e:	07d0      	lsls	r0, r2, #31
    5550:	d5fa      	bpl.n	5548 <PkaDoubleMdf2Jcb+0x108>
    5552:	4a17      	ldr	r2, [pc, #92]	; (55b0 <PkaDoubleMdf2Jcb+0x170>)
    5554:	601a      	str	r2, [r3, #0]
    5556:	680a      	ldr	r2, [r1, #0]
    5558:	9213      	str	r2, [sp, #76]	; 0x4c
    555a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    555c:	07d2      	lsls	r2, r2, #31
    555e:	d5fa      	bpl.n	5556 <PkaDoubleMdf2Jcb+0x116>
    5560:	4a14      	ldr	r2, [pc, #80]	; (55b4 <PkaDoubleMdf2Jcb+0x174>)
    5562:	601a      	str	r2, [r3, #0]
    5564:	b014      	add	sp, #80	; 0x50
    5566:	bd10      	pop	{r4, pc}
    5568:	508410b0 	.word	0x508410b0
    556c:	50841080 	.word	0x50841080
    5570:	21659080 	.word	0x21659080
    5574:	90090400 	.word	0x90090400
    5578:	90659640 	.word	0x90659640
    557c:	21618080 	.word	0x21618080
    5580:	21082080 	.word	0x21082080
    5584:	90642080 	.word	0x90642080
    5588:	90618100 	.word	0x90618100
    558c:	21104600 	.word	0x21104600
    5590:	21118100 	.word	0x21118100
    5594:	21444100 	.word	0x21444100
    5598:	29202080 	.word	0x29202080
    559c:	c8104602 	.word	0xc8104602
    55a0:	21098600 	.word	0x21098600
    55a4:	21602080 	.word	0x21602080
    55a8:	29282140 	.word	0x29282140
    55ac:	21659640 	.word	0x21659640
    55b0:	29259640 	.word	0x29259640
    55b4:	c8144659 	.word	0xc8144659

000055b8 <PkaAddJcbAfn2Mdf>:
    55b8:	4b50      	ldr	r3, [pc, #320]	; (56fc <PkaAddJcbAfn2Mdf+0x144>)
    55ba:	b510      	push	{r4, lr}
    55bc:	461c      	mov	r4, r3
    55be:	b096      	sub	sp, #88	; 0x58
    55c0:	681a      	ldr	r2, [r3, #0]
    55c2:	9201      	str	r2, [sp, #4]
    55c4:	9a01      	ldr	r2, [sp, #4]
    55c6:	07d2      	lsls	r2, r2, #31
    55c8:	d5fa      	bpl.n	55c0 <PkaAddJcbAfn2Mdf+0x8>
    55ca:	4b4d      	ldr	r3, [pc, #308]	; (5700 <PkaAddJcbAfn2Mdf+0x148>)
    55cc:	4a4d      	ldr	r2, [pc, #308]	; (5704 <PkaAddJcbAfn2Mdf+0x14c>)
    55ce:	601a      	str	r2, [r3, #0]
    55d0:	6822      	ldr	r2, [r4, #0]
    55d2:	9202      	str	r2, [sp, #8]
    55d4:	9a02      	ldr	r2, [sp, #8]
    55d6:	07d2      	lsls	r2, r2, #31
    55d8:	d5fa      	bpl.n	55d0 <PkaAddJcbAfn2Mdf+0x18>
    55da:	4a4b      	ldr	r2, [pc, #300]	; (5708 <PkaAddJcbAfn2Mdf+0x150>)
    55dc:	601a      	str	r2, [r3, #0]
    55de:	4a4b      	ldr	r2, [pc, #300]	; (570c <PkaAddJcbAfn2Mdf+0x154>)
    55e0:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    55e4:	6822      	ldr	r2, [r4, #0]
    55e6:	9203      	str	r2, [sp, #12]
    55e8:	9a03      	ldr	r2, [sp, #12]
    55ea:	07d2      	lsls	r2, r2, #31
    55ec:	d5fa      	bpl.n	55e4 <PkaAddJcbAfn2Mdf+0x2c>
    55ee:	6018      	str	r0, [r3, #0]
    55f0:	6822      	ldr	r2, [r4, #0]
    55f2:	9204      	str	r2, [sp, #16]
    55f4:	9a04      	ldr	r2, [sp, #16]
    55f6:	07d0      	lsls	r0, r2, #31
    55f8:	d5fa      	bpl.n	55f0 <PkaAddJcbAfn2Mdf+0x38>
    55fa:	4a45      	ldr	r2, [pc, #276]	; (5710 <PkaAddJcbAfn2Mdf+0x158>)
    55fc:	601a      	str	r2, [r3, #0]
    55fe:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    5602:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    5606:	6822      	ldr	r2, [r4, #0]
    5608:	9205      	str	r2, [sp, #20]
    560a:	9a05      	ldr	r2, [sp, #20]
    560c:	07d2      	lsls	r2, r2, #31
    560e:	d5fa      	bpl.n	5606 <PkaAddJcbAfn2Mdf+0x4e>
    5610:	6019      	str	r1, [r3, #0]
    5612:	6822      	ldr	r2, [r4, #0]
    5614:	9206      	str	r2, [sp, #24]
    5616:	9a06      	ldr	r2, [sp, #24]
    5618:	07d0      	lsls	r0, r2, #31
    561a:	d5fa      	bpl.n	5612 <PkaAddJcbAfn2Mdf+0x5a>
    561c:	4a3d      	ldr	r2, [pc, #244]	; (5714 <PkaAddJcbAfn2Mdf+0x15c>)
    561e:	601a      	str	r2, [r3, #0]
    5620:	6822      	ldr	r2, [r4, #0]
    5622:	9207      	str	r2, [sp, #28]
    5624:	9a07      	ldr	r2, [sp, #28]
    5626:	07d1      	lsls	r1, r2, #31
    5628:	d5fa      	bpl.n	5620 <PkaAddJcbAfn2Mdf+0x68>
    562a:	4a3b      	ldr	r2, [pc, #236]	; (5718 <PkaAddJcbAfn2Mdf+0x160>)
    562c:	601a      	str	r2, [r3, #0]
    562e:	6822      	ldr	r2, [r4, #0]
    5630:	9208      	str	r2, [sp, #32]
    5632:	9a08      	ldr	r2, [sp, #32]
    5634:	07d2      	lsls	r2, r2, #31
    5636:	d5fa      	bpl.n	562e <PkaAddJcbAfn2Mdf+0x76>
    5638:	4a38      	ldr	r2, [pc, #224]	; (571c <PkaAddJcbAfn2Mdf+0x164>)
    563a:	601a      	str	r2, [r3, #0]
    563c:	6822      	ldr	r2, [r4, #0]
    563e:	9209      	str	r2, [sp, #36]	; 0x24
    5640:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5642:	07d0      	lsls	r0, r2, #31
    5644:	d5fa      	bpl.n	563c <PkaAddJcbAfn2Mdf+0x84>
    5646:	4a36      	ldr	r2, [pc, #216]	; (5720 <PkaAddJcbAfn2Mdf+0x168>)
    5648:	601a      	str	r2, [r3, #0]
    564a:	6822      	ldr	r2, [r4, #0]
    564c:	920a      	str	r2, [sp, #40]	; 0x28
    564e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5650:	07d1      	lsls	r1, r2, #31
    5652:	d5fa      	bpl.n	564a <PkaAddJcbAfn2Mdf+0x92>
    5654:	4a33      	ldr	r2, [pc, #204]	; (5724 <PkaAddJcbAfn2Mdf+0x16c>)
    5656:	601a      	str	r2, [r3, #0]
    5658:	6822      	ldr	r2, [r4, #0]
    565a:	920b      	str	r2, [sp, #44]	; 0x2c
    565c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    565e:	07d2      	lsls	r2, r2, #31
    5660:	d5fa      	bpl.n	5658 <PkaAddJcbAfn2Mdf+0xa0>
    5662:	4a31      	ldr	r2, [pc, #196]	; (5728 <PkaAddJcbAfn2Mdf+0x170>)
    5664:	601a      	str	r2, [r3, #0]
    5666:	6822      	ldr	r2, [r4, #0]
    5668:	920c      	str	r2, [sp, #48]	; 0x30
    566a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    566c:	07d0      	lsls	r0, r2, #31
    566e:	d5fa      	bpl.n	5666 <PkaAddJcbAfn2Mdf+0xae>
    5670:	4a2e      	ldr	r2, [pc, #184]	; (572c <PkaAddJcbAfn2Mdf+0x174>)
    5672:	601a      	str	r2, [r3, #0]
    5674:	6822      	ldr	r2, [r4, #0]
    5676:	920d      	str	r2, [sp, #52]	; 0x34
    5678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    567a:	07d1      	lsls	r1, r2, #31
    567c:	d5fa      	bpl.n	5674 <PkaAddJcbAfn2Mdf+0xbc>
    567e:	4a2c      	ldr	r2, [pc, #176]	; (5730 <PkaAddJcbAfn2Mdf+0x178>)
    5680:	601a      	str	r2, [r3, #0]
    5682:	6822      	ldr	r2, [r4, #0]
    5684:	920e      	str	r2, [sp, #56]	; 0x38
    5686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5688:	07d2      	lsls	r2, r2, #31
    568a:	d5fa      	bpl.n	5682 <PkaAddJcbAfn2Mdf+0xca>
    568c:	4a29      	ldr	r2, [pc, #164]	; (5734 <PkaAddJcbAfn2Mdf+0x17c>)
    568e:	601a      	str	r2, [r3, #0]
    5690:	6822      	ldr	r2, [r4, #0]
    5692:	920f      	str	r2, [sp, #60]	; 0x3c
    5694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5696:	07d0      	lsls	r0, r2, #31
    5698:	d5fa      	bpl.n	5690 <PkaAddJcbAfn2Mdf+0xd8>
    569a:	4a27      	ldr	r2, [pc, #156]	; (5738 <PkaAddJcbAfn2Mdf+0x180>)
    569c:	601a      	str	r2, [r3, #0]
    569e:	6821      	ldr	r1, [r4, #0]
    56a0:	9110      	str	r1, [sp, #64]	; 0x40
    56a2:	9910      	ldr	r1, [sp, #64]	; 0x40
    56a4:	07c9      	lsls	r1, r1, #31
    56a6:	d5fa      	bpl.n	569e <PkaAddJcbAfn2Mdf+0xe6>
    56a8:	601a      	str	r2, [r3, #0]
    56aa:	4b14      	ldr	r3, [pc, #80]	; (56fc <PkaAddJcbAfn2Mdf+0x144>)
    56ac:	461a      	mov	r2, r3
    56ae:	6819      	ldr	r1, [r3, #0]
    56b0:	9111      	str	r1, [sp, #68]	; 0x44
    56b2:	9911      	ldr	r1, [sp, #68]	; 0x44
    56b4:	07c8      	lsls	r0, r1, #31
    56b6:	d5fa      	bpl.n	56ae <PkaAddJcbAfn2Mdf+0xf6>
    56b8:	4b11      	ldr	r3, [pc, #68]	; (5700 <PkaAddJcbAfn2Mdf+0x148>)
    56ba:	4920      	ldr	r1, [pc, #128]	; (573c <PkaAddJcbAfn2Mdf+0x184>)
    56bc:	6019      	str	r1, [r3, #0]
    56be:	6811      	ldr	r1, [r2, #0]
    56c0:	9112      	str	r1, [sp, #72]	; 0x48
    56c2:	9912      	ldr	r1, [sp, #72]	; 0x48
    56c4:	07c9      	lsls	r1, r1, #31
    56c6:	d5fa      	bpl.n	56be <PkaAddJcbAfn2Mdf+0x106>
    56c8:	491d      	ldr	r1, [pc, #116]	; (5740 <PkaAddJcbAfn2Mdf+0x188>)
    56ca:	6019      	str	r1, [r3, #0]
    56cc:	6811      	ldr	r1, [r2, #0]
    56ce:	9113      	str	r1, [sp, #76]	; 0x4c
    56d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    56d2:	07cc      	lsls	r4, r1, #31
    56d4:	d5fa      	bpl.n	56cc <PkaAddJcbAfn2Mdf+0x114>
    56d6:	490b      	ldr	r1, [pc, #44]	; (5704 <PkaAddJcbAfn2Mdf+0x14c>)
    56d8:	6019      	str	r1, [r3, #0]
    56da:	6811      	ldr	r1, [r2, #0]
    56dc:	9114      	str	r1, [sp, #80]	; 0x50
    56de:	9914      	ldr	r1, [sp, #80]	; 0x50
    56e0:	07c8      	lsls	r0, r1, #31
    56e2:	d5fa      	bpl.n	56da <PkaAddJcbAfn2Mdf+0x122>
    56e4:	4917      	ldr	r1, [pc, #92]	; (5744 <PkaAddJcbAfn2Mdf+0x18c>)
    56e6:	6019      	str	r1, [r3, #0]
    56e8:	6811      	ldr	r1, [r2, #0]
    56ea:	9115      	str	r1, [sp, #84]	; 0x54
    56ec:	9915      	ldr	r1, [sp, #84]	; 0x54
    56ee:	07c9      	lsls	r1, r1, #31
    56f0:	d5fa      	bpl.n	56e8 <PkaAddJcbAfn2Mdf+0x130>
    56f2:	4a15      	ldr	r2, [pc, #84]	; (5748 <PkaAddJcbAfn2Mdf+0x190>)
    56f4:	601a      	str	r2, [r3, #0]
    56f6:	b016      	add	sp, #88	; 0x58
    56f8:	bd10      	pop	{r4, pc}
    56fa:	bf00      	nop
    56fc:	508410b0 	.word	0x508410b0
    5700:	50841080 	.word	0x50841080
    5704:	90410440 	.word	0x90410440
    5708:	29298600 	.word	0x29298600
    570c:	c80110d8 	.word	0xc80110d8
    5710:	90411440 	.word	0x90411440
    5714:	29211440 	.word	0x29211440
    5718:	21651440 	.word	0x21651440
    571c:	90403400 	.word	0x90403400
    5720:	900c3100 	.word	0x900c3100
    5724:	900c40c0 	.word	0x900c40c0
    5728:	292030c0 	.word	0x292030c0
    572c:	900d9640 	.word	0x900d9640
    5730:	90604100 	.word	0x90604100
    5734:	c8451603 	.word	0xc8451603
    5738:	21118600 	.word	0x21118600
    573c:	21604100 	.word	0x21604100
    5740:	c8444659 	.word	0xc8444659
    5744:	90451440 	.word	0x90451440
    5748:	902d1440 	.word	0x902d1440

0000574c <PkaJcb2Afn>:
    574c:	4826      	ldr	r0, [pc, #152]	; (57e8 <PkaJcb2Afn+0x9c>)
    574e:	b570      	push	{r4, r5, r6, lr}
    5750:	4605      	mov	r5, r0
    5752:	b088      	sub	sp, #32
    5754:	6804      	ldr	r4, [r0, #0]
    5756:	9400      	str	r4, [sp, #0]
    5758:	9c00      	ldr	r4, [sp, #0]
    575a:	07e6      	lsls	r6, r4, #31
    575c:	d5fa      	bpl.n	5754 <PkaJcb2Afn+0x8>
    575e:	4c23      	ldr	r4, [pc, #140]	; (57ec <PkaJcb2Afn+0xa0>)
    5760:	4823      	ldr	r0, [pc, #140]	; (57f0 <PkaJcb2Afn+0xa4>)
    5762:	6004      	str	r4, [r0, #0]
    5764:	4c23      	ldr	r4, [pc, #140]	; (57f4 <PkaJcb2Afn+0xa8>)
    5766:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    576a:	682c      	ldr	r4, [r5, #0]
    576c:	9401      	str	r4, [sp, #4]
    576e:	9c01      	ldr	r4, [sp, #4]
    5770:	07e4      	lsls	r4, r4, #31
    5772:	d5fa      	bpl.n	576a <PkaJcb2Afn+0x1e>
    5774:	6003      	str	r3, [r0, #0]
    5776:	0193      	lsls	r3, r2, #6
    5778:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    577c:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    5780:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    5784:	682b      	ldr	r3, [r5, #0]
    5786:	9302      	str	r3, [sp, #8]
    5788:	9b02      	ldr	r3, [sp, #8]
    578a:	07de      	lsls	r6, r3, #31
    578c:	d5fa      	bpl.n	5784 <PkaJcb2Afn+0x38>
    578e:	6004      	str	r4, [r0, #0]
    5790:	682b      	ldr	r3, [r5, #0]
    5792:	9303      	str	r3, [sp, #12]
    5794:	9b03      	ldr	r3, [sp, #12]
    5796:	07db      	lsls	r3, r3, #31
    5798:	d5fa      	bpl.n	5790 <PkaJcb2Afn+0x44>
    579a:	4b17      	ldr	r3, [pc, #92]	; (57f8 <PkaJcb2Afn+0xac>)
    579c:	6003      	str	r3, [r0, #0]
    579e:	018b      	lsls	r3, r1, #6
    57a0:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    57a4:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    57a8:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    57ac:	682e      	ldr	r6, [r5, #0]
    57ae:	9604      	str	r6, [sp, #16]
    57b0:	9e04      	ldr	r6, [sp, #16]
    57b2:	07f6      	lsls	r6, r6, #31
    57b4:	d5fa      	bpl.n	57ac <PkaJcb2Afn+0x60>
    57b6:	6003      	str	r3, [r0, #0]
    57b8:	682b      	ldr	r3, [r5, #0]
    57ba:	9305      	str	r3, [sp, #20]
    57bc:	9b05      	ldr	r3, [sp, #20]
    57be:	07de      	lsls	r6, r3, #31
    57c0:	d5fa      	bpl.n	57b8 <PkaJcb2Afn+0x6c>
    57c2:	6004      	str	r4, [r0, #0]
    57c4:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    57c8:	682b      	ldr	r3, [r5, #0]
    57ca:	9306      	str	r3, [sp, #24]
    57cc:	9b06      	ldr	r3, [sp, #24]
    57ce:	07dc      	lsls	r4, r3, #31
    57d0:	d5fa      	bpl.n	57c8 <PkaJcb2Afn+0x7c>
    57d2:	6001      	str	r1, [r0, #0]
    57d4:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    57d8:	682b      	ldr	r3, [r5, #0]
    57da:	9307      	str	r3, [sp, #28]
    57dc:	9b07      	ldr	r3, [sp, #28]
    57de:	07db      	lsls	r3, r3, #31
    57e0:	d5fa      	bpl.n	57d8 <PkaJcb2Afn+0x8c>
    57e2:	6002      	str	r2, [r0, #0]
    57e4:	b008      	add	sp, #32
    57e6:	bd70      	pop	{r4, r5, r6, pc}
    57e8:	508410b0 	.word	0x508410b0
    57ec:	290221c0 	.word	0x290221c0
    57f0:	50841080 	.word	0x50841080
    57f4:	98007180 	.word	0x98007180
    57f8:	90186180 	.word	0x90186180

000057fc <PkaAddAff>:
    57fc:	4b35      	ldr	r3, [pc, #212]	; (58d4 <PkaAddAff+0xd8>)
    57fe:	b08e      	sub	sp, #56	; 0x38
    5800:	4619      	mov	r1, r3
    5802:	681a      	ldr	r2, [r3, #0]
    5804:	9200      	str	r2, [sp, #0]
    5806:	9a00      	ldr	r2, [sp, #0]
    5808:	07d2      	lsls	r2, r2, #31
    580a:	d5fa      	bpl.n	5802 <PkaAddAff+0x6>
    580c:	4b32      	ldr	r3, [pc, #200]	; (58d8 <PkaAddAff+0xdc>)
    580e:	4a33      	ldr	r2, [pc, #204]	; (58dc <PkaAddAff+0xe0>)
    5810:	601a      	str	r2, [r3, #0]
    5812:	680a      	ldr	r2, [r1, #0]
    5814:	9201      	str	r2, [sp, #4]
    5816:	9a01      	ldr	r2, [sp, #4]
    5818:	07d0      	lsls	r0, r2, #31
    581a:	d5fa      	bpl.n	5812 <PkaAddAff+0x16>
    581c:	4a30      	ldr	r2, [pc, #192]	; (58e0 <PkaAddAff+0xe4>)
    581e:	601a      	str	r2, [r3, #0]
    5820:	680a      	ldr	r2, [r1, #0]
    5822:	9202      	str	r2, [sp, #8]
    5824:	9a02      	ldr	r2, [sp, #8]
    5826:	07d2      	lsls	r2, r2, #31
    5828:	d5fa      	bpl.n	5820 <PkaAddAff+0x24>
    582a:	4a2e      	ldr	r2, [pc, #184]	; (58e4 <PkaAddAff+0xe8>)
    582c:	601a      	str	r2, [r3, #0]
    582e:	680a      	ldr	r2, [r1, #0]
    5830:	9203      	str	r2, [sp, #12]
    5832:	9a03      	ldr	r2, [sp, #12]
    5834:	07d0      	lsls	r0, r2, #31
    5836:	d5fa      	bpl.n	582e <PkaAddAff+0x32>
    5838:	4a2b      	ldr	r2, [pc, #172]	; (58e8 <PkaAddAff+0xec>)
    583a:	601a      	str	r2, [r3, #0]
    583c:	680a      	ldr	r2, [r1, #0]
    583e:	9204      	str	r2, [sp, #16]
    5840:	9a04      	ldr	r2, [sp, #16]
    5842:	07d2      	lsls	r2, r2, #31
    5844:	d5fa      	bpl.n	583c <PkaAddAff+0x40>
    5846:	4a29      	ldr	r2, [pc, #164]	; (58ec <PkaAddAff+0xf0>)
    5848:	601a      	str	r2, [r3, #0]
    584a:	680a      	ldr	r2, [r1, #0]
    584c:	9205      	str	r2, [sp, #20]
    584e:	9a05      	ldr	r2, [sp, #20]
    5850:	07d0      	lsls	r0, r2, #31
    5852:	d5fa      	bpl.n	584a <PkaAddAff+0x4e>
    5854:	4a26      	ldr	r2, [pc, #152]	; (58f0 <PkaAddAff+0xf4>)
    5856:	601a      	str	r2, [r3, #0]
    5858:	680a      	ldr	r2, [r1, #0]
    585a:	9206      	str	r2, [sp, #24]
    585c:	9a06      	ldr	r2, [sp, #24]
    585e:	07d2      	lsls	r2, r2, #31
    5860:	d5fa      	bpl.n	5858 <PkaAddAff+0x5c>
    5862:	4a24      	ldr	r2, [pc, #144]	; (58f4 <PkaAddAff+0xf8>)
    5864:	601a      	str	r2, [r3, #0]
    5866:	680a      	ldr	r2, [r1, #0]
    5868:	9207      	str	r2, [sp, #28]
    586a:	9a07      	ldr	r2, [sp, #28]
    586c:	07d0      	lsls	r0, r2, #31
    586e:	d5fa      	bpl.n	5866 <PkaAddAff+0x6a>
    5870:	4a21      	ldr	r2, [pc, #132]	; (58f8 <PkaAddAff+0xfc>)
    5872:	601a      	str	r2, [r3, #0]
    5874:	680a      	ldr	r2, [r1, #0]
    5876:	9208      	str	r2, [sp, #32]
    5878:	9a08      	ldr	r2, [sp, #32]
    587a:	07d2      	lsls	r2, r2, #31
    587c:	d5fa      	bpl.n	5874 <PkaAddAff+0x78>
    587e:	4a1f      	ldr	r2, [pc, #124]	; (58fc <PkaAddAff+0x100>)
    5880:	601a      	str	r2, [r3, #0]
    5882:	680a      	ldr	r2, [r1, #0]
    5884:	9209      	str	r2, [sp, #36]	; 0x24
    5886:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5888:	07d0      	lsls	r0, r2, #31
    588a:	d5fa      	bpl.n	5882 <PkaAddAff+0x86>
    588c:	4a1c      	ldr	r2, [pc, #112]	; (5900 <PkaAddAff+0x104>)
    588e:	601a      	str	r2, [r3, #0]
    5890:	680a      	ldr	r2, [r1, #0]
    5892:	920a      	str	r2, [sp, #40]	; 0x28
    5894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5896:	07d2      	lsls	r2, r2, #31
    5898:	d5fa      	bpl.n	5890 <PkaAddAff+0x94>
    589a:	4a1a      	ldr	r2, [pc, #104]	; (5904 <PkaAddAff+0x108>)
    589c:	601a      	str	r2, [r3, #0]
    589e:	6808      	ldr	r0, [r1, #0]
    58a0:	900b      	str	r0, [sp, #44]	; 0x2c
    58a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    58a4:	07c0      	lsls	r0, r0, #31
    58a6:	d5fa      	bpl.n	589e <PkaAddAff+0xa2>
    58a8:	601a      	str	r2, [r3, #0]
    58aa:	680a      	ldr	r2, [r1, #0]
    58ac:	920c      	str	r2, [sp, #48]	; 0x30
    58ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    58b0:	07d0      	lsls	r0, r2, #31
    58b2:	d5fa      	bpl.n	58aa <PkaAddAff+0xae>
    58b4:	4a14      	ldr	r2, [pc, #80]	; (5908 <PkaAddAff+0x10c>)
    58b6:	601a      	str	r2, [r3, #0]
    58b8:	680a      	ldr	r2, [r1, #0]
    58ba:	920d      	str	r2, [sp, #52]	; 0x34
    58bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    58be:	07d2      	lsls	r2, r2, #31
    58c0:	d5fa      	bpl.n	58b8 <PkaAddAff+0xbc>
    58c2:	4a12      	ldr	r2, [pc, #72]	; (590c <PkaAddAff+0x110>)
    58c4:	210e      	movs	r1, #14
    58c6:	601a      	str	r2, [r3, #0]
    58c8:	2000      	movs	r0, #0
    58ca:	230d      	movs	r3, #13
    58cc:	220f      	movs	r2, #15
    58ce:	b00e      	add	sp, #56	; 0x38
    58d0:	f7ff bf3c 	b.w	574c <PkaJcb2Afn>
    58d4:	508410b0 	.word	0x508410b0
    58d8:	50841080 	.word	0x50841080
    58dc:	29014380 	.word	0x29014380
    58e0:	21396340 	.word	0x21396340
    58e4:	29017080 	.word	0x29017080
    58e8:	21542080 	.word	0x21542080
    58ec:	9034d100 	.word	0x9034d100
    58f0:	903440c0 	.word	0x903440c0
    58f4:	292030c0 	.word	0x292030c0
    58f8:	900d53c0 	.word	0x900d53c0
    58fc:	90384100 	.word	0x90384100
    5900:	c8082383 	.word	0xc8082383
    5904:	2110e380 	.word	0x2110e380
    5908:	21384100 	.word	0x21384100
    590c:	c80843cf 	.word	0xc80843cf

00005910 <PkaSum2ScalarMullt>:
    5910:	2301      	movs	r3, #1
    5912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5916:	b092      	sub	sp, #72	; 0x48
    5918:	e9cd 3303 	strd	r3, r3, [sp, #12]
    591c:	4b62      	ldr	r3, [pc, #392]	; (5aa8 <PkaSum2ScalarMullt+0x198>)
    591e:	461d      	mov	r5, r3
    5920:	681a      	ldr	r2, [r3, #0]
    5922:	9205      	str	r2, [sp, #20]
    5924:	9a05      	ldr	r2, [sp, #20]
    5926:	07d2      	lsls	r2, r2, #31
    5928:	d5fa      	bpl.n	5920 <PkaSum2ScalarMullt+0x10>
    592a:	4b60      	ldr	r3, [pc, #384]	; (5aac <PkaSum2ScalarMullt+0x19c>)
    592c:	4c60      	ldr	r4, [pc, #384]	; (5ab0 <PkaSum2ScalarMullt+0x1a0>)
    592e:	6023      	str	r3, [r4, #0]
    5930:	4b60      	ldr	r3, [pc, #384]	; (5ab4 <PkaSum2ScalarMullt+0x1a4>)
    5932:	4619      	mov	r1, r3
    5934:	681a      	ldr	r2, [r3, #0]
    5936:	9206      	str	r2, [sp, #24]
    5938:	9a06      	ldr	r2, [sp, #24]
    593a:	07d7      	lsls	r7, r2, #31
    593c:	d5fa      	bpl.n	5934 <PkaSum2ScalarMullt+0x24>
    593e:	4b5e      	ldr	r3, [pc, #376]	; (5ab8 <PkaSum2ScalarMullt+0x1a8>)
    5940:	681a      	ldr	r2, [r3, #0]
    5942:	04d6      	lsls	r6, r2, #19
    5944:	f100 80a8 	bmi.w	5a98 <PkaSum2ScalarMullt+0x188>
    5948:	682a      	ldr	r2, [r5, #0]
    594a:	9207      	str	r2, [sp, #28]
    594c:	9a07      	ldr	r2, [sp, #28]
    594e:	07d0      	lsls	r0, r2, #31
    5950:	d5fa      	bpl.n	5948 <PkaSum2ScalarMullt+0x38>
    5952:	4a5a      	ldr	r2, [pc, #360]	; (5abc <PkaSum2ScalarMullt+0x1ac>)
    5954:	6022      	str	r2, [r4, #0]
    5956:	680a      	ldr	r2, [r1, #0]
    5958:	9208      	str	r2, [sp, #32]
    595a:	9a08      	ldr	r2, [sp, #32]
    595c:	07d2      	lsls	r2, r2, #31
    595e:	d5fa      	bpl.n	5956 <PkaSum2ScalarMullt+0x46>
    5960:	681e      	ldr	r6, [r3, #0]
    5962:	f3c6 3600 	ubfx	r6, r6, #12, #1
    5966:	2e00      	cmp	r6, #0
    5968:	f040 8098 	bne.w	5a9c <PkaSum2ScalarMullt+0x18c>
    596c:	2012      	movs	r0, #18
    596e:	f7ff f8f3 	bl	4b58 <PkaGetRegEffectiveSizeInBits>
    5972:	4607      	mov	r7, r0
    5974:	2013      	movs	r0, #19
    5976:	f7ff f8ef 	bl	4b58 <PkaGetRegEffectiveSizeInBits>
    597a:	4287      	cmp	r7, r0
    597c:	bf8c      	ite	hi
    597e:	2012      	movhi	r0, #18
    5980:	2013      	movls	r0, #19
    5982:	f7ff f8e9 	bl	4b58 <PkaGetRegEffectiveSizeInBits>
    5986:	1e47      	subs	r7, r0, #1
    5988:	f7ff ff38 	bl	57fc <PkaAddAff>
    598c:	ab03      	add	r3, sp, #12
    598e:	aa01      	add	r2, sp, #4
    5990:	4639      	mov	r1, r7
    5992:	2012      	movs	r0, #18
    5994:	f7ff f926 	bl	4be4 <PkaGetNextMsBit>
    5998:	ab04      	add	r3, sp, #16
    599a:	4680      	mov	r8, r0
    599c:	aa02      	add	r2, sp, #8
    599e:	4639      	mov	r1, r7
    59a0:	2013      	movs	r0, #19
    59a2:	f7ff f91f 	bl	4be4 <PkaGetNextMsBit>
    59a6:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    59aa:	2802      	cmp	r0, #2
    59ac:	d032      	beq.n	5a14 <PkaSum2ScalarMullt+0x104>
    59ae:	2803      	cmp	r0, #3
    59b0:	d03e      	beq.n	5a30 <PkaSum2ScalarMullt+0x120>
    59b2:	2801      	cmp	r0, #1
    59b4:	d174      	bne.n	5aa0 <PkaSum2ScalarMullt+0x190>
    59b6:	682b      	ldr	r3, [r5, #0]
    59b8:	9309      	str	r3, [sp, #36]	; 0x24
    59ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59bc:	07db      	lsls	r3, r3, #31
    59be:	d5fa      	bpl.n	59b6 <PkaSum2ScalarMullt+0xa6>
    59c0:	4b3f      	ldr	r3, [pc, #252]	; (5ac0 <PkaSum2ScalarMullt+0x1b0>)
    59c2:	6023      	str	r3, [r4, #0]
    59c4:	682b      	ldr	r3, [r5, #0]
    59c6:	930a      	str	r3, [sp, #40]	; 0x28
    59c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    59ca:	07d8      	lsls	r0, r3, #31
    59cc:	d5fa      	bpl.n	59c4 <PkaSum2ScalarMullt+0xb4>
    59ce:	4b3d      	ldr	r3, [pc, #244]	; (5ac4 <PkaSum2ScalarMullt+0x1b4>)
    59d0:	6023      	str	r3, [r4, #0]
    59d2:	682b      	ldr	r3, [r5, #0]
    59d4:	930f      	str	r3, [sp, #60]	; 0x3c
    59d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    59d8:	07d9      	lsls	r1, r3, #31
    59da:	d5fa      	bpl.n	59d2 <PkaSum2ScalarMullt+0xc2>
    59dc:	4b3a      	ldr	r3, [pc, #232]	; (5ac8 <PkaSum2ScalarMullt+0x1b8>)
    59de:	6023      	str	r3, [r4, #0]
    59e0:	682b      	ldr	r3, [r5, #0]
    59e2:	9310      	str	r3, [sp, #64]	; 0x40
    59e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    59e6:	07da      	lsls	r2, r3, #31
    59e8:	d5fa      	bpl.n	59e0 <PkaSum2ScalarMullt+0xd0>
    59ea:	4b38      	ldr	r3, [pc, #224]	; (5acc <PkaSum2ScalarMullt+0x1bc>)
    59ec:	6023      	str	r3, [r4, #0]
    59ee:	682b      	ldr	r3, [r5, #0]
    59f0:	9311      	str	r3, [sp, #68]	; 0x44
    59f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    59f4:	07db      	lsls	r3, r3, #31
    59f6:	d5fa      	bpl.n	59ee <PkaSum2ScalarMullt+0xde>
    59f8:	4b35      	ldr	r3, [pc, #212]	; (5ad0 <PkaSum2ScalarMullt+0x1c0>)
    59fa:	6023      	str	r3, [r4, #0]
    59fc:	3f01      	subs	r7, #1
    59fe:	d525      	bpl.n	5a4c <PkaSum2ScalarMullt+0x13c>
    5a00:	2310      	movs	r3, #16
    5a02:	2219      	movs	r2, #25
    5a04:	2118      	movs	r1, #24
    5a06:	2000      	movs	r0, #0
    5a08:	f7ff fea0 	bl	574c <PkaJcb2Afn>
    5a0c:	4630      	mov	r0, r6
    5a0e:	b012      	add	sp, #72	; 0x48
    5a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a14:	682b      	ldr	r3, [r5, #0]
    5a16:	930b      	str	r3, [sp, #44]	; 0x2c
    5a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    5a1a:	07d9      	lsls	r1, r3, #31
    5a1c:	d5fa      	bpl.n	5a14 <PkaSum2ScalarMullt+0x104>
    5a1e:	4b2d      	ldr	r3, [pc, #180]	; (5ad4 <PkaSum2ScalarMullt+0x1c4>)
    5a20:	6023      	str	r3, [r4, #0]
    5a22:	682b      	ldr	r3, [r5, #0]
    5a24:	930c      	str	r3, [sp, #48]	; 0x30
    5a26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5a28:	07da      	lsls	r2, r3, #31
    5a2a:	d5fa      	bpl.n	5a22 <PkaSum2ScalarMullt+0x112>
    5a2c:	4b2a      	ldr	r3, [pc, #168]	; (5ad8 <PkaSum2ScalarMullt+0x1c8>)
    5a2e:	e7cf      	b.n	59d0 <PkaSum2ScalarMullt+0xc0>
    5a30:	682b      	ldr	r3, [r5, #0]
    5a32:	930d      	str	r3, [sp, #52]	; 0x34
    5a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5a36:	07db      	lsls	r3, r3, #31
    5a38:	d5fa      	bpl.n	5a30 <PkaSum2ScalarMullt+0x120>
    5a3a:	4b28      	ldr	r3, [pc, #160]	; (5adc <PkaSum2ScalarMullt+0x1cc>)
    5a3c:	6023      	str	r3, [r4, #0]
    5a3e:	682b      	ldr	r3, [r5, #0]
    5a40:	930e      	str	r3, [sp, #56]	; 0x38
    5a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5a44:	07d8      	lsls	r0, r3, #31
    5a46:	d5fa      	bpl.n	5a3e <PkaSum2ScalarMullt+0x12e>
    5a48:	4b25      	ldr	r3, [pc, #148]	; (5ae0 <PkaSum2ScalarMullt+0x1d0>)
    5a4a:	e7c1      	b.n	59d0 <PkaSum2ScalarMullt+0xc0>
    5a4c:	ab03      	add	r3, sp, #12
    5a4e:	aa01      	add	r2, sp, #4
    5a50:	4639      	mov	r1, r7
    5a52:	2012      	movs	r0, #18
    5a54:	f7ff f8c6 	bl	4be4 <PkaGetNextMsBit>
    5a58:	ab04      	add	r3, sp, #16
    5a5a:	4604      	mov	r4, r0
    5a5c:	aa02      	add	r2, sp, #8
    5a5e:	4639      	mov	r1, r7
    5a60:	2013      	movs	r0, #19
    5a62:	f7ff f8bf 	bl	4be4 <PkaGetNextMsBit>
    5a66:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    5a6a:	d102      	bne.n	5a72 <PkaSum2ScalarMullt+0x162>
    5a6c:	f7ff fc12 	bl	5294 <PkaDoubleMdf2Mdf>
    5a70:	e7c4      	b.n	59fc <PkaSum2ScalarMullt+0xec>
    5a72:	f7ff fce5 	bl	5440 <PkaDoubleMdf2Jcb>
    5a76:	2c02      	cmp	r4, #2
    5a78:	d008      	beq.n	5a8c <PkaSum2ScalarMullt+0x17c>
    5a7a:	2c03      	cmp	r4, #3
    5a7c:	d009      	beq.n	5a92 <PkaSum2ScalarMullt+0x182>
    5a7e:	2c01      	cmp	r4, #1
    5a80:	d110      	bne.n	5aa4 <PkaSum2ScalarMullt+0x194>
    5a82:	2117      	movs	r1, #23
    5a84:	2016      	movs	r0, #22
    5a86:	f7ff fd97 	bl	55b8 <PkaAddJcbAfn2Mdf>
    5a8a:	e7b7      	b.n	59fc <PkaSum2ScalarMullt+0xec>
    5a8c:	2115      	movs	r1, #21
    5a8e:	2014      	movs	r0, #20
    5a90:	e7f9      	b.n	5a86 <PkaSum2ScalarMullt+0x176>
    5a92:	210f      	movs	r1, #15
    5a94:	200e      	movs	r0, #14
    5a96:	e7f6      	b.n	5a86 <PkaSum2ScalarMullt+0x176>
    5a98:	4e12      	ldr	r6, [pc, #72]	; (5ae4 <PkaSum2ScalarMullt+0x1d4>)
    5a9a:	e7b7      	b.n	5a0c <PkaSum2ScalarMullt+0xfc>
    5a9c:	4e12      	ldr	r6, [pc, #72]	; (5ae8 <PkaSum2ScalarMullt+0x1d8>)
    5a9e:	e7b5      	b.n	5a0c <PkaSum2ScalarMullt+0xfc>
    5aa0:	4e12      	ldr	r6, [pc, #72]	; (5aec <PkaSum2ScalarMullt+0x1dc>)
    5aa2:	e7b3      	b.n	5a0c <PkaSum2ScalarMullt+0xfc>
    5aa4:	4e12      	ldr	r6, [pc, #72]	; (5af0 <PkaSum2ScalarMullt+0x1e0>)
    5aa6:	e7b1      	b.n	5a0c <PkaSum2ScalarMullt+0xfc>
    5aa8:	508410b0 	.word	0x508410b0
    5aac:	514a0800 	.word	0x514a0800
    5ab0:	50841080 	.word	0x50841080
    5ab4:	508410b4 	.word	0x508410b4
    5ab8:	50841088 	.word	0x50841088
    5abc:	514e0800 	.word	0x514e0800
    5ac0:	495a0600 	.word	0x495a0600
    5ac4:	495e0640 	.word	0x495e0640
    5ac8:	41420400 	.word	0x41420400
    5acc:	49421400 	.word	0x49421400
    5ad0:	492e0440 	.word	0x492e0440
    5ad4:	49520600 	.word	0x49520600
    5ad8:	49560640 	.word	0x49560640
    5adc:	493a0600 	.word	0x493a0600
    5ae0:	493e0640 	.word	0x493e0640
    5ae4:	00f10806 	.word	0x00f10806
    5ae8:	00f10807 	.word	0x00f10807
    5aec:	00f10804 	.word	0x00f10804
    5af0:	00f10805 	.word	0x00f10805

00005af4 <SaSi_HalClearInterruptBit>:
    5af4:	4b01      	ldr	r3, [pc, #4]	; (5afc <SaSi_HalClearInterruptBit+0x8>)
    5af6:	6018      	str	r0, [r3, #0]
    5af8:	4770      	bx	lr
    5afa:	bf00      	nop
    5afc:	50841a08 	.word	0x50841a08

00005b00 <SaSi_HalMaskInterrupt>:
    5b00:	4b01      	ldr	r3, [pc, #4]	; (5b08 <SaSi_HalMaskInterrupt+0x8>)
    5b02:	6018      	str	r0, [r3, #0]
    5b04:	4770      	bx	lr
    5b06:	bf00      	nop
    5b08:	50841a04 	.word	0x50841a04

00005b0c <SaSi_HalWaitInterrupt>:
    5b0c:	4a03      	ldr	r2, [pc, #12]	; (5b1c <SaSi_HalWaitInterrupt+0x10>)
    5b0e:	6813      	ldr	r3, [r2, #0]
    5b10:	4218      	tst	r0, r3
    5b12:	d0fc      	beq.n	5b0e <SaSi_HalWaitInterrupt+0x2>
    5b14:	4a02      	ldr	r2, [pc, #8]	; (5b20 <SaSi_HalWaitInterrupt+0x14>)
    5b16:	6010      	str	r0, [r2, #0]
    5b18:	4618      	mov	r0, r3
    5b1a:	4770      	bx	lr
    5b1c:	50841a00 	.word	0x50841a00
    5b20:	50841a08 	.word	0x50841a08

00005b24 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5b24:	b129      	cbz	r1, 5b32 <flash_area_id_from_multi_image_slot+0xe>
    5b26:	2901      	cmp	r1, #1
    5b28:	bf14      	ite	ne
    5b2a:	f06f 0015 	mvnne.w	r0, #21
    5b2e:	2007      	moveq	r0, #7
    5b30:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5b32:	2003      	movs	r0, #3
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    5b34:	4770      	bx	lr

00005b36 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    5b36:	2000      	movs	r0, #0
    5b38:	4770      	bx	lr

00005b3a <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    5b3a:	4770      	bx	lr

00005b3c <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    5b3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5b40:	460e      	mov	r6, r1
    5b42:	4617      	mov	r7, r2
    5b44:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5b46:	4604      	mov	r4, r0
    5b48:	b928      	cbnz	r0, 5b56 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5b4a:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5b4e:	4640      	mov	r0, r8
    5b50:	b003      	add	sp, #12
    5b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5b56:	2900      	cmp	r1, #0
    5b58:	d0f7      	beq.n	5b4a <bootutil_tlv_iter_begin+0xe>
    5b5a:	2a00      	cmp	r2, #0
    5b5c:	d0f5      	beq.n	5b4a <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5b5e:	68cb      	ldr	r3, [r1, #12]
    5b60:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5b62:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5b64:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5b66:	2304      	movs	r3, #4
    5b68:	4629      	mov	r1, r5
    5b6a:	eb0d 0203 	add.w	r2, sp, r3
    5b6e:	f000 fc3a 	bl	63e6 <flash_area_read>
    5b72:	4680      	mov	r8, r0
    5b74:	2800      	cmp	r0, #0
    5b76:	d1e8      	bne.n	5b4a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5b78:	f646 1208 	movw	r2, #26888	; 0x6908
    5b7c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5b80:	8973      	ldrh	r3, [r6, #10]
    5b82:	4291      	cmp	r1, r2
    5b84:	d123      	bne.n	5bce <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5b86:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5b8a:	4299      	cmp	r1, r3
    5b8c:	d1dd      	bne.n	5b4a <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5b8e:	2304      	movs	r3, #4
    5b90:	4638      	mov	r0, r7
    5b92:	eb0d 0203 	add.w	r2, sp, r3
    5b96:	4429      	add	r1, r5
    5b98:	f000 fc25 	bl	63e6 <flash_area_read>
    5b9c:	2800      	cmp	r0, #0
    5b9e:	d1d4      	bne.n	5b4a <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5ba0:	f646 1307 	movw	r3, #26887	; 0x6907
    5ba4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5ba8:	429a      	cmp	r2, r3
    5baa:	d1ce      	bne.n	5b4a <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    5bac:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5bb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    5bb4:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5bb6:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    5bb8:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5bbc:	442b      	add	r3, r5
    5bbe:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    5bc0:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5bc2:	4413      	add	r3, r2
    it->type = type;
    5bc4:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5bc8:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    5bca:	6125      	str	r5, [r4, #16]
    return 0;
    5bcc:	e7bf      	b.n	5b4e <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d0e6      	beq.n	5ba0 <bootutil_tlv_iter_begin+0x64>
    5bd2:	e7ba      	b.n	5b4a <bootutil_tlv_iter_begin+0xe>

00005bd4 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    5bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5bd8:	460f      	mov	r7, r1
    5bda:	4690      	mov	r8, r2
    5bdc:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5bde:	4604      	mov	r4, r0
    5be0:	b920      	cbnz	r0, 5bec <bootutil_tlv_iter_next+0x18>
        return -1;
    5be2:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    5be6:	b003      	add	sp, #12
    5be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    5bec:	6803      	ldr	r3, [r0, #0]
    5bee:	2b00      	cmp	r3, #0
    5bf0:	d0f7      	beq.n	5be2 <bootutil_tlv_iter_next+0xe>
    5bf2:	6843      	ldr	r3, [r0, #4]
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d0f4      	beq.n	5be2 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5bf8:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    5bfc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5c00:	429a      	cmp	r2, r3
    5c02:	d216      	bcs.n	5c32 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    5c04:	6823      	ldr	r3, [r4, #0]
    5c06:	895b      	ldrh	r3, [r3, #10]
    5c08:	b123      	cbz	r3, 5c14 <bootutil_tlv_iter_next+0x40>
    5c0a:	68e3      	ldr	r3, [r4, #12]
    5c0c:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    5c0e:	bf04      	itt	eq
    5c10:	3304      	addeq	r3, #4
    5c12:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5c14:	2304      	movs	r3, #4
    5c16:	6921      	ldr	r1, [r4, #16]
    5c18:	6860      	ldr	r0, [r4, #4]
    5c1a:	eb0d 0203 	add.w	r2, sp, r3
    5c1e:	f000 fbe2 	bl	63e6 <flash_area_read>
        if (rc) {
    5c22:	2800      	cmp	r0, #0
    5c24:	d1dd      	bne.n	5be2 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5c26:	7aa3      	ldrb	r3, [r4, #10]
    5c28:	6925      	ldr	r5, [r4, #16]
    5c2a:	b123      	cbz	r3, 5c36 <bootutil_tlv_iter_next+0x62>
    5c2c:	68e3      	ldr	r3, [r4, #12]
    5c2e:	42ab      	cmp	r3, r5
    5c30:	d801      	bhi.n	5c36 <bootutil_tlv_iter_next+0x62>
            return 1;
    5c32:	2001      	movs	r0, #1
    5c34:	e7d7      	b.n	5be6 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5c36:	8921      	ldrh	r1, [r4, #8]
    5c38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5c3c:	4549      	cmp	r1, r9
    5c3e:	f103 0204 	add.w	r2, r3, #4
    5c42:	d003      	beq.n	5c4c <bootutil_tlv_iter_next+0x78>
    5c44:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5c48:	458c      	cmp	ip, r1
    5c4a:	d10b      	bne.n	5c64 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    5c4c:	b116      	cbz	r6, 5c54 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5c4e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5c52:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5c54:	3504      	adds	r5, #4
    5c56:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5c58:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    5c5c:	6923      	ldr	r3, [r4, #16]
    5c5e:	4413      	add	r3, r2
    5c60:	6123      	str	r3, [r4, #16]
            return 0;
    5c62:	e7c0      	b.n	5be6 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5c64:	4415      	add	r5, r2
    5c66:	6125      	str	r5, [r4, #16]
    5c68:	e7c8      	b.n	5bfc <bootutil_tlv_iter_next+0x28>

00005c6a <bootutil_read_bigint>:
{
    5c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5c6c:	460c      	mov	r4, r1
    5c6e:	4606      	mov	r6, r0
    5c70:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    5c72:	2302      	movs	r3, #2
    5c74:	4620      	mov	r0, r4
    5c76:	aa01      	add	r2, sp, #4
    5c78:	f000 fa40 	bl	60fc <mbedtls_asn1_get_tag>
    5c7c:	4605      	mov	r5, r0
    5c7e:	b9e8      	cbnz	r0, 5cbc <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    5c80:	9a01      	ldr	r2, [sp, #4]
    5c82:	2a1f      	cmp	r2, #31
    5c84:	d90e      	bls.n	5ca4 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    5c86:	f1a2 0120 	sub.w	r1, r2, #32
    5c8a:	4630      	mov	r0, r6
    5c8c:	2220      	movs	r2, #32
    5c8e:	6823      	ldr	r3, [r4, #0]
    5c90:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5c92:	f000 fc92 	bl	65ba <memcpy>
    *cp += len;
    5c96:	6823      	ldr	r3, [r4, #0]
    5c98:	9a01      	ldr	r2, [sp, #4]
    5c9a:	4413      	add	r3, r2
    5c9c:	6023      	str	r3, [r4, #0]
}
    5c9e:	4628      	mov	r0, r5
    5ca0:	b002      	add	sp, #8
    5ca2:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    5ca4:	4601      	mov	r1, r0
    5ca6:	f1c2 0220 	rsb	r2, r2, #32
    5caa:	4630      	mov	r0, r6
    5cac:	f000 fc90 	bl	65d0 <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5cb0:	9a01      	ldr	r2, [sp, #4]
    5cb2:	6821      	ldr	r1, [r4, #0]
    5cb4:	f1c2 0020 	rsb	r0, r2, #32
    5cb8:	4430      	add	r0, r6
    5cba:	e7ea      	b.n	5c92 <bootutil_read_bigint+0x28>
        return -3;
    5cbc:	f06f 0502 	mvn.w	r5, #2
    5cc0:	e7ed      	b.n	5c9e <bootutil_read_bigint+0x34>

00005cc2 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    5cc2:	f000 bc6a 	b.w	659a <memcmp>

00005cc6 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5cc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
    5cca:	4358      	muls	r0, r3
}
    5ccc:	3030      	adds	r0, #48	; 0x30
    5cce:	4770      	bx	lr

00005cd0 <boot_status_entries>:
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    5cd0:	780b      	ldrb	r3, [r1, #0]
    5cd2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    5cd6:	2b03      	cmp	r3, #3
}
    5cd8:	bf14      	ite	ne
    5cda:	f04f 30ff 	movne.w	r0, #4294967295
    5cde:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    5ce2:	4770      	bx	lr

00005ce4 <boot_status_off>:
{
    5ce4:	b510      	push	{r4, lr}
    5ce6:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    5ce8:	f000 fbf6 	bl	64d8 <flash_area_align>
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    5cec:	b2c3      	uxtb	r3, r0
}
    5cee:	f44f 70c0 	mov.w	r0, #384	; 0x180
    return flash_area_get_size(fap) - off_from_end;
    5cf2:	68a2      	ldr	r2, [r4, #8]
    5cf4:	3a30      	subs	r2, #48	; 0x30
}
    5cf6:	fb00 2013 	mls	r0, r0, r3, r2
    5cfa:	bd10      	pop	{r4, pc}

00005cfc <boot_write_copy_done>:
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    5cfc:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    5cfe:	2201      	movs	r2, #1
    5d00:	3920      	subs	r1, #32
    5d02:	f000 be98 	b.w	6a36 <boot_write_trailer_flag>

00005d06 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5d06:	b513      	push	{r0, r1, r4, lr}
    5d08:	4604      	mov	r4, r0
    5d0a:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5d0c:	f000 fe30 	bl	6970 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    5d10:	2304      	movs	r3, #4
    5d12:	f1a0 0108 	sub.w	r1, r0, #8
    5d16:	eb0d 0203 	add.w	r2, sp, r3
    5d1a:	4620      	mov	r0, r4
    5d1c:	f000 fe5c 	bl	69d8 <boot_write_trailer>
}
    5d20:	b002      	add	sp, #8
    5d22:	bd10      	pop	{r4, pc}

00005d24 <boot_read_image_size>:
{
    5d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d26:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5d28:	2000      	movs	r0, #0
{
    5d2a:	460c      	mov	r4, r1
    5d2c:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5d2e:	f7ff fef9 	bl	5b24 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5d32:	4669      	mov	r1, sp
    5d34:	b2c0      	uxtb	r0, r0
    5d36:	f7fb feaf 	bl	1a98 <flash_area_open>
    if (rc != 0) {
    5d3a:	b130      	cbz	r0, 5d4a <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    5d3c:	2501      	movs	r5, #1
    flash_area_close(fap);
    5d3e:	9800      	ldr	r0, [sp, #0]
    5d40:	f000 fb50 	bl	63e4 <flash_area_close>
}
    5d44:	4628      	mov	r0, r5
    5d46:	b003      	add	sp, #12
    5d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5d4a:	212c      	movs	r1, #44	; 0x2c
    5d4c:	fb01 5404 	mla	r4, r1, r4, r5
    5d50:	8921      	ldrh	r1, [r4, #8]
    5d52:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5d54:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5d56:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5d58:	2304      	movs	r3, #4
    5d5a:	4631      	mov	r1, r6
    5d5c:	eb0d 0203 	add.w	r2, sp, r3
    5d60:	f000 fb41 	bl	63e6 <flash_area_read>
    5d64:	4605      	mov	r5, r0
    5d66:	2800      	cmp	r0, #0
    5d68:	d1e8      	bne.n	5d3c <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5d6a:	f646 1308 	movw	r3, #26888	; 0x6908
    5d6e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5d72:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5d74:	429a      	cmp	r2, r3
    5d76:	d11a      	bne.n	5dae <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    5d78:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5d7c:	429c      	cmp	r4, r3
    5d7e:	d001      	beq.n	5d84 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    5d80:	2503      	movs	r5, #3
    5d82:	e7dc      	b.n	5d3e <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5d84:	2304      	movs	r3, #4
    5d86:	9800      	ldr	r0, [sp, #0]
    5d88:	eb0d 0203 	add.w	r2, sp, r3
    5d8c:	19a1      	adds	r1, r4, r6
    5d8e:	f000 fb2a 	bl	63e6 <flash_area_read>
    5d92:	2800      	cmp	r0, #0
    5d94:	d1d2      	bne.n	5d3c <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5d96:	f646 1307 	movw	r3, #26887	; 0x6907
    5d9a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5d9e:	429a      	cmp	r2, r3
    5da0:	d1ee      	bne.n	5d80 <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5da2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5da6:	4421      	add	r1, r4
    5da8:	4431      	add	r1, r6
    5daa:	6039      	str	r1, [r7, #0]
    rc = 0;
    5dac:	e7c7      	b.n	5d3e <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    5dae:	2c00      	cmp	r4, #0
    5db0:	d0f1      	beq.n	5d96 <boot_read_image_size+0x72>
    5db2:	e7e5      	b.n	5d80 <boot_read_image_size+0x5c>

00005db4 <boot_read_image_headers>:
{
    5db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5db6:	4613      	mov	r3, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5db8:	9201      	str	r2, [sp, #4]
{
    5dba:	460e      	mov	r6, r1
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5dbc:	4602      	mov	r2, r0
    5dbe:	2100      	movs	r1, #0
{
    5dc0:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5dc2:	f7fa ffdd 	bl	d80 <boot_read_image_header>
        if (rc != 0) {
    5dc6:	4604      	mov	r4, r0
    5dc8:	b950      	cbnz	r0, 5de0 <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5dca:	2101      	movs	r1, #1
    5dcc:	4628      	mov	r0, r5
    5dce:	9b01      	ldr	r3, [sp, #4]
    5dd0:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    5dd4:	f7fa ffd4 	bl	d80 <boot_read_image_header>
        if (rc != 0) {
    5dd8:	b110      	cbz	r0, 5de0 <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    5dda:	2e00      	cmp	r6, #0
    5ddc:	bf18      	it	ne
    5dde:	4604      	movne	r4, r0
}
    5de0:	4620      	mov	r0, r4
    5de2:	b002      	add	sp, #8
    5de4:	bd70      	pop	{r4, r5, r6, pc}

00005de6 <boot_read_sectors>:
{
    5de6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5de8:	2580      	movs	r5, #128	; 0x80
{
    5dea:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5dec:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5dee:	a901      	add	r1, sp, #4
    5df0:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5df2:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5df4:	f7fb fe6e 	bl	1ad4 <flash_area_get_sectors>
    if (rc != 0) {
    5df8:	b958      	cbnz	r0, 5e12 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    5dfa:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5dfc:	2007      	movs	r0, #7
    5dfe:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5e00:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5e02:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5e04:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5e06:	f7fb fe65 	bl	1ad4 <flash_area_get_sectors>
    if (rc != 0) {
    5e0a:	4605      	mov	r5, r0
    5e0c:	b128      	cbz	r0, 5e1a <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    5e0e:	2509      	movs	r5, #9
    5e10:	e000      	b.n	5e14 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    5e12:	2501      	movs	r5, #1
}
    5e14:	4628      	mov	r0, r5
    5e16:	b003      	add	sp, #12
    5e18:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5e1a:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5e1c:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5e1e:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5e20:	f000 fb5a 	bl	64d8 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5e24:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5e26:	e7f5      	b.n	5e14 <boot_read_sectors+0x2e>

00005e28 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5e28:	2301      	movs	r3, #1
    5e2a:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5e2c:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5e30:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5e32:	2300      	movs	r3, #0
    bs->source = 0;
    5e34:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5e38:	4770      	bx	lr

00005e3a <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5e3a:	7943      	ldrb	r3, [r0, #5]
    5e3c:	2b01      	cmp	r3, #1
    5e3e:	d107      	bne.n	5e50 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5e40:	6803      	ldr	r3, [r0, #0]
    5e42:	2b01      	cmp	r3, #1
    5e44:	d104      	bne.n	5e50 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5e46:	7900      	ldrb	r0, [r0, #4]
    5e48:	1e43      	subs	r3, r0, #1
    5e4a:	4258      	negs	r0, r3
    5e4c:	4158      	adcs	r0, r3
    5e4e:	4770      	bx	lr
    5e50:	2000      	movs	r0, #0
}
    5e52:	4770      	bx	lr

00005e54 <boot_write_status>:
{
    5e54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5e56:	4606      	mov	r6, r0
    5e58:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5e5a:	2003      	movs	r0, #3
    5e5c:	a901      	add	r1, sp, #4
    5e5e:	f7fb fe1b 	bl	1a98 <flash_area_open>
    if (rc != 0) {
    5e62:	bb38      	cbnz	r0, 5eb4 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5e64:	9801      	ldr	r0, [sp, #4]
    5e66:	f7ff ff3d 	bl	5ce4 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5e6a:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5e6c:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5e6e:	4628      	mov	r0, r5
    5e70:	f000 f8e6 	bl	6040 <boot_status_internal_off>
    off = boot_status_off(fap) +
    5e74:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5e76:	9801      	ldr	r0, [sp, #4]
    5e78:	f000 fb2e 	bl	64d8 <flash_area_align>
    5e7c:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5e7e:	9801      	ldr	r0, [sp, #4]
    5e80:	f000 fb33 	bl	64ea <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5e84:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5e86:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5e88:	eb0d 0002 	add.w	r0, sp, r2
    5e8c:	f000 fba0 	bl	65d0 <memset>
    buf[0] = bs->state;
    5e90:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5e92:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5e94:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    5e98:	9801      	ldr	r0, [sp, #4]
    5e9a:	b2f3      	uxtb	r3, r6
    5e9c:	aa02      	add	r2, sp, #8
    5e9e:	f000 fabe 	bl	641e <flash_area_write>
    if (rc != 0) {
    5ea2:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5ea4:	9801      	ldr	r0, [sp, #4]
    if (rc != 0) {
    5ea6:	bf18      	it	ne
    5ea8:	2401      	movne	r4, #1
    flash_area_close(fap);
    5eaa:	f000 fa9b 	bl	63e4 <flash_area_close>
}
    5eae:	4620      	mov	r0, r4
    5eb0:	b004      	add	sp, #16
    5eb2:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5eb4:	2401      	movs	r4, #1
    5eb6:	e7fa      	b.n	5eae <boot_write_status+0x5a>

00005eb8 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5eb8:	f000 badf 	b.w	647a <flash_area_erase>

00005ebc <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ec0:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ec2:	2100      	movs	r1, #0
{
    5ec4:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ec6:	4608      	mov	r0, r1
    5ec8:	f7ff fe2c 	bl	5b24 <flash_area_id_from_multi_image_slot>
    5ecc:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5ece:	2101      	movs	r1, #1
    5ed0:	2000      	movs	r0, #0
    5ed2:	f7ff fe27 	bl	5b24 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5ed6:	7833      	ldrb	r3, [r6, #0]
    5ed8:	429c      	cmp	r4, r3
    5eda:	d021      	beq.n	5f20 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5edc:	4298      	cmp	r0, r3
    5ede:	d121      	bne.n	5f24 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5ee0:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    5ee2:	232c      	movs	r3, #44	; 0x2c
    5ee4:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5ee8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5eea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5eec:	f7ff feeb 	bl	5cc6 <boot_trailer_sz>
    total_sz = 0;
    5ef0:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5ef4:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5ef6:	3d01      	subs	r5, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5efa:	4630      	mov	r0, r6
    5efc:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5f00:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5f04:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5f08:	681b      	ldr	r3, [r3, #0]
    5f0a:	464a      	mov	r2, r9
    5f0c:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5f0e:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5f10:	f7ff ffd2 	bl	5eb8 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5f14:	45b8      	cmp	r8, r7
        sector--;
    5f16:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    5f1a:	d3ed      	bcc.n	5ef8 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5f20:	2400      	movs	r4, #0
    5f22:	e7de      	b.n	5ee2 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5f24:	2001      	movs	r0, #1
    5f26:	e7f9      	b.n	5f1c <swap_erase_trailer_sectors+0x60>

00005f28 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5f2a:	4615      	mov	r5, r2
    5f2c:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5f2e:	2007      	movs	r0, #7
    5f30:	4669      	mov	r1, sp
    5f32:	f000 fd93 	bl	6a5c <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5f36:	79e9      	ldrb	r1, [r5, #7]
    5f38:	2901      	cmp	r1, #1
    5f3a:	d003      	beq.n	5f44 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5f3c:	2200      	movs	r2, #0
    5f3e:	4620      	mov	r0, r4
    5f40:	f000 fda0 	bl	6a84 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5f44:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5f48:	2b01      	cmp	r3, #1
    5f4a:	d102      	bne.n	5f52 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5f4c:	4620      	mov	r0, r4
    5f4e:	f000 fd7c 	bl	6a4a <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5f52:	68a9      	ldr	r1, [r5, #8]
    5f54:	4620      	mov	r0, r4
    5f56:	f7ff fed6 	bl	5d06 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5f5a:	4620      	mov	r0, r4
    5f5c:	f7fd fa4a 	bl	33f4 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5f60:	2000      	movs	r0, #0
    5f62:	b003      	add	sp, #12
    5f64:	bd30      	pop	{r4, r5, pc}

00005f66 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5f66:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f68:	460d      	mov	r5, r1
    5f6a:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5f6c:	f7fa fff0 	bl	f50 <swap_status_source>
    5f70:	4604      	mov	r4, r0
    5f72:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5f74:	b358      	cbz	r0, 5fce <swap_read_status+0x68>
    5f76:	2802      	cmp	r0, #2
    5f78:	d12e      	bne.n	5fd8 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5f7a:	2003      	movs	r0, #3
    5f7c:	a901      	add	r1, sp, #4
    5f7e:	f7fb fd8b 	bl	1a98 <flash_area_open>
    if (rc != 0) {
    5f82:	bb58      	cbnz	r0, 5fdc <swap_read_status+0x76>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5f84:	462a      	mov	r2, r5
    5f86:	4631      	mov	r1, r6
    5f88:	9801      	ldr	r0, [sp, #4]
    5f8a:	f7fa ff47 	bl	e1c <swap_read_status_bytes>
    if (rc == 0) {
    5f8e:	4604      	mov	r4, r0
    5f90:	b9d0      	cbnz	r0, 5fc8 <swap_read_status+0x62>
        off = boot_swap_info_off(fap);
    5f92:	9801      	ldr	r0, [sp, #4]
    5f94:	f000 fcec 	bl	6970 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5f98:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5f9a:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5f9c:	f10d 0203 	add.w	r2, sp, #3
    5fa0:	9801      	ldr	r0, [sp, #4]
    5fa2:	f000 fa20 	bl	63e6 <flash_area_read>
        if (rc != 0) {
    5fa6:	4604      	mov	r4, r0
    5fa8:	b9a0      	cbnz	r0, 5fd4 <swap_read_status+0x6e>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5faa:	2201      	movs	r2, #1
    5fac:	9801      	ldr	r0, [sp, #4]
    5fae:	f10d 0103 	add.w	r1, sp, #3
    5fb2:	f000 fcee 	bl	6992 <bootutil_buffer_is_erased>
    5fb6:	b110      	cbz	r0, 5fbe <swap_read_status+0x58>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5fb8:	2301      	movs	r3, #1
    5fba:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5fbe:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5fc2:	f003 030f 	and.w	r3, r3, #15
    5fc6:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5fc8:	9801      	ldr	r0, [sp, #4]
    5fca:	f000 fa0b 	bl	63e4 <flash_area_close>

    return rc;
}
    5fce:	4620      	mov	r0, r4
    5fd0:	b002      	add	sp, #8
    5fd2:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5fd4:	2401      	movs	r4, #1
    5fd6:	e7f7      	b.n	5fc8 <swap_read_status+0x62>
    switch (bs->source) {
    5fd8:	2407      	movs	r4, #7
    5fda:	e7f8      	b.n	5fce <swap_read_status+0x68>
        return BOOT_EFLASH;
    5fdc:	2401      	movs	r4, #1
    5fde:	e7f6      	b.n	5fce <swap_read_status+0x68>

00005fe0 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5fe0:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5fe2:	2003      	movs	r0, #3
    5fe4:	a901      	add	r1, sp, #4
    5fe6:	f7fb fd57 	bl	1a98 <flash_area_open>
            &fap);
    if (rc != 0) {
    5fea:	b948      	cbnz	r0, 6000 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5fec:	9801      	ldr	r0, [sp, #4]
    5fee:	f7ff fe85 	bl	5cfc <boot_write_copy_done>
    5ff2:	4604      	mov	r4, r0
    flash_area_close(fap);
    5ff4:	9801      	ldr	r0, [sp, #4]
    5ff6:	f000 f9f5 	bl	63e4 <flash_area_close>
    return rc;
}
    5ffa:	4620      	mov	r0, r4
    5ffc:	b002      	add	sp, #8
    5ffe:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6000:	2401      	movs	r4, #1
    6002:	e7fa      	b.n	5ffa <swap_set_copy_done+0x1a>

00006004 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    6004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    6006:	2003      	movs	r0, #3
    6008:	a901      	add	r1, sp, #4
    600a:	f7fb fd45 	bl	1a98 <flash_area_open>
            &fap);
    if (rc != 0) {
    600e:	b9a8      	cbnz	r0, 603c <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    6010:	9801      	ldr	r0, [sp, #4]
    6012:	a902      	add	r1, sp, #8
    6014:	f7fd f9fc 	bl	3410 <boot_read_swap_state>
    if (rc != 0) {
    6018:	4604      	mov	r4, r0
    601a:	b968      	cbnz	r0, 6038 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    601c:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6020:	2b03      	cmp	r3, #3
    6022:	d103      	bne.n	602c <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    6024:	9801      	ldr	r0, [sp, #4]
    6026:	f000 fd10 	bl	6a4a <boot_write_image_ok>
    602a:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    602c:	9801      	ldr	r0, [sp, #4]
    602e:	f000 f9d9 	bl	63e4 <flash_area_close>
    return rc;
}
    6032:	4620      	mov	r0, r4
    6034:	b004      	add	sp, #16
    6036:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    6038:	2401      	movs	r4, #1
    603a:	e7f7      	b.n	602c <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    603c:	2401      	movs	r4, #1
    603e:	e7f8      	b.n	6032 <swap_set_image_ok+0x2e>

00006040 <boot_status_internal_off>:
{
    6040:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6042:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6044:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    6046:	2b01      	cmp	r3, #1
    6048:	bf0a      	itet	eq
    604a:	2201      	moveq	r2, #1
    604c:	2202      	movne	r2, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    604e:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    6050:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6054:	f104 34ff 	add.w	r4, r4, #4294967295
    6058:	fb02 f204 	mul.w	r2, r2, r4
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    605c:	7903      	ldrb	r3, [r0, #4]
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    605e:	bf18      	it	ne
    6060:	01cd      	lslne	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    6062:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    6064:	fb01 2103 	mla	r1, r1, r3, r2
}
    6068:	1948      	adds	r0, r1, r5
    606a:	bd30      	pop	{r4, r5, pc}

0000606c <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    606c:	6803      	ldr	r3, [r0, #0]
{
    606e:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    6070:	1acd      	subs	r5, r1, r3
    6072:	2d00      	cmp	r5, #0
    6074:	dd0d      	ble.n	6092 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    6076:	f993 6000 	ldrsb.w	r6, [r3]
    607a:	781c      	ldrb	r4, [r3, #0]
    607c:	2e00      	cmp	r6, #0
    607e:	db0b      	blt.n	6098 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    6080:	1c5c      	adds	r4, r3, #1
    6082:	6004      	str	r4, [r0, #0]
    6084:	781b      	ldrb	r3, [r3, #0]
    6086:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6088:	6803      	ldr	r3, [r0, #0]
    608a:	1ac9      	subs	r1, r1, r3
    608c:	6813      	ldr	r3, [r2, #0]
    608e:	428b      	cmp	r3, r1
    6090:	d932      	bls.n	60f8 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6092:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    6096:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    6098:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    609c:	3c01      	subs	r4, #1
    609e:	2c03      	cmp	r4, #3
    60a0:	d827      	bhi.n	60f2 <mbedtls_asn1_get_len+0x86>
    60a2:	e8df f004 	tbb	[pc, r4]
    60a6:	0902      	.short	0x0902
    60a8:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    60aa:	2d01      	cmp	r5, #1
    60ac:	d0f1      	beq.n	6092 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    60ae:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    60b0:	3302      	adds	r3, #2
            *len = (*p)[1];
    60b2:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    60b4:	6003      	str	r3, [r0, #0]
            break;
    60b6:	e7e7      	b.n	6088 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    60b8:	2d02      	cmp	r5, #2
    60ba:	ddea      	ble.n	6092 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    60bc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    60c0:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    60c2:	ba64      	rev16	r4, r4
    60c4:	b2a4      	uxth	r4, r4
    60c6:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    60c8:	e7f4      	b.n	60b4 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    60ca:	2d03      	cmp	r5, #3
    60cc:	dde1      	ble.n	6092 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    60ce:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    60d0:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    60d2:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    60d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    60d8:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    60da:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    60dc:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    60de:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    60e0:	e7e8      	b.n	60b4 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    60e2:	2d04      	cmp	r5, #4
    60e4:	ddd5      	ble.n	6092 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    60e6:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    60ea:	3305      	adds	r3, #5
    60ec:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    60ee:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    60f0:	e7e0      	b.n	60b4 <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    60f2:	f06f 0063 	mvn.w	r0, #99	; 0x63
    60f6:	e7ce      	b.n	6096 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    60f8:	2000      	movs	r0, #0
    60fa:	e7cc      	b.n	6096 <mbedtls_asn1_get_len+0x2a>

000060fc <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    60fc:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    60fe:	6804      	ldr	r4, [r0, #0]
    6100:	1b0e      	subs	r6, r1, r4
    6102:	2e00      	cmp	r6, #0
    6104:	dd07      	ble.n	6116 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    6106:	7826      	ldrb	r6, [r4, #0]
    6108:	429e      	cmp	r6, r3
    610a:	d108      	bne.n	611e <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    610c:	3401      	adds	r4, #1
    610e:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    6110:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    6112:	f7ff bfab 	b.w	606c <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    6116:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    611a:	bc70      	pop	{r4, r5, r6}
    611c:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    611e:	f06f 0061 	mvn.w	r0, #97	; 0x61
    6122:	e7fa      	b.n	611a <mbedtls_asn1_get_tag+0x1e>

00006124 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    6124:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    6126:	2303      	movs	r3, #3
{
    6128:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    612a:	f7ff ffe7 	bl	60fc <mbedtls_asn1_get_tag>
    612e:	b918      	cbnz	r0, 6138 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    6130:	6813      	ldr	r3, [r2, #0]
    6132:	b913      	cbnz	r3, 613a <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    6134:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    6138:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    613a:	3b01      	subs	r3, #1
    613c:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    613e:	6823      	ldr	r3, [r4, #0]
    6140:	781a      	ldrb	r2, [r3, #0]
    6142:	2a00      	cmp	r2, #0
    6144:	d1f6      	bne.n	6134 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    6146:	3301      	adds	r3, #1
    6148:	6023      	str	r3, [r4, #0]
    return( 0 );
    614a:	e7f5      	b.n	6138 <mbedtls_asn1_get_bitstring_null+0x14>

0000614c <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    614c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6150:	4690      	mov	r8, r2
    6152:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    6154:	aa01      	add	r2, sp, #4
    6156:	2330      	movs	r3, #48	; 0x30
{
    6158:	4605      	mov	r5, r0
    615a:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    615c:	f7ff ffce 	bl	60fc <mbedtls_asn1_get_tag>
    6160:	4604      	mov	r4, r0
    6162:	b9f8      	cbnz	r0, 61a4 <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    6164:	682e      	ldr	r6, [r5, #0]
    6166:	eba9 0906 	sub.w	r9, r9, r6
    616a:	f1b9 0f00 	cmp.w	r9, #0
    616e:	dd35      	ble.n	61dc <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    6170:	4642      	mov	r2, r8
    end = *p + len;
    6172:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    6174:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;
    6176:	440e      	add	r6, r1
    alg->tag = **p;
    6178:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    617c:	4631      	mov	r1, r6
    617e:	2306      	movs	r3, #6
    6180:	4628      	mov	r0, r5
    6182:	f7ff ffbb 	bl	60fc <mbedtls_asn1_get_tag>
    6186:	4604      	mov	r4, r0
    6188:	b960      	cbnz	r0, 61a4 <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    618a:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    618c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    6190:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    6194:	1853      	adds	r3, r2, r1

    if( *p == end )
    6196:	42b3      	cmp	r3, r6
    *p += alg->len;
    6198:	602b      	str	r3, [r5, #0]
    if( *p == end )
    619a:	d107      	bne.n	61ac <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    619c:	210c      	movs	r1, #12
    619e:	4638      	mov	r0, r7
    61a0:	f7fe f95a 	bl	4458 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    61a4:	4620      	mov	r0, r4
    61a6:	b003      	add	sp, #12
    61a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    61ac:	5c51      	ldrb	r1, [r2, r1]
    61ae:	463a      	mov	r2, r7
    (*p)++;
    61b0:	3301      	adds	r3, #1
    params->tag = **p;
    61b2:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    61b6:	4628      	mov	r0, r5
    61b8:	4631      	mov	r1, r6
    (*p)++;
    61ba:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    61bc:	f7ff ff56 	bl	606c <mbedtls_asn1_get_len>
    61c0:	4604      	mov	r4, r0
    61c2:	2800      	cmp	r0, #0
    61c4:	d1ee      	bne.n	61a4 <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    61c6:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    61c8:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    61ca:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    61cc:	4413      	add	r3, r2
    if( *p != end )
    61ce:	42b3      	cmp	r3, r6
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    61d0:	bf0c      	ite	eq
    61d2:	4604      	moveq	r4, r0
    61d4:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    61d8:	602b      	str	r3, [r5, #0]
    if( *p != end )
    61da:	e7e3      	b.n	61a4 <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    61dc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    61e0:	e7e0      	b.n	61a4 <mbedtls_asn1_get_alg+0x58>

000061e2 <cc310_sha256_update>:
{
    61e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    61e4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    61e8:	4605      	mov	r5, r0
    61ea:	4614      	mov	r4, r2
    61ec:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    61ee:	d210      	bcs.n	6212 <cc310_sha256_update+0x30>
    61f0:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    61f2:	1dd3      	adds	r3, r2, #7
    61f4:	f023 0307 	bic.w	r3, r3, #7
    61f8:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    61fc:	4668      	mov	r0, sp
    61fe:	f000 f9dc 	bl	65ba <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    6202:	4669      	mov	r1, sp
    6204:	4622      	mov	r2, r4
    6206:	4628      	mov	r0, r5
    6208:	f7fe fbe0 	bl	49cc <nrf_cc310_bl_hash_sha256_update>
    620c:	46b5      	mov	sp, r6
};
    620e:	46bd      	mov	sp, r7
    6210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    6212:	f7fe fbdb 	bl	49cc <nrf_cc310_bl_hash_sha256_update>
};
    6216:	e7fa      	b.n	620e <cc310_sha256_update+0x2c>

00006218 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6218:	b160      	cbz	r0, 6234 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    621a:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    621c:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6220:	2b01      	cmp	r3, #1
    6222:	d003      	beq.n	622c <sys_notify_validate+0x14>
    6224:	2b03      	cmp	r3, #3
    6226:	d105      	bne.n	6234 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6228:	6803      	ldr	r3, [r0, #0]
    622a:	b11b      	cbz	r3, 6234 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    622c:	2300      	movs	r3, #0
    622e:	6083      	str	r3, [r0, #8]
    6230:	4618      	mov	r0, r3
    6232:	4770      	bx	lr
		return -EINVAL;
    6234:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6238:	4770      	bx	lr

0000623a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    623a:	2200      	movs	r2, #0
    623c:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    623e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6240:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    6244:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = NULL;
    6246:	bf14      	ite	ne
    6248:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    624a:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    624c:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    624e:	4618      	mov	r0, r3
    6250:	4770      	bx	lr

00006252 <arch_printk_char_out>:
}
    6252:	2000      	movs	r0, #0
    6254:	4770      	bx	lr

00006256 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    6256:	b40f      	push	{r0, r1, r2, r3}
    6258:	b507      	push	{r0, r1, r2, lr}
    625a:	a904      	add	r1, sp, #16
    625c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6260:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    6262:	f7fb f8b9 	bl	13d8 <vprintk>
	}
	va_end(ap);
}
    6266:	b003      	add	sp, #12
    6268:	f85d eb04 	ldr.w	lr, [sp], #4
    626c:	b004      	add	sp, #16
    626e:	4770      	bx	lr

00006270 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6270:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    6272:	f013 0307 	ands.w	r3, r3, #7
    6276:	d105      	bne.n	6284 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6278:	6803      	ldr	r3, [r0, #0]
    627a:	2b00      	cmp	r3, #0
		evt = EVT_START;
    627c:	bf0c      	ite	eq
    627e:	2000      	moveq	r0, #0
    6280:	2003      	movne	r0, #3
    6282:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6284:	2b02      	cmp	r3, #2
    6286:	d105      	bne.n	6294 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6288:	8b43      	ldrh	r3, [r0, #26]
    628a:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    628c:	bf14      	ite	ne
    628e:	2000      	movne	r0, #0
    6290:	2004      	moveq	r0, #4
    6292:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6294:	2b01      	cmp	r3, #1
    6296:	d105      	bne.n	62a4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6298:	6803      	ldr	r3, [r0, #0]
    629a:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    629c:	bf0c      	ite	eq
    629e:	2000      	moveq	r0, #0
    62a0:	2005      	movne	r0, #5
    62a2:	4770      	bx	lr
	int evt = EVT_NOP;
    62a4:	2000      	movs	r0, #0
}
    62a6:	4770      	bx	lr

000062a8 <notify_one>:
{
    62a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    62aa:	460d      	mov	r5, r1
    62ac:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    62ae:	4619      	mov	r1, r3
    62b0:	1d28      	adds	r0, r5, #4
{
    62b2:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    62b4:	9300      	str	r3, [sp, #0]
    62b6:	f7ff ffc0 	bl	623a <sys_notify_finalize>
	if (cb) {
    62ba:	4604      	mov	r4, r0
    62bc:	b140      	cbz	r0, 62d0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    62be:	e9dd 3200 	ldrd	r3, r2, [sp]
    62c2:	4629      	mov	r1, r5
    62c4:	4630      	mov	r0, r6
    62c6:	46a4      	mov	ip, r4
}
    62c8:	b002      	add	sp, #8
    62ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    62ce:	4760      	bx	ip
}
    62d0:	b002      	add	sp, #8
    62d2:	bd70      	pop	{r4, r5, r6, pc}

000062d4 <transition_complete>:
{
    62d4:	b410      	push	{r4}
    62d6:	f04f 0420 	mov.w	r4, #32
    62da:	f3ef 8211 	mrs	r2, BASEPRI
    62de:	f384 8812 	msr	BASEPRI_MAX, r4
    62e2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    62e6:	6141      	str	r1, [r0, #20]
}
    62e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    62ec:	2101      	movs	r1, #1
    62ee:	f7fb b881 	b.w	13f4 <process_event>

000062f2 <validate_args>:
{
    62f2:	b510      	push	{r4, lr}
    62f4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    62f6:	b140      	cbz	r0, 630a <validate_args+0x18>
    62f8:	b139      	cbz	r1, 630a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    62fa:	1d08      	adds	r0, r1, #4
    62fc:	f7ff ff8c 	bl	6218 <sys_notify_validate>
	if ((rv == 0)
    6300:	b928      	cbnz	r0, 630e <validate_args+0x1c>
	    && ((cli->notify.flags
    6302:	68a3      	ldr	r3, [r4, #8]
    6304:	f033 0303 	bics.w	r3, r3, #3
    6308:	d001      	beq.n	630e <validate_args+0x1c>
		rv = -EINVAL;
    630a:	f06f 0015 	mvn.w	r0, #21
}
    630e:	bd10      	pop	{r4, pc}

00006310 <onoff_manager_init>:
{
    6310:	b538      	push	{r3, r4, r5, lr}
    6312:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6314:	4605      	mov	r5, r0
    6316:	b158      	cbz	r0, 6330 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6318:	b151      	cbz	r1, 6330 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    631a:	680b      	ldr	r3, [r1, #0]
    631c:	b143      	cbz	r3, 6330 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    631e:	684b      	ldr	r3, [r1, #4]
    6320:	b133      	cbz	r3, 6330 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6322:	221c      	movs	r2, #28
    6324:	2100      	movs	r1, #0
    6326:	f000 f953 	bl	65d0 <memset>
	return 0;
    632a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    632c:	612c      	str	r4, [r5, #16]
}
    632e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6330:	f06f 0015 	mvn.w	r0, #21
    6334:	e7fb      	b.n	632e <onoff_manager_init+0x1e>

00006336 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6336:	b570      	push	{r4, r5, r6, lr}
    6338:	4604      	mov	r4, r0
    633a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    633c:	f7ff ffd9 	bl	62f2 <validate_args>

	if (rv < 0) {
    6340:	1e05      	subs	r5, r0, #0
    6342:	db31      	blt.n	63a8 <onoff_request+0x72>
    6344:	f04f 0320 	mov.w	r3, #32
    6348:	f3ef 8111 	mrs	r1, BASEPRI
    634c:	f383 8812 	msr	BASEPRI_MAX, r3
    6350:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6354:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6358:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    635a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    635c:	42ab      	cmp	r3, r5
    635e:	f000 0207 	and.w	r2, r0, #7
    6362:	d02e      	beq.n	63c2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6364:	2a02      	cmp	r2, #2
    6366:	d10e      	bne.n	6386 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6368:	3301      	adds	r3, #1
    636a:	8363      	strh	r3, [r4, #26]
	rv = state;
    636c:	4615      	mov	r5, r2
		notify = true;
    636e:	2301      	movs	r3, #1
	__asm__ volatile(
    6370:	f381 8811 	msr	BASEPRI, r1
    6374:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6378:	b1b3      	cbz	r3, 63a8 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    637a:	2300      	movs	r3, #0
    637c:	4631      	mov	r1, r6
    637e:	4620      	mov	r0, r4
    6380:	f7ff ff92 	bl	62a8 <notify_one>
    6384:	e010      	b.n	63a8 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6386:	0783      	lsls	r3, r0, #30
    6388:	d001      	beq.n	638e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    638a:	2a06      	cmp	r2, #6
    638c:	d10e      	bne.n	63ac <onoff_request+0x76>
	parent->next = child;
    638e:	2300      	movs	r3, #0
    6390:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    6392:	6863      	ldr	r3, [r4, #4]
    6394:	b993      	cbnz	r3, 63bc <onoff_request+0x86>
	list->head = node;
    6396:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    639a:	4615      	mov	r5, r2
    639c:	b962      	cbnz	r2, 63b8 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    639e:	460a      	mov	r2, r1
    63a0:	4620      	mov	r0, r4
    63a2:	2102      	movs	r1, #2
    63a4:	f7fb f826 	bl	13f4 <process_event>
		}
	}

	return rv;
}
    63a8:	4628      	mov	r0, r5
    63aa:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    63ac:	2a05      	cmp	r2, #5
    63ae:	bf0c      	ite	eq
    63b0:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    63b4:	f06f 0504 	mvnne.w	r5, #4
    63b8:	2300      	movs	r3, #0
    63ba:	e7d9      	b.n	6370 <onoff_request+0x3a>
	parent->next = child;
    63bc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    63be:	6066      	str	r6, [r4, #4]
}
    63c0:	e7eb      	b.n	639a <onoff_request+0x64>
		rv = -EAGAIN;
    63c2:	f06f 050a 	mvn.w	r5, #10
    63c6:	e7f7      	b.n	63b8 <onoff_request+0x82>

000063c8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_META, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    63c8:	4770      	bx	lr

000063ca <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    63ca:	b40f      	push	{r0, r1, r2, r3}
    63cc:	b507      	push	{r0, r1, r2, lr}
    63ce:	a904      	add	r1, sp, #16
    63d0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    63d4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    63d6:	f7fa ffff 	bl	13d8 <vprintk>
	va_end(ap);
}
    63da:	b003      	add	sp, #12
    63dc:	f85d eb04 	ldr.w	lr, [sp], #4
    63e0:	b004      	add	sp, #16
    63e2:	4770      	bx	lr

000063e4 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    63e4:	4770      	bx	lr

000063e6 <flash_area_read>:

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    63e6:	b573      	push	{r0, r1, r4, r5, r6, lr}


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    63e8:	1e0c      	subs	r4, r1, #0
    63ea:	4605      	mov	r5, r0
    63ec:	461e      	mov	r6, r3
    63ee:	9201      	str	r2, [sp, #4]
    63f0:	db11      	blt.n	6416 <flash_area_read+0x30>
    63f2:	6881      	ldr	r1, [r0, #8]
    63f4:	18e3      	adds	r3, r4, r3
    63f6:	428b      	cmp	r3, r1
    63f8:	d80d      	bhi.n	6416 <flash_area_read+0x30>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    63fa:	68c0      	ldr	r0, [r0, #12]
    63fc:	f7fd fe40 	bl	4080 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    6400:	6869      	ldr	r1, [r5, #4]
    6402:	4421      	add	r1, r4
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    6404:	6883      	ldr	r3, [r0, #8]
    6406:	9a01      	ldr	r2, [sp, #4]
    6408:	681c      	ldr	r4, [r3, #0]
    640a:	4633      	mov	r3, r6
    640c:	46a4      	mov	ip, r4
}
    640e:	b002      	add	sp, #8
    6410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6414:	4760      	bx	ip
    6416:	f06f 0015 	mvn.w	r0, #21
    641a:	b002      	add	sp, #8
    641c:	bd70      	pop	{r4, r5, r6, pc}

0000641e <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    641e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6422:	f1b1 0900 	subs.w	r9, r1, #0
    6426:	4607      	mov	r7, r0
    6428:	4690      	mov	r8, r2
    642a:	461e      	mov	r6, r3
    642c:	db22      	blt.n	6474 <flash_area_write+0x56>
    642e:	6882      	ldr	r2, [r0, #8]
    6430:	444b      	add	r3, r9
    6432:	4293      	cmp	r3, r2
    6434:	d81e      	bhi.n	6474 <flash_area_write+0x56>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    6436:	68c0      	ldr	r0, [r0, #12]
    6438:	f7fd fe22 	bl	4080 <z_impl_device_get_binding>

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    643c:	6879      	ldr	r1, [r7, #4]
    643e:	4605      	mov	r5, r0
    6440:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
    6442:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    6444:	68fb      	ldr	r3, [r7, #12]
    6446:	b95b      	cbnz	r3, 6460 <flash_area_write+0x42>
		if (rc) {
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
    6448:	4633      	mov	r3, r6
    644a:	687c      	ldr	r4, [r7, #4]
    644c:	4642      	mov	r2, r8
    644e:	4649      	mov	r1, r9
    6450:	4628      	mov	r0, r5
    6452:	47a0      	blx	r4

	if (api->write_protection != NULL) {
    6454:	68fb      	ldr	r3, [r7, #12]
	rc = api->write(dev, offset, data, len);
    6456:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    6458:	b943      	cbnz	r3, 646c <flash_area_write+0x4e>

	return rc;
}
    645a:	4620      	mov	r0, r4
    645c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rc = api->write_protection(dev, false);
    6460:	2100      	movs	r1, #0
    6462:	4798      	blx	r3
		if (rc) {
    6464:	4604      	mov	r4, r0
    6466:	2800      	cmp	r0, #0
    6468:	d0ee      	beq.n	6448 <flash_area_write+0x2a>
    646a:	e7f6      	b.n	645a <flash_area_write+0x3c>
		(void) api->write_protection(dev, true);
    646c:	2101      	movs	r1, #1
    646e:	4628      	mov	r0, r5
    6470:	4798      	blx	r3
    6472:	e7f2      	b.n	645a <flash_area_write+0x3c>
		return -EINVAL;
    6474:	f06f 0415 	mvn.w	r4, #21
    6478:	e7ef      	b.n	645a <flash_area_write+0x3c>

0000647a <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    647a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    647e:	1e0c      	subs	r4, r1, #0
    6480:	4605      	mov	r5, r0
    6482:	4617      	mov	r7, r2
    6484:	db25      	blt.n	64d2 <flash_area_erase+0x58>
    6486:	18a3      	adds	r3, r4, r2
    6488:	6882      	ldr	r2, [r0, #8]
    648a:	4293      	cmp	r3, r2
    648c:	d821      	bhi.n	64d2 <flash_area_erase+0x58>

	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    648e:	68c0      	ldr	r0, [r0, #12]
    6490:	f7fd fdf6 	bl	4080 <z_impl_device_get_binding>

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    6494:	686d      	ldr	r5, [r5, #4]
    6496:	4606      	mov	r6, r0
    6498:	4425      	add	r5, r4
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
    649a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
    649e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    64a2:	b963      	cbnz	r3, 64be <flash_area_erase+0x44>
		if (rc) {
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
    64a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
    64a8:	463a      	mov	r2, r7
    64aa:	4629      	mov	r1, r5
    64ac:	4630      	mov	r0, r6
    64ae:	4798      	blx	r3

	if (api->write_protection != NULL) {
    64b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
	rc = api->erase(dev, offset, size);
    64b4:	4604      	mov	r4, r0
	if (api->write_protection != NULL) {
    64b6:	b943      	cbnz	r3, 64ca <flash_area_erase+0x50>

	return rc;
}
    64b8:	4620      	mov	r0, r4
    64ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = api->write_protection(dev, false);
    64be:	2100      	movs	r1, #0
    64c0:	4798      	blx	r3
		if (rc) {
    64c2:	4604      	mov	r4, r0
    64c4:	2800      	cmp	r0, #0
    64c6:	d0ed      	beq.n	64a4 <flash_area_erase+0x2a>
    64c8:	e7f6      	b.n	64b8 <flash_area_erase+0x3e>
		(void) api->write_protection(dev, true);
    64ca:	2101      	movs	r1, #1
    64cc:	4630      	mov	r0, r6
    64ce:	4798      	blx	r3
    64d0:	e7f2      	b.n	64b8 <flash_area_erase+0x3e>
		return -EINVAL;
    64d2:	f06f 0415 	mvn.w	r4, #21
    64d6:	e7ef      	b.n	64b8 <flash_area_erase+0x3e>

000064d8 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    64d8:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    64da:	68c0      	ldr	r0, [r0, #12]
    64dc:	f7fd fdd0 	bl	4080 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    64e0:	6883      	ldr	r3, [r0, #8]
    64e2:	691b      	ldr	r3, [r3, #16]
    64e4:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    64e6:	6800      	ldr	r0, [r0, #0]
    64e8:	bd08      	pop	{r3, pc}

000064ea <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    64ea:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    64ec:	68c0      	ldr	r0, [r0, #12]
    64ee:	f7fd fdc7 	bl	4080 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    64f2:	6883      	ldr	r3, [r0, #8]
    64f4:	691b      	ldr	r3, [r3, #16]
    64f6:	4798      	blx	r3

	return param->erase_value;
}
    64f8:	7900      	ldrb	r0, [r0, #4]
    64fa:	bd08      	pop	{r3, pc}

000064fc <get_sectors_cb>:
{
    64fc:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    64fe:	6802      	ldr	r2, [r0, #0]
    6500:	684c      	ldr	r4, [r1, #4]
    6502:	42a2      	cmp	r2, r4
    6504:	d316      	bcc.n	6534 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    6506:	688b      	ldr	r3, [r1, #8]
    6508:	4423      	add	r3, r4
    650a:	429a      	cmp	r2, r3
    650c:	d206      	bcs.n	651c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    650e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    6512:	42ab      	cmp	r3, r5
    6514:	d304      	bcc.n	6520 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    6516:	f06f 030b 	mvn.w	r3, #11
    651a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    651c:	2000      	movs	r0, #0
    651e:	e00a      	b.n	6536 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6520:	68cd      	ldr	r5, [r1, #12]
    6522:	1b12      	subs	r2, r2, r4
    6524:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6528:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    652a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    652e:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    6530:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    6532:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    6534:	2001      	movs	r0, #1
}
    6536:	bd70      	pop	{r4, r5, r6, pc}

00006538 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    6538:	2000      	movs	r0, #0
{
    653a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    653c:	f7fb fa7a 	bl	1a34 <sys_reboot>

00006540 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    6540:	4770      	bx	lr

00006542 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6542:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6544:	6800      	ldr	r0, [r0, #0]
    6546:	f7fb bb1d 	b.w	1b84 <z_arm_fatal_error>

0000654a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    654a:	2100      	movs	r1, #0
    654c:	2001      	movs	r0, #1
    654e:	f7fb bb19 	b.w	1b84 <z_arm_fatal_error>

00006552 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6552:	b508      	push	{r3, lr}
	handler();
    6554:	f7fb fb78 	bl	1c48 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    655c:	f7fb bbea 	b.w	1d34 <z_arm_exc_exit>

00006560 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6560:	e840 f000 	tt	r0, r0
    6564:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    6566:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    656a:	bf14      	ite	ne
    656c:	4618      	movne	r0, r3
    656e:	f06f 0015 	mvneq.w	r0, #21
    6572:	4770      	bx	lr

00006574 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6574:	4603      	mov	r3, r0
	size_t n = 0;
    6576:	2000      	movs	r0, #0

	while (*s != '\0') {
    6578:	5c1a      	ldrb	r2, [r3, r0]
    657a:	b902      	cbnz	r2, 657e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    657c:	4770      	bx	lr
		n++;
    657e:	3001      	adds	r0, #1
    6580:	e7fa      	b.n	6578 <strlen+0x4>

00006582 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    6582:	3801      	subs	r0, #1
    6584:	3901      	subs	r1, #1
    6586:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    658a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    658e:	4293      	cmp	r3, r2
    6590:	d101      	bne.n	6596 <strcmp+0x14>
    6592:	2b00      	cmp	r3, #0
    6594:	d1f7      	bne.n	6586 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    6596:	1a98      	subs	r0, r3, r2
    6598:	4770      	bx	lr

0000659a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    659a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    659c:	b15a      	cbz	r2, 65b6 <memcmp+0x1c>
    659e:	3901      	subs	r1, #1
    65a0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    65a2:	f810 2b01 	ldrb.w	r2, [r0], #1
    65a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    65aa:	42a0      	cmp	r0, r4
    65ac:	d001      	beq.n	65b2 <memcmp+0x18>
    65ae:	429a      	cmp	r2, r3
    65b0:	d0f7      	beq.n	65a2 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    65b2:	1ad0      	subs	r0, r2, r3
}
    65b4:	bd10      	pop	{r4, pc}
		return 0;
    65b6:	4610      	mov	r0, r2
    65b8:	e7fc      	b.n	65b4 <memcmp+0x1a>

000065ba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    65ba:	b510      	push	{r4, lr}
    65bc:	1e43      	subs	r3, r0, #1
    65be:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    65c0:	4291      	cmp	r1, r2
    65c2:	d100      	bne.n	65c6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    65c4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    65c6:	f811 4b01 	ldrb.w	r4, [r1], #1
    65ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    65ce:	e7f7      	b.n	65c0 <memcpy+0x6>

000065d0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    65d0:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    65d2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    65d4:	4402      	add	r2, r0
    65d6:	4293      	cmp	r3, r2
    65d8:	d100      	bne.n	65dc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    65da:	4770      	bx	lr
		*(d_byte++) = c_byte;
    65dc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    65e0:	e7f9      	b.n	65d6 <memset+0x6>

000065e2 <_stdout_hook_default>:
}
    65e2:	f04f 30ff 	mov.w	r0, #4294967295
    65e6:	4770      	bx	lr

000065e8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    65e8:	b2cb      	uxtb	r3, r1
    65ea:	210c      	movs	r1, #12
    65ec:	6902      	ldr	r2, [r0, #16]
    65ee:	fb03 2101 	mla	r1, r3, r1, r2
    65f2:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    65f4:	f000 0007 	and.w	r0, r0, #7
    65f8:	4770      	bx	lr

000065fa <set_off_state>:
	__asm__ volatile(
    65fa:	f04f 0320 	mov.w	r3, #32
    65fe:	f3ef 8211 	mrs	r2, BASEPRI
    6602:	f383 8812 	msr	BASEPRI_MAX, r3
    6606:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    660a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    660c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6610:	d001      	beq.n	6616 <set_off_state+0x1c>
    6612:	428b      	cmp	r3, r1
    6614:	d107      	bne.n	6626 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6616:	2301      	movs	r3, #1
    6618:	6003      	str	r3, [r0, #0]
	int err = 0;
    661a:	2000      	movs	r0, #0
	__asm__ volatile(
    661c:	f382 8811 	msr	BASEPRI, r2
    6620:	f3bf 8f6f 	isb	sy
}
    6624:	4770      	bx	lr
		err = -EPERM;
    6626:	f04f 30ff 	mov.w	r0, #4294967295
    662a:	e7f7      	b.n	661c <set_off_state+0x22>

0000662c <set_starting_state>:
{
    662c:	b510      	push	{r4, lr}
	__asm__ volatile(
    662e:	f04f 0320 	mov.w	r3, #32
    6632:	f3ef 8211 	mrs	r2, BASEPRI
    6636:	f383 8812 	msr	BASEPRI_MAX, r3
    663a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    663e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6640:	f003 0407 	and.w	r4, r3, #7
    6644:	2c01      	cmp	r4, #1
    6646:	d106      	bne.n	6656 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6648:	6001      	str	r1, [r0, #0]
	int err = 0;
    664a:	2000      	movs	r0, #0
	__asm__ volatile(
    664c:	f382 8811 	msr	BASEPRI, r2
    6650:	f3bf 8f6f 	isb	sy
}
    6654:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    665a:	428b      	cmp	r3, r1
		err = -EALREADY;
    665c:	bf14      	ite	ne
    665e:	f04f 30ff 	movne.w	r0, #4294967295
    6662:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    6666:	e7f1      	b.n	664c <set_starting_state+0x20>

00006668 <set_on_state>:
	__asm__ volatile(
    6668:	f04f 0320 	mov.w	r3, #32
    666c:	f3ef 8211 	mrs	r2, BASEPRI
    6670:	f383 8812 	msr	BASEPRI_MAX, r3
    6674:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6678:	6803      	ldr	r3, [r0, #0]
    667a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    667e:	f043 0302 	orr.w	r3, r3, #2
    6682:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6684:	f382 8811 	msr	BASEPRI, r2
    6688:	f3bf 8f6f 	isb	sy
}
    668c:	4770      	bx	lr

0000668e <api_blocking_start>:
}
    668e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6692:	4770      	bx	lr

00006694 <onoff_started_callback>:
{
    6694:	b410      	push	{r4}
	notify(mgr, 0);
    6696:	241c      	movs	r4, #28
	return &data->mgr[type];
    6698:	6900      	ldr	r0, [r0, #16]
    669a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    669c:	fb03 0004 	mla	r0, r3, r4, r0
    66a0:	2100      	movs	r1, #0
}
    66a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    66a6:	4710      	bx	r2

000066a8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    66a8:	2000      	movs	r0, #0
    66aa:	f7fd b8ab 	b.w	3804 <nrfx_clock_start>

000066ae <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    66ae:	2000      	movs	r0, #0
    66b0:	f7fd b8da 	b.w	3868 <nrfx_clock_stop>

000066b4 <api_stop>:
{
    66b4:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    66b6:	240c      	movs	r4, #12
    66b8:	b2c9      	uxtb	r1, r1
    66ba:	434c      	muls	r4, r1
{
    66bc:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    66be:	6900      	ldr	r0, [r0, #16]
    66c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
    66c4:	2180      	movs	r1, #128	; 0x80
    66c6:	4418      	add	r0, r3
    66c8:	f7ff ff97 	bl	65fa <set_off_state>
	if (err < 0) {
    66cc:	2800      	cmp	r0, #0
    66ce:	db04      	blt.n	66da <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    66d0:	6869      	ldr	r1, [r5, #4]
    66d2:	440c      	add	r4, r1
    66d4:	6863      	ldr	r3, [r4, #4]
    66d6:	4798      	blx	r3
	return 0;
    66d8:	2000      	movs	r0, #0
}
    66da:	bd38      	pop	{r3, r4, r5, pc}

000066dc <api_start>:
{
    66dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    66e0:	240c      	movs	r4, #12
    66e2:	b2c9      	uxtb	r1, r1
    66e4:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    66e6:	6905      	ldr	r5, [r0, #16]
{
    66e8:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    66ea:	f104 0040 	add.w	r0, r4, #64	; 0x40
    66ee:	2180      	movs	r1, #128	; 0x80
    66f0:	4428      	add	r0, r5
{
    66f2:	4690      	mov	r8, r2
    66f4:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    66f6:	f7ff ff99 	bl	662c <set_starting_state>
	if (err < 0) {
    66fa:	2800      	cmp	r0, #0
    66fc:	db06      	blt.n	670c <api_start+0x30>
	subdata->cb = cb;
    66fe:	4425      	add	r5, r4
	subdata->user_data = user_data;
    6700:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6704:	6873      	ldr	r3, [r6, #4]
    6706:	591b      	ldr	r3, [r3, r4]
    6708:	4798      	blx	r3
	return 0;
    670a:	2000      	movs	r0, #0
}
    670c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006710 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6710:	6843      	ldr	r3, [r0, #4]
}
    6712:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6714:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6716:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6718:	600b      	str	r3, [r1, #0]
}
    671a:	4770      	bx	lr

0000671c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    671c:	6843      	ldr	r3, [r0, #4]
    671e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6720:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6722:	4042      	eors	r2, r0
    6724:	400a      	ands	r2, r1
    6726:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6728:	605a      	str	r2, [r3, #4]
}
    672a:	2000      	movs	r0, #0
    672c:	4770      	bx	lr

0000672e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    672e:	6843      	ldr	r3, [r0, #4]
}
    6730:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6732:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6734:	6099      	str	r1, [r3, #8]
}
    6736:	4770      	bx	lr

00006738 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6738:	6843      	ldr	r3, [r0, #4]
}
    673a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    673c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    673e:	60d9      	str	r1, [r3, #12]
}
    6740:	4770      	bx	lr

00006742 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6742:	6843      	ldr	r3, [r0, #4]
}
    6744:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6746:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6748:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    674a:	4059      	eors	r1, r3
    p_reg->OUT = value;
    674c:	6051      	str	r1, [r2, #4]
}
    674e:	4770      	bx	lr

00006750 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6750:	6903      	ldr	r3, [r0, #16]
{
    6752:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    6754:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6756:	b158      	cbz	r0, 6770 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6758:	2400      	movs	r4, #0
    675a:	4281      	cmp	r1, r0
    675c:	d113      	bne.n	6786 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    675e:	6808      	ldr	r0, [r1, #0]
    6760:	b95c      	cbnz	r4, 677a <gpio_nrfx_manage_callback+0x2a>
    6762:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    6764:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6766:	42a1      	cmp	r1, r4
    6768:	d100      	bne.n	676c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    676a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    676c:	2000      	movs	r0, #0
    676e:	6008      	str	r0, [r1, #0]
	if (set) {
    6770:	b972      	cbnz	r2, 6790 <gpio_nrfx_manage_callback+0x40>
	return 0;
    6772:	2000      	movs	r0, #0
}
    6774:	bd30      	pop	{r4, r5, pc}
    6776:	4628      	mov	r0, r5
    6778:	e7ef      	b.n	675a <gpio_nrfx_manage_callback+0xa>
    677a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    677c:	6898      	ldr	r0, [r3, #8]
    677e:	4281      	cmp	r1, r0
	list->tail = node;
    6780:	bf08      	it	eq
    6782:	609c      	streq	r4, [r3, #8]
}
    6784:	e7f2      	b.n	676c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    6786:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6788:	4604      	mov	r4, r0
    678a:	2d00      	cmp	r5, #0
    678c:	d1f3      	bne.n	6776 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    678e:	b13a      	cbz	r2, 67a0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    6790:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6792:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6794:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    6796:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6798:	2800      	cmp	r0, #0
    679a:	d1ea      	bne.n	6772 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    679c:	6099      	str	r1, [r3, #8]
}
    679e:	e7e9      	b.n	6774 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    67a0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    67a4:	e7e6      	b.n	6774 <gpio_nrfx_manage_callback+0x24>

000067a6 <is_regular_addr_valid>:
{
    67a6:	b538      	push	{r3, r4, r5, lr}
    67a8:	4604      	mov	r4, r0
    67aa:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    67ac:	f000 f987 	bl	6abe <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    67b0:	4284      	cmp	r4, r0
    67b2:	d209      	bcs.n	67c8 <is_regular_addr_valid+0x22>
    67b4:	2c00      	cmp	r4, #0
    67b6:	db07      	blt.n	67c8 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    67b8:	42a8      	cmp	r0, r5
    67ba:	d305      	bcc.n	67c8 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    67bc:	1961      	adds	r1, r4, r5
	    len > flash_size ||
    67be:	4281      	cmp	r1, r0
    67c0:	bf8c      	ite	hi
    67c2:	2000      	movhi	r0, #0
    67c4:	2001      	movls	r0, #1
}
    67c6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    67c8:	2000      	movs	r0, #0
    67ca:	e7fc      	b.n	67c6 <is_regular_addr_valid+0x20>

000067cc <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    67cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    67d0:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    67d2:	6883      	ldr	r3, [r0, #8]
{
    67d4:	b086      	sub	sp, #24
    67d6:	4688      	mov	r8, r1
    67d8:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    67da:	695b      	ldr	r3, [r3, #20]
    67dc:	aa02      	add	r2, sp, #8
    67de:	a901      	add	r1, sp, #4
    67e0:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    67e2:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    67e4:	4625      	mov	r5, r4
    67e6:	9b02      	ldr	r3, [sp, #8]
    67e8:	42ab      	cmp	r3, r5
    67ea:	d802      	bhi.n	67f2 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    67ec:	b006      	add	sp, #24
    67ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    67f2:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    67f4:	9f01      	ldr	r7, [sp, #4]
    67f6:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    67fe:	683a      	ldr	r2, [r7, #0]
    6800:	eb0a 0306 	add.w	r3, sl, r6
    6804:	42b2      	cmp	r2, r6
    6806:	d802      	bhi.n	680e <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6808:	469a      	mov	sl, r3
    680a:	3501      	adds	r5, #1
    680c:	e7eb      	b.n	67e6 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    680e:	4649      	mov	r1, r9
    6810:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    6812:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6814:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6816:	47c0      	blx	r8
    6818:	2800      	cmp	r0, #0
    681a:	d0e7      	beq.n	67ec <flash_page_foreach+0x20>
			off += page_info.size;
    681c:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    681e:	3601      	adds	r6, #1
			off += page_info.size;
    6820:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    6822:	e7ec      	b.n	67fe <flash_page_foreach+0x32>

00006824 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6824:	6843      	ldr	r3, [r0, #4]
    6826:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6828:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    682c:	05d1      	lsls	r1, r2, #23
    682e:	d518      	bpl.n	6862 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6830:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6834:	b1aa      	cbz	r2, 6862 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6836:	f04f 0120 	mov.w	r1, #32
    683a:	f3ef 8211 	mrs	r2, BASEPRI
    683e:	f381 8812 	msr	BASEPRI_MAX, r1
    6842:	f3bf 8f6f 	isb	sy
    6846:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    684a:	b131      	cbz	r1, 685a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    684c:	2100      	movs	r1, #0
    684e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6852:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6856:	2101      	movs	r1, #1
    6858:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    685a:	f382 8811 	msr	BASEPRI, r2
    685e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6862:	6842      	ldr	r2, [r0, #4]
    6864:	6852      	ldr	r2, [r2, #4]
    6866:	06d2      	lsls	r2, r2, #27
    6868:	d515      	bpl.n	6896 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    686a:	f04f 0120 	mov.w	r1, #32
    686e:	f3ef 8211 	mrs	r2, BASEPRI
    6872:	f381 8812 	msr	BASEPRI_MAX, r1
    6876:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    687a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    687e:	b111      	cbz	r1, 6886 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6880:	2100      	movs	r1, #0
    6882:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6886:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    688a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    688e:	f382 8811 	msr	BASEPRI, r2
    6892:	f3bf 8f6f 	isb	sy
}
    6896:	4770      	bx	lr

00006898 <uarte_nrfx_config_get>:
{
    6898:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    689a:	6902      	ldr	r2, [r0, #16]
    689c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    68a0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    68a4:	2000      	movs	r0, #0
    68a6:	4770      	bx	lr

000068a8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    68a8:	6843      	ldr	r3, [r0, #4]
    68aa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    68ac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    68b0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    68b4:	4770      	bx	lr

000068b6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    68b6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    68b8:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68ba:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    68be:	b940      	cbnz	r0, 68d2 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    68c0:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    68c2:	0792      	lsls	r2, r2, #30
    68c4:	d406      	bmi.n	68d4 <is_tx_ready+0x1e>
    68c6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    68ca:	3800      	subs	r0, #0
    68cc:	bf18      	it	ne
    68ce:	2001      	movne	r0, #1
    68d0:	4770      	bx	lr
    68d2:	2001      	movs	r0, #1
}
    68d4:	4770      	bx	lr

000068d6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    68d6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    68d8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    68da:	681b      	ldr	r3, [r3, #0]
    68dc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    68e0:	b148      	cbz	r0, 68f6 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    68e2:	2000      	movs	r0, #0
	*c = data->rx_data;
    68e4:	7c52      	ldrb	r2, [r2, #17]
    68e6:	700a      	strb	r2, [r1, #0]
    68e8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    68ec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    68f0:	2201      	movs	r2, #1
    68f2:	601a      	str	r2, [r3, #0]
	return 0;
    68f4:	4770      	bx	lr
		return -1;
    68f6:	f04f 30ff 	mov.w	r0, #4294967295
}
    68fa:	4770      	bx	lr

000068fc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    68fc:	b510      	push	{r4, lr}
    68fe:	4604      	mov	r4, r0
    6900:	2200      	movs	r2, #0
    6902:	2101      	movs	r1, #1
    6904:	2008      	movs	r0, #8
    6906:	f7fb f989 	bl	1c1c <z_arm_irq_priority_set>
    690a:	2008      	movs	r0, #8
    690c:	f7fb f968 	bl	1be0 <arch_irq_enable>
    6910:	4620      	mov	r0, r4
    6912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6916:	f7fc ba5f 	b.w	2dd8 <uarte_instance_init.isra.0>

0000691a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    691a:	b510      	push	{r4, lr}
    691c:	4604      	mov	r4, r0
    691e:	2200      	movs	r2, #0
    6920:	2101      	movs	r1, #1
    6922:	2009      	movs	r0, #9
    6924:	f7fb f97a 	bl	1c1c <z_arm_irq_priority_set>
    6928:	2009      	movs	r0, #9
    692a:	f7fb f959 	bl	1be0 <arch_irq_enable>
    692e:	4620      	mov	r0, r4
    6930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6934:	f7fc ba50 	b.w	2dd8 <uarte_instance_init.isra.0>

00006938 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6938:	f7fd bd3c 	b.w	43b4 <nrf_cc3xx_platform_init_no_rng>

0000693c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    693c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    693e:	f7fb f8fd 	bl	1b3c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6942:	f7ff fdfd 	bl	6540 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    6946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    694a:	f7fd bd33 	b.w	43b4 <nrf_cc3xx_platform_init_no_rng>

0000694e <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    694e:	b538      	push	{r3, r4, r5, lr}
    6950:	460c      	mov	r4, r1
    6952:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    6954:	f7ff fdc9 	bl	64ea <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    6958:	4621      	mov	r1, r4
    695a:	4425      	add	r5, r4
    695c:	42a9      	cmp	r1, r5
    695e:	d101      	bne.n	6964 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    6960:	2001      	movs	r0, #1
}
    6962:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    6964:	f811 3b01 	ldrb.w	r3, [r1], #1
    6968:	4298      	cmp	r0, r3
    696a:	d0f7      	beq.n	695c <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    696c:	2000      	movs	r0, #0
    696e:	e7f8      	b.n	6962 <bootutil_buffer_is_erased.part.0+0x14>

00006970 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6970:	6880      	ldr	r0, [r0, #8]
}
    6972:	3828      	subs	r0, #40	; 0x28
    6974:	4770      	bx	lr

00006976 <boot_magic_compatible_check>:
    switch (tbl_val) {
    6976:	2804      	cmp	r0, #4
    6978:	d009      	beq.n	698e <boot_magic_compatible_check+0x18>
    697a:	2805      	cmp	r0, #5
    697c:	d103      	bne.n	6986 <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    697e:	1e48      	subs	r0, r1, #1
    6980:	bf18      	it	ne
    6982:	2001      	movne	r0, #1
    6984:	4770      	bx	lr
        return tbl_val == val;
    6986:	1a43      	subs	r3, r0, r1
    6988:	4258      	negs	r0, r3
    698a:	4158      	adcs	r0, r3
    698c:	4770      	bx	lr
    switch (tbl_val) {
    698e:	2001      	movs	r0, #1
}
    6990:	4770      	bx	lr

00006992 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6992:	b111      	cbz	r1, 699a <bootutil_buffer_is_erased+0x8>
    6994:	b10a      	cbz	r2, 699a <bootutil_buffer_is_erased+0x8>
    6996:	f7ff bfda 	b.w	694e <bootutil_buffer_is_erased.part.0>
}
    699a:	2000      	movs	r0, #0
    699c:	4770      	bx	lr

0000699e <boot_read_flag>:
{
    699e:	b538      	push	{r3, r4, r5, lr}
    69a0:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    69a2:	2301      	movs	r3, #1
{
    69a4:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    69a6:	4622      	mov	r2, r4
{
    69a8:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    69aa:	f7ff fd1c 	bl	63e6 <flash_area_read>
    if (rc < 0) {
    69ae:	2800      	cmp	r0, #0
    69b0:	db10      	blt.n	69d4 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    69b2:	2201      	movs	r2, #1
    69b4:	4621      	mov	r1, r4
    69b6:	4628      	mov	r0, r5
    69b8:	f7ff ffeb 	bl	6992 <bootutil_buffer_is_erased>
    69bc:	b118      	cbz	r0, 69c6 <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    69be:	2303      	movs	r3, #3
    return 0;
    69c0:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    69c2:	7023      	strb	r3, [r4, #0]
}
    69c4:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    69c6:	7823      	ldrb	r3, [r4, #0]
    69c8:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    69ca:	bf0c      	ite	eq
    69cc:	2301      	moveq	r3, #1
    69ce:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    69d0:	7023      	strb	r3, [r4, #0]
    69d2:	e7f7      	b.n	69c4 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    69d4:	2001      	movs	r0, #1
    69d6:	e7f5      	b.n	69c4 <boot_read_flag+0x26>

000069d8 <boot_write_trailer>:
{
    69d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    69dc:	461d      	mov	r5, r3
    69de:	4606      	mov	r6, r0
    69e0:	460f      	mov	r7, r1
    69e2:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    69e4:	f7ff fd78 	bl	64d8 <flash_area_align>
    69e8:	b2c3      	uxtb	r3, r0
    align = (inlen + align - 1) & ~(align - 1);
    69ea:	fa55 f480 	uxtab	r4, r5, r0
    69ee:	3c01      	subs	r4, #1
    69f0:	425b      	negs	r3, r3
    69f2:	401c      	ands	r4, r3
    69f4:	b2e4      	uxtb	r4, r4
    if (align > BOOT_MAX_ALIGN) {
    69f6:	2c08      	cmp	r4, #8
    69f8:	d81a      	bhi.n	6a30 <boot_write_trailer+0x58>
    erased_val = flash_area_erased_val(fap);
    69fa:	4630      	mov	r0, r6
    69fc:	f7ff fd75 	bl	64ea <flash_area_erased_val>
    6a00:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6a02:	462a      	mov	r2, r5
    6a04:	4641      	mov	r1, r8
    6a06:	4668      	mov	r0, sp
    6a08:	f7ff fdd7 	bl	65ba <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    6a0c:	4649      	mov	r1, r9
    6a0e:	1b62      	subs	r2, r4, r5
    6a10:	eb0d 0005 	add.w	r0, sp, r5
    6a14:	f7ff fddc 	bl	65d0 <memset>
    rc = flash_area_write(fap, off, buf, align);
    6a18:	4623      	mov	r3, r4
    6a1a:	466a      	mov	r2, sp
    6a1c:	4639      	mov	r1, r7
    6a1e:	4630      	mov	r0, r6
    6a20:	f7ff fcfd 	bl	641e <flash_area_write>
    if (rc != 0) {
    6a24:	3800      	subs	r0, #0
    6a26:	bf18      	it	ne
    6a28:	2001      	movne	r0, #1
}
    6a2a:	b003      	add	sp, #12
    6a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    6a30:	f04f 30ff 	mov.w	r0, #4294967295
    6a34:	e7f9      	b.n	6a2a <boot_write_trailer+0x52>

00006a36 <boot_write_trailer_flag>:
{
    6a36:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    6a38:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    6a3a:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    6a3e:	aa01      	add	r2, sp, #4
    6a40:	f7ff ffca 	bl	69d8 <boot_write_trailer>
}
    6a44:	b003      	add	sp, #12
    6a46:	f85d fb04 	ldr.w	pc, [sp], #4

00006a4a <boot_write_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6a4a:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    6a4c:	2201      	movs	r2, #1
    6a4e:	3918      	subs	r1, #24
    6a50:	f7ff bff1 	b.w	6a36 <boot_write_trailer_flag>

00006a54 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    6a54:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    6a56:	3a18      	subs	r2, #24
    6a58:	f7ff bfa1 	b.w	699e <boot_read_flag>

00006a5c <boot_read_swap_state_by_id>:
{
    6a5c:	b513      	push	{r0, r1, r4, lr}
    6a5e:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    6a60:	b2c0      	uxtb	r0, r0
    6a62:	a901      	add	r1, sp, #4
    6a64:	f7fb f818 	bl	1a98 <flash_area_open>
    if (rc != 0) {
    6a68:	b950      	cbnz	r0, 6a80 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    6a6a:	4621      	mov	r1, r4
    6a6c:	9801      	ldr	r0, [sp, #4]
    6a6e:	f7fc fccf 	bl	3410 <boot_read_swap_state>
    6a72:	4604      	mov	r4, r0
    flash_area_close(fap);
    6a74:	9801      	ldr	r0, [sp, #4]
    6a76:	f7ff fcb5 	bl	63e4 <flash_area_close>
}
    6a7a:	4620      	mov	r0, r4
    6a7c:	b002      	add	sp, #8
    6a7e:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    6a80:	2401      	movs	r4, #1
    6a82:	e7fa      	b.n	6a7a <boot_read_swap_state_by_id+0x1e>

00006a84 <boot_write_swap_info>:
{
    6a84:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6a86:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6a8a:	6881      	ldr	r1, [r0, #8]
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6a8c:	f88d 2007 	strb.w	r2, [sp, #7]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    6a90:	2301      	movs	r3, #1
    6a92:	f10d 0207 	add.w	r2, sp, #7
    6a96:	3928      	subs	r1, #40	; 0x28
    6a98:	f7ff ff9e 	bl	69d8 <boot_write_trailer>
}
    6a9c:	b003      	add	sp, #12
    6a9e:	f85d fb04 	ldr.w	pc, [sp], #4

00006aa2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6aa2:	4700      	bx	r0

00006aa4 <nrfx_busy_wait>:
    6aa4:	f000 b825 	b.w	6af2 <z_impl_k_busy_wait>

00006aa8 <nrfx_clock_enable>:
{
    6aa8:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6aaa:	2005      	movs	r0, #5
    6aac:	f7fb f8a8 	bl	1c00 <arch_irq_is_enabled>
    6ab0:	b920      	cbnz	r0, 6abc <nrfx_clock_enable+0x14>
}
    6ab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6ab6:	2005      	movs	r0, #5
    6ab8:	f7fb b892 	b.w	1be0 <arch_irq_enable>
    6abc:	bd08      	pop	{r3, pc}

00006abe <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    6abe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6ac2:	4770      	bx	lr

00006ac4 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6ac4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6ac8:	4770      	bx	lr

00006aca <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    6aca:	f44f 7080 	mov.w	r0, #256	; 0x100
    6ace:	4770      	bx	lr

00006ad0 <z_device_state_init>:
}
    6ad0:	4770      	bx	lr

00006ad2 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6ad2:	b138      	cbz	r0, 6ae4 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6ad4:	68c3      	ldr	r3, [r0, #12]
    6ad6:	8818      	ldrh	r0, [r3, #0]
    6ad8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6adc:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6ae0:	4258      	negs	r0, r3
    6ae2:	4158      	adcs	r0, r3
}
    6ae4:	4770      	bx	lr

00006ae6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6ae6:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    6aea:	3800      	subs	r0, #0
    6aec:	bf18      	it	ne
    6aee:	2001      	movne	r0, #1
    6af0:	4770      	bx	lr

00006af2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6af2:	b108      	cbz	r0, 6af8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6af4:	f7fa bfc6 	b.w	1a84 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6af8:	4770      	bx	lr

00006afa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6afa:	4770      	bx	lr

00006afc <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    6afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b00:	9f06      	ldr	r7, [sp, #24]
    6b02:	4604      	mov	r4, r0
    6b04:	4615      	mov	r5, r2
    6b06:	461e      	mov	r6, r3
    6b08:	f7fd fe16 	bl	4738 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    6b0c:	b938      	cbnz	r0, 6b1e <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    6b0e:	463b      	mov	r3, r7
    6b10:	4632      	mov	r2, r6
    6b12:	4629      	mov	r1, r5
    6b14:	4620      	mov	r0, r4
    6b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b1a:	f7fd be33 	b.w	4784 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    6b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b22 <PkaInitAndMutexLock>:
    6b22:	460a      	mov	r2, r1
    6b24:	2100      	movs	r1, #0
    6b26:	f7fe b8b9 	b.w	4c9c <PkaInitPka>

00006b2a <SaSi_PalMemCopy>:
    6b2a:	f7ff bd46 	b.w	65ba <memcpy>

00006b2e <SaSi_PalMemSet>:
    6b2e:	f7ff bd4f 	b.w	65d0 <memset>

00006b32 <SaSi_PalMemSetZero>:
    6b32:	460a      	mov	r2, r1
    6b34:	2100      	movs	r1, #0
    6b36:	f7ff bd4b 	b.w	65d0 <memset>

00006b3a <CRYS_COMMON_ReverseMemcpy32>:
    6b3a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6b3e:	3804      	subs	r0, #4
    6b40:	428a      	cmp	r2, r1
    6b42:	d101      	bne.n	6b48 <CRYS_COMMON_ReverseMemcpy32+0xe>
    6b44:	2000      	movs	r0, #0
    6b46:	4770      	bx	lr
    6b48:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6b4c:	ba1b      	rev	r3, r3
    6b4e:	f840 3f04 	str.w	r3, [r0, #4]!
    6b52:	e7f5      	b.n	6b40 <CRYS_COMMON_ReverseMemcpy32+0x6>

00006b54 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    6b54:	f7fc bd38 	b.w	35c8 <SystemInit>
